!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r;!function(){"use strict";var i={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function o(e){return function(e,t){var n,r,s,a,c,u,l,h,p,f=1,d=e.length,g="";for(r=0;r<d;r++)if("string"==typeof e[r])g+=e[r];else if("object"==typeof e[r]){if((a=e[r]).keys)for(n=t[f],s=0;s<a.keys.length;s++){if(null==n)throw new Error(o('[sprintf] Cannot access property "%s" of undefined value "%s"',a.keys[s],a.keys[s-1]));n=n[a.keys[s]]}else n=a.param_no?t[a.param_no]:t[f++];if(i.not_type.test(a.type)&&i.not_primitive.test(a.type)&&n instanceof Function&&(n=n()),i.numeric_arg.test(a.type)&&"number"!=typeof n&&isNaN(n))throw new TypeError(o("[sprintf] expecting number but found %T",n));switch(i.number.test(a.type)&&(h=n>=0),a.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,a.width?parseInt(a.width):0);break;case"e":n=a.precision?parseFloat(n).toExponential(a.precision):parseFloat(n).toExponential();break;case"f":n=a.precision?parseFloat(n).toFixed(a.precision):parseFloat(n);break;case"g":n=a.precision?String(Number(n.toPrecision(a.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=a.precision?n.substring(0,a.precision):n;break;case"t":n=String(!!n),n=a.precision?n.substring(0,a.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=a.precision?n.substring(0,a.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=a.precision?n.substring(0,a.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}i.json.test(a.type)?g+=n:(!i.number.test(a.type)||h&&!a.sign?p="":(p=h?"+":"-",n=n.toString().replace(i.sign,"")),u=a.pad_char?"0"===a.pad_char?"0":a.pad_char.charAt(1):" ",l=a.width-(p+n).length,c=a.width&&l>0?u.repeat(l):"",g+=a.align?p+n+c:"0"===u?p+c+n:c+p+n)}return g}(function(e){if(a[e])return a[e];var t,n=e,r=[],o=0;for(;n;){if(null!==(t=i.text.exec(n)))r.push(t[0]);else if(null!==(t=i.modulo.exec(n)))r.push("%");else{if(null===(t=i.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){o|=1;var s=[],c=t[2],u=[];if(null===(u=i.key.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(s.push(u[1]);""!==(c=c.substring(u[0].length));)if(null!==(u=i.key_access.exec(c)))s.push(u[1]);else{if(null===(u=i.index_access.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");s.push(u[1])}t[2]=s}else o|=2;if(3===o)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");r.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return a[e]=r}(e),arguments)}function s(e,t){return o.apply(null,[e].concat(t||[]))}var a=Object.create(null);t.sprintf=o,t.vsprintf=s,"undefined"!=typeof window&&(window.sprintf=o,window.vsprintf=s,void 0===(r=function(){return{sprintf:o,vsprintf:s}}.call(t,n,t,e))||(e.exports=r))}()},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}function a(e){var t="function"==typeof Map?new Map:void 0;return(a=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return c(e,arguments,l(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),u(r,e)})(e)}function c(e,t,n){return(c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&u(i,n.prototype),i}).apply(null,arguments)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var h=function(e){function t(e){var n;return i(this,t),(n=o(this,l(t).call(this,e))).name="ValueError",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,a(Error)),t}(),p=function(e){function t(e){var n;return i(this,t),(n=o(this,l(t).call(this,e))).name="UnImplementedMethod",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,a(Error)),t}(),f=function(e){function t(e,n){var r;return i(this,t),(r=o(this,l(t).call(this,e))).name="IllegalArgument",r.argument=n,console.log("EXCEPTION: "+r.name+" MESSAGE: "+r.message),r}return s(t,a(Error)),t}(),d=function(e){function t(e){var n;return i(this,t),(n=o(this,l(t).call(this,e))).name="IllegalState",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,a(Error)),t}(),g=function(e,t,n){var r=new XMLHttpRequest;r.open(e.method||"GET",e.url),e.headers&&Object.keys(e.headers).forEach(function(t){r.setRequestHeader(t,e.headers[t])}),r.onload=function(){r.status>=200&&r.status<300?t(r):n(r)},r.onerror=function(){return n(r)},r.send(e.body)};function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var v=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"update",value:function(e){var t=e||{};this.region=t.region||this.region,this.endpointOverride=t.endpoint||this.endpointOverride,this.reconnect=!1!==t.reconnect}},{key:"getRegion",value:function(){return this.region}},{key:"getEndpointOverride",value:function(){return this.endpointOverride}}])&&m(t.prototype,n),r&&m(t,r),e}()),y="/contact/chat/participant/connection-details",b="post",w={"us-west-2":{invokeUrl:"https://eap1w93j0k.execute-api.us-west-2.amazonaws.com/prod"},"us-east-1":{invokeUrl:"https://4agcjusx3k.execute-api.us-east-1.amazonaws.com/prod"},"ap-southeast-2":{invokeUrl:"https://v4u8oq0cve.execute-api.ap-southeast-2.amazonaws.com/prod"},"ap-northeast-1":{invokeUrl:"https://3fidunfyz7.execute-api.ap-northeast-1.amazonaws.com/prod"},"eu-central-1":{invokeUrl:"https://1gynaarm3e.execute-api.eu-central-1.amazonaws.com/prod"}},_=30,S=60,C={AGENT:"AGENT",CUSTOMER:"CUSTOMER"},E="INCOMING_MESSAGE",k="INCOMING_TYPING",T="CONNECTION_ESTABLISHED",I="CONNECTION_LOST",A="CONNECTION_BROKEN",R="CHAT_ENDED",x={textPlain:"text/plain",connectionAcknowledged:"application/vnd.amazonaws.connect.event.connection.acknowledged",typing:"application/vnd.amazonaws.connect.event.typing",participantJoined:"application/vnd.amazonaws.connect.event.participant.joined",participantLeft:"application/vnd.amazonaws.connect.event.participant.left",transferSucceeded:"application/vnd.amazonaws.connect.event.transfer.succeeded",transferFailed:"application/vnd.amazonaws.connect.event.transfer.failed",chatEnded:"application/vnd.amazonaws.connect.event.chat.ended"},P=15,O="ASCENDING",N="BACKWARD",L="NULL",M="CLIENT_LOGGER",D="DEBUG",q="us-west-2",U={interval:3e3,maxRetries:5},j={interval:3e3,maxRetries:5},B=n(1);function F(e){return(F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var H={assertTrue:function(e,t){if(!e)throw new h(t)},assertNotNull:function(e,t){return H.assertTrue(null!==e&&void 0!==F(e),Object(B.sprintf)("%s must be provided",t||"A value")),e},now:function(){return(new Date).getTime()},isString:function(e){return"string"==typeof e},randomId:function(){return Object(B.sprintf)("%s-%s",H.now(),Math.random().toString(36).slice(2))},assertIsNonEmptyString:function(e,t){if(!e||"string"!=typeof e)throw new f(t+" is not a non-empty string!")},assertIsList:function(e,t){if(!Array.isArray(e))throw new f(t+" is not an array")},assertIsEnum:function(e,t,n){var r;for(r=0;r<t.length;r++)if(t[r]===e)return;throw new f(n+" passed is not valid. Allowed values are: "+t)},makeEnum:function(e){var t={};return e.forEach(function(e){var n=e.replace(/\.?([a-z]+)_?/g,function(e,t){return t.toUpperCase()+"_"}).replace(/_$/,"");t[n]=e}),t},contains:function(e,t){return e instanceof Array?null!==H.find(e,function(e){return e===t}):t in e},find:function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return e[n];return null},containsValue:function(e,t){return e instanceof Array?null!==H.find(e,function(e){return e===t}):null!==H.find(H.values(e),function(e){return e===t})},isFunction:function(e){return!!(e&&e.constructor&&e.call&&e.apply)},values:function(e){var t=[];for(var n in H.assertNotNull(e,"map"),e)t.push(e[n]);return t},isObject:function(e){return!("object"!==F(e)||null===e)},assertIsObject:function(e,t){if(!H.isObject(e))throw new f(t+" is not an object!")},delay:function(e){return new Promise(function(t){return setTimeout(t,e)})},asyncWhileInterval:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,o=new Date;return t(r)?e(r).catch(function(i){var s=Math.max(0,n-(new Date).valueOf()+o.valueOf());return H.delay(s).then(function(){return H.asyncWhileInterval(e,t,n,r+1,i)})}):Promise.reject(i||new Error("async while aborted"))}},V=H;function z(e){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function W(e,t){return!t||"object"!==z(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function G(e){return(G=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function K(e,t){return(K=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function X(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function J(e,t,n){return t&&Y(e.prototype,t),n&&Y(e,n),e}var Q=function(){function e(){X(this,e)}return J(e,[{key:"debug",value:function(e){}},{key:"info",value:function(e){}},{key:"warn",value:function(e){}},{key:"error",value:function(e){}}]),e}(),$={DEBUG:10,INFO:20,WARN:30,ERROR:40},Z=function(){function e(){X(this,e),this.updateLoggerConfig(),this.consoleLoggerWrapper=ne()}return J(e,[{key:"writeToClientLogger",value:function(e,t){if(this.hasClientLogger())switch(e){case $.DEBUG:return this._clientLogger.debug(t);case $.INFO:return this._clientLogger.info(t);case $.WARN:return this._clientLogger.warn(t);case $.ERROR:return this._clientLogger.error(t)}}},{key:"isLevelEnabled",value:function(e){return e>=this._level}},{key:"hasClientLogger",value:function(){return null!==this._clientLogger}},{key:"getLogger",value:function(e){var t=e.prefix||"";return this._logsDestination===D?this.consoleLoggerWrapper:new te(t)}},{key:"updateLoggerConfig",value:function(e){var t=e||{};this._level=t.level||$.INFO,this._clientLogger=t.logger||null,this._logsDestination=L,t.debug&&(this._logsDestination=D),t.logger&&(this._logsDestination=M)}}]),e}(),ee=function(){function e(){X(this,e)}return J(e,[{key:"debug",value:function(){}},{key:"info",value:function(){}},{key:"warn",value:function(){}},{key:"error",value:function(){}}]),e}(),te=function(e){function t(e){var n;return X(this,t),(n=W(this,G(t).call(this))).prefix=e||"",n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&K(e,t)}(t,ee),J(t,[{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log($.DEBUG,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log($.INFO,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log($.WARN,t)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log($.ERROR,t)}},{key:"_shouldLog",value:function(e){return re.hasClientLogger()&&re.isLevelEnabled(e)}},{key:"_writeToClientLogger",value:function(e,t){re.writeToClientLogger(e,t)}},{key:"_log",value:function(e,t){if(this._shouldLog(e)){var n=this._convertToSingleStatement(t);this._writeToClientLogger(e,n)}}},{key:"_convertToSingleStatement",value:function(e){var t="";this.prefix&&(t+=this.prefix+" ");for(var n=0;n<e.length;n++){var r=e[n];t+=this._convertToString(r)+" "}return t}},{key:"_convertToString",value:function(e){try{if(!e)return"";if(V.isString(e))return e;if(V.isObject(e)&&V.isFunction(e.toString)){var t=e.toString();if("[object Object]"!==t)return t}return JSON.stringify(e)}catch(t){return console.error("Error while converting argument to string",e,t),""}}}]),t}(),ne=function(){var e=new ee;return e.debug=console.debug.bind(window.console),e.info=console.info.bind(window.console),e.warn=console.warn.bind(window.console),e.error=console.error.bind(window.console),e},re=new Z;n(7);function ie(e){return(ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function oe(e,t){return!t||"object"!==ie(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function se(e){return(se=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ae(e,t){return(ae=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ce(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ue(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function le(e,t,n){return t&&ue(e.prototype,t),n&&ue(e,n),e}var he=function(){function e(){ce(this,e),this.clientCache={}}return le(e,[{key:"getCachedClient",value:function(e){var t=Object.assign({},e),n=e.region||v.getRegion()||q;if(t.region=n,this.clientCache[n])return this.clientCache[n];var r=this._createAwsClient(t);return this.clientCache[n]=r,r}},{key:"_createAwsClient",value:function(e){var t=e.region,n=v.getEndpointOverride(),r=w[t];return n&&(r.invokeUrl=n),new fe({endpoint:r.invokeUrl,region:t})}}]),e}(),pe=function(){function e(){ce(this,e)}return le(e,[{key:"sendMessage",value:function(e,t,n){throw new p("sendTextMessage in ChatClient")}},{key:"disconnectParticipant",value:function(e){throw new p("disconnectParticipant in ChatClient")}},{key:"sendEvent",value:function(e,t,n){throw new p("sendEvent in ChatClient")}},{key:"createConnectionDetails",value:function(e){throw new p("reconnectChat in ChatClient")}},{key:"createParticipantConnection",value:function(e,t){throw new p("createConnection in ChatClient")}}]),e}(),fe=function(e){function t(e){var n;ce(this,t),n=oe(this,se(t).call(this));var r=new AWS.Credentials("",""),i=new AWS.Config({region:e.region,endpoint:e.endpoint,credentials:r});return n.chatClient=new AWS.ConnectParticipant(i),n.callHttpClient=g,n.invokeUrl=e.endpoint,n.logger=re.getLogger({prefix:"ChatClient"}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ae(e,t)}(t,pe),le(t,[{key:"createParticipantConnection",value:function(e,t){var n=this,r={Type:t,ParticipantToken:e},i=n.chatClient.createParticipantConnection(r);return n._sendRequest(i).then(function(e){return n.logger.info("successfully create connection request"),e}).catch(function(e){return n.logger.error("error when creating connection request"),Promise.reject(e)})}},{key:"disconnectParticipant",value:function(e){var t=this,n={ConnectionToken:e},r=t.chatClient.disconnectParticipant(n);return t._sendRequest(r).then(function(e){return t.logger.info("successfully disconnect participant"),e}).catch(function(e){return t.logger.error("error when disconnecting participant"),Promise.reject(e)})}},{key:"getTranscript",value:function(e,t){var n=this,r={MaxResults:t.maxResults,NextToken:t.nextToken,ScanDirection:t.scanDirection,SortOrder:t.sortOrder,StartPosition:{Id:t.startPosition.id,AbsoluteTime:t.startPosition.absoluteTime,MostRecent:t.startPosition.mostRecent},ConnectionToken:e};t.contactId&&(r.ContactId=t.contactId);var i=n.chatClient.getTranscript(r);return n._sendRequest(i).then(function(e){return n.logger.info("successfully get transcript"),e}).catch(function(e){return n.logger.error("error when getting transcript"),Promise.reject(e)})}},{key:"sendMessage",value:function(e,t,n){var r=this,i={Content:t,ContentType:n,ConnectionToken:e},o=r.chatClient.sendMessage(i);return r._sendRequest(o).then(function(e){return r.logger.info("successfully send message"),e}).catch(function(e){return r.logger.error("error when sending message"),Promise.reject(e)})}},{key:"sendEvent",value:function(e,t,n){var r=this,i={ConnectionToken:e,ContentType:t,Content:n},o=r.chatClient.sendEvent(i);return r._sendRequest(o).then(function(e){return r.logger.info("successfully send event"),e}).catch(function(e){return r.logger.error("error when sending event"),Promise.reject(e)})}},{key:"_sendRequest",value:function(e){return new Promise(function(t,n){e.on("success",function(e){t(e)}).on("error",function(e){var t={type:e.code,message:e.message,stack:e.stack?e.stack.split("\n"):[]};n(t)}).send()})}},{key:"createConnectionDetails",value:function(e){var t={method:b,headers:{},url:this.invokeUrl+y,body:{}};return t.headers["x-amzn-connect-participant-token"]=e,this._callHttpClient(t)}},{key:"_callHttpClient",value:function(e){var t=this;return e.headers=Object.assign({"Content-Type":"application/json",Accept:"application/json"},e.headers),e.body=JSON.stringify(e.body),new Promise(function(n,r){t.callHttpClient(e,function(e){var t={};t.data=JSON.parse(e.responseText),n(t)},function(e){var n={};n.statusText=e.statusText;try{n.error=JSON.parse(e.responseText)}catch(e){t.logger.warn("invalid json error from server"),n.error=null}r(n)})})}}]),t}(),de=new he;function ge(e){return(ge="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function me(e,t){return!t||"object"!==ge(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ve(e){return(ve=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ye(e,t){return(ye=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function be(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function we(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _e(e,t,n){return t&&we(e.prototype,t),n&&we(e,n),e}var Se=function(){function e(){be(this,e)}return _e(e,[{key:"validateNewControllerDetails",value:function(e){return!0}},{key:"validateSendMessage",value:function(e){if(!V.isString(e.message))throw new f(e.message+"is not a valid message");this.validateContentType(e.contentType)}},{key:"validateContentType",value:function(e){V.assertIsEnum(e,Object.values(x),"contentType")}},{key:"validateConnectChat",value:function(e){return!0}},{key:"validateLogger",value:function(e){V.assertIsObject(e,"logger"),["debug","info","warn","error"].forEach(function(t){if(!V.isFunction(e[t]))throw new f(t+" should be a valid function on the passed logger object!")})}},{key:"validateSendEvent",value:function(e){this.validateContentType(e.contentType)}},{key:"validateGetMessages",value:function(e){return!0}}]),e}(),Ce=function(e){function t(){return be(this,t),me(this,ve(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ye(e,t)}(t,Se),_e(t,[{key:"validateChatDetails",value:function(e){if(V.assertIsObject(e,"chatDetails"),!e.participantToken&&!V.isFunction(e.getConnectionToken))throw new f("getConnectionToken was not a function",e.getConnectionToken);V.assertIsNonEmptyString(e.contactId,"chatDetails.contactId"),V.assertIsNonEmptyString(e.participantId,"chatDetails.participantId"),e.connectionDetails?(V.assertIsObject(e.connectionDetails,"chatDetails.connectionDetails"),V.assertIsNonEmptyString(e.connectionDetails.PreSignedConnectionUrl,"chatDetails.connectionDetails.PreSignedConnectionUrl"),V.assertIsNonEmptyString(e.connectionDetails.ConnectionId,"chatDetails.connectionDetails.ConnectionId"),V.assertIsNonEmptyString(e.connectionDetails.connectionToken,"chatDetails.connectionDetails.connectionToken")):e.participantToken&&V.assertIsNonEmptyString(e.participantToken,"chatDetails.participantToken")}},{key:"validateInitiateChatResponse",value:function(){return!0}},{key:"normalizeChatDetails",value:function(e){var t={};if(t.getConnectionToken=e.getConnectionToken||null,t.contactId=e.ContactId||e.contactId,t.participantId=e.ParticipantId||e.participantId,t.initialContactId=e.InitialContactId||e.initialContactId||t.contactId||t.ContactId,e.participantToken||e.ParticipantToken)return t.participantToken=e.ParticipantToken||e.participantToken,this.validateChatDetails(t),t;if(e.ChatConnectionAttributes&&e.ChatConnectionAttributes.ParticipantCredentials){this.validateInitiateChatResponse(e);var n={};return n.connectionToken=e.ChatConnectionAttributes.ParticipantCredentials.ConnectionAuthenticationToken,n.ConnectionId=e.ChatConnectionAttributes.ConnectionId,n.PreSignedConnectionUrl=e.ChatConnectionAttributes.PreSignedConnectionUrl,t.connectionDetails=n,t}return this.validateChatDetails(t),t}}]),t}();function Ee(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var ke={NeverStarted:"NeverStarted",Starting:"Starting",Connected:"Connected",ConnectionLost:"ConnectionLost",Ended:"Ended"},Te="ConnectionLost",Ie="ConnectionGained",Ae="Ended",Re="IncomingMessage",xe="IOT",Pe="LPC",Oe="WEBSOCKET",Ne="CONNECTION_CREDENTIALS",Le=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.connectionDetailsProvider=t,this.isStarted=!1}var t,n,r;return t=e,(n=[{key:"startConnectionTokenPolling",value:function(){var e=this;this.interval=setInterval(function(){e.connectionDetailsProvider.fetchConnectionToken()},432e5)}},{key:"start",value:function(){this.isStarted||(this.isStarted=!0,this.startConnectionTokenPolling())}},{key:"end",value:function(){clearInterval(this.interval)}},{key:"getConnectionToken",value:function(){return this.connectionDetailsProvider.connectionToken}}])&&Ee(t.prototype,n),r&&Ee(t,r),e}(),Me=function(e,t,n){this.subMap=e,this.id=V.randomId(),this.eventName=t,this.f=n};Me.prototype.unsubscribe=function(){this.subMap.unsubscribe(this.eventName,this.id)};var De=function(){this.subIdMap={},this.subEventNameMap={}};De.prototype.subscribe=function(e,t){var n=new Me(this,e,t);this.subIdMap[n.id]=n;var r=this.subEventNameMap[e]||[];return r.push(n),this.subEventNameMap[e]=r,function(){return n.unsubscribe()}},De.prototype.unsubscribe=function(e,t){V.contains(this.subEventNameMap,e)&&(this.subEventNameMap[e]=this.subEventNameMap[e].filter(function(e){return e.id!==t}),this.subEventNameMap[e].length<1&&delete this.subEventNameMap[e]),V.contains(this.subIdMap,t)&&delete this.subIdMap[t]},De.prototype.getAllSubscriptions=function(){return V.values(this.subEventNameMap).reduce(function(e,t){return e.concat(t)},[])},De.prototype.getSubscriptions=function(e){return this.subEventNameMap[e]||[]};var qe=function(e){var t=e||{};this.subMap=new De,this.logEvents=t.logEvents||!1};function Ue(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}qe.prototype.subscribe=function(e,t){return V.assertNotNull(e,"eventName"),V.assertNotNull(t,"f"),V.assertTrue(V.isFunction(t),"f must be a function"),this.subMap.subscribe(e,t)},qe.prototype.subscribeAll=function(e){return V.assertNotNull(e,"f"),V.assertTrue(V.isFunction(e),"f must be a function"),this.subMap.subscribe("<<all>>",e)},qe.prototype.getSubscriptions=function(e){return this.subMap.getSubscriptions(e)},qe.prototype.trigger=function(e,t){V.assertNotNull(e,"eventName");var n=this,r=this.subMap.getSubscriptions("<<all>>"),i=this.subMap.getSubscriptions(e);r.concat(i).forEach(function(r){try{r.f(t||null,e,n)}catch(e){}})},qe.prototype.triggerAsync=function(e,t){var n=this;setTimeout(function(){return n.trigger(e,t)},0)},qe.prototype.bridge=function(){var e=this;return function(t,n){e.trigger(n,t)}},qe.prototype.unsubscribeAll=function(){this.subMap.getAllSubscriptions().forEach(function(e){e.unsubscribe()})};var je=function(){function e(t,n,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.chatClient=r,this.participantToken=n||null,this.connectionDetails=t||null,this.connectionToken=null,this.connectionType=null,this.firstCall=!0,this.createConnectionToken=i||null}var t,n,r;return t=e,(n=[{key:"init",value:function(){var e=this;return!this.participantToken&&this.connectionDetails?Promise.resolve().then(function(){return e._handlePresetConnectionDetails(),e.connectionDetails}):this._fetchConnectionDetails().then(function(){return e.connectionDetails})}},{key:"fetchConnectionDetails",value:function(){var e=this;return this.firstCall?(this.firstCall=!1,Promise.resolve(this.connectionDetails)):this.participantToken||this.connectionType!==xe?this._fetchConnectionDetails().then(function(){return e.connectionDetails}):Promise.reject("Fatal: Cannot use static connection details more than once.")}},{key:"fetchConnectionToken",value:function(){var e=this;return this.firstCall?(this.firstCall=!1,Promise.resolve(this.connectionToken)):this.participantToken||this.connectionType!==xe?this._fetchConnectionDetails().then(function(){return e.connectionToken}):Promise.reject("Fatal: Cannot use static connection details more than once.")}},{key:"_handlePresetConnectionDetails",value:function(){this.connectionType=xe,this.connectionToken=this.connectionDetails.connectionToken,this.connectionDetails={connectionId:this.connectionDetails.ConnectionId,preSignedConnectionUrl:this.connectionDetails.PreSignedConnectionUrl}}},{key:"_handleCreateParticipantConnectionResponse",value:function(e){this.connectionType=Pe,this.connectionToken=e.ConnectionCredentials.ConnectionToken,this.connectionDetails={connectionId:null,preSignedConnectionUrl:e.Websocket.Url}}},{key:"_handleCreateConnectionDetailsResponse",value:function(e){e.PreSignedConnectionUrl?this.connectionType=e.PreSignedConnectionUrl.includes(".iot.")?xe:Pe:this.connectionType=e.connectionId?xe:Pe,this.connectionToken=e.ParticipantCredentials.ConnectionAuthenticationToken,this.connectionDetails={connectionId:e.ConnectionId,preSignedConnectionUrl:e.PreSignedConnectionUrl}}},{key:"_handleCreateConnectionTokenResponse",value:function(e){this.connectionToken=e,this.connectionType=Pe,this.connectionDetails={connectionId:null,preSignedConnectionUrl:null}}},{key:"_fetchConnectionDetails",value:function(){var e=this;return this.participantToken?this.chatClient.createParticipantConnection(this.participantToken,[Oe,Ne]).then(function(t){return null!==t.data.Websocket.Url&&t.data.Websocket.Url.includes(".iot.")?e.chatClient.createConnectionDetails(e.participantToken).then(function(t){return e._handleCreateConnectionDetailsResponse(t.data)}).catch(function(e){return Promise.reject({reason:"Failed to fetch connectionDetails with createConnectionDetails",_debug:e})}):e._handleCreateParticipantConnectionResponse(t.data)}).catch(function(e){return Promise.reject({reason:"Failed to fetch connectionDetails with createParticipantConnection",_debug:e})}):this.createConnectionToken?this.createConnectionToken().then(function(t){return e._handleCreateConnectionTokenResponse(t.chatTokenTransport.participantToken)}).catch(function(e){return Promise.reject({reason:"Failed to fetch connectionToken via createConnectionToken api",_debug:e})}):Promise.reject({reason:"Failed to fetch connectionDetails: a valid createConnectionToken was not supplied.",_debug:new f("createConnectionToken was invalid")})}}])&&Ue(t.prototype,n),r&&Ue(t,r),e}(),Be=n(4),Fe=n.n(Be);function He(e){return(He="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ve(e){return(Ve=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ze(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function We(e,t){return(We=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ge(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ke(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Xe(e,t,n){return t&&Ke(e.prototype,t),n&&Ke(e,n),e}var Ye=function(){function e(){Ge(this,e)}return Xe(e,[{key:"connect",value:function(e){throw new p("connect in IotClient")}},{key:"disconnect",value:function(){throw new p("connect in IotClient")}},{key:"subscribe",value:function(e,t){throw new p("connect in IotClient")}},{key:"unsubscribe",value:function(e,t){throw new p("connect in IotClient")}}]),e}(),Je=Object.freeze({NeverConnected:"NeverConnected",Connecting:"Connecting",Connected:"Connected",Disconnected:"Disconnected"}),Qe=Object.freeze({MESSAGE:"Message",DISCONNECTED:"Disconnected"}),$e=function(e){function t(e){var n;Ge(this,t),(n=function(e,t){return!t||"object"!==He(t)&&"function"!=typeof t?ze(e):t}(this,Ve(t).call(this))).preSignedUrl=e.preSignedUrl,n.connectionId=e.connectionId,n.status=Je.NeverConnected,n.pahoClient=new Fe.a.Client(n.preSignedUrl,n.connectionId);var r=ze(n);return n.pahoClient.onMessageArrived=function(e){r._messageArrivedCallback(e)},n.pahoClient.onConnectionLost=function(e){r._connectionLostCallBack(e)},n.pahoClient.onMessageArrived=function(e){r._messageArrivedCallback(e)},n.callback=e.callback,n.neverConnected=!0,n._subscribedTopics=[],n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&We(e,t)}(t,Ye),Xe(t,[{key:"connect",value:function(e){var t=this;return new Promise(function(n,r){e.onSuccess=function(e){t.neverConnected=!1,t._onConnectSuccess(e),n({})},e.onFailure=function(e){var n={reason:e};t._onConnectFailure(n),r(n)},t.status=Je.Connecting,t.pahoClient.connect(e)})}},{key:"_connectionLostCallBack",value:function(e){console.warn("Connection lost: ",e);var t={reason:e};this._subscribedTopics=[],this.status!==Je.Disconnected&&(this.status=Je.Disconnected,this.callback(Qe.DISCONNECTED,t))}},{key:"_messageArrivedCallback",value:function(e){var t={topic:e.topic,qos:e.qos,payloadString:e.payloadString};this.callback(Qe.MESSAGE,t)}},{key:"_onConnectSuccess",value:function(e){this.status=Je.Connected}},{key:"_onConnectFailure",value:function(e){this.neverConnected?this.status=Je.NeverConnected:this.status=Je.Disconnected}},{key:"disconnect",value:function(){this._subscribedTopics=[],this.status=Je.Disconnected,this.pahoClient.disconnect()}},{key:"subscribe",value:function(e,t){var n=this;return new Promise(function(r,i){t.onSuccess=function(t){n._subscribeSuccess(e,t);var i={topic:e,qos:t.grantedQos};r(i)},t.onFailure=function(t){i({topic:e,error:t})},n.pahoClient.subscribe(e,t)})}},{key:"_addToTopics",value:function(e){this._subscribedTopics.indexOf(e)>=0||this._subscribedTopics.push(e)}},{key:"_subscribeSuccess",value:function(e,t){this._addToTopics(e)}},{key:"getSubscribedTopics",value:function(){return this._subscribedTopics.slice(0)}},{key:"unsubscribe",value:function(e,t){var n=this;return new Promise(function(r,i){t.onSuccess=function(t){var i={topic:e,response:t};n._unsubscribeSuccess(e,i),r(i)},t.onFailure=function(t){i({topic:e,error:t})},n.pahoClient.unsubscribe(e,t)})}},{key:"_unsubscribeSuccess",value:function(e,t){this._subscribedTopics=this._subscribedTopics.filter(function(t){return t!==e})}},{key:"getStatus",value:function(){return this.status}}]),t}();function Ze(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function et(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function tt(e,t,n){return t&&et(e.prototype,t),n&&et(e,n),e}function nt(e){return(nt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var rt=function(){function e(){Ze(this,e)}return tt(e,[{key:"onOnline",value:function(){}},{key:"onOffline",value:function(){}},{key:"isOnline",value:function(){return!0}},{key:"whenOnline",value:function(){return Promise.resolve()}}]),e}(),it=function(){function e(){var t=this;Ze(this,e),this.eventBus=new qe,this.onlinePromise=null,window.addEventListener("online",function(){t.eventBus.trigger("online")}),window.addEventListener("offline",function(){t.eventBus.trigger("offline")})}return tt(e,[{key:"onOnline",value:function(e){return this.eventBus.subscribe("online",e)}},{key:"onOffline",value:function(e){return this.eventBus.subscribe("offline",e)}},{key:"isOnline",value:function(){return window.navigator.onLine}},{key:"whenOnline",value:function(){var e=this;return this.isOnline()?Promise.resolve():(this.onlinePromise||(this.onlinePromise=new Promise(function(t){var n=e.onOnline(function(){e.onlinePromise=null,n(),t()})})),this.onlinePromise)}}]),e}(),ot="object"===("undefined"==typeof window?"undefined":nt(window))&&window.navigator&&window.addEventListener?new it:new rt;function st(e){return(st="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function at(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ct(e,t){return!t||"object"!==st(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ut(e,t,n){return(ut="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=lt(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function lt(e){return(lt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ht(e,t){return(ht=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var pt=function(e){function t(e,n,r){var i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(i=ct(this,lt(t).call(this,n))).logger=re.getLogger({prefix:"ContactId-"+e+": "}),i.status=ke.NeverStarted,i.eventBus=new qe,i._unsubscribeFunctions=[],i.reconnectConfig=r,i._connectCalledAtleastOnce=!1,i._setNetworkEventHandlers(),i}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ht(e,t)}(t,Le),n=t,(r=[{key:"start",value:function(){if(ut(lt(t.prototype),"start",this).call(this),this.status!==ke.NeverStarted)throw new d("Connection helper started twice!!");return this.status=ke.Starting,this._initiateConnectWithRetry()}},{key:"end",value:function(){ut(lt(t.prototype),"end",this).call(this),this._handleBrokenConnection({reason:"user action"}),this.iotConnection&&this.iotConnection.disconnect()}},{key:"getStatus",value:function(){return this.status}},{key:"_initIotConnection",value:function(e){this.iotConnection=new $e({preSignedUrl:e.preSignedConnectionUrl,connectionId:e.connectionId,callback:this._handleIotEvent.bind(this)})}},{key:"_connect",value:function(){var e=this;return this._connectCalledAtleastOnce=!0,this.connectionDetailsProvider.fetchConnectionDetails().then(this._initIotConnection.bind(this)).then(function(){var t={useSSL:!0,keepAliveInterval:_,reconnect:!1,mqttVersion:4,timeout:S};return new Promise(function(n,r){e.iotConnection.connect(t).then(function(t){e._subscribe(n,r,t)}).catch(function(t){e._connectFailed(r,t)})})})}},{key:"_connectFailed",value:function(e,t){e({connectSuccess:!1,reason:"ConnectionToBrokerFailed",details:t})}},{key:"_subscribe",value:function(e,t){var n=this;this.iotConnection.subscribe(this.connectionDetailsProvider.connectionDetails.connectionId,{qos:1}).then(function(t){n._postSubscribe(e,t)}).catch(function(e){n._subscribeFailed(t,e)})}},{key:"_postSubscribe",value:function(e,t){e({details:t,connectSuccess:!0})}},{key:"_subscribeFailed",value:function(e,t){var n={connectSuccess:!1,details:t,reason:"SubscribtionToTopicFailed"};this.iotConnection.disconnect(),e(n)}},{key:"_handleIotEvent",value:function(e,t){switch(e){case Qe.MESSAGE:this.logger.debug("Received incoming data",t.payloadString);try{var n=JSON.parse(t.payloadString);this.eventBus.trigger(Re,n)}catch(e){this.logger.error("Wrong message format: ",t.payloadString)}break;case Qe.DISCONNECTED:v.reconnect&&0!==t.reason.errorCode?this._handleLostConnection(t):this._handleBrokenConnection(t)}}},{key:"_initiateConnectWithRetry",value:function(){var e=this;return this._initiateConnectPromise||(this._initiateConnectPromise=V.asyncWhileInterval(function(t){return e.logger.info("Connect - ".concat(t,". try")),e._connect()},function(t){return t<e.reconnectConfig.maxRetries&&e._canConnect()},this.reconnectConfig.interval).then(function(){e.logger.info("Connect - Success"),e._handleGainedConnection()}).catch(function(t){return e.logger.info("Connect - Failed"),ot.isOnline()?(e._handleBrokenConnection(t),e.iotConnection&&e.iotConnection.disconnect()):e.state!==ke.ConnectionLost&&e._handleLostConnection(t),Promise.reject(t)}).finally(function(){e._initiateConnectPromise=null})),this._initiateConnectPromise}},{key:"_canConnect",value:function(){return ot.isOnline()&&(this.status===ke.ConnectionLost||this.status===ke.Starting)}},{key:"_handleBrokenConnection",value:function(e){this.status!==ke.Ended&&(this.status=ke.Ended,this._unsubscribeFunctions.forEach(function(e){return e()}),this.eventBus.trigger(Ae,e))}},{key:"_handleLostConnection",value:function(e){this.status=ke.ConnectionLost,this.eventBus.trigger(Te,e),ot.isOnline()&&this._initiateConnectWithRetry().catch(function(){})}},{key:"_handleGainedConnection",value:function(){this.status=ke.Connected,this.eventBus.trigger(Ie,{})}},{key:"_setNetworkEventHandlers",value:function(){var e=this,t=ot.onOnline(function(){e._connectCalledAtleastOnce&&e._canConnect()&&e._initiateConnectWithRetry().catch(function(){})});this._unsubscribeFunctions.push(t)}},{key:"onEnded",value:function(e){return this.eventBus.subscribe(Ae,e)}},{key:"onConnectionLost",value:function(e){return this.eventBus.subscribe(Te,e)}},{key:"onConnectionGain",value:function(e){return this.eventBus.subscribe(Ie,e)}},{key:"onMessage",value:function(e){return this.eventBus.subscribe(Re,e)}}])&&at(n.prototype,r),i&&at(n,i),t}();function ft(e){return(ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function dt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function gt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function mt(e,t,n){return t&&gt(e.prototype,t),n&&gt(e,n),e}function vt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function yt(e,t,n){return(yt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=bt(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function bt(e){return(bt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function wt(e,t){return(wt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var _t=function(e){function t(e,n,r){var i;return dt(this,t),(i=function(e,t){return!t||"object"!==ft(t)&&"function"!=typeof t?vt(e):t}(this,bt(t).call(this,n))).cleanUpBaseInstance=!r,t.baseInstance||(t.baseInstance=new St(n,r)),i.initialContactId=e,i.status=null,i.eventBus=new qe,i.subscriptions=[t.baseInstance.onEnded(i.handleEnded.bind(vt(i))),t.baseInstance.onConnectionGain(i.handleConnectionGain.bind(vt(i))),t.baseInstance.onConnectionLost(i.handleConnectionLost.bind(vt(i))),t.baseInstance.onMessage(i.handleMessage.bind(vt(i)))],i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&wt(e,t)}(t,Le),mt(t,[{key:"start",value:function(){return yt(bt(t.prototype),"start",this).call(this),t.baseInstance.start()}},{key:"end",value:function(){yt(bt(t.prototype),"end",this).call(this),this.eventBus.unsubscribeAll(),this.subscriptions.forEach(function(e){return e()}),this.status=ke.Ended,t.baseInstance&&this.cleanUpBaseInstance&&(t.baseInstance.end(),t.baseInstance=null)}},{key:"getStatus",value:function(){return this.status||t.baseInstance.getStatus()}},{key:"onEnded",value:function(e){return this.eventBus.subscribe(Ae,e)}},{key:"handleEnded",value:function(){this.eventBus.trigger(Ae,{})}},{key:"onConnectionGain",value:function(e){return this.eventBus.subscribe(Ie,e)}},{key:"handleConnectionGain",value:function(){this.eventBus.trigger(Ie,{})}},{key:"onConnectionLost",value:function(e){return this.eventBus.subscribe(Te,e)}},{key:"handleConnectionLost",value:function(){this.eventBus.trigger(Te,{})}},{key:"onMessage",value:function(e){return this.eventBus.subscribe(Re,e)}},{key:"handleMessage",value:function(e){e.InitialContactId===this.initialContactId&&this.eventBus.trigger(Re,e)}}]),t}();_t.baseInstance=null;var St=function(){function e(t,n){dt(this,e),this.status=ke.NeverStarted,this.eventBus=new qe,this.logger=re.getLogger({prefix:"LPC WebSockets: "}),this.initWebsocketManager(n,t)}return mt(e,[{key:"initWebsocketManager",value:function(e,t){this.websocketManager=e||connect.WebSocketManager.create(),this.websocketManager.subscribeTopics(["aws/chat"]),this.subscriptions=[this.websocketManager.onMessage("aws/chat",this.handleMessage.bind(this)),this.websocketManager.onConnectionGain(this.handleConnectionGain.bind(this)),this.websocketManager.onConnectionLost(this.handleConnectionLost.bind(this)),this.websocketManager.onInitFailure(this.handleEnded.bind(this))],e||this.websocketManager.init(function(){return t.fetchConnectionDetails().then(function(e){return{webSocketTransport:{url:e.preSignedConnectionUrl,transportLifeTimeInSeconds:7140}}})})}},{key:"end",value:function(){this.websocketManager.closeWebSocket(),this.eventBus.unsubscribeAll(),this.subscriptions.forEach(function(e){return e()})}},{key:"start",value:function(){return this.status===ke.NeverStarted&&(this.status=ke.Starting),Promise.resolve()}},{key:"onEnded",value:function(e){return this.eventBus.subscribe(Ae,e)}},{key:"handleEnded",value:function(){this.status=ke.Ended,this.eventBus.trigger(Ae,{})}},{key:"onConnectionGain",value:function(e){return this.eventBus.subscribe(Ie,e)}},{key:"handleConnectionGain",value:function(){this.status=ke.Connected,this.eventBus.trigger(Ie,{})}},{key:"onConnectionLost",value:function(e){return this.eventBus.subscribe(Te,e)}},{key:"handleConnectionLost",value:function(){this.status=ke.ConnectionLost,this.eventBus.trigger(Te,{})}},{key:"onMessage",value:function(e){return this.eventBus.subscribe(Re,e)}},{key:"handleMessage",value:function(e){var t;try{t=JSON.parse(e.content),this.eventBus.trigger(Re,t)}catch(t){this.logger.error("Wrong message format: ",e)}}},{key:"getStatus",value:function(){return this.status}}]),e}(),Ct=_t;function Et(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var kt=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"get",value:function(e){var t=e.contactId,n=e.initialContactId,r=e.connectionDetails,i=e.participantToken,o=e.chatClient,s=e.websocketManager,a=e.createConnectionToken,c=e.reconnectConfig,u=new je(r,i,o,a);return u.init().then(function(){return u.connectionType===Pe?new Ct(n,u,s):u.connectionType===xe?new pt(t,u,c):void 0})}}])&&Et(t.prototype,n),r&&Et(t,r),e}());function Tt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var It="NeverEstablished",At="Establishing",Rt="Established",xt="Broken",Pt=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.logger=re.getLogger({prefix:"ContactId-"+t.chatDetails.contactId+": "}),this.argsValidator=new Ce,this.pubsub=new qe,this.sessionType=t.sessionType,this.connectionDetails=t.chatDetails.connectionDetails,this.initialContactId=t.chatDetails.initialContactId,this.contactId=t.chatDetails.contactId,this.participantId=t.chatDetails.participantId,this.chatClient=t.chatClient,this.participantToken=t.chatDetails.participantToken,this.websocketManager=t.websocketManager,this.createConnectionToken=t.chatDetails.getConnectionToken,this._participantDisconnected=!1,this.sessionMetadata={}}var t,n,r;return t=e,(n=[{key:"subscribe",value:function(e,t){this.pubsub.subscribe(e,t),this.logger.info("Subscribed successfully to eventName: ",e)}},{key:"handleRequestSuccess",value:function(e,t,n){var r=this;return function(i){return i.metadata=e,r.logger.debug("".concat(n," successful! Response: "),i," / Request: ",t),i}}},{key:"handleRequestFailure",value:function(e,t,n){var r=this;return function(i){return i.metadata=e,r.logger.debug("".concat(n," failed! Error: "),i," / Request: ",t),Promise.reject(i)}}},{key:"sendMessage",value:function(e){var t=e.metadata||null;this.argsValidator.validateSendMessage(e);var n=this.connectionHelper.getConnectionToken();return this.chatClient.sendMessage(n,e.message,e.contentType).then(this.handleRequestSuccess(t,e,"sendMessage")).catch(this.handleRequestFailure(t,e,"sendMessage"))}},{key:"sendEvent",value:function(e){var t=e.metadata||null;this.argsValidator.validateSendEvent(e);var n=this.connectionHelper.getConnectionToken(),r=e.content||null;return this.chatClient.sendEvent(n,e.contentType,r).then(this.handleRequestSuccess(t,e,"sendEvent")).catch(this.handleRequestFailure(t,e,"sendEvent"))}},{key:"getTranscript",value:function(e){if(this.connectionHelper.getStatus()===ke.Ended)return Promise.reject("AccessDeniedException");var t=e.metadata||null,n={startPosition:e.startPosition||{},scanDirection:e.scanDirection||N,sortOrder:e.sortOrder||O,maxResults:e.maxResults||P};e.nextToken&&(n.nextToken=e.nextToken),e.contactId&&(n.contactId=e.contactId);var r=this.connectionHelper.getConnectionToken();return this.chatClient.getTranscript(r,n).then(this.handleRequestSuccess(t,n,"getTranscript")).catch(this.handleRequestFailure(t,n,"getTranscript"))}},{key:"connect",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.sessionMetadata=e.metadata||null,this.argsValidator.validateConnectChat(e),kt.get({contactId:this.contactId,initialContactId:this.initialContactId,connectionDetails:this.connectionDetails,participantToken:this.participantToken,chatClient:this.chatClient,websocketManager:this.websocketManager,createConnectionToken:this.createConnectionToken,reconnectConfig:this.sessionType===C.AGENT?U:j}).then(this._initConnectionHelper.bind(this)).then(this._onConnectSuccess.bind(this),this._onConnectFailure.bind(this))}},{key:"_initConnectionHelper",value:function(e){return this.connectionHelper=e,this.connectionHelper.onEnded(this._handleEndedConnection.bind(this)),this.connectionHelper.onConnectionLost(this._handleLostConnection.bind(this)),this.connectionHelper.onConnectionGain(this._handleGainedConnection.bind(this)),this.connectionHelper.onMessage(this._handleIncomingMessage.bind(this)),this.connectionHelper.start()}},{key:"_handleEndedConnection",value:function(e){this._forwardChatEvent(A,{data:e,chatDetails:this.getChatDetails()})}},{key:"_handleLostConnection",value:function(e){this._forwardChatEvent(I,{data:e,chatDetails:this.getChatDetails()})}},{key:"_handleGainedConnection",value:function(e){this._forwardChatEvent(T,{data:e,chatDetails:this.getChatDetails()})}},{key:"_handleIncomingMessage",value:function(e){try{var t=e.ContentType===x.typing?k:E;this._forwardChatEvent(t,{data:e,chatDetails:this.getChatDetails()}),e.ContentType===x.chatEnded&&(this._forwardChatEvent(R,{data:null,chatDetails:this.getChatDetails()}),this.breakConnection())}catch(t){this.logger.error("Error occured while handling message from Connection. eventData: ",e," Causing exception: ",t)}}},{key:"_forwardChatEvent",value:function(e,t){this.logger.debug("Triggering event for subscribers:",e,t),this.pubsub.triggerAsync(e,t)}},{key:"_onConnectSuccess",value:function(e){this.logger.info("Connect successful!");var t={_debug:e,connectSuccess:!0,connectCalled:!0,metadata:this.sessionMetadata},n=Object.assign({chatDetails:this.getChatDetails()},t);return this.pubsub.triggerAsync(T,n),this._shouldAcknowledgeContact()&&this.sendEvent({contentType:x.connectionAcknowledged}),t}},{key:"_onConnectFailure",value:function(e){var t={_debug:e,connectSuccess:!1,connectCalled:!0,metadata:this.sessionMetadata};return this.logger.error("Connect Failed with data: ",t),Promise.reject(t)}},{key:"_shouldAcknowledgeContact",value:function(){return this.sessionType===C.AGENT}},{key:"breakConnection",value:function(){return this.connectionHelper?this.connectionHelper.end():Promise.resolve()}},{key:"cleanUpOnParticipantDisconnect",value:function(){this.pubsub.unsubscribeAll()}},{key:"disconnectParticipant",value:function(){var e=this,t=this.connectionHelper.getConnectionToken();return this.chatClient.disconnectParticipant(t).then(function(t){return e.logger.info("disconnect participant successful"),e._participantDisconnected=!0,e.cleanUpOnParticipantDisconnect(),e.breakConnection(),t},function(t){return e.logger.error("disconnect participant failed with error: ",t),Promise.reject(t)})}},{key:"getChatDetails",value:function(){return{initialContactId:this.initialContactId,contactId:this.contactId,participantId:this.participantId,participantToken:this.participantToken,connectionDetails:this.connectionDetails}}},{key:"_convertConnectionHelperStatus",value:function(e){switch(e){case ke.NeverStarted:return It;case ke.Starting:return At;case ke.Ended:case ke.ConnectionLost:return xt;case ke.Connected:return Rt}this.logger.error("Reached invalid state. Unknown connectionHelperStatus: ",e)}},{key:"getConnectionStatus",value:function(){return this._convertConnectionHelperStatus(this.connectionHelper.getStatus())}}])&&Tt(t.prototype,n),r&&Tt(t,r),e}();function Ot(e){return(Ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Nt(e,t){return!t||"object"!==Ot(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Lt(e){return(Lt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Mt(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Dt(e,t)}function Dt(e,t){return(Dt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function qt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ut(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function jt(e,t,n){return t&&Ut(e.prototype,t),n&&Ut(e,n),e}n.d(t,"a",function(){return Gt});var Bt=function(){function e(){qt(this,e)}return jt(e,[{key:"createAgentChatController",value:function(e,t){throw new p("createAgentChatController in ChatControllerFactory.")}},{key:"createCustomerChatController",value:function(e,t){throw new p("createCustomerChatController in ChatControllerFactory.")}}]),e}(),Ft=function(e){function t(){var e;return qt(this,t),(e=Nt(this,Lt(t).call(this))).argsValidator=new Ce,e}return Mt(t,Bt),jt(t,[{key:"createChatSession",value:function(e,t,n,r){var i=this._createChatController(e,t,n,r);if(e===C.AGENT)return new Vt(i);if(e===C.CUSTOMER)return new zt(i);throw new f("Unkown value for session type, Allowed values are: "+Object.values(C),e)}},{key:"_createChatController",value:function(e,t,n,r){var i={sessionType:e,chatDetails:this.argsValidator.normalizeChatDetails(t),chatClient:de.getCachedClient(n),websocketManager:r};return new Pt(i)}}]),t}(),Ht=function(){function e(t){qt(this,e),this.controller=t}return jt(e,[{key:"onMessage",value:function(e){this.controller.subscribe(E,e)}},{key:"onTyping",value:function(e){this.controller.subscribe(k,e)}},{key:"onConnectionBroken",value:function(e){this.controller.subscribe(A,e)}},{key:"onConnectionEstablished",value:function(e){this.controller.subscribe(T,e)}},{key:"onEnded",value:function(e){this.controller.subscribe(R,e)}},{key:"sendMessage",value:function(e){return this.controller.sendMessage(e)}},{key:"connect",value:function(e){return this.controller.connect(e)}},{key:"sendEvent",value:function(e){return this.controller.sendEvent(e)}},{key:"getTranscript",value:function(e){return this.controller.getTranscript(e)}},{key:"getChatDetails",value:function(){return this.controller.getChatDetails()}}]),e}(),Vt=function(e){function t(e){return qt(this,t),Nt(this,Lt(t).call(this,e))}return Mt(t,Ht),jt(t,[{key:"cleanUpOnParticipantDisconnect",value:function(){return this.controller.cleanUpOnParticipantDisconnect()}}]),t}(),zt=function(e){function t(e){return qt(this,t),Nt(this,Lt(t).call(this,e))}return Mt(t,Ht),jt(t,[{key:"disconnectParticipant",value:function(){return this.controller.disconnectParticipant()}}]),t}(),Wt=new Ft,Gt={create:function(e){var t=e.options||{},n=e.type||C.AGENT;return Wt.createChatSession(n,e.chatDetails,t,e.websocketManager)},setGlobalConfig:function(e){var t=e.loggerConfig;v.update(e),re.updateLoggerConfig(t)},LogLevel:$,Logger:Q,SessionTypes:C}},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){(function(e,r){var i,o,s;function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}s=function(){return function(e){var t,n=e.localStorage||(t={},{setItem:function(e,n){t[e]=n},getItem:function(e){return t[e]},removeItem:function(e){delete t[e]}}),r={CONNECT:1,CONNACK:2,PUBLISH:3,PUBACK:4,PUBREC:5,PUBREL:6,PUBCOMP:7,SUBSCRIBE:8,SUBACK:9,UNSUBSCRIBE:10,UNSUBACK:11,PINGREQ:12,PINGRESP:13,DISCONNECT:14},i=function(e,t){for(var n in e)if(e.hasOwnProperty(n)){if(!t.hasOwnProperty(n)){var r="Unknown property, "+n+". Valid properties are:";for(var i in t)t.hasOwnProperty(i)&&(r=r+" "+i);throw new Error(r)}if(a(e[n])!==t[n])throw new Error(u(s.INVALID_TYPE,[a(e[n]),n]))}},o=function(e,t){return function(){return e.apply(t,arguments)}},s={OK:{code:0,text:"AMQJSC0000I OK."},CONNECT_TIMEOUT:{code:1,text:"AMQJSC0001E Connect timed out."},SUBSCRIBE_TIMEOUT:{code:2,text:"AMQJS0002E Subscribe timed out."},UNSUBSCRIBE_TIMEOUT:{code:3,text:"AMQJS0003E Unsubscribe timed out."},PING_TIMEOUT:{code:4,text:"AMQJS0004E Ping timed out."},INTERNAL_ERROR:{code:5,text:"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}"},CONNACK_RETURNCODE:{code:6,text:"AMQJS0006E Bad Connack return code:{0} {1}."},SOCKET_ERROR:{code:7,text:"AMQJS0007E Socket error:{0}."},SOCKET_CLOSE:{code:8,text:"AMQJS0008I Socket closed."},MALFORMED_UTF:{code:9,text:"AMQJS0009E Malformed UTF data:{0} {1} {2}."},UNSUPPORTED:{code:10,text:"AMQJS0010E {0} is not supported by this browser."},INVALID_STATE:{code:11,text:"AMQJS0011E Invalid state {0}."},INVALID_TYPE:{code:12,text:"AMQJS0012E Invalid type {0} for {1}."},INVALID_ARGUMENT:{code:13,text:"AMQJS0013E Invalid argument {0} for {1}."},UNSUPPORTED_OPERATION:{code:14,text:"AMQJS0014E Unsupported operation."},INVALID_STORED_DATA:{code:15,text:"AMQJS0015E Invalid data in local storage key={0} value={1}."},INVALID_MQTT_MESSAGE_TYPE:{code:16,text:"AMQJS0016E Invalid MQTT message type {0}."},MALFORMED_UNICODE:{code:17,text:"AMQJS0017E Malformed Unicode string:{0} {1}."},BUFFER_FULL:{code:18,text:"AMQJS0018E Message buffer is full, maximum buffer size: {0}."}},c={0:"Connection Accepted",1:"Connection Refused: unacceptable protocol version",2:"Connection Refused: identifier rejected",3:"Connection Refused: server unavailable",4:"Connection Refused: bad user name or password",5:"Connection Refused: not authorized"},u=function(e,t){var n=e.text;if(t)for(var r,i,o=0;o<t.length;o++)if(r="{"+o+"}",(i=n.indexOf(r))>0){var s=n.substring(0,i),a=n.substring(i+r.length);n=s+t[o]+a}return n},l=[0,6,77,81,73,115,100,112,3],h=[0,4,77,81,84,84,4],p=function(e,t){for(var n in this.type=e,t)t.hasOwnProperty(n)&&(this[n]=t[n])};function f(e,t){var n,i=t,o=e[t],s=o>>4,a=o&=15;t+=1;var c=0,u=1;do{if(t==e.length)return[null,i];c+=(127&(n=e[t++]))*u,u*=128}while(0!=(128&n));var l=t+c;if(l>e.length)return[null,i];var h=new p(s);switch(s){case r.CONNACK:1&e[t++]&&(h.sessionPresent=!0),h.returnCode=e[t++];break;case r.PUBLISH:var f=a>>1&3,d=m(e,t),g=b(e,t+=2,d);t+=d,f>0&&(h.messageIdentifier=m(e,t),t+=2);var v=new C(e.subarray(t,l));1==(1&a)&&(v.retained=!0),8==(8&a)&&(v.duplicate=!0),v.qos=f,v.destinationName=g,h.payloadMessage=v;break;case r.PUBACK:case r.PUBREC:case r.PUBREL:case r.PUBCOMP:case r.UNSUBACK:h.messageIdentifier=m(e,t);break;case r.SUBACK:h.messageIdentifier=m(e,t),t+=2,h.returnCode=e.subarray(t,l)}return[h,l]}function d(e,t,n){return t[n++]=e>>8,t[n++]=e%256,n}function g(e,t,n,r){return y(e,n,r=d(t,n,r)),r+t}function m(e,t){return 256*e[t]+e[t+1]}function v(e){for(var t=0,n=0;n<e.length;n++){var r=e.charCodeAt(n);r>2047?(55296<=r&&r<=56319&&(n++,t++),t+=3):r>127?t+=2:t++}return t}function y(e,t,n){for(var r=n,i=0;i<e.length;i++){var o=e.charCodeAt(i);if(55296<=o&&o<=56319){var a=e.charCodeAt(++i);if(isNaN(a))throw new Error(u(s.MALFORMED_UNICODE,[o,a]));o=a-56320+(o-55296<<10)+65536}o<=127?t[r++]=o:o<=2047?(t[r++]=o>>6&31|192,t[r++]=63&o|128):o<=65535?(t[r++]=o>>12&15|224,t[r++]=o>>6&63|128,t[r++]=63&o|128):(t[r++]=o>>18&7|240,t[r++]=o>>12&63|128,t[r++]=o>>6&63|128,t[r++]=63&o|128)}return t}function b(e,t,n){for(var r,i="",o=t;o<t+n;){var a=e[o++];if(a<128)r=a;else{var c=e[o++]-128;if(c<0)throw new Error(u(s.MALFORMED_UTF,[a.toString(16),c.toString(16),""]));if(a<224)r=64*(a-192)+c;else{var l=e[o++]-128;if(l<0)throw new Error(u(s.MALFORMED_UTF,[a.toString(16),c.toString(16),l.toString(16)]));if(a<240)r=4096*(a-224)+64*c+l;else{var h=e[o++]-128;if(h<0)throw new Error(u(s.MALFORMED_UTF,[a.toString(16),c.toString(16),l.toString(16),h.toString(16)]));if(!(a<248))throw new Error(u(s.MALFORMED_UTF,[a.toString(16),c.toString(16),l.toString(16),h.toString(16)]));r=262144*(a-240)+4096*c+64*l+h}}}r>65535&&(r-=65536,i+=String.fromCharCode(55296+(r>>10)),r=56320+(1023&r)),i+=String.fromCharCode(r)}return i}p.prototype.encode=function(){var e,t=(15&this.type)<<4,n=0,i=[],o=0;switch(void 0!==this.messageIdentifier&&(n+=2),this.type){case r.CONNECT:switch(this.mqttVersion){case 3:n+=l.length+3;break;case 4:n+=h.length+3}n+=v(this.clientId)+2,void 0!==this.willMessage&&(n+=v(this.willMessage.destinationName)+2,(e=this.willMessage.payloadBytes)instanceof Uint8Array||(e=new Uint8Array(a)),n+=e.byteLength+2),void 0!==this.userName&&(n+=v(this.userName)+2),void 0!==this.password&&(n+=v(this.password)+2);break;case r.SUBSCRIBE:t|=2;for(var s=0;s<this.topics.length;s++)i[s]=v(this.topics[s]),n+=i[s]+2;n+=this.requestedQos.length;break;case r.UNSUBSCRIBE:t|=2;for(s=0;s<this.topics.length;s++)i[s]=v(this.topics[s]),n+=i[s]+2;break;case r.PUBREL:t|=2;break;case r.PUBLISH:this.payloadMessage.duplicate&&(t|=8),t=t|=this.payloadMessage.qos<<1,this.payloadMessage.retained&&(t|=1),n+=(o=v(this.payloadMessage.destinationName))+2;var a=this.payloadMessage.payloadBytes;n+=a.byteLength,a instanceof ArrayBuffer?a=new Uint8Array(a):a instanceof Uint8Array||(a=new Uint8Array(a.buffer));break;case r.DISCONNECT:}var c=function(e){var t=new Array(1),n=0;do{var r=e%128;(e>>=7)>0&&(r|=128),t[n++]=r}while(e>0&&n<4);return t}(n),u=c.length+1,p=new ArrayBuffer(n+u),f=new Uint8Array(p);if(f[0]=t,f.set(c,1),this.type==r.PUBLISH)u=g(this.payloadMessage.destinationName,o,f,u);else if(this.type==r.CONNECT){switch(this.mqttVersion){case 3:f.set(l,u),u+=l.length;break;case 4:f.set(h,u),u+=h.length}var m=0;this.cleanSession&&(m=2),void 0!==this.willMessage&&(m|=4,m|=this.willMessage.qos<<3,this.willMessage.retained&&(m|=32)),void 0!==this.userName&&(m|=128),void 0!==this.password&&(m|=64),f[u++]=m,u=d(this.keepAliveInterval,f,u)}switch(void 0!==this.messageIdentifier&&(u=d(this.messageIdentifier,f,u)),this.type){case r.CONNECT:u=g(this.clientId,v(this.clientId),f,u),void 0!==this.willMessage&&(u=g(this.willMessage.destinationName,v(this.willMessage.destinationName),f,u),u=d(e.byteLength,f,u),f.set(e,u),u+=e.byteLength),void 0!==this.userName&&(u=g(this.userName,v(this.userName),f,u)),void 0!==this.password&&(u=g(this.password,v(this.password),f,u));break;case r.PUBLISH:f.set(a,u);break;case r.SUBSCRIBE:for(s=0;s<this.topics.length;s++)u=g(this.topics[s],i[s],f,u),f[u++]=this.requestedQos[s];break;case r.UNSUBSCRIBE:for(s=0;s<this.topics.length;s++)u=g(this.topics[s],i[s],f,u)}return p};var w=function(e,t){this._client=e,this._keepAliveInterval=1e3*t,this.isReset=!1;var n=new p(r.PINGREQ).encode(),i=function(e){return function(){return o.apply(e)}},o=function(){this.isReset?(this.isReset=!1,this._client._trace("Pinger.doPing","send PINGREQ"),this._client.socket.send(n),this.timeout=setTimeout(i(this),this._keepAliveInterval)):(this._client._trace("Pinger.doPing","Timed out"),this._client._disconnected(s.PING_TIMEOUT.code,u(s.PING_TIMEOUT)))};this.reset=function(){this.isReset=!0,clearTimeout(this.timeout),this._keepAliveInterval>0&&(this.timeout=setTimeout(i(this),this._keepAliveInterval))},this.cancel=function(){clearTimeout(this.timeout)}},_=function(e,t,n,r){t||(t=30);this.timeout=setTimeout(function(e,t,n){return function(){return e.apply(t,n)}}(n,e,r),1e3*t),this.cancel=function(){clearTimeout(this.timeout)}},S=function(t,r,i,o,a){if(!("WebSocket"in e&&null!==e.WebSocket))throw new Error(u(s.UNSUPPORTED,["WebSocket"]));if(!("ArrayBuffer"in e&&null!==e.ArrayBuffer))throw new Error(u(s.UNSUPPORTED,["ArrayBuffer"]));for(var c in this._trace("Paho.Client",t,r,i,o,a),this.host=r,this.port=i,this.path=o,this.uri=t,this.clientId=a,this._wsuri=null,this._localKey=r+":"+i+("/mqtt"!=o?":"+o:"")+":"+a+":",this._msg_queue=[],this._buffered_msg_queue=[],this._sentMessages={},this._receivedMessages={},this._notify_msg_sent={},this._message_identifier=1,this._sequence=0,n)0!==c.indexOf("Sent:"+this._localKey)&&0!==c.indexOf("Received:"+this._localKey)||this.restore(c)};S.prototype.host=null,S.prototype.port=null,S.prototype.path=null,S.prototype.uri=null,S.prototype.clientId=null,S.prototype.socket=null,S.prototype.connected=!1,S.prototype.maxMessageIdentifier=65536,S.prototype.connectOptions=null,S.prototype.hostIndex=null,S.prototype.onConnected=null,S.prototype.onConnectionLost=null,S.prototype.onMessageDelivered=null,S.prototype.onMessageArrived=null,S.prototype.traceFunction=null,S.prototype._msg_queue=null,S.prototype._buffered_msg_queue=null,S.prototype._connectTimeout=null,S.prototype.sendPinger=null,S.prototype.receivePinger=null,S.prototype._reconnectInterval=1,S.prototype._reconnecting=!1,S.prototype._reconnectTimeout=null,S.prototype.disconnectedPublishing=!1,S.prototype.disconnectedBufferSize=5e3,S.prototype.receiveBuffer=null,S.prototype._traceBuffer=null,S.prototype._MAX_TRACE_ENTRIES=100,S.prototype.connect=function(e){var t=this._traceMask(e,"password");if(this._trace("Client.connect",t,this.socket,this.connected),this.connected)throw new Error(u(s.INVALID_STATE,["already connected"]));if(this.socket)throw new Error(u(s.INVALID_STATE,["already connected"]));this._reconnecting&&(this._reconnectTimeout.cancel(),this._reconnectTimeout=null,this._reconnecting=!1),this.connectOptions=e,this._reconnectInterval=1,this._reconnecting=!1,e.uris?(this.hostIndex=0,this._doConnect(e.uris[0])):this._doConnect(this.uri)},S.prototype.subscribe=function(e,t){if(this._trace("Client.subscribe",e,t),!this.connected)throw new Error(u(s.INVALID_STATE,["not connected"]));var n=new p(r.SUBSCRIBE);n.topics=e.constructor===Array?e:[e],void 0===t.qos&&(t.qos=0),n.requestedQos=[];for(var i=0;i<n.topics.length;i++)n.requestedQos[i]=t.qos;t.onSuccess&&(n.onSuccess=function(e){t.onSuccess({invocationContext:t.invocationContext,grantedQos:e})}),t.onFailure&&(n.onFailure=function(e){t.onFailure({invocationContext:t.invocationContext,errorCode:e,errorMessage:u(e)})}),t.timeout&&(n.timeOut=new _(this,t.timeout,t.onFailure,[{invocationContext:t.invocationContext,errorCode:s.SUBSCRIBE_TIMEOUT.code,errorMessage:u(s.SUBSCRIBE_TIMEOUT)}])),this._requires_ack(n),this._schedule_message(n)},S.prototype.unsubscribe=function(e,t){if(this._trace("Client.unsubscribe",e,t),!this.connected)throw new Error(u(s.INVALID_STATE,["not connected"]));var n=new p(r.UNSUBSCRIBE);n.topics=e.constructor===Array?e:[e],t.onSuccess&&(n.callback=function(){t.onSuccess({invocationContext:t.invocationContext})}),t.timeout&&(n.timeOut=new _(this,t.timeout,t.onFailure,[{invocationContext:t.invocationContext,errorCode:s.UNSUBSCRIBE_TIMEOUT.code,errorMessage:u(s.UNSUBSCRIBE_TIMEOUT)}])),this._requires_ack(n),this._schedule_message(n)},S.prototype.send=function(e){this._trace("Client.send",e);var t=new p(r.PUBLISH);if(t.payloadMessage=e,this.connected)e.qos>0?this._requires_ack(t):this.onMessageDelivered&&(this._notify_msg_sent[t]=this.onMessageDelivered(t.payloadMessage)),this._schedule_message(t);else{if(!this._reconnecting||!this.disconnectedPublishing)throw new Error(u(s.INVALID_STATE,["not connected"]));if(Object.keys(this._sentMessages).length+this._buffered_msg_queue.length>this.disconnectedBufferSize)throw new Error(u(s.BUFFER_FULL,[this.disconnectedBufferSize]));e.qos>0?this._requires_ack(t):(t.sequence=++this._sequence,this._buffered_msg_queue.unshift(t))}},S.prototype.disconnect=function(){if(this._trace("Client.disconnect"),this._reconnecting&&(this._reconnectTimeout.cancel(),this._reconnectTimeout=null,this._reconnecting=!1),!this.socket)throw new Error(u(s.INVALID_STATE,["not connecting or connected"]));var e=new p(r.DISCONNECT);this._notify_msg_sent[e]=o(this._disconnected,this),this._schedule_message(e)},S.prototype.getTraceLog=function(){if(null!==this._traceBuffer){for(var e in this._trace("Client.getTraceLog",new Date),this._trace("Client.getTraceLog in flight messages",this._sentMessages.length),this._sentMessages)this._trace("_sentMessages ",e,this._sentMessages[e]);for(var e in this._receivedMessages)this._trace("_receivedMessages ",e,this._receivedMessages[e]);return this._traceBuffer}},S.prototype.startTrace=function(){null===this._traceBuffer&&(this._traceBuffer=[]),this._trace("Client.startTrace",new Date,"@VERSION@-@BUILDLEVEL@")},S.prototype.stopTrace=function(){delete this._traceBuffer},S.prototype._doConnect=function(e){if(this.connectOptions.useSSL){var t=e.split(":");t[0]="wss",e=t.join(":")}this._wsuri=e,this.connected=!1,this.connectOptions.mqttVersion<4?this.socket=new WebSocket(e,["mqttv3.1"]):this.socket=new WebSocket(e,["mqtt"]),this.socket.binaryType="arraybuffer",this.socket.onopen=o(this._on_socket_open,this),this.socket.onmessage=o(this._on_socket_message,this),this.socket.onerror=o(this._on_socket_error,this),this.socket.onclose=o(this._on_socket_close,this),this.sendPinger=new w(this,this.connectOptions.keepAliveInterval),this.receivePinger=new w(this,this.connectOptions.keepAliveInterval),this._connectTimeout&&(this._connectTimeout.cancel(),this._connectTimeout=null),this._connectTimeout=new _(this,this.connectOptions.timeout,this._disconnected,[s.CONNECT_TIMEOUT.code,u(s.CONNECT_TIMEOUT)])},S.prototype._schedule_message=function(e){this._msg_queue.unshift(e),this.connected&&this._process_queue()},S.prototype.store=function(e,t){var i={type:t.type,messageIdentifier:t.messageIdentifier,version:1};switch(t.type){case r.PUBLISH:t.pubRecReceived&&(i.pubRecReceived=!0),i.payloadMessage={};for(var o="",a=t.payloadMessage.payloadBytes,c=0;c<a.length;c++)a[c]<=15?o=o+"0"+a[c].toString(16):o+=a[c].toString(16);i.payloadMessage.payloadHex=o,i.payloadMessage.qos=t.payloadMessage.qos,i.payloadMessage.destinationName=t.payloadMessage.destinationName,t.payloadMessage.duplicate&&(i.payloadMessage.duplicate=!0),t.payloadMessage.retained&&(i.payloadMessage.retained=!0),0===e.indexOf("Sent:")&&(void 0===t.sequence&&(t.sequence=++this._sequence),i.sequence=t.sequence);break;default:throw Error(u(s.INVALID_STORED_DATA,[e+this._localKey+t.messageIdentifier,i]))}n.setItem(e+this._localKey+t.messageIdentifier,JSON.stringify(i))},S.prototype.restore=function(e){var t=n.getItem(e),i=JSON.parse(t),o=new p(i.type,i);switch(i.type){case r.PUBLISH:for(var a=i.payloadMessage.payloadHex,c=new ArrayBuffer(a.length/2),l=new Uint8Array(c),h=0;a.length>=2;){var f=parseInt(a.substring(0,2),16);a=a.substring(2,a.length),l[h++]=f}var d=new C(l);d.qos=i.payloadMessage.qos,d.destinationName=i.payloadMessage.destinationName,i.payloadMessage.duplicate&&(d.duplicate=!0),i.payloadMessage.retained&&(d.retained=!0),o.payloadMessage=d;break;default:throw Error(u(s.INVALID_STORED_DATA,[e,t]))}0===e.indexOf("Sent:"+this._localKey)?(o.payloadMessage.duplicate=!0,this._sentMessages[o.messageIdentifier]=o):0===e.indexOf("Received:"+this._localKey)&&(this._receivedMessages[o.messageIdentifier]=o)},S.prototype._process_queue=function(){for(var e=null;e=this._msg_queue.pop();)this._socket_send(e),this._notify_msg_sent[e]&&(this._notify_msg_sent[e](),delete this._notify_msg_sent[e])},S.prototype._requires_ack=function(e){var t=Object.keys(this._sentMessages).length;if(t>this.maxMessageIdentifier)throw Error("Too many messages:"+t);for(;void 0!==this._sentMessages[this._message_identifier];)this._message_identifier++;e.messageIdentifier=this._message_identifier,this._sentMessages[e.messageIdentifier]=e,e.type===r.PUBLISH&&this.store("Sent:",e),this._message_identifier===this.maxMessageIdentifier&&(this._message_identifier=1)},S.prototype._on_socket_open=function(){var e=new p(r.CONNECT,this.connectOptions);e.clientId=this.clientId,this._socket_send(e)},S.prototype._on_socket_message=function(e){this._trace("Client._on_socket_message",e.data);for(var t=this._deframeMessages(e.data),n=0;n<t.length;n+=1)this._handleMessage(t[n])},S.prototype._deframeMessages=function(e){var t=new Uint8Array(e),n=[];if(this.receiveBuffer){var r=new Uint8Array(this.receiveBuffer.length+t.length);r.set(this.receiveBuffer),r.set(t,this.receiveBuffer.length),t=r,delete this.receiveBuffer}try{for(var i=0;i<t.length;){var o=f(t,i),a=o[0];if(i=o[1],null===a)break;n.push(a)}i<t.length&&(this.receiveBuffer=t.subarray(i))}catch(e){var c="undefined"==e.hasOwnProperty("stack")?e.stack.toString():"No Error Stack Available";return void this._disconnected(s.INTERNAL_ERROR.code,u(s.INTERNAL_ERROR,[e.message,c]))}return n},S.prototype._handleMessage=function(e){this._trace("Client._handleMessage",e);try{switch(e.type){case r.CONNACK:if(this._connectTimeout.cancel(),this._reconnectTimeout&&this._reconnectTimeout.cancel(),this.connectOptions.cleanSession){for(var t in this._sentMessages){var i=this._sentMessages[t];n.removeItem("Sent:"+this._localKey+i.messageIdentifier)}for(var t in this._sentMessages={},this._receivedMessages){var o=this._receivedMessages[t];n.removeItem("Received:"+this._localKey+o.messageIdentifier)}this._receivedMessages={}}if(0!==e.returnCode){this._disconnected(s.CONNACK_RETURNCODE.code,u(s.CONNACK_RETURNCODE,[e.returnCode,c[e.returnCode]]));break}this.connected=!0,this.connectOptions.uris&&(this.hostIndex=this.connectOptions.uris.length);var a=[];for(var l in this._sentMessages)this._sentMessages.hasOwnProperty(l)&&a.push(this._sentMessages[l]);if(this._buffered_msg_queue.length>0)for(var h=null;h=this._buffered_msg_queue.pop();)a.push(h),this.onMessageDelivered&&(this._notify_msg_sent[h]=this.onMessageDelivered(h.payloadMessage));a=a.sort(function(e,t){return e.sequence-t.sequence});for(var f=0,d=a.length;f<d;f++){if((i=a[f]).type==r.PUBLISH&&i.pubRecReceived){var g=new p(r.PUBREL,{messageIdentifier:i.messageIdentifier});this._schedule_message(g)}else this._schedule_message(i)}this.connectOptions.onSuccess&&this.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});var m=!1;this._reconnecting&&(m=!0,this._reconnectInterval=1,this._reconnecting=!1),this._connected(m,this._wsuri),this._process_queue();break;case r.PUBLISH:this._receivePublish(e);break;case r.PUBACK:(i=this._sentMessages[e.messageIdentifier])&&(delete this._sentMessages[e.messageIdentifier],n.removeItem("Sent:"+this._localKey+e.messageIdentifier),this.onMessageDelivered&&this.onMessageDelivered(i.payloadMessage));break;case r.PUBREC:if(i=this._sentMessages[e.messageIdentifier]){i.pubRecReceived=!0;g=new p(r.PUBREL,{messageIdentifier:e.messageIdentifier});this.store("Sent:",i),this._schedule_message(g)}break;case r.PUBREL:o=this._receivedMessages[e.messageIdentifier];n.removeItem("Received:"+this._localKey+e.messageIdentifier),o&&(this._receiveMessage(o),delete this._receivedMessages[e.messageIdentifier]);var v=new p(r.PUBCOMP,{messageIdentifier:e.messageIdentifier});this._schedule_message(v);break;case r.PUBCOMP:i=this._sentMessages[e.messageIdentifier];delete this._sentMessages[e.messageIdentifier],n.removeItem("Sent:"+this._localKey+e.messageIdentifier),this.onMessageDelivered&&this.onMessageDelivered(i.payloadMessage);break;case r.SUBACK:(i=this._sentMessages[e.messageIdentifier])&&(i.timeOut&&i.timeOut.cancel(),128===e.returnCode[0]?i.onFailure&&i.onFailure(e.returnCode):i.onSuccess&&i.onSuccess(e.returnCode),delete this._sentMessages[e.messageIdentifier]);break;case r.UNSUBACK:(i=this._sentMessages[e.messageIdentifier])&&(i.timeOut&&i.timeOut.cancel(),i.callback&&i.callback(),delete this._sentMessages[e.messageIdentifier]);break;case r.PINGRESP:this.sendPinger.reset();break;case r.DISCONNECT:this._disconnected(s.INVALID_MQTT_MESSAGE_TYPE.code,u(s.INVALID_MQTT_MESSAGE_TYPE,[e.type]));break;default:this._disconnected(s.INVALID_MQTT_MESSAGE_TYPE.code,u(s.INVALID_MQTT_MESSAGE_TYPE,[e.type]))}}catch(e){var y="undefined"==e.hasOwnProperty("stack")?e.stack.toString():"No Error Stack Available";return void this._disconnected(s.INTERNAL_ERROR.code,u(s.INTERNAL_ERROR,[e.message,y]))}},S.prototype._on_socket_error=function(e){this._reconnecting||this._disconnected(s.SOCKET_ERROR.code,u(s.SOCKET_ERROR,[e.data]))},S.prototype._on_socket_close=function(){this._reconnecting||this._disconnected(s.SOCKET_CLOSE.code,u(s.SOCKET_CLOSE))},S.prototype._socket_send=function(e){if(1==e.type){var t=this._traceMask(e,"password");this._trace("Client._socket_send",t)}else this._trace("Client._socket_send",e);this.socket.send(e.encode()),this.sendPinger.reset()},S.prototype._receivePublish=function(e){switch(e.payloadMessage.qos){case"undefined":case 0:this._receiveMessage(e);break;case 1:var t=new p(r.PUBACK,{messageIdentifier:e.messageIdentifier});this._schedule_message(t),this._receiveMessage(e);break;case 2:this._receivedMessages[e.messageIdentifier]=e,this.store("Received:",e);var n=new p(r.PUBREC,{messageIdentifier:e.messageIdentifier});this._schedule_message(n);break;default:throw Error("Invaild qos="+e.payloadMessage.qos)}},S.prototype._receiveMessage=function(e){this.onMessageArrived&&this.onMessageArrived(e.payloadMessage)},S.prototype._connected=function(e,t){this.onConnected&&this.onConnected(e,t)},S.prototype._reconnect=function(){this._trace("Client._reconnect"),this.connected||(this._reconnecting=!0,this.sendPinger.cancel(),this.receivePinger.cancel(),this._reconnectInterval<128&&(this._reconnectInterval=2*this._reconnectInterval),this.connectOptions.uris?(this.hostIndex=0,this._doConnect(this.connectOptions.uris[0])):this._doConnect(this.uri))},S.prototype._disconnected=function(e,t){if(this._trace("Client._disconnected",e,t),void 0!==e&&this._reconnecting)this._reconnectTimeout=new _(this,this._reconnectInterval,this._reconnect);else if(this.sendPinger.cancel(),this.receivePinger.cancel(),this._connectTimeout&&(this._connectTimeout.cancel(),this._connectTimeout=null),this._msg_queue=[],this._buffered_msg_queue=[],this._notify_msg_sent={},this.socket&&(this.socket.onopen=null,this.socket.onmessage=null,this.socket.onerror=null,this.socket.onclose=null,1===this.socket.readyState&&this.socket.close(),delete this.socket),this.connectOptions.uris&&this.hostIndex<this.connectOptions.uris.length-1)this.hostIndex++,this._doConnect(this.connectOptions.uris[this.hostIndex]);else if(void 0===e&&(e=s.OK.code,t=u(s.OK)),this.connected){if(this.connected=!1,this.onConnectionLost&&this.onConnectionLost({errorCode:e,errorMessage:t,reconnect:this.connectOptions.reconnect,uri:this._wsuri}),e!==s.OK.code&&this.connectOptions.reconnect)return this._reconnectInterval=1,void this._reconnect()}else 4===this.connectOptions.mqttVersion&&!1===this.connectOptions.mqttVersionExplicit?(this._trace("Failed to connect V4, dropping back to V3"),this.connectOptions.mqttVersion=3,this.connectOptions.uris?(this.hostIndex=0,this._doConnect(this.connectOptions.uris[0])):this._doConnect(this.uri)):this.connectOptions.onFailure&&this.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext,errorCode:e,errorMessage:t})},S.prototype._trace=function(){if(this.traceFunction){var e=Array.prototype.slice.call(arguments);for(var t in e)void 0!==e[t]&&e.splice(t,1,JSON.stringify(e[t]));var n=e.join("");this.traceFunction({severity:"Debug",message:n})}if(null!==this._traceBuffer){t=0;for(var r=arguments.length;t<r;t++)this._traceBuffer.length==this._MAX_TRACE_ENTRIES&&this._traceBuffer.shift(),0===t?this._traceBuffer.push(arguments[t]):void 0===arguments[t]?this._traceBuffer.push(arguments[t]):this._traceBuffer.push("  "+JSON.stringify(arguments[t]))}},S.prototype._traceMask=function(e,t){var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=r==t?"******":e[r]);return n};var C=function(e){var t,n;if(!("string"==typeof e||e instanceof ArrayBuffer||ArrayBuffer.isView(e)&&!(e instanceof DataView)))throw u(s.INVALID_ARGUMENT,[e,"newPayload"]);t=e;var r=0,i=!1,o=!1;Object.defineProperties(this,{payloadString:{enumerable:!0,get:function(){return"string"==typeof t?t:b(t,0,t.length)}},payloadBytes:{enumerable:!0,get:function(){if("string"==typeof t){var e=new ArrayBuffer(v(t)),n=new Uint8Array(e);return y(t,n,0),n}return t}},destinationName:{enumerable:!0,get:function(){return n},set:function(e){if("string"!=typeof e)throw new Error(u(s.INVALID_ARGUMENT,[e,"newDestinationName"]));n=e}},qos:{enumerable:!0,get:function(){return r},set:function(e){if(0!==e&&1!==e&&2!==e)throw new Error("Invalid argument:"+e);r=e}},retained:{enumerable:!0,get:function(){return i},set:function(e){if("boolean"!=typeof e)throw new Error(u(s.INVALID_ARGUMENT,[e,"newRetained"]));i=e}},topic:{enumerable:!0,get:function(){return n},set:function(e){n=e}},duplicate:{enumerable:!0,get:function(){return o},set:function(e){o=e}}})};return{Client:function(e,t,n,r){var o;if("string"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"host"]));if(2==arguments.length){r=t;var c=(o=e).match(/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/);if(!c)throw new Error(u(s.INVALID_ARGUMENT,[e,"host"]));e=c[4]||c[2],t=parseInt(c[7]),n=c[8]}else{if(3==arguments.length&&(r=n,n="/mqtt"),"number"!=typeof t||t<0)throw new Error(u(s.INVALID_TYPE,[a(t),"port"]));if("string"!=typeof n)throw new Error(u(s.INVALID_TYPE,[a(n),"path"]));var l=-1!==e.indexOf(":")&&"["!==e.slice(0,1)&&"]"!==e.slice(-1);o="ws://"+(l?"["+e+"]":e)+":"+t+n}for(var h=0,p=0;p<r.length;p++){var f=r.charCodeAt(p);55296<=f&&f<=56319&&p++,h++}if("string"!=typeof r||h>65535)throw new Error(u(s.INVALID_ARGUMENT,[r,"clientId"]));var d=new S(o,e,t,n,r);Object.defineProperties(this,{host:{get:function(){return e},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},port:{get:function(){return t},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},path:{get:function(){return n},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},uri:{get:function(){return o},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},clientId:{get:function(){return d.clientId},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},onConnected:{get:function(){return d.onConnected},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"onConnected"]));d.onConnected=e}},disconnectedPublishing:{get:function(){return d.disconnectedPublishing},set:function(e){d.disconnectedPublishing=e}},disconnectedBufferSize:{get:function(){return d.disconnectedBufferSize},set:function(e){d.disconnectedBufferSize=e}},onConnectionLost:{get:function(){return d.onConnectionLost},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"onConnectionLost"]));d.onConnectionLost=e}},onMessageDelivered:{get:function(){return d.onMessageDelivered},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"onMessageDelivered"]));d.onMessageDelivered=e}},onMessageArrived:{get:function(){return d.onMessageArrived},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"onMessageArrived"]));d.onMessageArrived=e}},trace:{get:function(){return d.traceFunction},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"onTrace"]));d.traceFunction=e}}}),this.connect=function(e){if(i(e=e||{},{timeout:"number",userName:"string",password:"string",willMessage:"object",keepAliveInterval:"number",cleanSession:"boolean",useSSL:"boolean",invocationContext:"object",onSuccess:"function",onFailure:"function",hosts:"object",ports:"object",reconnect:"boolean",mqttVersion:"number",mqttVersionExplicit:"boolean",uris:"object"}),void 0===e.keepAliveInterval&&(e.keepAliveInterval=60),e.mqttVersion>4||e.mqttVersion<3)throw new Error(u(s.INVALID_ARGUMENT,[e.mqttVersion,"connectOptions.mqttVersion"]));if(void 0===e.mqttVersion?(e.mqttVersionExplicit=!1,e.mqttVersion=4):e.mqttVersionExplicit=!0,void 0!==e.password&&void 0===e.userName)throw new Error(u(s.INVALID_ARGUMENT,[e.password,"connectOptions.password"]));if(e.willMessage){if(!(e.willMessage instanceof C))throw new Error(u(s.INVALID_TYPE,[e.willMessage,"connectOptions.willMessage"]));if(e.willMessage.stringPayload=null,void 0===e.willMessage.destinationName)throw new Error(u(s.INVALID_TYPE,[a(e.willMessage.destinationName),"connectOptions.willMessage.destinationName"]))}if(void 0===e.cleanSession&&(e.cleanSession=!0),e.hosts){if(!(e.hosts instanceof Array))throw new Error(u(s.INVALID_ARGUMENT,[e.hosts,"connectOptions.hosts"]));if(e.hosts.length<1)throw new Error(u(s.INVALID_ARGUMENT,[e.hosts,"connectOptions.hosts"]));for(var t=!1,r=0;r<e.hosts.length;r++){if("string"!=typeof e.hosts[r])throw new Error(u(s.INVALID_TYPE,[a(e.hosts[r]),"connectOptions.hosts["+r+"]"]));if(/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/.test(e.hosts[r])){if(0===r)t=!0;else if(!t)throw new Error(u(s.INVALID_ARGUMENT,[e.hosts[r],"connectOptions.hosts["+r+"]"]))}else if(t)throw new Error(u(s.INVALID_ARGUMENT,[e.hosts[r],"connectOptions.hosts["+r+"]"]))}if(t)e.uris=e.hosts;else{if(!e.ports)throw new Error(u(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));if(!(e.ports instanceof Array))throw new Error(u(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));if(e.hosts.length!==e.ports.length)throw new Error(u(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));for(e.uris=[],r=0;r<e.hosts.length;r++){if("number"!=typeof e.ports[r]||e.ports[r]<0)throw new Error(u(s.INVALID_TYPE,[a(e.ports[r]),"connectOptions.ports["+r+"]"]));var c=e.hosts[r],l=e.ports[r],h=-1!==c.indexOf(":");o="ws://"+(h?"["+c+"]":c)+":"+l+n,e.uris.push(o)}}}d.connect(e)},this.subscribe=function(e,t){if("string"!=typeof e&&e.constructor!==Array)throw new Error("Invalid argument:"+e);if(i(t=t||{},{qos:"number",invocationContext:"object",onSuccess:"function",onFailure:"function",timeout:"number"}),t.timeout&&!t.onFailure)throw new Error("subscribeOptions.timeout specified with no onFailure callback.");if(void 0!==t.qos&&0!==t.qos&&1!==t.qos&&2!==t.qos)throw new Error(u(s.INVALID_ARGUMENT,[t.qos,"subscribeOptions.qos"]));d.subscribe(e,t)},this.unsubscribe=function(e,t){if("string"!=typeof e&&e.constructor!==Array)throw new Error("Invalid argument:"+e);if(i(t=t||{},{invocationContext:"object",onSuccess:"function",onFailure:"function",timeout:"number"}),t.timeout&&!t.onFailure)throw new Error("unsubscribeOptions.timeout specified with no onFailure callback.");d.unsubscribe(e,t)},this.send=function(e,t,n,r){var i;if(0===arguments.length)throw new Error("Invalid argument.length");if(1==arguments.length){if(!(e instanceof C)&&"string"!=typeof e)throw new Error("Invalid argument:"+a(e));if(void 0===(i=e).destinationName)throw new Error(u(s.INVALID_ARGUMENT,[i.destinationName,"Message.destinationName"]));d.send(i)}else(i=new C(t)).destinationName=e,arguments.length>=3&&(i.qos=n),arguments.length>=4&&(i.retained=r),d.send(i)},this.publish=function(e,t,n,r){var i;if(0===arguments.length)throw new Error("Invalid argument.length");if(1==arguments.length){if(!(e instanceof C)&&"string"!=typeof e)throw new Error("Invalid argument:"+a(e));if(void 0===(i=e).destinationName)throw new Error(u(s.INVALID_ARGUMENT,[i.destinationName,"Message.destinationName"]));d.send(i)}else(i=new C(t)).destinationName=e,arguments.length>=3&&(i.qos=n),arguments.length>=4&&(i.retained=r),d.send(i)},this.disconnect=function(){d.disconnect()},this.getTraceLog=function(){return d.getTraceLog()},this.startTrace=function(){d.startTrace()},this.stopTrace=function(){d.stopTrace()},this.isConnected=function(){return d.connected}},Message:C}}(void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},"object"===a(t)&&"object"===a(r)?r.exports=s():void 0===(o="function"==typeof(i=s)?i.call(t,n,t,r):i)||(r.exports=o)}).call(this,n(0),n(8)(e))},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"ChatSession",function(){return i});n(6);var r=n(2);e.connect=e.connect||{},connect.ChatSession=r.a;var i=r.a}.call(this,n(0))},function(e,t){!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";var r=n(1);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o={assertTrue:function(e,t){if(!e)throw new Error(t)},assertNotNull:function(e,t){return o.assertTrue(null!==e&&void 0!==i(e),Object(r.sprintf)("%s must be provided",t||"A value")),e},isString:function(e){return"string"==typeof e},assertIsNonEmptyString:function(e,t){if(!e||"string"!=typeof e)throw new Error(t+" is not a non-empty string!")},assertIsList:function(e,t){if(!Array.isArray(e))throw new Error(t+" is not an array")},assertIsEnum:function(e,t,n){var r;for(r=0;r<t.length;r++)if(t[r]===e)return;throw new Error(n+" passed is not valid. Allowed values are: "+t)},makeEnum:function(e){var t={};return e.forEach(function(e){var n=e.replace(/\.?([a-z]+)_?/g,function(e,t){return t.toUpperCase()+"_"}).replace(/_$/,"");t[n]=e}),t},isFunction:function(e){return!!(e&&e.constructor&&e.call&&e.apply)},isObject:function(e){return!("object"!==i(e)||null===e)}};o.isString=function(e){return"string"==typeof e},o.isNumber=function(e){return"number"==typeof e};var s=new RegExp("^(wss://)\\w*");o.validWSUrl=function(e){return s.test(e)},o.assertIsObject=function(e,t){if(!o.isObject(e))throw new Error(t+" is not an object!")};var a=o,c="DEBUG",u="aws/subscribe",l="aws/heartbeat";function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t,n){return t&&g(e.prototype,t),n&&g(e,n),e}var v=function(){function e(){d(this,e)}return m(e,[{key:"debug",value:function(e){}},{key:"info",value:function(e){}},{key:"warn",value:function(e){}},{key:"error",value:function(e){}}]),e}(),y={DEBUG:10,INFO:20,WARN:30,ERROR:40},b=function(){function e(){d(this,e),this.updateLoggerConfig(),this.consoleLoggerWrapper=S()}return m(e,[{key:"writeToClientLogger",value:function(e,t){if(this.hasClientLogger())switch(e){case y.DEBUG:return this._clientLogger.debug(t);case y.INFO:return this._clientLogger.info(t);case y.WARN:return this._clientLogger.warn(t);case y.ERROR:return this._clientLogger.error(t)}}},{key:"isLevelEnabled",value:function(e){return e>=this._level}},{key:"hasClientLogger",value:function(){return null!==this._clientLogger}},{key:"getLogger",value:function(e){var t=e.prefix||"";return this._logsDestination===c?this.consoleLoggerWrapper:new _(t)}},{key:"updateLoggerConfig",value:function(e){var t=e||{};this._level=t.level||y.INFO,this._clientLogger=t.logger||null,this._logsDestination="NULL",t.debug&&(this._logsDestination=c),t.logger&&(this._logsDestination="CLIENT_LOGGER")}}]),e}(),w=function(){function e(){d(this,e)}return m(e,[{key:"debug",value:function(){}},{key:"info",value:function(){}},{key:"warn",value:function(){}},{key:"error",value:function(){}}]),e}(),_=function(e){function t(e){var n;return d(this,t),(n=function(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}(this,p(t).call(this))).prefix=e||"",n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,w),m(t,[{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(y.DEBUG,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(y.INFO,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(y.WARN,t)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(y.ERROR,t)}},{key:"_shouldLog",value:function(e){return C.hasClientLogger()&&C.isLevelEnabled(e)}},{key:"_writeToClientLogger",value:function(e,t){C.writeToClientLogger(e,t)}},{key:"_log",value:function(e,t){if(this._shouldLog(e)){var n=this._convertToSingleStatement(t);this._writeToClientLogger(e,n)}}},{key:"_convertToSingleStatement",value:function(e){var t="";this.prefix&&(t+=this.prefix+" ");for(var n=0;n<e.length;n++){var r=e[n];t+=this._convertToString(r)+" "}return t}},{key:"_convertToString",value:function(e){try{if(!e)return"";if(a.isString(e))return e;if(a.isObject(e)&&a.isFunction(e.toString)){var t=e.toString();if("[object Object]"!==t)return t}return JSON.stringify(e)}catch(t){return console.error("Error while converting argument to string",e,t),""}}}]),t}(),S=function(){var e=new w;return e.debug=console.debug,e.info=console.info,e.warn=console.warn,e.error=console.error,e},C=new b;n.d(t,"a",function(){return k});var E=function(){var e=C.getLogger({}),t=null,n={reconnectWebSocket:!1,websocketInitFailed:!1,linearConnectAttempt:0,exponentialConnectAttempt:0,exponentialBackOffTime:1,exponentialTimeoutHandle:null,lifeTimeTimeoutHandle:null},r={pendingResponse:!1,intervalHandle:null},i={initFailure:new Set,getWebSocketTransport:null,subscriptionUpdate:new Set,subscriptionFailure:new Set,topic:new Map,allMessage:new Set,connectionGain:new Set,connectionLost:new Set},o={connConfig:null,promiseHandle:null,promiseCompleted:!1},s={subscribed:new Set,pending:new Set},c=new Set([u,"aws/unsubscribe",l]),h=navigator.onLine,p=setInterval(function(){h!==navigator.onLine&&(h=navigator.onLine)&&(!t||t.readyState>1)&&(e.info("Network online, Connecting to websocket"),T())},250),f=function(e,t){e.forEach(function(e){e(t)})},d=function(){if(r.pendingResponse)return e.warn("Heartbeat response not received"),clearInterval(r.intervalHandle),r.pendingResponse=!1,void _();e.debug("Sending heartbeat"),t.send(E(l)),r.pendingResponse=!0},g=function(){n.linearConnectAttempt=0,n.exponentialConnectAttempt=0,n.exponentialBackOffTime=1,r.pendingResponse=!1,n.reconnectWebSocket=!1,clearTimeout(n.lifeTimeTimeoutHandle),clearInterval(r.intervalHandle),clearTimeout(n.exponentialTimeoutHandle)},m=function(){try{if(e.info("WebSocket connection established!"),f(i.connectionGain),g(),s.subscribed.size>0||s.pending.size>0){var a=Array.from(s.subscribed.values());a=a.concat(Array.from(s.pending.values())),s.subscribed.clear(),t.send(E(u,{topics:a}))}d(),r.intervalHandle=setInterval(d,1e4),n.lifeTimeTimeoutHandle=setTimeout(function(){e.debug("Starting scheduled WebSocket manager reconnect"),_()},1e3*o.connConfig.webSocketTransport.transportLifeTimeInSeconds)}catch(t){e.error("Error after establishing web socket connection, error: ",t)}},v=function(t){n.linearConnectAttempt<=1&&f(i.connectionLost),e.info("Socket connection is closed. event: ",t),n.reconnectWebSocket&&I()},y=function(t){e.error("WebSocketManager Error, error_event: ",t),_()},b=function(t){e.debug("Message received from webSocket server",t.data);var n=JSON.parse(t.data);switch(n.topic){case u:"success"===n.content.status?(n.content.topics.forEach(function(e){s.subscribed.add(e),s.pending.delete(e)}),f(i.subscriptionUpdate,n)):f(i.subscriptionFailure,n);break;case l:e.debug("Heartbeat response received"),r.pendingResponse=!1;break;default:if(n.topic){if(0===i.allMessage.size&&0===i.topic.size)return void e.warn("No registered callback listener for Topic: ",n);f(i.allMessage,n),i.topic.has(n.topic)&&f(i.topic.get(n.topic),n)}else n.message?e.warn("WebSocketManager Message Error, error: ",n):e.warn("Invalid incoming message, error: ",n)}},w=function(e){return!(!t||t.readyState===WebSocket.CLOSED||(t.close(1e3,e),0))},_=function(){h?(clearTimeout(n.lifeTimeTimeoutHandle),clearInterval(r.intervalHandle),n.linearConnectAttempt<3?(n.linearConnectAttempt++,e.debug("Starting Consecutive WebSocket reconnect, Attempt : "+n.linearConnectAttempt),n.reconnectWebSocket=!0,T()):n.exponentialConnectAttempt<5?(n.exponentialConnectAttempt++,n.exponentialBackOffTime*=2,e.debug("Starting Exponential WebSocket reconnect, Attempt : "+n.exponentialConnectAttempt+" with delay "+n.exponentialBackOffTime+" sec."),o.promiseCompleted=!1,o.connConfig=null,n.exponentialTimeoutHandle=setTimeout(function(){n.reconnectWebSocket=!0,T()},1e3*n.exponentialBackOffTime)):o.promiseCompleted&&(e.error("Could not connect to WebSocket after several attempts"),S())):w("Network Offline, Closing WebSocket Manager")},S=function(){g(),w("Terminating WebSocket Manager"),e.error("WebSocket Initialization failed"),n.websocketInitFailed=!0,clearInterval(p),f(i.initFailure)},E=function(e,t){return JSON.stringify({topic:e,content:t})},k=function(t){return!!(a.isObject(t)&&a.isObject(t.webSocketTransport)&&a.isString(t.webSocketTransport.url)&&a.validWSUrl(t.webSocketTransport.url)&&a.isNumber(t.webSocketTransport.transportLifeTimeInSeconds)&&t.webSocketTransport.transportLifeTimeInSeconds>=3600)||(e.error("Invalid WebSocket Connection Configuration",t),!1)},T=function(){n.websocketInitFailed||(o.connConfig=null,o.promiseCompleted=!1,o.promiseHandle=i.getWebSocketTransport(),o.promiseHandle.then(function(t){o.promiseCompleted=!0,e.debug("Successfully fetched webSocket connection configuration"),k(t)?(o.connConfig=t,h&&(w("Restarting WebSocket Manager")||I())):S()},function(t){o.promiseCompleted=!0,e.error("Failed to fetch webSocket connection configuration",t),_()}))},I=function(){if(!n.websocketInitFailed){e.debug("Initializing Websocket Manager");try{k(o.connConfig)?((t=new WebSocket(o.connConfig.webSocketTransport.url)).addEventListener("open",m),t.addEventListener("message",b),t.addEventListener("error",y),t.addEventListener("close",v)):o.promiseCompleted&&S()}catch(t){e.error("Error Initializing web-socket-manager",t),S()}}};this.init=function(t){a.assertTrue(a.isFunction(t),"transportHandle must be a function"),null===i.getWebSocketTransport?(i.getWebSocketTransport=t,T()):e.warn("Web Socket Manager was already initialized")},this.onInitFailure=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.initFailure.add(e),n.websocketInitFailed&&e(),function(){return i.initFailure.delete(e)}},this.onConnectionGain=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.connectionGain.add(e),t&&t.readyState===WebSocket.OPEN&&e(),function(){return i.connectionGain.delete(e)}},this.onConnectionLost=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.connectionLost.add(e),t&&t.readyState===WebSocket.CLOSED&&e(),function(){return i.connectionLost.delete(e)}},this.onSubscriptionUpdate=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.subscriptionUpdate.add(e),function(){return i.subscriptionUpdate.delete(e)}},this.onSubscriptionFailure=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.subscriptionFailure.add(e),function(){return i.subscriptionFailure.delete(e)}},this.onMessage=function(e,t){return a.assertNotNull(e,"topicName"),a.assertTrue(a.isFunction(t),"cb must be a function"),i.topic.has(e)?i.topic.get(e).add(t):i.topic.set(e,new Set([t])),function(){return i.topic.get(e).delete(t)}},this.onAllMessage=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.allMessage.add(e),function(){return i.allMessage.delete(e)}},this.subscribeTopics=function(e){a.assertNotNull(e,"topics"),a.assertIsList(e),e.forEach(function(e){s.pending.add(e)}),t&&t.readyState===WebSocket.OPEN&&t.send(E(u,{topics:e}))},this.sendMessage=function(n){if(a.assertIsObject(n,"payload"),void 0===n.topic||c.has(n.topic))e.warn("Cannot send message, Invalid topic",n);else{try{n=JSON.stringify(n)}catch(t){return void e.warn("Error stringify message",n)}t&&t.readyState===WebSocket.OPEN?(e.debug("WebSocketManager sending message",n),t.send(n)):e.warn("Cannot send message, web socket connection is not open")}},this.closeWebSocket=function(){g(),clearInterval(p),w("User request to close WebSocket")}},k={create:function(){return new E},setGlobalConfig:function(e){var t=e.loggerConfig;C.updateLoggerConfig(t)},LogLevel:y,Logger:v}},function(e,t,n){var r;!function(){"use strict";var i={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function o(e){return function(e,t){var n,r,s,a,c,u,l,h,p,f=1,d=e.length,g="";for(r=0;r<d;r++)if("string"==typeof e[r])g+=e[r];else if("object"==typeof e[r]){if((a=e[r]).keys)for(n=t[f],s=0;s<a.keys.length;s++){if(null==n)throw new Error(o('[sprintf] Cannot access property "%s" of undefined value "%s"',a.keys[s],a.keys[s-1]));n=n[a.keys[s]]}else n=a.param_no?t[a.param_no]:t[f++];if(i.not_type.test(a.type)&&i.not_primitive.test(a.type)&&n instanceof Function&&(n=n()),i.numeric_arg.test(a.type)&&"number"!=typeof n&&isNaN(n))throw new TypeError(o("[sprintf] expecting number but found %T",n));switch(i.number.test(a.type)&&(h=n>=0),a.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,a.width?parseInt(a.width):0);break;case"e":n=a.precision?parseFloat(n).toExponential(a.precision):parseFloat(n).toExponential();break;case"f":n=a.precision?parseFloat(n).toFixed(a.precision):parseFloat(n);break;case"g":n=a.precision?String(Number(n.toPrecision(a.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=a.precision?n.substring(0,a.precision):n;break;case"t":n=String(!!n),n=a.precision?n.substring(0,a.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=a.precision?n.substring(0,a.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=a.precision?n.substring(0,a.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}i.json.test(a.type)?g+=n:(!i.number.test(a.type)||h&&!a.sign?p="":(p=h?"+":"-",n=n.toString().replace(i.sign,"")),u=a.pad_char?"0"===a.pad_char?"0":a.pad_char.charAt(1):" ",l=a.width-(p+n).length,c=a.width&&l>0?u.repeat(l):"",g+=a.align?p+n+c:"0"===u?p+c+n:c+p+n)}return g}(function(e){if(a[e])return a[e];for(var t,n=e,r=[],o=0;n;){if(null!==(t=i.text.exec(n)))r.push(t[0]);else if(null!==(t=i.modulo.exec(n)))r.push("%");else{if(null===(t=i.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){o|=1;var s=[],c=t[2],u=[];if(null===(u=i.key.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(s.push(u[1]);""!==(c=c.substring(u[0].length));)if(null!==(u=i.key_access.exec(c)))s.push(u[1]);else{if(null===(u=i.index_access.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");s.push(u[1])}t[2]=s}else o|=2;if(3===o)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");r.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return a[e]=r}(e),arguments)}function s(e,t){return o.apply(null,[e].concat(t||[]))}var a=Object.create(null);t.sprintf=o,t.vsprintf=s,"undefined"!=typeof window&&(window.sprintf=o,window.vsprintf=s,void 0===(r=function(){return{sprintf:o,vsprintf:s}}.call(t,n,t,e))||(e.exports=r))}()},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"WebSocketManager",function(){return i});var r=n(0);e.connect=e.connect||{},connect.WebSocketManager=r.a;var i=r.a}.call(this,n(3))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n}])},function(e,t,n){(function(r){var i,o;function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function e(t,n,r){function o(a,c){if(!n[a]){if(!t[a]){if(!c&&"function"==typeof i&&i)return i(a,!0);if(s)return s(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var l=n[a]={exports:{}};t[a][0].call(l.exports,function(e){return o(t[a][1][e]||e)},l,l.exports,e,t,n,r)}return n[a].exports}for(var s="function"==typeof i&&i,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,t,n){t.exports={version:"2.0",metadata:{apiVersion:"2014-06-30",endpointPrefix:"cognito-identity",jsonVersion:"1.1",protocol:"json",serviceFullName:"Amazon Cognito Identity",serviceId:"Cognito Identity",signatureVersion:"v4",targetPrefix:"AWSCognitoIdentityService",uid:"cognito-identity-2014-06-30"},operations:{CreateIdentityPool:{input:{type:"structure",required:["IdentityPoolName","AllowUnauthenticatedIdentities"],members:{IdentityPoolName:{},AllowUnauthenticatedIdentities:{type:"boolean"},AllowClassicFlow:{type:"boolean"},SupportedLoginProviders:{shape:"S5"},DeveloperProviderName:{},OpenIdConnectProviderARNs:{shape:"S9"},CognitoIdentityProviders:{shape:"Sb"},SamlProviderARNs:{shape:"Sg"},IdentityPoolTags:{shape:"Sh"}}},output:{shape:"Sk"}},DeleteIdentities:{input:{type:"structure",required:["IdentityIdsToDelete"],members:{IdentityIdsToDelete:{type:"list",member:{}}}},output:{type:"structure",members:{UnprocessedIdentityIds:{type:"list",member:{type:"structure",members:{IdentityId:{},ErrorCode:{}}}}}}},DeleteIdentityPool:{input:{type:"structure",required:["IdentityPoolId"],members:{IdentityPoolId:{}}}},DescribeIdentity:{input:{type:"structure",required:["IdentityId"],members:{IdentityId:{}}},output:{shape:"Sv"}},DescribeIdentityPool:{input:{type:"structure",required:["IdentityPoolId"],members:{IdentityPoolId:{}}},output:{shape:"Sk"}},GetCredentialsForIdentity:{input:{type:"structure",required:["IdentityId"],members:{IdentityId:{},Logins:{shape:"S10"},CustomRoleArn:{}}},output:{type:"structure",members:{IdentityId:{},Credentials:{type:"structure",members:{AccessKeyId:{},SecretKey:{},SessionToken:{},Expiration:{type:"timestamp"}}}}}},GetId:{input:{type:"structure",required:["IdentityPoolId"],members:{AccountId:{},IdentityPoolId:{},Logins:{shape:"S10"}}},output:{type:"structure",members:{IdentityId:{}}}},GetIdentityPoolRoles:{input:{type:"structure",required:["IdentityPoolId"],members:{IdentityPoolId:{}}},output:{type:"structure",members:{IdentityPoolId:{},Roles:{shape:"S1c"},RoleMappings:{shape:"S1e"}}}},GetOpenIdToken:{input:{type:"structure",required:["IdentityId"],members:{IdentityId:{},Logins:{shape:"S10"}}},output:{type:"structure",members:{IdentityId:{},Token:{}}}},GetOpenIdTokenForDeveloperIdentity:{input:{type:"structure",required:["IdentityPoolId","Logins"],members:{IdentityPoolId:{},IdentityId:{},Logins:{shape:"S10"},TokenDuration:{type:"long"}}},output:{type:"structure",members:{IdentityId:{},Token:{}}}},ListIdentities:{input:{type:"structure",required:["IdentityPoolId","MaxResults"],members:{IdentityPoolId:{},MaxResults:{type:"integer"},NextToken:{},HideDisabled:{type:"boolean"}}},output:{type:"structure",members:{IdentityPoolId:{},Identities:{type:"list",member:{shape:"Sv"}},NextToken:{}}}},ListIdentityPools:{input:{type:"structure",required:["MaxResults"],members:{MaxResults:{type:"integer"},NextToken:{}}},output:{type:"structure",members:{IdentityPools:{type:"list",member:{type:"structure",members:{IdentityPoolId:{},IdentityPoolName:{}}}},NextToken:{}}}},ListTagsForResource:{input:{type:"structure",required:["ResourceArn"],members:{ResourceArn:{}}},output:{type:"structure",members:{Tags:{shape:"Sh"}}}},LookupDeveloperIdentity:{input:{type:"structure",required:["IdentityPoolId"],members:{IdentityPoolId:{},IdentityId:{},DeveloperUserIdentifier:{},MaxResults:{type:"integer"},NextToken:{}}},output:{type:"structure",members:{IdentityId:{},DeveloperUserIdentifierList:{type:"list",member:{}},NextToken:{}}}},MergeDeveloperIdentities:{input:{type:"structure",required:["SourceUserIdentifier","DestinationUserIdentifier","DeveloperProviderName","IdentityPoolId"],members:{SourceUserIdentifier:{},DestinationUserIdentifier:{},DeveloperProviderName:{},IdentityPoolId:{}}},output:{type:"structure",members:{IdentityId:{}}}},SetIdentityPoolRoles:{input:{type:"structure",required:["IdentityPoolId","Roles"],members:{IdentityPoolId:{},Roles:{shape:"S1c"},RoleMappings:{shape:"S1e"}}}},TagResource:{input:{type:"structure",required:["ResourceArn","Tags"],members:{ResourceArn:{},Tags:{shape:"Sh"}}},output:{type:"structure",members:{}}},UnlinkDeveloperIdentity:{input:{type:"structure",required:["IdentityId","IdentityPoolId","DeveloperProviderName","DeveloperUserIdentifier"],members:{IdentityId:{},IdentityPoolId:{},DeveloperProviderName:{},DeveloperUserIdentifier:{}}}},UnlinkIdentity:{input:{type:"structure",required:["IdentityId","Logins","LoginsToRemove"],members:{IdentityId:{},Logins:{shape:"S10"},LoginsToRemove:{shape:"Sw"}}}},UntagResource:{input:{type:"structure",required:["ResourceArn","TagKeys"],members:{ResourceArn:{},TagKeys:{type:"list",member:{}}}},output:{type:"structure",members:{}}},UpdateIdentityPool:{input:{shape:"Sk"},output:{shape:"Sk"}}},shapes:{S5:{type:"map",key:{},value:{}},S9:{type:"list",member:{}},Sb:{type:"list",member:{type:"structure",members:{ProviderName:{},ClientId:{},ServerSideTokenCheck:{type:"boolean"}}}},Sg:{type:"list",member:{}},Sh:{type:"map",key:{},value:{}},Sk:{type:"structure",required:["IdentityPoolId","IdentityPoolName","AllowUnauthenticatedIdentities"],members:{IdentityPoolId:{},IdentityPoolName:{},AllowUnauthenticatedIdentities:{type:"boolean"},AllowClassicFlow:{type:"boolean"},SupportedLoginProviders:{shape:"S5"},DeveloperProviderName:{},OpenIdConnectProviderARNs:{shape:"S9"},CognitoIdentityProviders:{shape:"Sb"},SamlProviderARNs:{shape:"Sg"},IdentityPoolTags:{shape:"Sh"}}},Sv:{type:"structure",members:{IdentityId:{},Logins:{shape:"Sw"},CreationDate:{type:"timestamp"},LastModifiedDate:{type:"timestamp"}}},Sw:{type:"list",member:{}},S10:{type:"map",key:{},value:{}},S1c:{type:"map",key:{},value:{}},S1e:{type:"map",key:{},value:{type:"structure",required:["Type"],members:{Type:{},AmbiguousRoleResolution:{},RulesConfiguration:{type:"structure",required:["Rules"],members:{Rules:{type:"list",member:{type:"structure",required:["Claim","MatchType","Value","RoleARN"],members:{Claim:{},MatchType:{},Value:{},RoleARN:{}}}}}}}}}}}},{}],2:[function(e,t,n){t.exports={pagination:{}}},{}],3:[function(e,t,n){t.exports={version:"2.0",metadata:{apiVersion:"2018-09-07",endpointPrefix:"participant.connect",jsonVersion:"1.1",protocol:"rest-json",serviceAbbreviation:"Amazon Connect Participant",serviceFullName:"Amazon Connect Participant Service",serviceId:"ConnectParticipant",signatureVersion:"v4",signingName:"execute-api",uid:"connectparticipant-2018-09-07"},operations:{CreateParticipantConnection:{http:{requestUri:"/participant/connection"},input:{type:"structure",required:["Type","ParticipantToken"],members:{Type:{type:"list",member:{}},ParticipantToken:{location:"header",locationName:"X-Amz-Bearer"}}},output:{type:"structure",members:{Websocket:{type:"structure",members:{Url:{},ConnectionExpiry:{}}},ConnectionCredentials:{type:"structure",members:{ConnectionToken:{},Expiry:{}}}}}},DisconnectParticipant:{http:{requestUri:"/participant/disconnect"},input:{type:"structure",required:["ConnectionToken"],members:{ClientToken:{idempotencyToken:!0},ConnectionToken:{location:"header",locationName:"X-Amz-Bearer"}}},output:{type:"structure",members:{}}},GetTranscript:{http:{requestUri:"/participant/transcript"},input:{type:"structure",required:["ConnectionToken"],members:{ContactId:{},MaxResults:{type:"integer"},NextToken:{},ScanDirection:{},SortOrder:{},StartPosition:{type:"structure",members:{Id:{},AbsoluteTime:{},MostRecent:{type:"integer"}}},ConnectionToken:{location:"header",locationName:"X-Amz-Bearer"}}},output:{type:"structure",members:{InitialContactId:{},Transcript:{type:"list",member:{type:"structure",members:{AbsoluteTime:{},Content:{},ContentType:{},Id:{},Type:{},ParticipantId:{},DisplayName:{},ParticipantRole:{}}}},NextToken:{}}}},SendEvent:{http:{requestUri:"/participant/event"},input:{type:"structure",required:["ContentType","ConnectionToken"],members:{ContentType:{},Content:{},ClientToken:{idempotencyToken:!0},ConnectionToken:{location:"header",locationName:"X-Amz-Bearer"}}},output:{type:"structure",members:{Id:{},AbsoluteTime:{}}}},SendMessage:{http:{requestUri:"/participant/message"},input:{type:"structure",required:["ContentType","Content","ConnectionToken"],members:{ContentType:{},Content:{},ClientToken:{idempotencyToken:!0},ConnectionToken:{location:"header",locationName:"X-Amz-Bearer"}}},output:{type:"structure",members:{Id:{},AbsoluteTime:{}}}}},shapes:{}}},{}],4:[function(e,t,n){t.exports={pagination:{GetTranscript:{input_token:"NextToken",output_token:"NextToken",limit_key:"MaxResults"}}}},{}],5:[function(e,t,n){t.exports={acm:{name:"ACM",cors:!0},apigateway:{name:"APIGateway",cors:!0},applicationautoscaling:{prefix:"application-autoscaling",name:"ApplicationAutoScaling",cors:!0},appstream:{name:"AppStream"},autoscaling:{name:"AutoScaling",cors:!0},batch:{name:"Batch"},budgets:{name:"Budgets"},clouddirectory:{name:"CloudDirectory",versions:["2016-05-10*"]},cloudformation:{name:"CloudFormation",cors:!0},cloudfront:{name:"CloudFront",versions:["2013-05-12*","2013-11-11*","2014-05-31*","2014-10-21*","2014-11-06*","2015-04-17*","2015-07-27*","2015-09-17*","2016-01-13*","2016-01-28*","2016-08-01*","2016-08-20*","2016-09-07*","2016-09-29*","2016-11-25*","2017-03-25*","2017-10-30*","2018-06-18*","2018-11-05*"],cors:!0},cloudhsm:{name:"CloudHSM",cors:!0},cloudsearch:{name:"CloudSearch"},cloudsearchdomain:{name:"CloudSearchDomain"},cloudtrail:{name:"CloudTrail",cors:!0},cloudwatch:{prefix:"monitoring",name:"CloudWatch",cors:!0},cloudwatchevents:{prefix:"events",name:"CloudWatchEvents",versions:["2014-02-03*"],cors:!0},cloudwatchlogs:{prefix:"logs",name:"CloudWatchLogs",cors:!0},codebuild:{name:"CodeBuild",cors:!0},codecommit:{name:"CodeCommit",cors:!0},codedeploy:{name:"CodeDeploy",cors:!0},codepipeline:{name:"CodePipeline",cors:!0},cognitoidentity:{prefix:"cognito-identity",name:"CognitoIdentity",cors:!0},cognitoidentityserviceprovider:{prefix:"cognito-idp",name:"CognitoIdentityServiceProvider",cors:!0},cognitosync:{prefix:"cognito-sync",name:"CognitoSync",cors:!0},configservice:{prefix:"config",name:"ConfigService",cors:!0},cur:{name:"CUR",cors:!0},datapipeline:{name:"DataPipeline"},devicefarm:{name:"DeviceFarm",cors:!0},directconnect:{name:"DirectConnect",cors:!0},directoryservice:{prefix:"ds",name:"DirectoryService"},discovery:{name:"Discovery"},dms:{name:"DMS"},dynamodb:{name:"DynamoDB",cors:!0},dynamodbstreams:{prefix:"streams.dynamodb",name:"DynamoDBStreams",cors:!0},ec2:{name:"EC2",versions:["2013-06-15*","2013-10-15*","2014-02-01*","2014-05-01*","2014-06-15*","2014-09-01*","2014-10-01*","2015-03-01*","2015-04-15*","2015-10-01*","2016-04-01*","2016-09-15*"],cors:!0},ecr:{name:"ECR",cors:!0},ecs:{name:"ECS",cors:!0},efs:{prefix:"elasticfilesystem",name:"EFS",cors:!0},elasticache:{name:"ElastiCache",versions:["2012-11-15*","2014-03-24*","2014-07-15*","2014-09-30*"],cors:!0},elasticbeanstalk:{name:"ElasticBeanstalk",cors:!0},elb:{prefix:"elasticloadbalancing",name:"ELB",cors:!0},elbv2:{prefix:"elasticloadbalancingv2",name:"ELBv2",cors:!0},emr:{prefix:"elasticmapreduce",name:"EMR",cors:!0},es:{name:"ES"},elastictranscoder:{name:"ElasticTranscoder",cors:!0},firehose:{name:"Firehose",cors:!0},gamelift:{name:"GameLift",cors:!0},glacier:{name:"Glacier"},health:{name:"Health"},iam:{name:"IAM",cors:!0},importexport:{name:"ImportExport"},inspector:{name:"Inspector",versions:["2015-08-18*"],cors:!0},iot:{name:"Iot",cors:!0},iotdata:{prefix:"iot-data",name:"IotData",cors:!0},kinesis:{name:"Kinesis",cors:!0},kinesisanalytics:{name:"KinesisAnalytics"},kms:{name:"KMS",cors:!0},lambda:{name:"Lambda",cors:!0},lexruntime:{prefix:"runtime.lex",name:"LexRuntime",cors:!0},lightsail:{name:"Lightsail"},machinelearning:{name:"MachineLearning",cors:!0},marketplacecommerceanalytics:{name:"MarketplaceCommerceAnalytics",cors:!0},marketplacemetering:{prefix:"meteringmarketplace",name:"MarketplaceMetering"},mturk:{prefix:"mturk-requester",name:"MTurk",cors:!0},mobileanalytics:{name:"MobileAnalytics",cors:!0},opsworks:{name:"OpsWorks",cors:!0},opsworkscm:{name:"OpsWorksCM"},organizations:{name:"Organizations"},pinpoint:{name:"Pinpoint"},polly:{name:"Polly",cors:!0},rds:{name:"RDS",versions:["2014-09-01*"],cors:!0},redshift:{name:"Redshift",cors:!0},rekognition:{name:"Rekognition",cors:!0},resourcegroupstaggingapi:{name:"ResourceGroupsTaggingAPI"},route53:{name:"Route53",cors:!0},route53domains:{name:"Route53Domains",cors:!0},s3:{name:"S3",dualstackAvailable:!0,cors:!0},s3control:{name:"S3Control",dualstackAvailable:!0},servicecatalog:{name:"ServiceCatalog",cors:!0},ses:{prefix:"email",name:"SES",cors:!0},shield:{name:"Shield"},simpledb:{prefix:"sdb",name:"SimpleDB"},sms:{name:"SMS"},snowball:{name:"Snowball"},sns:{name:"SNS",cors:!0},sqs:{name:"SQS",cors:!0},ssm:{name:"SSM",cors:!0},storagegateway:{name:"StorageGateway",cors:!0},stepfunctions:{prefix:"states",name:"StepFunctions"},sts:{name:"STS",cors:!0},support:{name:"Support"},swf:{name:"SWF"},xray:{name:"XRay",cors:!0},waf:{name:"WAF",cors:!0},wafregional:{prefix:"waf-regional",name:"WAFRegional"},workdocs:{name:"WorkDocs",cors:!0},workspaces:{name:"WorkSpaces"},codestar:{name:"CodeStar"},lexmodelbuildingservice:{prefix:"lex-models",name:"LexModelBuildingService",cors:!0},marketplaceentitlementservice:{prefix:"entitlement.marketplace",name:"MarketplaceEntitlementService"},athena:{name:"Athena"},greengrass:{name:"Greengrass"},dax:{name:"DAX"},migrationhub:{prefix:"AWSMigrationHub",name:"MigrationHub"},cloudhsmv2:{name:"CloudHSMV2"},glue:{name:"Glue"},mobile:{name:"Mobile"},pricing:{name:"Pricing",cors:!0},costexplorer:{prefix:"ce",name:"CostExplorer",cors:!0},mediaconvert:{name:"MediaConvert"},medialive:{name:"MediaLive"},mediapackage:{name:"MediaPackage"},mediastore:{name:"MediaStore"},mediastoredata:{prefix:"mediastore-data",name:"MediaStoreData",cors:!0},appsync:{name:"AppSync"},guardduty:{name:"GuardDuty"},mq:{name:"MQ"},comprehend:{name:"Comprehend",cors:!0},iotjobsdataplane:{prefix:"iot-jobs-data",name:"IoTJobsDataPlane"},kinesisvideoarchivedmedia:{prefix:"kinesis-video-archived-media",name:"KinesisVideoArchivedMedia",cors:!0},kinesisvideomedia:{prefix:"kinesis-video-media",name:"KinesisVideoMedia",cors:!0},kinesisvideo:{name:"KinesisVideo",cors:!0},sagemakerruntime:{prefix:"runtime.sagemaker",name:"SageMakerRuntime"},sagemaker:{name:"SageMaker"},translate:{name:"Translate",cors:!0},resourcegroups:{prefix:"resource-groups",name:"ResourceGroups",cors:!0},alexaforbusiness:{name:"AlexaForBusiness"},cloud9:{name:"Cloud9"},serverlessapplicationrepository:{prefix:"serverlessrepo",name:"ServerlessApplicationRepository"},servicediscovery:{name:"ServiceDiscovery"},workmail:{name:"WorkMail"},autoscalingplans:{prefix:"autoscaling-plans",name:"AutoScalingPlans"},transcribeservice:{prefix:"transcribe",name:"TranscribeService"},connect:{name:"Connect",cors:!0},acmpca:{prefix:"acm-pca",name:"ACMPCA"},fms:{name:"FMS"},secretsmanager:{name:"SecretsManager",cors:!0},iotanalytics:{name:"IoTAnalytics",cors:!0},iot1clickdevicesservice:{prefix:"iot1click-devices",name:"IoT1ClickDevicesService"},iot1clickprojects:{prefix:"iot1click-projects",name:"IoT1ClickProjects"},pi:{name:"PI"},neptune:{name:"Neptune"},mediatailor:{name:"MediaTailor"},eks:{name:"EKS"},macie:{name:"Macie"},dlm:{name:"DLM"},signer:{name:"Signer"},chime:{name:"Chime"},pinpointemail:{prefix:"pinpoint-email",name:"PinpointEmail"},ram:{name:"RAM"},route53resolver:{name:"Route53Resolver"},pinpointsmsvoice:{prefix:"sms-voice",name:"PinpointSMSVoice"},quicksight:{name:"QuickSight"},rdsdataservice:{prefix:"rds-data",name:"RDSDataService"},amplify:{name:"Amplify"},datasync:{name:"DataSync"},robomaker:{name:"RoboMaker"},transfer:{name:"Transfer"},globalaccelerator:{name:"GlobalAccelerator"},comprehendmedical:{name:"ComprehendMedical",cors:!0},kinesisanalyticsv2:{name:"KinesisAnalyticsV2"},mediaconnect:{name:"MediaConnect"},fsx:{name:"FSx"},securityhub:{name:"SecurityHub"},appmesh:{name:"AppMesh",versions:["2018-10-01*"]},licensemanager:{prefix:"license-manager",name:"LicenseManager"},kafka:{name:"Kafka"},apigatewaymanagementapi:{name:"ApiGatewayManagementApi"},apigatewayv2:{name:"ApiGatewayV2"},docdb:{name:"DocDB"},backup:{name:"Backup"},worklink:{name:"WorkLink"},textract:{name:"Textract"},managedblockchain:{name:"ManagedBlockchain"},mediapackagevod:{prefix:"mediapackage-vod",name:"MediaPackageVod"},groundstation:{name:"GroundStation"},iotthingsgraph:{name:"IoTThingsGraph"},iotevents:{name:"IoTEvents"},ioteventsdata:{prefix:"iotevents-data",name:"IoTEventsData"},personalize:{name:"Personalize",cors:!0},personalizeevents:{prefix:"personalize-events",name:"PersonalizeEvents",cors:!0},personalizeruntime:{prefix:"personalize-runtime",name:"PersonalizeRuntime",cors:!0},applicationinsights:{prefix:"application-insights",name:"ApplicationInsights"},servicequotas:{prefix:"service-quotas",name:"ServiceQuotas"},ec2instanceconnect:{prefix:"ec2-instance-connect",name:"EC2InstanceConnect"},eventbridge:{name:"EventBridge"},lakeformation:{name:"LakeFormation"},forecastservice:{prefix:"forecast",name:"ForecastService",cors:!0},forecastqueryservice:{prefix:"forecastquery",name:"ForecastQueryService",cors:!0},qldb:{name:"QLDB"},qldbsession:{prefix:"qldb-session",name:"QLDBSession"},workmailmessageflow:{name:"WorkMailMessageFlow"},codestarnotifications:{prefix:"codestar-notifications",name:"CodeStarNotifications"},savingsplans:{name:"SavingsPlans"},sso:{name:"SSO"},ssooidc:{prefix:"sso-oidc",name:"SSOOIDC"},connectparticipant:{name:"ConnectParticipant"}}},{}],6:[function(e,t,n){t.exports={version:"2.0",metadata:{apiVersion:"2011-06-15",endpointPrefix:"sts",globalEndpoint:"sts.amazonaws.com",protocol:"query",serviceAbbreviation:"AWS STS",serviceFullName:"AWS Security Token Service",serviceId:"STS",signatureVersion:"v4",uid:"sts-2011-06-15",xmlNamespace:"https://sts.amazonaws.com/doc/2011-06-15/"},operations:{AssumeRole:{input:{type:"structure",required:["RoleArn","RoleSessionName"],members:{RoleArn:{},RoleSessionName:{},PolicyArns:{shape:"S4"},Policy:{},DurationSeconds:{type:"integer"},ExternalId:{},SerialNumber:{},TokenCode:{}}},output:{resultWrapper:"AssumeRoleResult",type:"structure",members:{Credentials:{shape:"Sc"},AssumedRoleUser:{shape:"Sh"},PackedPolicySize:{type:"integer"}}}},AssumeRoleWithSAML:{input:{type:"structure",required:["RoleArn","PrincipalArn","SAMLAssertion"],members:{RoleArn:{},PrincipalArn:{},SAMLAssertion:{},PolicyArns:{shape:"S4"},Policy:{},DurationSeconds:{type:"integer"}}},output:{resultWrapper:"AssumeRoleWithSAMLResult",type:"structure",members:{Credentials:{shape:"Sc"},AssumedRoleUser:{shape:"Sh"},PackedPolicySize:{type:"integer"},Subject:{},SubjectType:{},Issuer:{},Audience:{},NameQualifier:{}}}},AssumeRoleWithWebIdentity:{input:{type:"structure",required:["RoleArn","RoleSessionName","WebIdentityToken"],members:{RoleArn:{},RoleSessionName:{},WebIdentityToken:{},ProviderId:{},PolicyArns:{shape:"S4"},Policy:{},DurationSeconds:{type:"integer"}}},output:{resultWrapper:"AssumeRoleWithWebIdentityResult",type:"structure",members:{Credentials:{shape:"Sc"},SubjectFromWebIdentityToken:{},AssumedRoleUser:{shape:"Sh"},PackedPolicySize:{type:"integer"},Provider:{},Audience:{}}}},DecodeAuthorizationMessage:{input:{type:"structure",required:["EncodedMessage"],members:{EncodedMessage:{}}},output:{resultWrapper:"DecodeAuthorizationMessageResult",type:"structure",members:{DecodedMessage:{}}}},GetAccessKeyInfo:{input:{type:"structure",required:["AccessKeyId"],members:{AccessKeyId:{}}},output:{resultWrapper:"GetAccessKeyInfoResult",type:"structure",members:{Account:{}}}},GetCallerIdentity:{input:{type:"structure",members:{}},output:{resultWrapper:"GetCallerIdentityResult",type:"structure",members:{UserId:{},Account:{},Arn:{}}}},GetFederationToken:{input:{type:"structure",required:["Name"],members:{Name:{},Policy:{},PolicyArns:{shape:"S4"},DurationSeconds:{type:"integer"}}},output:{resultWrapper:"GetFederationTokenResult",type:"structure",members:{Credentials:{shape:"Sc"},FederatedUser:{type:"structure",required:["FederatedUserId","Arn"],members:{FederatedUserId:{},Arn:{}}},PackedPolicySize:{type:"integer"}}}},GetSessionToken:{input:{type:"structure",members:{DurationSeconds:{type:"integer"},SerialNumber:{},TokenCode:{}}},output:{resultWrapper:"GetSessionTokenResult",type:"structure",members:{Credentials:{shape:"Sc"}}}}},shapes:{S4:{type:"list",member:{type:"structure",members:{arn:{}}}},Sc:{type:"structure",required:["AccessKeyId","SecretAccessKey","SessionToken","Expiration"],members:{AccessKeyId:{},SecretAccessKey:{},SessionToken:{},Expiration:{type:"timestamp"}}},Sh:{type:"structure",required:["AssumedRoleId","Arn"],members:{AssumedRoleId:{},Arn:{}}}}}},{}],7:[function(e,t,n){arguments[4][2][0].apply(n,arguments)},{dup:2}],8:[function(e,t,n){e("../lib/node_loader");var r=e("../lib/core"),i=r.Service,o=r.apiLoader;o.services.cognitoidentity={},r.CognitoIdentity=i.defineService("cognitoidentity",["2014-06-30"]),e("../lib/services/cognitoidentity"),Object.defineProperty(o.services.cognitoidentity,"2014-06-30",{get:function(){var t=e("../apis/cognito-identity-2014-06-30.min.json");return t.paginators=e("../apis/cognito-identity-2014-06-30.paginators.json").pagination,t},enumerable:!0,configurable:!0}),t.exports=r.CognitoIdentity},{"../apis/cognito-identity-2014-06-30.min.json":1,"../apis/cognito-identity-2014-06-30.paginators.json":2,"../lib/core":19,"../lib/node_loader":17,"../lib/services/cognitoidentity":61}],9:[function(e,t,n){e("../lib/node_loader");var r=e("../lib/core"),i=r.Service,o=r.apiLoader;o.services.sts={},r.STS=i.defineService("sts",["2011-06-15"]),e("../lib/services/sts"),Object.defineProperty(o.services.sts,"2011-06-15",{get:function(){var t=e("../apis/sts-2011-06-15.min.json");return t.paginators=e("../apis/sts-2011-06-15.paginators.json").pagination,t},enumerable:!0,configurable:!0}),t.exports=r.STS},{"../apis/sts-2011-06-15.min.json":6,"../apis/sts-2011-06-15.paginators.json":7,"../lib/core":19,"../lib/node_loader":17,"../lib/services/sts":62}],10:[function(e,t,n){function r(e,t){if(!r.services.hasOwnProperty(e))throw new Error("InvalidService: Failed to load api for "+e);return r.services[e][t]}r.services={},t.exports=r},{}],11:[function(e,t,n){var r=e("./browserHmac"),i=e("./browserMd5"),o=e("./browserSha1"),s=e("./browserSha256");t.exports={createHash:function(e){if("md5"===(e=e.toLowerCase()))return new i;if("sha256"===e)return new s;if("sha1"===e)return new o;throw new Error("Hash algorithm "+e+" is not supported in the browser SDK")},createHmac:function(e,t){if("md5"===(e=e.toLowerCase()))return new r(i,t);if("sha256"===e)return new r(s,t);if("sha1"===e)return new r(o,t);throw new Error("HMAC algorithm "+e+" is not supported in the browser SDK")},createSign:function(){throw new Error("createSign is not implemented in the browser")}}},{"./browserHmac":13,"./browserMd5":14,"./browserSha1":15,"./browserSha256":16}],12:[function(e,t,n){var r=e("buffer/").Buffer;"undefined"!=typeof ArrayBuffer&&void 0===ArrayBuffer.isView&&(ArrayBuffer.isView=function(e){return i.indexOf(Object.prototype.toString.call(e))>-1});var i=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]","[object DataView]"];t.exports={isEmptyData:function(e){return"string"==typeof e?0===e.length:0===e.byteLength},convertToBuffer:function(e){return"string"==typeof e&&(e=new r(e,"utf8")),ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e)}}},{"buffer/":81}],13:[function(e,t,n){function r(e,t){this.hash=new e,this.outer=new e;var n=i(e,t),r=new Uint8Array(e.BLOCK_SIZE);r.set(n);for(var o=0;o<e.BLOCK_SIZE;o++)n[o]^=54,r[o]^=92;this.hash.update(n),this.outer.update(r);for(o=0;o<n.byteLength;o++)n[o]=0}function i(e,t){var n=o.convertToBuffer(t);if(n.byteLength>e.BLOCK_SIZE){var r=new e;r.update(n),n=r.digest()}var i=new Uint8Array(e.BLOCK_SIZE);return i.set(n),i}var o=e("./browserHashUtils");t.exports=r,r.prototype.update=function(e){if(o.isEmptyData(e)||this.error)return this;try{this.hash.update(o.convertToBuffer(e))}catch(e){this.error=e}return this},r.prototype.digest=function(e){return this.outer.finished||this.outer.update(this.hash.digest()),this.outer.digest(e)}},{"./browserHashUtils":12}],14:[function(e,t,n){function r(){this.state=[1732584193,4023233417,2562383102,271733878],this.buffer=new DataView(new ArrayBuffer(h)),this.bufferLength=0,this.bytesHashed=0,this.finished=!1}function i(e,t,n,r,i,o){return((t=(t+e&4294967295)+(r+o&4294967295)&4294967295)<<i|t>>>32-i)+n&4294967295}function o(e,t,n,r,o,s,a){return i(t&n|~t&r,e,t,o,s,a)}function s(e,t,n,r,o,s,a){return i(t&r|n&~r,e,t,o,s,a)}function a(e,t,n,r,o,s,a){return i(t^n^r,e,t,o,s,a)}function c(e,t,n,r,o,s,a){return i(n^(t|~r),e,t,o,s,a)}var u=e("./browserHashUtils"),l=e("buffer/").Buffer,h=64;t.exports=r,r.BLOCK_SIZE=h,r.prototype.update=function(e){if(u.isEmptyData(e))return this;if(this.finished)throw new Error("Attempted to update an already finished hash.");var t=u.convertToBuffer(e),n=0,r=t.byteLength;for(this.bytesHashed+=r;r>0;)this.buffer.setUint8(this.bufferLength++,t[n++]),r--,this.bufferLength===h&&(this.hashBuffer(),this.bufferLength=0);return this},r.prototype.digest=function(e){if(!this.finished){var t=this,n=t.buffer,r=t.bufferLength,i=8*t.bytesHashed;if(n.setUint8(this.bufferLength++,128),r%h>=h-8){for(var o=this.bufferLength;o<h;o++)n.setUint8(o,0);this.hashBuffer(),this.bufferLength=0}for(o=this.bufferLength;o<h-8;o++)n.setUint8(o,0);n.setUint32(h-8,i>>>0,!0),n.setUint32(h-4,Math.floor(i/4294967296),!0),this.hashBuffer(),this.finished=!0}var s=new DataView(new ArrayBuffer(16));for(o=0;o<4;o++)s.setUint32(4*o,this.state[o],!0);var a=new l(s.buffer,s.byteOffset,s.byteLength);return e?a.toString(e):a},r.prototype.hashBuffer=function(){var e=this.buffer,t=this.state,n=t[0],r=t[1],i=t[2],u=t[3];n=o(n,r,i,u,e.getUint32(0,!0),7,3614090360),u=o(u,n,r,i,e.getUint32(4,!0),12,3905402710),i=o(i,u,n,r,e.getUint32(8,!0),17,606105819),r=o(r,i,u,n,e.getUint32(12,!0),22,3250441966),n=o(n,r,i,u,e.getUint32(16,!0),7,4118548399),u=o(u,n,r,i,e.getUint32(20,!0),12,1200080426),i=o(i,u,n,r,e.getUint32(24,!0),17,2821735955),r=o(r,i,u,n,e.getUint32(28,!0),22,4249261313),n=o(n,r,i,u,e.getUint32(32,!0),7,1770035416),u=o(u,n,r,i,e.getUint32(36,!0),12,2336552879),i=o(i,u,n,r,e.getUint32(40,!0),17,4294925233),r=o(r,i,u,n,e.getUint32(44,!0),22,2304563134),n=o(n,r,i,u,e.getUint32(48,!0),7,1804603682),u=o(u,n,r,i,e.getUint32(52,!0),12,4254626195),i=o(i,u,n,r,e.getUint32(56,!0),17,2792965006),n=s(n,r=o(r,i,u,n,e.getUint32(60,!0),22,1236535329),i,u,e.getUint32(4,!0),5,4129170786),u=s(u,n,r,i,e.getUint32(24,!0),9,3225465664),i=s(i,u,n,r,e.getUint32(44,!0),14,643717713),r=s(r,i,u,n,e.getUint32(0,!0),20,3921069994),n=s(n,r,i,u,e.getUint32(20,!0),5,3593408605),u=s(u,n,r,i,e.getUint32(40,!0),9,38016083),i=s(i,u,n,r,e.getUint32(60,!0),14,3634488961),r=s(r,i,u,n,e.getUint32(16,!0),20,3889429448),n=s(n,r,i,u,e.getUint32(36,!0),5,568446438),u=s(u,n,r,i,e.getUint32(56,!0),9,3275163606),i=s(i,u,n,r,e.getUint32(12,!0),14,4107603335),r=s(r,i,u,n,e.getUint32(32,!0),20,1163531501),n=s(n,r,i,u,e.getUint32(52,!0),5,2850285829),u=s(u,n,r,i,e.getUint32(8,!0),9,4243563512),i=s(i,u,n,r,e.getUint32(28,!0),14,1735328473),n=a(n,r=s(r,i,u,n,e.getUint32(48,!0),20,2368359562),i,u,e.getUint32(20,!0),4,4294588738),u=a(u,n,r,i,e.getUint32(32,!0),11,2272392833),i=a(i,u,n,r,e.getUint32(44,!0),16,1839030562),r=a(r,i,u,n,e.getUint32(56,!0),23,4259657740),n=a(n,r,i,u,e.getUint32(4,!0),4,2763975236),u=a(u,n,r,i,e.getUint32(16,!0),11,1272893353),i=a(i,u,n,r,e.getUint32(28,!0),16,4139469664),r=a(r,i,u,n,e.getUint32(40,!0),23,3200236656),n=a(n,r,i,u,e.getUint32(52,!0),4,681279174),u=a(u,n,r,i,e.getUint32(0,!0),11,3936430074),i=a(i,u,n,r,e.getUint32(12,!0),16,3572445317),r=a(r,i,u,n,e.getUint32(24,!0),23,76029189),n=a(n,r,i,u,e.getUint32(36,!0),4,3654602809),u=a(u,n,r,i,e.getUint32(48,!0),11,3873151461),i=a(i,u,n,r,e.getUint32(60,!0),16,530742520),n=c(n,r=a(r,i,u,n,e.getUint32(8,!0),23,3299628645),i,u,e.getUint32(0,!0),6,4096336452),u=c(u,n,r,i,e.getUint32(28,!0),10,1126891415),i=c(i,u,n,r,e.getUint32(56,!0),15,2878612391),r=c(r,i,u,n,e.getUint32(20,!0),21,4237533241),n=c(n,r,i,u,e.getUint32(48,!0),6,1700485571),u=c(u,n,r,i,e.getUint32(12,!0),10,2399980690),i=c(i,u,n,r,e.getUint32(40,!0),15,4293915773),r=c(r,i,u,n,e.getUint32(4,!0),21,2240044497),n=c(n,r,i,u,e.getUint32(32,!0),6,1873313359),u=c(u,n,r,i,e.getUint32(60,!0),10,4264355552),i=c(i,u,n,r,e.getUint32(24,!0),15,2734768916),r=c(r,i,u,n,e.getUint32(52,!0),21,1309151649),n=c(n,r,i,u,e.getUint32(16,!0),6,4149444226),u=c(u,n,r,i,e.getUint32(44,!0),10,3174756917),i=c(i,u,n,r,e.getUint32(8,!0),15,718787259),r=c(r,i,u,n,e.getUint32(36,!0),21,3951481745),t[0]=n+t[0]&4294967295,t[1]=r+t[1]&4294967295,t[2]=i+t[2]&4294967295,t[3]=u+t[3]&4294967295}},{"./browserHashUtils":12,"buffer/":81}],15:[function(e,t,n){function r(){this.h0=1732584193,this.h1=4023233417,this.h2=2562383102,this.h3=271733878,this.h4=3285377520,this.block=new Uint32Array(80),this.offset=0,this.shift=24,this.totalLength=0}var i=e("buffer/").Buffer,o=e("./browserHashUtils");new Uint32Array([1518500249,1859775393,-1894007588,-899497514]),Math.pow(2,53),t.exports=r,r.BLOCK_SIZE=64,r.prototype.update=function(e){if(this.finished)throw new Error("Attempted to update an already finished hash.");if(o.isEmptyData(e))return this;var t=(e=o.convertToBuffer(e)).length;this.totalLength+=8*t;for(var n=0;n<t;n++)this.write(e[n]);return this},r.prototype.write=function(e){this.block[this.offset]|=(255&e)<<this.shift,this.shift?this.shift-=8:(this.offset++,this.shift=24),16===this.offset&&this.processBlock()},r.prototype.digest=function(e){this.write(128),(this.offset>14||14===this.offset&&this.shift<24)&&this.processBlock(),this.offset=14,this.shift=24,this.write(0),this.write(0),this.write(this.totalLength>0xffffffffff?this.totalLength/1099511627776:0),this.write(this.totalLength>4294967295?this.totalLength/4294967296:0);for(var t=24;t>=0;t-=8)this.write(this.totalLength>>t);var n=new i(20),r=new DataView(n.buffer);return r.setUint32(0,this.h0,!1),r.setUint32(4,this.h1,!1),r.setUint32(8,this.h2,!1),r.setUint32(12,this.h3,!1),r.setUint32(16,this.h4,!1),e?n.toString(e):n},r.prototype.processBlock=function(){for(var e=16;e<80;e++){var t=this.block[e-3]^this.block[e-8]^this.block[e-14]^this.block[e-16];this.block[e]=t<<1|t>>>31}var n,r,i=this.h0,o=this.h1,s=this.h2,a=this.h3,c=this.h4;for(e=0;e<80;e++){e<20?(n=a^o&(s^a),r=1518500249):e<40?(n=o^s^a,r=1859775393):e<60?(n=o&s|a&(o|s),r=2400959708):(n=o^s^a,r=3395469782);var u=(i<<5|i>>>27)+n+c+r+(0|this.block[e]);c=a,a=s,s=o<<30|o>>>2,o=i,i=u}for(this.h0=this.h0+i|0,this.h1=this.h1+o|0,this.h2=this.h2+s|0,this.h3=this.h3+a|0,this.h4=this.h4+c|0,this.offset=0,e=0;e<16;e++)this.block[e]=0}},{"./browserHashUtils":12,"buffer/":81}],16:[function(e,t,n){function r(){this.state=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.temp=new Int32Array(64),this.buffer=new Uint8Array(64),this.bufferLength=0,this.bytesHashed=0,this.finished=!1}var i=e("buffer/").Buffer,o=e("./browserHashUtils"),s=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),a=Math.pow(2,53)-1;t.exports=r,r.BLOCK_SIZE=64,r.prototype.update=function(e){if(this.finished)throw new Error("Attempted to update an already finished hash.");if(o.isEmptyData(e))return this;var t=0,n=(e=o.convertToBuffer(e)).byteLength;if(this.bytesHashed+=n,8*this.bytesHashed>a)throw new Error("Cannot hash more than 2^53 - 1 bits");for(;n>0;)this.buffer[this.bufferLength++]=e[t++],n--,64===this.bufferLength&&(this.hashBuffer(),this.bufferLength=0);return this},r.prototype.digest=function(e){if(!this.finished){var t=8*this.bytesHashed,n=new DataView(this.buffer.buffer,this.buffer.byteOffset,this.buffer.byteLength),r=this.bufferLength;if(n.setUint8(this.bufferLength++,128),r%64>=56){for(var o=this.bufferLength;o<64;o++)n.setUint8(o,0);this.hashBuffer(),this.bufferLength=0}for(o=this.bufferLength;o<56;o++)n.setUint8(o,0);n.setUint32(56,Math.floor(t/4294967296),!0),n.setUint32(60,t),this.hashBuffer(),this.finished=!0}var s=new i(32);for(o=0;o<8;o++)s[4*o]=this.state[o]>>>24&255,s[4*o+1]=this.state[o]>>>16&255,s[4*o+2]=this.state[o]>>>8&255,s[4*o+3]=this.state[o]>>>0&255;return e?s.toString(e):s},r.prototype.hashBuffer=function(){for(var e=this.buffer,t=this.state,n=t[0],r=t[1],i=t[2],o=t[3],a=t[4],c=t[5],u=t[6],l=t[7],h=0;h<64;h++){if(h<16)this.temp[h]=(255&e[4*h])<<24|(255&e[4*h+1])<<16|(255&e[4*h+2])<<8|255&e[4*h+3];else{var p=this.temp[h-2],f=(p>>>17|p<<15)^(p>>>19|p<<13)^p>>>10,d=((p=this.temp[h-15])>>>7|p<<25)^(p>>>18|p<<14)^p>>>3;this.temp[h]=(f+this.temp[h-7]|0)+(d+this.temp[h-16]|0)}var g=(((a>>>6|a<<26)^(a>>>11|a<<21)^(a>>>25|a<<7))+(a&c^~a&u)|0)+(l+(s[h]+this.temp[h]|0)|0)|0,m=((n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10))+(n&r^n&i^r&i)|0;l=u,u=c,c=a,a=o+g|0,o=i,i=r,r=n,n=g+m|0}t[0]+=n,t[1]+=r,t[2]+=i,t[3]+=o,t[4]+=a,t[5]+=c,t[6]+=u,t[7]+=l}},{"./browserHashUtils":12,"buffer/":81}],17:[function(e,t,n){(function(n){var r=e("./util");r.crypto.lib=e("./browserCryptoLib"),r.Buffer=e("buffer/").Buffer,r.url=e("url/"),r.querystring=e("querystring/"),r.realClock=e("./realclock/browserClock"),r.environment="js",r.createEventStream=e("./event-stream/buffered-create-event-stream").createEventStream,r.isBrowser=function(){return!0},r.isNode=function(){return!1};var i=e("./core");if(t.exports=i,e("./credentials"),e("./credentials/credential_provider_chain"),e("./credentials/temporary_credentials"),e("./credentials/chainable_temporary_credentials"),e("./credentials/web_identity_credentials"),e("./credentials/cognito_identity_credentials"),e("./credentials/saml_credentials"),i.XML.Parser=e("./xml/browser_parser"),e("./http/xhr"),void 0===n)n={browser:!0}}).call(this,e("_process"))},{"./browserCryptoLib":11,"./core":19,"./credentials":20,"./credentials/chainable_temporary_credentials":21,"./credentials/cognito_identity_credentials":22,"./credentials/credential_provider_chain":23,"./credentials/saml_credentials":24,"./credentials/temporary_credentials":25,"./credentials/web_identity_credentials":26,"./event-stream/buffered-create-event-stream":28,"./http/xhr":36,"./realclock/browserClock":53,"./util":72,"./xml/browser_parser":73,_process:86,"buffer/":81,"querystring/":93,"url/":95}],18:[function(e,t,n){var r,i=e("./core");e("./credentials"),e("./credentials/credential_provider_chain"),i.Config=i.util.inherit({constructor:function(e){void 0===e&&(e={}),e=this.extractCredentials(e),i.util.each.call(this,this.keys,function(t,n){this.set(t,e[t],n)})},getCredentials:function(e){function t(t){e(t,t?null:r.credentials)}function n(e,t){return new i.util.error(t||new Error,{code:"CredentialsError",message:e,name:"CredentialsError"})}var r=this;r.credentials?"function"==typeof r.credentials.get?r.credentials.get(function(e){e&&(e=n("Could not load credentials from "+r.credentials.constructor.name,e)),t(e)}):function(){var e=null;r.credentials.accessKeyId&&r.credentials.secretAccessKey||(e=n("Missing credentials")),t(e)}():r.credentialProvider?r.credentialProvider.resolve(function(e,i){e&&(e=n("Could not load credentials from any providers",e)),r.credentials=i,t(e)}):t(n("No credentials to load"))},update:function(e,t){t=t||!1,e=this.extractCredentials(e),i.util.each.call(this,e,function(e,n){(t||Object.prototype.hasOwnProperty.call(this.keys,e)||i.Service.hasService(e))&&this.set(e,n)})},loadFromPath:function(e){this.clear();var t=JSON.parse(i.util.readFileSync(e)),n=new i.FileSystemCredentials(e),r=new i.CredentialProviderChain;return r.providers.unshift(n),r.resolve(function(e,n){if(e)throw e;t.credentials=n}),this.constructor(t),this},clear:function(){i.util.each.call(this,this.keys,function(e){delete this[e]}),this.set("credentials",void 0),this.set("credentialProvider",void 0)},set:function(e,t,n){void 0===t?(void 0===n&&(n=this.keys[e]),this[e]="function"==typeof n?n.call(this):n):"httpOptions"===e&&this[e]?this[e]=i.util.merge(this[e],t):this[e]=t},keys:{credentials:null,credentialProvider:null,region:null,logger:null,apiVersions:{},apiVersion:null,endpoint:void 0,httpOptions:{timeout:12e4},maxRetries:void 0,maxRedirects:10,paramValidation:!0,sslEnabled:!0,s3ForcePathStyle:!1,s3BucketEndpoint:!1,s3DisableBodySigning:!0,computeChecksums:!0,convertResponseTypes:!0,correctClockSkew:!1,customUserAgent:null,dynamoDbCrc32:!0,systemClockOffset:0,signatureVersion:null,signatureCache:!0,retryDelayOptions:{},useAccelerateEndpoint:!1,clientSideMonitoring:!1,endpointDiscoveryEnabled:!1,endpointCacheSize:1e3,hostPrefixEnabled:!0,stsRegionalEndpoints:null},extractCredentials:function(e){return e.accessKeyId&&e.secretAccessKey&&((e=i.util.copy(e)).credentials=new i.Credentials(e)),e},setPromisesDependency:function(e){r=e,null===e&&"function"==typeof Promise&&(r=Promise);var t=[i.Request,i.Credentials,i.CredentialProviderChain];i.S3&&(t.push(i.S3),i.S3.ManagedUpload&&t.push(i.S3.ManagedUpload)),i.util.addPromises(t,r)},getPromisesDependency:function(){return r}}),i.config=new i.Config},{"./core":19,"./credentials":20,"./credentials/credential_provider_chain":23}],19:[function(e,t,n){var r={util:e("./util")};({}).toString(),t.exports=r,r.util.update(r,{VERSION:"2.569.0",Signers:{},Protocol:{Json:e("./protocol/json"),Query:e("./protocol/query"),Rest:e("./protocol/rest"),RestJson:e("./protocol/rest_json"),RestXml:e("./protocol/rest_xml")},XML:{Builder:e("./xml/builder"),Parser:null},JSON:{Builder:e("./json/builder"),Parser:e("./json/parser")},Model:{Api:e("./model/api"),Operation:e("./model/operation"),Shape:e("./model/shape"),Paginator:e("./model/paginator"),ResourceWaiter:e("./model/resource_waiter")},apiLoader:e("./api_loader"),EndpointCache:e("../vendor/endpoint-cache").EndpointCache}),e("./sequential_executor"),e("./service"),e("./config"),e("./http"),e("./event_listeners"),e("./request"),e("./response"),e("./resource_waiter"),e("./signers/request_signer"),e("./param_validator"),r.events=new r.SequentialExecutor,r.util.memoizedProperty(r,"endpointCache",function(){return new r.EndpointCache(r.config.endpointCacheSize)},!0)},{"../vendor/endpoint-cache":104,"./api_loader":10,"./config":18,"./event_listeners":34,"./http":35,"./json/builder":37,"./json/parser":38,"./model/api":39,"./model/operation":41,"./model/paginator":42,"./model/resource_waiter":43,"./model/shape":44,"./param_validator":45,"./protocol/json":47,"./protocol/query":48,"./protocol/rest":49,"./protocol/rest_json":50,"./protocol/rest_xml":51,"./request":56,"./resource_waiter":57,"./response":58,"./sequential_executor":59,"./service":60,"./signers/request_signer":64,"./util":72,"./xml/builder":74}],20:[function(e,t,n){var r=e("./core");r.Credentials=r.util.inherit({constructor:function(){if(r.util.hideProperties(this,["secretAccessKey"]),this.expired=!1,this.expireTime=null,this.refreshCallbacks=[],1===arguments.length&&"object"==s(arguments[0])){var e=arguments[0].credentials||arguments[0];this.accessKeyId=e.accessKeyId,this.secretAccessKey=e.secretAccessKey,this.sessionToken=e.sessionToken}else this.accessKeyId=arguments[0],this.secretAccessKey=arguments[1],this.sessionToken=arguments[2]},expiryWindow:15,needsRefresh:function(){var e=r.util.date.getDate().getTime(),t=new Date(e+1e3*this.expiryWindow);return!!(this.expireTime&&t>this.expireTime)||this.expired||!this.accessKeyId||!this.secretAccessKey},get:function(e){var t=this;this.needsRefresh()?this.refresh(function(n){n||(t.expired=!1),e&&e(n)}):e&&e()},refresh:function(e){this.expired=!1,e()},coalesceRefresh:function(e,t){var n=this;1===n.refreshCallbacks.push(e)&&n.load(function(e){r.util.arrayEach(n.refreshCallbacks,function(n){t?n(e):r.util.defer(function(){n(e)})}),n.refreshCallbacks.length=0})},load:function(e){e()}}),r.Credentials.addPromisesToClass=function(e){this.prototype.getPromise=r.util.promisifyMethod("get",e),this.prototype.refreshPromise=r.util.promisifyMethod("refresh",e)},r.Credentials.deletePromisesFromClass=function(){delete this.prototype.getPromise,delete this.prototype.refreshPromise},r.util.addPromises(r.Credentials)},{"./core":19}],21:[function(e,t,n){var r=e("../core"),i=e("../../clients/sts");r.ChainableTemporaryCredentials=r.util.inherit(r.Credentials,{constructor:function(e){r.Credentials.call(this),e=e||{},this.errorCode="ChainableTemporaryCredentialsProviderFailure",this.expired=!0,this.tokenCodeFn=null;var t=r.util.copy(e.params)||{};if(t.RoleArn&&(t.RoleSessionName=t.RoleSessionName||"temporary-credentials"),t.SerialNumber){if(!e.tokenCodeFn||"function"!=typeof e.tokenCodeFn)throw new r.util.error(new Error("tokenCodeFn must be a function when params.SerialNumber is given"),{code:this.errorCode});this.tokenCodeFn=e.tokenCodeFn}var n=r.util.merge({params:t,credentials:e.masterCredentials||r.config.credentials},e.stsConfig||{});this.service=new i(n)},refresh:function(e){this.coalesceRefresh(e||r.util.fn.callback)},load:function(e){var t=this,n=t.service.config.params.RoleArn?"assumeRole":"getSessionToken";this.getTokenCode(function(r,i){var o={};r?e(r):(i&&(o.TokenCode=i),t.service[n](o,function(n,r){n||t.service.credentialsFrom(r,t),e(n)}))})},getTokenCode:function(e){var t=this;this.tokenCodeFn?this.tokenCodeFn(this.service.config.params.SerialNumber,function(n,i){if(n){var o=n;return n instanceof Error&&(o=n.message),void e(r.util.error(new Error("Error fetching MFA token: "+o),{code:t.errorCode}))}e(null,i)}):e(null)}})},{"../../clients/sts":9,"../core":19}],22:[function(e,t,n){var r=e("../core"),i=e("../../clients/cognitoidentity"),o=e("../../clients/sts");r.CognitoIdentityCredentials=r.util.inherit(r.Credentials,{localStorageKey:{id:"aws.cognito.identity-id.",providers:"aws.cognito.identity-providers."},constructor:function(e,t){r.Credentials.call(this),this.expired=!0,this.params=e,this.data=null,this._identityId=null,this._clientConfig=r.util.copy(t||{}),this.loadCachedId();var n=this;Object.defineProperty(this,"identityId",{get:function(){return n.loadCachedId(),n._identityId||n.params.IdentityId},set:function(e){n._identityId=e}})},refresh:function(e){this.coalesceRefresh(e||r.util.fn.callback)},load:function(e){var t=this;t.createClients(),t.data=null,t._identityId=null,t.getId(function(n){n?(t.clearIdOnNotAuthorized(n),e(n)):t.params.RoleArn?t.getCredentialsFromSTS(e):t.getCredentialsForIdentity(e)})},clearCachedId:function(){this._identityId=null,delete this.params.IdentityId;var e=this.params.IdentityPoolId,t=this.params.LoginId||"";delete this.storage[this.localStorageKey.id+e+t],delete this.storage[this.localStorageKey.providers+e+t]},clearIdOnNotAuthorized:function(e){"NotAuthorizedException"==e.code&&this.clearCachedId()},getId:function(e){var t=this;if("string"==typeof t.params.IdentityId)return e(null,t.params.IdentityId);t.cognito.getId(function(n,r){!n&&r.IdentityId?(t.params.IdentityId=r.IdentityId,e(null,r.IdentityId)):e(n)})},loadCredentials:function(e,t){e&&t&&(t.expired=!1,t.accessKeyId=e.Credentials.AccessKeyId,t.secretAccessKey=e.Credentials.SecretKey,t.sessionToken=e.Credentials.SessionToken,t.expireTime=e.Credentials.Expiration)},getCredentialsForIdentity:function(e){var t=this;t.cognito.getCredentialsForIdentity(function(n,r){n?t.clearIdOnNotAuthorized(n):(t.cacheId(r),t.data=r,t.loadCredentials(t.data,t)),e(n)})},getCredentialsFromSTS:function(e){var t=this;t.cognito.getOpenIdToken(function(n,r){n?(t.clearIdOnNotAuthorized(n),e(n)):(t.cacheId(r),t.params.WebIdentityToken=r.Token,t.webIdentityCredentials.refresh(function(n){n||(t.data=t.webIdentityCredentials.data,t.sts.credentialsFrom(t.data,t)),e(n)}))})},loadCachedId:function(){var e=this;if(r.util.isBrowser()&&!e.params.IdentityId){var t=e.getStorage("id");if(t&&e.params.Logins){var n=Object.keys(e.params.Logins);0!==(e.getStorage("providers")||"").split(",").filter(function(e){return-1!==n.indexOf(e)}).length&&(e.params.IdentityId=t)}else t&&(e.params.IdentityId=t)}},createClients:function(){var e=this._clientConfig;if(this.webIdentityCredentials=this.webIdentityCredentials||new r.WebIdentityCredentials(this.params,e),!this.cognito){var t=r.util.merge({},e);t.params=this.params,this.cognito=new i(t)}this.sts=this.sts||new o(e)},cacheId:function(e){this._identityId=e.IdentityId,this.params.IdentityId=this._identityId,r.util.isBrowser()&&(this.setStorage("id",e.IdentityId),this.params.Logins&&this.setStorage("providers",Object.keys(this.params.Logins).join(",")))},getStorage:function(e){return this.storage[this.localStorageKey[e]+this.params.IdentityPoolId+(this.params.LoginId||"")]},setStorage:function(e,t){try{this.storage[this.localStorageKey[e]+this.params.IdentityPoolId+(this.params.LoginId||"")]=t}catch(e){}},storage:function(){try{var e=r.util.isBrowser()&&null!==window.localStorage&&"object"==s(window.localStorage)?window.localStorage:{};return e["aws.test-storage"]="foobar",delete e["aws.test-storage"],e}catch(e){return{}}}()})},{"../../clients/cognitoidentity":8,"../../clients/sts":9,"../core":19}],23:[function(e,t,n){var r=e("../core");r.CredentialProviderChain=r.util.inherit(r.Credentials,{constructor:function(e){this.providers=e||r.CredentialProviderChain.defaultProviders.slice(0),this.resolveCallbacks=[]},resolve:function(e){var t=this;if(0===t.providers.length)return e(new Error("No providers")),t;if(1===t.resolveCallbacks.push(e)){var n=0,i=t.providers.slice(0);!function e(o,s){if(!o&&s||n===i.length)return r.util.arrayEach(t.resolveCallbacks,function(e){e(o,s)}),void(t.resolveCallbacks.length=0);var a=i[n++];(s="function"==typeof a?a.call():a).get?s.get(function(t){e(t,t?null:s)}):e(null,s)}()}return t}}),r.CredentialProviderChain.defaultProviders=[],r.CredentialProviderChain.addPromisesToClass=function(e){this.prototype.resolvePromise=r.util.promisifyMethod("resolve",e)},r.CredentialProviderChain.deletePromisesFromClass=function(){delete this.prototype.resolvePromise},r.util.addPromises(r.CredentialProviderChain)},{"../core":19}],24:[function(e,t,n){var r=e("../core"),i=e("../../clients/sts");r.SAMLCredentials=r.util.inherit(r.Credentials,{constructor:function(e){r.Credentials.call(this),this.expired=!0,this.params=e},refresh:function(e){this.coalesceRefresh(e||r.util.fn.callback)},load:function(e){var t=this;t.createClients(),t.service.assumeRoleWithSAML(function(n,r){n||t.service.credentialsFrom(r,t),e(n)})},createClients:function(){this.service=this.service||new i({params:this.params})}})},{"../../clients/sts":9,"../core":19}],25:[function(e,t,n){var r=e("../core"),i=e("../../clients/sts");r.TemporaryCredentials=r.util.inherit(r.Credentials,{constructor:function(e,t){r.Credentials.call(this),this.loadMasterCredentials(t),this.expired=!0,this.params=e||{},this.params.RoleArn&&(this.params.RoleSessionName=this.params.RoleSessionName||"temporary-credentials")},refresh:function(e){this.coalesceRefresh(e||r.util.fn.callback)},load:function(e){var t=this;t.createClients(),t.masterCredentials.get(function(){t.service.config.credentials=t.masterCredentials,(t.params.RoleArn?t.service.assumeRole:t.service.getSessionToken).call(t.service,function(n,r){n||t.service.credentialsFrom(r,t),e(n)})})},loadMasterCredentials:function(e){for(this.masterCredentials=e||r.config.credentials;this.masterCredentials.masterCredentials;)this.masterCredentials=this.masterCredentials.masterCredentials;"function"!=typeof this.masterCredentials.get&&(this.masterCredentials=new r.Credentials(this.masterCredentials))},createClients:function(){this.service=this.service||new i({params:this.params})}})},{"../../clients/sts":9,"../core":19}],26:[function(e,t,n){var r=e("../core"),i=e("../../clients/sts");r.WebIdentityCredentials=r.util.inherit(r.Credentials,{constructor:function(e,t){r.Credentials.call(this),this.expired=!0,this.params=e,this.params.RoleSessionName=this.params.RoleSessionName||"web-identity",this.data=null,this._clientConfig=r.util.copy(t||{})},refresh:function(e){this.coalesceRefresh(e||r.util.fn.callback)},load:function(e){var t=this;t.createClients(),t.service.assumeRoleWithWebIdentity(function(n,r){t.data=null,n||(t.data=r,t.service.credentialsFrom(r,t)),e(n)})},createClients:function(){if(!this.service){var e=r.util.merge({},this._clientConfig);e.params=this.params,this.service=new i(e)}}})},{"../../clients/sts":9,"../core":19}],27:[function(e,t,n){(function(n){function r(e){var t=e.service,n=t.api||{},r={};return t.config.region&&(r.region=t.config.region),n.serviceId&&(r.serviceId=n.serviceId),t.config.credentials.accessKeyId&&(r.accessKeyId=t.config.credentials.accessKeyId),r}function i(e,t){var n={};return function e(t,n,r){r&&null!=n&&"structure"===r.type&&r.required&&r.required.length>0&&p.arrayEach(r.required,function(i){var o=r.members[i];if(!0===o.endpointDiscoveryId){var s=o.isLocationName?o.name:i;t[s]=String(n[i])}else e(t,n[i],o)})}(n,e.params,t),n}function o(e){var t=e.service,n=t.api,o=n.operations?n.operations[e.operation]:void 0,s=i(e,o?o.input:void 0),c=r(e);Object.keys(s).length>0&&(c=p.update(c,s),o&&(c.operation=o.name));var u=h.endpointCache.get(c);if(!u||1!==u.length||""!==u[0].Address)if(u&&u.length>0)e.httpRequest.updateEndpoint(u[0].Address);else{var l=t.makeRequest(n.endpointOperation,{Operation:o.name,Identifiers:s});a(l),l.removeListener("validate",h.EventListeners.Core.VALIDATE_PARAMETERS),l.removeListener("retry",h.EventListeners.Core.RETRY_CHECK),h.endpointCache.put(c,[{Address:"",CachePeriodInMinutes:1}]),l.send(function(e,t){t&&t.Endpoints?h.endpointCache.put(c,t.Endpoints):e&&h.endpointCache.put(c,[{Address:"",CachePeriodInMinutes:1}])})}}function s(e,t){var n=e.service,o=n.api,s=o.operations?o.operations[e.operation]:void 0,c=s?s.input:void 0,u=i(e,c),l=r(e);Object.keys(u).length>0&&(l=p.update(l,u),s&&(l.operation=s.name));var f=h.EndpointCache.getKeyString(l),g=h.endpointCache.get(f);if(g&&1===g.length&&""===g[0].Address)return d[f]||(d[f]=[]),void d[f].push({request:e,callback:t});if(g&&g.length>0)e.httpRequest.updateEndpoint(g[0].Address),t();else{var m=n.makeRequest(o.endpointOperation,{Operation:s.name,Identifiers:u});m.removeListener("validate",h.EventListeners.Core.VALIDATE_PARAMETERS),a(m),h.endpointCache.put(f,[{Address:"",CachePeriodInMinutes:60}]),m.send(function(n,r){if(n){var i={code:"EndpointDiscoveryException",message:"Request cannot be fulfilled without specifying an endpoint",retryable:!1};if(e.response.error=p.error(n,i),h.endpointCache.remove(l),d[f]){var o=d[f];p.arrayEach(o,function(e){e.request.response.error=p.error(n,i),e.callback()}),delete d[f]}}else if(r&&(h.endpointCache.put(f,r.Endpoints),e.httpRequest.updateEndpoint(r.Endpoints[0].Address),d[f])){o=d[f];p.arrayEach(o,function(e){e.request.httpRequest.updateEndpoint(r.Endpoints[0].Address),e.callback()}),delete d[f]}t()})}}function a(e){var t=e.service.api.apiVersion;t&&!e.httpRequest.headers["x-amz-api-version"]&&(e.httpRequest.headers["x-amz-api-version"]=t)}function c(e){var t=e.error,n=e.httpResponse;if(t&&("InvalidEndpointException"===t.code||421===n.statusCode)){var o=e.request,s=o.service.api.operations||{},a=i(o,s[o.operation]?s[o.operation].input:void 0),c=r(o);Object.keys(a).length>0&&(c=p.update(c,a),s[o.operation]&&(c.operation=s[o.operation].name)),h.endpointCache.remove(c)}}function u(e){return["false","0"].indexOf(e)>=0}function l(e){if(!0===(e.service||{}).config.endpointDiscoveryEnabled)return!0;if(p.isBrowser())return!1;for(var t=0;t<f.length;t++){var r=f[t];if(Object.prototype.hasOwnProperty.call(n.env,r)){if(""===n.env[r]||void 0===n.env[r])throw p.error(new Error,{code:"ConfigurationException",message:"environmental variable "+r+" cannot be set to nothing"});if(!u(n.env[r]))return!0}}var i={};try{i=h.util.iniLoader?h.util.iniLoader.loadFrom({isConfig:!0,filename:n.env[h.util.sharedConfigFileEnv]}):{}}catch(e){}var o=i[n.env.AWS_PROFILE||h.util.defaultProfile]||{};if(Object.prototype.hasOwnProperty.call(o,"endpoint_discovery_enabled")){if(void 0===o.endpoint_discovery_enabled)throw p.error(new Error,{code:"ConfigurationException",message:"config file entry 'endpoint_discovery_enabled' cannot be set to nothing"});if(!u(o.endpoint_discovery_enabled))return!0}return!1}var h=e("./core"),p=e("./util"),f=["AWS_ENABLE_ENDPOINT_DISCOVERY","AWS_ENDPOINT_DISCOVERY_ENABLED"],d={};t.exports={discoverEndpoint:function(e,t){var n=e.service||{};if(function(e){if(e._originalConfig&&e._originalConfig.endpoint&&!0===e._originalConfig.endpointDiscoveryEnabled)throw p.error(new Error,{code:"ConfigurationException",message:"Custom endpoint is supplied; endpointDiscoveryEnabled must not be true."});var t=h.config[e.serviceIdentifier]||{};return Boolean(h.config.endpoint||t.endpoint||e._originalConfig&&e._originalConfig.endpoint)}(n)||e.isPresigned())return t();if(!l(e))return t();e.httpRequest.appendToUserAgent("endpoint-discovery");var r=(n.api.operations||{})[e.operation];switch(r?r.endpointDiscoveryRequired:"NULL"){case"OPTIONAL":o(e),e.addNamedListener("INVALIDATE_CACHED_ENDPOINTS","extractError",c),t();break;case"REQUIRED":e.addNamedListener("INVALIDATE_CACHED_ENDPOINTS","extractError",c),s(e,t);break;case"NULL":default:t()}},requiredDiscoverEndpoint:s,optionalDiscoverEndpoint:o,marshallCustomIdentifiers:i,getCacheKey:r,invalidateCachedEndpoint:c}}).call(this,e("_process"))},{"./core":19,"./util":72,_process:86}],28:[function(e,t,n){var r=e("../event-stream/event-message-chunker").eventMessageChunker,i=e("./parse-event").parseEvent;t.exports={createEventStream:function(e,t,n){for(var o=r(e),s=[],a=0;a<o.length;a++)s.push(i(t,o[a],n));return s}}},{"../event-stream/event-message-chunker":29,"./parse-event":31}],29:[function(e,t,n){t.exports={eventMessageChunker:function(e){for(var t=[],n=0;n<e.length;){var r=e.readInt32BE(n),i=e.slice(n,r+n);n+=r,t.push(i)}return t}}},{}],30:[function(e,t,n){function r(e){if(8!==e.length)throw new Error("Int64 buffers must be exactly 8 bytes");o.Buffer.isBuffer(e)||(e=s(e)),this.bytes=e}function i(e){for(var t=0;t<8;t++)e[t]^=255;for(t=7;t>-1&&0==++e[t];t--);}var o=e("../core").util,s=o.buffer.toBuffer;r.fromNumber=function(e){if(e>0x8000000000000000||e<-0x8000000000000000)throw new Error(e+" is too large (or, if negative, too small) to represent as an Int64");for(var t=new Uint8Array(8),n=7,o=Math.abs(Math.round(e));n>-1&&o>0;n--,o/=256)t[n]=o;return e<0&&i(t),new r(t)},r.prototype.valueOf=function(){var e=this.bytes.slice(0),t=128&e[0];return t&&i(e),parseInt(e.toString("hex"),16)*(t?-1:1)},r.prototype.toString=function(){return String(this.valueOf())},t.exports={Int64:r}},{"../core":19}],31:[function(e,t,n){var r=e("./parse-message").parseMessage;t.exports={parseEvent:function(e,t,n){var i=r(t),o=i.headers[":message-type"];if(o){if("error"===o.value)throw function(e){var t=e.headers[":error-code"],n=e.headers[":error-message"],r=new Error(n.value||n);return r.code=r.name=t.value||t,r}(i);if("event"!==o.value)return}var s=i.headers[":event-type"],a=n.members[s.value];if(a){var c={},u=a.eventPayloadMemberName;if(u){var l=a.members[u];"binary"===l.type?c[u]=i.body:c[u]=e.parse(i.body.toString(),l)}for(var h=a.eventHeaderMemberNames,p=0;p<h.length;p++){var f=h[p];i.headers[f]&&(c[f]=a.members[f].toType(i.headers[f].value))}var d={};return d[s.value]=c,d}}}},{"./parse-message":32}],32:[function(e,t,n){function r(e){for(var t={},n=0;n<e.length;){var r=e.readUInt8(n++),o=e.slice(n,n+r).toString();switch(n+=r,e.readUInt8(n++)){case 0:t[o]={type:s,value:!0};break;case 1:t[o]={type:s,value:!1};break;case 2:t[o]={type:a,value:e.readInt8(n++)};break;case 3:t[o]={type:c,value:e.readInt16BE(n)},n+=2;break;case 4:t[o]={type:u,value:e.readInt32BE(n)},n+=4;break;case 5:t[o]={type:l,value:new i(e.slice(n,n+8))},n+=8;break;case 6:var g=e.readUInt16BE(n);n+=2,t[o]={type:h,value:e.slice(n,n+g)},n+=g;break;case 7:var m=e.readUInt16BE(n);n+=2,t[o]={type:p,value:e.slice(n,n+m).toString()},n+=m;break;case 8:t[o]={type:f,value:new Date(new i(e.slice(n,n+8)).valueOf())},n+=8;break;case 9:var v=e.slice(n,n+16).toString("hex");n+=16,t[o]={type:d,value:v.substr(0,8)+"-"+v.substr(8,4)+"-"+v.substr(12,4)+"-"+v.substr(16,4)+"-"+v.substr(20)};break;default:throw new Error("Unrecognized header type tag")}}return t}var i=e("./int64").Int64,o=e("./split-message").splitMessage,s="boolean",a="byte",c="short",u="integer",l="long",h="binary",p="string",f="timestamp",d="uuid";t.exports={parseMessage:function(e){var t=o(e);return{headers:r(t.headers),body:t.body}}}},{"./int64":30,"./split-message":33}],33:[function(e,t,n){var r=e("../core").util,i=r.buffer.toBuffer,o=4,s=2*o,a=4,c=s+2*a;t.exports={splitMessage:function(e){if(r.Buffer.isBuffer(e)||(e=i(e)),e.length<c)throw new Error("Provided message too short to accommodate event stream message overhead");if(e.length!==e.readUInt32BE(0))throw new Error("Reported message length does not match received message length");var t=e.readUInt32BE(s);if(t!==r.crypto.crc32(e.slice(0,s)))throw new Error("The prelude checksum specified in the message ("+t+") does not match the calculated CRC32 checksum.");var n=e.readUInt32BE(e.length-a);if(n!==r.crypto.crc32(e.slice(0,e.length-a)))throw new Error("The message checksum did not match the expected value of "+n);var u=s+a,l=u+e.readUInt32BE(o);return{headers:e.slice(u,l),body:e.slice(l,e.length-a)}}}},{"../core":19}],34:[function(e,t,n){var r=e("./core"),i=e("./sequential_executor"),o=e("./discover_endpoint").discoverEndpoint;r.EventListeners={Core:{}},r.EventListeners={Core:(new i).addNamedListeners(function(e,t){t("VALIDATE_CREDENTIALS","validate",function(e,t){if(!e.service.api.signatureVersion&&!e.service.config.signatureVersion)return t();e.service.config.getCredentials(function(n){n&&(e.response.error=r.util.error(n,{code:"CredentialsError",message:"Missing credentials in config"})),t()})}),e("VALIDATE_REGION","validate",function(e){e.service.config.region||e.service.isGlobalEndpoint||(e.response.error=r.util.error(new Error,{code:"ConfigError",message:"Missing region in config"}))}),e("BUILD_IDEMPOTENCY_TOKENS","validate",function(e){if(e.service.api.operations){var t=e.service.api.operations[e.operation];if(t){var n=t.idempotentMembers;if(n.length){for(var i=r.util.copy(e.params),o=0,s=n.length;o<s;o++)i[n[o]]||(i[n[o]]=r.util.uuid.v4());e.params=i}}}}),e("VALIDATE_PARAMETERS","validate",function(e){if(e.service.api.operations){var t=e.service.api.operations[e.operation].input,n=e.service.config.paramValidation;new r.ParamValidator(n).validate(t,e.params)}}),t("COMPUTE_SHA256","afterBuild",function(e,t){if(e.haltHandlersOnError(),e.service.api.operations){var n=e.service.api.operations[e.operation],i=n?n.authtype:"";if(!e.service.api.signatureVersion&&!i&&!e.service.config.signatureVersion)return t();if(e.service.getSignerClass(e)===r.Signers.V4){var o=e.httpRequest.body||"";if(i.indexOf("unsigned-body")>=0)return e.httpRequest.headers["X-Amz-Content-Sha256"]="UNSIGNED-PAYLOAD",t();r.util.computeSha256(o,function(n,r){n?t(n):(e.httpRequest.headers["X-Amz-Content-Sha256"]=r,t())})}else t()}}),e("SET_CONTENT_LENGTH","afterBuild",function(e){var t=function(e){if(!e.service.api.operations)return"";var t=e.service.api.operations[e.operation];return t?t.authtype:""}(e),n=r.util.getRequestPayloadShape(e);if(void 0===e.httpRequest.headers["Content-Length"])try{var i=r.util.string.byteLength(e.httpRequest.body);e.httpRequest.headers["Content-Length"]=i}catch(r){if(n&&n.isStreaming){if(n.requiresLength)throw r;if(t.indexOf("unsigned-body")>=0)return void(e.httpRequest.headers["Transfer-Encoding"]="chunked");throw r}throw r}}),e("SET_HTTP_HOST","afterBuild",function(e){e.httpRequest.headers.Host=e.httpRequest.endpoint.host}),e("RESTART","restart",function(){var e=this.response.error;e&&e.retryable&&(this.httpRequest=new r.HttpRequest(this.service.endpoint,this.service.region),this.response.retryCount<this.service.config.maxRetries?this.response.retryCount++:this.response.error=null)}),t("DISCOVER_ENDPOINT","sign",o,!0),t("SIGN","sign",function(e,t){var n=e.service,r=(e.service.api.operations||{})[e.operation],i=r?r.authtype:"";if(!n.api.signatureVersion&&!i&&!n.config.signatureVersion)return t();n.config.getCredentials(function(i,o){if(i)return e.response.error=i,t();try{var s=n.getSkewCorrectedDate(),a=new(n.getSignerClass(e))(e.httpRequest,n.api.signingName||n.api.endpointPrefix,{signatureCache:n.config.signatureCache,operation:r,signatureVersion:n.api.signatureVersion});a.setServiceClientId(n._clientId),delete e.httpRequest.headers.Authorization,delete e.httpRequest.headers.Date,delete e.httpRequest.headers["X-Amz-Date"],a.addAuthorization(o,s),e.signedAt=s}catch(t){e.response.error=t}t()})}),e("VALIDATE_RESPONSE","validateResponse",function(e){this.service.successfulResponse(e,this)?(e.data={},e.error=null):(e.data=null,e.error=r.util.error(new Error,{code:"UnknownError",message:"An unknown error occurred."}))}),t("SEND","send",function(e,t){function n(n){e.httpResponse.stream=n;var i=e.request.httpRequest.stream,o=e.request.service,s=o.api,a=e.request.operation,c=s.operations[a]||{};n.on("headers",function(i,s,a){if(e.request.emit("httpHeaders",[i,s,e,a]),!e.httpResponse.streaming)if(2===r.HttpClient.streamsApiVersion){if(c.hasEventOutput&&o.successfulResponse(e))return e.request.emit("httpDone"),void t();n.on("readable",function(){var t=n.read();null!==t&&e.request.emit("httpData",[t,e])})}else n.on("data",function(t){e.request.emit("httpData",[t,e])})}),n.on("end",function(){if(!i||!i.didCallback){if(2===r.HttpClient.streamsApiVersion&&c.hasEventOutput&&o.successfulResponse(e))return;e.request.emit("httpDone"),t()}})}function i(n){if("RequestAbortedError"!==n.code){var i="TimeoutError"===n.code?n.code:"NetworkingError";n=r.util.error(n,{code:i,region:e.request.httpRequest.region,hostname:e.request.httpRequest.endpoint.hostname,retryable:!0})}e.error=n,e.request.emit("httpError",[e.error,e],function(){t()})}function o(){var t=r.HttpClient.getInstance(),o=e.request.service.config.httpOptions||{};try{!function(t){t.on("sendProgress",function(t){e.request.emit("httpUploadProgress",[t,e])}),t.on("receiveProgress",function(t){e.request.emit("httpDownloadProgress",[t,e])})}(t.handleRequest(e.request.httpRequest,o,n,i))}catch(e){i(e)}}e.httpResponse._abortCallback=t,e.error=null,e.data=null,(e.request.service.getSkewCorrectedDate()-this.signedAt)/1e3>=600?this.emit("sign",[this],function(e){e?t(e):o()}):o()}),e("HTTP_HEADERS","httpHeaders",function(e,t,n,i){n.httpResponse.statusCode=e,n.httpResponse.statusMessage=i,n.httpResponse.headers=t,n.httpResponse.body=r.util.buffer.toBuffer(""),n.httpResponse.buffers=[],n.httpResponse.numBytes=0;var o=t.date||t.Date,s=n.request.service;if(o){var a=Date.parse(o);s.config.correctClockSkew&&s.isClockSkewed(a)&&s.applyClockOffset(a)}}),e("HTTP_DATA","httpData",function(e,t){if(e){if(r.util.isNode()){t.httpResponse.numBytes+=e.length;var n=t.httpResponse.headers["content-length"],i={loaded:t.httpResponse.numBytes,total:n};t.request.emit("httpDownloadProgress",[i,t])}t.httpResponse.buffers.push(r.util.buffer.toBuffer(e))}}),e("HTTP_DONE","httpDone",function(e){if(e.httpResponse.buffers&&e.httpResponse.buffers.length>0){var t=r.util.buffer.concat(e.httpResponse.buffers);e.httpResponse.body=t}delete e.httpResponse.numBytes,delete e.httpResponse.buffers}),e("FINALIZE_ERROR","retry",function(e){e.httpResponse.statusCode&&(e.error.statusCode=e.httpResponse.statusCode,void 0===e.error.retryable&&(e.error.retryable=this.service.retryableError(e.error,this)))}),e("INVALIDATE_CREDENTIALS","retry",function(e){if(e.error)switch(e.error.code){case"RequestExpired":case"ExpiredTokenException":case"ExpiredToken":e.error.retryable=!0,e.request.service.config.credentials.expired=!0}}),e("EXPIRED_SIGNATURE","retry",function(e){var t=e.error;t&&"string"==typeof t.code&&"string"==typeof t.message&&t.code.match(/Signature/)&&t.message.match(/expired/)&&(e.error.retryable=!0)}),e("CLOCK_SKEWED","retry",function(e){e.error&&this.service.clockSkewError(e.error)&&this.service.config.correctClockSkew&&(e.error.retryable=!0)}),e("REDIRECT","retry",function(e){e.error&&e.error.statusCode>=300&&e.error.statusCode<400&&e.httpResponse.headers.location&&(this.httpRequest.endpoint=new r.Endpoint(e.httpResponse.headers.location),this.httpRequest.headers.Host=this.httpRequest.endpoint.host,e.error.redirect=!0,e.error.retryable=!0)}),e("RETRY_CHECK","retry",function(e){e.error&&(e.error.redirect&&e.redirectCount<e.maxRedirects?e.error.retryDelay=0:e.retryCount<e.maxRetries&&(e.error.retryDelay=this.service.retryDelays(e.retryCount,e.error)||0))}),t("RESET_RETRY_STATE","afterRetry",function(e,t){var n,r=!1;e.error&&(n=e.error.retryDelay||0,e.error.retryable&&e.retryCount<e.maxRetries?(e.retryCount++,r=!0):e.error.redirect&&e.redirectCount<e.maxRedirects&&(e.redirectCount++,r=!0)),r&&n>=0?(e.error=null,setTimeout(t,n)):t()})}),CorePost:(new i).addNamedListeners(function(e){e("EXTRACT_REQUEST_ID","extractData",r.util.extractRequestId),e("EXTRACT_REQUEST_ID","extractError",r.util.extractRequestId),e("ENOTFOUND_ERROR","httpError",function(e){if("NetworkingError"===e.code&&"ENOTFOUND"===e.errno){var t="Inaccessible host: `"+e.hostname+"'. This service may not be available in the `"+e.region+"' region.";this.response.error=r.util.error(new Error(t),{code:"UnknownEndpoint",region:e.region,hostname:e.hostname,retryable:!0,originalError:e})}})}),Logger:(new i).addNamedListeners(function(t){t("LOG_REQUEST","complete",function(t){var n=t.request,i=n.service.config.logger;if(i){var o=function(){var o=(t.request.service.getSkewCorrectedDate().getTime()-n.startTime.getTime())/1e3,s=!!i.isTTY,a=t.httpResponse.statusCode,c=n.params;n.service.api.operations&&n.service.api.operations[n.operation]&&n.service.api.operations[n.operation].input&&(c=function e(t,n){if(!n)return n;switch(t.type){case"structure":var i={};return r.util.each(n,function(n,r){Object.prototype.hasOwnProperty.call(t.members,n)?i[n]=e(t.members[n],r):i[n]=r}),i;case"list":var o=[];return r.util.arrayEach(n,function(n,r){o.push(e(t.member,n))}),o;case"map":var s={};return r.util.each(n,function(n,r){s[n]=e(t.value,r)}),s;default:return t.isSensitive?"***SensitiveInformation***":n}}(n.service.api.operations[n.operation].input,n.params));var u=e("util").inspect(c,!0,null),l="";return s&&(l+="[33m"),l+="[AWS "+n.service.serviceIdentifier+" "+a,l+=" "+o.toString()+"s "+t.retryCount+" retries]",s&&(l+="[0;1m"),l+=" "+r.util.string.lowerFirst(n.operation),l+="("+u+")",s&&(l+="[0m"),l}();"function"==typeof i.log?i.log(o):"function"==typeof i.write&&i.write(o+"\n")}})}),Json:(new i).addNamedListeners(function(t){var n=e("./protocol/json");t("BUILD","build",n.buildRequest),t("EXTRACT_DATA","extractData",n.extractData),t("EXTRACT_ERROR","extractError",n.extractError)}),Rest:(new i).addNamedListeners(function(t){var n=e("./protocol/rest");t("BUILD","build",n.buildRequest),t("EXTRACT_DATA","extractData",n.extractData),t("EXTRACT_ERROR","extractError",n.extractError)}),RestJson:(new i).addNamedListeners(function(t){var n=e("./protocol/rest_json");t("BUILD","build",n.buildRequest),t("EXTRACT_DATA","extractData",n.extractData),t("EXTRACT_ERROR","extractError",n.extractError)}),RestXml:(new i).addNamedListeners(function(t){var n=e("./protocol/rest_xml");t("BUILD","build",n.buildRequest),t("EXTRACT_DATA","extractData",n.extractData),t("EXTRACT_ERROR","extractError",n.extractError)}),Query:(new i).addNamedListeners(function(t){var n=e("./protocol/query");t("BUILD","build",n.buildRequest),t("EXTRACT_DATA","extractData",n.extractData),t("EXTRACT_ERROR","extractError",n.extractError)})}},{"./core":19,"./discover_endpoint":27,"./protocol/json":47,"./protocol/query":48,"./protocol/rest":49,"./protocol/rest_json":50,"./protocol/rest_xml":51,"./sequential_executor":59,util:98}],35:[function(e,t,n){var r=e("./core"),i=r.util.inherit;r.Endpoint=i({constructor:function(e,t){if(r.util.hideProperties(this,["slashes","auth","hash","search","query"]),null==e)throw new Error("Invalid endpoint: "+e);if("string"!=typeof e)return r.util.copy(e);e.match(/^http/)||(e=((t&&void 0!==t.sslEnabled?t.sslEnabled:r.config.sslEnabled)?"https":"http")+"://"+e),r.util.update(this,r.util.urlParse(e)),this.port?this.port=parseInt(this.port,10):this.port="https:"===this.protocol?443:80}}),r.HttpRequest=i({constructor:function(e,t){e=new r.Endpoint(e),this.method="POST",this.path=e.path||"/",this.headers={},this.body="",this.endpoint=e,this.region=t,this._userAgent="",this.setUserAgent()},setUserAgent:function(){this._userAgent=this.headers[this.getUserAgentHeaderName()]=r.util.userAgent()},getUserAgentHeaderName:function(){return(r.util.isBrowser()?"X-Amz-":"")+"User-Agent"},appendToUserAgent:function(e){"string"==typeof e&&e&&(this._userAgent+=" "+e),this.headers[this.getUserAgentHeaderName()]=this._userAgent},getUserAgent:function(){return this._userAgent},pathname:function(){return this.path.split("?",1)[0]},search:function(){var e=this.path.split("?",2)[1];return e?(e=r.util.queryStringParse(e),r.util.queryParamsToString(e)):""},updateEndpoint:function(e){var t=new r.Endpoint(e);this.endpoint=t,this.path=t.path||"/"}}),r.HttpResponse=i({constructor:function(){this.statusCode=void 0,this.headers={},this.body=void 0,this.streaming=!1,this.stream=null},createUnbufferedStream:function(){return this.streaming=!0,this.stream}}),r.HttpClient=i({}),r.HttpClient.getInstance=function(){return void 0===this.singleton&&(this.singleton=new this),this.singleton}},{"./core":19}],36:[function(e,t,n){var r=e("../core"),i=e("events").EventEmitter;e("../http"),r.XHRClient=r.util.inherit({handleRequest:function(e,t,n,o){var a=this,c=e.endpoint,u=new i,l=c.protocol+"//"+c.hostname;80!==c.port&&443!==c.port&&(l+=":"+c.port),l+=e.path;var h=new XMLHttpRequest,p=!1;e.stream=h,h.addEventListener("readystatechange",function(){try{if(0===h.status)return}catch(e){return}this.readyState>=this.HEADERS_RECEIVED&&!p&&(u.statusCode=h.status,u.headers=a.parseHeaders(h.getAllResponseHeaders()),u.emit("headers",u.statusCode,u.headers,h.statusText),p=!0),this.readyState===this.DONE&&a.finishRequest(h,u)},!1),h.upload.addEventListener("progress",function(e){u.emit("sendProgress",e)}),h.addEventListener("progress",function(e){u.emit("receiveProgress",e)},!1),h.addEventListener("timeout",function(){o(r.util.error(new Error("Timeout"),{code:"TimeoutError"}))},!1),h.addEventListener("error",function(){o(r.util.error(new Error("Network Failure"),{code:"NetworkingError"}))},!1),h.addEventListener("abort",function(){o(r.util.error(new Error("Request aborted"),{code:"RequestAbortedError"}))},!1),n(u),h.open(e.method,l,!1!==t.xhrAsync),r.util.each(e.headers,function(e,t){"Content-Length"!==e&&"User-Agent"!==e&&"Host"!==e&&h.setRequestHeader(e,t)}),t.timeout&&!1!==t.xhrAsync&&(h.timeout=t.timeout),t.xhrWithCredentials&&(h.withCredentials=!0);try{h.responseType="arraybuffer"}catch(e){}try{e.body?h.send(e.body):h.send()}catch(t){if(!e.body||"object"!=s(e.body.buffer))throw t;h.send(e.body.buffer)}return u},parseHeaders:function(e){var t={};return r.util.arrayEach(e.split(/\r?\n/),function(e){var n=e.split(":",1)[0],r=e.substring(n.length+2);n.length>0&&(t[n.toLowerCase()]=r)}),t},finishRequest:function(e,t){var n;if("arraybuffer"===e.responseType&&e.response){var i=e.response;n=new r.util.Buffer(i.byteLength);for(var o=new Uint8Array(i),s=0;s<n.length;++s)n[s]=o[s]}try{n||"string"!=typeof e.responseText||(n=new r.util.Buffer(e.responseText))}catch(e){}n&&t.emit("data",n),t.emit("end")}}),r.HttpClient.prototype=r.XHRClient.prototype,r.HttpClient.streamsApiVersion=1},{"../core":19,"../http":35,events:82}],37:[function(e,t,n){function r(){}function i(e,t){if(t&&null!=e)switch(t.type){case"structure":return function(e,t){var n={};return o.each(e,function(e,r){var o=t.members[e];if(o){if("body"!==o.location)return;var s=o.isLocationName?o.name:e,a=i(r,o);void 0!==a&&(n[s]=a)}}),n}(e,t);case"map":return function(e,t){var n={};return o.each(e,function(e,r){var o=i(r,t.value);void 0!==o&&(n[e]=o)}),n}(e,t);case"list":return function(e,t){var n=[];return o.arrayEach(e,function(e){var r=i(e,t.member);void 0!==r&&n.push(r)}),n}(e,t);default:return function(e,t){return t.toWireFormat(e)}(e,t)}}var o=e("../util");r.prototype.build=function(e,t){return JSON.stringify(i(e,t))},t.exports=r},{"../util":72}],38:[function(e,t,n){function r(){}function i(e,t){if(t&&void 0!==e)switch(t.type){case"structure":return function(e,t){if(null!=e){var n={},r=t.members;return o.each(r,function(t,r){var o=r.isLocationName?r.name:t;if(Object.prototype.hasOwnProperty.call(e,o)){var s=e[o],a=i(s,r);void 0!==a&&(n[t]=a)}}),n}}(e,t);case"map":return function(e,t){if(null!=e){var n={};return o.each(e,function(e,r){var o=i(r,t.value);n[e]=void 0===o?null:o}),n}}(e,t);case"list":return function(e,t){if(null!=e){var n=[];return o.arrayEach(e,function(e){var r=i(e,t.member);void 0===r?n.push(null):n.push(r)}),n}}(e,t);default:return function(e,t){return t.toType(e)}(e,t)}}var o=e("../util");r.prototype.parse=function(e,t){return i(JSON.parse(e),t)},t.exports=r},{"../util":72}],39:[function(e,t,n){var r=e("./collection"),i=e("./operation"),o=e("./shape"),s=e("./paginator"),a=e("./resource_waiter"),c=e("../util"),u=c.property,l=c.memoizedProperty;t.exports=function(e,t){var n=this;e=e||{},(t=t||{}).api=this,e.metadata=e.metadata||{},u(this,"isApi",!0,!1),u(this,"apiVersion",e.metadata.apiVersion),u(this,"endpointPrefix",e.metadata.endpointPrefix),u(this,"signingName",e.metadata.signingName),u(this,"globalEndpoint",e.metadata.globalEndpoint),u(this,"signatureVersion",e.metadata.signatureVersion),u(this,"jsonVersion",e.metadata.jsonVersion),u(this,"targetPrefix",e.metadata.targetPrefix),u(this,"protocol",e.metadata.protocol),u(this,"timestampFormat",e.metadata.timestampFormat),u(this,"xmlNamespaceUri",e.metadata.xmlNamespace),u(this,"abbreviation",e.metadata.serviceAbbreviation),u(this,"fullName",e.metadata.serviceFullName),u(this,"serviceId",e.metadata.serviceId),l(this,"className",function(){var t=e.metadata.serviceAbbreviation||e.metadata.serviceFullName;return t?("ElasticLoadBalancing"===(t=t.replace(/^Amazon|AWS\s*|\(.*|\s+|\W+/g,""))&&(t="ELB"),t):null}),u(this,"operations",new r(e.operations,t,function(e,n){return new i(e,n,t)},c.string.lowerFirst,function(e,t){!0===t.endpointoperation&&u(n,"endpointOperation",c.string.lowerFirst(e))})),u(this,"shapes",new r(e.shapes,t,function(e,n){return o.create(n,t)})),u(this,"paginators",new r(e.paginators,t,function(e,n){return new s(e,n,t)})),u(this,"waiters",new r(e.waiters,t,function(e,n){return new a(e,n,t)},c.string.lowerFirst)),t.documentation&&(u(this,"documentation",e.documentation),u(this,"documentationUrl",e.documentationUrl))}},{"../util":72,"./collection":40,"./operation":41,"./paginator":42,"./resource_waiter":43,"./shape":44}],40:[function(e,t,n){function r(e,t,n,r){i(this,r(e),function(){return n(e,t)})}var i=e("../util").memoizedProperty;t.exports=function(e,t,n,i,o){for(var s in i=i||String,e)Object.prototype.hasOwnProperty.call(e,s)&&(r.call(this,s,e[s],n,i),o&&o(s,e[s]))}},{"../util":72}],41:[function(e,t,n){var r=e("./shape"),i=e("../util"),o=i.property,s=i.memoizedProperty;t.exports=function(e,t,n){var i=this;n=n||{},o(this,"name",t.name||e),o(this,"api",n.api,!1),t.http=t.http||{},o(this,"endpoint",t.endpoint),o(this,"httpMethod",t.http.method||"POST"),o(this,"httpPath",t.http.requestUri||"/"),o(this,"authtype",t.authtype||""),o(this,"endpointDiscoveryRequired",t.endpointdiscovery?t.endpointdiscovery.required?"REQUIRED":"OPTIONAL":"NULL"),s(this,"input",function(){return t.input?r.create(t.input,n):new r.create({type:"structure"},n)}),s(this,"output",function(){return t.output?r.create(t.output,n):new r.create({type:"structure"},n)}),s(this,"errors",function(){var e=[];if(!t.errors)return null;for(var i=0;i<t.errors.length;i++)e.push(r.create(t.errors[i],n));return e}),s(this,"paginator",function(){return n.api.paginators[e]}),n.documentation&&(o(this,"documentation",t.documentation),o(this,"documentationUrl",t.documentationUrl)),s(this,"idempotentMembers",function(){var e=[],t=i.input,n=t.members;if(!t.members)return e;for(var r in n)n.hasOwnProperty(r)&&!0===n[r].isIdempotent&&e.push(r);return e}),s(this,"hasEventOutput",function(){return function(e){var t=e.members,n=e.payload;if(!e.members)return!1;if(n)return t[n].isEventStream;for(var r in t)if(!t.hasOwnProperty(r)&&!0===t[r].isEventStream)return!0;return!1}(i.output)})}},{"../util":72,"./shape":44}],42:[function(e,t,n){var r=e("../util").property;t.exports=function(e,t){r(this,"inputToken",t.input_token),r(this,"limitKey",t.limit_key),r(this,"moreResults",t.more_results),r(this,"outputToken",t.output_token),r(this,"resultKey",t.result_key)}},{"../util":72}],43:[function(e,t,n){var r=e("../util"),i=r.property;t.exports=function(e,t,n){n=n||{},i(this,"name",e),i(this,"api",n.api,!1),t.operation&&i(this,"operation",r.string.lowerFirst(t.operation));var o=this;["type","description","delay","maxAttempts","acceptors"].forEach(function(e){var n=t[e];n&&i(o,e,n)})}},{"../util":72}],44:[function(e,t,n){function r(e,t,n){null!=n&&m.property.apply(this,arguments)}function i(e,t){e.constructor.prototype[t]||m.memoizedProperty.apply(this,arguments)}function o(e,t,n){t=t||{},r(this,"shape",e.shape),r(this,"api",t.api,!1),r(this,"type",e.type),r(this,"enum",e.enum),r(this,"min",e.min),r(this,"max",e.max),r(this,"pattern",e.pattern),r(this,"location",e.location||this.location||"body"),r(this,"name",this.name||e.xmlName||e.queryName||e.locationName||n),r(this,"isStreaming",e.streaming||this.isStreaming||!1),r(this,"requiresLength",e.requiresLength,!1),r(this,"isComposite",e.isComposite||!1),r(this,"isShape",!0,!1),r(this,"isQueryName",Boolean(e.queryName),!1),r(this,"isLocationName",Boolean(e.locationName),!1),r(this,"isIdempotent",!0===e.idempotencyToken),r(this,"isJsonValue",!0===e.jsonvalue),r(this,"isSensitive",!0===e.sensitive||e.prototype&&!0===e.prototype.sensitive),r(this,"isEventStream",Boolean(e.eventstream),!1),r(this,"isEvent",Boolean(e.event),!1),r(this,"isEventPayload",Boolean(e.eventpayload),!1),r(this,"isEventHeader",Boolean(e.eventheader),!1),r(this,"isTimestampFormatSet",Boolean(e.timestampFormat)||e.prototype&&!0===e.prototype.isTimestampFormatSet,!1),r(this,"endpointDiscoveryId",Boolean(e.endpointdiscoveryid),!1),r(this,"hostLabel",Boolean(e.hostLabel),!1),t.documentation&&(r(this,"documentation",e.documentation),r(this,"documentationUrl",e.documentationUrl)),e.xmlAttribute&&r(this,"isXmlAttribute",e.xmlAttribute||!1),r(this,"defaultValue",null),this.toWireFormat=function(e){return null==e?"":e},this.toType=function(e){return e}}function a(e){o.apply(this,arguments),r(this,"isComposite",!0),e.flattened&&r(this,"flattened",e.flattened||!1)}function c(e,t){var n=this,c=null,u=!this.isShape;a.apply(this,arguments),u&&(r(this,"defaultValue",function(){return{}}),r(this,"members",{}),r(this,"memberNames",[]),r(this,"required",[]),r(this,"isRequired",function(){return!1})),e.members&&(r(this,"members",new g(e.members,t,function(e,n){return o.create(n,t,e)})),i(this,"memberNames",function(){return e.xmlOrder||Object.keys(e.members)}),e.event&&(i(this,"eventPayloadMemberName",function(){for(var e=n.members,t=n.memberNames,r=0,i=t.length;r<i;r++)if(e[t[r]].isEventPayload)return t[r]}),i(this,"eventHeaderMemberNames",function(){for(var e=n.members,t=n.memberNames,r=[],i=0,o=t.length;i<o;i++)e[t[i]].isEventHeader&&r.push(t[i]);return r}))),e.required&&(r(this,"required",e.required),r(this,"isRequired",function(t){if(!c){c={};for(var n=0;n<e.required.length;n++)c[e.required[n]]=!0}return c[t]},!1,!0)),r(this,"resultWrapper",e.resultWrapper||null),e.payload&&r(this,"payload",e.payload),"string"==typeof e.xmlNamespace?r(this,"xmlNamespaceUri",e.xmlNamespace):"object"==s(e.xmlNamespace)&&(r(this,"xmlNamespacePrefix",e.xmlNamespace.prefix),r(this,"xmlNamespaceUri",e.xmlNamespace.uri))}function u(e,t){var n=this,s=!this.isShape;if(a.apply(this,arguments),s&&r(this,"defaultValue",function(){return[]}),e.member&&i(this,"member",function(){return o.create(e.member,t)}),this.flattened){var c=this.name;i(this,"name",function(){return n.member.name||c})}}function l(e,t){var n=!this.isShape;a.apply(this,arguments),n&&(r(this,"defaultValue",function(){return{}}),r(this,"key",o.create({type:"string"},t)),r(this,"value",o.create({type:"string"},t))),e.key&&i(this,"key",function(){return o.create(e.key,t)}),e.value&&i(this,"value",function(){return o.create(e.value,t)})}function h(){o.apply(this,arguments);var e=["rest-xml","query","ec2"];this.toType=function(t){return t=this.api&&e.indexOf(this.api.protocol)>-1?t||"":t,this.isJsonValue?JSON.parse(t):t&&"function"==typeof t.toString?t.toString():t},this.toWireFormat=function(e){return this.isJsonValue?JSON.stringify(e):e}}function p(){o.apply(this,arguments),this.toType=function(e){var t=m.base64.decode(e);if(this.isSensitive&&m.isNode()&&"function"==typeof m.Buffer.alloc){var n=m.Buffer.alloc(t.length,t);t.fill(0),t=n}return t},this.toWireFormat=m.base64.encode}function f(){p.apply(this,arguments)}function d(){o.apply(this,arguments),this.toType=function(e){return"boolean"==typeof e?e:null==e?null:"true"===e}}var g=e("./collection"),m=e("../util");o.normalizedTypes={character:"string",double:"float",long:"integer",short:"integer",biginteger:"integer",bigdecimal:"float",blob:"binary"},o.types={structure:c,list:u,map:l,boolean:d,timestamp:function(e){var t=this;if(o.apply(this,arguments),e.timestampFormat)r(this,"timestampFormat",e.timestampFormat);else if(t.isTimestampFormatSet&&this.timestampFormat)r(this,"timestampFormat",this.timestampFormat);else if("header"===this.location)r(this,"timestampFormat","rfc822");else if("querystring"===this.location)r(this,"timestampFormat","iso8601");else if(this.api)switch(this.api.protocol){case"json":case"rest-json":r(this,"timestampFormat","unixTimestamp");break;case"rest-xml":case"query":case"ec2":r(this,"timestampFormat","iso8601")}this.toType=function(e){return null==e?null:"function"==typeof e.toUTCString?e:"string"==typeof e||"number"==typeof e?m.date.parseTimestamp(e):null},this.toWireFormat=function(e){return m.date.format(e,t.timestampFormat)}},float:function(){o.apply(this,arguments),this.toType=function(e){return null==e?null:parseFloat(e)},this.toWireFormat=this.toType},integer:function(){o.apply(this,arguments),this.toType=function(e){return null==e?null:parseInt(e,10)},this.toWireFormat=this.toType},string:h,base64:f,binary:p},o.resolve=function(e,t){if(e.shape){var n=t.api.shapes[e.shape];if(!n)throw new Error("Cannot find shape reference: "+e.shape);return n}return null},o.create=function(e,t,n){if(e.isShape)return e;var r=o.resolve(e,t);if(r){var i=Object.keys(e);t.documentation||(i=i.filter(function(e){return!e.match(/documentation/)}));var s=function(){r.constructor.call(this,e,t,n)};return s.prototype=r,new s}e.type||(e.members?e.type="structure":e.member?e.type="list":e.key?e.type="map":e.type="string");var a=e.type;if(o.normalizedTypes[e.type]&&(e.type=o.normalizedTypes[e.type]),o.types[e.type])return new o.types[e.type](e,t,n);throw new Error("Unrecognized shape type: "+a)},o.shapes={StructureShape:c,ListShape:u,MapShape:l,StringShape:h,BooleanShape:d,Base64Shape:f},t.exports=o},{"../util":72,"./collection":40}],45:[function(e,t,n){var r=e("./core");r.ParamValidator=r.util.inherit({constructor:function(e){!0!==e&&void 0!==e||(e={min:!0}),this.validation=e},validate:function(e,t,n){if(this.errors=[],this.validateMember(e,t||{},n||"params"),this.errors.length>1){var i=this.errors.join("\n* ");throw i="There were "+this.errors.length+" validation errors:\n* "+i,r.util.error(new Error(i),{code:"MultipleValidationErrors",errors:this.errors})}if(1===this.errors.length)throw this.errors[0];return!0},fail:function(e,t){this.errors.push(r.util.error(new Error(t),{code:e}))},validateStructure:function(e,t,n){this.validateType(t,n,["object"],"structure");for(var r,i=0;e.required&&i<e.required.length;i++){var o=t[r=e.required[i]];null!=o||this.fail("MissingRequiredParameter","Missing required key '"+r+"' in "+n)}for(r in t)if(Object.prototype.hasOwnProperty.call(t,r)){var s=t[r],a=e.members[r];if(void 0!==a){var c=[n,r].join(".");this.validateMember(a,s,c)}else this.fail("UnexpectedParameter","Unexpected key '"+r+"' found in "+n)}return!0},validateMember:function(e,t,n){switch(e.type){case"structure":return this.validateStructure(e,t,n);case"list":return this.validateList(e,t,n);case"map":return this.validateMap(e,t,n);default:return this.validateScalar(e,t,n)}},validateList:function(e,t,n){if(this.validateType(t,n,[Array])){this.validateRange(e,t.length,n,"list member count");for(var r=0;r<t.length;r++)this.validateMember(e.member,t[r],n+"["+r+"]")}},validateMap:function(e,t,n){if(this.validateType(t,n,["object"],"map")){var r=0;for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(this.validateMember(e.key,i,n+"[key='"+i+"']"),this.validateMember(e.value,t[i],n+"['"+i+"']"),r++);this.validateRange(e,r,n,"map member count")}},validateScalar:function(e,t,n){switch(e.type){case null:case void 0:case"string":return this.validateString(e,t,n);case"base64":case"binary":return this.validatePayload(t,n);case"integer":case"float":return this.validateNumber(e,t,n);case"boolean":return this.validateType(t,n,["boolean"]);case"timestamp":return this.validateType(t,n,[Date,/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/,"number"],"Date object, ISO-8601 string, or a UNIX timestamp");default:return this.fail("UnkownType","Unhandled type "+e.type+" for "+n)}},validateString:function(e,t,n){var r=["string"];e.isJsonValue&&(r=r.concat(["number","object","boolean"])),null!==t&&this.validateType(t,n,r)&&(this.validateEnum(e,t,n),this.validateRange(e,t.length,n,"string length"),this.validatePattern(e,t,n),this.validateUri(e,t,n))},validateUri:function(e,t,n){"uri"===e.location&&0===t.length&&this.fail("UriParameterError",'Expected uri parameter to have length >= 1, but found "'+t+'" for '+n)},validatePattern:function(e,t,n){this.validation.pattern&&void 0!==e.pattern&&(new RegExp(e.pattern).test(t)||this.fail("PatternMatchError",'Provided value "'+t+'" does not match regex pattern /'+e.pattern+"/ for "+n))},validateRange:function(e,t,n,r){this.validation.min&&void 0!==e.min&&t<e.min&&this.fail("MinRangeError","Expected "+r+" >= "+e.min+", but found "+t+" for "+n),this.validation.max&&void 0!==e.max&&t>e.max&&this.fail("MaxRangeError","Expected "+r+" <= "+e.max+", but found "+t+" for "+n)},validateEnum:function(e,t,n){this.validation.enum&&void 0!==e.enum&&-1===e.enum.indexOf(t)&&this.fail("EnumError","Found string value of "+t+", but expected "+e.enum.join("|")+" for "+n)},validateType:function(e,t,n,i){if(null==e)return!1;for(var o=!1,a=0;a<n.length;a++){if("string"==typeof n[a]){if(s(e)===n[a])return!0}else if(n[a]instanceof RegExp){if((e||"").toString().match(n[a]))return!0}else{if(e instanceof n[a])return!0;if(r.util.isType(e,n[a]))return!0;i||o||(n=n.slice()),n[a]=r.util.typeName(n[a])}o=!0}var c=i;c||(c=n.join(", ").replace(/,([^,]+)$/,", or$1"));var u=c.match(/^[aeiou]/i)?"n":"";return this.fail("InvalidParameterType","Expected "+t+" to be a"+u+" "+c),!1},validateNumber:function(e,t,n){if(null!=t){if("string"==typeof t){var r=parseFloat(t);r.toString()===t&&(t=r)}this.validateType(t,n,["number"])&&this.validateRange(e,t,n,"numeric value")}},validatePayload:function(e,t){if(null!=e&&"string"!=typeof e&&(!e||"number"!=typeof e.byteLength)){if(r.util.isNode()){var n=r.util.stream.Stream;if(r.util.Buffer.isBuffer(e)||e instanceof n)return}else if(void 0!==("undefined"==typeof Blob?"undefined":s(Blob))&&e instanceof Blob)return;var i=["Buffer","Stream","File","Blob","ArrayBuffer","DataView"];if(e)for(var o=0;o<i.length;o++){if(r.util.isType(e,i[o]))return;if(r.util.typeName(e.constructor)===i[o])return}this.fail("InvalidParameterType","Expected "+t+" to be a string, Buffer, Stream, Blob, or typed array object")}}})},{"./core":19}],46:[function(e,t,n){var r=e("../util"),i=e("../core");t.exports={populateHostPrefix:function(e){if(!e.service.config.hostPrefixEnabled)return e;var t=e.service.api.operations[e.operation];if(function(e){var t=e.service.api,n=t.operations[e.operation],i=t.endpointOperation&&t.endpointOperation===r.string.lowerFirst(n.name);return"NULL"!==n.endpointDiscoveryRequired||!0===i}(e))return e;if(t.endpoint&&t.endpoint.hostPrefix){var n=function(e,t,n){return r.each(n.members,function(n,i){if(!0===i.hostLabel){if("string"!=typeof t[n]||""===t[n])throw r.error(new Error,{message:"Parameter "+n+" should be a non-empty string.",code:"InvalidParameter"});var o=new RegExp("\\{"+n+"\\}","g");e=e.replace(o,t[n])}}),e}(t.endpoint.hostPrefix,e.params,t.input);(function(e,t){e.host&&(e.host=t+e.host),e.hostname&&(e.hostname=t+e.hostname)})(e.httpRequest.endpoint,n),function(e){var t=e.split("."),n=/^[a-zA-Z0-9]{1}$|^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]$/;r.arrayEach(t,function(e){if(!e.length||e.length<1||e.length>63)throw r.error(new Error,{code:"ValidationError",message:"Hostname label length should be between 1 to 63 characters, inclusive."});if(!n.test(e))throw i.util.error(new Error,{code:"ValidationError",message:e+" is not hostname compatible."})})}(e.httpRequest.endpoint.hostname)}return e}}},{"../core":19,"../util":72}],47:[function(e,t,n){var r=e("../util"),i=e("../json/builder"),o=e("../json/parser"),s=e("./helpers").populateHostPrefix;t.exports={buildRequest:function(e){var t=e.httpRequest,n=e.service.api,r=n.targetPrefix+"."+n.operations[e.operation].name,o=n.jsonVersion||"1.0",a=n.operations[e.operation].input,c=new i;1===o&&(o="1.0"),t.body=c.build(e.params||{},a),t.headers["Content-Type"]="application/x-amz-json-"+o,t.headers["X-Amz-Target"]=r,s(e)},extractError:function(e){var t={},n=e.httpResponse;if(t.code=n.headers["x-amzn-errortype"]||"UnknownError","string"==typeof t.code&&(t.code=t.code.split(":")[0]),n.body.length>0)try{var i=JSON.parse(n.body.toString());(i.__type||i.code)&&(t.code=(i.__type||i.code).split("#").pop()),"RequestEntityTooLarge"===t.code?t.message="Request body must be less than 1 MB":t.message=i.message||i.Message||null}catch(i){t.statusCode=n.statusCode,t.message=n.statusMessage}else t.statusCode=n.statusCode,t.message=n.statusCode.toString();e.error=r.error(new Error,t)},extractData:function(e){var t=e.httpResponse.body.toString()||"{}";if(!1===e.request.service.config.convertResponseTypes)e.data=JSON.parse(t);else{var n=e.request.service.api.operations[e.request.operation].output||{},r=new o;e.data=r.parse(t,n)}}}},{"../json/builder":37,"../json/parser":38,"../util":72,"./helpers":46}],48:[function(e,t,n){var r=e("../core"),i=e("../util"),o=e("../query/query_param_serializer"),s=e("../model/shape"),a=e("./helpers").populateHostPrefix;t.exports={buildRequest:function(e){var t=e.service.api.operations[e.operation],n=e.httpRequest;n.headers["Content-Type"]="application/x-www-form-urlencoded; charset=utf-8",n.params={Version:e.service.api.apiVersion,Action:t.name},(new o).serialize(e.params,t.input,function(e,t){n.params[e]=t}),n.body=i.queryParamsToString(n.params),a(e)},extractError:function(e){var t,n=e.httpResponse.body.toString();if(n.match("<UnknownOperationException"))t={Code:"UnknownOperation",Message:"Unknown operation "+e.request.operation};else try{t=(new r.XML.Parser).parse(n)}catch(n){t={Code:e.httpResponse.statusCode,Message:e.httpResponse.statusMessage}}t.requestId&&!e.requestId&&(e.requestId=t.requestId),t.Errors&&(t=t.Errors),t.Error&&(t=t.Error),t.Code?e.error=i.error(new Error,{code:t.Code,message:t.Message}):e.error=i.error(new Error,{code:e.httpResponse.statusCode,message:null})},extractData:function(e){var t=e.request,n=t.service.api.operations[t.operation].output||{},o=n;if(o.resultWrapper){var a=s.create({type:"structure"});a.members[o.resultWrapper]=n,a.memberNames=[o.resultWrapper],i.property(n,"name",n.resultWrapper),n=a}var c=new r.XML.Parser;if(n&&n.members&&!n.members._XAMZRequestId){var u=s.create({type:"string"},{api:{protocol:"query"}},"requestId");n.members._XAMZRequestId=u}var l=c.parse(e.httpResponse.body.toString(),n);e.requestId=l._XAMZRequestId||l.requestId,l._XAMZRequestId&&delete l._XAMZRequestId,o.resultWrapper&&l[o.resultWrapper]&&(i.update(l,l[o.resultWrapper]),delete l[o.resultWrapper]),e.data=l}}},{"../core":19,"../model/shape":44,"../query/query_param_serializer":52,"../util":72,"./helpers":46}],49:[function(e,t,n){function r(e,t,n,r){var o=[e,t].join("/");o=o.replace(/\/+/g,"/");var s={},a=!1;if(i.each(n.members,function(e,t){var n=r[e];if(null!=n)if("uri"===t.location){var c=new RegExp("\\{"+t.name+"(\\+)?\\}");o=o.replace(c,function(e,t){return(t?i.uriEscapePath:i.uriEscape)(String(n))})}else"querystring"===t.location&&(a=!0,"list"===t.type?s[t.name]=n.map(function(e){return i.uriEscape(t.member.toWireFormat(e).toString())}):"map"===t.type?i.each(n,function(e,t){Array.isArray(t)?s[e]=t.map(function(e){return i.uriEscape(String(e))}):s[e]=i.uriEscape(String(t))}):s[t.name]=i.uriEscape(t.toWireFormat(n).toString()))}),a){o+=o.indexOf("?")>=0?"&":"?";var c=[];i.arrayEach(Object.keys(s).sort(),function(e){Array.isArray(s[e])||(s[e]=[s[e]]);for(var t=0;t<s[e].length;t++)c.push(i.uriEscape(String(e))+"="+s[e][t])}),o+=c.join("&")}return o}var i=e("../util"),o=e("./helpers").populateHostPrefix;t.exports={buildRequest:function(e){(function(e){e.httpRequest.method=e.service.api.operations[e.operation].httpMethod})(e),function(e){var t=e.service.api.operations[e.operation],n=t.input,i=r(e.httpRequest.endpoint.path,t.httpPath,n,e.params);e.httpRequest.path=i}(e),function(e){var t=e.service.api.operations[e.operation];i.each(t.input.members,function(t,n){var r=e.params[t];null!=r&&("headers"===n.location&&"map"===n.type?i.each(r,function(t,r){e.httpRequest.headers[n.name+t]=r}):"header"===n.location&&(r=n.toWireFormat(r).toString(),n.isJsonValue&&(r=i.base64.encode(r)),e.httpRequest.headers[n.name]=r))})}(e),o(e)},extractError:function(){},extractData:function(e){var t=e.request,n={},r=e.httpResponse,o=t.service.api.operations[t.operation].output,s={};i.each(r.headers,function(e,t){s[e.toLowerCase()]=t}),i.each(o.members,function(e,t){var o=(t.name||e).toLowerCase();if("headers"===t.location&&"map"===t.type){n[e]={};var a=t.isLocationName?t.name:"",c=new RegExp("^"+a+"(.+)","i");i.each(r.headers,function(t,r){var i=t.match(c);null!==i&&(n[e][i[1]]=r)})}else if("header"===t.location){if(void 0!==s[o]){var u=t.isJsonValue?i.base64.decode(s[o]):s[o];n[e]=t.toType(u)}}else"statusCode"===t.location&&(n[e]=parseInt(r.statusCode,10))}),e.data=n},generateURI:r}},{"../util":72,"./helpers":46}],50:[function(e,t,n){function r(e,t){if(e.service.api.operations[e.operation].input,!e.httpRequest.headers["Content-Type"]){var n=t?"binary/octet-stream":"application/json";e.httpRequest.headers["Content-Type"]=n}}var i=e("../util"),o=e("./rest"),s=e("./json"),a=e("../json/builder"),c=e("../json/parser");t.exports={buildRequest:function(e){o.buildRequest(e),["HEAD","DELETE"].indexOf(e.httpRequest.method)<0&&function(e){var t=new a,n=e.service.api.operations[e.operation].input;if(n.payload){var i,o=n.members[n.payload];if(void 0===(i=e.params[n.payload]))return;"structure"===o.type?(e.httpRequest.body=t.build(i,o),r(e)):(e.httpRequest.body=i,("binary"===o.type||o.isStreaming)&&r(e,!0))}else{var s=t.build(e.params,n);"{}"===s&&"GET"===e.httpRequest.method||(e.httpRequest.body=s),r(e)}}(e)},extractError:function(e){s.extractError(e)},extractData:function(e){o.extractData(e);var t=e.request,n=t.service.api.operations[t.operation],r=t.service.api.operations[t.operation].output||{};if(n.hasEventOutput,r.payload){var a=r.members[r.payload],u=e.httpResponse.body;if(a.isEventStream)l=new c,e.data[payload]=i.createEventStream(2===AWS.HttpClient.streamsApiVersion?e.httpResponse.stream:u,l,a);else if("structure"===a.type||"list"===a.type){var l=new c;e.data[r.payload]=l.parse(u,a)}else"binary"===a.type||a.isStreaming?e.data[r.payload]=u:e.data[r.payload]=a.toType(u)}else{var h=e.data;s.extractData(e),e.data=i.merge(h,e.data)}}}},{"../json/builder":37,"../json/parser":38,"../util":72,"./json":47,"./rest":49}],51:[function(e,t,n){var r=e("../core"),i=e("../util"),o=e("./rest");t.exports={buildRequest:function(e){o.buildRequest(e),["GET","HEAD"].indexOf(e.httpRequest.method)<0&&function(e){var t=e.service.api.operations[e.operation].input,n=new r.XML.Builder,o=e.params,s=t.payload;if(s){var a=t.members[s];if(void 0===(o=o[s]))return;if("structure"===a.type){var c=a.name;e.httpRequest.body=n.toXML(o,a,c,!0)}else e.httpRequest.body=o}else e.httpRequest.body=n.toXML(o,t,t.name||t.shape||i.string.upperFirst(e.operation)+"Request")}(e)},extractError:function(e){var t;o.extractError(e);try{t=(new r.XML.Parser).parse(e.httpResponse.body.toString())}catch(n){t={Code:e.httpResponse.statusCode,Message:e.httpResponse.statusMessage}}t.Errors&&(t=t.Errors),t.Error&&(t=t.Error),t.Code?e.error=i.error(new Error,{code:t.Code,message:t.Message}):e.error=i.error(new Error,{code:e.httpResponse.statusCode,message:null})},extractData:function(e){o.extractData(e);var t,n=e.request,s=e.httpResponse.body,a=n.service.api.operations[n.operation],c=a.output,u=(a.hasEventOutput,c.payload);if(u){var l=c.members[u];l.isEventStream?(t=new r.XML.Parser,e.data[u]=i.createEventStream(2===r.HttpClient.streamsApiVersion?e.httpResponse.stream:e.httpResponse.body,t,l)):"structure"===l.type?(t=new r.XML.Parser,e.data[u]=t.parse(s.toString(),l)):"binary"===l.type||l.isStreaming?e.data[u]=s:e.data[u]=l.toType(s)}else if(s.length>0){var h=(t=new r.XML.Parser).parse(s.toString(),c);i.update(e.data,h)}}}},{"../core":19,"../util":72,"./rest":49}],52:[function(e,t,n){function r(){}function i(e){return e.isQueryName||"ec2"!==e.api.protocol?e.name:e.name[0].toUpperCase()+e.name.substr(1)}function o(e,t,n,r){a.each(n.members,function(n,o){var a=t[n];if(null!=a){var c=i(o);s(c=e?e+"."+c:c,a,o,r)}})}function s(e,t,n,r){null!=t&&("structure"===n.type?o(e,t,n,r):"list"===n.type?function(e,t,n,r){var o=n.member||{};0!==t.length?a.arrayEach(t,function(t,a){var c="."+(a+1);if("ec2"===n.api.protocol)c+="";else if(n.flattened){if(o.name){var u=e.split(".");u.pop(),u.push(i(o)),e=u.join(".")}}else c="."+(o.name?o.name:"member")+c;s(e+c,t,o,r)}):r.call(this,e,null)}(e,t,n,r):"map"===n.type?function(e,t,n,r){var i=1;a.each(t,function(t,o){var a=(n.flattened?".":".entry.")+i+++".",c=a+(n.key.name||"key"),u=a+(n.value.name||"value");s(e+c,t,n.key,r),s(e+u,o,n.value,r)})}(e,t,n,r):r(e,n.toWireFormat(t).toString()))}var a=e("../util");r.prototype.serialize=function(e,t,n){o("",e,t,n)},t.exports=r},{"../util":72}],53:[function(e,t,n){t.exports={now:function(){return"undefined"!=typeof performance&&"function"==typeof performance.now?performance.now():Date.now()}}},{}],54:[function(e,t,n){function r(e,t){i.each(t,function(t,n){"globalEndpoint"!==t&&(void 0!==e.config[t]&&null!==e.config[t]||(e.config[t]=n))})}var i=e("./util"),o=e("./region_config_data.json");t.exports=function(e){for(var t=function(e){var t=e.config.region,n=function(e){if(!e)return null;var t=e.split("-");return t.length<3?null:t.slice(0,t.length-2).join("-")+"-*"}(t),r=e.api.endpointPrefix;return[[t,r],[n,r],[t,"*"],[n,"*"],["*",r],["*","*"]].map(function(e){return e[0]&&e[1]?e.join("/"):null})}(e),n=0;n<t.length;n++){var s=t[n];if(s&&Object.prototype.hasOwnProperty.call(o.rules,s)){var a=o.rules[s];return"string"==typeof a&&(a=o.patterns[a]),e.config.useDualstack&&i.isDualstackAvailable(e)&&((a=i.copy(a)).endpoint="{service}.dualstack.{region}.amazonaws.com"),e.isGlobalEndpoint=!!a.globalEndpoint,a.signatureVersion||(a.signatureVersion="v4"),void r(e,a)}}}},{"./region_config_data.json":55,"./util":72}],55:[function(e,t,n){t.exports={rules:{"*/*":{endpoint:"{service}.{region}.amazonaws.com"},"cn-*/*":{endpoint:"{service}.{region}.amazonaws.com.cn"},"*/budgets":"globalSSL","*/cloudfront":"globalSSL","*/iam":"globalSSL","*/sts":"globalSSL","*/importexport":{endpoint:"{service}.amazonaws.com",signatureVersion:"v2",globalEndpoint:!0},"*/route53":{endpoint:"https://{service}.amazonaws.com",signatureVersion:"v3https",globalEndpoint:!0},"*/waf":"globalSSL","us-gov-*/iam":"globalGovCloud","us-gov-*/sts":{endpoint:"{service}.{region}.amazonaws.com"},"us-gov-west-1/s3":"s3signature","us-west-1/s3":"s3signature","us-west-2/s3":"s3signature","eu-west-1/s3":"s3signature","ap-southeast-1/s3":"s3signature","ap-southeast-2/s3":"s3signature","ap-northeast-1/s3":"s3signature","sa-east-1/s3":"s3signature","us-east-1/s3":{endpoint:"{service}.amazonaws.com",signatureVersion:"s3"},"us-east-1/sdb":{endpoint:"{service}.amazonaws.com",signatureVersion:"v2"},"*/sdb":{endpoint:"{service}.{region}.amazonaws.com",signatureVersion:"v2"}},patterns:{globalSSL:{endpoint:"https://{service}.amazonaws.com",globalEndpoint:!0},globalGovCloud:{endpoint:"{service}.us-gov.amazonaws.com"},s3signature:{endpoint:"{service}.{region}.amazonaws.com",signatureVersion:"s3"}}}},{}],56:[function(e,t,n){(function(t){var n=e("./core"),r=e("./state_machine"),i=n.util.inherit,o=n.util.domain,s=e("jmespath"),a={success:1,error:1,complete:1},c=new r;c.setupStates=function(){var e=function(e,t){var n=this;n._haltHandlersOnError=!1,n.emit(n._asm.currentState,function(e){if(e)if(function(e){return Object.prototype.hasOwnProperty.call(a,e._asm.currentState)}(n)){if(!(o&&n.domain instanceof o.Domain))throw e;e.domainEmitter=n,e.domain=n.domain,e.domainThrown=!1,n.domain.emit("error",e)}else n.response.error=e,t(e);else t(n.response.error)})};this.addState("validate","build","error",e),this.addState("build","afterBuild","restart",e),this.addState("afterBuild","sign","restart",e),this.addState("sign","send","retry",e),this.addState("retry","afterRetry","afterRetry",e),this.addState("afterRetry","sign","error",e),this.addState("send","validateResponse","retry",e),this.addState("validateResponse","extractData","extractError",e),this.addState("extractError","extractData","retry",e),this.addState("extractData","success","retry",e),this.addState("restart","build","error",e),this.addState("success","complete","complete",e),this.addState("error","complete","complete",e),this.addState("complete",null,null,e)},c.setupStates(),n.Request=i({constructor:function(e,t,i){var s=e.endpoint,a=e.config.region,u=e.config.customUserAgent;e.isGlobalEndpoint&&(a="us-east-1"),this.domain=o&&o.active,this.service=e,this.operation=t,this.params=i||{},this.httpRequest=new n.HttpRequest(s,a),this.httpRequest.appendToUserAgent(u),this.startTime=e.getSkewCorrectedDate(),this.response=new n.Response(this),this._asm=new r(c.states,"validate"),this._haltHandlersOnError=!1,n.SequentialExecutor.call(this),this.emit=this.emitEvent},send:function(e){return e&&(this.httpRequest.appendToUserAgent("callback"),this.on("complete",function(t){e.call(t,t.error,t.data)})),this.runTo(),this.response},build:function(e){return this.runTo("send",e)},runTo:function(e,t){return this._asm.runTo(e,t,this),this},abort:function(){return this.removeAllListeners("validateResponse"),this.removeAllListeners("extractError"),this.on("validateResponse",function(e){e.error=n.util.error(new Error("Request aborted by user"),{code:"RequestAbortedError",retryable:!1})}),this.httpRequest.stream&&!this.httpRequest.stream.didCallback&&(this.httpRequest.stream.abort(),this.httpRequest._abortCallback?this.httpRequest._abortCallback():this.removeAllListeners("send")),this},eachPage:function(e){e=n.util.fn.makeAsync(e,3),this.on("complete",function t(r){e.call(r,r.error,r.data,function(i){!1!==i&&(r.hasNextPage()?r.nextPage().on("complete",t).send():e.call(r,null,null,n.util.fn.noop))})}).send()},eachItem:function(e){var t=this;this.eachPage(function(r,i){if(r)return e(r,null);if(null===i)return e(null,null);var o=t.service.paginationConfig(t.operation).resultKey;Array.isArray(o)&&(o=o[0]);var a=s.search(i,o),c=!0;return n.util.arrayEach(a,function(t){if(!1===(c=e(null,t)))return n.util.abort}),c})},isPageable:function(){return!!this.service.paginationConfig(this.operation)},createReadStream:function(){var e=n.util.stream,r=this,i=null;return 2===n.HttpClient.streamsApiVersion?(i=new e.PassThrough,t.nextTick(function(){r.send()})):((i=new e.Stream).readable=!0,i.sent=!1,i.on("newListener",function(e){i.sent||"data"!==e||(i.sent=!0,t.nextTick(function(){r.send()}))})),this.on("error",function(e){i.emit("error",e)}),this.on("httpHeaders",function(t,o,s){if(t<300){r.removeListener("httpData",n.EventListeners.Core.HTTP_DATA),r.removeListener("httpError",n.EventListeners.Core.HTTP_ERROR),r.on("httpError",function(e){s.error=e,s.error.retryable=!1});var a,c=!1;if("HEAD"!==r.httpRequest.method&&(a=parseInt(o["content-length"],10)),void 0!==a&&!isNaN(a)&&a>=0){c=!0;var u=0}var l=function(){c&&u!==a?i.emit("error",n.util.error(new Error("Stream content length mismatch. Received "+u+" of "+a+" bytes."),{code:"StreamContentLengthMismatch"})):2===n.HttpClient.streamsApiVersion?i.end():i.emit("end")},h=s.httpResponse.createUnbufferedStream();if(2===n.HttpClient.streamsApiVersion)if(c){var p=new e.PassThrough;p._write=function(t){return t&&t.length&&(u+=t.length),e.PassThrough.prototype._write.apply(this,arguments)},p.on("end",l),i.on("error",function(e){c=!1,h.unpipe(p),p.emit("end"),p.end()}),h.pipe(p).pipe(i,{end:!1})}else h.pipe(i);else c&&h.on("data",function(e){e&&e.length&&(u+=e.length)}),h.on("data",function(e){i.emit("data",e)}),h.on("end",l);h.on("error",function(e){c=!1,i.emit("error",e)})}}),i},emitEvent:function(e,t,r){"function"==typeof t&&(r=t,t=null),r||(r=function(){}),t||(t=this.eventParameters(e,this.response)),n.SequentialExecutor.prototype.emit.call(this,e,t,function(e){e&&(this.response.error=e),r.call(this,e)})},eventParameters:function(e){switch(e){case"restart":case"validate":case"sign":case"build":case"afterValidate":case"afterBuild":return[this];case"error":return[this.response.error,this.response];default:return[this.response]}},presign:function(e,t){return t||"function"!=typeof e||(t=e,e=null),(new n.Signers.Presign).sign(this.toGet(),e,t)},isPresigned:function(){return Object.prototype.hasOwnProperty.call(this.httpRequest.headers,"presigned-expires")},toUnauthenticated:function(){return this._unAuthenticated=!0,this.removeListener("validate",n.EventListeners.Core.VALIDATE_CREDENTIALS),this.removeListener("sign",n.EventListeners.Core.SIGN),this},toGet:function(){return"query"!==this.service.api.protocol&&"ec2"!==this.service.api.protocol||(this.removeListener("build",this.buildAsGet),this.addListener("build",this.buildAsGet)),this},buildAsGet:function(e){e.httpRequest.method="GET",e.httpRequest.path=e.service.endpoint.path+"?"+e.httpRequest.body,e.httpRequest.body="",delete e.httpRequest.headers["Content-Length"],delete e.httpRequest.headers["Content-Type"]},haltHandlersOnError:function(){this._haltHandlersOnError=!0}}),n.Request.addPromisesToClass=function(e){this.prototype.promise=function(){var t=this;return this.httpRequest.appendToUserAgent("promise"),new e(function(e,n){t.on("complete",function(t){t.error?n(t.error):e(Object.defineProperty(t.data||{},"$response",{value:t}))}),t.runTo()})}},n.Request.deletePromisesFromClass=function(){delete this.prototype.promise},n.util.addPromises(n.Request),n.util.mixin(n.Request,n.SequentialExecutor)}).call(this,e("_process"))},{"./core":19,"./state_machine":71,_process:86,jmespath:85}],57:[function(e,t,n){function r(e){var t=e.request._waiter,n=t.config.acceptors,r=!1,i="retry";n.forEach(function(n){if(!r){var o=t.matchers[n.matcher];o&&o(e,n.expected,n.argument)&&(r=!0,i=n.state)}}),!r&&e.error&&(i="failure"),"success"===i?t.setSuccess(e):t.setError(e,"retry"===i)}var i=e("./core"),o=i.util.inherit,s=e("jmespath");i.ResourceWaiter=o({constructor:function(e,t){this.service=e,this.state=t,this.loadWaiterConfig(this.state)},service:null,state:null,config:null,matchers:{path:function(e,t,n){try{var r=s.search(e.data,n)}catch(e){return!1}return s.strictDeepEqual(r,t)},pathAll:function(e,t,n){try{var r=s.search(e.data,n)}catch(e){return!1}Array.isArray(r)||(r=[r]);var i=r.length;if(!i)return!1;for(var o=0;o<i;o++)if(!s.strictDeepEqual(r[o],t))return!1;return!0},pathAny:function(e,t,n){try{var r=s.search(e.data,n)}catch(e){return!1}Array.isArray(r)||(r=[r]);for(var i=r.length,o=0;o<i;o++)if(s.strictDeepEqual(r[o],t))return!0;return!1},status:function(e,t){var n=e.httpResponse.statusCode;return"number"==typeof n&&n===t},error:function(e,t){return"string"==typeof t&&e.error?t===e.error.code:t===!!e.error}},listeners:(new i.SequentialExecutor).addNamedListeners(function(e){e("RETRY_CHECK","retry",function(e){var t=e.request._waiter;e.error&&"ResourceNotReady"===e.error.code&&(e.error.retryDelay=1e3*(t.config.delay||0))}),e("CHECK_OUTPUT","extractData",r),e("CHECK_ERROR","extractError",r)}),wait:function(e,t){"function"==typeof e&&(t=e,e=void 0),e&&e.$waiter&&("number"==typeof(e=i.util.copy(e)).$waiter.delay&&(this.config.delay=e.$waiter.delay),"number"==typeof e.$waiter.maxAttempts&&(this.config.maxAttempts=e.$waiter.maxAttempts),delete e.$waiter);var n=this.service.makeRequest(this.config.operation,e);return n._waiter=this,n.response.maxRetries=this.config.maxAttempts,n.addListeners(this.listeners),t&&n.send(t),n},setSuccess:function(e){e.error=null,e.data=e.data||{},e.request.removeAllListeners("extractData")},setError:function(e,t){e.data=null,e.error=i.util.error(e.error||new Error,{code:"ResourceNotReady",message:"Resource is not in the state "+this.state,retryable:t})},loadWaiterConfig:function(e){if(!this.service.api.waiters[e])throw new i.util.error(new Error,{code:"StateNotFoundError",message:"State "+e+" not found."});this.config=i.util.copy(this.service.api.waiters[e])}})},{"./core":19,jmespath:85}],58:[function(e,t,n){var r=e("./core"),i=r.util.inherit,o=e("jmespath");r.Response=i({constructor:function(e){this.request=e,this.data=null,this.error=null,this.retryCount=0,this.redirectCount=0,this.httpResponse=new r.HttpResponse,e&&(this.maxRetries=e.service.numRetries(),this.maxRedirects=e.service.config.maxRedirects)},nextPage:function(e){var t,n=this.request.service,i=this.request.operation;try{t=n.paginationConfig(i,!0)}catch(e){this.error=e}if(!this.hasNextPage()){if(e)e(this.error,null);else if(this.error)throw this.error;return null}var o=r.util.copy(this.request.params);if(this.nextPageTokens){var s=t.inputToken;"string"==typeof s&&(s=[s]);for(var a=0;a<s.length;a++)o[s[a]]=this.nextPageTokens[a];return n.makeRequest(this.request.operation,o,e)}return e?e(null,null):null},hasNextPage:function(){return this.cacheNextPageTokens(),!!this.nextPageTokens||void 0===this.nextPageTokens&&void 0},cacheNextPageTokens:function(){if(Object.prototype.hasOwnProperty.call(this,"nextPageTokens"))return this.nextPageTokens;this.nextPageTokens=void 0;var e=this.request.service.paginationConfig(this.request.operation);if(!e)return this.nextPageTokens;if(this.nextPageTokens=null,e.moreResults&&!o.search(this.data,e.moreResults))return this.nextPageTokens;var t=e.outputToken;return"string"==typeof t&&(t=[t]),r.util.arrayEach.call(this,t,function(e){var t=o.search(this.data,e);t&&(this.nextPageTokens=this.nextPageTokens||[],this.nextPageTokens.push(t))}),this.nextPageTokens}})},{"./core":19,jmespath:85}],59:[function(e,t,n){var r=e("./core");r.SequentialExecutor=r.util.inherit({constructor:function(){this._events={}},listeners:function(e){return this._events[e]?this._events[e].slice(0):[]},on:function(e,t,n){return this._events[e]?n?this._events[e].unshift(t):this._events[e].push(t):this._events[e]=[t],this},onAsync:function(e,t,n){return t._isAsync=!0,this.on(e,t,n)},removeListener:function(e,t){var n=this._events[e];if(n){for(var r=n.length,i=-1,o=0;o<r;++o)n[o]===t&&(i=o);i>-1&&n.splice(i,1)}return this},removeAllListeners:function(e){return e?delete this._events[e]:this._events={},this},emit:function(e,t,n){n||(n=function(){});var r=this.listeners(e),i=r.length;return this.callListeners(r,t,n),i>0},callListeners:function(e,t,n,i){function o(i){if(i&&(a=r.util.error(a||new Error,i),s._haltHandlersOnError))return n.call(s,a);s.callListeners(e,t,n,a)}for(var s=this,a=i||null;e.length>0;){var c=e.shift();if(c._isAsync)return void c.apply(s,t.concat([o]));try{c.apply(s,t)}catch(e){a=r.util.error(a||new Error,e)}if(a&&s._haltHandlersOnError)return void n.call(s,a)}n.call(s,a)},addListeners:function(e){var t=this;return e._events&&(e=e._events),r.util.each(e,function(e,n){"function"==typeof n&&(n=[n]),r.util.arrayEach(n,function(n){t.on(e,n)})}),t},addNamedListener:function(e,t,n,r){return this[e]=n,this.addListener(t,n,r),this},addNamedAsyncListener:function(e,t,n,r){return n._isAsync=!0,this.addNamedListener(e,t,n,r)},addNamedListeners:function(e){var t=this;return e(function(){t.addNamedListener.apply(t,arguments)},function(){t.addNamedAsyncListener.apply(t,arguments)}),this}}),r.SequentialExecutor.prototype.addListener=r.SequentialExecutor.prototype.on,t.exports=r.SequentialExecutor},{"./core":19}],60:[function(e,t,n){(function(n){var r=e("./core"),i=e("./model/api"),o=e("./region_config"),a=r.util.inherit,c=0;r.Service=a({constructor:function(e){if(!this.loadServiceClass)throw r.util.error(new Error,"Service must be constructed with `new' operator");var t=this.loadServiceClass(e||{});if(t){var n=r.util.copy(e),i=new t(e);return Object.defineProperty(i,"_originalConfig",{get:function(){return n},enumerable:!1,configurable:!0}),i._clientId=++c,i}this.initialize(e)},initialize:function(e){var t=r.config[this.serviceIdentifier];if(this.config=new r.Config(r.config),t&&this.config.update(t,!0),e&&this.config.update(e,!0),this.validateService(),this.config.endpoint||o(this),this.config.endpoint=this.endpointFromTemplate(this.config.endpoint),this.setEndpoint(this.config.endpoint),r.SequentialExecutor.call(this),r.Service.addDefaultMonitoringListeners(this),(this.config.clientSideMonitoring||r.Service._clientSideMonitoring)&&this.publisher){var i=this.publisher;this.addNamedListener("PUBLISH_API_CALL","apiCall",function(e){n.nextTick(function(){i.eventHandler(e)})}),this.addNamedListener("PUBLISH_API_ATTEMPT","apiCallAttempt",function(e){n.nextTick(function(){i.eventHandler(e)})})}},validateService:function(){},loadServiceClass:function(e){var t=e;if(r.util.isEmpty(this.api)){if(t.apiConfig)return r.Service.defineServiceApi(this.constructor,t.apiConfig);if(this.constructor.services){(t=new r.Config(r.config)).update(e,!0);var n=t.apiVersions[this.constructor.serviceIdentifier];return n=n||t.apiVersion,this.getLatestServiceClass(n)}return null}return null},getLatestServiceClass:function(e){return e=this.getLatestServiceVersion(e),null===this.constructor.services[e]&&r.Service.defineServiceApi(this.constructor,e),this.constructor.services[e]},getLatestServiceVersion:function(e){if(!this.constructor.services||0===this.constructor.services.length)throw new Error("No services defined on "+this.constructor.serviceIdentifier);if(e?r.util.isType(e,Date)&&(e=r.util.date.iso8601(e).split("T")[0]):e="latest",Object.hasOwnProperty(this.constructor.services,e))return e;for(var t=Object.keys(this.constructor.services).sort(),n=null,i=t.length-1;i>=0;i--)if("*"!==t[i][t[i].length-1]&&(n=t[i]),t[i].substr(0,10)<=e)return n;throw new Error("Could not find "+this.constructor.serviceIdentifier+" API to satisfy version constraint `"+e+"'")},api:{},defaultRetryCount:3,customizeRequests:function(e){if(e){if("function"!=typeof e)throw new Error("Invalid callback type '"+s(e)+"' provided in customizeRequests");this.customRequestHandler=e}else this.customRequestHandler=null},makeRequest:function(e,t,n){if("function"==typeof t&&(n=t,t=null),t=t||{},this.config.params){var i=this.api.operations[e];i&&(t=r.util.copy(t),r.util.each(this.config.params,function(e,n){i.input.members[e]&&(void 0!==t[e]&&null!==t[e]||(t[e]=n))}))}var o=new r.Request(this,e,t);return this.addAllRequestListeners(o),this.attachMonitoringEmitter(o),n&&o.send(n),o},makeUnauthenticatedRequest:function(e,t,n){"function"==typeof t&&(n=t,t={});var r=this.makeRequest(e,t).toUnauthenticated();return n?r.send(n):r},waitFor:function(e,t,n){return new r.ResourceWaiter(this,e).wait(t,n)},addAllRequestListeners:function(e){for(var t=[r.events,r.EventListeners.Core,this.serviceInterface(),r.EventListeners.CorePost],n=0;n<t.length;n++)t[n]&&e.addListeners(t[n]);this.config.paramValidation||e.removeListener("validate",r.EventListeners.Core.VALIDATE_PARAMETERS),this.config.logger&&e.addListeners(r.EventListeners.Logger),this.setupRequestListeners(e),"function"==typeof this.constructor.prototype.customRequestHandler&&this.constructor.prototype.customRequestHandler(e),Object.prototype.hasOwnProperty.call(this,"customRequestHandler")&&"function"==typeof this.customRequestHandler&&this.customRequestHandler(e)},apiCallEvent:function(e){var t=e.service.api.operations[e.operation],n={Type:"ApiCall",Api:t?t.name:e.operation,Version:1,Service:e.service.api.serviceId||e.service.api.endpointPrefix,Region:e.httpRequest.region,MaxRetriesExceeded:0,UserAgent:e.httpRequest.getUserAgent()},r=e.response;if(r.httpResponse.statusCode&&(n.FinalHttpStatusCode=r.httpResponse.statusCode),r.error){var i=r.error;r.httpResponse.statusCode>299?(i.code&&(n.FinalAwsException=i.code),i.message&&(n.FinalAwsExceptionMessage=i.message)):((i.code||i.name)&&(n.FinalSdkException=i.code||i.name),i.message&&(n.FinalSdkExceptionMessage=i.message))}return n},apiAttemptEvent:function(e){var t=e.service.api.operations[e.operation],n={Type:"ApiCallAttempt",Api:t?t.name:e.operation,Version:1,Service:e.service.api.serviceId||e.service.api.endpointPrefix,Fqdn:e.httpRequest.endpoint.hostname,UserAgent:e.httpRequest.getUserAgent()},r=e.response;return r.httpResponse.statusCode&&(n.HttpStatusCode=r.httpResponse.statusCode),!e._unAuthenticated&&e.service.config.credentials&&e.service.config.credentials.accessKeyId&&(n.AccessKey=e.service.config.credentials.accessKeyId),r.httpResponse.headers?(e.httpRequest.headers["x-amz-security-token"]&&(n.SessionToken=e.httpRequest.headers["x-amz-security-token"]),r.httpResponse.headers["x-amzn-requestid"]&&(n.XAmznRequestId=r.httpResponse.headers["x-amzn-requestid"]),r.httpResponse.headers["x-amz-request-id"]&&(n.XAmzRequestId=r.httpResponse.headers["x-amz-request-id"]),r.httpResponse.headers["x-amz-id-2"]&&(n.XAmzId2=r.httpResponse.headers["x-amz-id-2"]),n):n},attemptFailEvent:function(e){var t=this.apiAttemptEvent(e),n=e.response,r=n.error;return n.httpResponse.statusCode>299?(r.code&&(t.AwsException=r.code),r.message&&(t.AwsExceptionMessage=r.message)):((r.code||r.name)&&(t.SdkException=r.code||r.name),r.message&&(t.SdkExceptionMessage=r.message)),t},attachMonitoringEmitter:function(e){var t,n,i,o,s,a,c=0,u=this;e.on("validate",function(){o=r.util.realClock.now(),a=Date.now()},!0),e.on("sign",function(){n=r.util.realClock.now(),t=Date.now(),s=e.httpRequest.region,c++},!0),e.on("validateResponse",function(){i=Math.round(r.util.realClock.now()-n)}),e.addNamedListener("API_CALL_ATTEMPT","success",function(){var n=u.apiAttemptEvent(e);n.Timestamp=t,n.AttemptLatency=i>=0?i:0,n.Region=s,u.emit("apiCallAttempt",[n])}),e.addNamedListener("API_CALL_ATTEMPT_RETRY","retry",function(){var o=u.attemptFailEvent(e);o.Timestamp=t,i=i||Math.round(r.util.realClock.now()-n),o.AttemptLatency=i>=0?i:0,o.Region=s,u.emit("apiCallAttempt",[o])}),e.addNamedListener("API_CALL","complete",function(){var t=u.apiCallEvent(e);if(t.AttemptCount=c,!(t.AttemptCount<=0)){t.Timestamp=a;var n=Math.round(r.util.realClock.now()-o);t.Latency=n>=0?n:0;var i=e.response;"number"==typeof i.retryCount&&"number"==typeof i.maxRetries&&i.retryCount>=i.maxRetries&&(t.MaxRetriesExceeded=1),u.emit("apiCall",[t])}})},setupRequestListeners:function(e){},getSignerClass:function(e){var t,n=null,i="";return e&&(i=(n=(e.service.api.operations||{})[e.operation]||null)?n.authtype:""),t=this.config.signatureVersion?this.config.signatureVersion:"v4"===i||"v4-unsigned-body"===i?"v4":this.api.signatureVersion,r.Signers.RequestSigner.getVersion(t)},serviceInterface:function(){switch(this.api.protocol){case"ec2":case"query":return r.EventListeners.Query;case"json":return r.EventListeners.Json;case"rest-json":return r.EventListeners.RestJson;case"rest-xml":return r.EventListeners.RestXml}if(this.api.protocol)throw new Error("Invalid service `protocol' "+this.api.protocol+" in API config")},successfulResponse:function(e){return e.httpResponse.statusCode<300},numRetries:function(){return void 0!==this.config.maxRetries?this.config.maxRetries:this.defaultRetryCount},retryDelays:function(e,t){return r.util.calculateRetryDelay(e,this.config.retryDelayOptions,t)},retryableError:function(e){return!!this.timeoutError(e)||!!this.networkingError(e)||!!this.expiredCredentialsError(e)||!!this.throttledError(e)||e.statusCode>=500},networkingError:function(e){return"NetworkingError"===e.code},timeoutError:function(e){return"TimeoutError"===e.code},expiredCredentialsError:function(e){return"ExpiredTokenException"===e.code},clockSkewError:function(e){switch(e.code){case"RequestTimeTooSkewed":case"RequestExpired":case"InvalidSignatureException":case"SignatureDoesNotMatch":case"AuthFailure":case"RequestInTheFuture":return!0;default:return!1}},getSkewCorrectedDate:function(){return new Date(Date.now()+this.config.systemClockOffset)},applyClockOffset:function(e){e&&(this.config.systemClockOffset=e-Date.now())},isClockSkewed:function(e){if(e)return Math.abs(this.getSkewCorrectedDate().getTime()-e)>=3e4},throttledError:function(e){if(429===e.statusCode)return!0;switch(e.code){case"ProvisionedThroughputExceededException":case"Throttling":case"ThrottlingException":case"RequestLimitExceeded":case"RequestThrottled":case"RequestThrottledException":case"TooManyRequestsException":case"TransactionInProgressException":return!0;default:return!1}},endpointFromTemplate:function(e){if("string"!=typeof e)return e;var t=e;return(t=(t=t.replace(/\{service\}/g,this.api.endpointPrefix)).replace(/\{region\}/g,this.config.region)).replace(/\{scheme\}/g,this.config.sslEnabled?"https":"http")},setEndpoint:function(e){this.endpoint=new r.Endpoint(e,this.config)},paginationConfig:function(e,t){var n=this.api.operations[e].paginator;if(!n){if(t){var i=new Error;throw r.util.error(i,"No pagination configuration for "+e)}return null}return n}}),r.util.update(r.Service,{defineMethods:function(e){r.util.each(e.prototype.api.operations,function(t){e.prototype[t]||("none"===e.prototype.api.operations[t].authtype?e.prototype[t]=function(e,n){return this.makeUnauthenticatedRequest(t,e,n)}:e.prototype[t]=function(e,n){return this.makeRequest(t,e,n)})})},defineService:function(e,t,n){r.Service._serviceMap[e]=!0,Array.isArray(t)||(n=t,t=[]);var i=a(r.Service,n||{});if("string"==typeof e){r.Service.addVersions(i,t);var o=i.serviceIdentifier||e;i.serviceIdentifier=o}else i.prototype.api=e,r.Service.defineMethods(i);if(r.SequentialExecutor.call(this.prototype),!this.prototype.publisher&&r.util.clientSideMonitoring){var s=r.util.clientSideMonitoring.Publisher,c=(0,r.util.clientSideMonitoring.configProvider)();this.prototype.publisher=new s(c),c.enabled&&(r.Service._clientSideMonitoring=!0)}return r.SequentialExecutor.call(i.prototype),r.Service.addDefaultMonitoringListeners(i.prototype),i},addVersions:function(e,t){Array.isArray(t)||(t=[t]),e.services=e.services||{};for(var n=0;n<t.length;n++)void 0===e.services[t[n]]&&(e.services[t[n]]=null);e.apiVersions=Object.keys(e.services).sort()},defineServiceApi:function(e,t,n){function o(e){e.isApi?s.prototype.api=e:s.prototype.api=new i(e)}var s=a(e,{serviceIdentifier:e.serviceIdentifier});if("string"==typeof t){if(n)o(n);else try{o(r.apiLoader(e.serviceIdentifier,t))}catch(n){throw r.util.error(n,{message:"Could not find API configuration "+e.serviceIdentifier+"-"+t})}Object.prototype.hasOwnProperty.call(e.services,t)||(e.apiVersions=e.apiVersions.concat(t).sort()),e.services[t]=s}else o(t);return r.Service.defineMethods(s),s},hasService:function(e){return Object.prototype.hasOwnProperty.call(r.Service._serviceMap,e)},addDefaultMonitoringListeners:function(e){e.addNamedListener("MONITOR_EVENTS_BUBBLE","apiCallAttempt",function(t){var n=Object.getPrototypeOf(e);n._events&&n.emit("apiCallAttempt",[t])}),e.addNamedListener("CALL_EVENTS_BUBBLE","apiCall",function(t){var n=Object.getPrototypeOf(e);n._events&&n.emit("apiCall",[t])})},_serviceMap:{}}),r.util.mixin(r.Service,r.SequentialExecutor),t.exports=r.Service}).call(this,e("_process"))},{"./core":19,"./model/api":39,"./region_config":54,_process:86}],61:[function(e,t,n){var r=e("../core");r.util.update(r.CognitoIdentity.prototype,{getOpenIdToken:function(e,t){return this.makeUnauthenticatedRequest("getOpenIdToken",e,t)},getId:function(e,t){return this.makeUnauthenticatedRequest("getId",e,t)},getCredentialsForIdentity:function(e,t){return this.makeUnauthenticatedRequest("getCredentialsForIdentity",e,t)}})},{"../core":19}],62:[function(e,t,n){(function(t){var n=e("../core"),r=e("../region_config");n.util.update(n.STS.prototype,{credentialsFrom:function(e,t){return e?(t||(t=new n.TemporaryCredentials),t.expired=!1,t.accessKeyId=e.Credentials.AccessKeyId,t.secretAccessKey=e.Credentials.SecretAccessKey,t.sessionToken=e.Credentials.SessionToken,t.expireTime=e.Credentials.Expiration,t):null},assumeRoleWithWebIdentity:function(e,t){return this.makeUnauthenticatedRequest("assumeRoleWithWebIdentity",e,t)},assumeRoleWithSAML:function(e,t){return this.makeUnauthenticatedRequest("assumeRoleWithSAML",e,t)},validateRegionalEndpointsFlagValue:function(e,t){if(!("string"==typeof e&&["legacy","regional"].indexOf(e.toLowerCase())>=0))throw n.util.error(new Error,t);this.config.stsRegionalEndpoints=e.toLowerCase()},validateRegionalEndpointsFlag:function(){var e=this.config;if(e.stsRegionalEndpoints&&this.validateRegionalEndpointsFlagValue(e.stsRegionalEndpoints,{code:"InvalidConfiguration",message:'invalid "stsRegionalEndpoints" configuration. Expect "legacy"  or "regional". Got "'+e.stsRegionalEndpoints+'".'}),n.util.isNode()){if(Object.prototype.hasOwnProperty.call(t.env,"AWS_STS_REGIONAL_ENDPOINTS")){var r=t.env.AWS_STS_REGIONAL_ENDPOINTS;this.validateRegionalEndpointsFlagValue(r,{code:"InvalidEnvironmentalVariable",message:'invalid AWS_STS_REGIONAL_ENDPOINTS environmental variable. Expect "legacy"  or "regional". Got "'+t.env.AWS_STS_REGIONAL_ENDPOINTS+'".'})}var i={};try{i=n.util.getProfilesFromSharedConfig(n.util.iniLoader)[t.env.AWS_PROFILE||n.util.defaultProfile]}catch(e){}if(i&&Object.prototype.hasOwnProperty.call(i,"sts_regional_endpoints")){var o=i.sts_regional_endpoints;this.validateRegionalEndpointsFlagValue(o,{code:"InvalidConfiguration",message:'invalid sts_regional_endpoints profile config. Expect "legacy"  or "regional". Got "'+i.sts_regional_endpoints+'".'})}}},optInRegionalEndpoint:function(){this.validateRegionalEndpointsFlag();var e=this.config;if("regional"===e.stsRegionalEndpoints){if(r(this),!this.isGlobalEndpoint)return;if(this.isGlobalEndpoint=!1,!e.region)throw n.util.error(new Error,{code:"ConfigError",message:"Missing region in config"});var t=e.endpoint.indexOf(".amazonaws.com");e.endpoint=e.endpoint.substring(0,t)+"."+e.region+e.endpoint.substring(t)}},validateService:function(){this.optInRegionalEndpoint()}})}).call(this,e("_process"))},{"../core":19,"../region_config":54,_process:86}],63:[function(e,t,n){function r(e){var t=e.httpRequest.headers[a],n=e.service.getSignerClass(e);if(delete e.httpRequest.headers["User-Agent"],delete e.httpRequest.headers["X-Amz-User-Agent"],n===o.Signers.V4){if(t>604800)throw o.util.error(new Error,{code:"InvalidExpiryTime",message:"Presigning does not support expiry time greater than a week with SigV4 signing.",retryable:!1});e.httpRequest.headers[a]=t}else{if(n!==o.Signers.S3)throw o.util.error(new Error,{message:"Presigning only supports S3 or SigV4 signing.",code:"UnsupportedSigner",retryable:!1});var r=e.service?e.service.getSkewCorrectedDate():o.util.date.getDate();e.httpRequest.headers[a]=parseInt(o.util.date.unixTimestamp(r)+t,10).toString()}}function i(e){var t=e.httpRequest.endpoint,n=o.util.urlParse(e.httpRequest.path),r={};n.search&&(r=o.util.queryStringParse(n.search.substr(1)));var i=e.httpRequest.headers.Authorization.split(" ");if("AWS"===i[0])i=i[1].split(":"),r.AWSAccessKeyId=i[0],r.Signature=i[1],o.util.each(e.httpRequest.headers,function(e,t){e===a&&(e="Expires"),0===e.indexOf("x-amz-meta-")&&(delete r[e],e=e.toLowerCase()),r[e]=t}),delete e.httpRequest.headers[a],delete r.Authorization,delete r.Host;else if("AWS4-HMAC-SHA256"===i[0]){i.shift();var s=i.join(" ").match(/Signature=(.*?)(?:,|\s|\r?\n|$)/)[1];r["X-Amz-Signature"]=s,delete r.Expires}t.pathname=n.pathname,t.search=o.util.queryParamsToString(r)}var o=e("../core"),s=o.util.inherit,a="presigned-expires";o.Signers.Presign=s({sign:function(e,t,n){if(e.httpRequest.headers[a]=t||3600,e.on("build",r),e.on("sign",i),e.removeListener("afterBuild",o.EventListeners.Core.SET_CONTENT_LENGTH),e.removeListener("afterBuild",o.EventListeners.Core.COMPUTE_SHA256),e.emit("beforePresign",[e]),!n){if(e.build(),e.response.error)throw e.response.error;return o.util.urlFormat(e.httpRequest.endpoint)}e.build(function(){this.response.error?n(this.response.error):n(null,o.util.urlFormat(e.httpRequest.endpoint))})}}),t.exports=o.Signers.Presign},{"../core":19}],64:[function(e,t,n){var r=e("../core"),i=r.util.inherit;r.Signers.RequestSigner=i({constructor:function(e){this.request=e},setServiceClientId:function(e){this.serviceClientId=e},getServiceClientId:function(){return this.serviceClientId}}),r.Signers.RequestSigner.getVersion=function(e){switch(e){case"v2":return r.Signers.V2;case"v3":return r.Signers.V3;case"s3v4":case"v4":return r.Signers.V4;case"s3":return r.Signers.S3;case"v3https":return r.Signers.V3Https}throw new Error("Unknown signing version "+e)},e("./v2"),e("./v3"),e("./v3https"),e("./v4"),e("./s3"),e("./presign")},{"../core":19,"./presign":63,"./s3":65,"./v2":66,"./v3":67,"./v3https":68,"./v4":69}],65:[function(e,t,n){var r=e("../core"),i=r.util.inherit;r.Signers.S3=i(r.Signers.RequestSigner,{subResources:{acl:1,accelerate:1,analytics:1,cors:1,lifecycle:1,delete:1,inventory:1,location:1,logging:1,metrics:1,notification:1,partNumber:1,policy:1,requestPayment:1,replication:1,restore:1,tagging:1,torrent:1,uploadId:1,uploads:1,versionId:1,versioning:1,versions:1,website:1},responseHeaders:{"response-content-type":1,"response-content-language":1,"response-expires":1,"response-cache-control":1,"response-content-disposition":1,"response-content-encoding":1},addAuthorization:function(e,t){this.request.headers["presigned-expires"]||(this.request.headers["X-Amz-Date"]=r.util.date.rfc822(t)),e.sessionToken&&(this.request.headers["x-amz-security-token"]=e.sessionToken);var n=this.sign(e.secretAccessKey,this.stringToSign()),i="AWS "+e.accessKeyId+":"+n;this.request.headers.Authorization=i},stringToSign:function(){var e=this.request,t=[];t.push(e.method),t.push(e.headers["Content-MD5"]||""),t.push(e.headers["Content-Type"]||""),t.push(e.headers["presigned-expires"]||"");var n=this.canonicalizedAmzHeaders();return n&&t.push(n),t.push(this.canonicalizedResource()),t.join("\n")},canonicalizedAmzHeaders:function(){var e=[];r.util.each(this.request.headers,function(t){t.match(/^x-amz-/i)&&e.push(t)}),e.sort(function(e,t){return e.toLowerCase()<t.toLowerCase()?-1:1});var t=[];return r.util.arrayEach.call(this,e,function(e){t.push(e.toLowerCase()+":"+String(this.request.headers[e]))}),t.join("\n")},canonicalizedResource:function(){var e=this.request,t=e.path.split("?"),n=t[0],i=t[1],o="";if(e.virtualHostedBucket&&(o+="/"+e.virtualHostedBucket),o+=n,i){var s=[];r.util.arrayEach.call(this,i.split("&"),function(e){var t=e.split("=")[0],n=e.split("=")[1];if(this.subResources[t]||this.responseHeaders[t]){var r={name:t};void 0!==n&&(this.subResources[t]?r.value=n:r.value=decodeURIComponent(n)),s.push(r)}}),s.sort(function(e,t){return e.name<t.name?-1:1}),s.length&&(i=[],r.util.arrayEach(s,function(e){void 0===e.value?i.push(e.name):i.push(e.name+"="+e.value)}),o+="?"+i.join("&"))}return o},sign:function(e,t){return r.util.crypto.hmac(e,t,"base64","sha1")}}),t.exports=r.Signers.S3},{"../core":19}],66:[function(e,t,n){var r=e("../core"),i=r.util.inherit;r.Signers.V2=i(r.Signers.RequestSigner,{addAuthorization:function(e,t){t||(t=r.util.date.getDate());var n=this.request;n.params.Timestamp=r.util.date.iso8601(t),n.params.SignatureVersion="2",n.params.SignatureMethod="HmacSHA256",n.params.AWSAccessKeyId=e.accessKeyId,e.sessionToken&&(n.params.SecurityToken=e.sessionToken),delete n.params.Signature,n.params.Signature=this.signature(e),n.body=r.util.queryParamsToString(n.params),n.headers["Content-Length"]=n.body.length},signature:function(e){return r.util.crypto.hmac(e.secretAccessKey,this.stringToSign(),"base64")},stringToSign:function(){var e=[];return e.push(this.request.method),e.push(this.request.endpoint.host.toLowerCase()),e.push(this.request.pathname()),e.push(r.util.queryParamsToString(this.request.params)),e.join("\n")}}),t.exports=r.Signers.V2},{"../core":19}],67:[function(e,t,n){var r=e("../core"),i=r.util.inherit;r.Signers.V3=i(r.Signers.RequestSigner,{addAuthorization:function(e,t){var n=r.util.date.rfc822(t);this.request.headers["X-Amz-Date"]=n,e.sessionToken&&(this.request.headers["x-amz-security-token"]=e.sessionToken),this.request.headers["X-Amzn-Authorization"]=this.authorization(e,n)},authorization:function(e){return"AWS3 AWSAccessKeyId="+e.accessKeyId+",Algorithm=HmacSHA256,SignedHeaders="+this.signedHeaders()+",Signature="+this.signature(e)},signedHeaders:function(){var e=[];return r.util.arrayEach(this.headersToSign(),function(t){e.push(t.toLowerCase())}),e.sort().join(";")},canonicalHeaders:function(){var e=this.request.headers,t=[];return r.util.arrayEach(this.headersToSign(),function(n){t.push(n.toLowerCase().trim()+":"+String(e[n]).trim())}),t.sort().join("\n")+"\n"},headersToSign:function(){var e=[];return r.util.each(this.request.headers,function(t){("Host"===t||"Content-Encoding"===t||t.match(/^X-Amz/i))&&e.push(t)}),e},signature:function(e){return r.util.crypto.hmac(e.secretAccessKey,this.stringToSign(),"base64")},stringToSign:function(){var e=[];return e.push(this.request.method),e.push("/"),e.push(""),e.push(this.canonicalHeaders()),e.push(this.request.body),r.util.crypto.sha256(e.join("\n"))}}),t.exports=r.Signers.V3},{"../core":19}],68:[function(e,t,n){var r=e("../core"),i=r.util.inherit;e("./v3"),r.Signers.V3Https=i(r.Signers.V3,{authorization:function(e){return"AWS3-HTTPS AWSAccessKeyId="+e.accessKeyId+",Algorithm=HmacSHA256,Signature="+this.signature(e)},stringToSign:function(){return this.request.headers["X-Amz-Date"]}}),t.exports=r.Signers.V3Https},{"../core":19,"./v3":67}],69:[function(e,t,n){var r=e("../core"),i=e("./v4_credentials"),o=r.util.inherit;r.Signers.V4=o(r.Signers.RequestSigner,{constructor:function(e,t,n){r.Signers.RequestSigner.call(this,e),this.serviceName=t,n=n||{},this.signatureCache="boolean"!=typeof n.signatureCache||n.signatureCache,this.operation=n.operation,this.signatureVersion=n.signatureVersion},algorithm:"AWS4-HMAC-SHA256",addAuthorization:function(e,t){var n=r.util.date.iso8601(t).replace(/[:\-]|\.\d{3}/g,"");this.isPresigned()?this.updateForPresigned(e,n):this.addHeaders(e,n),this.request.headers.Authorization=this.authorization(e,n)},addHeaders:function(e,t){this.request.headers["X-Amz-Date"]=t,e.sessionToken&&(this.request.headers["x-amz-security-token"]=e.sessionToken)},updateForPresigned:function(e,t){var n=this.credentialString(t),i={"X-Amz-Date":t,"X-Amz-Algorithm":this.algorithm,"X-Amz-Credential":e.accessKeyId+"/"+n,"X-Amz-Expires":this.request.headers["presigned-expires"],"X-Amz-SignedHeaders":this.signedHeaders()};e.sessionToken&&(i["X-Amz-Security-Token"]=e.sessionToken),this.request.headers["Content-Type"]&&(i["Content-Type"]=this.request.headers["Content-Type"]),this.request.headers["Content-MD5"]&&(i["Content-MD5"]=this.request.headers["Content-MD5"]),this.request.headers["Cache-Control"]&&(i["Cache-Control"]=this.request.headers["Cache-Control"]),r.util.each.call(this,this.request.headers,function(e,t){if("presigned-expires"!==e&&this.isSignableHeader(e)){var n=e.toLowerCase();0===n.indexOf("x-amz-meta-")?i[n]=t:0===n.indexOf("x-amz-")&&(i[e]=t)}});var o=this.request.path.indexOf("?")>=0?"&":"?";this.request.path+=o+r.util.queryParamsToString(i)},authorization:function(e,t){var n=[],r=this.credentialString(t);return n.push(this.algorithm+" Credential="+e.accessKeyId+"/"+r),n.push("SignedHeaders="+this.signedHeaders()),n.push("Signature="+this.signature(e,t)),n.join(", ")},signature:function(e,t){var n=i.getSigningKey(e,t.substr(0,8),this.request.region,this.serviceName,this.signatureCache);return r.util.crypto.hmac(n,this.stringToSign(t),"hex")},stringToSign:function(e){var t=[];return t.push("AWS4-HMAC-SHA256"),t.push(e),t.push(this.credentialString(e)),t.push(this.hexEncodedHash(this.canonicalString())),t.join("\n")},canonicalString:function(){var e=[],t=this.request.pathname();return"s3"!==this.serviceName&&"s3v4"!==this.signatureVersion&&(t=r.util.uriEscapePath(t)),e.push(this.request.method),e.push(t),e.push(this.request.search()),e.push(this.canonicalHeaders()+"\n"),e.push(this.signedHeaders()),e.push(this.hexEncodedBodyHash()),e.join("\n")},canonicalHeaders:function(){var e=[];r.util.each.call(this,this.request.headers,function(t,n){e.push([t,n])}),e.sort(function(e,t){return e[0].toLowerCase()<t[0].toLowerCase()?-1:1});var t=[];return r.util.arrayEach.call(this,e,function(e){var n=e[0].toLowerCase();if(this.isSignableHeader(n)){var i=e[1];if(null==i||"function"!=typeof i.toString)throw r.util.error(new Error("Header "+n+" contains invalid value"),{code:"InvalidHeader"});t.push(n+":"+this.canonicalHeaderValues(i.toString()))}}),t.join("\n")},canonicalHeaderValues:function(e){return e.replace(/\s+/g," ").replace(/^\s+|\s+$/g,"")},signedHeaders:function(){var e=[];return r.util.each.call(this,this.request.headers,function(t){t=t.toLowerCase(),this.isSignableHeader(t)&&e.push(t)}),e.sort().join(";")},credentialString:function(e){return i.createScope(e.substr(0,8),this.request.region,this.serviceName)},hexEncodedHash:function(e){return r.util.crypto.sha256(e,"hex")},hexEncodedBodyHash:function(){var e=this.request;return this.isPresigned()&&"s3"===this.serviceName&&!e.body?"UNSIGNED-PAYLOAD":e.headers["X-Amz-Content-Sha256"]?e.headers["X-Amz-Content-Sha256"]:this.hexEncodedHash(this.request.body||"")},unsignableHeaders:["authorization","content-type","content-length","user-agent","presigned-expires","expect","x-amzn-trace-id"],isSignableHeader:function(e){return 0===e.toLowerCase().indexOf("x-amz-")||this.unsignableHeaders.indexOf(e)<0},isPresigned:function(){return!!this.request.headers["presigned-expires"]}}),t.exports=r.Signers.V4},{"../core":19,"./v4_credentials":70}],70:[function(e,t,n){var r=e("../core"),i={},o=[];t.exports={createScope:function(e,t,n){return[e.substr(0,8),t,n,"aws4_request"].join("/")},getSigningKey:function(e,t,n,s,a){var c=[r.util.crypto.hmac(e.secretAccessKey,e.accessKeyId,"base64"),t,n,s].join("_");if((a=!1!==a)&&c in i)return i[c];var u=r.util.crypto.hmac("AWS4"+e.secretAccessKey,t,"buffer"),l=r.util.crypto.hmac(u,n,"buffer"),h=r.util.crypto.hmac(l,s,"buffer"),p=r.util.crypto.hmac(h,"aws4_request","buffer");return a&&(i[c]=p,o.push(c),o.length>50&&delete i[o.shift()]),p},emptyCache:function(){i={},o=[]}}},{"../core":19}],71:[function(e,t,n){function r(e,t){this.currentState=t||null,this.states=e||{}}r.prototype.runTo=function(e,t,n,r){"function"==typeof e&&(r=n,n=t,t=e,e=null);var i=this,o=i.states[i.currentState];o.fn.call(n||i,r,function(r){if(r){if(!o.fail)return t?t.call(n,r):null;i.currentState=o.fail}else{if(!o.accept)return t?t.call(n):null;i.currentState=o.accept}if(i.currentState===e)return t?t.call(n,r):null;i.runTo(e,t,n,r)})},r.prototype.addState=function(e,t,n,r){return"function"==typeof t?(r=t,t=null,n=null):"function"==typeof n&&(r=n,n=null),this.currentState||(this.currentState=e),this.states[e]={accept:t,fail:n,fn:r},this},t.exports=r},{}],72:[function(e,t,n){(function(n,r){var i,o={environment:"nodejs",engine:function(){if(o.isBrowser()&&"undefined"!=typeof navigator)return navigator.userAgent;var e=n.platform+"/"+n.version;return n.env.AWS_EXECUTION_ENV&&(e+=" exec-env/"+n.env.AWS_EXECUTION_ENV),e},userAgent:function(){var t=o.environment,n="aws-sdk-"+t+"/"+e("./core").VERSION;return"nodejs"===t&&(n+=" "+o.engine()),n},uriEscape:function(e){var t=encodeURIComponent(e);return(t=t.replace(/[^A-Za-z0-9_.~\-%]+/g,escape)).replace(/[*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})},uriEscapePath:function(e){var t=[];return o.arrayEach(e.split("/"),function(e){t.push(o.uriEscape(e))}),t.join("/")},urlParse:function(e){return o.url.parse(e)},urlFormat:function(e){return o.url.format(e)},queryStringParse:function(e){return o.querystring.parse(e)},queryParamsToString:function(e){var t=[],n=o.uriEscape,r=Object.keys(e).sort();return o.arrayEach(r,function(r){var i=e[r],s=n(r),a=s+"=";if(Array.isArray(i)){var c=[];o.arrayEach(i,function(e){c.push(n(e))}),a=s+"="+c.sort().join("&"+s+"=")}else null!=i&&(a=s+"="+n(i));t.push(a)}),t.join("&")},readFileSync:function(t){return o.isBrowser()?null:e("fs").readFileSync(t,"utf-8")},base64:{encode:function(e){if("number"==typeof e)throw o.error(new Error("Cannot base64 encode number "+e));return null==e?e:o.buffer.toBuffer(e).toString("base64")},decode:function(e){if("number"==typeof e)throw o.error(new Error("Cannot base64 decode number "+e));return null==e?e:o.buffer.toBuffer(e,"base64")}},buffer:{toBuffer:function(e,t){return"function"==typeof o.Buffer.from&&o.Buffer.from!==Uint8Array.from?o.Buffer.from(e,t):new o.Buffer(e,t)},alloc:function(e,t,n){if("number"!=typeof e)throw new Error("size passed to alloc must be a number.");if("function"==typeof o.Buffer.alloc)return o.Buffer.alloc(e,t,n);var r=new o.Buffer(e);return void 0!==t&&"function"==typeof r.fill&&r.fill(t,void 0,void 0,n),r},toStream:function(e){o.Buffer.isBuffer(e)||(e=o.buffer.toBuffer(e));var t=new o.stream.Readable,n=0;return t._read=function(r){if(n>=e.length)return t.push(null);var i=n+r;i>e.length&&(i=e.length),t.push(e.slice(n,i)),n=i},t},concat:function(e){var t,n,r=0,i=0;for(t=0;t<e.length;t++)r+=e[t].length;for(n=o.buffer.alloc(r),t=0;t<e.length;t++)e[t].copy(n,i),i+=e[t].length;return n}},string:{byteLength:function(t){if(null==t)return 0;if("string"==typeof t&&(t=o.buffer.toBuffer(t)),"number"==typeof t.byteLength)return t.byteLength;if("number"==typeof t.length)return t.length;if("number"==typeof t.size)return t.size;if("string"==typeof t.path)return e("fs").lstatSync(t.path).size;throw o.error(new Error("Cannot determine length of "+t),{object:t})},upperFirst:function(e){return e[0].toUpperCase()+e.substr(1)},lowerFirst:function(e){return e[0].toLowerCase()+e.substr(1)}},ini:{parse:function(e){var t,n={};return o.arrayEach(e.split(/\r?\n/),function(e){var r=(e=e.split(/(^|\s)[;#]/)[0]).match(/^\s*\[([^\[\]]+)\]\s*$/);if(r)t=r[1];else if(t){var i=e.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);i&&(n[t]=n[t]||{},n[t][i[1]]=i[2])}}),n}},fn:{noop:function(){},callback:function(e){if(e)throw e},makeAsync:function(e,t){return t&&t<=e.length?e:function(){var t=Array.prototype.slice.call(arguments,0);t.pop()(e.apply(null,t))}}},date:{getDate:function(){return i||(i=e("./core")),i.config.systemClockOffset?new Date((new Date).getTime()+i.config.systemClockOffset):new Date},iso8601:function(e){return void 0===e&&(e=o.date.getDate()),e.toISOString().replace(/\.\d{3}Z$/,"Z")},rfc822:function(e){return void 0===e&&(e=o.date.getDate()),e.toUTCString()},unixTimestamp:function(e){return void 0===e&&(e=o.date.getDate()),e.getTime()/1e3},from:function(e){return"number"==typeof e?new Date(1e3*e):new Date(e)},format:function(e,t){return t||(t="iso8601"),o.date[t](o.date.from(e))},parseTimestamp:function(e){if("number"==typeof e)return new Date(1e3*e);if(e.match(/^\d+$/))return new Date(1e3*e);if(e.match(/^\d{4}/))return new Date(e);if(e.match(/^\w{3},/))return new Date(e);throw o.error(new Error("unhandled timestamp format: "+e),{code:"TimestampParserError"})}},crypto:{crc32Table:[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],crc32:function(e){var t=o.crypto.crc32Table,n=-1;"string"==typeof e&&(e=o.buffer.toBuffer(e));for(var r=0;r<e.length;r++)n=n>>>8^t[255&(n^e.readUInt8(r))];return(-1^n)>>>0},hmac:function(e,t,n,r){return n||(n="binary"),"buffer"===n&&(n=void 0),r||(r="sha256"),"string"==typeof t&&(t=o.buffer.toBuffer(t)),o.crypto.lib.createHmac(r,e).update(t).digest(n)},md5:function(e,t,n){return o.crypto.hash("md5",e,t,n)},sha256:function(e,t,n){return o.crypto.hash("sha256",e,t,n)},hash:function(e,t,n,r){var i=o.crypto.createHash(e);n||(n="binary"),"buffer"===n&&(n=void 0),"string"==typeof t&&(t=o.buffer.toBuffer(t));var a=o.arraySliceFn(t),c=o.Buffer.isBuffer(t);if(o.isBrowser()&&"undefined"!=typeof ArrayBuffer&&t&&t.buffer instanceof ArrayBuffer&&(c=!0),r&&"object"==s(t)&&"function"==typeof t.on&&!c)t.on("data",function(e){i.update(e)}),t.on("error",function(e){r(e)}),t.on("end",function(){r(null,i.digest(n))});else{if(!r||!a||c||"undefined"==typeof FileReader){o.isBrowser()&&"object"==s(t)&&!c&&(t=new o.Buffer(new Uint8Array(t)));var u=i.update(t).digest(n);return r&&r(null,u),u}var l=0,h=new FileReader;h.onerror=function(){r(new Error("Failed to read data."))},h.onload=function(){var e=new o.Buffer(new Uint8Array(h.result));i.update(e),l+=e.length,h._continueReading()},h._continueReading=function(){if(l>=t.size)r(null,i.digest(n));else{var e=l+524288;e>t.size&&(e=t.size),h.readAsArrayBuffer(a.call(t,l,e))}},h._continueReading()}},toHex:function(e){for(var t=[],n=0;n<e.length;n++)t.push(("0"+e.charCodeAt(n).toString(16)).substr(-2,2));return t.join("")},createHash:function(e){return o.crypto.lib.createHash(e)}},abort:{},each:function(e,t){for(var n in e){if(Object.prototype.hasOwnProperty.call(e,n))if(t.call(this,n,e[n])===o.abort)break}},arrayEach:function(e,t){for(var n in e){if(Object.prototype.hasOwnProperty.call(e,n))if(t.call(this,e[n],parseInt(n,10))===o.abort)break}},update:function(e,t){return o.each(t,function(t,n){e[t]=n}),e},merge:function(e,t){return o.update(o.copy(e),t)},copy:function(e){if(null==e)return e;var t={};for(var n in e)t[n]=e[n];return t},isEmpty:function(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0},arraySliceFn:function(e){var t=e.slice||e.webkitSlice||e.mozSlice;return"function"==typeof t?t:null},isType:function(e,t){return"function"==typeof t&&(t=o.typeName(t)),Object.prototype.toString.call(e)==="[object "+t+"]"},typeName:function(e){if(Object.prototype.hasOwnProperty.call(e,"name"))return e.name;var t=e.toString(),n=t.match(/^\s*function (.+)\(/);return n?n[1]:t},error:function(e,t){var n=null;return"string"==typeof e.message&&""!==e.message&&("string"==typeof t||t&&t.message)&&((n=o.copy(e)).message=e.message),e.message=e.message||null,"string"==typeof t?e.message=t:"object"==s(t)&&null!==t&&(o.update(e,t),t.message&&(e.message=t.message),(t.code||t.name)&&(e.code=t.code||t.name),t.stack&&(e.stack=t.stack)),"function"==typeof Object.defineProperty&&(Object.defineProperty(e,"name",{writable:!0,enumerable:!1}),Object.defineProperty(e,"message",{enumerable:!0})),e.name=t&&t.name||e.name||e.code||"Error",e.time=new Date,n&&(e.originalError=n),e},inherit:function(e,t){var n=null;if(void 0===t)t=e,e=Object,n={};else{var r=function(){};r.prototype=e.prototype,n=new r}return t.constructor===Object&&(t.constructor=function(){if(e!==Object)return e.apply(this,arguments)}),t.constructor.prototype=n,o.update(t.constructor.prototype,t),t.constructor.__super__=e,t.constructor},mixin:function(){for(var e=arguments[0],t=1;t<arguments.length;t++)for(var n in arguments[t].prototype){var r=arguments[t].prototype[n];"constructor"!==n&&(e.prototype[n]=r)}return e},hideProperties:function(e,t){"function"==typeof Object.defineProperty&&o.arrayEach(t,function(t){Object.defineProperty(e,t,{enumerable:!1,writable:!0,configurable:!0})})},property:function(e,t,n,r,i){var o={configurable:!0,enumerable:void 0===r||r};"function"!=typeof n||i?(o.value=n,o.writable=!0):o.get=n,Object.defineProperty(e,t,o)},memoizedProperty:function(e,t,n,r){var i=null;o.property(e,t,function(){return null===i&&(i=n()),i},r)},hoistPayloadMember:function(e){var t=e.request,n=t.operation,r=t.service.api.operations[n],i=r.output;if(i.payload&&!r.hasEventOutput){var s=i.members[i.payload],a=e.data[i.payload];"structure"===s.type&&o.each(a,function(t,n){o.property(e.data,t,n,!1)})}},computeSha256:function(t,n){if(o.isNode()){var r=o.stream.Stream,i=e("fs");if("function"==typeof r&&t instanceof r){if("string"!=typeof t.path)return n(new Error("Non-file stream objects are not supported with SigV4"));var s={};"number"==typeof t.start&&(s.start=t.start),"number"==typeof t.end&&(s.end=t.end),t=i.createReadStream(t.path,s)}}o.crypto.sha256(t,"hex",function(e,t){e?n(e):n(null,t)})},isClockSkewed:function(e){if(e)return o.property(i.config,"isClockSkewed",Math.abs((new Date).getTime()-e)>=3e5,!1),i.config.isClockSkewed},applyClockOffset:function(e){e&&(i.config.systemClockOffset=e-(new Date).getTime())},extractRequestId:function(e){var t=e.httpResponse.headers["x-amz-request-id"]||e.httpResponse.headers["x-amzn-requestid"];!t&&e.data&&e.data.ResponseMetadata&&(t=e.data.ResponseMetadata.RequestId),t&&(e.requestId=t),e.error&&(e.error.requestId=t)},addPromises:function(e,t){var n=!1;void 0===t&&i&&i.config&&(t=i.config.getPromisesDependency()),void 0===t&&"undefined"!=typeof Promise&&(t=Promise),"function"!=typeof t&&(n=!0),Array.isArray(e)||(e=[e]);for(var r=0;r<e.length;r++){var o=e[r];n?o.deletePromisesFromClass&&o.deletePromisesFromClass():o.addPromisesToClass&&o.addPromisesToClass(t)}},promisifyMethod:function(e,t){return function(){var n=this,r=Array.prototype.slice.call(arguments);return new t(function(t,i){r.push(function(e,n){e?i(e):t(n)}),n[e].apply(n,r)})}},isDualstackAvailable:function(t){if(!t)return!1;var n=e("../apis/metadata.json");return"string"!=typeof t&&(t=t.serviceIdentifier),!("string"!=typeof t||!n.hasOwnProperty(t)||!n[t].dualstackAvailable)},calculateRetryDelay:function(e,t,n){t||(t={});var r=t.customBackoff||null;if("function"==typeof r)return r(e,n);var i="number"==typeof t.base?t.base:100;return Math.random()*(Math.pow(2,e)*i)},handleRequestWithRetries:function(e,t,n){t||(t={});var r=i.HttpClient.getInstance(),s=t.httpOptions||{},a=0,c=function(e){var r=t.maxRetries||0;e&&"TimeoutError"===e.code&&(e.retryable=!0);var i=o.calculateRetryDelay(a,t.retryDelayOptions,e);e&&e.retryable&&a<r&&i>=0?(a++,setTimeout(u,i+(e.retryAfter||0))):n(e)},u=function(){var t="";r.handleRequest(e,s,function(e){e.on("data",function(e){t+=e.toString()}),e.on("end",function(){var r=e.statusCode;if(r<300)n(null,t);else{var i=1e3*parseInt(e.headers["retry-after"],10)||0,s=o.error(new Error,{retryable:r>=500||429===r});i&&s.retryable&&(s.retryAfter=i),c(s)}})},c)};i.util.defer(u)},uuid:{v4:function(){return e("uuid").v4()}},convertPayloadToString:function(e){var t=e.request,n=t.operation,r=t.service.api.operations[n].output||{};r.payload&&e.data[r.payload]&&(e.data[r.payload]=e.data[r.payload].toString())},defer:function(e){"object"==s(n)&&"function"==typeof n.nextTick?n.nextTick(e):"function"==typeof r?r(e):setTimeout(e,0)},getRequestPayloadShape:function(e){var t=e.service.api.operations;if(t){var n=(t||{})[e.operation];if(n&&n.input&&n.input.payload)return n.input.members[n.input.payload]}},getProfilesFromSharedConfig:function(e,t){var r={},i={};if(n.env[o.configOptInEnv])i=e.loadFrom({isConfig:!0,filename:n.env[o.sharedConfigFileEnv]});for(var s=e.loadFrom({filename:t||n.env[o.configOptInEnv]&&n.env[o.sharedCredentialsFileEnv]}),a=0,c=Object.keys(i);a<c.length;a++)r[c[a]]=i[c[a]];for(a=0,c=Object.keys(s);a<c.length;a++)r[c[a]]=s[c[a]];return r},defaultProfile:"default",configOptInEnv:"AWS_SDK_LOAD_CONFIG",sharedCredentialsFileEnv:"AWS_SHARED_CREDENTIALS_FILE",sharedConfigFileEnv:"AWS_CONFIG_FILE",imdsDisabledEnv:"AWS_EC2_METADATA_DISABLED"};t.exports=o}).call(this,e("_process"),e("timers").setImmediate)},{"../apis/metadata.json":5,"./core":19,_process:86,fs:80,timers:94,uuid:99}],73:[function(e,t,n){function r(){}function i(e,t){for(var n=e.getElementsByTagName(t),r=0,i=n.length;r<i;r++)if(n[r].parentNode===e)return n[r]}function o(e,t){switch(t||(t={}),t.type){case"structure":return s(e,t);case"map":return function(e,t){for(var n={},r=t.key.name||"key",s=t.value.name||"value",a=t.flattened?t.name:"entry",c=e.firstElementChild;c;){if(c.nodeName===a){var u=i(c,r).textContent,l=i(c,s);n[u]=o(l,t.value)}c=c.nextElementSibling}return n}(e,t);case"list":return function(e,t){for(var n=[],r=t.flattened?t.name:t.member.name||"member",i=e.firstElementChild;i;)i.nodeName===r&&n.push(o(i,t.member)),i=i.nextElementSibling;return n}(e,t);case void 0:case null:return function(e){if(null==e)return"";if(!e.firstElementChild)return null===e.parentNode.parentNode?{}:0===e.childNodes.length?"":e.textContent;for(var t={type:"structure",members:{}},n=e.firstElementChild;n;){var r=n.nodeName;Object.prototype.hasOwnProperty.call(t.members,r)?t.members[r].type="list":t.members[r]={name:r},n=n.nextElementSibling}return s(e,t)}(e);default:return function(e,t){if(e.getAttribute){var n=e.getAttribute("encoding");"base64"===n&&(t=new c.create({type:n}))}var r=e.textContent;return""===r&&(r=null),"function"==typeof t.toType?t.toType(r):r}(e,t)}}function s(e,t){var n={};return null===e?n:(a.each(t.members,function(t,r){if(r.isXmlAttribute){if(Object.prototype.hasOwnProperty.call(e.attributes,r.name)){var s=e.attributes[r.name].value;n[t]=o({textContent:s},r)}}else{var a=r.flattened?e:i(e,r.name);a?n[t]=o(a,r):r.flattened||"list"!==r.type||(n[t]=r.defaultValue)}}),n)}var a=e("../util"),c=e("../model/shape");r.prototype.parse=function(e,t){if(""===e.replace(/^\s+/,""))return{};var n,r;try{if(window.DOMParser){try{n=(new DOMParser).parseFromString(e,"text/xml")}catch(e){throw a.error(new Error("Parse error in document"),{originalError:e,code:"XMLParserError",retryable:!0})}if(null===n.documentElement)throw a.error(new Error("Cannot parse empty document."),{code:"XMLParserError",retryable:!0});var s=n.getElementsByTagName("parsererror")[0];if(s&&(s.parentNode===n||"body"===s.parentNode.nodeName||s.parentNode.parentNode===n||"body"===s.parentNode.parentNode.nodeName)){var c=s.getElementsByTagName("div")[0]||s;throw a.error(new Error(c.textContent||"Parser error in document"),{code:"XMLParserError",retryable:!0})}}else{if(!window.ActiveXObject)throw new Error("Cannot load XML parser");if((n=new window.ActiveXObject("Microsoft.XMLDOM")).async=!1,!n.loadXML(e))throw a.error(new Error("Parse error in document"),{code:"XMLParserError",retryable:!0})}}catch(e){r=e}if(n&&n.documentElement&&!r){var u=o(n.documentElement,t),l=i(n.documentElement,"ResponseMetadata");return l&&(u.ResponseMetadata=o(l,{})),u}if(r)throw a.error(r||new Error,{code:"XMLParserError",retryable:!0});return{}},t.exports=r},{"../model/shape":44,"../util":72}],74:[function(e,t,n){function r(){}function i(e,t,n){switch(n.type){case"structure":return function(e,t,n){s.arrayEach(n.memberNames,function(r){var s=n.members[r];if("body"===s.location){var c=t[r],u=s.name;if(null!=c)if(s.isXmlAttribute)e.addAttribute(u,c);else if(s.flattened)i(e,c,s);else{var l=new a(u);e.addChildNode(l),o(l,s),i(l,c,s)}}})}(e,t,n);case"map":return function(e,t,n){var r=n.key.name||"key",o=n.value.name||"value";s.each(t,function(t,s){var c=new a(n.flattened?n.name:"entry");e.addChildNode(c);var u=new a(r),l=new a(o);c.addChildNode(u),c.addChildNode(l),i(u,t,n.key),i(l,s,n.value)})}(e,t,n);case"list":return function(e,t,n){n.flattened?s.arrayEach(t,function(t){var r=n.member.name||n.name,o=new a(r);e.addChildNode(o),i(o,t,n.member)}):s.arrayEach(t,function(t){var r=n.member.name||"member",o=new a(r);e.addChildNode(o),i(o,t,n.member)})}(e,t,n);default:return function(e,t,n){e.addChildNode(new c(n.toWireFormat(t)))}(e,t,n)}}function o(e,t,n){var r,i="xmlns";t.xmlNamespaceUri?(r=t.xmlNamespaceUri,t.xmlNamespacePrefix&&(i+=":"+t.xmlNamespacePrefix)):n&&t.api.xmlNamespaceUri&&(r=t.api.xmlNamespaceUri),r&&e.addAttribute(i,r)}var s=e("../util"),a=e("./xml-node").XmlNode,c=e("./xml-text").XmlText;r.prototype.toXML=function(e,t,n,r){var s=new a(n);return o(s,t,!0),i(s,e,t),s.children.length>0||r?s.toString():""},t.exports=r},{"../util":72,"./xml-node":77,"./xml-text":78}],75:[function(e,t,n){t.exports={escapeAttribute:function(e){return e.replace(/&/g,"&amp;").replace(/'/g,"&apos;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")}}},{}],76:[function(e,t,n){t.exports={escapeElement:function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}}},{}],77:[function(e,t,n){function r(e,t){void 0===t&&(t=[]),this.name=e,this.children=t,this.attributes={}}var i=e("./escape-attribute").escapeAttribute;r.prototype.addAttribute=function(e,t){return this.attributes[e]=t,this},r.prototype.addChildNode=function(e){return this.children.push(e),this},r.prototype.removeAttribute=function(e){return delete this.attributes[e],this},r.prototype.toString=function(){for(var e=Boolean(this.children.length),t="<"+this.name,n=this.attributes,r=0,o=Object.keys(n);r<o.length;r++){var s=o[r],a=n[s];null!=a&&(t+=" "+s+'="'+i(""+a)+'"')}return t+(e?">"+this.children.map(function(e){return e.toString()}).join("")+"</"+this.name+">":"/>")},t.exports={XmlNode:r}},{"./escape-attribute":75}],78:[function(e,t,n){function r(e){this.value=e}var i=e("./escape-element").escapeElement;r.prototype.toString=function(){return i(""+this.value)},t.exports={XmlText:r}},{"./escape-element":76}],79:[function(e,t,n){"use strict";function r(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function i(e){return s[e>>18&63]+s[e>>12&63]+s[e>>6&63]+s[63&e]}function o(e,t,n){for(var r,o=[],s=t;s<n;s+=3)r=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),o.push(i(r));return o.join("")}n.byteLength=function(e){var t=r(e),n=t[0],i=t[1];return 3*(n+i)/4-i},n.toByteArray=function(e){var t,n,i=r(e),o=i[0],s=i[1],u=new c(function(e,t,n){return 3*(t+n)/4-n}(0,o,s)),l=0,h=s>0?o-4:o;for(n=0;n<h;n+=4)t=a[e.charCodeAt(n)]<<18|a[e.charCodeAt(n+1)]<<12|a[e.charCodeAt(n+2)]<<6|a[e.charCodeAt(n+3)],u[l++]=t>>16&255,u[l++]=t>>8&255,u[l++]=255&t;return 2===s&&(t=a[e.charCodeAt(n)]<<2|a[e.charCodeAt(n+1)]>>4,u[l++]=255&t),1===s&&(t=a[e.charCodeAt(n)]<<10|a[e.charCodeAt(n+1)]<<4|a[e.charCodeAt(n+2)]>>2,u[l++]=t>>8&255,u[l++]=255&t),u},n.fromByteArray=function(e){for(var t,n=e.length,r=n%3,i=[],a=0,c=n-r;a<c;a+=16383)i.push(o(e,a,a+16383>c?c:a+16383));return 1===r?(t=e[n-1],i.push(s[t>>2]+s[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],i.push(s[t>>10]+s[t>>4&63]+s[t<<2&63]+"=")),i.join("")};for(var s=[],a=[],c="undefined"!=typeof Uint8Array?Uint8Array:Array,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",l=0,h=u.length;l<h;++l)s[l]=u[l],a[u.charCodeAt(l)]=l;a["-".charCodeAt(0)]=62,a["_".charCodeAt(0)]=63},{}],80:[function(e,t,n){},{}],81:[function(e,t,n){(function(t,r){"use strict";function i(){return r.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function o(e,t){if(i()<t)throw new RangeError("Invalid typed array length");return r.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=r.prototype:(null===e&&(e=new r(t)),e.length=t),e}function r(e,t,n){if(!(r.TYPED_ARRAY_SUPPORT||this instanceof r))return new r(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return c(this,e)}return s(this,e,t,n)}function s(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?h(e,t,n,r):"string"==typeof t?u(e,t,n):p(e,t)}function a(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function c(e,t){if(a(t),e=o(e,t<0?0:0|f(t)),!r.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function u(e,t,n){if("string"==typeof n&&""!==n||(n="utf8"),!r.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var i=0|d(t,n),s=(e=o(e,i)).write(t,n);return s!==i&&(e=e.slice(0,s)),e}function l(e,t){var n=t.length<0?0:0|f(t.length);e=o(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function h(e,t,n,i){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(i||0))throw new RangeError("'length' is out of bounds");return t=void 0===n&&void 0===i?new Uint8Array(t):void 0===i?new Uint8Array(t,n):new Uint8Array(t,n,i),r.TYPED_ARRAY_SUPPORT?(e=t).__proto__=r.prototype:e=l(e,t),e}function p(e,t){if(r.isBuffer(t)){var n=0|f(t.length);return 0===(e=o(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||function(e){return e!=e}(t.length)?o(e,0):l(e,t);if("Buffer"===t.type&&z(t.data))return l(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function f(e){if(e>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|e}function d(e,t){if(r.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var i=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return j(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return B(e).length;default:if(i)return j(e).length;t=(""+t).toLowerCase(),i=!0}}function g(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return R(this,t,n);case"utf8":case"utf-8":return T(this,t,n);case"ascii":return I(this,t,n);case"latin1":case"binary":return A(this,t,n);case"base64":return k(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function m(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function v(e,t,n,i,o){if(0===e.length)return-1;if("string"==typeof n?(i=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=r.from(t,i)),r.isBuffer(t))return 0===t.length?-1:y(e,t,n,i,o);if("number"==typeof t)return t&=255,r.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,i,o);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,r,i){function o(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}var s,a=1,c=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,c/=2,u/=2,n/=2}if(i){var l=-1;for(s=n;s<c;s++)if(o(e,s)===o(t,-1===l?0:s-l)){if(-1===l&&(l=s),s-l+1===u)return l*a}else-1!==l&&(s-=s-l),l=-1}else for(n+u>c&&(n=c-u),s=n;s>=0;s--){for(var h=!0,p=0;p<u;p++)if(o(e,s+p)!==o(t,p)){h=!1;break}if(h)return s}return-1}function b(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[n+s]=a}return s}function w(e,t,n,r){return F(j(t,e.length-n),e,n,r)}function _(e,t,n,r){return F(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function S(e,t,n,r){return _(e,t,n,r)}function C(e,t,n,r){return F(B(t),e,n,r)}function E(e,t,n,r){return F(function(e,t){for(var n,r,i,o=[],s=0;s<e.length&&!((t-=2)<0);++s)n=e.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(t,e.length-n),e,n,r)}function k(e,t,n){return 0===t&&n===e.length?H.fromByteArray(e):H.fromByteArray(e.slice(t,n))}function T(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var o,s,a,c,u=e[i],l=null,h=u>239?4:u>223?3:u>191?2:1;if(i+h<=n)switch(h){case 1:u<128&&(l=u);break;case 2:128==(192&(o=e[i+1]))&&(c=(31&u)<<6|63&o)>127&&(l=c);break;case 3:o=e[i+1],s=e[i+2],128==(192&o)&&128==(192&s)&&(c=(15&u)<<12|(63&o)<<6|63&s)>2047&&(c<55296||c>57343)&&(l=c);break;case 4:o=e[i+1],s=e[i+2],a=e[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(c=(15&u)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&c<1114112&&(l=c)}null===l?(l=65533,h=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),i+=h}return function(e){var t=e.length;if(t<=W)return String.fromCharCode.apply(String,e);for(var n="",r=0;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=W));return n}(r)}function I(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function A(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function R(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=t;o<n;++o)i+=U(e[o]);return i}function x(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function P(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function O(e,t,n,i,o,s){if(!r.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<s)throw new RangeError('"value" argument is out of bounds');if(n+i>e.length)throw new RangeError("Index out of range")}function N(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-n,2);i<o;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function L(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-n,4);i<o;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function M(e,t,n,r,i,o){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function D(e,t,n,r,i){return i||M(e,0,n,4),V.write(e,t,n,r,23,4),n+4}function q(e,t,n,r,i){return i||M(e,0,n,8),V.write(e,t,n,r,52,8),n+8}function U(e){return e<16?"0"+e.toString(16):e.toString(16)}function j(e,t){t=t||1/0;for(var n,r=e.length,i=null,o=[],s=0;s<r;++s){if((n=e.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function B(e){return H.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(G,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function F(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}var H=e("base64-js"),V=e("ieee754"),z=e("isarray");n.Buffer=r,n.SlowBuffer=function(e){return+e!=e&&(e=0),r.alloc(+e)},n.INSPECT_MAX_BYTES=50,r.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),n.kMaxLength=i(),r.poolSize=8192,r._augment=function(e){return e.__proto__=r.prototype,e},r.from=function(e,t,n){return s(null,e,t,n)},r.TYPED_ARRAY_SUPPORT&&(r.prototype.__proto__=Uint8Array.prototype,r.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&r[Symbol.species]===r&&Object.defineProperty(r,Symbol.species,{value:null,configurable:!0})),r.alloc=function(e,t,n){return function(e,t,n,r){return a(t),t<=0?o(e,t):void 0!==n?"string"==typeof r?o(e,t).fill(n,r):o(e,t).fill(n):o(e,t)}(null,e,t,n)},r.allocUnsafe=function(e){return c(null,e)},r.allocUnsafeSlow=function(e){return c(null,e)},r.isBuffer=function(e){return!(null==e||!e._isBuffer)},r.compare=function(e,t){if(!r.isBuffer(e)||!r.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,i=t.length,o=0,s=Math.min(n,i);o<s;++o)if(e[o]!==t[o]){n=e[o],i=t[o];break}return n<i?-1:i<n?1:0},r.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},r.concat=function(e,t){if(!z(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return r.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var i=r.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var s=e[n];if(!r.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(i,o),o+=s.length}return i},r.byteLength=d,r.prototype._isBuffer=!0,r.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)m(this,t,t+1);return this},r.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},r.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},r.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?T(this,0,e):g.apply(this,arguments)},r.prototype.equals=function(e){if(!r.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===r.compare(this,e)},r.prototype.inspect=function(){var e="",t=n.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},r.prototype.compare=function(e,t,n,i,o){if(!r.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===i&&(i=0),void 0===o&&(o=this.length),t<0||n>e.length||i<0||o>this.length)throw new RangeError("out of range index");if(i>=o&&t>=n)return 0;if(i>=o)return-1;if(t>=n)return 1;if(this===e)return 0;for(var s=(o>>>=0)-(i>>>=0),a=(n>>>=0)-(t>>>=0),c=Math.min(s,a),u=this.slice(i,o),l=e.slice(t,n),h=0;h<c;++h)if(u[h]!==l[h]){s=u[h],a=l[h];break}return s<a?-1:a<s?1:0},r.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},r.prototype.indexOf=function(e,t,n){return v(this,e,t,n,!0)},r.prototype.lastIndexOf=function(e,t,n){return v(this,e,t,n,!1)},r.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return b(this,e,t,n);case"utf8":case"utf-8":return w(this,e,t,n);case"ascii":return _(this,e,t,n);case"latin1":case"binary":return S(this,e,t,n);case"base64":return C(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},r.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var W=4096;r.prototype.slice=function(e,t){var n,i=this.length;if((e=~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),(t=void 0===t?i:~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),t<e&&(t=e),r.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=r.prototype;else{var o=t-e;n=new r(o,void 0);for(var s=0;s<o;++s)n[s]=this[s+e]}return n},r.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||P(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r},r.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||P(e,t,this.length);for(var r=this[e+--t],i=1;t>0&&(i*=256);)r+=this[e+--t]*i;return r},r.prototype.readUInt8=function(e,t){return t||P(e,1,this.length),this[e]},r.prototype.readUInt16LE=function(e,t){return t||P(e,2,this.length),this[e]|this[e+1]<<8},r.prototype.readUInt16BE=function(e,t){return t||P(e,2,this.length),this[e]<<8|this[e+1]},r.prototype.readUInt32LE=function(e,t){return t||P(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},r.prototype.readUInt32BE=function(e,t){return t||P(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},r.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||P(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*t)),r},r.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||P(e,t,this.length);for(var r=t,i=1,o=this[e+--r];r>0&&(i*=256);)o+=this[e+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},r.prototype.readInt8=function(e,t){return t||P(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},r.prototype.readInt16LE=function(e,t){t||P(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},r.prototype.readInt16BE=function(e,t){t||P(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},r.prototype.readInt32LE=function(e,t){return t||P(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},r.prototype.readInt32BE=function(e,t){return t||P(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},r.prototype.readFloatLE=function(e,t){return t||P(e,4,this.length),V.read(this,e,!0,23,4)},r.prototype.readFloatBE=function(e,t){return t||P(e,4,this.length),V.read(this,e,!1,23,4)},r.prototype.readDoubleLE=function(e,t){return t||P(e,8,this.length),V.read(this,e,!0,52,8)},r.prototype.readDoubleBE=function(e,t){return t||P(e,8,this.length),V.read(this,e,!1,52,8)},r.prototype.writeUIntLE=function(e,t,n,r){e=+e,t|=0,n|=0,r||O(this,e,t,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[t]=255&e;++o<n&&(i*=256);)this[t+o]=e/i&255;return t+n},r.prototype.writeUIntBE=function(e,t,n,r){e=+e,t|=0,n|=0,r||O(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+n},r.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,1,255,0),r.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},r.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,2,65535,0),r.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},r.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,2,65535,0),r.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},r.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,4,4294967295,0),r.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):L(this,e,t,!0),t+4},r.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,4,4294967295,0),r.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):L(this,e,t,!1),t+4},r.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);O(this,e,t,n,i-1,-i)}var o=0,s=1,a=0;for(this[t]=255&e;++o<n&&(s*=256);)e<0&&0===a&&0!==this[t+o-1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},r.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);O(this,e,t,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[t+o]=255&e;--o>=0&&(s*=256);)e<0&&0===a&&0!==this[t+o+1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},r.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,1,127,-128),r.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},r.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,2,32767,-32768),r.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},r.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,2,32767,-32768),r.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},r.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,4,2147483647,-2147483648),r.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):L(this,e,t,!0),t+4},r.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),r.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):L(this,e,t,!1),t+4},r.prototype.writeFloatLE=function(e,t,n){return D(this,e,t,!0,n)},r.prototype.writeFloatBE=function(e,t,n){return D(this,e,t,!1,n)},r.prototype.writeDoubleLE=function(e,t,n){return q(this,e,t,!0,n)},r.prototype.writeDoubleBE=function(e,t,n){return q(this,e,t,!1,n)},r.prototype.copy=function(e,t,n,i){if(n||(n=0),i||0===i||(i=this.length),t>=e.length&&(t=e.length),t||(t=0),i>0&&i<n&&(i=n),i===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-t<i-n&&(i=e.length-t+n);var o,s=i-n;if(this===e&&n<t&&t<i)for(o=s-1;o>=0;--o)e[o+t]=this[o+n];else if(s<1e3||!r.TYPED_ARRAY_SUPPORT)for(o=0;o<s;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+s),t);return s},r.prototype.fill=function(e,t,n,i){if("string"==typeof e){if("string"==typeof t?(i=t,t=0,n=this.length):"string"==typeof n&&(i=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!r.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var s;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=t;s<n;++s)this[s]=e;else{var a=r.isBuffer(e)?e:j(new r(e,i).toString()),c=a.length;for(s=0;s<n-t;++s)this[s+t]=a[s%c]}return this};var G=/[^+\/0-9A-Za-z-_]/g}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer)},{"base64-js":79,buffer:81,ieee754:83,isarray:84}],82:[function(e,t,n){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function i(e){return"function"==typeof e}function o(e){return"object"==s(e)&&null!==e}function a(e){return void 0===e}t.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(e){if(!function(e){return"number"==typeof e}(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},r.prototype.emit=function(e){var t,n,r,s,c,u;if(this._events||(this._events={}),"error"===e&&(!this._events.error||o(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var l=new Error('Uncaught, unspecified "error" event. ('+t+")");throw l.context=t,l}if(a(n=this._events[e]))return!1;if(i(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),n.apply(this,s)}else if(o(n))for(s=Array.prototype.slice.call(arguments,1),r=(u=n.slice()).length,c=0;c<r;c++)u[c].apply(this,s);return!0},r.prototype.addListener=function(e,t){var n;if(!i(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,i(t.listener)?t.listener:t),this._events[e]?o(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,o(this._events[e])&&!this._events[e].warned&&(n=a(this._maxListeners)?r.defaultMaxListeners:this._maxListeners)&&n>0&&this._events[e].length>n&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(e,t){function n(){this.removeListener(e,n),r||(r=!0,t.apply(this,arguments))}if(!i(t))throw TypeError("listener must be a function");var r=!1;return n.listener=t,this.on(e,n),this},r.prototype.removeListener=function(e,t){var n,r,s,a;if(!i(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(s=(n=this._events[e]).length,r=-1,n===t||i(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(o(n)){for(a=s;a-- >0;)if(n[a]===t||n[a].listener&&n[a].listener===t){r=a;break}if(r<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(r,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},r.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(i(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},r.prototype.listeners=function(e){return this._events&&this._events[e]?i(this._events[e])?[this._events[e]]:this._events[e].slice():[]},r.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(i(t))return 1;if(t)return t.length}return 0},r.listenerCount=function(e,t){return e.listenerCount(t)}},{}],83:[function(e,t,n){n.read=function(e,t,n,r,i){var o,s,a=8*i-r-1,c=(1<<a)-1,u=c>>1,l=-7,h=n?i-1:0,p=n?-1:1,f=e[t+h];for(h+=p,o=f&(1<<-l)-1,f>>=-l,l+=a;l>0;o=256*o+e[t+h],h+=p,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=r;l>0;s=256*s+e[t+h],h+=p,l-=8);if(0===o)o=1-u;else{if(o===c)return s?NaN:1/0*(f?-1:1);s+=Math.pow(2,r),o-=u}return(f?-1:1)*s*Math.pow(2,o-r)},n.write=function(e,t,n,r,i,o){var s,a,c,u=8*o-i-1,l=(1<<u)-1,h=l>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,f=r?0:o-1,d=r?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-s))<1&&(s--,c*=2),(t+=s+h>=1?p/c:p*Math.pow(2,1-h))*c>=2&&(s++,c/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(t*c-1)*Math.pow(2,i),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;e[n+f]=255&a,f+=d,a/=256,i-=8);for(s=s<<i|a,u+=i;u>0;e[n+f]=255&s,f+=d,s/=256,u-=8);e[n+f-d]|=128*g}},{}],84:[function(e,t,n){var r={}.toString;t.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},{}],85:[function(e,t,n){!function(e){"use strict";function t(e){return null!==e&&"[object Array]"===Object.prototype.toString.call(e)}function n(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)}function r(e,i){if(e===i)return!0;if(Object.prototype.toString.call(e)!==Object.prototype.toString.call(i))return!1;if(!0===t(e)){if(e.length!==i.length)return!1;for(var o=0;o<e.length;o++)if(!1===r(e[o],i[o]))return!1;return!0}if(!0===n(e)){var s={};for(var a in e)if(hasOwnProperty.call(e,a)){if(!1===r(e[a],i[a]))return!1;s[a]=!0}for(var c in i)if(hasOwnProperty.call(i,c)&&!0!==s[c])return!1;return!0}return!1}function i(e){if(""===e||!1===e||null===e)return!0;if(t(e)&&0===e.length)return!0;if(n(e)){for(var r in e)if(e.hasOwnProperty(r))return!1;return!0}return!1}function o(e){return e>="a"&&e<="z"||e>="A"&&e<="Z"||"_"===e}function s(e){return e>="0"&&e<="9"||"-"===e}function a(e){return e>="a"&&e<="z"||e>="A"&&e<="Z"||e>="0"&&e<="9"||"_"===e}function c(){}function u(){}function l(e){this.runtime=e}function h(e){this._interpreter=e,this.functionTable={abs:{_func:this._functionAbs,_signature:[{types:[f]}]},avg:{_func:this._functionAvg,_signature:[{types:[b]}]},ceil:{_func:this._functionCeil,_signature:[{types:[f]}]},contains:{_func:this._functionContains,_signature:[{types:[g,m]},{types:[d]}]},ends_with:{_func:this._functionEndsWith,_signature:[{types:[g]},{types:[g]}]},floor:{_func:this._functionFloor,_signature:[{types:[f]}]},length:{_func:this._functionLength,_signature:[{types:[g,m,v]}]},map:{_func:this._functionMap,_signature:[{types:[y]},{types:[m]}]},max:{_func:this._functionMax,_signature:[{types:[b,w]}]},merge:{_func:this._functionMerge,_signature:[{types:[v],variadic:!0}]},max_by:{_func:this._functionMaxBy,_signature:[{types:[m]},{types:[y]}]},sum:{_func:this._functionSum,_signature:[{types:[b]}]},starts_with:{_func:this._functionStartsWith,_signature:[{types:[g]},{types:[g]}]},min:{_func:this._functionMin,_signature:[{types:[b,w]}]},min_by:{_func:this._functionMinBy,_signature:[{types:[m]},{types:[y]}]},type:{_func:this._functionType,_signature:[{types:[d]}]},keys:{_func:this._functionKeys,_signature:[{types:[v]}]},values:{_func:this._functionValues,_signature:[{types:[v]}]},sort:{_func:this._functionSort,_signature:[{types:[w,b]}]},sort_by:{_func:this._functionSortBy,_signature:[{types:[m]},{types:[y]}]},join:{_func:this._functionJoin,_signature:[{types:[g]},{types:[w]}]},reverse:{_func:this._functionReverse,_signature:[{types:[g,m]}]},to_array:{_func:this._functionToArray,_signature:[{types:[d]}]},to_string:{_func:this._functionToString,_signature:[{types:[d]}]},to_number:{_func:this._functionToNumber,_signature:[{types:[d]}]},not_null:{_func:this._functionNotNull,_signature:[{types:[d],variadic:!0}]}}}var p;p="function"==typeof String.prototype.trimLeft?function(e){return e.trimLeft()}:function(e){return e.match(/^\s*(.*)/)[1]};var f=0,d=1,g=2,m=3,v=4,y=6,b=8,w=9,_={".":"Dot","*":"Star",",":"Comma",":":"Colon","{":"Lbrace","}":"Rbrace","]":"Rbracket","(":"Lparen",")":"Rparen","@":"Current"},S={"<":!0,">":!0,"=":!0,"!":!0},C={" ":!0,"\t":!0,"\n":!0};c.prototype={tokenize:function(e){var t,n,r,i=[];for(this._current=0;this._current<e.length;)if(o(e[this._current]))t=this._current,n=this._consumeUnquotedIdentifier(e),i.push({type:"UnquotedIdentifier",value:n,start:t});else if(void 0!==_[e[this._current]])i.push({type:_[e[this._current]],value:e[this._current],start:this._current}),this._current++;else if(s(e[this._current]))r=this._consumeNumber(e),i.push(r);else if("["===e[this._current])r=this._consumeLBracket(e),i.push(r);else if('"'===e[this._current])t=this._current,n=this._consumeQuotedIdentifier(e),i.push({type:"QuotedIdentifier",value:n,start:t});else if("'"===e[this._current])t=this._current,n=this._consumeRawStringLiteral(e),i.push({type:"Literal",value:n,start:t});else if("`"===e[this._current]){t=this._current;var a=this._consumeLiteral(e);i.push({type:"Literal",value:a,start:t})}else if(void 0!==S[e[this._current]])i.push(this._consumeOperator(e));else if(void 0!==C[e[this._current]])this._current++;else if("&"===e[this._current])t=this._current,this._current++,"&"===e[this._current]?(this._current++,i.push({type:"And",value:"&&",start:t})):i.push({type:"Expref",value:"&",start:t});else{if("|"!==e[this._current]){var c=new Error("Unknown character:"+e[this._current]);throw c.name="LexerError",c}t=this._current,this._current++,"|"===e[this._current]?(this._current++,i.push({type:"Or",value:"||",start:t})):i.push({type:"Pipe",value:"|",start:t})}return i},_consumeUnquotedIdentifier:function(e){var t=this._current;for(this._current++;this._current<e.length&&a(e[this._current]);)this._current++;return e.slice(t,this._current)},_consumeQuotedIdentifier:function(e){var t=this._current;this._current++;for(var n=e.length;'"'!==e[this._current]&&this._current<n;){var r=this._current;"\\"!==e[r]||"\\"!==e[r+1]&&'"'!==e[r+1]?r++:r+=2,this._current=r}return this._current++,JSON.parse(e.slice(t,this._current))},_consumeRawStringLiteral:function(e){var t=this._current;this._current++;for(var n=e.length;"'"!==e[this._current]&&this._current<n;){var r=this._current;"\\"!==e[r]||"\\"!==e[r+1]&&"'"!==e[r+1]?r++:r+=2,this._current=r}return this._current++,e.slice(t+1,this._current-1).replace("\\'","'")},_consumeNumber:function(e){var t=this._current;this._current++;for(var n=e.length;s(e[this._current])&&this._current<n;)this._current++;return{type:"Number",value:parseInt(e.slice(t,this._current)),start:t}},_consumeLBracket:function(e){var t=this._current;return this._current++,"?"===e[this._current]?(this._current++,{type:"Filter",value:"[?",start:t}):"]"===e[this._current]?(this._current++,{type:"Flatten",value:"[]",start:t}):{type:"Lbracket",value:"[",start:t}},_consumeOperator:function(e){var t=this._current,n=e[t];return this._current++,"!"===n?"="===e[this._current]?(this._current++,{type:"NE",value:"!=",start:t}):{type:"Not",value:"!",start:t}:"<"===n?"="===e[this._current]?(this._current++,{type:"LTE",value:"<=",start:t}):{type:"LT",value:"<",start:t}:">"===n?"="===e[this._current]?(this._current++,{type:"GTE",value:">=",start:t}):{type:"GT",value:">",start:t}:"="===n&&"="===e[this._current]?(this._current++,{type:"EQ",value:"==",start:t}):void 0},_consumeLiteral:function(e){this._current++;for(var t,n=this._current,r=e.length;"`"!==e[this._current]&&this._current<r;){var i=this._current;"\\"!==e[i]||"\\"!==e[i+1]&&"`"!==e[i+1]?i++:i+=2,this._current=i}var o=p(e.slice(n,this._current));return o=o.replace("\\`","`"),t=this._looksLikeJSON(o)?JSON.parse(o):JSON.parse('"'+o+'"'),this._current++,t},_looksLikeJSON:function(e){if(""===e)return!1;if('[{"'.indexOf(e[0])>=0)return!0;if(["true","false","null"].indexOf(e)>=0)return!0;if(!("-0123456789".indexOf(e[0])>=0))return!1;try{return JSON.parse(e),!0}catch(e){return!1}}};var E={EOF:0,UnquotedIdentifier:0,QuotedIdentifier:0,Rbracket:0,Rparen:0,Comma:0,Rbrace:0,Number:0,Current:0,Expref:0,Pipe:1,Or:2,And:3,EQ:5,GT:5,LT:5,GTE:5,LTE:5,NE:5,Flatten:9,Star:20,Filter:21,Dot:40,Not:45,Lbrace:50,Lbracket:55,Lparen:60};u.prototype={parse:function(e){this._loadTokens(e),this.index=0;var t=this.expression(0);if("EOF"!==this._lookahead(0)){var n=this._lookaheadToken(0),r=new Error("Unexpected token type: "+n.type+", value: "+n.value);throw r.name="ParserError",r}return t},_loadTokens:function(e){var t=(new c).tokenize(e);t.push({type:"EOF",value:"",start:e.length}),this.tokens=t},expression:function(e){var t=this._lookaheadToken(0);this._advance();for(var n=this.nud(t),r=this._lookahead(0);e<E[r];)this._advance(),n=this.led(r,n),r=this._lookahead(0);return n},_lookahead:function(e){return this.tokens[this.index+e].type},_lookaheadToken:function(e){return this.tokens[this.index+e]},_advance:function(){this.index++},nud:function(e){var t,n;switch(e.type){case"Literal":return{type:"Literal",value:e.value};case"UnquotedIdentifier":return{type:"Field",name:e.value};case"QuotedIdentifier":var r={type:"Field",name:e.value};if("Lparen"===this._lookahead(0))throw new Error("Quoted identifier not allowed for function names.");return r;case"Not":return{type:"NotExpression",children:[t=this.expression(E.Not)]};case"Star":return t=null,{type:"ValueProjection",children:[{type:"Identity"},t="Rbracket"===this._lookahead(0)?{type:"Identity"}:this._parseProjectionRHS(E.Star)]};case"Filter":return this.led(e.type,{type:"Identity"});case"Lbrace":return this._parseMultiselectHash();case"Flatten":return{type:"Projection",children:[{type:"Flatten",children:[{type:"Identity"}]},t=this._parseProjectionRHS(E.Flatten)]};case"Lbracket":return"Number"===this._lookahead(0)||"Colon"===this._lookahead(0)?(t=this._parseIndexExpression(),this._projectIfSlice({type:"Identity"},t)):"Star"===this._lookahead(0)&&"Rbracket"===this._lookahead(1)?(this._advance(),this._advance(),{type:"Projection",children:[{type:"Identity"},t=this._parseProjectionRHS(E.Star)]}):this._parseMultiselectList();case"Current":return{type:"Current"};case"Expref":return{type:"ExpressionReference",children:[n=this.expression(E.Expref)]};case"Lparen":for(var i=[];"Rparen"!==this._lookahead(0);)"Current"===this._lookahead(0)?(n={type:"Current"},this._advance()):n=this.expression(0),i.push(n);return this._match("Rparen"),i[0];default:this._errorToken(e)}},led:function(e,t){var n;switch(e){case"Dot":var r=E.Dot;return"Star"!==this._lookahead(0)?{type:"Subexpression",children:[t,n=this._parseDotRHS(r)]}:(this._advance(),{type:"ValueProjection",children:[t,n=this._parseProjectionRHS(r)]});case"Pipe":return{type:"Pipe",children:[t,n=this.expression(E.Pipe)]};case"Or":return{type:"OrExpression",children:[t,n=this.expression(E.Or)]};case"And":return{type:"AndExpression",children:[t,n=this.expression(E.And)]};case"Lparen":for(var i,o=t.name,s=[];"Rparen"!==this._lookahead(0);)"Current"===this._lookahead(0)?(i={type:"Current"},this._advance()):i=this.expression(0),"Comma"===this._lookahead(0)&&this._match("Comma"),s.push(i);return this._match("Rparen"),{type:"Function",name:o,children:s};case"Filter":var a=this.expression(0);return this._match("Rbracket"),{type:"FilterProjection",children:[t,n="Flatten"===this._lookahead(0)?{type:"Identity"}:this._parseProjectionRHS(E.Filter),a]};case"Flatten":return{type:"Projection",children:[{type:"Flatten",children:[t]},this._parseProjectionRHS(E.Flatten)]};case"EQ":case"NE":case"GT":case"GTE":case"LT":case"LTE":return this._parseComparator(t,e);case"Lbracket":var c=this._lookaheadToken(0);return"Number"===c.type||"Colon"===c.type?(n=this._parseIndexExpression(),this._projectIfSlice(t,n)):(this._match("Star"),this._match("Rbracket"),{type:"Projection",children:[t,n=this._parseProjectionRHS(E.Star)]});default:this._errorToken(this._lookaheadToken(0))}},_match:function(e){if(this._lookahead(0)!==e){var t=this._lookaheadToken(0),n=new Error("Expected "+e+", got: "+t.type);throw n.name="ParserError",n}this._advance()},_errorToken:function(e){var t=new Error("Invalid token ("+e.type+'): "'+e.value+'"');throw t.name="ParserError",t},_parseIndexExpression:function(){if("Colon"===this._lookahead(0)||"Colon"===this._lookahead(1))return this._parseSliceExpression();var e={type:"Index",value:this._lookaheadToken(0).value};return this._advance(),this._match("Rbracket"),e},_projectIfSlice:function(e,t){var n={type:"IndexExpression",children:[e,t]};return"Slice"===t.type?{type:"Projection",children:[n,this._parseProjectionRHS(E.Star)]}:n},_parseSliceExpression:function(){for(var e=[null,null,null],t=0,n=this._lookahead(0);"Rbracket"!==n&&t<3;){if("Colon"===n)t++,this._advance();else{if("Number"!==n){var r=this._lookahead(0),i=new Error("Syntax error, unexpected token: "+r.value+"("+r.type+")");throw i.name="Parsererror",i}e[t]=this._lookaheadToken(0).value,this._advance()}n=this._lookahead(0)}return this._match("Rbracket"),{type:"Slice",children:e}},_parseComparator:function(e,t){return{type:"Comparator",name:t,children:[e,this.expression(E[t])]}},_parseDotRHS:function(e){var t=this._lookahead(0);return["UnquotedIdentifier","QuotedIdentifier","Star"].indexOf(t)>=0?this.expression(e):"Lbracket"===t?(this._match("Lbracket"),this._parseMultiselectList()):"Lbrace"===t?(this._match("Lbrace"),this._parseMultiselectHash()):void 0},_parseProjectionRHS:function(e){var t;if(E[this._lookahead(0)]<10)t={type:"Identity"};else if("Lbracket"===this._lookahead(0))t=this.expression(e);else if("Filter"===this._lookahead(0))t=this.expression(e);else{if("Dot"!==this._lookahead(0)){var n=this._lookaheadToken(0),r=new Error("Sytanx error, unexpected token: "+n.value+"("+n.type+")");throw r.name="ParserError",r}this._match("Dot"),t=this._parseDotRHS(e)}return t},_parseMultiselectList:function(){for(var e=[];"Rbracket"!==this._lookahead(0);){var t=this.expression(0);if(e.push(t),"Comma"===this._lookahead(0)&&(this._match("Comma"),"Rbracket"===this._lookahead(0)))throw new Error("Unexpected token Rbracket")}return this._match("Rbracket"),{type:"MultiSelectList",children:e}},_parseMultiselectHash:function(){for(var e,t,n,r=[],i=["UnquotedIdentifier","QuotedIdentifier"];;){if(e=this._lookaheadToken(0),i.indexOf(e.type)<0)throw new Error("Expecting an identifier token, got: "+e.type);if(t=e.value,this._advance(),this._match("Colon"),n={type:"KeyValuePair",name:t,value:this.expression(0)},r.push(n),"Comma"===this._lookahead(0))this._match("Comma");else if("Rbrace"===this._lookahead(0)){this._match("Rbrace");break}}return{type:"MultiSelectHash",children:r}}},l.prototype={search:function(e,t){return this.visit(e,t)},visit:function(e,o){var s,a,c,u,l,h,p,f,d;switch(e.type){case"Field":return null===o?null:n(o)?void 0===(h=o[e.name])?null:h:null;case"Subexpression":for(c=this.visit(e.children[0],o),d=1;d<e.children.length;d++)if(null===(c=this.visit(e.children[1],c)))return null;return c;case"IndexExpression":return p=this.visit(e.children[0],o),this.visit(e.children[1],p);case"Index":if(!t(o))return null;var g=e.value;return g<0&&(g=o.length+g),void 0===(c=o[g])&&(c=null),c;case"Slice":if(!t(o))return null;var m=e.children.slice(0),v=this.computeSliceParams(o.length,m),y=v[0],b=v[1],w=v[2];if(c=[],w>0)for(d=y;d<b;d+=w)c.push(o[d]);else for(d=y;d>b;d+=w)c.push(o[d]);return c;case"Projection":var _=this.visit(e.children[0],o);if(!t(_))return null;for(f=[],d=0;d<_.length;d++)null!==(a=this.visit(e.children[1],_[d]))&&f.push(a);return f;case"ValueProjection":if(!n(_=this.visit(e.children[0],o)))return null;f=[];var S=function(e){for(var t=Object.keys(e),n=[],r=0;r<t.length;r++)n.push(e[t[r]]);return n}(_);for(d=0;d<S.length;d++)null!==(a=this.visit(e.children[1],S[d]))&&f.push(a);return f;case"FilterProjection":if(!t(_=this.visit(e.children[0],o)))return null;var C=[],E=[];for(d=0;d<_.length;d++)i(s=this.visit(e.children[2],_[d]))||C.push(_[d]);for(var k=0;k<C.length;k++)null!==(a=this.visit(e.children[1],C[k]))&&E.push(a);return E;case"Comparator":switch(u=this.visit(e.children[0],o),l=this.visit(e.children[1],o),e.name){case"EQ":c=r(u,l);break;case"NE":c=!r(u,l);break;case"GT":c=u>l;break;case"GTE":c=u>=l;break;case"LT":c=u<l;break;case"LTE":c=u<=l;break;default:throw new Error("Unknown comparator: "+e.name)}return c;case"Flatten":var T=this.visit(e.children[0],o);if(!t(T))return null;var I=[];for(d=0;d<T.length;d++)t(a=T[d])?I.push.apply(I,a):I.push(a);return I;case"Identity":return o;case"MultiSelectList":if(null===o)return null;for(f=[],d=0;d<e.children.length;d++)f.push(this.visit(e.children[d],o));return f;case"MultiSelectHash":if(null===o)return null;var A;for(f={},d=0;d<e.children.length;d++)f[(A=e.children[d]).name]=this.visit(A.value,o);return f;case"OrExpression":return i(s=this.visit(e.children[0],o))&&(s=this.visit(e.children[1],o)),s;case"AndExpression":return!0===i(u=this.visit(e.children[0],o))?u:this.visit(e.children[1],o);case"NotExpression":return i(u=this.visit(e.children[0],o));case"Literal":return e.value;case"Pipe":return p=this.visit(e.children[0],o),this.visit(e.children[1],p);case"Current":return o;case"Function":var R=[];for(d=0;d<e.children.length;d++)R.push(this.visit(e.children[d],o));return this.runtime.callFunction(e.name,R);case"ExpressionReference":var x=e.children[0];return x.jmespathType="Expref",x;default:throw new Error("Unknown node type: "+e.type)}},computeSliceParams:function(e,t){var n=t[0],r=t[1],i=t[2],o=[null,null,null];if(null===i)i=1;else if(0===i){var s=new Error("Invalid slice, step cannot be 0");throw s.name="RuntimeError",s}var a=i<0;return n=null===n?a?e-1:0:this.capSliceRange(e,n,i),r=null===r?a?-1:e:this.capSliceRange(e,r,i),o[0]=n,o[1]=r,o[2]=i,o},capSliceRange:function(e,t,n){return t<0?(t+=e)<0&&(t=n<0?-1:0):t>=e&&(t=n<0?e-1:e),t}},h.prototype={callFunction:function(e,t){var n=this.functionTable[e];if(void 0===n)throw new Error("Unknown function: "+e+"()");return this._validateArgs(e,t,n._signature),n._func.call(this,t)},_validateArgs:function(e,t,n){var r;if(n[n.length-1].variadic){if(t.length<n.length)throw r=1===n.length?" argument":" arguments",new Error("ArgumentError: "+e+"() takes at least"+n.length+r+" but received "+t.length)}else if(t.length!==n.length)throw r=1===n.length?" argument":" arguments",new Error("ArgumentError: "+e+"() takes "+n.length+r+" but received "+t.length);for(var i,o,s,a=0;a<n.length;a++){s=!1,i=n[a].types,o=this._getTypeName(t[a]);for(var c=0;c<i.length;c++)if(this._typeMatches(o,i[c],t[a])){s=!0;break}if(!s)throw new Error("TypeError: "+e+"() expected argument "+(a+1)+" to be type "+i+" but received type "+o+" instead.")}},_typeMatches:function(e,t,n){if(t===d)return!0;if(t!==w&&t!==b&&t!==m)return e===t;if(t===m)return e===m;if(e===m){var r;t===b?r=f:t===w&&(r=g);for(var i=0;i<n.length;i++)if(!this._typeMatches(this._getTypeName(n[i]),r,n[i]))return!1;return!0}},_getTypeName:function(e){switch(Object.prototype.toString.call(e)){case"[object String]":return g;case"[object Number]":return f;case"[object Array]":return m;case"[object Boolean]":return 5;case"[object Null]":return 7;case"[object Object]":return"Expref"===e.jmespathType?y:v}},_functionStartsWith:function(e){return 0===e[0].lastIndexOf(e[1])},_functionEndsWith:function(e){var t=e[0],n=e[1];return-1!==t.indexOf(n,t.length-n.length)},_functionReverse:function(e){if(this._getTypeName(e[0])===g){for(var t=e[0],n="",r=t.length-1;r>=0;r--)n+=t[r];return n}var i=e[0].slice(0);return i.reverse(),i},_functionAbs:function(e){return Math.abs(e[0])},_functionCeil:function(e){return Math.ceil(e[0])},_functionAvg:function(e){for(var t=0,n=e[0],r=0;r<n.length;r++)t+=n[r];return t/n.length},_functionContains:function(e){return e[0].indexOf(e[1])>=0},_functionFloor:function(e){return Math.floor(e[0])},_functionLength:function(e){return n(e[0])?Object.keys(e[0]).length:e[0].length},_functionMap:function(e){for(var t=[],n=this._interpreter,r=e[0],i=e[1],o=0;o<i.length;o++)t.push(n.visit(r,i[o]));return t},_functionMerge:function(e){for(var t={},n=0;n<e.length;n++){var r=e[n];for(var i in r)t[i]=r[i]}return t},_functionMax:function(e){if(e[0].length>0){if(this._getTypeName(e[0][0])===f)return Math.max.apply(Math,e[0]);for(var t=e[0],n=t[0],r=1;r<t.length;r++)n.localeCompare(t[r])<0&&(n=t[r]);return n}return null},_functionMin:function(e){if(e[0].length>0){if(this._getTypeName(e[0][0])===f)return Math.min.apply(Math,e[0]);for(var t=e[0],n=t[0],r=1;r<t.length;r++)t[r].localeCompare(n)<0&&(n=t[r]);return n}return null},_functionSum:function(e){for(var t=0,n=e[0],r=0;r<n.length;r++)t+=n[r];return t},_functionType:function(e){switch(this._getTypeName(e[0])){case f:return"number";case g:return"string";case m:return"array";case v:return"object";case 5:return"boolean";case y:return"expref";case 7:return"null"}},_functionKeys:function(e){return Object.keys(e[0])},_functionValues:function(e){for(var t=e[0],n=Object.keys(t),r=[],i=0;i<n.length;i++)r.push(t[n[i]]);return r},_functionJoin:function(e){var t=e[0];return e[1].join(t)},_functionToArray:function(e){return this._getTypeName(e[0])===m?e[0]:[e[0]]},_functionToString:function(e){return this._getTypeName(e[0])===g?e[0]:JSON.stringify(e[0])},_functionToNumber:function(e){var t,n=this._getTypeName(e[0]);return n===f?e[0]:n!==g||(t=+e[0],isNaN(t))?null:t},_functionNotNull:function(e){for(var t=0;t<e.length;t++)if(7!==this._getTypeName(e[t]))return e[t];return null},_functionSort:function(e){var t=e[0].slice(0);return t.sort(),t},_functionSortBy:function(e){var t=e[0].slice(0);if(0===t.length)return t;var n=this._interpreter,r=e[1],i=this._getTypeName(n.visit(r,t[0]));if([f,g].indexOf(i)<0)throw new Error("TypeError");for(var o=this,s=[],a=0;a<t.length;a++)s.push([a,t[a]]);s.sort(function(e,t){var s=n.visit(r,e[1]),a=n.visit(r,t[1]);if(o._getTypeName(s)!==i)throw new Error("TypeError: expected "+i+", received "+o._getTypeName(s));if(o._getTypeName(a)!==i)throw new Error("TypeError: expected "+i+", received "+o._getTypeName(a));return s>a?1:s<a?-1:e[0]-t[0]});for(var c=0;c<s.length;c++)t[c]=s[c][1];return t},_functionMaxBy:function(e){for(var t,n,r=e[1],i=e[0],o=this.createKeyFunction(r,[f,g]),s=-1/0,a=0;a<i.length;a++)(n=o(i[a]))>s&&(s=n,t=i[a]);return t},_functionMinBy:function(e){for(var t,n,r=e[1],i=e[0],o=this.createKeyFunction(r,[f,g]),s=1/0,a=0;a<i.length;a++)(n=o(i[a]))<s&&(s=n,t=i[a]);return t},createKeyFunction:function(e,t){var n=this,r=this._interpreter;return function(i){var o=r.visit(e,i);if(t.indexOf(n._getTypeName(o))<0){var s="TypeError: expected one of "+t+", received "+n._getTypeName(o);throw new Error(s)}return o}}},e.tokenize=function(e){return(new c).tokenize(e)},e.compile=function(e){return(new u).parse(e)},e.search=function(e,t){var n=new u,r=new h,i=new l(r);r._interpreter=i;var o=n.parse(t);return i.search(o,e)},e.strictDeepEqual=r}(void 0===n?this.jmespath={}:n)},{}],86:[function(e,t,n){function r(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function o(e){if(l===setTimeout)return setTimeout(e,0);if((l===r||!l)&&setTimeout)return l=setTimeout,setTimeout(e,0);try{return l(e,0)}catch(t){try{return l.call(null,e,0)}catch(t){return l.call(this,e,0)}}}function s(){g&&f&&(g=!1,f.length?d=f.concat(d):m=-1,d.length&&a())}function a(){if(!g){var e=o(s);g=!0;for(var t=d.length;t;){for(f=d,d=[];++m<t;)f&&f[m].run();m=-1,t=d.length}f=null,g=!1,function(e){if(h===clearTimeout)return clearTimeout(e);if((h===i||!h)&&clearTimeout)return h=clearTimeout,clearTimeout(e);try{h(e)}catch(t){try{return h.call(null,e)}catch(t){return h.call(this,e)}}}(e)}}function c(e,t){this.fun=e,this.array=t}function u(){}var l,h,p=t.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:r}catch(e){l=r}try{h="function"==typeof clearTimeout?clearTimeout:i}catch(e){h=i}}();var f,d=[],g=!1,m=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];d.push(new c(e,t)),1!==d.length||g||o(a)},c.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=u,p.addListener=u,p.once=u,p.off=u,p.removeListener=u,p.removeAllListeners=u,p.emit=u,p.prependListener=u,p.prependOnceListener=u,p.listeners=function(e){return[]},p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},{}],87:[function(i,a,c){(function(r){!function(i){function u(e){throw RangeError(D[e])}function l(e,t){for(var n=e.length,r=[];n--;)r[n]=t(e[n]);return r}function h(e,t){var n=e.split("@"),r="";return n.length>1&&(r=n[0]+"@",e=n[1]),r+l((e=e.replace(M,".")).split("."),t).join(".")}function p(e){for(var t,n,r=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(n=e.charCodeAt(i++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),i--):r.push(t);return r}function f(e){return l(e,function(e){var t="";return e>65535&&(t+=j((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+j(e)}).join("")}function d(e){return e-48<10?e-22:e-65<26?e-65:e-97<26?e-97:k}function g(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function m(e,t,n){var r=0;for(e=n?U(e/R):e>>1,e+=U(e/t);e>q*I>>1;r+=k)e=U(e/q);return U(r+(q+1)*e/(e+A))}function v(e){var t,n,r,i,o,s,a,c,l,h,p=[],g=e.length,v=0,y=P,b=x;for((n=e.lastIndexOf(O))<0&&(n=0),r=0;r<n;++r)e.charCodeAt(r)>=128&&u("not-basic"),p.push(e.charCodeAt(r));for(i=n>0?n+1:0;i<g;){for(o=v,s=1,a=k;i>=g&&u("invalid-input"),((c=d(e.charCodeAt(i++)))>=k||c>U((E-v)/s))&&u("overflow"),v+=c*s,!(c<(l=a<=b?T:a>=b+I?I:a-b));a+=k)s>U(E/(h=k-l))&&u("overflow"),s*=h;b=m(v-o,t=p.length+1,0==o),U(v/t)>E-y&&u("overflow"),y+=U(v/t),v%=t,p.splice(v++,0,y)}return f(p)}function y(e){var t,n,r,i,o,s,a,c,l,h,f,d,v,y,b,w=[];for(d=(e=p(e)).length,t=P,n=0,o=x,s=0;s<d;++s)(f=e[s])<128&&w.push(j(f));for(r=i=w.length,i&&w.push(O);r<d;){for(a=E,s=0;s<d;++s)(f=e[s])>=t&&f<a&&(a=f);for(a-t>U((E-n)/(v=r+1))&&u("overflow"),n+=(a-t)*v,t=a,s=0;s<d;++s)if((f=e[s])<t&&++n>E&&u("overflow"),f==t){for(c=n,l=k;!(c<(h=l<=o?T:l>=o+I?I:l-o));l+=k)b=c-h,y=k-h,w.push(j(g(h+b%y,0))),c=U(b/y);w.push(j(g(c,0))),o=m(n,v,r==i),n=0,++r}++n,++t}return w.join("")}var b="object"==s(c)&&c&&!c.nodeType&&c,w="object"==s(a)&&a&&!a.nodeType&&a,_="object"==s(r)&&r;_.global!==_&&_.window!==_&&_.self!==_||(i=_);var S,C,E=2147483647,k=36,T=1,I=26,A=38,R=700,x=72,P=128,O="-",N=/^xn--/,L=/[^\x20-\x7E]/,M=/[\x2E\u3002\uFF0E\uFF61]/g,D={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},q=k-T,U=Math.floor,j=String.fromCharCode;if(S={version:"1.3.2",ucs2:{decode:p,encode:f},decode:v,encode:y,toASCII:function(e){return h(e,function(e){return L.test(e)?"xn--"+y(e):e})},toUnicode:function(e){return h(e,function(e){return N.test(e)?v(e.slice(4).toLowerCase()):e})}},"object"==s(n(3))&&n(3))void 0===(o=function(){return S}.call(t,n,t,e))||(e.exports=o);else if(b&&w)if(a.exports==b)w.exports=S;else for(C in S)S.hasOwnProperty(C)&&(b[C]=S[C]);else i.punycode=S}(this)}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],88:[function(e,t,n){"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.exports=function(e,t,n,o){t=t||"&",n=n||"=";var s={};if("string"!=typeof e||0===e.length)return s;var a=/\+/g;e=e.split(t);var c=1e3;o&&"number"==typeof o.maxKeys&&(c=o.maxKeys);var u=e.length;c>0&&u>c&&(u=c);for(var l=0;l<u;++l){var h,p,f,d,g=e[l].replace(a,"%20"),m=g.indexOf(n);m>=0?(h=g.substr(0,m),p=g.substr(m+1)):(h=g,p=""),f=decodeURIComponent(h),d=decodeURIComponent(p),r(s,f)?i(s[f])?s[f].push(d):s[f]=[s[f],d]:s[f]=d}return s};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},{}],89:[function(e,t,n){"use strict";function r(e,t){if(e.map)return e.map(t);for(var n=[],r=0;r<e.length;r++)n.push(t(e[r],r));return n}var i=function(e){switch(s(e)){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};t.exports=function(e,t,n,c){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==s(e)?r(a(e),function(s){var a=encodeURIComponent(i(s))+n;return o(e[s])?r(e[s],function(e){return a+encodeURIComponent(i(e))}).join(t):a+encodeURIComponent(i(e[s]))}).join(t):c?encodeURIComponent(i(c))+n+encodeURIComponent(i(e)):""};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},a=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}},{}],90:[function(e,t,n){"use strict";n.decode=n.parse=e("./decode"),n.encode=n.stringify=e("./encode")},{"./decode":88,"./encode":89}],91:[function(e,t,n){"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.exports=function(e,t,n,i){t=t||"&",n=n||"=";var o={};if("string"!=typeof e||0===e.length)return o;var s=/\+/g;e=e.split(t);var a=1e3;i&&"number"==typeof i.maxKeys&&(a=i.maxKeys);var c=e.length;a>0&&c>a&&(c=a);for(var u=0;u<c;++u){var l,h,p,f,d=e[u].replace(s,"%20"),g=d.indexOf(n);g>=0?(l=d.substr(0,g),h=d.substr(g+1)):(l=d,h=""),p=decodeURIComponent(l),f=decodeURIComponent(h),r(o,p)?Array.isArray(o[p])?o[p].push(f):o[p]=[o[p],f]:o[p]=f}return o}},{}],92:[function(e,t,n){"use strict";var r=function(e){switch(s(e)){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};t.exports=function(e,t,n,i){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==s(e)?Object.keys(e).map(function(i){var o=encodeURIComponent(r(i))+n;return Array.isArray(e[i])?e[i].map(function(e){return o+encodeURIComponent(r(e))}).join(t):o+encodeURIComponent(r(e[i]))}).join(t):i?encodeURIComponent(r(i))+n+encodeURIComponent(r(e)):""}},{}],93:[function(e,t,n){arguments[4][90][0].apply(n,arguments)},{"./decode":91,"./encode":92,dup:90}],94:[function(e,t,n){(function(t,r){function i(e,t){this._id=e,this._clearFn=t}var o=e("process/browser.js").nextTick,s=Function.prototype.apply,a=Array.prototype.slice,c={},u=0;n.setTimeout=function(){return new i(s.call(setTimeout,window,arguments),clearTimeout)},n.setInterval=function(){return new i(s.call(setInterval,window,arguments),clearInterval)},n.clearTimeout=n.clearInterval=function(e){e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(window,this._id)},n.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},n.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},n._unrefActive=n.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n.setImmediate="function"==typeof t?t:function(e){var t=u++,r=!(arguments.length<2)&&a.call(arguments,1);return c[t]=!0,o(function(){c[t]&&(r?e.apply(null,r):e.call(null),n.clearImmediate(t))}),t},n.clearImmediate="function"==typeof r?r:function(e){delete c[e]}}).call(this,e("timers").setImmediate,e("timers").clearImmediate)},{"process/browser.js":86,timers:94}],95:[function(e,t,n){function r(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}function i(e,t,n){if(e&&a(e)&&e instanceof r)return e;var i=new r;return i.parse(e,t,n),i}function o(e){return"string"==typeof e}function a(e){return"object"==s(e)&&null!==e}function c(e){return null===e}var u=e("punycode");n.parse=i,n.resolve=function(e,t){return i(e,!1,!0).resolve(t)},n.resolveObject=function(e,t){return e?i(e,!1,!0).resolveObject(t):t},n.format=function(e){return o(e)&&(e=i(e)),e instanceof r?e.format():r.prototype.format.call(e)},n.Url=r;var l=/^([a-z0-9.+-]+:)/i,h=/:[0-9]*$/,p=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),f=["'"].concat(p),d=["%","/","?",";","#"].concat(f),g=["/","?","#"],m=/^[a-z0-9A-Z_-]{0,63}$/,v=/^([a-z0-9A-Z_-]{0,63})(.*)$/,y={javascript:!0,"javascript:":!0},b={javascript:!0,"javascript:":!0},w={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},_=e("querystring");r.prototype.parse=function(e,t,n){if(!o(e))throw new TypeError("Parameter 'url' must be a string, not "+s(e));var r=e;r=r.trim();var i=l.exec(r);if(i){var a=(i=i[0]).toLowerCase();this.protocol=a,r=r.substr(i.length)}if(n||i||r.match(/^\/\/[^@\/]+@[^@\/]+/)){var c="//"===r.substr(0,2);!c||i&&b[i]||(r=r.substr(2),this.slashes=!0)}if(!b[i]&&(c||i&&!w[i])){for(var h=-1,p=0;p<g.length;p++){-1!==(E=r.indexOf(g[p]))&&(-1===h||E<h)&&(h=E)}var S,C;-1!==(C=-1===h?r.lastIndexOf("@"):r.lastIndexOf("@",h))&&(S=r.slice(0,C),r=r.slice(C+1),this.auth=decodeURIComponent(S)),h=-1;for(p=0;p<d.length;p++){var E;-1!==(E=r.indexOf(d[p]))&&(-1===h||E<h)&&(h=E)}-1===h&&(h=r.length),this.host=r.slice(0,h),r=r.slice(h),this.parseHost(),this.hostname=this.hostname||"";var k="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!k)for(var T=this.hostname.split(/\./),I=(p=0,T.length);p<I;p++){var A=T[p];if(A&&!A.match(m)){for(var R="",x=0,P=A.length;x<P;x++)A.charCodeAt(x)>127?R+="x":R+=A[x];if(!R.match(m)){var O=T.slice(0,p),N=T.slice(p+1),L=A.match(v);L&&(O.push(L[1]),N.unshift(L[2])),N.length&&(r="/"+N.join(".")+r),this.hostname=O.join(".");break}}}if(this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),!k){var M=this.hostname.split("."),D=[];for(p=0;p<M.length;++p){var q=M[p];D.push(q.match(/[^A-Za-z0-9_-]/)?"xn--"+u.encode(q):q)}this.hostname=D.join(".")}var U=this.port?":"+this.port:"",j=this.hostname||"";this.host=j+U,this.href+=this.host,k&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==r[0]&&(r="/"+r))}if(!y[a])for(p=0,I=f.length;p<I;p++){var B=f[p],F=encodeURIComponent(B);F===B&&(F=escape(B)),r=r.split(B).join(F)}var H=r.indexOf("#");-1!==H&&(this.hash=r.substr(H),r=r.slice(0,H));var V=r.indexOf("?");if(-1!==V?(this.search=r.substr(V),this.query=r.substr(V+1),t&&(this.query=_.parse(this.query)),r=r.slice(0,V)):t&&(this.search="",this.query={}),r&&(this.pathname=r),w[a]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){U=this.pathname||"",q=this.search||"";this.path=U+q}return this.href=this.format(),this},r.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",r=this.hash||"",i=!1,o="";this.host?i=e+this.host:this.hostname&&(i=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&a(this.query)&&Object.keys(this.query).length&&(o=_.stringify(this.query));var s=this.search||o&&"?"+o||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||w[t])&&!1!==i?(i="//"+(i||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):i||(i=""),r&&"#"!==r.charAt(0)&&(r="#"+r),s&&"?"!==s.charAt(0)&&(s="?"+s),t+i+(n=n.replace(/[?#]/g,function(e){return encodeURIComponent(e)}))+(s=s.replace("#","%23"))+r},r.prototype.resolve=function(e){return this.resolveObject(i(e,!1,!0)).format()},r.prototype.resolveObject=function(e){if(o(e)){var t=new r;t.parse(e,!1,!0),e=t}var n=new r;if(Object.keys(this).forEach(function(e){n[e]=this[e]},this),n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol)return Object.keys(e).forEach(function(t){"protocol"!==t&&(n[t]=e[t])}),w[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n;if(e.protocol&&e.protocol!==n.protocol){if(!w[e.protocol])return Object.keys(e).forEach(function(t){n[t]=e[t]}),n.href=n.format(),n;if(n.protocol=e.protocol,e.host||b[e.protocol])n.pathname=e.pathname;else{for(var i=(e.pathname||"").split("/");i.length&&!(e.host=i.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==i[0]&&i.unshift(""),i.length<2&&i.unshift(""),n.pathname=i.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var s=n.pathname||"",a=n.search||"";n.path=s+a}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var u=n.pathname&&"/"===n.pathname.charAt(0),l=e.host||e.pathname&&"/"===e.pathname.charAt(0),h=l||u||n.host&&e.pathname,p=h,f=n.pathname&&n.pathname.split("/")||[],d=(i=e.pathname&&e.pathname.split("/")||[],n.protocol&&!w[n.protocol]);if(d&&(n.hostname="",n.port=null,n.host&&(""===f[0]?f[0]=n.host:f.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===i[0]?i[0]=e.host:i.unshift(e.host)),e.host=null),h=h&&(""===i[0]||""===f[0])),l)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,f=i;else if(i.length)f||(f=[]),f.pop(),f=f.concat(i),n.search=e.search,n.query=e.query;else if(!function(e){return null==e}(e.search)){if(d)n.hostname=n.host=f.shift(),(_=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=_.shift(),n.host=n.hostname=_.shift());return n.search=e.search,n.query=e.query,c(n.pathname)&&c(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n}if(!f.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var g=f.slice(-1)[0],m=(n.host||e.host)&&("."===g||".."===g)||""===g,v=0,y=f.length;y>=0;y--)"."==(g=f[y])?f.splice(y,1):".."===g?(f.splice(y,1),v++):v&&(f.splice(y,1),v--);if(!h&&!p)for(;v--;v)f.unshift("..");!h||""===f[0]||f[0]&&"/"===f[0].charAt(0)||f.unshift(""),m&&"/"!==f.join("/").substr(-1)&&f.push("");var _,S=""===f[0]||f[0]&&"/"===f[0].charAt(0);d&&(n.hostname=n.host=S?"":f.length?f.shift():"",(_=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=_.shift(),n.host=n.hostname=_.shift()));return(h=h||n.host&&f.length)&&!S&&f.unshift(""),f.length?n.pathname=f.join("/"):(n.pathname=null,n.path=null),c(n.pathname)&&c(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},r.prototype.parseHost=function(){var e=this.host,t=h.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},{punycode:87,querystring:90}],96:[function(e,t,n){"function"==typeof Object.create?t.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},{}],97:[function(e,t,n){t.exports=function(e){return e&&"object"==s(e)&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},{}],98:[function(e,t,n){(function(t,r){function i(e,t){var r={seen:[],stylize:a};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),f(t)?r.showHidden=t:t&&n._extend(r,t),v(r.showHidden)&&(r.showHidden=!1),v(r.depth)&&(r.depth=2),v(r.colors)&&(r.colors=!1),v(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=o),c(r,e,r.depth)}function o(e,t){var n=i.styles[t];return n?"["+i.colors[n][0]+"m"+e+"["+i.colors[n][1]+"m":e}function a(e,t){return e}function c(e,t,r){if(e.customInspect&&t&&S(t.inspect)&&t.inspect!==n.inspect&&(!t.constructor||t.constructor.prototype!==t)){var i=t.inspect(r,e);return m(i)||(i=c(e,i,r)),i}var o=u(e,t);if(o)return o;var s=Object.keys(t),a=function(e){var t={};return e.forEach(function(e,n){t[e]=!0}),t}(s);if(e.showHidden&&(s=Object.getOwnPropertyNames(t)),_(t)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return l(t);if(0===s.length){if(S(t)){var f=t.name?": "+t.name:"";return e.stylize("[Function"+f+"]","special")}if(y(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(w(t))return e.stylize(Date.prototype.toString.call(t),"date");if(_(t))return l(t)}var d,g="",v=!1,b=["{","}"];return p(t)&&(v=!0,b=["[","]"]),S(t)&&(g=" [Function"+(t.name?": "+t.name:"")+"]"),y(t)&&(g=" "+RegExp.prototype.toString.call(t)),w(t)&&(g=" "+Date.prototype.toUTCString.call(t)),_(t)&&(g=" "+l(t)),0!==s.length||v&&0!=t.length?r<0?y(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),d=v?function(e,t,n,r,i){for(var o=[],s=0,a=t.length;s<a;++s)T(t,String(s))?o.push(h(e,t,n,r,String(s),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(h(e,t,n,r,i,!0))}),o}(e,t,r,a,s):s.map(function(n){return h(e,t,r,a,n,v)}),e.seen.pop(),function(e,t,n){return e.reduce(function(e,t){return 0,t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}(d,g,b)):b[0]+g+b[1]}function u(e,t){if(v(t))return e.stylize("undefined","undefined");if(m(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return g(t)?e.stylize(""+t,"number"):f(t)?e.stylize(""+t,"boolean"):d(t)?e.stylize("null","null"):void 0}function l(e){return"["+Error.prototype.toString.call(e)+"]"}function h(e,t,n,r,i,o){var s,a,u;if((u=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?a=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(a=e.stylize("[Setter]","special")),T(r,i)||(s="["+i+"]"),a||(e.seen.indexOf(u.value)<0?(a=d(n)?c(e,u.value,null):c(e,u.value,n-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+a.split("\n").map(function(e){return"   "+e}).join("\n")):a=e.stylize("[Circular]","special")),v(s)){if(o&&i.match(/^\d+$/))return a;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+a}function p(e){return Array.isArray(e)}function f(e){return"boolean"==typeof e}function d(e){return null===e}function g(e){return"number"==typeof e}function m(e){return"string"==typeof e}function v(e){return void 0===e}function y(e){return b(e)&&"[object RegExp]"===C(e)}function b(e){return"object"==s(e)&&null!==e}function w(e){return b(e)&&"[object Date]"===C(e)}function _(e){return b(e)&&("[object Error]"===C(e)||e instanceof Error)}function S(e){return"function"==typeof e}function C(e){return Object.prototype.toString.call(e)}function E(e){return e<10?"0"+e.toString(10):e.toString(10)}function k(){var e=new Date,t=[E(e.getHours()),E(e.getMinutes()),E(e.getSeconds())].join(":");return[e.getDate(),x[e.getMonth()],t].join(" ")}function T(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var I=/%[sdj%]/g;n.format=function(e){if(!m(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(i(arguments[n]));return t.join(" ")}n=1;for(var r=arguments,o=r.length,s=String(e).replace(I,function(e){if("%%"===e)return"%";if(n>=o)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}}),a=r[n];n<o;a=r[++n])d(a)||!b(a)?s+=" "+a:s+=" "+i(a);return s},n.deprecate=function(e,i){if(v(r.process))return function(){return n.deprecate(e,i).apply(this,arguments)};if(!0===t.noDeprecation)return e;var o=!1;return function(){if(!o){if(t.throwDeprecation)throw new Error(i);t.traceDeprecation?console.trace(i):console.error(i),o=!0}return e.apply(this,arguments)}};var A,R={};n.debuglog=function(e){if(v(A)&&(A=t.env.NODE_DEBUG||""),e=e.toUpperCase(),!R[e])if(new RegExp("\\b"+e+"\\b","i").test(A)){var r=t.pid;R[e]=function(){var t=n.format.apply(n,arguments);console.error("%s %d: %s",e,r,t)}}else R[e]=function(){};return R[e]},n.inspect=i,i.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},i.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},n.isArray=p,n.isBoolean=f,n.isNull=d,n.isNullOrUndefined=function(e){return null==e},n.isNumber=g,n.isString=m,n.isSymbol=function(e){return"symbol"==s(e)},n.isUndefined=v,n.isRegExp=y,n.isObject=b,n.isDate=w,n.isError=_,n.isFunction=S,n.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==s(e)||void 0===e},n.isBuffer=e("./support/isBuffer");var x=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];n.log=function(){console.log("%s - %s",k(),n.format.apply(n,arguments))},n.inherits=e("inherits"),n._extend=function(e,t){if(!t||!b(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}}).call(this,e("_process"),void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./support/isBuffer":97,_process:86,inherits:96}],99:[function(e,t,n){var r=e("./v1"),i=e("./v4"),o=i;o.v1=r,o.v4=i,t.exports=o},{"./v1":102,"./v4":103}],100:[function(e,t,n){for(var r=[],i=0;i<256;++i)r[i]=(i+256).toString(16).substr(1);t.exports=function(e,t){var n=t||0,i=r;return[i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]]].join("")}},{}],101:[function(e,t,n){var r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(r){var i=new Uint8Array(16);t.exports=function(){return r(i),i}}else{var o=new Array(16);t.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),o[t]=e>>>((3&t)<<3)&255;return o}}},{}],102:[function(e,t,n){var r,i,o=e("./lib/rng"),s=e("./lib/bytesToUuid"),a=0,c=0;t.exports=function(e,t,n){var u=t&&n||0,l=t||[],h=(e=e||{}).node||r,p=void 0!==e.clockseq?e.clockseq:i;if(null==h||null==p){var f=o();null==h&&(h=r=[1|f[0],f[1],f[2],f[3],f[4],f[5]]),null==p&&(p=i=16383&(f[6]<<8|f[7]))}var d=void 0!==e.msecs?e.msecs:(new Date).getTime(),g=void 0!==e.nsecs?e.nsecs:c+1,m=d-a+(g-c)/1e4;if(m<0&&void 0===e.clockseq&&(p=p+1&16383),(m<0||d>a)&&void 0===e.nsecs&&(g=0),g>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=d,c=g,i=p;var v=(1e4*(268435455&(d+=122192928e5))+g)%4294967296;l[u++]=v>>>24&255,l[u++]=v>>>16&255,l[u++]=v>>>8&255,l[u++]=255&v;var y=d/4294967296*1e4&268435455;l[u++]=y>>>8&255,l[u++]=255&y,l[u++]=y>>>24&15|16,l[u++]=y>>>16&255,l[u++]=p>>>8|128,l[u++]=255&p;for(var b=0;b<6;++b)l[u+b]=h[b];return t||s(l)}},{"./lib/bytesToUuid":100,"./lib/rng":101}],103:[function(e,t,n){var r=e("./lib/rng"),i=e("./lib/bytesToUuid");t.exports=function(e,t,n){var o=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var s=(e=e||{}).random||(e.rng||r)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t)for(var a=0;a<16;++a)t[o+a]=s[a];return t||i(s)}},{"./lib/bytesToUuid":100,"./lib/rng":101}],104:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./utils/LRU"),i=1e3,o=function(){function e(e){void 0===e&&(e=i),this.maxSize=e,this.cache=new r.LRUCache(e)}return Object.defineProperty(e.prototype,"size",{get:function(){return this.cache.length},enumerable:!0,configurable:!0}),e.prototype.put=function(t,n){var r="string"!=typeof t?e.getKeyString(t):t,i=this.populateValue(n);this.cache.put(r,i)},e.prototype.get=function(t){var n="string"!=typeof t?e.getKeyString(t):t,r=Date.now(),i=this.cache.get(n);if(i)for(var o=0;o<i.length;o++){if(i[o].Expire<r)return void this.cache.remove(n)}return i},e.getKeyString=function(e){for(var t=[],n=Object.keys(e).sort(),r=0;r<n.length;r++){var i=n[r];void 0!==e[i]&&t.push(e[i])}return t.join(" ")},e.prototype.populateValue=function(e){var t=Date.now();return e.map(function(e){return{Address:e.Address||"",Expire:t+60*(e.CachePeriodInMinutes||1)*1e3}})},e.prototype.empty=function(){this.cache.empty()},e.prototype.remove=function(t){var n="string"!=typeof t?e.getKeyString(t):t;this.cache.remove(n)},e}();n.EndpointCache=o},{"./utils/LRU":105}],105:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(e,t){this.key=e,this.value=t},i=function(){function e(e){if(this.nodeMap={},this.size=0,"number"!=typeof e||e<1)throw new Error("Cache size can only be positive number");this.sizeLimit=e}return Object.defineProperty(e.prototype,"length",{get:function(){return this.size},enumerable:!0,configurable:!0}),e.prototype.prependToList=function(e){this.headerNode?(this.headerNode.prev=e,e.next=this.headerNode):this.tailNode=e,this.headerNode=e,this.size++},e.prototype.removeFromTail=function(){if(this.tailNode){var e=this.tailNode,t=e.prev;return t&&(t.next=void 0),e.prev=void 0,this.tailNode=t,this.size--,e}},e.prototype.detachFromList=function(e){this.headerNode===e&&(this.headerNode=e.next),this.tailNode===e&&(this.tailNode=e.prev),e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),e.next=void 0,e.prev=void 0,this.size--},e.prototype.get=function(e){if(this.nodeMap[e]){var t=this.nodeMap[e];return this.detachFromList(t),this.prependToList(t),t.value}},e.prototype.remove=function(e){if(this.nodeMap[e]){var t=this.nodeMap[e];this.detachFromList(t),delete this.nodeMap[e]}},e.prototype.put=function(e,t){if(this.nodeMap[e])this.remove(e);else if(this.size===this.sizeLimit){var n=this.removeFromTail().key;delete this.nodeMap[n]}var i=new r(e,t);this.nodeMap[e]=i,this.prependToList(i)},e.prototype.empty=function(){for(var e=Object.keys(this.nodeMap),t=0;t<e.length;t++){var n=e[t],r=this.nodeMap[n];this.detachFromList(r),delete this.nodeMap[n]}},e}();n.LRUCache=i},{}],106:[function(e,t,n){e("./browser_loader");var r=e("./core");"undefined"!=typeof window&&(window.AWS=r),void 0!==t&&(t.exports=r),"undefined"!=typeof self&&(self.AWS=r),Object.prototype.hasOwnProperty.call(r,"ConnectParticipant")||(r.apiLoader.services.connectparticipant={},r.ConnectParticipant=r.Service.defineService("connectparticipant",["2018-09-07"])),r.apiLoader.services.connectparticipant["2018-09-07"]=e("../apis/connectparticipant-2018-09-07.min"),r.apiLoader.services.connectparticipant["2018-09-07"].paginators=e("../apis/connectparticipant-2018-09-07.paginators").pagination,Object.prototype.hasOwnProperty.call(r,"STS")||(r.apiLoader.services.sts={},r.STS=r.Service.defineService("sts",["2011-06-15"]),e("./services/sts")),r.apiLoader.services.sts=e("../apis/sts-2011-06-15.min")},{"../apis/connectparticipant-2018-09-07.min":3,"../apis/connectparticipant-2018-09-07.paginators":4,"../apis/sts-2011-06-15.min":6,"./browser_loader":17,"./core":19,"./services/sts":62}]},{},[106])}).call(this,n(0))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ByaW50Zi1qcy9zcmMvc3ByaW50Zi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9leGNlcHRpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvWG1sSHR0cENsaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2xvYmFsQ29uZmlnLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9sb2cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY2hhdEFyZ3NWYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29ubmVjdGlvbkhlbHBlcnMvYmFzZUNvbm5lY3Rpb25IZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXZlbnRidXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29ubmVjdGlvbkhlbHBlcnMvY29ubmVjdGlvbkRldGFpbHNQcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3BhaG9NcXR0Q2xpZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL25ldHdvcmtJbmZvLmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2Nvbm5lY3Rpb25IZWxwZXJzL0lvdENvbm5lY3Rpb25IZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29ubmVjdGlvbkhlbHBlcnMvTHBjQ29ubmVjdGlvbkhlbHBlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb25uZWN0aW9uSGVscGVycy9jb25uZWN0aW9uSGVscGVyUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY2hhdENvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY2hhdFNlc3Npb24uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWhvLW1xdHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW16bi9hbWF6b24tY29ubmVjdC13ZWJzb2NrZXQtbWFuYWdlci9kaXN0L2FtYXpvbi1jb25uZWN0LXdlYnNvY2tldC1tYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvYXdzLWNsaWVudC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZyIsInRoaXMiLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsInJlIiwibm90X3N0cmluZyIsIm5vdF9ib29sIiwibm90X3R5cGUiLCJub3RfcHJpbWl0aXZlIiwibnVtYmVyIiwibnVtZXJpY19hcmciLCJqc29uIiwibm90X2pzb24iLCJ0ZXh0IiwibW9kdWxvIiwicGxhY2Vob2xkZXIiLCJrZXlfYWNjZXNzIiwiaW5kZXhfYWNjZXNzIiwic2lnbiIsInNwcmludGYiLCJwYXJzZV90cmVlIiwiYXJndiIsImFyZyIsImsiLCJwaCIsInBhZCIsInBhZF9jaGFyYWN0ZXIiLCJwYWRfbGVuZ3RoIiwiaXNfcG9zaXRpdmUiLCJjdXJzb3IiLCJ0cmVlX2xlbmd0aCIsImxlbmd0aCIsIm91dHB1dCIsImtleXMiLCJ1bmRlZmluZWQiLCJFcnJvciIsInBhcmFtX25vIiwidGVzdCIsInR5cGUiLCJpc05hTiIsIlR5cGVFcnJvciIsInBhcnNlSW50IiwidG9TdHJpbmciLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJKU09OIiwic3RyaW5naWZ5Iiwid2lkdGgiLCJwcmVjaXNpb24iLCJwYXJzZUZsb2F0IiwidG9FeHBvbmVudGlhbCIsInRvRml4ZWQiLCJOdW1iZXIiLCJ0b1ByZWNpc2lvbiIsInN1YnN0cmluZyIsInNsaWNlIiwidG9Mb3dlckNhc2UiLCJ2YWx1ZU9mIiwidG9VcHBlckNhc2UiLCJyZXBsYWNlIiwicGFkX2NoYXIiLCJjaGFyQXQiLCJyZXBlYXQiLCJhbGlnbiIsInNwcmludGZfZm9ybWF0IiwiZm10Iiwic3ByaW50Zl9jYWNoZSIsIm1hdGNoIiwiX2ZtdCIsImFyZ19uYW1lcyIsImV4ZWMiLCJwdXNoIiwiU3ludGF4RXJyb3IiLCJmaWVsZF9saXN0IiwicmVwbGFjZW1lbnRfZmllbGQiLCJmaWVsZF9tYXRjaCIsInNwcmludGZfcGFyc2UiLCJhcmd1bWVudHMiLCJ2c3ByaW50ZiIsImFwcGx5IiwiY29uY2F0IiwiVmFsdWVFcnJvciIsIm1lc3NhZ2UiLCJfdGhpcyIsIl9jbGFzc0NhbGxDaGVjayIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2dldFByb3RvdHlwZU9mIiwiY29uc29sZSIsImxvZyIsIlVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24iLCJfdGhpczIiLCJJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24iLCJhcmd1bWVudCIsIl90aGlzMyIsIklsbGVnYWxTdGF0ZUV4Y2VwdGlvbiIsIl90aGlzNCIsIm1ha2VIdHRwUmVxdWVzdCIsIm9iaiIsInN1Y2Nlc3MiLCJmYWlsdXJlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwibWV0aG9kIiwidXJsIiwiaGVhZGVycyIsImZvckVhY2giLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25sb2FkIiwic3RhdHVzIiwib25lcnJvciIsInNlbmQiLCJib2R5IiwiR2xvYmFsQ29uZmlnIiwiY29uZmlnSW5wdXQiLCJjb25maWciLCJyZWdpb24iLCJlbmRwb2ludE92ZXJyaWRlIiwiZW5kcG9pbnQiLCJyZWNvbm5lY3QiLCJSRVNPVVJDRV9QQVRIIiwiSFRUUF9NRVRIT0RTIiwiUkVHSU9OX0NPTkZJRyIsInVzLXdlc3QtMiIsImludm9rZVVybCIsInVzLWVhc3QtMSIsImFwLXNvdXRoZWFzdC0yIiwiYXAtbm9ydGhlYXN0LTEiLCJldS1jZW50cmFsLTEiLCJNUVRUX0NPTlNUQU5UUyIsIlNFU1NJT05fVFlQRVMiLCJBR0VOVCIsIkNVU1RPTUVSIiwiQ0hBVF9FVkVOVFMiLCJDT05URU5UX1RZUEUiLCJ0ZXh0UGxhaW4iLCJjb25uZWN0aW9uQWNrbm93bGVkZ2VkIiwidHlwaW5nIiwicGFydGljaXBhbnRKb2luZWQiLCJwYXJ0aWNpcGFudExlZnQiLCJ0cmFuc2ZlclN1Y2NlZWRlZCIsInRyYW5zZmVyRmFpbGVkIiwiY2hhdEVuZGVkIiwiVFJBTlNDUklQVF9ERUZBVUxUX1BBUkFNUyIsIkxPR1NfREVTVElOQVRJT04iLCJSRUdJT05TIiwiQUdFTlRfUkVDT05ORUNUX0NPTkZJRyIsImludGVydmFsIiwibWF4UmV0cmllcyIsIkNVU1RPTUVSX1JFQ09OTkVDVF9DT05GSUciLCJVdGlscyIsInByZW1pc2UiLCJhc3NlcnRUcnVlIiwidXRpbHNfdHlwZW9mIiwiRGF0ZSIsImdldFRpbWUiLCJub3ciLCJNYXRoIiwicmFuZG9tIiwiQXJyYXkiLCJpc0FycmF5IiwiYWxsb3dlZFZhbHVlcyIsInZhbHVlcyIsImVudW1PYmoiLCJ4IiwieSIsImZpbmQiLCJ2IiwiYXJyYXkiLCJwcmVkaWNhdGUiLCJjb25zdHJ1Y3RvciIsIm1hcCIsImFzc2VydE5vdE51bGwiLCJpc09iamVjdCIsIm1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiZiIsImNvdW50IiwiZXJyb3IiLCJkZWxheSIsIm1heCIsInRoZW4iLCJhc3luY1doaWxlSW50ZXJ2YWwiLCJyZWplY3QiLCJMb2dnZXIiLCJkYXRhIiwiTG9nTGV2ZWwiLCJERUJVRyIsIklORk8iLCJXQVJOIiwiRVJST1IiLCJMb2dNYW5hZ2VySW1wbCIsImxvZ19jbGFzc0NhbGxDaGVjayIsInVwZGF0ZUxvZ2dlckNvbmZpZyIsImNvbnNvbGVMb2dnZXJXcmFwcGVyIiwiY3JlYXRlQ29uc29sZUxvZ2dlciIsImxldmVsIiwibG9nU3RhdGVtZW50IiwiaGFzQ2xpZW50TG9nZ2VyIiwiX2NsaWVudExvZ2dlciIsImRlYnVnIiwiaW5mbyIsIndhcm4iLCJfbGV2ZWwiLCJvcHRpb25zIiwicHJlZml4IiwiX2xvZ3NEZXN0aW5hdGlvbiIsIkxvZ2dlcldyYXBwZXJJbXBsIiwiaW5wdXRDb25maWciLCJsb2dnZXIiLCJMb2dnZXJXcmFwcGVyIiwibG9nX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJsb2dfZ2V0UHJvdG90eXBlT2YiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJfbG9nIiwiX2xlbjIiLCJfa2V5MiIsIl9sZW4zIiwiX2tleTMiLCJfbGVuNCIsIl9rZXk0IiwiTG9nTWFuYWdlciIsImlzTGV2ZWxFbmFibGVkIiwid3JpdGVUb0NsaWVudExvZ2dlciIsIl9zaG91bGRMb2ciLCJfY29udmVydFRvU2luZ2xlU3RhdGVtZW50IiwiX3dyaXRlVG9DbGllbnRMb2dnZXIiLCJpbmRleCIsIl9jb252ZXJ0VG9TdHJpbmciLCJpc1N0cmluZyIsImlzRnVuY3Rpb24iLCJ0b1N0cmluZ1Jlc3VsdCIsIkNoYXRDbGllbnRGYWN0b3J5SW1wbCIsImNsaWVudF9jbGFzc0NhbGxDaGVjayIsImNsaWVudENhY2hlIiwib3B0aW9uc0lucHV0IiwiYXNzaWduIiwiZ2V0UmVnaW9uIiwiY2xpZW50IiwiX2NyZWF0ZUF3c0NsaWVudCIsImdldEVuZHBvaW50T3ZlcnJpZGUiLCJzdGFnZUNvbmZpZyIsIkFXU0NoYXRDbGllbnQiLCJDaGF0Q2xpZW50IiwicGFydGljaXBhbnRUb2tlbiIsImNvbm5lY3Rpb25Ub2tlbiIsImNvbnRlbnRUeXBlIiwiY29udGVudCIsImNsaWVudF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiY2xpZW50X2dldFByb3RvdHlwZU9mIiwiY3JlZHMiLCJBV1MiLCJDcmVkZW50aWFscyIsIkNvbmZpZyIsImNyZWRlbnRpYWxzIiwiY2hhdENsaWVudCIsIkNvbm5lY3RQYXJ0aWNpcGFudCIsImNhbGxIdHRwQ2xpZW50IiwiZ2V0TG9nZ2VyIiwic2VsZiIsInBhcmFtcyIsIlR5cGUiLCJQYXJ0aWNpcGFudFRva2VuIiwiY3JlYXRlUGFydGljaXBhbnRDb25uZWN0aW9uUmVxdWVzdCIsImNyZWF0ZVBhcnRpY2lwYW50Q29ubmVjdGlvbiIsIl9zZW5kUmVxdWVzdCIsInJlcyIsImVyciIsIkNvbm5lY3Rpb25Ub2tlbiIsImRpc2Nvbm5lY3RQYXJ0aWNpcGFudFJlcXVlc3QiLCJkaXNjb25uZWN0UGFydGljaXBhbnQiLCJNYXhSZXN1bHRzIiwibWF4UmVzdWx0cyIsIk5leHRUb2tlbiIsIm5leHRUb2tlbiIsIlNjYW5EaXJlY3Rpb24iLCJzY2FuRGlyZWN0aW9uIiwiU29ydE9yZGVyIiwic29ydE9yZGVyIiwiU3RhcnRQb3NpdGlvbiIsIklkIiwic3RhcnRQb3NpdGlvbiIsImlkIiwiQWJzb2x1dGVUaW1lIiwiYWJzb2x1dGVUaW1lIiwiTW9zdFJlY2VudCIsIm1vc3RSZWNlbnQiLCJjb250YWN0SWQiLCJDb250YWN0SWQiLCJnZXRUcmFuc2NyaXB0UmVxdWVzdCIsImdldFRyYW5zY3JpcHQiLCJDb250ZW50IiwiQ29udGVudFR5cGUiLCJzZW5kTWVzc2FnZVJlcXVlc3QiLCJzZW5kTWVzc2FnZSIsInNlbmRFdmVudFJlcXVlc3QiLCJzZW5kRXZlbnQiLCJyZXF1ZXN0Iiwib24iLCJlcnJPYmoiLCJjb2RlIiwic3RhY2siLCJzcGxpdCIsInJlcXVlc3RJbnB1dCIsIl9jYWxsSHR0cENsaWVudCIsIkNvbnRlbnQtVHlwZSIsIkFjY2VwdCIsInJlc3BvbnNlT2JqZWN0IiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJlcnJvck9iamVjdCIsInN0YXR1c1RleHQiLCJDaGF0Q2xpZW50RmFjdG9yeSIsIkNoYXRDb250cm9sbGVyQXJnc1ZhbGlkYXRvciIsImNoYXREZXRhaWxzIiwidmFsaWRhdGVDb250ZW50VHlwZSIsImFzc2VydElzRW51bSIsImFzc2VydElzT2JqZWN0IiwibWV0aG9kTmFtZSIsIkNoYXRTZXJ2aWNlQXJnc1ZhbGlkYXRvciIsImdldENvbm5lY3Rpb25Ub2tlbiIsImFzc2VydElzTm9uRW1wdHlTdHJpbmciLCJwYXJ0aWNpcGFudElkIiwiY29ubmVjdGlvbkRldGFpbHMiLCJQcmVTaWduZWRDb25uZWN0aW9uVXJsIiwiQ29ubmVjdGlvbklkIiwiY2hhdERldGFpbHNJbnB1dCIsIlBhcnRpY2lwYW50SWQiLCJpbml0aWFsQ29udGFjdElkIiwiSW5pdGlhbENvbnRhY3RJZCIsInZhbGlkYXRlQ2hhdERldGFpbHMiLCJDaGF0Q29ubmVjdGlvbkF0dHJpYnV0ZXMiLCJQYXJ0aWNpcGFudENyZWRlbnRpYWxzIiwidmFsaWRhdGVJbml0aWF0ZUNoYXRSZXNwb25zZSIsIkNvbm5lY3Rpb25BdXRoZW50aWNhdGlvblRva2VuIiwiQ29ubmVjdGlvbkhlbHBlclN0YXR1cyIsIk5ldmVyU3RhcnRlZCIsIlN0YXJ0aW5nIiwiQ29ubmVjdGVkIiwiQ29ubmVjdGlvbkxvc3QiLCJFbmRlZCIsIkNvbm5lY3Rpb25IZWxwZXJFdmVudHMiLCJDb25uZWN0aW9uVHlwZSIsIkNvbm5lY3Rpb25JbmZvVHlwZSIsIkJhc2VDb25uZWN0aW9uSGVscGVyIiwiY29ubmVjdGlvbkRldGFpbHNQcm92aWRlciIsImJhc2VDb25uZWN0aW9uSGVscGVyX2NsYXNzQ2FsbENoZWNrIiwiaXNTdGFydGVkIiwic2V0SW50ZXJ2YWwiLCJmZXRjaENvbm5lY3Rpb25Ub2tlbiIsInN0YXJ0Q29ubmVjdGlvblRva2VuUG9sbGluZyIsImNsZWFySW50ZXJ2YWwiLCJTdWJzY3JpcHRpb24iLCJzdWJNYXAiLCJldmVudE5hbWUiLCJyYW5kb21JZCIsInVuc3Vic2NyaWJlIiwiU3Vic2NyaXB0aW9uTWFwIiwic3ViSWRNYXAiLCJzdWJFdmVudE5hbWVNYXAiLCJzdWJzY3JpYmUiLCJzdWIiLCJzdWJMaXN0Iiwic3ViSWQiLCJjb250YWlucyIsImZpbHRlciIsImdldEFsbFN1YnNjcmlwdGlvbnMiLCJyZWR1Y2UiLCJhIiwiYiIsImdldFN1YnNjcmlwdGlvbnMiLCJFdmVudEJ1cyIsInBhcmFtc0luIiwibG9nRXZlbnRzIiwic3Vic2NyaWJlQWxsIiwidHJpZ2dlciIsImFsbEV2ZW50U3VicyIsImV2ZW50U3VicyIsInRyaWdnZXJBc3luYyIsImJyaWRnZSIsImV2ZW50IiwidW5zdWJzY3JpYmVBbGwiLCJDb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyIiwiY3JlYXRlQ29ubmVjdGlvblRva2VuIiwiY29ubmVjdGlvbkRldGFpbHNQcm92aWRlcl9jbGFzc0NhbGxDaGVjayIsImNvbm5lY3Rpb25UeXBlIiwiZmlyc3RDYWxsIiwiX2hhbmRsZVByZXNldENvbm5lY3Rpb25EZXRhaWxzIiwiX2ZldGNoQ29ubmVjdGlvbkRldGFpbHMiLCJjb25uZWN0aW9uSWQiLCJwcmVTaWduZWRDb25uZWN0aW9uVXJsIiwiQ29ubmVjdGlvbkNyZWRlbnRpYWxzIiwiV2Vic29ja2V0IiwiVXJsIiwiaW5jbHVkZXMiLCJyZXNwb25zZSIsImNyZWF0ZUNvbm5lY3Rpb25EZXRhaWxzIiwiX2hhbmRsZUNyZWF0ZUNvbm5lY3Rpb25EZXRhaWxzUmVzcG9uc2UiLCJyZWFzb24iLCJfZGVidWciLCJfaGFuZGxlQ3JlYXRlUGFydGljaXBhbnRDb25uZWN0aW9uUmVzcG9uc2UiLCJfaGFuZGxlQ3JlYXRlQ29ubmVjdGlvblRva2VuUmVzcG9uc2UiLCJjaGF0VG9rZW5UcmFuc3BvcnQiLCJNUVRUQ2xpZW50IiwiY29ubmVjdE9wdGlvbnMiLCJ0b3BpYyIsInN1YnNjcmliZU9wdGlvbnMiLCJ1bnN1YnNjcmliZU9wdGlvbnMiLCJNcXR0Q29ubmVjdGlvblN0YXR1cyIsImZyZWV6ZSIsIk5ldmVyQ29ubmVjdGVkIiwiQ29ubmVjdGluZyIsIkRpc2Nvbm5lY3RlZCIsIk1xdHRFdmVudHMiLCJNRVNTQUdFIiwiRElTQ09OTkVDVEVEIiwiUGFob01xdHRDbGllbnQiLCJwYWhvTXF0dENsaWVudF9jbGFzc0NhbGxDaGVjayIsInBhaG9NcXR0Q2xpZW50X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJwYWhvTXF0dENsaWVudF9nZXRQcm90b3R5cGVPZiIsInByZVNpZ25lZFVybCIsInBhaG9DbGllbnQiLCJQYWhvIiwiQ2xpZW50IiwicGFob01xdHRDbGllbnRfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwib25NZXNzYWdlQXJyaXZlZCIsIl9tZXNzYWdlQXJyaXZlZENhbGxiYWNrIiwib25Db25uZWN0aW9uTG9zdCIsIl9jb25uZWN0aW9uTG9zdENhbGxCYWNrIiwiY2FsbGJhY2siLCJuZXZlckNvbm5lY3RlZCIsIl9zdWJzY3JpYmVkVG9waWNzIiwib25TdWNjZXNzIiwiX29uQ29ubmVjdFN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJlcnJvckRldGFpbHMiLCJfb25Db25uZWN0RmFpbHVyZSIsImNvbm5lY3QiLCJpbmNvbWluZ01lc3NhZ2UiLCJxb3MiLCJwYXlsb2FkU3RyaW5nIiwiZGlzY29ubmVjdCIsIl9zdWJzY3JpYmVTdWNjZXNzIiwiZ3JhbnRlZFFvcyIsImluZGV4T2YiLCJfYWRkVG9Ub3BpY3MiLCJfdW5zdWJzY3JpYmVTdWNjZXNzIiwiRHVtbXlOZXR3b3JrSW5mbyIsIkJyb3dzZXJOZXR3b3JrSW5mbyIsIm5ldHdvcmtJbmZvX2NsYXNzQ2FsbENoZWNrIiwiZXZlbnRCdXMiLCJvbmxpbmVQcm9taXNlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZXIiLCJuYXZpZ2F0b3IiLCJvbkxpbmUiLCJpc09ubGluZSIsIm9uT25saW5lIiwiTmV0d29ya0luZm8iLCJuZXR3b3JrSW5mb190eXBlb2YiLCJJb3RDb25uZWN0aW9uSGVscGVyIiwicmVjb25uZWN0Q29uZmlnIiwiSW90Q29ubmVjdGlvbkhlbHBlcl9jbGFzc0NhbGxDaGVjayIsIklvdENvbm5lY3Rpb25IZWxwZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIklvdENvbm5lY3Rpb25IZWxwZXJfZ2V0UHJvdG90eXBlT2YiLCJfdW5zdWJzY3JpYmVGdW5jdGlvbnMiLCJfY29ubmVjdENhbGxlZEF0bGVhc3RPbmNlIiwiX3NldE5ldHdvcmtFdmVudEhhbmRsZXJzIiwiX2dldCIsIl9pbml0aWF0ZUNvbm5lY3RXaXRoUmV0cnkiLCJfaGFuZGxlQnJva2VuQ29ubmVjdGlvbiIsImlvdENvbm5lY3Rpb24iLCJfaGFuZGxlSW90RXZlbnQiLCJmZXRjaENvbm5lY3Rpb25EZXRhaWxzIiwiX2luaXRJb3RDb25uZWN0aW9uIiwidXNlU1NMIiwia2VlcEFsaXZlSW50ZXJ2YWwiLCJtcXR0VmVyc2lvbiIsInRpbWVvdXQiLCJfc3Vic2NyaWJlIiwiX2Nvbm5lY3RGYWlsZWQiLCJjb25uZWN0RXJyb3IiLCJjb25uZWN0U3VjY2VzcyIsImRldGFpbHMiLCJfcG9zdFN1YnNjcmliZSIsIl9zdWJzY3JpYmVGYWlsZWQiLCJzdWJzY3JpYmVSZXNwb25zZSIsInN1YnNjcmliZUVycm9yIiwiZXZlbnRUeXBlIiwiZXZlbnREYXRhIiwiaW5jb21pbmdEYXRhIiwiZXJyb3JDb2RlIiwiX2hhbmRsZUxvc3RDb25uZWN0aW9uIiwiX2luaXRpYXRlQ29ubmVjdFByb21pc2UiLCJfY29ubmVjdCIsIl9jYW5Db25uZWN0IiwiX2hhbmRsZUdhaW5lZENvbm5lY3Rpb24iLCJzdGF0ZSIsIl90aGlzNSIsIkxwY0Nvbm5lY3Rpb25IZWxwZXIiLCJ3ZWJzb2NrZXRNYW5hZ2VyIiwiTHBjQ29ubmVjdGlvbkhlbHBlcl9jbGFzc0NhbGxDaGVjayIsIkxwY0Nvbm5lY3Rpb25IZWxwZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkxwY0Nvbm5lY3Rpb25IZWxwZXJfZ2V0UHJvdG90eXBlT2YiLCJjbGVhblVwQmFzZUluc3RhbmNlIiwiYmFzZUluc3RhbmNlIiwiTFBDQ29ubmVjdGlvbkhlbHBlckJhc2UiLCJzdWJzY3JpcHRpb25zIiwib25FbmRlZCIsImhhbmRsZUVuZGVkIiwiTHBjQ29ubmVjdGlvbkhlbHBlcl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJvbkNvbm5lY3Rpb25HYWluIiwiaGFuZGxlQ29ubmVjdGlvbkdhaW4iLCJoYW5kbGVDb25uZWN0aW9uTG9zdCIsIm9uTWVzc2FnZSIsImhhbmRsZU1lc3NhZ2UiLCJMcGNDb25uZWN0aW9uSGVscGVyX2dldCIsInN0YXJ0IiwiZW5kIiwiZ2V0U3RhdHVzIiwiaW5pdFdlYnNvY2tldE1hbmFnZXIiLCJXZWJTb2NrZXRNYW5hZ2VyIiwic3Vic2NyaWJlVG9waWNzIiwib25Jbml0RmFpbHVyZSIsImluaXQiLCJ3ZWJTb2NrZXRUcmFuc3BvcnQiLCJ0cmFuc3BvcnRMaWZlVGltZUluU2Vjb25kcyIsImNsb3NlV2ViU29ja2V0IiwicGFyc2VkTWVzc2FnZSIsImNvbm5lY3Rpb25IZWxwZXJQcm92aWRlciIsIl9yZWYiLCJOZXR3b3JrTGlua1N0YXR1cyIsIkNoYXRDb250cm9sbGVyIiwiY2hhdENvbnRyb2xsZXJfY2xhc3NDYWxsQ2hlY2siLCJhcmdzVmFsaWRhdG9yIiwicHVic3ViIiwic2Vzc2lvblR5cGUiLCJfcGFydGljaXBhbnREaXNjb25uZWN0ZWQiLCJzZXNzaW9uTWV0YWRhdGEiLCJtZXRhZGF0YSIsInJlcXVlc3ROYW1lIiwidmFsaWRhdGVTZW5kTWVzc2FnZSIsImNvbm5lY3Rpb25IZWxwZXIiLCJoYW5kbGVSZXF1ZXN0U3VjY2VzcyIsImhhbmRsZVJlcXVlc3RGYWlsdXJlIiwidmFsaWRhdGVTZW5kRXZlbnQiLCJpbnB1dEFyZ3MiLCJ2YWxpZGF0ZUNvbm5lY3RDaGF0IiwiX2luaXRDb25uZWN0aW9uSGVscGVyIiwiX2hhbmRsZUVuZGVkQ29ubmVjdGlvbiIsIl9oYW5kbGVJbmNvbWluZ01lc3NhZ2UiLCJfZm9yd2FyZENoYXRFdmVudCIsImdldENoYXREZXRhaWxzIiwiYnJlYWtDb25uZWN0aW9uIiwiY29ubmVjdENhbGxlZCIsIl9zaG91bGRBY2tub3dsZWRnZUNvbnRhY3QiLCJjbGVhblVwT25QYXJ0aWNpcGFudERpc2Nvbm5lY3QiLCJjb25uZWN0aW9uSGVscGVyU3RhdHVzIiwiX2NvbnZlcnRDb25uZWN0aW9uSGVscGVyU3RhdHVzIiwiQ2hhdFNlc3Npb25GYWN0b3J5IiwicGFydGljaXBhbnRUeXBlIiwiUGVyc2lzdGVudENvbm5lY3Rpb25BbmRDaGF0U2VydmljZVNlc3Npb25GYWN0b3J5IiwiY2hhdFNlc3Npb25fY2xhc3NDYWxsQ2hlY2siLCJjaGF0U2Vzc2lvbl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiY2hhdFNlc3Npb25fZ2V0UHJvdG90eXBlT2YiLCJjaGF0Q29udHJvbGxlciIsIl9jcmVhdGVDaGF0Q29udHJvbGxlciIsIkFnZW50Q2hhdFNlc3Npb24iLCJDdXN0b21lckNoYXRTZXNzaW9uIiwibm9ybWFsaXplQ2hhdERldGFpbHMiLCJnZXRDYWNoZWRDbGllbnQiLCJDaGF0U2Vzc2lvbiIsImNvbnRyb2xsZXIiLCJDSEFUX1NFU1NJT05fRkFDVE9SWSIsIkNoYXRTZXNzaW9uT2JqZWN0IiwiY3JlYXRlQ2hhdFNlc3Npb24iLCJzZXRHbG9iYWxDb25maWciLCJsb2dnZXJDb25maWciLCJ1cGRhdGUiLCJTZXNzaW9uVHlwZXMiLCJfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyIsImZhY3RvcnkiLCJnbG9iYWwiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiaXRlbSIsImdldEl0ZW0iLCJyZW1vdmVJdGVtIiwiTUVTU0FHRV9UWVBFIiwiQ09OTkVDVCIsIkNPTk5BQ0siLCJQVUJMSVNIIiwiUFVCQUNLIiwiUFVCUkVDIiwiUFVCUkVMIiwiUFVCQ09NUCIsIlNVQlNDUklCRSIsIlNVQkFDSyIsIlVOU1VCU0NSSUJFIiwiVU5TVUJBQ0siLCJQSU5HUkVRIiwiUElOR1JFU1AiLCJESVNDT05ORUNUIiwidmFsaWRhdGUiLCJlcnJvclN0ciIsInZhbGlkS2V5IiwiX3R5cGVvZiIsImZvcm1hdCIsIklOVkFMSURfVFlQRSIsInNjb3BlIiwiT0siLCJDT05ORUNUX1RJTUVPVVQiLCJTVUJTQ1JJQkVfVElNRU9VVCIsIlVOU1VCU0NSSUJFX1RJTUVPVVQiLCJQSU5HX1RJTUVPVVQiLCJJTlRFUk5BTF9FUlJPUiIsIkNPTk5BQ0tfUkVUVVJOQ09ERSIsIlNPQ0tFVF9FUlJPUiIsIlNPQ0tFVF9DTE9TRSIsIk1BTEZPUk1FRF9VVEYiLCJVTlNVUFBPUlRFRCIsIklOVkFMSURfU1RBVEUiLCJJTlZBTElEX0FSR1VNRU5UIiwiVU5TVVBQT1JURURfT1BFUkFUSU9OIiwiSU5WQUxJRF9TVE9SRURfREFUQSIsIklOVkFMSURfTVFUVF9NRVNTQUdFX1RZUEUiLCJNQUxGT1JNRURfVU5JQ09ERSIsIkJVRkZFUl9GVUxMIiwiQ09OTkFDS19SQyIsIjAiLCIxIiwiMiIsIjMiLCI0IiwiNSIsInN1YnN0aXR1dGlvbnMiLCJmaWVsZCIsInBhcnQxIiwicGFydDIiLCJNcXR0UHJvdG9JZGVudGlmaWVydjMiLCJNcXR0UHJvdG9JZGVudGlmaWVydjQiLCJXaXJlTWVzc2FnZSIsImRlY29kZU1lc3NhZ2UiLCJpbnB1dCIsInBvcyIsImRpZ2l0Iiwic3RhcnRpbmdQb3MiLCJmaXJzdCIsIm1lc3NhZ2VJbmZvIiwicmVtTGVuZ3RoIiwibXVsdGlwbGllciIsImVuZFBvcyIsIndpcmVNZXNzYWdlIiwic2Vzc2lvblByZXNlbnQiLCJyZXR1cm5Db2RlIiwibGVuIiwicmVhZFVpbnQxNiIsInRvcGljTmFtZSIsInBhcnNlVVRGOCIsIm1lc3NhZ2VJZGVudGlmaWVyIiwiTWVzc2FnZSIsInN1YmFycmF5IiwicmV0YWluZWQiLCJkdXBsaWNhdGUiLCJkZXN0aW5hdGlvbk5hbWUiLCJwYXlsb2FkTWVzc2FnZSIsIndyaXRlVWludDE2IiwiYnVmZmVyIiwib2Zmc2V0Iiwid3JpdGVTdHJpbmciLCJ1dGY4TGVuZ3RoIiwic3RyaW5nVG9VVEY4IiwiVVRGOExlbmd0aCIsImNoYXJDb2RlIiwiY2hhckNvZGVBdCIsImxvd0NoYXJDb2RlIiwidXRmMTYiLCJieXRlMSIsImJ5dGUyIiwiYnl0ZTMiLCJieXRlNCIsImVuY29kZSIsIndpbGxNZXNzYWdlUGF5bG9hZEJ5dGVzIiwidG9waWNTdHJMZW5ndGgiLCJkZXN0aW5hdGlvbk5hbWVMZW5ndGgiLCJjbGllbnRJZCIsIndpbGxNZXNzYWdlIiwicGF5bG9hZEJ5dGVzIiwiVWludDhBcnJheSIsImJ5dGVMZW5ndGgiLCJ1c2VyTmFtZSIsInBhc3N3b3JkIiwidG9waWNzIiwicmVxdWVzdGVkUW9zIiwiQXJyYXlCdWZmZXIiLCJtYmkiLCJudW1CeXRlcyIsImVuY29kZU1CSSIsImJ5dGVTdHJlYW0iLCJzZXQiLCJjb25uZWN0RmxhZ3MiLCJjbGVhblNlc3Npb24iLCJQaW5nZXIiLCJfY2xpZW50IiwiX2tlZXBBbGl2ZUludGVydmFsIiwiaXNSZXNldCIsInBpbmdSZXEiLCJkb1RpbWVvdXQiLCJwaW5nZXIiLCJkb1BpbmciLCJfdHJhY2UiLCJzb2NrZXQiLCJfZGlzY29ubmVjdGVkIiwicmVzZXQiLCJjbGVhclRpbWVvdXQiLCJjYW5jZWwiLCJUaW1lb3V0IiwidGltZW91dFNlY29uZHMiLCJhY3Rpb24iLCJDbGllbnRJbXBsIiwidXJpIiwiaG9zdCIsInBvcnQiLCJwYXRoIiwiV2ViU29ja2V0IiwiX3dzdXJpIiwiX2xvY2FsS2V5IiwiX21zZ19xdWV1ZSIsIl9idWZmZXJlZF9tc2dfcXVldWUiLCJfc2VudE1lc3NhZ2VzIiwiX3JlY2VpdmVkTWVzc2FnZXMiLCJfbm90aWZ5X21zZ19zZW50IiwiX21lc3NhZ2VfaWRlbnRpZmllciIsIl9zZXF1ZW5jZSIsInJlc3RvcmUiLCJjb25uZWN0ZWQiLCJtYXhNZXNzYWdlSWRlbnRpZmllciIsImhvc3RJbmRleCIsIm9uQ29ubmVjdGVkIiwib25NZXNzYWdlRGVsaXZlcmVkIiwidHJhY2VGdW5jdGlvbiIsIl9jb25uZWN0VGltZW91dCIsInNlbmRQaW5nZXIiLCJyZWNlaXZlUGluZ2VyIiwiX3JlY29ubmVjdEludGVydmFsIiwiX3JlY29ubmVjdGluZyIsIl9yZWNvbm5lY3RUaW1lb3V0IiwiZGlzY29ubmVjdGVkUHVibGlzaGluZyIsImRpc2Nvbm5lY3RlZEJ1ZmZlclNpemUiLCJyZWNlaXZlQnVmZmVyIiwiX3RyYWNlQnVmZmVyIiwiX01BWF9UUkFDRV9FTlRSSUVTIiwiY29ubmVjdE9wdGlvbnNNYXNrZWQiLCJfdHJhY2VNYXNrIiwidXJpcyIsIl9kb0Nvbm5lY3QiLCJpbnZvY2F0aW9uQ29udGV4dCIsImVycm9yTWVzc2FnZSIsInRpbWVPdXQiLCJfcmVxdWlyZXNfYWNrIiwiX3NjaGVkdWxlX21lc3NhZ2UiLCJzZXF1ZW5jZSIsInVuc2hpZnQiLCJnZXRUcmFjZUxvZyIsInN0YXJ0VHJhY2UiLCJzdG9wVHJhY2UiLCJ3c3VybCIsInVyaVBhcnRzIiwiam9pbiIsImJpbmFyeVR5cGUiLCJvbm9wZW4iLCJfb25fc29ja2V0X29wZW4iLCJvbm1lc3NhZ2UiLCJfb25fc29ja2V0X21lc3NhZ2UiLCJfb25fc29ja2V0X2Vycm9yIiwib25jbG9zZSIsIl9vbl9zb2NrZXRfY2xvc2UiLCJfcHJvY2Vzc19xdWV1ZSIsInN0b3JlIiwic3RvcmVkTWVzc2FnZSIsInZlcnNpb24iLCJwdWJSZWNSZWNlaXZlZCIsImhleCIsIm1lc3NhZ2VCeXRlcyIsInBheWxvYWRIZXgiLCJwb3AiLCJfc29ja2V0X3NlbmQiLCJtZXNzYWdlQ291bnQiLCJtZXNzYWdlcyIsIl9kZWZyYW1lTWVzc2FnZXMiLCJfaGFuZGxlTWVzc2FnZSIsImJ5dGVBcnJheSIsIm5ld0RhdGEiLCJyZXN1bHQiLCJlcnJvclN0YWNrIiwic2VudE1lc3NhZ2UiLCJyZWNlaXZlZE1lc3NhZ2UiLCJzZXF1ZW5jZWRNZXNzYWdlcyIsIm1zZ0lkIiwibXNnIiwic29ydCIsInB1YlJlbE1lc3NhZ2UiLCJyZWNvbm5lY3RlZCIsIl9jb25uZWN0ZWQiLCJfcmVjZWl2ZVB1Ymxpc2giLCJfcmVjZWl2ZU1lc3NhZ2UiLCJwdWJDb21wTWVzc2FnZSIsIndpcmVNZXNzYWdlTWFza2VkIiwicHViQWNrTWVzc2FnZSIsInB1YlJlY01lc3NhZ2UiLCJfcmVjb25uZWN0IiwiZXJyb3JUZXh0IiwicmVhZHlTdGF0ZSIsImNsb3NlIiwibXF0dFZlcnNpb25FeHBsaWNpdCIsInNwbGljZSIsInJlY29yZCIsInNldmVyaXR5Iiwic2hpZnQiLCJ0cmFjZU9iamVjdCIsIm1hc2tlZCIsInRyYWNlT2JqZWN0TWFza2VkIiwiYXR0ciIsIm5ld1BheWxvYWQiLCJwYXlsb2FkIiwiaXNWaWV3IiwiRGF0YVZpZXciLCJkZWZpbmVQcm9wZXJ0aWVzIiwibmV3RGVzdGluYXRpb25OYW1lIiwibmV3UW9zIiwibmV3UmV0YWluZWQiLCJuZXdUb3BpYyIsIm5ld0R1cGxpY2F0ZSIsImlwdjZBZGRTQnJhY2tldCIsImNsaWVudElkTGVuZ3RoIiwibmV3T25Db25uZWN0ZWQiLCJuZXdEaXNjb25uZWN0ZWRQdWJsaXNoaW5nIiwibmV3RGlzY29ubmVjdGVkQnVmZmVyU2l6ZSIsIm5ld09uQ29ubmVjdGlvbkxvc3QiLCJuZXdPbk1lc3NhZ2VEZWxpdmVyZWQiLCJuZXdPbk1lc3NhZ2VBcnJpdmVkIiwidHJhY2UiLCJob3N0cyIsInBvcnRzIiwic3RyaW5nUGF5bG9hZCIsInVzaW5nVVJJcyIsImlwdjYiLCJwdWJsaXNoIiwiaXNDb25uZWN0ZWQiLCJkZWZpbmUiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18iLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX2NvcmVfY2hhdFNlc3Npb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsImRlZmF1bHQiLCJpdGVyYXRvciIsImFzc2VydElzTGlzdCIsIm1ha2VFbnVtIiwiaXNOdW1iZXIiLCJSZWdFeHAiLCJ2YWxpZFdTVXJsIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImgiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIlMiLCJ3IiwiXyIsIk8iLCJDIiwiVCIsIlJlZmVyZW5jZUVycm9yIiwiTCIsIkUiLCJyZWNvbm5lY3RXZWJTb2NrZXQiLCJ3ZWJzb2NrZXRJbml0RmFpbGVkIiwibGluZWFyQ29ubmVjdEF0dGVtcHQiLCJleHBvbmVudGlhbENvbm5lY3RBdHRlbXB0IiwiZXhwb25lbnRpYWxCYWNrT2ZmVGltZSIsImV4cG9uZW50aWFsVGltZW91dEhhbmRsZSIsImxpZmVUaW1lVGltZW91dEhhbmRsZSIsInBlbmRpbmdSZXNwb25zZSIsImludGVydmFsSGFuZGxlIiwiaW5pdEZhaWx1cmUiLCJTZXQiLCJnZXRXZWJTb2NrZXRUcmFuc3BvcnQiLCJzdWJzY3JpcHRpb25VcGRhdGUiLCJzdWJzY3JpcHRpb25GYWlsdXJlIiwiTWFwIiwiYWxsTWVzc2FnZSIsImNvbm5lY3Rpb25HYWluIiwiY29ubmVjdGlvbkxvc3QiLCJjb25uQ29uZmlnIiwicHJvbWlzZUhhbmRsZSIsInByb21pc2VDb21wbGV0ZWQiLCJzdWJzY3JpYmVkIiwicGVuZGluZyIsInUiLCJzaXplIiwiZnJvbSIsImNsZWFyIiwiYWRkIiwiZGVsZXRlIiwiaGFzIiwiQ0xPU0VEIiwiT1BFTiIsIm9uU3Vic2NyaXB0aW9uVXBkYXRlIiwib25TdWJzY3JpcHRpb25GYWlsdXJlIiwib25BbGxNZXNzYWdlIiwicmVxdWlyZSIsImFwaVZlcnNpb24iLCJlbmRwb2ludFByZWZpeCIsImpzb25WZXJzaW9uIiwicHJvdG9jb2wiLCJzZXJ2aWNlRnVsbE5hbWUiLCJzZXJ2aWNlSWQiLCJzaWduYXR1cmVWZXJzaW9uIiwidGFyZ2V0UHJlZml4IiwidWlkIiwib3BlcmF0aW9ucyIsIkNyZWF0ZUlkZW50aXR5UG9vbCIsInJlcXVpcmVkIiwibWVtYmVycyIsIklkZW50aXR5UG9vbE5hbWUiLCJBbGxvd1VuYXV0aGVudGljYXRlZElkZW50aXRpZXMiLCJBbGxvd0NsYXNzaWNGbG93IiwiU3VwcG9ydGVkTG9naW5Qcm92aWRlcnMiLCJzaGFwZSIsIkRldmVsb3BlclByb3ZpZGVyTmFtZSIsIk9wZW5JZENvbm5lY3RQcm92aWRlckFSTnMiLCJDb2duaXRvSWRlbnRpdHlQcm92aWRlcnMiLCJTYW1sUHJvdmlkZXJBUk5zIiwiSWRlbnRpdHlQb29sVGFncyIsIkRlbGV0ZUlkZW50aXRpZXMiLCJJZGVudGl0eUlkc1RvRGVsZXRlIiwibWVtYmVyIiwiVW5wcm9jZXNzZWRJZGVudGl0eUlkcyIsIklkZW50aXR5SWQiLCJFcnJvckNvZGUiLCJEZWxldGVJZGVudGl0eVBvb2wiLCJJZGVudGl0eVBvb2xJZCIsIkRlc2NyaWJlSWRlbnRpdHkiLCJEZXNjcmliZUlkZW50aXR5UG9vbCIsIkdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHkiLCJMb2dpbnMiLCJDdXN0b21Sb2xlQXJuIiwiQWNjZXNzS2V5SWQiLCJTZWNyZXRLZXkiLCJTZXNzaW9uVG9rZW4iLCJFeHBpcmF0aW9uIiwiR2V0SWQiLCJBY2NvdW50SWQiLCJHZXRJZGVudGl0eVBvb2xSb2xlcyIsIlJvbGVzIiwiUm9sZU1hcHBpbmdzIiwiR2V0T3BlbklkVG9rZW4iLCJUb2tlbiIsIkdldE9wZW5JZFRva2VuRm9yRGV2ZWxvcGVySWRlbnRpdHkiLCJUb2tlbkR1cmF0aW9uIiwiTGlzdElkZW50aXRpZXMiLCJIaWRlRGlzYWJsZWQiLCJJZGVudGl0aWVzIiwiTGlzdElkZW50aXR5UG9vbHMiLCJJZGVudGl0eVBvb2xzIiwiTGlzdFRhZ3NGb3JSZXNvdXJjZSIsIlJlc291cmNlQXJuIiwiVGFncyIsIkxvb2t1cERldmVsb3BlcklkZW50aXR5IiwiRGV2ZWxvcGVyVXNlcklkZW50aWZpZXIiLCJEZXZlbG9wZXJVc2VySWRlbnRpZmllckxpc3QiLCJNZXJnZURldmVsb3BlcklkZW50aXRpZXMiLCJTb3VyY2VVc2VySWRlbnRpZmllciIsIkRlc3RpbmF0aW9uVXNlcklkZW50aWZpZXIiLCJTZXRJZGVudGl0eVBvb2xSb2xlcyIsIlRhZ1Jlc291cmNlIiwiVW5saW5rRGV2ZWxvcGVySWRlbnRpdHkiLCJVbmxpbmtJZGVudGl0eSIsIkxvZ2luc1RvUmVtb3ZlIiwiVW50YWdSZXNvdXJjZSIsIlRhZ0tleXMiLCJVcGRhdGVJZGVudGl0eVBvb2wiLCJzaGFwZXMiLCJTNSIsIlM5IiwiU2IiLCJQcm92aWRlck5hbWUiLCJDbGllbnRJZCIsIlNlcnZlclNpZGVUb2tlbkNoZWNrIiwiU2ciLCJTaCIsIlNrIiwiU3YiLCJDcmVhdGlvbkRhdGUiLCJMYXN0TW9kaWZpZWREYXRlIiwiU3ciLCJTMTAiLCJTMWMiLCJTMWUiLCJBbWJpZ3VvdXNSb2xlUmVzb2x1dGlvbiIsIlJ1bGVzQ29uZmlndXJhdGlvbiIsIlJ1bGVzIiwiQ2xhaW0iLCJNYXRjaFR5cGUiLCJWYWx1ZSIsIlJvbGVBUk4iLCJwYWdpbmF0aW9uIiwic2VydmljZUFiYnJldmlhdGlvbiIsInNpZ25pbmdOYW1lIiwiQ3JlYXRlUGFydGljaXBhbnRDb25uZWN0aW9uIiwiaHR0cCIsInJlcXVlc3RVcmkiLCJsb2NhdGlvbiIsImxvY2F0aW9uTmFtZSIsIkNvbm5lY3Rpb25FeHBpcnkiLCJFeHBpcnkiLCJEaXNjb25uZWN0UGFydGljaXBhbnQiLCJDbGllbnRUb2tlbiIsImlkZW1wb3RlbmN5VG9rZW4iLCJHZXRUcmFuc2NyaXB0IiwiVHJhbnNjcmlwdCIsIkRpc3BsYXlOYW1lIiwiUGFydGljaXBhbnRSb2xlIiwiU2VuZEV2ZW50IiwiU2VuZE1lc3NhZ2UiLCJpbnB1dF90b2tlbiIsIm91dHB1dF90b2tlbiIsImxpbWl0X2tleSIsImFjbSIsImNvcnMiLCJhcGlnYXRld2F5IiwiYXBwbGljYXRpb25hdXRvc2NhbGluZyIsImFwcHN0cmVhbSIsImF1dG9zY2FsaW5nIiwiYmF0Y2giLCJidWRnZXRzIiwiY2xvdWRkaXJlY3RvcnkiLCJ2ZXJzaW9ucyIsImNsb3VkZm9ybWF0aW9uIiwiY2xvdWRmcm9udCIsImNsb3VkaHNtIiwiY2xvdWRzZWFyY2giLCJjbG91ZHNlYXJjaGRvbWFpbiIsImNsb3VkdHJhaWwiLCJjbG91ZHdhdGNoIiwiY2xvdWR3YXRjaGV2ZW50cyIsImNsb3Vkd2F0Y2hsb2dzIiwiY29kZWJ1aWxkIiwiY29kZWNvbW1pdCIsImNvZGVkZXBsb3kiLCJjb2RlcGlwZWxpbmUiLCJjb2duaXRvaWRlbnRpdHkiLCJjb2duaXRvaWRlbnRpdHlzZXJ2aWNlcHJvdmlkZXIiLCJjb2duaXRvc3luYyIsImNvbmZpZ3NlcnZpY2UiLCJjdXIiLCJkYXRhcGlwZWxpbmUiLCJkZXZpY2VmYXJtIiwiZGlyZWN0Y29ubmVjdCIsImRpcmVjdG9yeXNlcnZpY2UiLCJkaXNjb3ZlcnkiLCJkbXMiLCJkeW5hbW9kYiIsImR5bmFtb2Ric3RyZWFtcyIsImVjMiIsImVjciIsImVjcyIsImVmcyIsImVsYXN0aWNhY2hlIiwiZWxhc3RpY2JlYW5zdGFsayIsImVsYiIsImVsYnYyIiwiZW1yIiwiZXMiLCJlbGFzdGljdHJhbnNjb2RlciIsImZpcmVob3NlIiwiZ2FtZWxpZnQiLCJnbGFjaWVyIiwiaGVhbHRoIiwiaWFtIiwiaW1wb3J0ZXhwb3J0IiwiaW5zcGVjdG9yIiwiaW90IiwiaW90ZGF0YSIsImtpbmVzaXMiLCJraW5lc2lzYW5hbHl0aWNzIiwia21zIiwibGFtYmRhIiwibGV4cnVudGltZSIsImxpZ2h0c2FpbCIsIm1hY2hpbmVsZWFybmluZyIsIm1hcmtldHBsYWNlY29tbWVyY2VhbmFseXRpY3MiLCJtYXJrZXRwbGFjZW1ldGVyaW5nIiwibXR1cmsiLCJtb2JpbGVhbmFseXRpY3MiLCJvcHN3b3JrcyIsIm9wc3dvcmtzY20iLCJvcmdhbml6YXRpb25zIiwicGlucG9pbnQiLCJwb2xseSIsInJkcyIsInJlZHNoaWZ0IiwicmVrb2duaXRpb24iLCJyZXNvdXJjZWdyb3Vwc3RhZ2dpbmdhcGkiLCJyb3V0ZTUzIiwicm91dGU1M2RvbWFpbnMiLCJzMyIsImR1YWxzdGFja0F2YWlsYWJsZSIsInMzY29udHJvbCIsInNlcnZpY2VjYXRhbG9nIiwic2VzIiwic2hpZWxkIiwic2ltcGxlZGIiLCJzbXMiLCJzbm93YmFsbCIsInNucyIsInNxcyIsInNzbSIsInN0b3JhZ2VnYXRld2F5Iiwic3RlcGZ1bmN0aW9ucyIsInN0cyIsInN1cHBvcnQiLCJzd2YiLCJ4cmF5Iiwid2FmIiwid2FmcmVnaW9uYWwiLCJ3b3JrZG9jcyIsIndvcmtzcGFjZXMiLCJjb2Rlc3RhciIsImxleG1vZGVsYnVpbGRpbmdzZXJ2aWNlIiwibWFya2V0cGxhY2VlbnRpdGxlbWVudHNlcnZpY2UiLCJhdGhlbmEiLCJncmVlbmdyYXNzIiwiZGF4IiwibWlncmF0aW9uaHViIiwiY2xvdWRoc212MiIsImdsdWUiLCJtb2JpbGUiLCJwcmljaW5nIiwiY29zdGV4cGxvcmVyIiwibWVkaWFjb252ZXJ0IiwibWVkaWFsaXZlIiwibWVkaWFwYWNrYWdlIiwibWVkaWFzdG9yZSIsIm1lZGlhc3RvcmVkYXRhIiwiYXBwc3luYyIsImd1YXJkZHV0eSIsIm1xIiwiY29tcHJlaGVuZCIsImlvdGpvYnNkYXRhcGxhbmUiLCJraW5lc2lzdmlkZW9hcmNoaXZlZG1lZGlhIiwia2luZXNpc3ZpZGVvbWVkaWEiLCJraW5lc2lzdmlkZW8iLCJzYWdlbWFrZXJydW50aW1lIiwic2FnZW1ha2VyIiwidHJhbnNsYXRlIiwicmVzb3VyY2Vncm91cHMiLCJhbGV4YWZvcmJ1c2luZXNzIiwiY2xvdWQ5Iiwic2VydmVybGVzc2FwcGxpY2F0aW9ucmVwb3NpdG9yeSIsInNlcnZpY2VkaXNjb3ZlcnkiLCJ3b3JrbWFpbCIsImF1dG9zY2FsaW5ncGxhbnMiLCJ0cmFuc2NyaWJlc2VydmljZSIsImFjbXBjYSIsImZtcyIsInNlY3JldHNtYW5hZ2VyIiwiaW90YW5hbHl0aWNzIiwiaW90MWNsaWNrZGV2aWNlc3NlcnZpY2UiLCJpb3QxY2xpY2twcm9qZWN0cyIsInBpIiwibmVwdHVuZSIsIm1lZGlhdGFpbG9yIiwiZWtzIiwibWFjaWUiLCJkbG0iLCJzaWduZXIiLCJjaGltZSIsInBpbnBvaW50ZW1haWwiLCJyYW0iLCJyb3V0ZTUzcmVzb2x2ZXIiLCJwaW5wb2ludHNtc3ZvaWNlIiwicXVpY2tzaWdodCIsInJkc2RhdGFzZXJ2aWNlIiwiYW1wbGlmeSIsImRhdGFzeW5jIiwicm9ib21ha2VyIiwidHJhbnNmZXIiLCJnbG9iYWxhY2NlbGVyYXRvciIsImNvbXByZWhlbmRtZWRpY2FsIiwia2luZXNpc2FuYWx5dGljc3YyIiwibWVkaWFjb25uZWN0IiwiZnN4Iiwic2VjdXJpdHlodWIiLCJhcHBtZXNoIiwibGljZW5zZW1hbmFnZXIiLCJrYWZrYSIsImFwaWdhdGV3YXltYW5hZ2VtZW50YXBpIiwiYXBpZ2F0ZXdheXYyIiwiZG9jZGIiLCJiYWNrdXAiLCJ3b3JrbGluayIsInRleHRyYWN0IiwibWFuYWdlZGJsb2NrY2hhaW4iLCJtZWRpYXBhY2thZ2V2b2QiLCJncm91bmRzdGF0aW9uIiwiaW90dGhpbmdzZ3JhcGgiLCJpb3RldmVudHMiLCJpb3RldmVudHNkYXRhIiwicGVyc29uYWxpemUiLCJwZXJzb25hbGl6ZWV2ZW50cyIsInBlcnNvbmFsaXplcnVudGltZSIsImFwcGxpY2F0aW9uaW5zaWdodHMiLCJzZXJ2aWNlcXVvdGFzIiwiZWMyaW5zdGFuY2Vjb25uZWN0IiwiZXZlbnRicmlkZ2UiLCJsYWtlZm9ybWF0aW9uIiwiZm9yZWNhc3RzZXJ2aWNlIiwiZm9yZWNhc3RxdWVyeXNlcnZpY2UiLCJxbGRiIiwicWxkYnNlc3Npb24iLCJ3b3JrbWFpbG1lc3NhZ2VmbG93IiwiY29kZXN0YXJub3RpZmljYXRpb25zIiwic2F2aW5nc3BsYW5zIiwic3NvIiwic3Nvb2lkYyIsImNvbm5lY3RwYXJ0aWNpcGFudCIsIjYiLCJnbG9iYWxFbmRwb2ludCIsInhtbE5hbWVzcGFjZSIsIkFzc3VtZVJvbGUiLCJSb2xlQXJuIiwiUm9sZVNlc3Npb25OYW1lIiwiUG9saWN5QXJucyIsIlBvbGljeSIsIkR1cmF0aW9uU2Vjb25kcyIsIkV4dGVybmFsSWQiLCJTZXJpYWxOdW1iZXIiLCJUb2tlbkNvZGUiLCJyZXN1bHRXcmFwcGVyIiwiQXNzdW1lZFJvbGVVc2VyIiwiUGFja2VkUG9saWN5U2l6ZSIsIkFzc3VtZVJvbGVXaXRoU0FNTCIsIlByaW5jaXBhbEFybiIsIlNBTUxBc3NlcnRpb24iLCJTdWJqZWN0IiwiU3ViamVjdFR5cGUiLCJJc3N1ZXIiLCJBdWRpZW5jZSIsIk5hbWVRdWFsaWZpZXIiLCJBc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5IiwiV2ViSWRlbnRpdHlUb2tlbiIsIlByb3ZpZGVySWQiLCJTdWJqZWN0RnJvbVdlYklkZW50aXR5VG9rZW4iLCJQcm92aWRlciIsIkRlY29kZUF1dGhvcml6YXRpb25NZXNzYWdlIiwiRW5jb2RlZE1lc3NhZ2UiLCJEZWNvZGVkTWVzc2FnZSIsIkdldEFjY2Vzc0tleUluZm8iLCJBY2NvdW50IiwiR2V0Q2FsbGVySWRlbnRpdHkiLCJVc2VySWQiLCJBcm4iLCJHZXRGZWRlcmF0aW9uVG9rZW4iLCJOYW1lIiwiRmVkZXJhdGVkVXNlciIsIkZlZGVyYXRlZFVzZXJJZCIsIkdldFNlc3Npb25Ub2tlbiIsIlM0IiwiYXJuIiwiU2MiLCJTZWNyZXRBY2Nlc3NLZXkiLCJBc3N1bWVkUm9sZUlkIiwiNyIsImR1cCIsIjgiLCJTZXJ2aWNlIiwiYXBpTG9hZGVyIiwic2VydmljZXMiLCJDb2duaXRvSWRlbnRpdHkiLCJkZWZpbmVTZXJ2aWNlIiwicGFnaW5hdG9ycyIsIi4uL2FwaXMvY29nbml0by1pZGVudGl0eS0yMDE0LTA2LTMwLm1pbi5qc29uIiwiLi4vYXBpcy9jb2duaXRvLWlkZW50aXR5LTIwMTQtMDYtMzAucGFnaW5hdG9ycy5qc29uIiwiLi4vbGliL2NvcmUiLCIuLi9saWIvbm9kZV9sb2FkZXIiLCIuLi9saWIvc2VydmljZXMvY29nbml0b2lkZW50aXR5IiwiOSIsIlNUUyIsIi4uL2FwaXMvc3RzLTIwMTEtMDYtMTUubWluLmpzb24iLCIuLi9hcGlzL3N0cy0yMDExLTA2LTE1LnBhZ2luYXRvcnMuanNvbiIsIi4uL2xpYi9zZXJ2aWNlcy9zdHMiLCIxMCIsIjExIiwiY3JlYXRlSGFzaCIsImNyZWF0ZUhtYWMiLCJjcmVhdGVTaWduIiwiLi9icm93c2VySG1hYyIsIi4vYnJvd3Nlck1kNSIsIi4vYnJvd3NlclNoYTEiLCIuL2Jyb3dzZXJTaGEyNTYiLCIxMiIsIkJ1ZmZlciIsImlzRW1wdHlEYXRhIiwiY29udmVydFRvQnVmZmVyIiwiYnl0ZU9mZnNldCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiYnVmZmVyLyIsIjEzIiwiaGFzaCIsIm91dGVyIiwiQkxPQ0tfU0laRSIsImRpZ2VzdCIsImZpbmlzaGVkIiwiLi9icm93c2VySGFzaFV0aWxzIiwiMTQiLCJidWZmZXJMZW5ndGgiLCJieXRlc0hhc2hlZCIsInNldFVpbnQ4IiwiaGFzaEJ1ZmZlciIsInNldFVpbnQzMiIsImZsb29yIiwiZ2V0VWludDMyIiwiMTUiLCJoMCIsImgxIiwiaDIiLCJoMyIsImg0IiwiYmxvY2siLCJVaW50MzJBcnJheSIsInRvdGFsTGVuZ3RoIiwicG93Iiwid3JpdGUiLCJwcm9jZXNzQmxvY2siLCIxNiIsInRlbXAiLCJJbnQzMkFycmF5IiwiMTciLCJjcnlwdG8iLCJsaWIiLCJxdWVyeXN0cmluZyIsInJlYWxDbG9jayIsImVudmlyb25tZW50IiwiY3JlYXRlRXZlbnRTdHJlYW0iLCJpc0Jyb3dzZXIiLCJpc05vZGUiLCJYTUwiLCJQYXJzZXIiLCJicm93c2VyIiwiLi9icm93c2VyQ3J5cHRvTGliIiwiLi9jb3JlIiwiLi9jcmVkZW50aWFscyIsIi4vY3JlZGVudGlhbHMvY2hhaW5hYmxlX3RlbXBvcmFyeV9jcmVkZW50aWFscyIsIi4vY3JlZGVudGlhbHMvY29nbml0b19pZGVudGl0eV9jcmVkZW50aWFscyIsIi4vY3JlZGVudGlhbHMvY3JlZGVudGlhbF9wcm92aWRlcl9jaGFpbiIsIi4vY3JlZGVudGlhbHMvc2FtbF9jcmVkZW50aWFscyIsIi4vY3JlZGVudGlhbHMvdGVtcG9yYXJ5X2NyZWRlbnRpYWxzIiwiLi9jcmVkZW50aWFscy93ZWJfaWRlbnRpdHlfY3JlZGVudGlhbHMiLCIuL2V2ZW50LXN0cmVhbS9idWZmZXJlZC1jcmVhdGUtZXZlbnQtc3RyZWFtIiwiLi9odHRwL3hociIsIi4vcmVhbGNsb2NrL2Jyb3dzZXJDbG9jayIsIi4vdXRpbCIsIi4veG1sL2Jyb3dzZXJfcGFyc2VyIiwiX3Byb2Nlc3MiLCJxdWVyeXN0cmluZy8iLCJ1cmwvIiwiMTgiLCJ1dGlsIiwiaW5oZXJpdCIsImV4dHJhY3RDcmVkZW50aWFscyIsImVhY2giLCJnZXRDcmVkZW50aWFscyIsImFjY2Vzc0tleUlkIiwic2VjcmV0QWNjZXNzS2V5IiwiY3JlZGVudGlhbFByb3ZpZGVyIiwiaGFzU2VydmljZSIsImxvYWRGcm9tUGF0aCIsInJlYWRGaWxlU3luYyIsIkZpbGVTeXN0ZW1DcmVkZW50aWFscyIsIkNyZWRlbnRpYWxQcm92aWRlckNoYWluIiwicHJvdmlkZXJzIiwibWVyZ2UiLCJhcGlWZXJzaW9ucyIsImh0dHBPcHRpb25zIiwibWF4UmVkaXJlY3RzIiwicGFyYW1WYWxpZGF0aW9uIiwic3NsRW5hYmxlZCIsInMzRm9yY2VQYXRoU3R5bGUiLCJzM0J1Y2tldEVuZHBvaW50IiwiczNEaXNhYmxlQm9keVNpZ25pbmciLCJjb21wdXRlQ2hlY2tzdW1zIiwiY29udmVydFJlc3BvbnNlVHlwZXMiLCJjb3JyZWN0Q2xvY2tTa2V3IiwiY3VzdG9tVXNlckFnZW50IiwiZHluYW1vRGJDcmMzMiIsInN5c3RlbUNsb2NrT2Zmc2V0Iiwic2lnbmF0dXJlQ2FjaGUiLCJyZXRyeURlbGF5T3B0aW9ucyIsInVzZUFjY2VsZXJhdGVFbmRwb2ludCIsImNsaWVudFNpZGVNb25pdG9yaW5nIiwiZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkIiwiZW5kcG9pbnRDYWNoZVNpemUiLCJob3N0UHJlZml4RW5hYmxlZCIsInN0c1JlZ2lvbmFsRW5kcG9pbnRzIiwiY29weSIsInNldFByb21pc2VzRGVwZW5kZW5jeSIsIlJlcXVlc3QiLCJTMyIsIk1hbmFnZWRVcGxvYWQiLCJhZGRQcm9taXNlcyIsImdldFByb21pc2VzRGVwZW5kZW5jeSIsIjE5IiwiVkVSU0lPTiIsIlNpZ25lcnMiLCJQcm90b2NvbCIsIkpzb24iLCJRdWVyeSIsIlJlc3QiLCJSZXN0SnNvbiIsIlJlc3RYbWwiLCJCdWlsZGVyIiwiTW9kZWwiLCJBcGkiLCJPcGVyYXRpb24iLCJTaGFwZSIsIlBhZ2luYXRvciIsIlJlc291cmNlV2FpdGVyIiwiRW5kcG9pbnRDYWNoZSIsImV2ZW50cyIsIlNlcXVlbnRpYWxFeGVjdXRvciIsIm1lbW9pemVkUHJvcGVydHkiLCIuLi92ZW5kb3IvZW5kcG9pbnQtY2FjaGUiLCIuL2FwaV9sb2FkZXIiLCIuL2NvbmZpZyIsIi4vZXZlbnRfbGlzdGVuZXJzIiwiLi9odHRwIiwiLi9qc29uL2J1aWxkZXIiLCIuL2pzb24vcGFyc2VyIiwiLi9tb2RlbC9hcGkiLCIuL21vZGVsL29wZXJhdGlvbiIsIi4vbW9kZWwvcGFnaW5hdG9yIiwiLi9tb2RlbC9yZXNvdXJjZV93YWl0ZXIiLCIuL21vZGVsL3NoYXBlIiwiLi9wYXJhbV92YWxpZGF0b3IiLCIuL3Byb3RvY29sL2pzb24iLCIuL3Byb3RvY29sL3F1ZXJ5IiwiLi9wcm90b2NvbC9yZXN0IiwiLi9wcm90b2NvbC9yZXN0X2pzb24iLCIuL3Byb3RvY29sL3Jlc3RfeG1sIiwiLi9yZXF1ZXN0IiwiLi9yZXNvdXJjZV93YWl0ZXIiLCIuL3Jlc3BvbnNlIiwiLi9zZXF1ZW50aWFsX2V4ZWN1dG9yIiwiLi9zZXJ2aWNlIiwiLi9zaWduZXJzL3JlcXVlc3Rfc2lnbmVyIiwiLi94bWwvYnVpbGRlciIsIjIwIiwiaGlkZVByb3BlcnRpZXMiLCJleHBpcmVkIiwiZXhwaXJlVGltZSIsInJlZnJlc2hDYWxsYmFja3MiLCJzZXNzaW9uVG9rZW4iLCJleHBpcnlXaW5kb3ciLCJuZWVkc1JlZnJlc2giLCJkYXRlIiwiZ2V0RGF0ZSIsInJlZnJlc2giLCJjb2FsZXNjZVJlZnJlc2giLCJsb2FkIiwiYXJyYXlFYWNoIiwiZGVmZXIiLCJhZGRQcm9taXNlc1RvQ2xhc3MiLCJnZXRQcm9taXNlIiwicHJvbWlzaWZ5TWV0aG9kIiwicmVmcmVzaFByb21pc2UiLCJkZWxldGVQcm9taXNlc0Zyb21DbGFzcyIsIjIxIiwiQ2hhaW5hYmxlVGVtcG9yYXJ5Q3JlZGVudGlhbHMiLCJ0b2tlbkNvZGVGbiIsIm1hc3RlckNyZWRlbnRpYWxzIiwic3RzQ29uZmlnIiwic2VydmljZSIsImZuIiwiZ2V0VG9rZW5Db2RlIiwiY3JlZGVudGlhbHNGcm9tIiwiLi4vLi4vY2xpZW50cy9zdHMiLCIuLi9jb3JlIiwiMjIiLCJDb2duaXRvSWRlbnRpdHlDcmVkZW50aWFscyIsImxvY2FsU3RvcmFnZUtleSIsIl9pZGVudGl0eUlkIiwiX2NsaWVudENvbmZpZyIsImxvYWRDYWNoZWRJZCIsImNyZWF0ZUNsaWVudHMiLCJnZXRJZCIsImNsZWFySWRPbk5vdEF1dGhvcml6ZWQiLCJnZXRDcmVkZW50aWFsc0Zyb21TVFMiLCJnZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5IiwiY2xlYXJDYWNoZWRJZCIsIkxvZ2luSWQiLCJzdG9yYWdlIiwiY29nbml0byIsImxvYWRDcmVkZW50aWFscyIsImNhY2hlSWQiLCJnZXRPcGVuSWRUb2tlbiIsIndlYklkZW50aXR5Q3JlZGVudGlhbHMiLCJnZXRTdG9yYWdlIiwiV2ViSWRlbnRpdHlDcmVkZW50aWFscyIsInNldFN0b3JhZ2UiLCIuLi8uLi9jbGllbnRzL2NvZ25pdG9pZGVudGl0eSIsIjIzIiwiZGVmYXVsdFByb3ZpZGVycyIsInJlc29sdmVDYWxsYmFja3MiLCJyZXNvbHZlUHJvbWlzZSIsIjI0IiwiU0FNTENyZWRlbnRpYWxzIiwiYXNzdW1lUm9sZVdpdGhTQU1MIiwiMjUiLCJUZW1wb3JhcnlDcmVkZW50aWFscyIsImxvYWRNYXN0ZXJDcmVkZW50aWFscyIsImFzc3VtZVJvbGUiLCJnZXRTZXNzaW9uVG9rZW4iLCIyNiIsImFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHkiLCIyNyIsImFwaSIsImVuZHBvaW50RGlzY292ZXJ5SWQiLCJpc0xvY2F0aW9uTmFtZSIsIm9wZXJhdGlvbiIsImVuZHBvaW50Q2FjaGUiLCJBZGRyZXNzIiwiaHR0cFJlcXVlc3QiLCJ1cGRhdGVFbmRwb2ludCIsIm1ha2VSZXF1ZXN0IiwiZW5kcG9pbnRPcGVyYXRpb24iLCJJZGVudGlmaWVycyIsInJlbW92ZUxpc3RlbmVyIiwiRXZlbnRMaXN0ZW5lcnMiLCJDb3JlIiwiVkFMSURBVEVfUEFSQU1FVEVSUyIsIlJFVFJZX0NIRUNLIiwicHV0IiwiQ2FjaGVQZXJpb2RJbk1pbnV0ZXMiLCJFbmRwb2ludHMiLCJnZXRLZXlTdHJpbmciLCJyZXRyeWFibGUiLCJyZW1vdmUiLCJodHRwUmVzcG9uc2UiLCJzdGF0dXNDb2RlIiwiZW52IiwiaW5pTG9hZGVyIiwibG9hZEZyb20iLCJpc0NvbmZpZyIsImZpbGVuYW1lIiwic2hhcmVkQ29uZmlnRmlsZUVudiIsIkFXU19QUk9GSUxFIiwiZGVmYXVsdFByb2ZpbGUiLCJlbmRwb2ludF9kaXNjb3ZlcnlfZW5hYmxlZCIsImRpc2NvdmVyRW5kcG9pbnQiLCJfb3JpZ2luYWxDb25maWciLCJzZXJ2aWNlSWRlbnRpZmllciIsIkJvb2xlYW4iLCJpc1ByZXNpZ25lZCIsImFwcGVuZFRvVXNlckFnZW50IiwiZW5kcG9pbnREaXNjb3ZlcnlSZXF1aXJlZCIsImFkZE5hbWVkTGlzdGVuZXIiLCJyZXF1aXJlZERpc2NvdmVyRW5kcG9pbnQiLCJvcHRpb25hbERpc2NvdmVyRW5kcG9pbnQiLCJtYXJzaGFsbEN1c3RvbUlkZW50aWZpZXJzIiwiZ2V0Q2FjaGVLZXkiLCJpbnZhbGlkYXRlQ2FjaGVkRW5kcG9pbnQiLCIyOCIsImV2ZW50TWVzc2FnZUNodW5rZXIiLCJwYXJzZUV2ZW50IiwiLi4vZXZlbnQtc3RyZWFtL2V2ZW50LW1lc3NhZ2UtY2h1bmtlciIsIi4vcGFyc2UtZXZlbnQiLCIyOSIsInJlYWRJbnQzMkJFIiwiMzAiLCJpc0J1ZmZlciIsImJ5dGVzIiwidG9CdWZmZXIiLCJmcm9tTnVtYmVyIiwiYWJzIiwicm91bmQiLCJJbnQ2NCIsIjMxIiwicGFyc2VNZXNzYWdlIiwiZXZlbnRQYXlsb2FkTWVtYmVyTmFtZSIsImV2ZW50SGVhZGVyTWVtYmVyTmFtZXMiLCJ0b1R5cGUiLCIuL3BhcnNlLW1lc3NhZ2UiLCIzMiIsInJlYWRVSW50OCIsInJlYWRJbnQ4IiwicmVhZEludDE2QkUiLCJyZWFkVUludDE2QkUiLCJzdWJzdHIiLCJzcGxpdE1lc3NhZ2UiLCIuL2ludDY0IiwiLi9zcGxpdC1tZXNzYWdlIiwiMzMiLCJyZWFkVUludDMyQkUiLCJjcmMzMiIsIjM0IiwiYWRkTmFtZWRMaXN0ZW5lcnMiLCJpc0dsb2JhbEVuZHBvaW50IiwiaWRlbXBvdGVudE1lbWJlcnMiLCJ1dWlkIiwidjQiLCJQYXJhbVZhbGlkYXRvciIsImhhbHRIYW5kbGVyc09uRXJyb3IiLCJhdXRodHlwZSIsImdldFNpZ25lckNsYXNzIiwiVjQiLCJjb21wdXRlU2hhMjU2IiwiZ2V0UmVxdWVzdFBheWxvYWRTaGFwZSIsInN0cmluZyIsImlzU3RyZWFtaW5nIiwicmVxdWlyZXNMZW5ndGgiLCJIb3N0IiwiSHR0cFJlcXVlc3QiLCJyZXRyeUNvdW50IiwiZ2V0U2tld0NvcnJlY3RlZERhdGUiLCJzZXRTZXJ2aWNlQ2xpZW50SWQiLCJfY2xpZW50SWQiLCJBdXRob3JpemF0aW9uIiwiYWRkQXV0aG9yaXphdGlvbiIsInNpZ25lZEF0Iiwic3VjY2Vzc2Z1bFJlc3BvbnNlIiwic3RyZWFtIiwiZW1pdCIsInN0cmVhbWluZyIsIkh0dHBDbGllbnQiLCJzdHJlYW1zQXBpVmVyc2lvbiIsImhhc0V2ZW50T3V0cHV0IiwicmVhZCIsImRpZENhbGxiYWNrIiwiaG9zdG5hbWUiLCJnZXRJbnN0YW5jZSIsImhhbmRsZVJlcXVlc3QiLCJfYWJvcnRDYWxsYmFjayIsInN0YXR1c01lc3NhZ2UiLCJidWZmZXJzIiwiaXNDbG9ja1NrZXdlZCIsImFwcGx5Q2xvY2tPZmZzZXQiLCJsb2FkZWQiLCJ0b3RhbCIsInJldHJ5YWJsZUVycm9yIiwiY2xvY2tTa2V3RXJyb3IiLCJFbmRwb2ludCIsInJlZGlyZWN0IiwicmVkaXJlY3RDb3VudCIsInJldHJ5RGVsYXkiLCJyZXRyeURlbGF5cyIsIkNvcmVQb3N0IiwiZXh0cmFjdFJlcXVlc3RJZCIsImVycm5vIiwib3JpZ2luYWxFcnJvciIsInN0YXJ0VGltZSIsImlzVFRZIiwiaXNTZW5zaXRpdmUiLCJpbnNwZWN0IiwibG93ZXJGaXJzdCIsImJ1aWxkUmVxdWVzdCIsImV4dHJhY3REYXRhIiwiZXh0cmFjdEVycm9yIiwiLi9kaXNjb3Zlcl9lbmRwb2ludCIsIjM1IiwidXJsUGFyc2UiLCJfdXNlckFnZW50Iiwic2V0VXNlckFnZW50IiwiZ2V0VXNlckFnZW50SGVhZGVyTmFtZSIsInVzZXJBZ2VudCIsImdldFVzZXJBZ2VudCIsInBhdGhuYW1lIiwic2VhcmNoIiwicXVlcnlTdHJpbmdQYXJzZSIsInF1ZXJ5UGFyYW1zVG9TdHJpbmciLCJIdHRwUmVzcG9uc2UiLCJjcmVhdGVVbmJ1ZmZlcmVkU3RyZWFtIiwic2luZ2xldG9uIiwiMzYiLCJFdmVudEVtaXR0ZXIiLCJYSFJDbGllbnQiLCJIRUFERVJTX1JFQ0VJVkVEIiwicGFyc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwiRE9ORSIsImZpbmlzaFJlcXVlc3QiLCJ1cGxvYWQiLCJ4aHJBc3luYyIsInhocldpdGhDcmVkZW50aWFscyIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsIi4uL2h0dHAiLCIzNyIsInRvV2lyZUZvcm1hdCIsImJ1aWxkIiwiLi4vdXRpbCIsIjM4IiwiMzkiLCJ0aW1lc3RhbXBGb3JtYXQiLCJlbmRwb2ludG9wZXJhdGlvbiIsIndhaXRlcnMiLCJkb2N1bWVudGF0aW9uIiwiZG9jdW1lbnRhdGlvblVybCIsIi4vY29sbGVjdGlvbiIsIi4vb3BlcmF0aW9uIiwiLi9wYWdpbmF0b3IiLCIuL3NoYXBlIiwiNDAiLCI0MSIsImVuZHBvaW50ZGlzY292ZXJ5IiwiZXJyb3JzIiwiaXNJZGVtcG90ZW50IiwiaXNFdmVudFN0cmVhbSIsIjQyIiwibW9yZV9yZXN1bHRzIiwicmVzdWx0X2tleSIsIjQzIiwiNDQiLCJtaW4iLCJwYXR0ZXJuIiwieG1sTmFtZSIsInF1ZXJ5TmFtZSIsImlzQ29tcG9zaXRlIiwianNvbnZhbHVlIiwic2Vuc2l0aXZlIiwiZXZlbnRzdHJlYW0iLCJldmVudHBheWxvYWQiLCJldmVudGhlYWRlciIsImlzVGltZXN0YW1wRm9ybWF0U2V0IiwiZW5kcG9pbnRkaXNjb3ZlcnlpZCIsImhvc3RMYWJlbCIsInhtbEF0dHJpYnV0ZSIsImZsYXR0ZW5lZCIsImlzU2hhcGUiLCJ4bWxPcmRlciIsIm1lbWJlck5hbWVzIiwiaXNFdmVudFBheWxvYWQiLCJpc0V2ZW50SGVhZGVyIiwiaXNKc29uVmFsdWUiLCJiYXNlNjQiLCJkZWNvZGUiLCJhbGxvYyIsImZpbGwiLCJub3JtYWxpemVkVHlwZXMiLCJjaGFyYWN0ZXIiLCJkb3VibGUiLCJsb25nIiwic2hvcnQiLCJiaWdpbnRlZ2VyIiwiYmlnZGVjaW1hbCIsImJsb2IiLCJ0eXBlcyIsInN0cnVjdHVyZSIsImxpc3QiLCJib29sZWFuIiwidGltZXN0YW1wIiwidG9VVENTdHJpbmciLCJwYXJzZVRpbWVzdGFtcCIsImZsb2F0IiwiaW50ZWdlciIsImJpbmFyeSIsIlN0cnVjdHVyZVNoYXBlIiwiTGlzdFNoYXBlIiwiTWFwU2hhcGUiLCJTdHJpbmdTaGFwZSIsIkJvb2xlYW5TaGFwZSIsIkJhc2U2NFNoYXBlIiwiNDUiLCJ2YWxpZGF0aW9uIiwidmFsaWRhdGVNZW1iZXIiLCJmYWlsIiwidmFsaWRhdGVTdHJ1Y3R1cmUiLCJ2YWxpZGF0ZVR5cGUiLCJ2YWxpZGF0ZUxpc3QiLCJ2YWxpZGF0ZU1hcCIsInZhbGlkYXRlU2NhbGFyIiwidmFsaWRhdGVSYW5nZSIsInZhbGlkYXRlU3RyaW5nIiwidmFsaWRhdGVQYXlsb2FkIiwidmFsaWRhdGVOdW1iZXIiLCJ2YWxpZGF0ZUVudW0iLCJ2YWxpZGF0ZVBhdHRlcm4iLCJ2YWxpZGF0ZVVyaSIsImlzVHlwZSIsInR5cGVOYW1lIiwiU3RyZWFtIiwiQmxvYiIsIjQ2IiwicG9wdWxhdGVIb3N0UHJlZml4IiwiaG9zdFByZWZpeCIsIjQ3IiwiX190eXBlIiwiLi4vanNvbi9idWlsZGVyIiwiLi4vanNvbi9wYXJzZXIiLCIuL2hlbHBlcnMiLCI0OCIsIlZlcnNpb24iLCJBY3Rpb24iLCJzZXJpYWxpemUiLCJDb2RlIiwicmVxdWVzdElkIiwiRXJyb3JzIiwiX1hBTVpSZXF1ZXN0SWQiLCIuLi9tb2RlbC9zaGFwZSIsIi4uL3F1ZXJ5L3F1ZXJ5X3BhcmFtX3NlcmlhbGl6ZXIiLCI0OSIsInVyaUVzY2FwZVBhdGgiLCJ1cmlFc2NhcGUiLCJodHRwTWV0aG9kIiwiaHR0cFBhdGgiLCJnZW5lcmF0ZVVSSSIsIjUwIiwiLi9qc29uIiwiLi9yZXN0IiwiNTEiLCJ0b1hNTCIsInVwcGVyRmlyc3QiLCI1MiIsImlzUXVlcnlOYW1lIiwiNTMiLCJwZXJmb3JtYW5jZSIsIjU0IiwicnVsZXMiLCJwYXR0ZXJucyIsInVzZUR1YWxzdGFjayIsImlzRHVhbHN0YWNrQXZhaWxhYmxlIiwiLi9yZWdpb25fY29uZmlnX2RhdGEuanNvbiIsIjU1IiwiKi8qIiwiY24tKi8qIiwiKi9idWRnZXRzIiwiKi9jbG91ZGZyb250IiwiKi9pYW0iLCIqL3N0cyIsIiovaW1wb3J0ZXhwb3J0IiwiKi9yb3V0ZTUzIiwiKi93YWYiLCJ1cy1nb3YtKi9pYW0iLCJ1cy1nb3YtKi9zdHMiLCJ1cy1nb3Ytd2VzdC0xL3MzIiwidXMtd2VzdC0xL3MzIiwidXMtd2VzdC0yL3MzIiwiZXUtd2VzdC0xL3MzIiwiYXAtc291dGhlYXN0LTEvczMiLCJhcC1zb3V0aGVhc3QtMi9zMyIsImFwLW5vcnRoZWFzdC0xL3MzIiwic2EtZWFzdC0xL3MzIiwidXMtZWFzdC0xL3MzIiwidXMtZWFzdC0xL3NkYiIsIiovc2RiIiwiZ2xvYmFsU1NMIiwiZ2xvYmFsR292Q2xvdWQiLCJzM3NpZ25hdHVyZSIsIjU2IiwiZG9tYWluIiwiY29tcGxldGUiLCJzZXR1cFN0YXRlcyIsIl9oYWx0SGFuZGxlcnNPbkVycm9yIiwiX2FzbSIsImN1cnJlbnRTdGF0ZSIsIkRvbWFpbiIsImRvbWFpbkVtaXR0ZXIiLCJkb21haW5UaHJvd24iLCJhZGRTdGF0ZSIsImFjdGl2ZSIsIlJlc3BvbnNlIiwic3RhdGVzIiwiZW1pdEV2ZW50IiwicnVuVG8iLCJhYm9ydCIsInJlbW92ZUFsbExpc3RlbmVycyIsImVhY2hQYWdlIiwibWFrZUFzeW5jIiwiaGFzTmV4dFBhZ2UiLCJuZXh0UGFnZSIsIm5vb3AiLCJlYWNoSXRlbSIsInBhZ2luYXRpb25Db25maWciLCJyZXN1bHRLZXkiLCJpc1BhZ2VhYmxlIiwiY3JlYXRlUmVhZFN0cmVhbSIsIlBhc3NUaHJvdWdoIiwibmV4dFRpY2siLCJyZWFkYWJsZSIsInNlbnQiLCJIVFRQX0RBVEEiLCJIVFRQX0VSUk9SIiwiX3dyaXRlIiwidW5waXBlIiwicGlwZSIsImV2ZW50UGFyYW1ldGVycyIsInByZXNpZ24iLCJQcmVzaWduIiwidG9HZXQiLCJ0b1VuYXV0aGVudGljYXRlZCIsIl91bkF1dGhlbnRpY2F0ZWQiLCJWQUxJREFURV9DUkVERU5USUFMUyIsIlNJR04iLCJidWlsZEFzR2V0IiwiYWRkTGlzdGVuZXIiLCJwcm9taXNlIiwibWl4aW4iLCIuL3N0YXRlX21hY2hpbmUiLCJqbWVzcGF0aCIsIjU3IiwiX3dhaXRlciIsImFjY2VwdG9ycyIsIm1hdGNoZXJzIiwibWF0Y2hlciIsImV4cGVjdGVkIiwic2V0U3VjY2VzcyIsInNldEVycm9yIiwibG9hZFdhaXRlckNvbmZpZyIsInN0cmljdERlZXBFcXVhbCIsInBhdGhBbGwiLCJwYXRoQW55IiwibGlzdGVuZXJzIiwid2FpdCIsIiR3YWl0ZXIiLCJtYXhBdHRlbXB0cyIsImFkZExpc3RlbmVycyIsIjU4IiwibnVtUmV0cmllcyIsIm5leHRQYWdlVG9rZW5zIiwiaW5wdXRUb2tlbiIsImNhY2hlTmV4dFBhZ2VUb2tlbnMiLCJtb3JlUmVzdWx0cyIsIm91dHB1dFRva2VuIiwiNTkiLCJfZXZlbnRzIiwib25Bc3luYyIsIl9pc0FzeW5jIiwiY2FsbExpc3RlbmVycyIsImFkZE5hbWVkQXN5bmNMaXN0ZW5lciIsIjYwIiwibG9hZFNlcnZpY2VDbGFzcyIsImluaXRpYWxpemUiLCJ2YWxpZGF0ZVNlcnZpY2UiLCJlbmRwb2ludEZyb21UZW1wbGF0ZSIsInNldEVuZHBvaW50IiwiYWRkRGVmYXVsdE1vbml0b3JpbmdMaXN0ZW5lcnMiLCJfY2xpZW50U2lkZU1vbml0b3JpbmciLCJwdWJsaXNoZXIiLCJldmVudEhhbmRsZXIiLCJpc0VtcHR5IiwiYXBpQ29uZmlnIiwiZGVmaW5lU2VydmljZUFwaSIsImdldExhdGVzdFNlcnZpY2VDbGFzcyIsImdldExhdGVzdFNlcnZpY2VWZXJzaW9uIiwiaXNvODYwMSIsImRlZmF1bHRSZXRyeUNvdW50IiwiY3VzdG9taXplUmVxdWVzdHMiLCJjdXN0b21SZXF1ZXN0SGFuZGxlciIsImFkZEFsbFJlcXVlc3RMaXN0ZW5lcnMiLCJhdHRhY2hNb25pdG9yaW5nRW1pdHRlciIsIm1ha2VVbmF1dGhlbnRpY2F0ZWRSZXF1ZXN0Iiwid2FpdEZvciIsInNlcnZpY2VJbnRlcmZhY2UiLCJzZXR1cFJlcXVlc3RMaXN0ZW5lcnMiLCJhcGlDYWxsRXZlbnQiLCJSZWdpb24iLCJNYXhSZXRyaWVzRXhjZWVkZWQiLCJVc2VyQWdlbnQiLCJGaW5hbEh0dHBTdGF0dXNDb2RlIiwiRmluYWxBd3NFeGNlcHRpb24iLCJGaW5hbEF3c0V4Y2VwdGlvbk1lc3NhZ2UiLCJGaW5hbFNka0V4Y2VwdGlvbiIsIkZpbmFsU2RrRXhjZXB0aW9uTWVzc2FnZSIsImFwaUF0dGVtcHRFdmVudCIsIkZxZG4iLCJIdHRwU3RhdHVzQ29kZSIsIkFjY2Vzc0tleSIsIlhBbXpuUmVxdWVzdElkIiwiWEFtelJlcXVlc3RJZCIsIlhBbXpJZDIiLCJhdHRlbXB0RmFpbEV2ZW50IiwiQXdzRXhjZXB0aW9uIiwiQXdzRXhjZXB0aW9uTWVzc2FnZSIsIlNka0V4Y2VwdGlvbiIsIlNka0V4Y2VwdGlvbk1lc3NhZ2UiLCJUaW1lc3RhbXAiLCJBdHRlbXB0TGF0ZW5jeSIsIkF0dGVtcHRDb3VudCIsIkxhdGVuY3kiLCJSZXF1ZXN0U2lnbmVyIiwiZ2V0VmVyc2lvbiIsImNhbGN1bGF0ZVJldHJ5RGVsYXkiLCJ0aW1lb3V0RXJyb3IiLCJuZXR3b3JraW5nRXJyb3IiLCJleHBpcmVkQ3JlZGVudGlhbHNFcnJvciIsInRocm90dGxlZEVycm9yIiwicGFnaW5hdG9yIiwiZGVmaW5lTWV0aG9kcyIsIl9zZXJ2aWNlTWFwIiwiYWRkVmVyc2lvbnMiLCJQdWJsaXNoZXIiLCJjb25maWdQcm92aWRlciIsImVuYWJsZWQiLCJpc0FwaSIsIi4vcmVnaW9uX2NvbmZpZyIsIjYxIiwiNjIiLCJ2YWxpZGF0ZVJlZ2lvbmFsRW5kcG9pbnRzRmxhZ1ZhbHVlIiwidmFsaWRhdGVSZWdpb25hbEVuZHBvaW50c0ZsYWciLCJBV1NfU1RTX1JFR0lPTkFMX0VORFBPSU5UUyIsImdldFByb2ZpbGVzRnJvbVNoYXJlZENvbmZpZyIsInN0c19yZWdpb25hbF9lbmRwb2ludHMiLCJvcHRJblJlZ2lvbmFsRW5kcG9pbnQiLCIuLi9yZWdpb25fY29uZmlnIiwiNjMiLCJ1bml4VGltZXN0YW1wIiwiQVdTQWNjZXNzS2V5SWQiLCJTaWduYXR1cmUiLCJFeHBpcmVzIiwiU0VUX0NPTlRFTlRfTEVOR1RIIiwiQ09NUFVURV9TSEEyNTYiLCJ1cmxGb3JtYXQiLCI2NCIsInNlcnZpY2VDbGllbnRJZCIsImdldFNlcnZpY2VDbGllbnRJZCIsIlYyIiwiVjMiLCJWM0h0dHBzIiwiLi9wcmVzaWduIiwiLi9zMyIsIi4vdjIiLCIuL3YzIiwiLi92M2h0dHBzIiwiLi92NCIsIjY1Iiwic3ViUmVzb3VyY2VzIiwiYWNsIiwiYWNjZWxlcmF0ZSIsImFuYWx5dGljcyIsImxpZmVjeWNsZSIsImludmVudG9yeSIsImxvZ2dpbmciLCJtZXRyaWNzIiwibm90aWZpY2F0aW9uIiwicGFydE51bWJlciIsInBvbGljeSIsInJlcXVlc3RQYXltZW50IiwicmVwbGljYXRpb24iLCJ0YWdnaW5nIiwidG9ycmVudCIsInVwbG9hZElkIiwidXBsb2FkcyIsInZlcnNpb25JZCIsInZlcnNpb25pbmciLCJ3ZWJzaXRlIiwicmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UtY29udGVudC10eXBlIiwicmVzcG9uc2UtY29udGVudC1sYW5ndWFnZSIsInJlc3BvbnNlLWV4cGlyZXMiLCJyZXNwb25zZS1jYWNoZS1jb250cm9sIiwicmVzcG9uc2UtY29udGVudC1kaXNwb3NpdGlvbiIsInJlc3BvbnNlLWNvbnRlbnQtZW5jb2RpbmciLCJyZmM4MjIiLCJzdHJpbmdUb1NpZ24iLCJjYW5vbmljYWxpemVkQW16SGVhZGVycyIsImNhbm9uaWNhbGl6ZWRSZXNvdXJjZSIsInZpcnR1YWxIb3N0ZWRCdWNrZXQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJobWFjIiwiNjYiLCJTaWduYXR1cmVWZXJzaW9uIiwiU2lnbmF0dXJlTWV0aG9kIiwiU2VjdXJpdHlUb2tlbiIsInNpZ25hdHVyZSIsIjY3IiwiYXV0aG9yaXphdGlvbiIsInNpZ25lZEhlYWRlcnMiLCJoZWFkZXJzVG9TaWduIiwiY2Fub25pY2FsSGVhZGVycyIsInRyaW0iLCJzaGEyNTYiLCI2OCIsIjY5Iiwic2VydmljZU5hbWUiLCJhbGdvcml0aG0iLCJ1cGRhdGVGb3JQcmVzaWduZWQiLCJhZGRIZWFkZXJzIiwiY3JlZGVudGlhbFN0cmluZyIsIlgtQW16LURhdGUiLCJYLUFtei1BbGdvcml0aG0iLCJYLUFtei1DcmVkZW50aWFsIiwiWC1BbXotRXhwaXJlcyIsIlgtQW16LVNpZ25lZEhlYWRlcnMiLCJpc1NpZ25hYmxlSGVhZGVyIiwiZ2V0U2lnbmluZ0tleSIsImhleEVuY29kZWRIYXNoIiwiY2Fub25pY2FsU3RyaW5nIiwiaGV4RW5jb2RlZEJvZHlIYXNoIiwiY2Fub25pY2FsSGVhZGVyVmFsdWVzIiwiY3JlYXRlU2NvcGUiLCJ1bnNpZ25hYmxlSGVhZGVycyIsIi4vdjRfY3JlZGVudGlhbHMiLCI3MCIsImVtcHR5Q2FjaGUiLCI3MSIsImFjY2VwdCIsIjcyIiwiZW5naW5lIiwicGxhdGZvcm0iLCJBV1NfRVhFQ1VUSU9OX0VOViIsImVuY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZSIsInRvU3RyZWFtIiwiUmVhZGFibGUiLCJfcmVhZCIsImxzdGF0U3luYyIsImluaSIsInRvSVNPU3RyaW5nIiwiY3JjMzJUYWJsZSIsIm1kNSIsImFycmF5U2xpY2VGbiIsIkZpbGVSZWFkZXIiLCJfY29udGludWVSZWFkaW5nIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJ0b0hleCIsIndlYmtpdFNsaWNlIiwibW96U2xpY2UiLCJ0aW1lIiwiX19zdXBlcl9fIiwiaG9pc3RQYXlsb2FkTWVtYmVyIiwiUmVzcG9uc2VNZXRhZGF0YSIsIlJlcXVlc3RJZCIsImN1c3RvbUJhY2tvZmYiLCJiYXNlIiwiaGFuZGxlUmVxdWVzdFdpdGhSZXRyaWVzIiwicmV0cnlBZnRlciIsImNvbnZlcnRQYXlsb2FkVG9TdHJpbmciLCJjb25maWdPcHRJbkVudiIsInNoYXJlZENyZWRlbnRpYWxzRmlsZUVudiIsImltZHNEaXNhYmxlZEVudiIsInNldEltbWVkaWF0ZSIsIi4uL2FwaXMvbWV0YWRhdGEuanNvbiIsImZzIiwidGltZXJzIiwiNzMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInBhcmVudE5vZGUiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIm5vZGVOYW1lIiwidGV4dENvbnRlbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJjaGlsZE5vZGVzIiwiZ2V0QXR0cmlidXRlIiwiaXNYbWxBdHRyaWJ1dGUiLCJhdHRyaWJ1dGVzIiwiZGVmYXVsdFZhbHVlIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiZG9jdW1lbnRFbGVtZW50IiwiQWN0aXZlWE9iamVjdCIsImFzeW5jIiwibG9hZFhNTCIsIjc0IiwiYWRkQXR0cmlidXRlIiwiYWRkQ2hpbGROb2RlIiwieG1sTmFtZXNwYWNlVXJpIiwieG1sTmFtZXNwYWNlUHJlZml4IiwiWG1sTm9kZSIsIlhtbFRleHQiLCJjaGlsZHJlbiIsIi4veG1sLW5vZGUiLCIuL3htbC10ZXh0IiwiNzUiLCJlc2NhcGVBdHRyaWJ1dGUiLCI3NiIsImVzY2FwZUVsZW1lbnQiLCI3NyIsInJlbW92ZUF0dHJpYnV0ZSIsIi4vZXNjYXBlLWF0dHJpYnV0ZSIsIjc4IiwiLi9lc2NhcGUtZWxlbWVudCIsIjc5IiwidG9CeXRlQXJyYXkiLCJmcm9tQnl0ZUFycmF5IiwiODAiLCI4MSIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJSYW5nZUVycm9yIiwiaXNFbmNvZGluZyIsIlkiLCJaIiwiViIsIlgiLCJQIiwicSIsImxhc3RJbmRleE9mIiwiRyIsIlciLCJSIiwiQSIsIksiLCJKIiwiJCIsIkkiLCJIIiwiTiIsIlUiLCJEIiwiTSIsImoiLCJRIiwiQiIsInoiLCJlZSIsIkYiLCJTbG93QnVmZmVyIiwiSU5TUEVDVF9NQVhfQllURVMiLCJmb28iLCJrTWF4TGVuZ3RoIiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJhbGxvY1Vuc2FmZSIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJlcXVhbHMiLCJpc0Zpbml0ZSIsInRvSlNPTiIsIl9hcnIiLCJyZWFkVUludExFIiwicmVhZFVJbnRCRSIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRJbnRMRSIsInJlYWRJbnRCRSIsInJlYWRJbnQxNkxFIiwicmVhZEludDMyTEUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsImJhc2U2NC1qcyIsImllZWU3NTQiLCJpc2FycmF5IiwiODIiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsInNldE1heExpc3RlbmVycyIsImNvbnRleHQiLCJuZXdMaXN0ZW5lciIsImxpc3RlbmVyIiwid2FybmVkIiwib25jZSIsImxpc3RlbmVyQ291bnQiLCI4MyIsIk5hTiIsIkxOMiIsIjg0IiwiODUiLCJydW50aW1lIiwiX2ludGVycHJldGVyIiwiZnVuY3Rpb25UYWJsZSIsIl9mdW5jIiwiX2Z1bmN0aW9uQWJzIiwiX3NpZ25hdHVyZSIsImF2ZyIsIl9mdW5jdGlvbkF2ZyIsImNlaWwiLCJfZnVuY3Rpb25DZWlsIiwiX2Z1bmN0aW9uQ29udGFpbnMiLCJlbmRzX3dpdGgiLCJfZnVuY3Rpb25FbmRzV2l0aCIsIl9mdW5jdGlvbkZsb29yIiwiX2Z1bmN0aW9uTGVuZ3RoIiwiX2Z1bmN0aW9uTWFwIiwiX2Z1bmN0aW9uTWF4IiwiX2Z1bmN0aW9uTWVyZ2UiLCJ2YXJpYWRpYyIsIm1heF9ieSIsIl9mdW5jdGlvbk1heEJ5Iiwic3VtIiwiX2Z1bmN0aW9uU3VtIiwic3RhcnRzX3dpdGgiLCJfZnVuY3Rpb25TdGFydHNXaXRoIiwiX2Z1bmN0aW9uTWluIiwibWluX2J5IiwiX2Z1bmN0aW9uTWluQnkiLCJfZnVuY3Rpb25UeXBlIiwiX2Z1bmN0aW9uS2V5cyIsIl9mdW5jdGlvblZhbHVlcyIsIl9mdW5jdGlvblNvcnQiLCJzb3J0X2J5IiwiX2Z1bmN0aW9uU29ydEJ5IiwiX2Z1bmN0aW9uSm9pbiIsInJldmVyc2UiLCJfZnVuY3Rpb25SZXZlcnNlIiwidG9fYXJyYXkiLCJfZnVuY3Rpb25Ub0FycmF5IiwidG9fc3RyaW5nIiwiX2Z1bmN0aW9uVG9TdHJpbmciLCJ0b19udW1iZXIiLCJfZnVuY3Rpb25Ub051bWJlciIsIm5vdF9udWxsIiwiX2Z1bmN0aW9uTm90TnVsbCIsInRyaW1MZWZ0IiwiLiIsIioiLCIsIiwiOiIsInsiLCJ9IiwiXSIsIigiLCIpIiwiQCIsIjwiLCI+IiwiPSIsIiEiLCIgIiwiXHQiLCJcbiIsInRva2VuaXplIiwiX2N1cnJlbnQiLCJfY29uc3VtZVVucXVvdGVkSWRlbnRpZmllciIsIl9jb25zdW1lTnVtYmVyIiwiX2NvbnN1bWVMQnJhY2tldCIsIl9jb25zdW1lUXVvdGVkSWRlbnRpZmllciIsIl9jb25zdW1lUmF3U3RyaW5nTGl0ZXJhbCIsIl9jb25zdW1lTGl0ZXJhbCIsIl9jb25zdW1lT3BlcmF0b3IiLCJfbG9va3NMaWtlSlNPTiIsIl9sb2FkVG9rZW5zIiwiZXhwcmVzc2lvbiIsIl9sb29rYWhlYWQiLCJfbG9va2FoZWFkVG9rZW4iLCJ0b2tlbnMiLCJfYWR2YW5jZSIsIm51ZCIsImxlZCIsIk5vdCIsIl9wYXJzZVByb2plY3Rpb25SSFMiLCJTdGFyIiwiX3BhcnNlTXVsdGlzZWxlY3RIYXNoIiwiRmxhdHRlbiIsIl9wYXJzZUluZGV4RXhwcmVzc2lvbiIsIl9wcm9qZWN0SWZTbGljZSIsIl9wYXJzZU11bHRpc2VsZWN0TGlzdCIsIkV4cHJlZiIsIl9tYXRjaCIsIl9lcnJvclRva2VuIiwiRG90IiwiX3BhcnNlRG90UkhTIiwiUGlwZSIsIk9yIiwiQW5kIiwiRmlsdGVyIiwiX3BhcnNlQ29tcGFyYXRvciIsIl9wYXJzZVNsaWNlRXhwcmVzc2lvbiIsInZpc2l0IiwiY29tcHV0ZVNsaWNlUGFyYW1zIiwiY2FsbEZ1bmN0aW9uIiwiam1lc3BhdGhUeXBlIiwiY2FwU2xpY2VSYW5nZSIsIl92YWxpZGF0ZUFyZ3MiLCJfZ2V0VHlwZU5hbWUiLCJfdHlwZU1hdGNoZXMiLCJsb2NhbGVDb21wYXJlIiwiY3JlYXRlS2V5RnVuY3Rpb24iLCJjb21waWxlIiwiODYiLCJydW4iLCJmdW4iLCJ0aXRsZSIsIm9mZiIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIjg3Iiwibm9kZVR5cGUiLCJvdmVyZmxvdyIsIm5vdC1iYXNpYyIsImludmFsaWQtaW5wdXQiLCJ1Y3MyIiwidG9BU0NJSSIsInRvVW5pY29kZSIsInB1bnljb2RlIiwiODgiLCJtYXhLZXlzIiwiODkiLCI5MCIsIi4vZGVjb2RlIiwiLi9lbmNvZGUiLCI5MSIsIjkyIiwiOTMiLCI5NCIsIl9pZCIsIl9jbGVhckZuIiwidW5yZWYiLCJyZWYiLCJlbnJvbGwiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiX29uVGltZW91dCIsImNsZWFySW1tZWRpYXRlIiwicHJvY2Vzcy9icm93c2VyLmpzIiwiOTUiLCJzbGFzaGVzIiwiYXV0aCIsInF1ZXJ5IiwiaHJlZiIsInJlc29sdmVPYmplY3QiLCJqYXZhc2NyaXB0IiwiamF2YXNjcmlwdDoiLCJodHRwcyIsImZ0cCIsImdvcGhlciIsImZpbGUiLCJodHRwOiIsImh0dHBzOiIsImZ0cDoiLCJnb3BoZXI6IiwiZmlsZToiLCJwYXJzZUhvc3QiLCI5NiIsInN1cGVyXyIsIjk3IiwiOTgiLCJzZWVuIiwic3R5bGl6ZSIsImRlcHRoIiwiY29sb3JzIiwic2hvd0hpZGRlbiIsIl9leHRlbmQiLCJjdXN0b21JbnNwZWN0Iiwic3R5bGVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNb250aCIsImRlcHJlY2F0ZSIsInByb2Nlc3MiLCJub0RlcHJlY2F0aW9uIiwidGhyb3dEZXByZWNhdGlvbiIsInRyYWNlRGVwcmVjYXRpb24iLCJkZWJ1Z2xvZyIsIk5PREVfREVCVUciLCJwaWQiLCJib2xkIiwiaXRhbGljIiwidW5kZXJsaW5lIiwiaW52ZXJzZSIsIndoaXRlIiwiZ3JleSIsImJsYWNrIiwiYmx1ZSIsImN5YW4iLCJncmVlbiIsIm1hZ2VudGEiLCJyZWQiLCJ5ZWxsb3ciLCJzcGVjaWFsIiwibnVsbCIsInJlZ2V4cCIsImlzQm9vbGVhbiIsImlzTnVsbCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNTeW1ib2wiLCJpc1VuZGVmaW5lZCIsImlzUmVnRXhwIiwiaXNEYXRlIiwiaXNFcnJvciIsImlzUHJpbWl0aXZlIiwiaW5oZXJpdHMiLCIuL3N1cHBvcnQvaXNCdWZmZXIiLCI5OSIsInYxIiwiLi92MSIsIjEwMCIsIjEwMSIsImdldFJhbmRvbVZhbHVlcyIsIm1zQ3J5cHRvIiwiMTAyIiwibm9kZSIsImNsb2Nrc2VxIiwibXNlY3MiLCJuc2VjcyIsIi4vbGliL2J5dGVzVG9VdWlkIiwiLi9saWIvcm5nIiwiMTAzIiwicm5nIiwiMTA0IiwibWF4U2l6ZSIsImNhY2hlIiwiTFJVQ2FjaGUiLCJwb3B1bGF0ZVZhbHVlIiwiRXhwaXJlIiwiZW1wdHkiLCIuL3V0aWxzL0xSVSIsIjEwNSIsIm5vZGVNYXAiLCJzaXplTGltaXQiLCJwcmVwZW5kVG9MaXN0IiwiaGVhZGVyTm9kZSIsInByZXYiLCJuZXh0IiwidGFpbE5vZGUiLCJyZW1vdmVGcm9tVGFpbCIsImRldGFjaEZyb21MaXN0IiwiMTA2IiwiLi4vYXBpcy9jb25uZWN0cGFydGljaXBhbnQtMjAxOC0wOS0wNy5taW4iLCIuLi9hcGlzL2Nvbm5lY3RwYXJ0aWNpcGFudC0yMDE4LTA5LTA3LnBhZ2luYXRvcnMiLCIuLi9hcGlzL3N0cy0yMDExLTA2LTE1Lm1pbiIsIi4vYnJvd3Nlcl9sb2FkZXIiLCIuL3NlcnZpY2VzL3N0cyIsIndlYnBhY2tQb2x5ZmlsbCIsInBhdGhzIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0Qs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d0MsVUFBVUMsU0FBUzlKLElBQUksR0FBRzdtQyxFQUFFcXhDLElBQUlyeEMsRUFBRXl3QyxRQUFRSSxjQUFjLE1BQU0sQ0FBQyxlQUFlbndDLEVBQUUsbUJBQW1CVixFQUFFMHdDLFVBQVVDLFNBQVM5SixJQUFJbm1DLEVBQUUsK0JBQStCLENBQUMrK0UsNENBQTRDLEVBQUVDLG1EQUFtRCxFQUFFQyw2QkFBNkIsRUFBRUMsbUJBQW1CLEdBQUd4cUMsU0FBUyxHQUFHeXFDLGlCQUFpQixNQUFNLEdBQUcsQ0FBQyxRLCtCQ1YzL2R2aEYsRUFBT0QsUUFBVSxTQUFTQyxHQW9CekIsT0FuQktBLEVBQU93aEYsa0JBQ1h4aEYsRUFBTzY4RSxVQUFZLGFBQ25CNzhFLEVBQU95aEYsTUFBUSxHQUVWemhGLEVBQU9ncUUsV0FBVWhxRSxFQUFPZ3FFLFNBQVcsSUFDeENycEUsT0FBT0MsZUFBZVosRUFBUSxTQUFVLENBQ3ZDYSxZQUFZLEVBQ1pDLElBQUssV0FDSixPQUFPZCxFQUFPRSxLQUdoQlMsT0FBT0MsZUFBZVosRUFBUSxLQUFNLENBQ25DYSxZQUFZLEVBQ1pDLElBQUssV0FDSixPQUFPZCxFQUFPQyxLQUdoQkQsRUFBT3doRixnQkFBa0IsR0FFbkJ4aEYiLCJmaWxlIjoiYW1hem9uLWNvbm5lY3QtY2hhdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA1KTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIi8qIGdsb2JhbCB3aW5kb3csIGV4cG9ydHMsIGRlZmluZSAqL1xuXG4hZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnXG5cbiAgICB2YXIgcmUgPSB7XG4gICAgICAgIG5vdF9zdHJpbmc6IC9bXnNdLyxcbiAgICAgICAgbm90X2Jvb2w6IC9bXnRdLyxcbiAgICAgICAgbm90X3R5cGU6IC9bXlRdLyxcbiAgICAgICAgbm90X3ByaW1pdGl2ZTogL1tedl0vLFxuICAgICAgICBudW1iZXI6IC9bZGllZmddLyxcbiAgICAgICAgbnVtZXJpY19hcmc6IC9bYmNkaWVmZ3V4WF0vLFxuICAgICAgICBqc29uOiAvW2pdLyxcbiAgICAgICAgbm90X2pzb246IC9bXmpdLyxcbiAgICAgICAgdGV4dDogL15bXlxceDI1XSsvLFxuICAgICAgICBtb2R1bG86IC9eXFx4MjV7Mn0vLFxuICAgICAgICBwbGFjZWhvbGRlcjogL15cXHgyNSg/OihbMS05XVxcZCopXFwkfFxcKChbXildKylcXCkpPyhcXCspPygwfCdbXiRdKT8oLSk/KFxcZCspPyg/OlxcLihcXGQrKSk/KFtiLWdpam9zdFR1dnhYXSkvLFxuICAgICAgICBrZXk6IC9eKFthLXpfXVthLXpfXFxkXSopL2ksXG4gICAgICAgIGtleV9hY2Nlc3M6IC9eXFwuKFthLXpfXVthLXpfXFxkXSopL2ksXG4gICAgICAgIGluZGV4X2FjY2VzczogL15cXFsoXFxkKylcXF0vLFxuICAgICAgICBzaWduOiAvXlsrLV0vXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3ByaW50ZihrZXkpIHtcbiAgICAgICAgLy8gYGFyZ3VtZW50c2AgaXMgbm90IGFuIGFycmF5LCBidXQgc2hvdWxkIGJlIGZpbmUgZm9yIHRoaXMgY2FsbFxuICAgICAgICByZXR1cm4gc3ByaW50Zl9mb3JtYXQoc3ByaW50Zl9wYXJzZShrZXkpLCBhcmd1bWVudHMpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdnNwcmludGYoZm10LCBhcmd2KSB7XG4gICAgICAgIHJldHVybiBzcHJpbnRmLmFwcGx5KG51bGwsIFtmbXRdLmNvbmNhdChhcmd2IHx8IFtdKSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzcHJpbnRmX2Zvcm1hdChwYXJzZV90cmVlLCBhcmd2KSB7XG4gICAgICAgIHZhciBjdXJzb3IgPSAxLCB0cmVlX2xlbmd0aCA9IHBhcnNlX3RyZWUubGVuZ3RoLCBhcmcsIG91dHB1dCA9ICcnLCBpLCBrLCBwaCwgcGFkLCBwYWRfY2hhcmFjdGVyLCBwYWRfbGVuZ3RoLCBpc19wb3NpdGl2ZSwgc2lnblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdHJlZV9sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJzZV90cmVlW2ldID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIG91dHB1dCArPSBwYXJzZV90cmVlW2ldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgcGFyc2VfdHJlZVtpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBwaCA9IHBhcnNlX3RyZWVbaV0gLy8gY29udmVuaWVuY2UgcHVycG9zZXMgb25seVxuICAgICAgICAgICAgICAgIGlmIChwaC5rZXlzKSB7IC8vIGtleXdvcmQgYXJndW1lbnRcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndltjdXJzb3JdXG4gICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBwaC5rZXlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJnID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihzcHJpbnRmKCdbc3ByaW50Zl0gQ2Fubm90IGFjY2VzcyBwcm9wZXJ0eSBcIiVzXCIgb2YgdW5kZWZpbmVkIHZhbHVlIFwiJXNcIicsIHBoLmtleXNba10sIHBoLmtleXNbay0xXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmdbcGgua2V5c1trXV1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwaC5wYXJhbV9ubykgeyAvLyBwb3NpdGlvbmFsIGFyZ3VtZW50IChleHBsaWNpdClcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndltwaC5wYXJhbV9ub11cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IC8vIHBvc2l0aW9uYWwgYXJndW1lbnQgKGltcGxpY2l0KVxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd2W2N1cnNvcisrXVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZS5ub3RfdHlwZS50ZXN0KHBoLnR5cGUpICYmIHJlLm5vdF9wcmltaXRpdmUudGVzdChwaC50eXBlKSAmJiBhcmcgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcoKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZS5udW1lcmljX2FyZy50ZXN0KHBoLnR5cGUpICYmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyAmJiBpc05hTihhcmcpKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHNwcmludGYoJ1tzcHJpbnRmXSBleHBlY3RpbmcgbnVtYmVyIGJ1dCBmb3VuZCAlVCcsIGFyZykpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJlLm51bWJlci50ZXN0KHBoLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzX3Bvc2l0aXZlID0gYXJnID49IDBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBoLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYic6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwYXJzZUludChhcmcsIDEwKS50b1N0cmluZygyKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGFyZywgMTApKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2knOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGFyc2VJbnQoYXJnLCAxMClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2onOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gSlNPTi5zdHJpbmdpZnkoYXJnLCBudWxsLCBwaC53aWR0aCA/IHBhcnNlSW50KHBoLndpZHRoKSA6IDApXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBoLnByZWNpc2lvbiA/IHBhcnNlRmxvYXQoYXJnKS50b0V4cG9uZW50aWFsKHBoLnByZWNpc2lvbikgOiBwYXJzZUZsb2F0KGFyZykudG9FeHBvbmVudGlhbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBoLnByZWNpc2lvbiA/IHBhcnNlRmxvYXQoYXJnKS50b0ZpeGVkKHBoLnByZWNpc2lvbikgOiBwYXJzZUZsb2F0KGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGgucHJlY2lzaW9uID8gU3RyaW5nKE51bWJlcihhcmcudG9QcmVjaXNpb24ocGgucHJlY2lzaW9uKSkpIDogcGFyc2VGbG9hdChhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdvJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwYXJzZUludChhcmcsIDEwKSA+Pj4gMCkudG9TdHJpbmcoOClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gU3RyaW5nKGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwaC5wcmVjaXNpb24gPyBhcmcuc3Vic3RyaW5nKDAsIHBoLnByZWNpc2lvbikgOiBhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IFN0cmluZyghIWFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwaC5wcmVjaXNpb24gPyBhcmcuc3Vic3RyaW5nKDAsIHBoLnByZWNpc2lvbikgOiBhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdUJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGgucHJlY2lzaW9uID8gYXJnLnN1YnN0cmluZygwLCBwaC5wcmVjaXNpb24pIDogYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwYXJzZUludChhcmcsIDEwKSA+Pj4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndic6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGgucHJlY2lzaW9uID8gYXJnLnN1YnN0cmluZygwLCBwaC5wcmVjaXNpb24pIDogYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAneCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGFyc2VJbnQoYXJnLCAxMCkgPj4+IDApLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnWCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGFyc2VJbnQoYXJnLCAxMCkgPj4+IDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmUuanNvbi50ZXN0KHBoLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBhcmdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZS5udW1iZXIudGVzdChwaC50eXBlKSAmJiAoIWlzX3Bvc2l0aXZlIHx8IHBoLnNpZ24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduID0gaXNfcG9zaXRpdmUgPyAnKycgOiAnLSdcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy50b1N0cmluZygpLnJlcGxhY2UocmUuc2lnbiwgJycpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduID0gJydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYWRfY2hhcmFjdGVyID0gcGgucGFkX2NoYXIgPyBwaC5wYWRfY2hhciA9PT0gJzAnID8gJzAnIDogcGgucGFkX2NoYXIuY2hhckF0KDEpIDogJyAnXG4gICAgICAgICAgICAgICAgICAgIHBhZF9sZW5ndGggPSBwaC53aWR0aCAtIChzaWduICsgYXJnKS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgcGFkID0gcGgud2lkdGggPyAocGFkX2xlbmd0aCA+IDAgPyBwYWRfY2hhcmFjdGVyLnJlcGVhdChwYWRfbGVuZ3RoKSA6ICcnKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBwaC5hbGlnbiA/IHNpZ24gKyBhcmcgKyBwYWQgOiAocGFkX2NoYXJhY3RlciA9PT0gJzAnID8gc2lnbiArIHBhZCArIGFyZyA6IHBhZCArIHNpZ24gKyBhcmcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXRcbiAgICB9XG5cbiAgICB2YXIgc3ByaW50Zl9jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuICAgIGZ1bmN0aW9uIHNwcmludGZfcGFyc2UoZm10KSB7XG4gICAgICAgIGlmIChzcHJpbnRmX2NhY2hlW2ZtdF0pIHtcbiAgICAgICAgICAgIHJldHVybiBzcHJpbnRmX2NhY2hlW2ZtdF1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfZm10ID0gZm10LCBtYXRjaCwgcGFyc2VfdHJlZSA9IFtdLCBhcmdfbmFtZXMgPSAwXG4gICAgICAgIHdoaWxlIChfZm10KSB7XG4gICAgICAgICAgICBpZiAoKG1hdGNoID0gcmUudGV4dC5leGVjKF9mbXQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcnNlX3RyZWUucHVzaChtYXRjaFswXSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChtYXRjaCA9IHJlLm1vZHVsby5leGVjKF9mbXQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcnNlX3RyZWUucHVzaCgnJScpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgobWF0Y2ggPSByZS5wbGFjZWhvbGRlci5leGVjKF9mbXQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaFsyXSkge1xuICAgICAgICAgICAgICAgICAgICBhcmdfbmFtZXMgfD0gMVxuICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGRfbGlzdCA9IFtdLCByZXBsYWNlbWVudF9maWVsZCA9IG1hdGNoWzJdLCBmaWVsZF9tYXRjaCA9IFtdXG4gICAgICAgICAgICAgICAgICAgIGlmICgoZmllbGRfbWF0Y2ggPSByZS5rZXkuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKHJlcGxhY2VtZW50X2ZpZWxkID0gcmVwbGFjZW1lbnRfZmllbGQuc3Vic3RyaW5nKGZpZWxkX21hdGNoWzBdLmxlbmd0aCkpICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZmllbGRfbWF0Y2ggPSByZS5rZXlfYWNjZXNzLmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChmaWVsZF9tYXRjaCA9IHJlLmluZGV4X2FjY2Vzcy5leGVjKHJlcGxhY2VtZW50X2ZpZWxkKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfbGlzdC5wdXNoKGZpZWxkX21hdGNoWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdbc3ByaW50Zl0gZmFpbGVkIHRvIHBhcnNlIG5hbWVkIGFyZ3VtZW50IGtleScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdbc3ByaW50Zl0gZmFpbGVkIHRvIHBhcnNlIG5hbWVkIGFyZ3VtZW50IGtleScpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0gPSBmaWVsZF9saXN0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcmdfbmFtZXMgfD0gMlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYXJnX25hbWVzID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW3NwcmludGZdIG1peGluZyBwb3NpdGlvbmFsIGFuZCBuYW1lZCBwbGFjZWhvbGRlcnMgaXMgbm90ICh5ZXQpIHN1cHBvcnRlZCcpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcGFyc2VfdHJlZS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogbWF0Y2hbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbV9ubzogICAgbWF0Y2hbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlzOiAgICAgICAgbWF0Y2hbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduOiAgICAgICAgbWF0Y2hbM10sXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRfY2hhcjogICAgbWF0Y2hbNF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbjogICAgICAgbWF0Y2hbNV0sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogICAgICAgbWF0Y2hbNl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVjaXNpb246ICAgbWF0Y2hbN10sXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAgICAgICAgbWF0Y2hbOF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignW3NwcmludGZdIHVuZXhwZWN0ZWQgcGxhY2Vob2xkZXInKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2ZtdCA9IF9mbXQuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3ByaW50Zl9jYWNoZVtmbXRdID0gcGFyc2VfdHJlZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGV4cG9ydCB0byBlaXRoZXIgYnJvd3NlciBvciBub2RlLmpzXG4gICAgICovXG4gICAgLyogZXNsaW50LWRpc2FibGUgcXVvdGUtcHJvcHMgKi9cbiAgICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGV4cG9ydHNbJ3NwcmludGYnXSA9IHNwcmludGZcbiAgICAgICAgZXhwb3J0c1sndnNwcmludGYnXSA9IHZzcHJpbnRmXG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3aW5kb3dbJ3NwcmludGYnXSA9IHNwcmludGZcbiAgICAgICAgd2luZG93Wyd2c3ByaW50ZiddID0gdnNwcmludGZcblxuICAgICAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbJ2FtZCddKSB7XG4gICAgICAgICAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgJ3NwcmludGYnOiBzcHJpbnRmLFxuICAgICAgICAgICAgICAgICAgICAndnNwcmludGYnOiB2c3ByaW50ZlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBxdW90ZS1wcm9wcyAqL1xufSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4iLCJjbGFzcyBWYWx1ZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gXCJWYWx1ZUVycm9yXCI7XG4gICAgY29uc29sZS5sb2coXCJFWENFUFRJT046IFwiICsgdGhpcy5uYW1lICsgXCIgTUVTU0FHRTogXCIgKyB0aGlzLm1lc3NhZ2UpO1xuICB9XG59XG5cbmNsYXNzIFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24gZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSBcIlVuSW1wbGVtZW50ZWRNZXRob2RcIjtcbiAgICBjb25zb2xlLmxvZyhcIkVYQ0VQVElPTjogXCIgKyB0aGlzLm5hbWUgKyBcIiBNRVNTQUdFOiBcIiArIHRoaXMubWVzc2FnZSk7XG4gIH1cbn1cblxuY2xhc3MgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBhcmd1bWVudCkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiSWxsZWdhbEFyZ3VtZW50XCI7XG4gICAgdGhpcy5hcmd1bWVudCA9IGFyZ3VtZW50O1xuICAgIGNvbnNvbGUubG9nKFwiRVhDRVBUSU9OOiBcIiArIHRoaXMubmFtZSArIFwiIE1FU1NBR0U6IFwiICsgdGhpcy5tZXNzYWdlKTtcbiAgfVxufVxuXG5jbGFzcyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24gZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSBcIklsbGVnYWxTdGF0ZVwiO1xuICAgIGNvbnNvbGUubG9nKFwiRVhDRVBUSU9OOiBcIiArIHRoaXMubmFtZSArIFwiIE1FU1NBR0U6IFwiICsgdGhpcy5tZXNzYWdlKTtcbiAgfVxufVxuXG5jbGFzcyBJbGxlZ2FsSnNvbkV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgYXJncykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiSWxsZWdhbFN0YXRlXCI7XG4gICAgdGhpcy5jYXVzZUV4Y2VwdGlvbiA9IGFyZ3MuY2F1c2VFeGNlcHRpb247XG4gICAgdGhpcy5vcmlnaW5hbEpzb25TdHJpbmcgPSBhcmdzLm9yaWdpbmFsSnNvblN0cmluZztcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIFwiRVhDRVBUSU9OOiBcIiArXG4gICAgICAgIHRoaXMubmFtZSArXG4gICAgICAgIFwiIE1FU1NBR0U6IFwiICtcbiAgICAgICAgdGhpcy5tZXNzYWdlICtcbiAgICAgICAgXCIgY2F1c2U6IFwiICtcbiAgICAgICAgdGhpcy5jYXVzZUV4Y2VwdGlvblxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgVW5JbXBsZW1lbnRlZE1ldGhvZEV4Y2VwdGlvbixcbiAgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uLFxuICBJbGxlZ2FsU3RhdGVFeGNlcHRpb24sXG4gIElsbGVnYWxKc29uRXhjZXB0aW9uLFxuICBWYWx1ZUVycm9yXG59O1xuIiwidmFyIG1ha2VIdHRwUmVxdWVzdCA9IChvYmosIHN1Y2Nlc3MsIGZhaWx1cmUpID0+IHtcbiAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICB4aHIub3BlbihvYmoubWV0aG9kIHx8IFwiR0VUXCIsIG9iai51cmwpO1xuICBpZiAob2JqLmhlYWRlcnMpIHtcbiAgICBPYmplY3Qua2V5cyhvYmouaGVhZGVycykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCBvYmouaGVhZGVyc1trZXldKTtcbiAgICB9KTtcbiAgfVxuICB4aHIub25sb2FkID0gKCkgPT4ge1xuICAgIGlmICh4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwKSB7XG4gICAgICBzdWNjZXNzKHhocik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZhaWx1cmUoeGhyKTtcbiAgICB9XG4gIH07XG4gIHhoci5vbmVycm9yID0gKCkgPT4gZmFpbHVyZSh4aHIpO1xuICB4aHIuc2VuZChvYmouYm9keSk7XG59O1xuXG5leHBvcnQgeyBtYWtlSHR0cFJlcXVlc3QgfTtcbiIsImNsYXNzIEdsb2JhbENvbmZpZ0ltcGwge1xuICB1cGRhdGUoY29uZmlnSW5wdXQpIHtcbiAgICB2YXIgY29uZmlnID0gY29uZmlnSW5wdXQgfHwge307XG4gICAgdGhpcy5yZWdpb24gPSBjb25maWcucmVnaW9uIHx8IHRoaXMucmVnaW9uO1xuICAgIHRoaXMuZW5kcG9pbnRPdmVycmlkZSA9IGNvbmZpZy5lbmRwb2ludCB8fCB0aGlzLmVuZHBvaW50T3ZlcnJpZGU7XG4gICAgdGhpcy5yZWNvbm5lY3QgPSBjb25maWcucmVjb25uZWN0ID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcbiAgfVxuXG4gIGdldFJlZ2lvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZWdpb247XG4gIH1cblxuICBnZXRFbmRwb2ludE92ZXJyaWRlKCkge1xuICAgIHJldHVybiB0aGlzLmVuZHBvaW50T3ZlcnJpZGU7XG4gIH1cbn1cblxuY29uc3QgR2xvYmFsQ29uZmlnID0gbmV3IEdsb2JhbENvbmZpZ0ltcGwoKTtcblxuZXhwb3J0IHsgR2xvYmFsQ29uZmlnIH07XG4iLCIvL1BsYWNlaG9sZGVyXG5leHBvcnQgY29uc3QgQ0hBVF9DT05GSUdVUkFUSU9OUyA9IHtcbiAgQ09OQ1VSUkVOVF9DSEFUUzogMTBcbn07XG5cbmV4cG9ydCBjb25zdCBQQVJUSUNJUEFOVF9UT0tFTl9IRUFERVIgPSBcIngtYW16bi1jb25uZWN0LXBhcnRpY2lwYW50LXRva2VuXCI7XG5leHBvcnQgY29uc3QgQVVUSF9IRUFERVIgPSBcIlgtQW16LUJlYXJlclwiO1xuXG5leHBvcnQgY29uc3QgUkVTT1VSQ0VfUEFUSCA9IHtcbiAgQ09OTkVDVElPTl9ERVRBSUxTOiBcIi9jb250YWN0L2NoYXQvcGFydGljaXBhbnQvY29ubmVjdGlvbi1kZXRhaWxzXCIsXG4gIE1FU1NBR0U6IFwiL3BhcnRpY2lwYW50L21lc3NhZ2VcIixcbiAgVFJBTlNDUklQVDogXCIvcGFydGljaXBhbnQvdHJhbnNjcmlwdFwiLFxuICBFVkVOVDogXCIvcGFydGljaXBhbnQvZXZlbnRcIixcbiAgRElTQ09OTkVDVDogXCIvcGFydGljaXBhbnQvZGlzY29ubmVjdFwiLFxuICBQQVJUSUNJUEFOVF9DT05ORUNUSU9OOiBcIi9wYXJ0aWNpcGFudC9jb25uZWN0aW9uXCJcbn07XG5cbmV4cG9ydCBjb25zdCBIVFRQX01FVEhPRFMgPSB7XG4gIFBPU1Q6IFwicG9zdFwiXG59O1xuXG5leHBvcnQgY29uc3QgUkVHSU9OX0NPTkZJRyA9IHtcbiAgXCJ1cy13ZXN0LTJcIjoge1xuICAgIGludm9rZVVybDogXCJodHRwczovL2VhcDF3OTNqMGsuZXhlY3V0ZS1hcGkudXMtd2VzdC0yLmFtYXpvbmF3cy5jb20vcHJvZFwiXG4gIH0sXG4gIFwidXMtZWFzdC0xXCI6IHtcbiAgICBpbnZva2VVcmw6IFwiaHR0cHM6Ly80YWdjanVzeDNrLmV4ZWN1dGUtYXBpLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tL3Byb2RcIlxuICB9LFxuICBcImFwLXNvdXRoZWFzdC0yXCI6IHtcbiAgICBpbnZva2VVcmw6XG4gICAgICBcImh0dHBzOi8vdjR1OG9xMGN2ZS5leGVjdXRlLWFwaS5hcC1zb3V0aGVhc3QtMi5hbWF6b25hd3MuY29tL3Byb2RcIlxuICB9LFxuICBcImFwLW5vcnRoZWFzdC0xXCI6IHtcbiAgICBpbnZva2VVcmw6XG4gICAgICBcImh0dHBzOi8vM2ZpZHVuZnl6Ny5leGVjdXRlLWFwaS5hcC1ub3J0aGVhc3QtMS5hbWF6b25hd3MuY29tL3Byb2RcIlxuICB9LFxuICBcImV1LWNlbnRyYWwtMVwiOiB7XG4gICAgaW52b2tlVXJsOiBcImh0dHBzOi8vMWd5bmFhcm0zZS5leGVjdXRlLWFwaS5ldS1jZW50cmFsLTEuYW1hem9uYXdzLmNvbS9wcm9kXCJcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IE1RVFRfQ09OU1RBTlRTID0ge1xuICBLRUVQX0FMSVZFOiAzMCxcbiAgQ09OTkVDVF9USU1FT1VUOiA2MFxufTtcblxuZXhwb3J0IGNvbnN0IFNFU1NJT05fVFlQRVMgPSB7XG4gIEFHRU5UOiBcIkFHRU5UXCIsXG4gIENVU1RPTUVSOiBcIkNVU1RPTUVSXCJcbn07XG5cbmV4cG9ydCBjb25zdCBDSEFUX0VWRU5UUyA9IHtcbiAgSU5DT01JTkdfTUVTU0FHRTogXCJJTkNPTUlOR19NRVNTQUdFXCIsXG4gIElOQ09NSU5HX1RZUElORzogXCJJTkNPTUlOR19UWVBJTkdcIixcbiAgQ09OTkVDVElPTl9FU1RBQkxJU0hFRDogXCJDT05ORUNUSU9OX0VTVEFCTElTSEVEXCIsXG4gIENPTk5FQ1RJT05fTE9TVDogXCJDT05ORUNUSU9OX0xPU1RcIixcbiAgQ09OTkVDVElPTl9CUk9LRU46IFwiQ09OTkVDVElPTl9CUk9LRU5cIixcbiAgQ09OTkVDVElPTl9BQ0s6IFwiQ09OTkVDVElPTl9BQ0tcIixcbiAgQ0hBVF9FTkRFRDogXCJDSEFUX0VOREVEXCJcbn07XG5cbmV4cG9ydCBjb25zdCBDT05URU5UX1RZUEUgPSB7XG4gIHRleHRQbGFpbjogXCJ0ZXh0L3BsYWluXCIsXG4gIGNvbm5lY3Rpb25BY2tub3dsZWRnZWQ6IFwiYXBwbGljYXRpb24vdm5kLmFtYXpvbmF3cy5jb25uZWN0LmV2ZW50LmNvbm5lY3Rpb24uYWNrbm93bGVkZ2VkXCIsXG4gIHR5cGluZzogXCJhcHBsaWNhdGlvbi92bmQuYW1hem9uYXdzLmNvbm5lY3QuZXZlbnQudHlwaW5nXCIsXG4gIHBhcnRpY2lwYW50Sm9pbmVkOiBcImFwcGxpY2F0aW9uL3ZuZC5hbWF6b25hd3MuY29ubmVjdC5ldmVudC5wYXJ0aWNpcGFudC5qb2luZWRcIixcbiAgcGFydGljaXBhbnRMZWZ0OiBcImFwcGxpY2F0aW9uL3ZuZC5hbWF6b25hd3MuY29ubmVjdC5ldmVudC5wYXJ0aWNpcGFudC5sZWZ0XCIsXG4gIHRyYW5zZmVyU3VjY2VlZGVkOiBcImFwcGxpY2F0aW9uL3ZuZC5hbWF6b25hd3MuY29ubmVjdC5ldmVudC50cmFuc2Zlci5zdWNjZWVkZWRcIixcbiAgdHJhbnNmZXJGYWlsZWQ6IFwiYXBwbGljYXRpb24vdm5kLmFtYXpvbmF3cy5jb25uZWN0LmV2ZW50LnRyYW5zZmVyLmZhaWxlZFwiLFxuICBjaGF0RW5kZWQ6IFwiYXBwbGljYXRpb24vdm5kLmFtYXpvbmF3cy5jb25uZWN0LmV2ZW50LmNoYXQuZW5kZWRcIlxufTtcblxuZXhwb3J0IGNvbnN0IEVWRU5UID0gXCJFVkVOVFwiO1xuZXhwb3J0IGNvbnN0IE1FU1NBR0UgPSBcIk1FU1NBR0VcIjtcblxuZXhwb3J0IGNvbnN0IFRSQU5TQ1JJUFRfREVGQVVMVF9QQVJBTVMgPSB7XG4gIE1BWF9SRVNVTFRTOiAxNSxcbiAgU09SVF9PUkRFUjogXCJBU0NFTkRJTkdcIixcbiAgU0NBTl9ESVJFQ1RJT046IFwiQkFDS1dBUkRcIlxufTtcblxuZXhwb3J0IGNvbnN0IExPR1NfREVTVElOQVRJT04gPSB7XG4gIE5VTEw6IFwiTlVMTFwiLFxuICBDTElFTlRfTE9HR0VSOiBcIkNMSUVOVF9MT0dHRVJcIixcbiAgREVCVUc6IFwiREVCVUdcIlxufTtcblxuZXhwb3J0IGNvbnN0IFJFR0lPTlMgPSB7XG4gIHBkeDogXCJ1cy13ZXN0LTJcIixcbiAgaWFkOiBcInVzLWVhc3QtMVwiLFxuICBzeWQ6IFwiYXAtc291dGhlYXN0LTJcIixcbiAgbnJ0OiBcImFwLW5vcnRoZWFzdC0xXCIsXG4gIGZyYTogXCJldS1jZW50cmFsLTFcIlxufTtcblxuZXhwb3J0IGNvbnN0IEFHRU5UX1JFQ09OTkVDVF9DT05GSUcgPSB7XG4gIGludGVydmFsOiAzMDAwLFxuICBtYXhSZXRyaWVzOiA1XG59O1xuXG5leHBvcnQgY29uc3QgQ1VTVE9NRVJfUkVDT05ORUNUX0NPTkZJRyA9IHtcbiAgaW50ZXJ2YWw6IDMwMDAsXG4gIG1heFJldHJpZXM6IDVcbn07XG5cbmV4cG9ydCBjb25zdCBDT05ORUNUSU9OX1RPS0VOX1BPTExJTkdfSU5URVJWQUwgPSAxMDAwICogNjAgKiA2MCAqIDEyO1xuXG5leHBvcnQgY29uc3QgVFJBTlNQT1JUX0xJRkVUSU1FX0lOX1NFQ09ORFMgPSA3MTQwOyAvLyAxMTkgbWluc1xuIiwiaW1wb3J0IHsgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIH0gZnJvbSBcIi4vY29yZS9leGNlcHRpb25zXCI7XG5pbXBvcnQgeyBWYWx1ZUVycm9yIH0gZnJvbSBcIi4vY29yZS9leGNlcHRpb25zXCI7XG5pbXBvcnQgeyBzcHJpbnRmIH0gZnJvbSBcInNwcmludGYtanNcIjtcbmNvbnN0IFV0aWxzID0ge307XG5cbi8qKlxuICogQXNzZXJ0cyB0aGF0IGEgcHJlbWlzZSBpcyB0cnVlLlxuICovXG5VdGlscy5hc3NlcnRUcnVlID0gZnVuY3Rpb24ocHJlbWlzZSwgbWVzc2FnZSkge1xuICBpZiAoIXByZW1pc2UpIHtcbiAgICB0aHJvdyBuZXcgVmFsdWVFcnJvcihtZXNzYWdlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBc3NlcnRzIHRoYXQgYSB2YWx1ZSBpcyBub3QgbnVsbCBvciB1bmRlZmluZWQuXG4gKi9cblV0aWxzLmFzc2VydE5vdE51bGwgPSBmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICBVdGlscy5hc3NlcnRUcnVlKFxuICAgIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgIHNwcmludGYoXCIlcyBtdXN0IGJlIHByb3ZpZGVkXCIsIG5hbWUgfHwgXCJBIHZhbHVlXCIpXG4gICk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cblV0aWxzLm5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG59O1xuXG5VdGlscy5pc1N0cmluZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgcmFuZG9tIElEIGNvbnNpc3Rpbmcgb2YgdGhlIGN1cnJlbnQgdGltZXN0YW1wXG4gKiBhbmQgYSByYW5kb20gYmFzZS0zNiBudW1iZXIgYmFzZWQgb24gTWF0aC5yYW5kb20oKS5cbiAqL1xuVXRpbHMucmFuZG9tSWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHNwcmludGYoXG4gICAgXCIlcy0lc1wiLFxuICAgIFV0aWxzLm5vdygpLFxuICAgIE1hdGgucmFuZG9tKClcbiAgICAgIC50b1N0cmluZygzNilcbiAgICAgIC5zbGljZSgyKVxuICApO1xufTtcblxuVXRpbHMuYXNzZXJ0SXNOb25FbXB0eVN0cmluZyA9IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKGtleSArIFwiIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmchXCIpO1xuICB9XG59O1xuXG5VdGlscy5hc3NlcnRJc0xpc3QgPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKGtleSArIFwiIGlzIG5vdCBhbiBhcnJheVwiKTtcbiAgfVxufTtcblxuVXRpbHMuYXNzZXJ0SXNFbnVtID0gZnVuY3Rpb24odmFsdWUsIGFsbG93ZWRWYWx1ZXMsIGtleSkge1xuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IGFsbG93ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYWxsb3dlZFZhbHVlc1tpXSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbihcbiAgICBrZXkgKyBcIiBwYXNzZWQgaXMgbm90IHZhbGlkLiBcIiArIFwiQWxsb3dlZCB2YWx1ZXMgYXJlOiBcIiArIGFsbG93ZWRWYWx1ZXNcbiAgKTtcbn07XG5cbi8qKlxuICogR2VuZXJhdGUgYW4gZW51bSBmcm9tIHRoZSBnaXZlbiBsaXN0IG9mIGxvd2VyLWNhc2UgZW51bSB2YWx1ZXMsXG4gKiB3aGVyZSB0aGUgZW51bSBrZXlzIHdpbGwgYmUgdXBwZXIgY2FzZS5cbiAqXG4gKiBDb252ZXJzaW9uIGZyb20gcGFzY2FsIGNhc2UgYmFzZWQgb24gY29kZSBmcm9tIGhlcmU6XG4gKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwNTIxMjI0XG4gKi9cblV0aWxzLm1ha2VFbnVtID0gZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBlbnVtT2JqID0ge307XG5cbiAgdmFsdWVzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIga2V5ID0gdmFsdWVcbiAgICAgIC5yZXBsYWNlKC9cXC4/KFthLXpdKylfPy9nLCBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHJldHVybiB5LnRvVXBwZXJDYXNlKCkgKyBcIl9cIjtcbiAgICAgIH0pXG4gICAgICAucmVwbGFjZSgvXyQvLCBcIlwiKTtcblxuICAgIGVudW1PYmpba2V5XSA9IHZhbHVlO1xuICB9KTtcblxuICByZXR1cm4gZW51bU9iajtcbn07XG5cblV0aWxzLmNvbnRhaW5zID0gZnVuY3Rpb24ob2JqLCB2YWx1ZSkge1xuICBpZiAob2JqIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgVXRpbHMuZmluZChvYmosIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgcmV0dXJuIHYgPT09IHZhbHVlO1xuICAgICAgfSkgIT09IG51bGxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZSBpbiBvYmo7XG4gIH1cbn07XG5cblV0aWxzLmZpbmQgPSBmdW5jdGlvbihhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIHggPSAwOyB4IDwgYXJyYXkubGVuZ3RoOyB4KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W3hdKSkge1xuICAgICAgcmV0dXJuIGFycmF5W3hdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuVXRpbHMuY29udGFpbnNWYWx1ZSA9IGZ1bmN0aW9uKG9iaiwgdmFsdWUpIHtcbiAgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIFV0aWxzLmZpbmQob2JqLCBmdW5jdGlvbih2KSB7XG4gICAgICAgIHJldHVybiB2ID09PSB2YWx1ZTtcbiAgICAgIH0pICE9PSBudWxsXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFxuICAgICAgVXRpbHMuZmluZChVdGlscy52YWx1ZXMob2JqKSwgZnVuY3Rpb24odikge1xuICAgICAgICByZXR1cm4gdiA9PT0gdmFsdWU7XG4gICAgICB9KSAhPT0gbnVsbFxuICAgICk7XG4gIH1cbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGNhbGxhYmxlIGZ1bmN0aW9uIHR5cGUuXG4gKiBCb3Jyb3dlZCBmcm9tIFVuZGVyc2NvcmUuanMuXG4gKi9cblV0aWxzLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuICEhKG9iaiAmJiBvYmouY29uc3RydWN0b3IgJiYgb2JqLmNhbGwgJiYgb2JqLmFwcGx5KTtcbn07XG5cbi8qKlxuICogR2V0IGEgbGlzdCBvZiB2YWx1ZXMgZnJvbSBhIEphdmFzY3JpcHQgb2JqZWN0IHVzZWRcbiAqIGFzIGEgaGFzaCBtYXAuXG4gKi9cblV0aWxzLnZhbHVlcyA9IGZ1bmN0aW9uKG1hcCkge1xuICB2YXIgdmFsdWVzID0gW107XG5cbiAgVXRpbHMuYXNzZXJ0Tm90TnVsbChtYXAsIFwibWFwXCIpO1xuXG4gIGZvciAodmFyIGsgaW4gbWFwKSB7XG4gICAgdmFsdWVzLnB1c2gobWFwW2tdKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZXM7XG59O1xuXG5VdGlscy5pc09iamVjdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiAhKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbCk7XG59O1xuXG5VdGlscy5hc3NlcnRJc09iamVjdCA9IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgaWYgKCFVdGlscy5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKGtleSArIFwiIGlzIG5vdCBhbiBvYmplY3QhXCIpO1xuICB9XG59O1xuXG5VdGlscy5kZWxheSA9IChtcykgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG5cblV0aWxzLmFzeW5jV2hpbGVJbnRlcnZhbCA9IGZ1bmN0aW9uKGYsIHByZWRpY2F0ZSwgaW50ZXJ2YWwsIGNvdW50PTAsIGVycm9yPW51bGwpIHtcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgaWYgKHByZWRpY2F0ZShjb3VudCkpIHtcbiAgICByZXR1cm4gZihjb3VudCkuY2F0Y2goKGUpID0+IHtcbiAgICAgIGNvbnN0IGRlbGF5ID0gTWF0aC5tYXgoMCwgaW50ZXJ2YWwgLSAobmV3IERhdGUoKSkudmFsdWVPZigpICsgbm93LnZhbHVlT2YoKSk7XG4gICAgICByZXR1cm4gVXRpbHNcbiAgICAgICAgLmRlbGF5KGRlbGF5KVxuICAgICAgICAudGhlbigoKSA9PiBVdGlscy5hc3luY1doaWxlSW50ZXJ2YWwoZiwgcHJlZGljYXRlLCBpbnRlcnZhbCwgY291bnQgKyAxLCBlKSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yIHx8IG5ldyBFcnJvcihcImFzeW5jIHdoaWxlIGFib3J0ZWRcIikpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBVdGlscztcbiIsImltcG9ydCBVdGlscyBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgTE9HU19ERVNUSU5BVElPTiB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzKi9cbmNsYXNzIExvZ2dlciB7XG4gIGRlYnVnKGRhdGEpIHt9XG5cbiAgaW5mbyhkYXRhKSB7fVxuXG4gIHdhcm4oZGF0YSkge31cblxuICBlcnJvcihkYXRhKSB7fVxufVxuLyplc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzKi9cblxuY29uc3QgTG9nTGV2ZWwgPSB7XG4gIERFQlVHOiAxMCxcbiAgSU5GTzogMjAsXG4gIFdBUk46IDMwLFxuICBFUlJPUjogNDBcbn07XG5cbmNsYXNzIExvZ01hbmFnZXJJbXBsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy51cGRhdGVMb2dnZXJDb25maWcoKTtcbiAgICB0aGlzLmNvbnNvbGVMb2dnZXJXcmFwcGVyID0gY3JlYXRlQ29uc29sZUxvZ2dlcigpO1xuICB9XG5cbiAgd3JpdGVUb0NsaWVudExvZ2dlcihsZXZlbCwgbG9nU3RhdGVtZW50KSB7XG4gICAgaWYgKCF0aGlzLmhhc0NsaWVudExvZ2dlcigpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXRjaCAobGV2ZWwpIHtcbiAgICAgIGNhc2UgTG9nTGV2ZWwuREVCVUc6XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRMb2dnZXIuZGVidWcobG9nU3RhdGVtZW50KTtcbiAgICAgIGNhc2UgTG9nTGV2ZWwuSU5GTzpcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudExvZ2dlci5pbmZvKGxvZ1N0YXRlbWVudCk7XG4gICAgICBjYXNlIExvZ0xldmVsLldBUk46XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRMb2dnZXIud2Fybihsb2dTdGF0ZW1lbnQpO1xuICAgICAgY2FzZSBMb2dMZXZlbC5FUlJPUjpcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudExvZ2dlci5lcnJvcihsb2dTdGF0ZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIGlzTGV2ZWxFbmFibGVkKGxldmVsKSB7XG4gICAgcmV0dXJuIGxldmVsID49IHRoaXMuX2xldmVsO1xuICB9XG5cbiAgaGFzQ2xpZW50TG9nZ2VyKCkge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnRMb2dnZXIgIT09IG51bGw7XG4gIH1cblxuICBnZXRMb2dnZXIob3B0aW9ucykge1xuICAgIHZhciBwcmVmaXggPSBvcHRpb25zLnByZWZpeCB8fCBcIlwiO1xuICAgIGlmICh0aGlzLl9sb2dzRGVzdGluYXRpb24gPT09IExPR1NfREVTVElOQVRJT04uREVCVUcpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnNvbGVMb2dnZXJXcmFwcGVyO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IExvZ2dlcldyYXBwZXJJbXBsKHByZWZpeCk7XG4gIH1cblxuICB1cGRhdGVMb2dnZXJDb25maWcoaW5wdXRDb25maWcpIHtcbiAgICB2YXIgY29uZmlnID0gaW5wdXRDb25maWcgfHwge307XG4gICAgdGhpcy5fbGV2ZWwgPSBjb25maWcubGV2ZWwgfHwgTG9nTGV2ZWwuSU5GTztcbiAgICB0aGlzLl9jbGllbnRMb2dnZXIgPSBjb25maWcubG9nZ2VyIHx8IG51bGw7XG4gICAgdGhpcy5fbG9nc0Rlc3RpbmF0aW9uID0gTE9HU19ERVNUSU5BVElPTi5OVUxMO1xuICAgIGlmIChjb25maWcuZGVidWcpIHtcbiAgICAgIHRoaXMuX2xvZ3NEZXN0aW5hdGlvbiA9IExPR1NfREVTVElOQVRJT04uREVCVUc7XG4gICAgfVxuICAgIGlmIChjb25maWcubG9nZ2VyKSB7XG4gICAgICB0aGlzLl9sb2dzRGVzdGluYXRpb24gPSBMT0dTX0RFU1RJTkFUSU9OLkNMSUVOVF9MT0dHRVI7XG4gICAgfVxuICB9XG59XG5cbmNsYXNzIExvZ2dlcldyYXBwZXIge1xuICBkZWJ1ZygpIHt9XG5cbiAgaW5mbygpIHt9XG5cbiAgd2FybigpIHt9XG5cbiAgZXJyb3IoKSB7fVxufVxuXG5jbGFzcyBMb2dnZXJXcmFwcGVySW1wbCBleHRlbmRzIExvZ2dlcldyYXBwZXIge1xuICBjb25zdHJ1Y3RvcihwcmVmaXgpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucHJlZml4ID0gcHJlZml4IHx8IFwiXCI7XG4gIH1cblxuICBkZWJ1ZyguLi5hcmdzKSB7XG4gICAgdGhpcy5fbG9nKExvZ0xldmVsLkRFQlVHLCBhcmdzKTtcbiAgfVxuXG4gIGluZm8oLi4uYXJncykge1xuICAgIHRoaXMuX2xvZyhMb2dMZXZlbC5JTkZPLCBhcmdzKTtcbiAgfVxuXG4gIHdhcm4oLi4uYXJncykge1xuICAgIHRoaXMuX2xvZyhMb2dMZXZlbC5XQVJOLCBhcmdzKTtcbiAgfVxuXG4gIGVycm9yKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9sb2coTG9nTGV2ZWwuRVJST1IsIGFyZ3MpO1xuICB9XG5cbiAgX3Nob3VsZExvZyhsZXZlbCkge1xuICAgIHJldHVybiBMb2dNYW5hZ2VyLmhhc0NsaWVudExvZ2dlcigpICYmIExvZ01hbmFnZXIuaXNMZXZlbEVuYWJsZWQobGV2ZWwpO1xuICB9XG5cbiAgX3dyaXRlVG9DbGllbnRMb2dnZXIobGV2ZWwsIGxvZ1N0YXRlbWVudCkge1xuICAgIExvZ01hbmFnZXIud3JpdGVUb0NsaWVudExvZ2dlcihsZXZlbCwgbG9nU3RhdGVtZW50KTtcbiAgfVxuXG4gIF9sb2cobGV2ZWwsIGFyZ3MpIHtcbiAgICBpZiAodGhpcy5fc2hvdWxkTG9nKGxldmVsKSkge1xuICAgICAgdmFyIGxvZ1N0YXRlbWVudCA9IHRoaXMuX2NvbnZlcnRUb1NpbmdsZVN0YXRlbWVudChhcmdzKTtcbiAgICAgIHRoaXMuX3dyaXRlVG9DbGllbnRMb2dnZXIobGV2ZWwsIGxvZ1N0YXRlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgX2NvbnZlcnRUb1NpbmdsZVN0YXRlbWVudChhcmdzKSB7XG4gICAgdmFyIGxvZ1N0YXRlbWVudCA9IFwiXCI7XG4gICAgaWYgKHRoaXMucHJlZml4KSB7XG4gICAgICBsb2dTdGF0ZW1lbnQgKz0gdGhpcy5wcmVmaXggKyBcIiBcIjtcbiAgICB9XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGFyZ3MubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgYXJnID0gYXJnc1tpbmRleF07XG4gICAgICBsb2dTdGF0ZW1lbnQgKz0gdGhpcy5fY29udmVydFRvU3RyaW5nKGFyZykgKyBcIiBcIjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZ1N0YXRlbWVudDtcbiAgfVxuXG4gIF9jb252ZXJ0VG9TdHJpbmcoYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghYXJnKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfVxuICAgICAgaWYgKFV0aWxzLmlzU3RyaW5nKGFyZykpIHtcbiAgICAgICAgcmV0dXJuIGFyZztcbiAgICAgIH1cbiAgICAgIGlmIChVdGlscy5pc09iamVjdChhcmcpICYmIFV0aWxzLmlzRnVuY3Rpb24oYXJnLnRvU3RyaW5nKSkge1xuICAgICAgICB2YXIgdG9TdHJpbmdSZXN1bHQgPSBhcmcudG9TdHJpbmcoKTtcbiAgICAgICAgaWYgKHRvU3RyaW5nUmVzdWx0ICE9PSBcIltvYmplY3QgT2JqZWN0XVwiKSB7XG4gICAgICAgICAgcmV0dXJuIHRvU3RyaW5nUmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHdoaWxlIGNvbnZlcnRpbmcgYXJndW1lbnQgdG8gc3RyaW5nXCIsIGFyZywgZXJyb3IpO1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICB9XG59XG5cbnZhciBjcmVhdGVDb25zb2xlTG9nZ2VyID0gKCkgPT4ge1xuICB2YXIgbG9nZ2VyID0gbmV3IExvZ2dlcldyYXBwZXIoKTtcbiAgbG9nZ2VyLmRlYnVnID0gY29uc29sZS5kZWJ1Zy5iaW5kKHdpbmRvdy5jb25zb2xlKTtcbiAgbG9nZ2VyLmluZm8gPSBjb25zb2xlLmluZm8uYmluZCh3aW5kb3cuY29uc29sZSk7XG4gIGxvZ2dlci53YXJuID0gY29uc29sZS53YXJuLmJpbmQod2luZG93LmNvbnNvbGUpO1xuICBsb2dnZXIuZXJyb3IgPSBjb25zb2xlLmVycm9yLmJpbmQod2luZG93LmNvbnNvbGUpO1xuICByZXR1cm4gbG9nZ2VyO1xufTtcblxuY29uc3QgTG9nTWFuYWdlciA9IG5ldyBMb2dNYW5hZ2VySW1wbCgpO1xuXG5leHBvcnQgeyBMb2dNYW5hZ2VyLCBMb2dnZXIsIExvZ0xldmVsIH07XG4iLCJpbXBvcnQgeyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uIH0gZnJvbSBcIi4uL2NvcmUvZXhjZXB0aW9uc1wiO1xuaW1wb3J0IHsgbWFrZUh0dHBSZXF1ZXN0IH0gZnJvbSBcIi4vWG1sSHR0cENsaWVudFwiO1xuaW1wb3J0IHsgR2xvYmFsQ29uZmlnIH0gZnJvbSBcIi4uL2dsb2JhbENvbmZpZ1wiO1xuaW1wb3J0IHtcbiAgUkVTT1VSQ0VfUEFUSCxcbiAgSFRUUF9NRVRIT0RTLFxuICBSRUdJT05fQ09ORklHLFxuICBSRUdJT05TLFxuICBQQVJUSUNJUEFOVF9UT0tFTl9IRUFERVJcbn0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgTG9nTWFuYWdlciB9IGZyb20gXCIuLi9sb2dcIjtcbmltcG9ydCB7IENvbm5lY3RQYXJ0aWNpcGFudCB9IGZyb20gXCIuL2F3cy1jbGllbnRcIjtcblxuY2xhc3MgQ2hhdENsaWVudEZhY3RvcnlJbXBsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jbGllbnRDYWNoZSA9IHt9O1xuICB9XG5cbiAgZ2V0Q2FjaGVkQ2xpZW50KG9wdGlvbnNJbnB1dCkge1xuICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9uc0lucHV0KTtcbiAgICB2YXIgcmVnaW9uID0gb3B0aW9uc0lucHV0LnJlZ2lvbiB8fCBHbG9iYWxDb25maWcuZ2V0UmVnaW9uKCkgfHwgUkVHSU9OUy5wZHg7XG4gICAgb3B0aW9ucy5yZWdpb24gPSByZWdpb247XG4gICAgaWYgKHRoaXMuY2xpZW50Q2FjaGVbcmVnaW9uXSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2xpZW50Q2FjaGVbcmVnaW9uXTtcbiAgICB9XG4gICAgdmFyIGNsaWVudCA9IHRoaXMuX2NyZWF0ZUF3c0NsaWVudChvcHRpb25zKTtcbiAgICB0aGlzLmNsaWVudENhY2hlW3JlZ2lvbl0gPSBjbGllbnQ7XG4gICAgcmV0dXJuIGNsaWVudDtcbiAgfVxuXG4gIF9jcmVhdGVBd3NDbGllbnQob3B0aW9ucykge1xuICAgIHZhciByZWdpb24gPSBvcHRpb25zLnJlZ2lvbjtcbiAgICB2YXIgZW5kcG9pbnRPdmVycmlkZSA9IEdsb2JhbENvbmZpZy5nZXRFbmRwb2ludE92ZXJyaWRlKCk7XG4gICAgdmFyIHN0YWdlQ29uZmlnID0gUkVHSU9OX0NPTkZJR1tyZWdpb25dO1xuICAgIGlmIChlbmRwb2ludE92ZXJyaWRlKSB7XG4gICAgICBzdGFnZUNvbmZpZy5pbnZva2VVcmwgPSBlbmRwb2ludE92ZXJyaWRlO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEFXU0NoYXRDbGllbnQoe1xuICAgICAgZW5kcG9pbnQ6IHN0YWdlQ29uZmlnLmludm9rZVVybCxcbiAgICAgIHJlZ2lvbjogcmVnaW9uXG4gICAgfSk7XG4gIH1cbn1cblxuLyplc2xpbnQtZGlzYWJsZSovXG5jbGFzcyBDaGF0Q2xpZW50IHtcbiAgc2VuZE1lc3NhZ2UocGFydGljaXBhbnRUb2tlbiwgbWVzc2FnZSwgdHlwZSkge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFwic2VuZFRleHRNZXNzYWdlIGluIENoYXRDbGllbnRcIik7XG4gIH1cblxuICBkaXNjb25uZWN0UGFydGljaXBhbnQocGFydGljaXBhbnRUb2tlbikge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFwiZGlzY29ubmVjdFBhcnRpY2lwYW50IGluIENoYXRDbGllbnRcIik7XG4gIH1cblxuICBzZW5kRXZlbnQoY29ubmVjdGlvblRva2VuLCBjb250ZW50VHlwZSwgY29udGVudCkge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFwic2VuZEV2ZW50IGluIENoYXRDbGllbnRcIik7XG4gIH1cblxuICBjcmVhdGVDb25uZWN0aW9uRGV0YWlscyhwYXJ0aWNpcGFudFRva2VuKSB7XG4gICAgdGhyb3cgbmV3IFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24oXCJyZWNvbm5lY3RDaGF0IGluIENoYXRDbGllbnRcIik7XG4gIH1cblxuICBjcmVhdGVQYXJ0aWNpcGFudENvbm5lY3Rpb24ocGFydGljaXBhbnRUb2tlbiwgdHlwZSkge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFwiY3JlYXRlQ29ubmVjdGlvbiBpbiBDaGF0Q2xpZW50XCIpO1xuICB9XG59XG4vKmVzbGludC1lbmFibGUqL1xuXG52YXIgY3JlYXRlRGVmYXVsdEhlYWRlcnMgPSAoKSA9PiAoe1xuICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIlxufSk7XG5cbmNsYXNzIEFXU0NoYXRDbGllbnQgZXh0ZW5kcyBDaGF0Q2xpZW50IHtcbiAgY29uc3RydWN0b3IoYXJncykge1xuICAgIHN1cGVyKCk7XG4gICAgdmFyIGNyZWRzID0gbmV3IEFXUy5DcmVkZW50aWFscygnJywnJyk7XG4gICAgdmFyIGNvbmZpZyA9IG5ldyBBV1MuQ29uZmlnKHtcbiAgICAgIHJlZ2lvbjogYXJncy5yZWdpb24sXG4gICAgICBlbmRwb2ludDogYXJncy5lbmRwb2ludCxcbiAgICAgIGNyZWRlbnRpYWxzOiBjcmVkc1xuICAgIH0pO1xuICAgIHRoaXMuY2hhdENsaWVudCA9IG5ldyBBV1MuQ29ubmVjdFBhcnRpY2lwYW50KGNvbmZpZyk7XG4gICAgdGhpcy5jYWxsSHR0cENsaWVudCA9IG1ha2VIdHRwUmVxdWVzdDtcbiAgICB0aGlzLmludm9rZVVybCA9IGFyZ3MuZW5kcG9pbnQ7XG4gICAgdGhpcy5sb2dnZXIgPSBMb2dNYW5hZ2VyLmdldExvZ2dlcih7IHByZWZpeDogXCJDaGF0Q2xpZW50XCIgfSk7XG4gIH1cblxuICBjcmVhdGVQYXJ0aWNpcGFudENvbm5lY3Rpb24ocGFydGljaXBhbnRUb2tlbiwgdHlwZSkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIFR5cGU6IHR5cGUsXG4gICAgICAgIFBhcnRpY2lwYW50VG9rZW46IHBhcnRpY2lwYW50VG9rZW5cbiAgICAgIH07XG4gICAgICB2YXIgY3JlYXRlUGFydGljaXBhbnRDb25uZWN0aW9uUmVxdWVzdCA9IHNlbGYuY2hhdENsaWVudC5jcmVhdGVQYXJ0aWNpcGFudENvbm5lY3Rpb24oXG4gICAgICAgIHBhcmFtc1xuICAgICAgKTtcbiAgICAgIHJldHVybiBzZWxmLl9zZW5kUmVxdWVzdChjcmVhdGVQYXJ0aWNpcGFudENvbm5lY3Rpb25SZXF1ZXN0KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhcInN1Y2Nlc3NmdWxseSBjcmVhdGUgY29ubmVjdGlvbiByZXF1ZXN0XCIpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihcImVycm9yIHdoZW4gY3JlYXRpbmcgY29ubmVjdGlvbiByZXF1ZXN0XCIpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZGlzY29ubmVjdFBhcnRpY2lwYW50KGNvbm5lY3Rpb25Ub2tlbikge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIENvbm5lY3Rpb25Ub2tlbjogY29ubmVjdGlvblRva2VuXG4gICAgICB9O1xuXG4gICAgICB2YXIgZGlzY29ubmVjdFBhcnRpY2lwYW50UmVxdWVzdCA9IHNlbGYuY2hhdENsaWVudC5kaXNjb25uZWN0UGFydGljaXBhbnQoXG4gICAgICAgIHBhcmFtc1xuICAgICAgKTtcbiAgICAgIHJldHVybiBzZWxmLl9zZW5kUmVxdWVzdChkaXNjb25uZWN0UGFydGljaXBhbnRSZXF1ZXN0KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhcInN1Y2Nlc3NmdWxseSBkaXNjb25uZWN0IHBhcnRpY2lwYW50XCIpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihcImVycm9yIHdoZW4gZGlzY29ubmVjdGluZyBwYXJ0aWNpcGFudFwiKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgfVxuXG4gIGdldFRyYW5zY3JpcHQoY29ubmVjdGlvblRva2VuLCBhcmdzKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSB7XG4gICAgTWF4UmVzdWx0czogYXJncy5tYXhSZXN1bHRzLFxuICAgIE5leHRUb2tlbjogYXJncy5uZXh0VG9rZW4sXG4gICAgU2NhbkRpcmVjdGlvbjogYXJncy5zY2FuRGlyZWN0aW9uLFxuICAgIFNvcnRPcmRlcjogYXJncy5zb3J0T3JkZXIsXG4gICAgU3RhcnRQb3NpdGlvbjoge1xuICAgICAgSWQ6IGFyZ3Muc3RhcnRQb3NpdGlvbi5pZCxcbiAgICAgIEFic29sdXRlVGltZTogYXJncy5zdGFydFBvc2l0aW9uLmFic29sdXRlVGltZSxcbiAgICAgIE1vc3RSZWNlbnQ6IGFyZ3Muc3RhcnRQb3NpdGlvbi5tb3N0UmVjZW50XG4gICAgfSxcbiAgICBDb25uZWN0aW9uVG9rZW46IGNvbm5lY3Rpb25Ub2tlblxuICAgIH07XG4gICAgaWYgKGFyZ3MuY29udGFjdElkKSB7XG4gICAgICBwYXJhbXMuQ29udGFjdElkID0gYXJncy5jb250YWN0SWQ7XG4gICAgfVxuICAgIHZhciBnZXRUcmFuc2NyaXB0UmVxdWVzdCA9IHNlbGYuY2hhdENsaWVudC5nZXRUcmFuc2NyaXB0KHBhcmFtcyk7XG4gICAgcmV0dXJuIHNlbGYuX3NlbmRSZXF1ZXN0KGdldFRyYW5zY3JpcHRSZXF1ZXN0KS50aGVuKChyZXMpID0+IHtcbiAgICAgIHNlbGYubG9nZ2VyLmluZm8oXCJzdWNjZXNzZnVsbHkgZ2V0IHRyYW5zY3JpcHRcIik7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIHNlbGYubG9nZ2VyLmVycm9yKFwiZXJyb3Igd2hlbiBnZXR0aW5nIHRyYW5zY3JpcHRcIik7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNlbmRNZXNzYWdlKGNvbm5lY3Rpb25Ub2tlbiwgY29udGVudCwgY29udGVudFR5cGUpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBDb250ZW50OiBjb250ZW50LFxuICAgICAgICBDb250ZW50VHlwZTogY29udGVudFR5cGUsXG4gICAgICAgIENvbm5lY3Rpb25Ub2tlbjogY29ubmVjdGlvblRva2VuXG4gICAgICB9O1xuICAgICAgdmFyIHNlbmRNZXNzYWdlUmVxdWVzdCA9IHNlbGYuY2hhdENsaWVudC5zZW5kTWVzc2FnZShwYXJhbXMpO1xuICAgICAgcmV0dXJuIHNlbGYuX3NlbmRSZXF1ZXN0KHNlbmRNZXNzYWdlUmVxdWVzdCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIHNlbGYubG9nZ2VyLmluZm8oXCJzdWNjZXNzZnVsbHkgc2VuZCBtZXNzYWdlXCIpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihcImVycm9yIHdoZW4gc2VuZGluZyBtZXNzYWdlXCIpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgc2VuZEV2ZW50KGNvbm5lY3Rpb25Ub2tlbiwgY29udGVudFR5cGUsIGNvbnRlbnQpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBDb25uZWN0aW9uVG9rZW46IGNvbm5lY3Rpb25Ub2tlbixcbiAgICAgICAgQ29udGVudFR5cGU6IGNvbnRlbnRUeXBlLFxuICAgICAgICBDb250ZW50OiBjb250ZW50XG4gICAgICB9O1xuICAgICAgdmFyIHNlbmRFdmVudFJlcXVlc3QgPSBzZWxmLmNoYXRDbGllbnQuc2VuZEV2ZW50KHBhcmFtcyk7XG4gICAgICByZXR1cm4gc2VsZi5fc2VuZFJlcXVlc3Qoc2VuZEV2ZW50UmVxdWVzdCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIHNlbGYubG9nZ2VyLmluZm8oXCJzdWNjZXNzZnVsbHkgc2VuZCBldmVudFwiKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoXCJlcnJvciB3aGVuIHNlbmRpbmcgZXZlbnRcIik7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gIH1cblxuICBfc2VuZFJlcXVlc3QocmVxdWVzdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICByZXF1ZXN0XG4gICAgICAgIC5vbihcInN1Y2Nlc3NcIiwgZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgcmVzb2x2ZShyZXMpO1xuICAgICAgICB9KVxuICAgICAgICAub24oXCJlcnJvclwiLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zdCBlcnJPYmogPSB7XG4gICAgICAgICAgICB0eXBlOiBlcnIuY29kZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxuICAgICAgICAgICAgc3RhY2s6IGVyci5zdGFjayA/IGVyci5zdGFjay5zcGxpdCgnXFxuJykgOiBbXSxcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVqZWN0KGVyck9iaik7XG4gICAgICAgIH0pXG4gICAgICAgIC5zZW5kKCk7XG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVDb25uZWN0aW9uRGV0YWlscyhwYXJ0aWNpcGFudFRva2VuKSB7XG4gICAgdmFyIHJlcXVlc3RJbnB1dCA9IHtcbiAgICAgIG1ldGhvZDogSFRUUF9NRVRIT0RTLlBPU1QsXG4gICAgICBoZWFkZXJzOiB7fSxcbiAgICAgIHVybDogdGhpcy5pbnZva2VVcmwgKyBSRVNPVVJDRV9QQVRILkNPTk5FQ1RJT05fREVUQUlMUyxcbiAgICAgIGJvZHk6IHt9XG4gICAgfTtcbiAgICByZXF1ZXN0SW5wdXQuaGVhZGVyc1tQQVJUSUNJUEFOVF9UT0tFTl9IRUFERVJdID0gcGFydGljaXBhbnRUb2tlbjtcbiAgICByZXR1cm4gdGhpcy5fY2FsbEh0dHBDbGllbnQocmVxdWVzdElucHV0KTtcbiAgfVxuXG4gIF9jYWxsSHR0cENsaWVudChyZXF1ZXN0SW5wdXQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmVxdWVzdElucHV0LmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKFxuICAgICAgY3JlYXRlRGVmYXVsdEhlYWRlcnMoKSxcbiAgICAgIHJlcXVlc3RJbnB1dC5oZWFkZXJzXG4gICAgKTtcbiAgICByZXF1ZXN0SW5wdXQuYm9keSA9IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RJbnB1dC5ib2R5KTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgc3VjY2VzcyA9IHJlcXVlc3QgPT4ge1xuICAgICAgICB2YXIgcmVzcG9uc2VPYmplY3QgPSB7fTtcbiAgICAgICAgcmVzcG9uc2VPYmplY3QuZGF0YSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICAgICAgICByZXNvbHZlKHJlc3BvbnNlT2JqZWN0KTtcbiAgICAgIH07XG4gICAgICB2YXIgZmFpbHVyZSA9IHJlcXVlc3QgPT4ge1xuICAgICAgICB2YXIgZXJyb3JPYmplY3QgPSB7fTtcbiAgICAgICAgZXJyb3JPYmplY3Quc3RhdHVzVGV4dCA9IHJlcXVlc3Quc3RhdHVzVGV4dDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBlcnJvck9iamVjdC5lcnJvciA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgc2VsZi5sb2dnZXIud2FybihcImludmFsaWQganNvbiBlcnJvciBmcm9tIHNlcnZlclwiKTtcbiAgICAgICAgICBlcnJvck9iamVjdC5lcnJvciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KGVycm9yT2JqZWN0KTtcbiAgICAgIH07XG4gICAgICBzZWxmLmNhbGxIdHRwQ2xpZW50KHJlcXVlc3RJbnB1dCwgc3VjY2VzcywgZmFpbHVyZSk7XG4gICAgfSk7XG4gIH1cbn1cblxudmFyIENoYXRDbGllbnRGYWN0b3J5ID0gbmV3IENoYXRDbGllbnRGYWN0b3J5SW1wbCgpO1xuZXhwb3J0IHsgQ2hhdENsaWVudEZhY3RvcnkgfTtcbiIsImltcG9ydCBVdGlscyBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiB9IGZyb20gXCIuL2V4Y2VwdGlvbnNcIjtcbmltcG9ydCB7IENPTlRFTlRfVFlQRSB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuY2xhc3MgQ2hhdENvbnRyb2xsZXJBcmdzVmFsaWRhdG9yIHtcbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG4gIHZhbGlkYXRlTmV3Q29udHJvbGxlckRldGFpbHMoY2hhdERldGFpbHMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKmVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMqL1xuXG4gIHZhbGlkYXRlU2VuZE1lc3NhZ2UoYXJncykge1xuICAgIGlmICghVXRpbHMuaXNTdHJpbmcoYXJncy5tZXNzYWdlKSkge1xuICAgICAgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbihhcmdzLm1lc3NhZ2UgKyBcImlzIG5vdCBhIHZhbGlkIG1lc3NhZ2VcIik7XG4gICAgfVxuICAgIHRoaXMudmFsaWRhdGVDb250ZW50VHlwZShhcmdzLmNvbnRlbnRUeXBlKTtcbiAgfVxuXG4gIHZhbGlkYXRlQ29udGVudFR5cGUoY29udGVudFR5cGUpIHtcbiAgICBVdGlscy5hc3NlcnRJc0VudW0oY29udGVudFR5cGUsIE9iamVjdC52YWx1ZXMoQ09OVEVOVF9UWVBFKSwgXCJjb250ZW50VHlwZVwiKTsgXG4gIH1cblxuICAvKmVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzKi9cbiAgdmFsaWRhdGVDb25uZWN0Q2hhdChhcmdzKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyplc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzKi9cblxuICB2YWxpZGF0ZUxvZ2dlcihsb2dnZXIpIHtcbiAgICBVdGlscy5hc3NlcnRJc09iamVjdChsb2dnZXIsIFwibG9nZ2VyXCIpO1xuICAgIFtcImRlYnVnXCIsIFwiaW5mb1wiLCBcIndhcm5cIiwgXCJlcnJvclwiXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgICAgaWYgKCFVdGlscy5pc0Z1bmN0aW9uKGxvZ2dlclttZXRob2ROYW1lXSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbihcbiAgICAgICAgICBtZXRob2ROYW1lICtcbiAgICAgICAgICAgIFwiIHNob3VsZCBiZSBhIHZhbGlkIGZ1bmN0aW9uIG9uIHRoZSBwYXNzZWQgbG9nZ2VyIG9iamVjdCFcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFsaWRhdGVTZW5kRXZlbnQoYXJncykge1xuICAgIHRoaXMudmFsaWRhdGVDb250ZW50VHlwZShhcmdzLmNvbnRlbnRUeXBlKTtcbiAgfVxuXG4gIC8vIFRPRE86IE5vdCBzdXJlIGFib3V0IHRoaXMgQVBJLlxuICAvKmVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzKi9cbiAgdmFsaWRhdGVHZXRNZXNzYWdlcyhhcmdzKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyplc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzKi9cbn1cblxuY2xhc3MgQ2hhdFNlcnZpY2VBcmdzVmFsaWRhdG9yIGV4dGVuZHMgQ2hhdENvbnRyb2xsZXJBcmdzVmFsaWRhdG9yIHtcbiAgdmFsaWRhdGVDaGF0RGV0YWlscyhjaGF0RGV0YWlscykge1xuICAgIFV0aWxzLmFzc2VydElzT2JqZWN0KGNoYXREZXRhaWxzLCBcImNoYXREZXRhaWxzXCIpO1xuICAgIGlmICghY2hhdERldGFpbHMucGFydGljaXBhbnRUb2tlbiAmJiAhVXRpbHMuaXNGdW5jdGlvbihjaGF0RGV0YWlscy5nZXRDb25uZWN0aW9uVG9rZW4pKSB7XG4gICAgICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKFxuICAgICAgICBcImdldENvbm5lY3Rpb25Ub2tlbiB3YXMgbm90IGEgZnVuY3Rpb25cIiwgXG4gICAgICAgIGNoYXREZXRhaWxzLmdldENvbm5lY3Rpb25Ub2tlblxuICAgICAgKTtcbiAgICB9XG4gICAgVXRpbHMuYXNzZXJ0SXNOb25FbXB0eVN0cmluZyhcbiAgICAgIGNoYXREZXRhaWxzLmNvbnRhY3RJZCxcbiAgICAgIFwiY2hhdERldGFpbHMuY29udGFjdElkXCJcbiAgICApO1xuICAgIFV0aWxzLmFzc2VydElzTm9uRW1wdHlTdHJpbmcoXG4gICAgICBjaGF0RGV0YWlscy5wYXJ0aWNpcGFudElkLFxuICAgICAgXCJjaGF0RGV0YWlscy5wYXJ0aWNpcGFudElkXCJcbiAgICApO1xuICAgIGlmIChjaGF0RGV0YWlscy5jb25uZWN0aW9uRGV0YWlscykge1xuICAgICAgVXRpbHMuYXNzZXJ0SXNPYmplY3QoXG4gICAgICAgIGNoYXREZXRhaWxzLmNvbm5lY3Rpb25EZXRhaWxzLFxuICAgICAgICBcImNoYXREZXRhaWxzLmNvbm5lY3Rpb25EZXRhaWxzXCJcbiAgICAgICk7XG4gICAgICBVdGlscy5hc3NlcnRJc05vbkVtcHR5U3RyaW5nKFxuICAgICAgICBjaGF0RGV0YWlscy5jb25uZWN0aW9uRGV0YWlscy5QcmVTaWduZWRDb25uZWN0aW9uVXJsLFxuICAgICAgICBcImNoYXREZXRhaWxzLmNvbm5lY3Rpb25EZXRhaWxzLlByZVNpZ25lZENvbm5lY3Rpb25VcmxcIlxuICAgICAgKTtcbiAgICAgIFV0aWxzLmFzc2VydElzTm9uRW1wdHlTdHJpbmcoXG4gICAgICAgIGNoYXREZXRhaWxzLmNvbm5lY3Rpb25EZXRhaWxzLkNvbm5lY3Rpb25JZCxcbiAgICAgICAgXCJjaGF0RGV0YWlscy5jb25uZWN0aW9uRGV0YWlscy5Db25uZWN0aW9uSWRcIlxuICAgICAgKTtcbiAgICAgIFV0aWxzLmFzc2VydElzTm9uRW1wdHlTdHJpbmcoXG4gICAgICAgIGNoYXREZXRhaWxzLmNvbm5lY3Rpb25EZXRhaWxzLmNvbm5lY3Rpb25Ub2tlbixcbiAgICAgICAgXCJjaGF0RGV0YWlscy5jb25uZWN0aW9uRGV0YWlscy5jb25uZWN0aW9uVG9rZW5cIlxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGNoYXREZXRhaWxzLnBhcnRpY2lwYW50VG9rZW4pe1xuICAgICAgVXRpbHMuYXNzZXJ0SXNOb25FbXB0eVN0cmluZyhcbiAgICAgICAgY2hhdERldGFpbHMucGFydGljaXBhbnRUb2tlbixcbiAgICAgICAgXCJjaGF0RGV0YWlscy5wYXJ0aWNpcGFudFRva2VuXCJcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgdmFsaWRhdGVJbml0aWF0ZUNoYXRSZXNwb25zZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIG5vcm1hbGl6ZUNoYXREZXRhaWxzKGNoYXREZXRhaWxzSW5wdXQpIHtcbiAgICBsZXQgY2hhdERldGFpbHMgPSB7fTtcbiAgICBjaGF0RGV0YWlscy5nZXRDb25uZWN0aW9uVG9rZW4gPSBjaGF0RGV0YWlsc0lucHV0LmdldENvbm5lY3Rpb25Ub2tlbiB8fCBudWxsO1xuICAgIGNoYXREZXRhaWxzLmNvbnRhY3RJZCA9IGNoYXREZXRhaWxzSW5wdXQuQ29udGFjdElkIHx8IGNoYXREZXRhaWxzSW5wdXQuY29udGFjdElkO1xuICAgIGNoYXREZXRhaWxzLnBhcnRpY2lwYW50SWQgPSBjaGF0RGV0YWlsc0lucHV0LlBhcnRpY2lwYW50SWQgfHwgY2hhdERldGFpbHNJbnB1dC5wYXJ0aWNpcGFudElkO1xuICAgIGNoYXREZXRhaWxzLmluaXRpYWxDb250YWN0SWQgPSBjaGF0RGV0YWlsc0lucHV0LkluaXRpYWxDb250YWN0SWQgfHwgY2hhdERldGFpbHNJbnB1dC5pbml0aWFsQ29udGFjdElkXG4gICAgfHwgY2hhdERldGFpbHMuY29udGFjdElkIHx8IGNoYXREZXRhaWxzLkNvbnRhY3RJZDtcbiAgICBpZiAoY2hhdERldGFpbHNJbnB1dC5wYXJ0aWNpcGFudFRva2VuIHx8IGNoYXREZXRhaWxzSW5wdXQuUGFydGljaXBhbnRUb2tlbikge1xuICAgICAgY2hhdERldGFpbHMucGFydGljaXBhbnRUb2tlbiA9IGNoYXREZXRhaWxzSW5wdXQuUGFydGljaXBhbnRUb2tlbiB8fCBjaGF0RGV0YWlsc0lucHV0LnBhcnRpY2lwYW50VG9rZW47XG4gICAgICB0aGlzLnZhbGlkYXRlQ2hhdERldGFpbHMoY2hhdERldGFpbHMpO1xuICAgICAgcmV0dXJuIGNoYXREZXRhaWxzO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBjaGF0RGV0YWlsc0lucHV0LkNoYXRDb25uZWN0aW9uQXR0cmlidXRlcyAmJlxuICAgICAgY2hhdERldGFpbHNJbnB1dC5DaGF0Q29ubmVjdGlvbkF0dHJpYnV0ZXMuUGFydGljaXBhbnRDcmVkZW50aWFsc1xuICAgICkge1xuICAgICAgdGhpcy52YWxpZGF0ZUluaXRpYXRlQ2hhdFJlc3BvbnNlKGNoYXREZXRhaWxzSW5wdXQpO1xuICAgICAgdmFyIGNvbm5lY3Rpb25EZXRhaWxzID0ge307XG4gICAgICBjb25uZWN0aW9uRGV0YWlscy5jb25uZWN0aW9uVG9rZW4gPVxuICAgICAgICBjaGF0RGV0YWlsc0lucHV0LkNoYXRDb25uZWN0aW9uQXR0cmlidXRlcy5QYXJ0aWNpcGFudENyZWRlbnRpYWxzLkNvbm5lY3Rpb25BdXRoZW50aWNhdGlvblRva2VuO1xuICAgICAgY29ubmVjdGlvbkRldGFpbHMuQ29ubmVjdGlvbklkID1cbiAgICAgICAgY2hhdERldGFpbHNJbnB1dC5DaGF0Q29ubmVjdGlvbkF0dHJpYnV0ZXMuQ29ubmVjdGlvbklkO1xuICAgICAgY29ubmVjdGlvbkRldGFpbHMuUHJlU2lnbmVkQ29ubmVjdGlvblVybCA9XG4gICAgICAgIGNoYXREZXRhaWxzSW5wdXQuQ2hhdENvbm5lY3Rpb25BdHRyaWJ1dGVzLlByZVNpZ25lZENvbm5lY3Rpb25Vcmw7XG4gICAgICBjaGF0RGV0YWlscy5jb25uZWN0aW9uRGV0YWlscyA9IGNvbm5lY3Rpb25EZXRhaWxzO1xuICAgICAgcmV0dXJuIGNoYXREZXRhaWxzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbGlkYXRlQ2hhdERldGFpbHMoY2hhdERldGFpbHMpO1xuICAgICAgcmV0dXJuIGNoYXREZXRhaWxzO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBDaGF0U2VydmljZUFyZ3NWYWxpZGF0b3IgfTtcbiIsImltcG9ydCB7IENPTk5FQ1RJT05fVE9LRU5fUE9MTElOR19JTlRFUlZBTCB9IGZyb20gXCIuLi8uLi9jb25zdGFudHNcIjtcblxuY29uc3QgQ29ubmVjdGlvbkhlbHBlclN0YXR1cyA9IHtcbiAgTmV2ZXJTdGFydGVkOiBcIk5ldmVyU3RhcnRlZFwiLFxuICBTdGFydGluZzogXCJTdGFydGluZ1wiLFxuICBDb25uZWN0ZWQ6IFwiQ29ubmVjdGVkXCIsXG4gIENvbm5lY3Rpb25Mb3N0OiBcIkNvbm5lY3Rpb25Mb3N0XCIsXG4gIEVuZGVkOiBcIkVuZGVkXCJcbn07XG5cbmNvbnN0IENvbm5lY3Rpb25IZWxwZXJFdmVudHMgPSB7XG4gIENvbm5lY3Rpb25Mb3N0OiBcIkNvbm5lY3Rpb25Mb3N0XCIsIC8vIGV2ZW50IGRhdGEgaXM6IHtyZWFzb246IC4uLn1cbiAgQ29ubmVjdGlvbkdhaW5lZDogXCJDb25uZWN0aW9uR2FpbmVkXCIsIC8vIGV2ZW50IGRhdGEgaXM6IHtyZWFzb246IC4uLn1cbiAgRW5kZWQ6IFwiRW5kZWRcIiwgLy8gZXZlbnQgZGF0YSBpczoge3JlYXNvbjogLi4ufVxuICBJbmNvbWluZ01lc3NhZ2U6IFwiSW5jb21pbmdNZXNzYWdlXCIgLy8gZXZlbnQgZGF0YSBpczoge3BheWxvYWRTdHJpbmc6IC4uLn1cbn07XG5cbmNvbnN0IENvbm5lY3Rpb25UeXBlID0ge1xuICBJT1Q6ICdJT1QnLFxuICBMUEM6ICdMUEMnXG59O1xuXG5jb25zdCBDb25uZWN0aW9uSW5mb1R5cGUgPSB7XG4gIFdFQlNPQ0tFVDogXCJXRUJTT0NLRVRcIixcbiAgQ09OTkVDVElPTl9DUkVERU5USUFMUzogXCJDT05ORUNUSU9OX0NSRURFTlRJQUxTXCJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VDb25uZWN0aW9uSGVscGVyIHtcbiAgY29uc3RydWN0b3IoY29ubmVjdGlvbkRldGFpbHNQcm92aWRlcikge1xuICAgIHRoaXMuY29ubmVjdGlvbkRldGFpbHNQcm92aWRlciA9IGNvbm5lY3Rpb25EZXRhaWxzUHJvdmlkZXI7XG4gICAgdGhpcy5pc1N0YXJ0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHN0YXJ0Q29ubmVjdGlvblRva2VuUG9sbGluZygpIHtcbiAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgdGhpcy5jb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyLmZldGNoQ29ubmVjdGlvblRva2VuKCk7XG4gICAgfSwgQ09OTkVDVElPTl9UT0tFTl9QT0xMSU5HX0lOVEVSVkFMKTtcbiAgfVxuXG4gIHN0YXJ0KCkge1xuICAgIGlmICh0aGlzLmlzU3RhcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmlzU3RhcnRlZCA9IHRydWU7XG4gICAgdGhpcy5zdGFydENvbm5lY3Rpb25Ub2tlblBvbGxpbmcoKTtcbiAgfVxuXG4gIGVuZCgpIHtcbiAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICB9XG5cbiAgZ2V0Q29ubmVjdGlvblRva2VuKCkge1xuICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzUHJvdmlkZXIuY29ubmVjdGlvblRva2VuO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIENvbm5lY3Rpb25IZWxwZXJTdGF0dXMsXG4gIENvbm5lY3Rpb25IZWxwZXJFdmVudHMsXG4gIENvbm5lY3Rpb25UeXBlLFxuICBDb25uZWN0aW9uSW5mb1R5cGVcbn07XG4iLCJpbXBvcnQgVXRpbHMgZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmNvbnN0IEFMTF9FVkVOVFMgPSBcIjw8YWxsPj5cIjtcblxuLyoqXG4gKiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIGFuIGV2ZW50IHN1YnNjcmlwdGlvbiBpbiBhbiBFdmVudEJ1cy5cbiAqL1xudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKHN1Yk1hcCwgZXZlbnROYW1lLCBmKSB7XG4gIHRoaXMuc3ViTWFwID0gc3ViTWFwO1xuICB0aGlzLmlkID0gVXRpbHMucmFuZG9tSWQoKTtcbiAgdGhpcy5ldmVudE5hbWUgPSBldmVudE5hbWU7XG4gIHRoaXMuZiA9IGY7XG59O1xuXG4vKipcbiAqIFVuc3Vic2NyaWJlIHRoZSBoYW5kbGVyIG9mIHRoaXMgc3Vic2NyaXB0aW9uIGZyb20gdGhlIEV2ZW50QnVzXG4gKiBmcm9tIHdoaWNoIGl0IHdhcyBjcmVhdGVkLlxuICovXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc3ViTWFwLnVuc3Vic2NyaWJlKHRoaXMuZXZlbnROYW1lLCB0aGlzLmlkKTtcbn07XG5cbi8qKlxuICogQSBtYXAgb2YgZXZlbnQgc3Vic2NyaXB0aW9ucywgdXNlZCBieSB0aGUgRXZlbnRCdXMuXG4gKi9cbnZhciBTdWJzY3JpcHRpb25NYXAgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdWJJZE1hcCA9IHt9O1xuICB0aGlzLnN1YkV2ZW50TmFtZU1hcCA9IHt9O1xufTtcblxuLyoqXG4gKiBBZGQgYSBzdWJzY3JpcHRpb24gZm9yIHRoZSBuYW1lZCBldmVudC4gIENyZWF0ZXMgYSBuZXcgU3Vic2NyaXB0aW9uXG4gKiBvYmplY3QgYW5kIHJldHVybnMgaXQuICBUaGlzIG9iamVjdCBjYW4gYmUgdXNlZCB0byB1bnN1YnNjcmliZS5cbiAqL1xuU3Vic2NyaXB0aW9uTWFwLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbihldmVudE5hbWUsIGYpIHtcbiAgdmFyIHN1YiA9IG5ldyBTdWJzY3JpcHRpb24odGhpcywgZXZlbnROYW1lLCBmKTtcblxuICB0aGlzLnN1YklkTWFwW3N1Yi5pZF0gPSBzdWI7XG4gIHZhciBzdWJMaXN0ID0gdGhpcy5zdWJFdmVudE5hbWVNYXBbZXZlbnROYW1lXSB8fCBbXTtcbiAgc3ViTGlzdC5wdXNoKHN1Yik7XG4gIHRoaXMuc3ViRXZlbnROYW1lTWFwW2V2ZW50TmFtZV0gPSBzdWJMaXN0O1xuICByZXR1cm4gKCkgPT4gc3ViLnVuc3Vic2NyaWJlKCk7XG59O1xuXG4vKipcbiAqIFVuc3Vic2NyaWJlIGEgc3Vic2NyaXB0aW9uIG1hdGNoaW5nIHRoZSBnaXZlbiBldmVudCBuYW1lIGFuZCBpZC5cbiAqL1xuU3Vic2NyaXB0aW9uTWFwLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgc3ViSWQpIHtcbiAgaWYgKFV0aWxzLmNvbnRhaW5zKHRoaXMuc3ViRXZlbnROYW1lTWFwLCBldmVudE5hbWUpKSB7XG4gICAgdGhpcy5zdWJFdmVudE5hbWVNYXBbZXZlbnROYW1lXSA9IHRoaXMuc3ViRXZlbnROYW1lTWFwW2V2ZW50TmFtZV0uZmlsdGVyKFxuICAgICAgZnVuY3Rpb24ocykge1xuICAgICAgICByZXR1cm4gcy5pZCAhPT0gc3ViSWQ7XG4gICAgICB9XG4gICAgKTtcblxuICAgIGlmICh0aGlzLnN1YkV2ZW50TmFtZU1hcFtldmVudE5hbWVdLmxlbmd0aCA8IDEpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLnN1YkV2ZW50TmFtZU1hcFtldmVudE5hbWVdO1xuICAgIH1cbiAgfVxuXG4gIGlmIChVdGlscy5jb250YWlucyh0aGlzLnN1YklkTWFwLCBzdWJJZCkpIHtcbiAgICBkZWxldGUgdGhpcy5zdWJJZE1hcFtzdWJJZF07XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IGEgbGlzdCBvZiBhbGwgc3Vic2NyaXB0aW9ucyBpbiB0aGUgc3Vic2NyaXB0aW9uIG1hcC5cbiAqL1xuU3Vic2NyaXB0aW9uTWFwLnByb3RvdHlwZS5nZXRBbGxTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBVdGlscy52YWx1ZXModGhpcy5zdWJFdmVudE5hbWVNYXApLnJlZHVjZShmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICB9LCBbXSk7XG59O1xuXG4vKipcbiAqIEdldCBhIGxpc3Qgb2Ygc3Vic2NyaXB0aW9ucyBmb3IgdGhlIGdpdmVuIGV2ZW50IG5hbWUsIG9yIGFuIGVtcHR5XG4gKiBsaXN0IGlmIHRoZXJlIGFyZSBubyBzdWJzY3JpcHRpb25zLlxuICovXG5TdWJzY3JpcHRpb25NYXAucHJvdG90eXBlLmdldFN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgcmV0dXJuIHRoaXMuc3ViRXZlbnROYW1lTWFwW2V2ZW50TmFtZV0gfHwgW107XG59O1xuXG4vKipcbiAqIEFuIG9iamVjdCB3aGljaCBtYWludGFpbnMgYSBtYXAgb2Ygc3Vic2NyaXB0aW9ucyBhbmQgc2VydmVzIGFzIHRoZVxuICogbWVjaGFuaXNtIGZvciB0cmlnZ2VyaW5nIGV2ZW50cyB0byBiZSBoYW5kbGVkIGJ5IHN1YnNjcmliZXJzLlxuICovXG52YXIgRXZlbnRCdXMgPSBmdW5jdGlvbihwYXJhbXNJbikge1xuICB2YXIgcGFyYW1zID0gcGFyYW1zSW4gfHwge307XG5cbiAgdGhpcy5zdWJNYXAgPSBuZXcgU3Vic2NyaXB0aW9uTWFwKCk7XG4gIHRoaXMubG9nRXZlbnRzID0gcGFyYW1zLmxvZ0V2ZW50cyB8fCBmYWxzZTtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIHRoZSBuYW1lZCBldmVudC4gIFJldHVybnMgYSBuZXcgU3Vic2NyaXB0aW9uIG9iamVjdFxuICogd2hpY2ggY2FuIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUuXG4gKi9cbkV2ZW50QnVzLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbihldmVudE5hbWUsIGYpIHtcbiAgVXRpbHMuYXNzZXJ0Tm90TnVsbChldmVudE5hbWUsIFwiZXZlbnROYW1lXCIpO1xuICBVdGlscy5hc3NlcnROb3ROdWxsKGYsIFwiZlwiKTtcbiAgVXRpbHMuYXNzZXJ0VHJ1ZShVdGlscy5pc0Z1bmN0aW9uKGYpLCBcImYgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICByZXR1cm4gdGhpcy5zdWJNYXAuc3Vic2NyaWJlKGV2ZW50TmFtZSwgZik7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSBhIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBhbGwgZXZlbnRzLlxuICovXG5FdmVudEJ1cy5wcm90b3R5cGUuc3Vic2NyaWJlQWxsID0gZnVuY3Rpb24oZikge1xuICBVdGlscy5hc3NlcnROb3ROdWxsKGYsIFwiZlwiKTtcbiAgVXRpbHMuYXNzZXJ0VHJ1ZShVdGlscy5pc0Z1bmN0aW9uKGYpLCBcImYgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICByZXR1cm4gdGhpcy5zdWJNYXAuc3Vic2NyaWJlKEFMTF9FVkVOVFMsIGYpO1xufTtcblxuLyoqXG4gKiBHZXQgYSBsaXN0IG9mIHN1YnNjcmlwdGlvbnMgZm9yIHRoZSBnaXZlbiBldmVudCBuYW1lLCBvciBhbiBlbXB0eVxuICogbGlzdCBpZiB0aGVyZSBhcmUgbm8gc3Vic2NyaXB0aW9ucy5cbiAqL1xuRXZlbnRCdXMucHJvdG90eXBlLmdldFN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgcmV0dXJuIHRoaXMuc3ViTWFwLmdldFN1YnNjcmlwdGlvbnMoZXZlbnROYW1lKTtcbn07XG5cbi8qKlxuICogVHJpZ2dlciB0aGUgZ2l2ZW4gZXZlbnQgd2l0aCB0aGUgZ2l2ZW4gZGF0YS4gIEFsbCBtZXRob2RzIHN1YnNjcmliZWRcbiAqIHRvIHRoaXMgZXZlbnQgd2lsbCBiZSBjYWxsZWQgYW5kIGFyZSBwcm92aWRlZCB3aXRoIHRoZSBnaXZlbiBhcmJpdHJhcnlcbiAqIGRhdGEgb2JqZWN0IGFuZCB0aGUgbmFtZSBvZiB0aGUgZXZlbnQsIGluIHRoYXQgb3JkZXIuXG4gKi9cbkV2ZW50QnVzLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24oZXZlbnROYW1lLCBkYXRhKSB7XG4gIFV0aWxzLmFzc2VydE5vdE51bGwoZXZlbnROYW1lLCBcImV2ZW50TmFtZVwiKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgYWxsRXZlbnRTdWJzID0gdGhpcy5zdWJNYXAuZ2V0U3Vic2NyaXB0aW9ucyhBTExfRVZFTlRTKTtcbiAgdmFyIGV2ZW50U3VicyA9IHRoaXMuc3ViTWFwLmdldFN1YnNjcmlwdGlvbnMoZXZlbnROYW1lKTtcblxuICAvLyBpZiAodGhpcy5sb2dFdmVudHMgJiYgKGV2ZW50TmFtZSAhPT0gY29ubmVjdC5FdmVudFR5cGUuTE9HICYmIGV2ZW50TmFtZSAhPT0gY29ubmVjdC5FdmVudFR5cGUuTUFTVEVSX1JFU1BPTlNFICYmIGV2ZW50TmFtZSAhPT0gY29ubmVjdC5FdmVudFR5cGUuQVBJX01FVFJJQykpIHtcbiAgLy8gICAgY29ubmVjdC5nZXRMb2coKS50cmFjZShcIlB1Ymxpc2hpbmcgZXZlbnQ6ICVzXCIsIGV2ZW50TmFtZSk7XG4gIC8vIH1cblxuICBhbGxFdmVudFN1YnMuY29uY2F0KGV2ZW50U3VicykuZm9yRWFjaChmdW5jdGlvbihzdWIpIHtcbiAgICB0cnkge1xuICAgICAgc3ViLmYoZGF0YSB8fCBudWxsLCBldmVudE5hbWUsIHNlbGYpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vICAgY29ubmVjdFxuICAgICAgLy8gICAgIC5nZXRMb2coKVxuICAgICAgLy8gICAgIC5lcnJvcihcIiclcycgZXZlbnQgaGFuZGxlciBmYWlsZWQuXCIsIGV2ZW50TmFtZSlcbiAgICAgIC8vICAgICAud2l0aEV4Y2VwdGlvbihlKTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBUcmlnZ2VyIHRoZSBnaXZlbiBldmVudCB3aXRoIHRoZSBnaXZlbiBkYXRhLiAgQWxsIG1ldGhvZHMgc3Vic2NyaWJlZFxuICogdG8gdGhpcyBldmVudCB3aWxsIGJlIGNhbGxlZCBhbmQgYXJlIHByb3ZpZGVkIHdpdGggdGhlIGdpdmVuIGFyYml0cmFyeVxuICogZGF0YSBvYmplY3QgYW5kIHRoZSBuYW1lIG9mIHRoZSBldmVudCwgaW4gdGhhdCBvcmRlci5cbiAqL1xuRXZlbnRCdXMucHJvdG90eXBlLnRyaWdnZXJBc3luYyA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgZGF0YSkge1xuICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudHJpZ2dlcihldmVudE5hbWUsIGRhdGEpLCAwKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIGNsb3N1cmUgd2hpY2ggYnJpZGdlcyBhbiBldmVudCBmcm9tIGFub3RoZXIgRXZlbnRCdXMgdG8gdGhpcyBidXMuXG4gKlxuICogVXNhZ2U6XG4gKiBjb25kdWl0Lm9uVXBzdHJlYW0oXCJNeUV2ZW50XCIsIGJ1cy5icmlkZ2UoKSk7XG4gKi9cbkV2ZW50QnVzLnByb3RvdHlwZS5icmlkZ2UgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXR1cm4gZnVuY3Rpb24oZGF0YSwgZXZlbnQpIHtcbiAgICBzZWxmLnRyaWdnZXIoZXZlbnQsIGRhdGEpO1xuICB9O1xufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBhbGwgZXZlbnRzIGluIHRoZSBldmVudCBidXMuXG4gKi9cbkV2ZW50QnVzLnByb3RvdHlwZS51bnN1YnNjcmliZUFsbCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnN1Yk1hcC5nZXRBbGxTdWJzY3JpcHRpb25zKCkuZm9yRWFjaChmdW5jdGlvbihzdWIpIHtcbiAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgeyBFdmVudEJ1cyB9O1xuIiwiaW1wb3J0IHsgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIH0gZnJvbSBcIi4uL2V4Y2VwdGlvbnNcIjtcbmltcG9ydCB7IENvbm5lY3Rpb25UeXBlLCBDb25uZWN0aW9uSW5mb1R5cGUgfSBmcm9tIFwiLi9iYXNlQ29ubmVjdGlvbkhlbHBlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyIHtcblxuICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uRGV0YWlscywgcGFydGljaXBhbnRUb2tlbiwgY2hhdENsaWVudCwgY3JlYXRlQ29ubmVjdGlvblRva2VuKSB7XG4gICAgdGhpcy5jaGF0Q2xpZW50ID0gY2hhdENsaWVudDtcbiAgICB0aGlzLnBhcnRpY2lwYW50VG9rZW4gPSBwYXJ0aWNpcGFudFRva2VuIHx8IG51bGw7XG4gICAgdGhpcy5jb25uZWN0aW9uRGV0YWlscyA9IGNvbm5lY3Rpb25EZXRhaWxzIHx8IG51bGw7XG4gICAgdGhpcy5jb25uZWN0aW9uVG9rZW4gPSBudWxsO1xuICAgIHRoaXMuY29ubmVjdGlvblR5cGUgPSBudWxsO1xuICAgIHRoaXMuZmlyc3RDYWxsID0gdHJ1ZTtcbiAgICB0aGlzLmNyZWF0ZUNvbm5lY3Rpb25Ub2tlbiA9IGNyZWF0ZUNvbm5lY3Rpb25Ub2tlbiB8fCBudWxsO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICBpZiAoIXRoaXMucGFydGljaXBhbnRUb2tlbiAmJiB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuX2hhbmRsZVByZXNldENvbm5lY3Rpb25EZXRhaWxzKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLl9mZXRjaENvbm5lY3Rpb25EZXRhaWxzKCkudGhlbigoKSA9PiB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzKTtcbiAgICB9XG4gIH1cblxuICBmZXRjaENvbm5lY3Rpb25EZXRhaWxzKCkge1xuICAgIC8vIFRvIG5vdCB3YXN0ZSB0aGUgZmlyc3QgcmVxdWVzdCB3ZSBoYXZlIHRvIG1ha2UgaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIElPVCB2cy4gTFBDXG4gICAgLy8gd2UgcmV0dXJuIHRoZSBhbHJlYWR5IGZldGNoZWQgY29ubmVjdGlvbkRldGFpbHMgaWYgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbC5cbiAgICBpZiAodGhpcy5maXJzdENhbGwpIHtcbiAgICAgIHRoaXMuZmlyc3RDYWxsID0gZmFsc2U7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29ubmVjdGlvbkRldGFpbHMpO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMucGFydGljaXBhbnRUb2tlbiAmJiB0aGlzLmNvbm5lY3Rpb25UeXBlID09PSBDb25uZWN0aW9uVHlwZS5JT1QpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwiRmF0YWw6IENhbm5vdCB1c2Ugc3RhdGljIGNvbm5lY3Rpb24gZGV0YWlscyBtb3JlIHRoYW4gb25jZS5cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLl9mZXRjaENvbm5lY3Rpb25EZXRhaWxzKCkudGhlbigoKSA9PiB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzKTtcbiAgICB9XG4gIH1cblxuICBmZXRjaENvbm5lY3Rpb25Ub2tlbigpIHtcbiAgICAvLyBUbyBub3Qgd2FzdGUgdGhlIGZpcnN0IHJlcXVlc3Qgd2UgaGF2ZSB0byBtYWtlIGluIG9yZGVyIHRvIGRldGVybWluZSBJT1QgdnMuIExQQ1xuICAgIC8vIHdlIHJldHVybiB0aGUgYWxyZWFkeSBmZXRjaGVkIGNvbm5lY3Rpb25Ub2tlbiBpZiB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsXG4gICAgaWYgKHRoaXMuZmlyc3RDYWxsKSB7XG4gICAgICB0aGlzLmZpcnN0Q2FsbCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmNvbm5lY3Rpb25Ub2tlbik7XG4gICAgfSBlbHNlIGlmICghdGhpcy5wYXJ0aWNpcGFudFRva2VuICYmIHRoaXMuY29ubmVjdGlvblR5cGUgPT09IENvbm5lY3Rpb25UeXBlLklPVCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwiRmF0YWw6IENhbm5vdCB1c2Ugc3RhdGljIGNvbm5lY3Rpb24gZGV0YWlscyBtb3JlIHRoYW4gb25jZS5cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLl9mZXRjaENvbm5lY3Rpb25EZXRhaWxzKCkudGhlbigoKSA9PiB0aGlzLmNvbm5lY3Rpb25Ub2tlbik7XG4gICAgfVxuICB9XG5cbiAgX2hhbmRsZVByZXNldENvbm5lY3Rpb25EZXRhaWxzKCkge1xuICAgIHRoaXMuY29ubmVjdGlvblR5cGUgPSBDb25uZWN0aW9uVHlwZS5JT1Q7XG4gICAgdGhpcy5jb25uZWN0aW9uVG9rZW4gPSB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzLmNvbm5lY3Rpb25Ub2tlbjtcbiAgICB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzID0ge1xuICAgICAgY29ubmVjdGlvbklkOiB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzLkNvbm5lY3Rpb25JZCxcbiAgICAgIHByZVNpZ25lZENvbm5lY3Rpb25Vcmw6IHRoaXMuY29ubmVjdGlvbkRldGFpbHMuUHJlU2lnbmVkQ29ubmVjdGlvblVybFxuICAgIH07XG4gIH1cblxuICBfaGFuZGxlQ3JlYXRlUGFydGljaXBhbnRDb25uZWN0aW9uUmVzcG9uc2UoY29ubmVjdGlvbkRldGFpbHMpIHtcbiAgICB0aGlzLmNvbm5lY3Rpb25UeXBlID0gQ29ubmVjdGlvblR5cGUuTFBDO1xuICAgIHRoaXMuY29ubmVjdGlvblRva2VuID0gY29ubmVjdGlvbkRldGFpbHMuQ29ubmVjdGlvbkNyZWRlbnRpYWxzLkNvbm5lY3Rpb25Ub2tlbjtcbiAgICB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzID0ge1xuICAgICAgY29ubmVjdGlvbklkOiBudWxsLFxuICAgICAgcHJlU2lnbmVkQ29ubmVjdGlvblVybDogY29ubmVjdGlvbkRldGFpbHMuV2Vic29ja2V0LlVybFxuICAgIH07XG4gIH1cblxuICBfaGFuZGxlQ3JlYXRlQ29ubmVjdGlvbkRldGFpbHNSZXNwb25zZShjb25uZWN0aW9uRGV0YWlscykge1xuICAgIGlmIChjb25uZWN0aW9uRGV0YWlscy5QcmVTaWduZWRDb25uZWN0aW9uVXJsKSB7XG4gICAgICB0aGlzLmNvbm5lY3Rpb25UeXBlID0gY29ubmVjdGlvbkRldGFpbHMuUHJlU2lnbmVkQ29ubmVjdGlvblVybC5pbmNsdWRlcyhcIi5pb3QuXCIpID8gQ29ubmVjdGlvblR5cGUuSU9UIDogQ29ubmVjdGlvblR5cGUuTFBDO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbm5lY3Rpb25UeXBlID0gY29ubmVjdGlvbkRldGFpbHMuY29ubmVjdGlvbklkID8gQ29ubmVjdGlvblR5cGUuSU9UIDogQ29ubmVjdGlvblR5cGUuTFBDO1xuICAgIH1cbiAgICB0aGlzLmNvbm5lY3Rpb25Ub2tlbiA9IGNvbm5lY3Rpb25EZXRhaWxzLlBhcnRpY2lwYW50Q3JlZGVudGlhbHMuQ29ubmVjdGlvbkF1dGhlbnRpY2F0aW9uVG9rZW47XG4gICAgdGhpcy5jb25uZWN0aW9uRGV0YWlscyA9IHtcbiAgICAgICAgY29ubmVjdGlvbklkOiBjb25uZWN0aW9uRGV0YWlscy5Db25uZWN0aW9uSWQsXG4gICAgICAgIHByZVNpZ25lZENvbm5lY3Rpb25Vcmw6IGNvbm5lY3Rpb25EZXRhaWxzLlByZVNpZ25lZENvbm5lY3Rpb25VcmxcbiAgICB9O1xuICB9XG5cbiAgX2hhbmRsZUNyZWF0ZUNvbm5lY3Rpb25Ub2tlblJlc3BvbnNlKGNvbm5lY3Rpb25Ub2tlbikge1xuICAgIHRoaXMuY29ubmVjdGlvblRva2VuID0gY29ubmVjdGlvblRva2VuO1xuICAgIHRoaXMuY29ubmVjdGlvblR5cGUgPSBDb25uZWN0aW9uVHlwZS5MUEM7XG4gICAgdGhpcy5jb25uZWN0aW9uRGV0YWlscyA9IHtcbiAgICAgIGNvbm5lY3Rpb25JZDogbnVsbCxcbiAgICAgIHByZVNpZ25lZENvbm5lY3Rpb25Vcmw6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgX2ZldGNoQ29ubmVjdGlvbkRldGFpbHMoKSB7XG4gICAgLy8gSWYgd2UgYXJlIHVzaW5nIExQQywgdXNlIHRoZSBuZXcgY3JlYXRlUGFydGljaXBhbnRDb25uZWN0aW9uIENoYXQgQVBJLiBcbiAgICAvLyBPdGhlcndpc2UsIHVzZSB0aGUgb2xkIGNyZWF0ZUNvbm5lY3Rpb25EZXRhaWxzIEFQSSBcbiAgICAvLyAoY3JlYXRlUGFydGljaXBhbnRDb25uZWN0aW9uIGRvZXMgbm90IGdpdmUgdXMgY29ubmVjdGlvbklkLCB3aGljaCBpcyBtYW5kYXRvcnkgZm9yIElPVCBjb25uZWN0aW9uIGVzdGFibGlzaG1lbnQuKVxuICAgIGlmICh0aGlzLnBhcnRpY2lwYW50VG9rZW4pIHtcbiAgICAgIHJldHVybiB0aGlzLmNoYXRDbGllbnRcbiAgICAgICAgLmNyZWF0ZVBhcnRpY2lwYW50Q29ubmVjdGlvbih0aGlzLnBhcnRpY2lwYW50VG9rZW4sIFtDb25uZWN0aW9uSW5mb1R5cGUuV0VCU09DS0VULCBDb25uZWN0aW9uSW5mb1R5cGUuQ09OTkVDVElPTl9DUkVERU5USUFMU10gKVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5XZWJzb2NrZXQuVXJsIT09bnVsbCAmJiByZXNwb25zZS5kYXRhLldlYnNvY2tldC5VcmwuaW5jbHVkZXMoXCIuaW90LlwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhdENsaWVudFxuICAgICAgICAgICAgICAuY3JlYXRlQ29ubmVjdGlvbkRldGFpbHModGhpcy5wYXJ0aWNpcGFudFRva2VuKVxuICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB0aGlzLl9oYW5kbGVDcmVhdGVDb25uZWN0aW9uRGV0YWlsc1Jlc3BvbnNlKHJlc3BvbnNlLmRhdGEpKVxuICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7XG4gICAgICAgICAgICAgICAgICByZWFzb246IFwiRmFpbGVkIHRvIGZldGNoIGNvbm5lY3Rpb25EZXRhaWxzIHdpdGggY3JlYXRlQ29ubmVjdGlvbkRldGFpbHNcIixcbiAgICAgICAgICAgICAgICAgIF9kZWJ1ZzogZXJyb3JcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVDcmVhdGVQYXJ0aWNpcGFudENvbm5lY3Rpb25SZXNwb25zZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHtcbiAgICAgICAgICAgIHJlYXNvbjogXCJGYWlsZWQgdG8gZmV0Y2ggY29ubmVjdGlvbkRldGFpbHMgd2l0aCBjcmVhdGVQYXJ0aWNpcGFudENvbm5lY3Rpb25cIixcbiAgICAgICAgICAgIF9kZWJ1ZzogZXJyb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNyZWF0ZUNvbm5lY3Rpb25Ub2tlbikge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQ29ubmVjdGlvblRva2VuKClcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gdGhpcy5faGFuZGxlQ3JlYXRlQ29ubmVjdGlvblRva2VuUmVzcG9uc2UocmVzcG9uc2UuY2hhdFRva2VuVHJhbnNwb3J0LnBhcnRpY2lwYW50VG9rZW4pKVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7XG4gICAgICAgICAgICByZWFzb246IFwiRmFpbGVkIHRvIGZldGNoIGNvbm5lY3Rpb25Ub2tlbiB2aWEgY3JlYXRlQ29ubmVjdGlvblRva2VuIGFwaVwiLFxuICAgICAgICAgICAgX2RlYnVnOiBlcnJvclxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoe1xuICAgICAgICByZWFzb246IFwiRmFpbGVkIHRvIGZldGNoIGNvbm5lY3Rpb25EZXRhaWxzOiBhIHZhbGlkIGNyZWF0ZUNvbm5lY3Rpb25Ub2tlbiB3YXMgbm90IHN1cHBsaWVkLlwiLFxuICAgICAgICBfZGVidWc6IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oXCJjcmVhdGVDb25uZWN0aW9uVG9rZW4gd2FzIGludmFsaWRcIilcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSIsImltcG9ydCB7XG4gIFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb25cbn0gZnJvbSBcIi4uL2NvcmUvZXhjZXB0aW9uc1wiO1xuXG5pbXBvcnQgUGFobyBmcm9tIFwiLi4vcGFoby1tcXR0XCI7XG5cblxuLy8gV2hhdCBpcyB0aGUgZXhwZWN0YXRpb24gZnJvbSB0aGlzIGNsYXNzP1xuLy8gVGhpcyBzaG91bGQgcHJvdmlkZSBhbiBpbnRlcmZhY2UgZm9yIGNvbm5lY3RpbmcgKyBzdWJzY3JpYmluZyAmJiBkaXNjb25uZWN0aW5nICsgdW5zdWJzY3JpYmluZyB0byBlbmRwb2ludCArIHRvcGljLlxuLy8gVGhpcyBjbGFzcyBzaG91bGQgY2FsbCBiYWNrXG4vKmVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzKi9cbmNsYXNzIE1RVFRDbGllbnQge1xuICAvKipcbiAgICogQHBhcmFtIGNvbm5lY3Rpb25PcHRpb25zIChvYmplY3QpIC1cbiAgICogICAgICBjb25uZWN0T3B0aW9ucy51c2VTU0wgLSBpZiBwcmVzZW50IGFuZCB0cnVlLCB1c2UgYW4gU1NMIFdlYnNvY2tldCBjb25uZWN0aW9uLlxuICAgKiAgICAgIGNvbm5lY3RPcHRpb25zLmtlZXBBbGl2ZUludGVydmFsIC0gdGhlIHNlcnZlciBkaXNjb25uZWN0cyB0aGlzIGNsaWVudCBpZiB0aGVyZSBpcyBubyBhY3Rpdml0eSBmb3IgdGhpcyBudW1iZXIgb2Ygc2Vjb25kcy5cbiAgICogICAgICBjb25uZWN0T3B0aW9ucy5yZWNvbm5lY3QgLSBTZXRzIHdoZXRoZXIgdGhlIGNsaWVudCB3aWxsIGF1dG9tYXRpY2FsbHkgYXR0ZW1wdCB0byByZWNvbm5lY3RcbiAgICogICAgICBjb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvbiAtIFRoZSB2ZXJzaW9uIG9mIE1RVFQgdG8gdXNlIHRvIGNvbm5lY3QgdG8gdGhlIE1RVFQgQnJva2VyLlxuICAgKiAgICAgIGNvbm5lY3RPcHRpb25zLnRpbWVvdXQgLSBJZiB0aGUgY29ubmVjdCBoYXMgbm90IHN1Y2NlZWRlZCB3aXRoaW4gdGhpcyBudW1iZXIgb2Ygc2Vjb25kcywgaXQgaXMgZGVlbWVkIHRvIGhhdmUgZmFpbGVkLlxuICAgKlxuICAgKiBAcmV0dXJucyBhIFByb21pc2Ugb2JqZWN0IC1cbiAgICogICAgICByZXNwb25zZSA9IHt9XG4gICAqICAgICAgZXJyb3IgPSB7XCJyZWFzb25cIjoge30gLy8gSW1wbGVtZW50YXRpb24gc3BlY2lmaWNcbiAgICogICAgICAgICAgfVxuICAgKi9cbiAgY29ubmVjdChjb25uZWN0T3B0aW9ucykge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFwiY29ubmVjdCBpbiBJb3RDbGllbnRcIik7XG4gIH1cblxuICBkaXNjb25uZWN0KCkge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFwiY29ubmVjdCBpbiBJb3RDbGllbnRcIik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHN1YnNjcmliZU9wdGlvbnMgKG9iamVjdCkgLVxuICAgKiAgICAgIHN1YnNjcmliZU9wdGlvbnMucW9zIC0gdGhlIG1haXhpbXVtIHFvcyBvZiBhbnkgcHVibGljYXRpb25zIHNlbnQgYXMgYSByZXN1bHQgb2YgbWFraW5nIHRoaXMgc3Vic2NyaXB0aW9uLlxuICAgKiAgICAgIGNvbm5lY3RPcHRpb25zLnRpbWVvdXQgLSB3aGljaCwgaWYgcHJlc2VudCwgZGV0ZXJtaW5lcyB0aGUgbnVtYmVyIG9mIHNlY29uZHMgYWZ0ZXIgd2hpY2ggdGhlIG9uRmFpbHVyZSBjYWxiYWNrIGlzIGNhbGxlZC5cbiAgICogICAgICAgICAgVGhlIHByZXNlbmNlIG9mIGEgdGltZW91dCBkb2VzIG5vdCBwcmV2ZW50IHRoZSBvblN1Y2Nlc3MgY2FsbGJhY2sgZnJvbSBiZWluZyBjYWxsZWQgd2hlbiB0aGUgc3Vic2NyaWJlIGNvbXBsZXRlcy5cbiAgICpcbiAgICogQHJldHVybnMgYSBQcm9taXNlIG9iamVjdCAtXG4gICAqICAgICAgcmVzcG9uc2UgPSB7XCJ0b3BpY1wiOiA8c3RyaW5nPixcbiAgICogICAgICAgICAgICAgICAgICBcInFvc1wiOiBxb3MsXG4gICAqICAgICAgfVxuICAgKiAgICAgIGVycm9yID0ge1widG9waWNcIjogPHN0cmluZz4sXG4gICAqICAgICAgICAgIFwiZXJyb3JcIjoge30gLy8gSW1wbGVtZW50YXRpb24gc3BlY2lmaWNcbiAgICogICAgICB9XG4gICAqL1xuICBzdWJzY3JpYmUodG9waWMsIHN1YnNjcmliZU9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgVW5JbXBsZW1lbnRlZE1ldGhvZEV4Y2VwdGlvbihcImNvbm5lY3QgaW4gSW90Q2xpZW50XCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBzdWJzY3JpYmVPcHRpb25zIChvYmplY3QpIC1cbiAgICogICAgICBjb25uZWN0T3B0aW9ucy50aW1lb3V0IC0gd2hpY2gsIGlmIHByZXNlbnQsIGRldGVybWluZXMgdGhlIG51bWJlciBvZiBzZWNvbmRzIGFmdGVyIHdoaWNoIHRoZSBvbkZhaWx1cmUgY2FsbGJhY2sgaXMgY2FsbGVkLlxuICAgKiAgICAgICAgICBUaGUgcHJlc2VuY2Ugb2YgYSB0aW1lb3V0IGRvZXMgbm90IHByZXZlbnQgdGhlIG9uU3VjY2VzcyBjYWxsYmFjayBmcm9tIGJlaW5nIGNhbGxlZCB3aGVuIHRoZSB1bnN1YnNjcmliZSBjb21wbGV0ZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSBvYmplY3QgLVxuICAgKiAgICAgIHJlc3BvbnNlID0ge1widG9waWNcIjogPHN0cmluZz4sXG4gICAqICAgICAgICAgICAgICAgICAgXCJxb3NcIjogcW9zLFxuICAgKiAgICAgIH1cbiAgICogICAgICBlcnJvciA9IHtcInRvcGljXCI6IDxzdHJpbmc+LFxuICAgKiAgICAgICAgICBcImVycm9yXCI6IHt9IC8vIEltcGxlbWVudGF0aW9uIHNwZWNpZmljXG4gICAqICAgICAgfVxuICAgKlxuICAgKi9cbiAgdW5zdWJzY3JpYmUodG9waWMsIHVuc3Vic2NyaWJlT3B0aW9ucykge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFwiY29ubmVjdCBpbiBJb3RDbGllbnRcIik7XG4gIH1cbn1cbi8qZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyovXG5cbnZhciBNcXR0Q29ubmVjdGlvblN0YXR1cyA9IE9iamVjdC5mcmVlemUoe1xuICBOZXZlckNvbm5lY3RlZDogXCJOZXZlckNvbm5lY3RlZFwiLFxuICBDb25uZWN0aW5nOiBcIkNvbm5lY3RpbmdcIixcbiAgQ29ubmVjdGVkOiBcIkNvbm5lY3RlZFwiLFxuICBEaXNjb25uZWN0ZWQ6IFwiRGlzY29ubmVjdGVkXCJcbn0pO1xuXG52YXIgTXF0dEV2ZW50cyA9IE9iamVjdC5mcmVlemUoe1xuICBNRVNTQUdFOiBcIk1lc3NhZ2VcIiwgLy8gdG9waWMsIHFvcywgcGF5bG9hZFN0cmluZ1xuICBESVNDT05ORUNURUQ6IFwiRGlzY29ubmVjdGVkXCIsIC8vIHJlYXNvbjogcGFob09iamVjdC8gXCJUaW1lT3V0SW5SZWNvbm5lY3RcIlxufSk7IC8vIHt9XG5cbmNsYXNzIFBhaG9NcXR0Q2xpZW50IGV4dGVuZHMgTVFUVENsaWVudCB7XG4gIGNvbnN0cnVjdG9yKGFyZ3MpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucHJlU2lnbmVkVXJsID0gYXJncy5wcmVTaWduZWRVcmw7XG4gICAgdGhpcy5jb25uZWN0aW9uSWQgPSBhcmdzLmNvbm5lY3Rpb25JZDtcbiAgICB0aGlzLnN0YXR1cyA9IE1xdHRDb25uZWN0aW9uU3RhdHVzLk5ldmVyQ29ubmVjdGVkO1xuICAgIHRoaXMucGFob0NsaWVudCA9IG5ldyBQYWhvLkNsaWVudCh0aGlzLnByZVNpZ25lZFVybCwgdGhpcy5jb25uZWN0aW9uSWQpO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLnBhaG9DbGllbnQub25NZXNzYWdlQXJyaXZlZCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIHNlbGYuX21lc3NhZ2VBcnJpdmVkQ2FsbGJhY2sobWVzc2FnZSk7XG4gICAgfTtcbiAgICB0aGlzLnBhaG9DbGllbnQub25Db25uZWN0aW9uTG9zdCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHNlbGYuX2Nvbm5lY3Rpb25Mb3N0Q2FsbEJhY2soZGF0YSk7XG4gICAgfTtcbiAgICB0aGlzLnBhaG9DbGllbnQub25NZXNzYWdlQXJyaXZlZCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIHNlbGYuX21lc3NhZ2VBcnJpdmVkQ2FsbGJhY2sobWVzc2FnZSk7XG4gICAgfTtcbiAgICB0aGlzLmNhbGxiYWNrID0gYXJncy5jYWxsYmFjaztcbiAgICB0aGlzLm5ldmVyQ29ubmVjdGVkID0gdHJ1ZTtcbiAgICB0aGlzLl9zdWJzY3JpYmVkVG9waWNzID0gW107XG4gIH1cblxuICBjb25uZWN0KGNvbm5lY3RPcHRpb25zKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGNvbm5lY3RPcHRpb25zLm9uU3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIHNlbGYubmV2ZXJDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgc2VsZi5fb25Db25uZWN0U3VjY2VzcyhyZXNwb25zZSk7XG4gICAgICAgIHJlc29sdmUoe30pO1xuICAgICAgfTtcbiAgICAgIGNvbm5lY3RPcHRpb25zLm9uRmFpbHVyZSA9IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHZhciBlcnJvckRldGFpbHMgPSB7XG4gICAgICAgICAgcmVhc29uOiBlcnJvclxuICAgICAgICB9O1xuICAgICAgICBzZWxmLl9vbkNvbm5lY3RGYWlsdXJlKGVycm9yRGV0YWlscyk7XG4gICAgICAgIHJlamVjdChlcnJvckRldGFpbHMpO1xuICAgICAgfTtcbiAgICAgIHNlbGYuc3RhdHVzID0gTXF0dENvbm5lY3Rpb25TdGF0dXMuQ29ubmVjdGluZztcbiAgICAgIHNlbGYucGFob0NsaWVudC5jb25uZWN0KGNvbm5lY3RPcHRpb25zKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9jb25uZWN0aW9uTG9zdENhbGxCYWNrKGVycm9yKSB7XG4gICAgY29uc29sZS53YXJuKFwiQ29ubmVjdGlvbiBsb3N0OiBcIiwgZXJyb3IpO1xuICAgIHZhciBkYXRhID0ge1xuICAgICAgcmVhc29uOiBlcnJvclxuICAgIH07XG4gICAgdGhpcy5fc3Vic2NyaWJlZFRvcGljcyA9IFtdO1xuICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gTXF0dENvbm5lY3Rpb25TdGF0dXMuRGlzY29ubmVjdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc3RhdHVzID0gTXF0dENvbm5lY3Rpb25TdGF0dXMuRGlzY29ubmVjdGVkO1xuICAgIHRoaXMuY2FsbGJhY2soTXF0dEV2ZW50cy5ESVNDT05ORUNURUQsIGRhdGEpO1xuICB9XG5cbiAgX21lc3NhZ2VBcnJpdmVkQ2FsbGJhY2sobWVzc2FnZSkge1xuICAgIHZhciBpbmNvbWluZ01lc3NhZ2UgPSB7XG4gICAgICB0b3BpYzogbWVzc2FnZS50b3BpYyxcbiAgICAgIHFvczogbWVzc2FnZS5xb3MsXG4gICAgICBwYXlsb2FkU3RyaW5nOiBtZXNzYWdlLnBheWxvYWRTdHJpbmdcbiAgICB9O1xuICAgIHRoaXMuY2FsbGJhY2soTXF0dEV2ZW50cy5NRVNTQUdFLCBpbmNvbWluZ01lc3NhZ2UpO1xuICB9XG5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG4gIF9vbkNvbm5lY3RTdWNjZXNzKHJlc3BvbnNlKSB7XG4gICAgLyplc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzKi9cbiAgICB0aGlzLnN0YXR1cyA9IE1xdHRDb25uZWN0aW9uU3RhdHVzLkNvbm5lY3RlZDtcbiAgfVxuXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMqL1xuICBfb25Db25uZWN0RmFpbHVyZShlcnJvcikge1xuICAgIC8qZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyovXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmIChzZWxmLm5ldmVyQ29ubmVjdGVkKSB7XG4gICAgICBzZWxmLnN0YXR1cyA9IE1xdHRDb25uZWN0aW9uU3RhdHVzLk5ldmVyQ29ubmVjdGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnN0YXR1cyA9IE1xdHRDb25uZWN0aW9uU3RhdHVzLkRpc2Nvbm5lY3RlZDtcbiAgICB9XG4gIH1cblxuICBkaXNjb25uZWN0KCkge1xuICAgIHRoaXMuX3N1YnNjcmliZWRUb3BpY3MgPSBbXTtcbiAgICB0aGlzLnN0YXR1cyA9IE1xdHRDb25uZWN0aW9uU3RhdHVzLkRpc2Nvbm5lY3RlZDtcbiAgICB0aGlzLnBhaG9DbGllbnQuZGlzY29ubmVjdCgpO1xuICB9XG5cbiAgc3Vic2NyaWJlKHRvcGljLCBzdWJzY3JpYmVPcHRpb25zKSB7XG4gICAgLy8gc2hvdWxkIHdlIGNoZWNrIGlmIHRoaXMgdG9waWMgaXMgYWxyZWFkeSBzdWJzY3JpYmVkP1xuICAgIC8vIE5PLCBsZWF2ZSB0aGlzIGJlaGF2aW91ciB0byBQQUhPIC0gd2hhdGV2ZXIgUEFITyBkb2VzXG4gICAgLy8gaW4gY2FzZSBvZiBkdXBsaWNhdGUgc3Vic2NyaWJlIC0gd2Ugd2lsbCBmb2xsb3cgdGhlIHNhbWUuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHN1YnNjcmliZU9wdGlvbnMub25TdWNjZXNzID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgc2VsZi5fc3Vic2NyaWJlU3VjY2Vzcyh0b3BpYywgcmVzcG9uc2UpO1xuICAgICAgICB2YXIgcmVzcG9uc2VPYmplY3QgPSB7XG4gICAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICAgIHFvczogcmVzcG9uc2UuZ3JhbnRlZFFvc1xuICAgICAgICB9O1xuICAgICAgICByZXNvbHZlKHJlc3BvbnNlT2JqZWN0KTtcbiAgICAgIH07XG4gICAgICBzdWJzY3JpYmVPcHRpb25zLm9uRmFpbHVyZSA9IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHZhciBlcnJvck9iamVjdCA9IHtcbiAgICAgICAgICB0b3BpYzogdG9waWMsXG4gICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH07XG4gICAgICAgIHJlamVjdChlcnJvck9iamVjdCk7XG4gICAgICB9O1xuICAgICAgc2VsZi5wYWhvQ2xpZW50LnN1YnNjcmliZSh0b3BpYywgc3Vic2NyaWJlT3B0aW9ucyk7XG4gICAgfSk7XG4gIH1cblxuICBfYWRkVG9Ub3BpY3ModG9waWMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHNlbGYuX3N1YnNjcmliZWRUb3BpY3MuaW5kZXhPZih0b3BpYykgPj0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZWxmLl9zdWJzY3JpYmVkVG9waWNzLnB1c2godG9waWMpO1xuICB9XG5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG4gIF9zdWJzY3JpYmVTdWNjZXNzKHRvcGljLCByZXNwb25zZSkge1xuICAgIC8qZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyovXG4gICAgdGhpcy5fYWRkVG9Ub3BpY3ModG9waWMpO1xuICB9XG5cbiAgZ2V0U3Vic2NyaWJlZFRvcGljcygpIHtcbiAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlZFRvcGljcy5zbGljZSgwKTtcbiAgfVxuXG4gIHVuc3Vic2NyaWJlKHRvcGljLCB1bnN1YnNjcmliZU9wdGlvbnMpIHtcbiAgICAvLyBzaG91bGQgd2UgY2hlY2sgaWYgdGhpcyB0b3BpYyBpcyBldmVuIHN1YnNjcmliZWQ/XG4gICAgLy8gTk8sIGxlYXZlIHRoaXMgYmVoYXZpb3VyIHRvIFBBSE8gLSB3aGF0ZXZlciBQQUhPIGRvZXNcbiAgICAvLyBpbiBjYXNlIG9mIHVuc3Vic2NyaWJlIG9mIHRvcGljcyBub3QgZXZlbnQgc3Vic2NyaWJlZFxuICAgIC8vIC0gd2Ugd2lsbCBmb2xsb3cgdGhlIHNhbWUuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHVuc3Vic2NyaWJlT3B0aW9ucy5vblN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICB2YXIgcmVzcG9uc2VPYmplY3QgPSB7XG4gICAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZVxuICAgICAgICB9O1xuICAgICAgICBzZWxmLl91bnN1YnNjcmliZVN1Y2Nlc3ModG9waWMsIHJlc3BvbnNlT2JqZWN0KTtcbiAgICAgICAgcmVzb2x2ZShyZXNwb25zZU9iamVjdCk7XG4gICAgICB9O1xuICAgICAgdW5zdWJzY3JpYmVPcHRpb25zLm9uRmFpbHVyZSA9IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHZhciBlcnJvck9iamVjdCA9IHtcbiAgICAgICAgICB0b3BpYzogdG9waWMsXG4gICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH07XG4gICAgICAgIHJlamVjdChlcnJvck9iamVjdCk7XG4gICAgICB9O1xuICAgICAgc2VsZi5wYWhvQ2xpZW50LnVuc3Vic2NyaWJlKHRvcGljLCB1bnN1YnNjcmliZU9wdGlvbnMpO1xuICAgIH0pO1xuICB9XG5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG4gIF91bnN1YnNjcmliZVN1Y2Nlc3ModG9waWMsIHJlc3BvbnNlKSB7XG4gICAgLyplc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzKi9cbiAgICB0aGlzLl9zdWJzY3JpYmVkVG9waWNzID0gdGhpcy5fc3Vic2NyaWJlZFRvcGljcy5maWx0ZXIodCA9PiB0ICE9PSB0b3BpYyk7XG4gIH1cblxuICBnZXRTdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdHVzO1xuICB9XG59XG5cbmV4cG9ydCB7IE1xdHRFdmVudHMsIFBhaG9NcXR0Q2xpZW50IH07XG4iLCJpbXBvcnQgeyBFdmVudEJ1cyB9IGZyb20gXCIuL2V2ZW50YnVzXCI7XG5cbmZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5uYXZpZ2F0b3IgJiYgd2luZG93LmFkZEV2ZW50TGlzdGVuZXI7XG59XG5cbmNsYXNzIER1bW15TmV0d29ya0luZm8ge1xuXG4gIG9uT25saW5lKCkge31cbiAgXG4gIG9uT2ZmbGluZSgpIHt9XG4gIFxuICBpc09ubGluZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBcbiAgd2hlbk9ubGluZSgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbn1cblxuY2xhc3MgQnJvd3Nlck5ldHdvcmtJbmZvIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmV2ZW50QnVzID0gbmV3IEV2ZW50QnVzKCk7XG4gICAgdGhpcy5vbmxpbmVQcm9taXNlID0gbnVsbDtcbiAgICBcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25saW5lJywgKCkgPT4ge1xuICAgICAgdGhpcy5ldmVudEJ1cy50cmlnZ2VyKCdvbmxpbmUnKTtcbiAgICB9KTtcbiAgICBcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsICgpID0+IHtcbiAgICAgIHRoaXMuZXZlbnRCdXMudHJpZ2dlcignb2ZmbGluZScpO1xuICAgIH0pO1xuICB9XG5cbiAgb25PbmxpbmUoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLmV2ZW50QnVzLnN1YnNjcmliZSgnb25saW5lJywgaGFuZGxlcik7XG4gIH1cbiAgXG4gIG9uT2ZmbGluZShoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRCdXMuc3Vic2NyaWJlKCdvZmZsaW5lJywgaGFuZGxlcik7XG4gIH1cbiAgXG4gIGlzT25saW5lKCkge1xuICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLm9uTGluZTtcbiAgfVxuICBcbiAgd2hlbk9ubGluZSgpIHtcbiAgICAgIGlmICh0aGlzLmlzT25saW5lKCkpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLm9ubGluZVByb21pc2UpIHtcbiAgICAgICAgdGhpcy5vbmxpbmVQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgY29uc3QgdW5zdWJzY3JpYmUgPSB0aGlzLm9uT25saW5lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25saW5lUHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm9ubGluZVByb21pc2U7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IE5ldHdvcmtJbmZvID0gaXNCcm93c2VyKCkgPyBuZXcgQnJvd3Nlck5ldHdvcmtJbmZvKCkgOiBuZXcgRHVtbXlOZXR3b3JrSW5mbygpO1xuIiwiaW1wb3J0IHsgUGFob01xdHRDbGllbnQsIE1xdHRFdmVudHMgfSBmcm9tIFwiLi4vLi4vY2xpZW50L3BhaG9NcXR0Q2xpZW50XCI7XG5pbXBvcnQgeyBFdmVudEJ1cyB9IGZyb20gXCIuLi9ldmVudGJ1c1wiO1xuaW1wb3J0IHsgR2xvYmFsQ29uZmlnIH0gZnJvbSBcIi4uLy4uL2dsb2JhbENvbmZpZ1wiO1xuaW1wb3J0IHsgTG9nTWFuYWdlciB9IGZyb20gXCIuLi8uLi9sb2dcIjtcbmltcG9ydCB7IE5ldHdvcmtJbmZvIH0gZnJvbSBcIi4uL25ldHdvcmtJbmZvXCI7XG5pbXBvcnQgeyBNUVRUX0NPTlNUQU5UUyB9IGZyb20gXCIuLi8uLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbiB9IGZyb20gXCIuLi9leGNlcHRpb25zXCI7XG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmltcG9ydCB7XG4gIENvbm5lY3Rpb25IZWxwZXJFdmVudHMsXG4gIENvbm5lY3Rpb25IZWxwZXJTdGF0dXNcbn0gZnJvbSBcIi4vYmFzZUNvbm5lY3Rpb25IZWxwZXJcIjtcbmltcG9ydCBCYXNlQ29ubmVjdGlvbkhlbHBlciBmcm9tIFwiLi9iYXNlQ29ubmVjdGlvbkhlbHBlclwiO1xuXG5jbGFzcyBJb3RDb25uZWN0aW9uSGVscGVyIGV4dGVuZHMgQmFzZUNvbm5lY3Rpb25IZWxwZXIge1xuXG4gIGNvbnN0cnVjdG9yKGNvbnRhY3RJZCwgY29ubmVjdGlvbkRldGFpbHNQcm92aWRlciwgcmVjb25uZWN0Q29uZmlnKSB7XG4gICAgc3VwZXIoY29ubmVjdGlvbkRldGFpbHNQcm92aWRlcik7XG4gICAgdGhpcy5sb2dnZXIgPSBMb2dNYW5hZ2VyLmdldExvZ2dlcih7XG4gICAgICBwcmVmaXg6IFwiQ29udGFjdElkLVwiICsgY29udGFjdElkICsgXCI6IFwiXG4gICAgfSk7XG4gICAgdGhpcy5zdGF0dXMgPSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLk5ldmVyU3RhcnRlZDtcbiAgICB0aGlzLmV2ZW50QnVzID0gbmV3IEV2ZW50QnVzKCk7XG4gICAgdGhpcy5fdW5zdWJzY3JpYmVGdW5jdGlvbnMgPSBbXTtcbiAgICB0aGlzLnJlY29ubmVjdENvbmZpZyA9IHJlY29ubmVjdENvbmZpZztcbiAgICB0aGlzLl9jb25uZWN0Q2FsbGVkQXRsZWFzdE9uY2UgPSBmYWxzZTtcbiAgICB0aGlzLl9zZXROZXR3b3JrRXZlbnRIYW5kbGVycygpO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgc3VwZXIuc3RhcnQoKTtcbiAgICBpZiAodGhpcy5zdGF0dXMgIT09IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuTmV2ZXJTdGFydGVkKSB7XG4gICAgICB0aHJvdyBuZXcgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKFwiQ29ubmVjdGlvbiBoZWxwZXIgc3RhcnRlZCB0d2ljZSEhXCIpO1xuICAgIH1cbiAgICB0aGlzLnN0YXR1cyA9IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuU3RhcnRpbmc7XG4gICAgcmV0dXJuIHRoaXMuX2luaXRpYXRlQ29ubmVjdFdpdGhSZXRyeSgpO1xuICB9XG5cbiAgZW5kKCkge1xuICAgIHN1cGVyLmVuZCgpO1xuICAgIHRoaXMuX2hhbmRsZUJyb2tlbkNvbm5lY3Rpb24oeyByZWFzb246IFwidXNlciBhY3Rpb25cIiB9KTtcbiAgICB0aGlzLmlvdENvbm5lY3Rpb24gJiYgdGhpcy5pb3RDb25uZWN0aW9uLmRpc2Nvbm5lY3QoKTtcbiAgfVxuXG4gIGdldFN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0dXM7XG4gIH1cblxuICBfaW5pdElvdENvbm5lY3Rpb24oY29ubmVjdGlvbkRldGFpbHMpIHtcbiAgICB0aGlzLmlvdENvbm5lY3Rpb24gPSBuZXcgUGFob01xdHRDbGllbnQoe1xuICAgICAgcHJlU2lnbmVkVXJsOiBjb25uZWN0aW9uRGV0YWlscy5wcmVTaWduZWRDb25uZWN0aW9uVXJsLFxuICAgICAgY29ubmVjdGlvbklkOiBjb25uZWN0aW9uRGV0YWlscy5jb25uZWN0aW9uSWQsXG4gICAgICBjYWxsYmFjazogdGhpcy5faGFuZGxlSW90RXZlbnQuYmluZCh0aGlzKVxuICAgIH0pO1xuICB9XG5cbiAgX2Nvbm5lY3QoKSB7XG4gICAgdGhpcy5fY29ubmVjdENhbGxlZEF0bGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyXG4gICAgICAuZmV0Y2hDb25uZWN0aW9uRGV0YWlscygpXG4gICAgICAudGhlbih0aGlzLl9pbml0SW90Q29ubmVjdGlvbi5iaW5kKHRoaXMpKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBjb25zdCBjb25uZWN0T3B0aW9ucyA9IHtcbiAgICAgICAgICB1c2VTU0w6IHRydWUsXG4gICAgICAgICAga2VlcEFsaXZlSW50ZXJ2YWw6IE1RVFRfQ09OU1RBTlRTLktFRVBfQUxJVkUsXG4gICAgICAgICAgcmVjb25uZWN0OiBmYWxzZSxcbiAgICAgICAgICBtcXR0VmVyc2lvbjogNCxcbiAgICAgICAgICB0aW1lb3V0OiBNUVRUX0NPTlNUQU5UUy5DT05ORUNUX1RJTUVPVVRcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICB0aGlzLmlvdENvbm5lY3Rpb25cbiAgICAgICAgICAgIC5jb25uZWN0KGNvbm5lY3RPcHRpb25zKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5fY29ubmVjdEZhaWxlZChyZWplY3QsIGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgX2Nvbm5lY3RGYWlsZWQocmVqZWN0LCBjb25uZWN0RXJyb3IpIHtcbiAgICB2YXIgZXJyb3IgPSB7XG4gICAgICBjb25uZWN0U3VjY2VzczogZmFsc2UsXG4gICAgICByZWFzb246IFwiQ29ubmVjdGlvblRvQnJva2VyRmFpbGVkXCIsXG4gICAgICBkZXRhaWxzOiBjb25uZWN0RXJyb3JcbiAgICB9O1xuICAgIHJlamVjdChlcnJvcik7XG4gIH1cblxuICBfc3Vic2NyaWJlKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNvbnN0IHN1YnNjcmliZU9wdGlvbnMgPSB7XG4gICAgICBxb3M6IDFcbiAgICB9O1xuICAgIHRoaXMuaW90Q29ubmVjdGlvblxuICAgICAgLnN1YnNjcmliZSh0aGlzLmNvbm5lY3Rpb25EZXRhaWxzUHJvdmlkZXIuY29ubmVjdGlvbkRldGFpbHMuY29ubmVjdGlvbklkLCBzdWJzY3JpYmVPcHRpb25zKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICB0aGlzLl9wb3N0U3Vic2NyaWJlKHJlc29sdmUsIHJlc3BvbnNlKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICB0aGlzLl9zdWJzY3JpYmVGYWlsZWQocmVqZWN0LCBlcnJvcik7XG4gICAgICB9KTtcbiAgfVxuXG4gIF9wb3N0U3Vic2NyaWJlKHJlc29sdmUsIHN1YnNjcmliZVJlc3BvbnNlKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICBkZXRhaWxzOiBzdWJzY3JpYmVSZXNwb25zZSxcbiAgICAgIGNvbm5lY3RTdWNjZXNzOiB0cnVlXG4gICAgfTtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIF9zdWJzY3JpYmVGYWlsZWQocmVqZWN0LCBzdWJzY3JpYmVFcnJvcikge1xuICAgIGNvbnN0IGVycm9yID0ge1xuICAgICAgY29ubmVjdFN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZGV0YWlsczogc3Vic2NyaWJlRXJyb3IsXG4gICAgICByZWFzb246IFwiU3Vic2NyaWJ0aW9uVG9Ub3BpY0ZhaWxlZFwiXG4gICAgfTtcbiAgICB0aGlzLmlvdENvbm5lY3Rpb24uZGlzY29ubmVjdCgpO1xuICAgIHJlamVjdChlcnJvcik7XG4gIH1cblxuICBfaGFuZGxlSW90RXZlbnQoZXZlbnRUeXBlLCBldmVudERhdGEpIHtcbiAgICBzd2l0Y2ggKGV2ZW50VHlwZSkge1xuICAgICAgY2FzZSBNcXR0RXZlbnRzLk1FU1NBR0U6XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFwiUmVjZWl2ZWQgaW5jb21pbmcgZGF0YVwiLCBldmVudERhdGEucGF5bG9hZFN0cmluZyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgaW5jb21pbmdEYXRhID0gSlNPTi5wYXJzZShldmVudERhdGEucGF5bG9hZFN0cmluZyk7XG4gICAgICAgICAgdGhpcy5ldmVudEJ1cy50cmlnZ2VyKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuSW5jb21pbmdNZXNzYWdlLCBpbmNvbWluZ0RhdGEpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYFdyb25nIG1lc3NhZ2UgZm9ybWF0OiBgLCBldmVudERhdGEucGF5bG9hZFN0cmluZyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIE1xdHRFdmVudHMuRElTQ09OTkVDVEVEOlxuICAgICAgICBpZiAoR2xvYmFsQ29uZmlnLnJlY29ubmVjdCAmJiBldmVudERhdGEucmVhc29uLmVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgICAgIHRoaXMuX2hhbmRsZUxvc3RDb25uZWN0aW9uKGV2ZW50RGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5faGFuZGxlQnJva2VuQ29ubmVjdGlvbihldmVudERhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIF9pbml0aWF0ZUNvbm5lY3RXaXRoUmV0cnkoKSB7XG4gICAgaWYgKCF0aGlzLl9pbml0aWF0ZUNvbm5lY3RQcm9taXNlKSB7XG4gICAgICB0aGlzLl9pbml0aWF0ZUNvbm5lY3RQcm9taXNlID0gVXRpbHNcbiAgICAgICAgLmFzeW5jV2hpbGVJbnRlcnZhbChcbiAgICAgICAgICAoY291bnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oYENvbm5lY3QgLSAke2NvdW50fS4gdHJ5YCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29ubmVjdCgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgKGNvdW50KSA9PiBjb3VudCA8IHRoaXMucmVjb25uZWN0Q29uZmlnLm1heFJldHJpZXMgJiYgdGhpcy5fY2FuQ29ubmVjdCgpLFxuICAgICAgICAgIHRoaXMucmVjb25uZWN0Q29uZmlnLmludGVydmFsXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oYENvbm5lY3QgLSBTdWNjZXNzYCk7XG4gICAgICAgICAgdGhpcy5faGFuZGxlR2FpbmVkQ29ubmVjdGlvbigpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKGBDb25uZWN0IC0gRmFpbGVkYCk7XG4gICAgICAgICAgaWYgKE5ldHdvcmtJbmZvLmlzT25saW5lKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUJyb2tlbkNvbm5lY3Rpb24oZSk7XG4gICAgICAgICAgICB0aGlzLmlvdENvbm5lY3Rpb24gJiYgdGhpcy5pb3RDb25uZWN0aW9uLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgIT09IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuQ29ubmVjdGlvbkxvc3QpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUxvc3RDb25uZWN0aW9uKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICB0aGlzLl9pbml0aWF0ZUNvbm5lY3RQcm9taXNlID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9pbml0aWF0ZUNvbm5lY3RQcm9taXNlO1xuICB9XG5cbiAgX2NhbkNvbm5lY3QoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIE5ldHdvcmtJbmZvLmlzT25saW5lKCkgJiYgKFxuICAgICAgICB0aGlzLnN0YXR1cyA9PT0gQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5Db25uZWN0aW9uTG9zdCB8fFxuICAgICAgICB0aGlzLnN0YXR1cyA9PT0gQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5TdGFydGluZ1xuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBfaGFuZGxlQnJva2VuQ29ubmVjdGlvbihldmVudERhdGEpIHtcbiAgICBpZiAodGhpcy5zdGF0dXMgPT09IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuRW5kZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zdGF0dXMgPSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLkVuZGVkO1xuICAgIC8vIERvIHdlIGV4cGxpY2l0bHkgaGF2ZSB0byB1bnN1YnNjcmliZSBiZWZvcmUgZGlzY29ubmVjdGluZyBNUVRUP1xuICAgIHRoaXMuX3Vuc3Vic2NyaWJlRnVuY3Rpb25zLmZvckVhY2goZiA9PiBmKCkpO1xuICAgIHRoaXMuZXZlbnRCdXMudHJpZ2dlcihDb25uZWN0aW9uSGVscGVyRXZlbnRzLkVuZGVkLCBldmVudERhdGEpO1xuICB9XG5cbiAgX2hhbmRsZUxvc3RDb25uZWN0aW9uKGV2ZW50RGF0YSkge1xuICAgIHRoaXMuc3RhdHVzID0gQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5Db25uZWN0aW9uTG9zdDtcbiAgICB0aGlzLmV2ZW50QnVzLnRyaWdnZXIoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5Db25uZWN0aW9uTG9zdCwgZXZlbnREYXRhKTtcbiAgICBpZiAoTmV0d29ya0luZm8uaXNPbmxpbmUoKSkge1xuICAgICAgdGhpcy5faW5pdGlhdGVDb25uZWN0V2l0aFJldHJ5KCkuY2F0Y2goKCkgPT4ge30pO1xuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVHYWluZWRDb25uZWN0aW9uKCkge1xuICAgIHRoaXMuc3RhdHVzID0gQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5Db25uZWN0ZWQ7XG4gICAgdGhpcy5ldmVudEJ1cy50cmlnZ2VyKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuQ29ubmVjdGlvbkdhaW5lZCwge30pO1xuICB9XG5cbiAgX3NldE5ldHdvcmtFdmVudEhhbmRsZXJzKCkge1xuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gTmV0d29ya0luZm8ub25PbmxpbmUoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX2Nvbm5lY3RDYWxsZWRBdGxlYXN0T25jZSAmJiB0aGlzLl9jYW5Db25uZWN0KCkpIHtcbiAgICAgICAgdGhpcy5faW5pdGlhdGVDb25uZWN0V2l0aFJldHJ5KCkuY2F0Y2goKCkgPT4ge30pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuX3Vuc3Vic2NyaWJlRnVuY3Rpb25zLnB1c2godW5zdWJzY3JpYmUpO1xuICB9XG5cbiAgb25FbmRlZChoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRCdXMuc3Vic2NyaWJlKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuRW5kZWQsIGhhbmRsZXIpO1xuICB9XG5cbiAgb25Db25uZWN0aW9uTG9zdChoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRCdXMuc3Vic2NyaWJlKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuQ29ubmVjdGlvbkxvc3QsIGhhbmRsZXIpO1xuICB9XG5cbiAgb25Db25uZWN0aW9uR2FpbihoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRCdXMuc3Vic2NyaWJlKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuQ29ubmVjdGlvbkdhaW5lZCwgaGFuZGxlcik7XG4gIH1cblxuICBvbk1lc3NhZ2UoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLmV2ZW50QnVzLnN1YnNjcmliZShDb25uZWN0aW9uSGVscGVyRXZlbnRzLkluY29taW5nTWVzc2FnZSwgaGFuZGxlcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW90Q29ubmVjdGlvbkhlbHBlcjtcbiIsImltcG9ydCB7IEV2ZW50QnVzIH0gZnJvbSBcIi4uL2V2ZW50YnVzXCI7XG5pbXBvcnQgeyBMb2dNYW5hZ2VyIH0gZnJvbSBcIi4uLy4uL2xvZ1wiO1xuaW1wb3J0IHsgVFJBTlNQT1JUX0xJRkVUSU1FX0lOX1NFQ09ORFMgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBcbiAgQ29ubmVjdGlvbkhlbHBlckV2ZW50cyxcbiAgQ29ubmVjdGlvbkhlbHBlclN0YXR1c1xufSBmcm9tIFwiLi9iYXNlQ29ubmVjdGlvbkhlbHBlclwiO1xuaW1wb3J0IEJhc2VDb25uZWN0aW9uSGVscGVyIGZyb20gXCIuL2Jhc2VDb25uZWN0aW9uSGVscGVyXCI7XG5cblxuY2xhc3MgTHBjQ29ubmVjdGlvbkhlbHBlciBleHRlbmRzIEJhc2VDb25uZWN0aW9uSGVscGVyIHtcblxuICBjb25zdHJ1Y3Rvcihpbml0aWFsQ29udGFjdElkLCBjb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyLCB3ZWJzb2NrZXRNYW5hZ2VyKSB7XG4gICAgc3VwZXIoY29ubmVjdGlvbkRldGFpbHNQcm92aWRlcik7XG4gICAgdGhpcy5jbGVhblVwQmFzZUluc3RhbmNlID0gIXdlYnNvY2tldE1hbmFnZXI7XG4gICAgaWYgKCFMcGNDb25uZWN0aW9uSGVscGVyLmJhc2VJbnN0YW5jZSkge1xuICAgICAgTHBjQ29ubmVjdGlvbkhlbHBlci5iYXNlSW5zdGFuY2UgPSBuZXcgTFBDQ29ubmVjdGlvbkhlbHBlckJhc2UoY29ubmVjdGlvbkRldGFpbHNQcm92aWRlciwgd2Vic29ja2V0TWFuYWdlcik7XG4gICAgfVxuICAgIHRoaXMuaW5pdGlhbENvbnRhY3RJZCA9IGluaXRpYWxDb250YWN0SWQ7XG4gICAgdGhpcy5zdGF0dXMgPSBudWxsO1xuICAgIHRoaXMuZXZlbnRCdXMgPSBuZXcgRXZlbnRCdXMoKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXG4gICAgICBMcGNDb25uZWN0aW9uSGVscGVyLmJhc2VJbnN0YW5jZS5vbkVuZGVkKHRoaXMuaGFuZGxlRW5kZWQuYmluZCh0aGlzKSksXG4gICAgICBMcGNDb25uZWN0aW9uSGVscGVyLmJhc2VJbnN0YW5jZS5vbkNvbm5lY3Rpb25HYWluKHRoaXMuaGFuZGxlQ29ubmVjdGlvbkdhaW4uYmluZCh0aGlzKSksXG4gICAgICBMcGNDb25uZWN0aW9uSGVscGVyLmJhc2VJbnN0YW5jZS5vbkNvbm5lY3Rpb25Mb3N0KHRoaXMuaGFuZGxlQ29ubmVjdGlvbkxvc3QuYmluZCh0aGlzKSksXG4gICAgICBMcGNDb25uZWN0aW9uSGVscGVyLmJhc2VJbnN0YW5jZS5vbk1lc3NhZ2UodGhpcy5oYW5kbGVNZXNzYWdlLmJpbmQodGhpcykpXG4gICAgXTtcbiAgfVxuXG4gIHN0YXJ0KCkge1xuICAgIHN1cGVyLnN0YXJ0KCk7XG4gICAgcmV0dXJuIExwY0Nvbm5lY3Rpb25IZWxwZXIuYmFzZUluc3RhbmNlLnN0YXJ0KCk7XG4gIH1cblxuICBlbmQoKSB7XG4gICAgc3VwZXIuZW5kKCk7XG4gICAgdGhpcy5ldmVudEJ1cy51bnN1YnNjcmliZUFsbCgpO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGYgPT4gZigpKTtcbiAgICB0aGlzLnN0YXR1cyA9IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuRW5kZWQ7XG4gICAgaWYgKExwY0Nvbm5lY3Rpb25IZWxwZXIuYmFzZUluc3RhbmNlICYmIHRoaXMuY2xlYW5VcEJhc2VJbnN0YW5jZSkge1xuICAgICAgTHBjQ29ubmVjdGlvbkhlbHBlci5iYXNlSW5zdGFuY2UuZW5kKCk7XG4gICAgICBMcGNDb25uZWN0aW9uSGVscGVyLmJhc2VJbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgZ2V0U3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXR1cyB8fCBMcGNDb25uZWN0aW9uSGVscGVyLmJhc2VJbnN0YW5jZS5nZXRTdGF0dXMoKTtcbiAgfVxuXG4gIG9uRW5kZWQoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLmV2ZW50QnVzLnN1YnNjcmliZShDb25uZWN0aW9uSGVscGVyRXZlbnRzLkVuZGVkLCBoYW5kbGVyKTtcbiAgfVxuXG4gIGhhbmRsZUVuZGVkKCkge1xuICAgIHRoaXMuZXZlbnRCdXMudHJpZ2dlcihDb25uZWN0aW9uSGVscGVyRXZlbnRzLkVuZGVkLCB7fSk7XG4gIH1cblxuICBvbkNvbm5lY3Rpb25HYWluKGhhbmRsZXIpIHtcbiAgICByZXR1cm4gdGhpcy5ldmVudEJ1cy5zdWJzY3JpYmUoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5Db25uZWN0aW9uR2FpbmVkLCBoYW5kbGVyKTtcbiAgfVxuXG4gIGhhbmRsZUNvbm5lY3Rpb25HYWluKCkge1xuICAgIHRoaXMuZXZlbnRCdXMudHJpZ2dlcihDb25uZWN0aW9uSGVscGVyRXZlbnRzLkNvbm5lY3Rpb25HYWluZWQsIHt9KTtcbiAgfVxuXG4gIG9uQ29ubmVjdGlvbkxvc3QoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLmV2ZW50QnVzLnN1YnNjcmliZShDb25uZWN0aW9uSGVscGVyRXZlbnRzLkNvbm5lY3Rpb25Mb3N0LCBoYW5kbGVyKTtcbiAgfVxuXG4gIGhhbmRsZUNvbm5lY3Rpb25Mb3N0KCkge1xuICAgIHRoaXMuZXZlbnRCdXMudHJpZ2dlcihDb25uZWN0aW9uSGVscGVyRXZlbnRzLkNvbm5lY3Rpb25Mb3N0LCB7fSk7XG4gIH1cblxuICBvbk1lc3NhZ2UoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLmV2ZW50QnVzLnN1YnNjcmliZShDb25uZWN0aW9uSGVscGVyRXZlbnRzLkluY29taW5nTWVzc2FnZSwgaGFuZGxlcik7XG4gIH1cblxuICBoYW5kbGVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZS5Jbml0aWFsQ29udGFjdElkID09PSB0aGlzLmluaXRpYWxDb250YWN0SWQpIHtcbiAgICAgIHRoaXMuZXZlbnRCdXMudHJpZ2dlcihDb25uZWN0aW9uSGVscGVyRXZlbnRzLkluY29taW5nTWVzc2FnZSwgbWVzc2FnZSk7XG4gICAgfVxuICB9XG59XG5McGNDb25uZWN0aW9uSGVscGVyLmJhc2VJbnN0YW5jZSA9IG51bGw7XG5cblxuY2xhc3MgTFBDQ29ubmVjdGlvbkhlbHBlckJhc2Uge1xuICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyLCB3ZWJzb2NrZXRNYW5hZ2VyKSB7XG4gICAgdGhpcy5zdGF0dXMgPSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLk5ldmVyU3RhcnRlZDtcbiAgICB0aGlzLmV2ZW50QnVzID0gbmV3IEV2ZW50QnVzKCk7XG4gICAgdGhpcy5sb2dnZXIgPSBMb2dNYW5hZ2VyLmdldExvZ2dlcih7XG4gICAgICBwcmVmaXg6IFwiTFBDIFdlYlNvY2tldHM6IFwiXG4gICAgfSk7XG4gICAgdGhpcy5pbml0V2Vic29ja2V0TWFuYWdlcih3ZWJzb2NrZXRNYW5hZ2VyLCBjb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyKTtcbiAgfVxuXG4gIGluaXRXZWJzb2NrZXRNYW5hZ2VyKHdlYnNvY2tldE1hbmFnZXIsIGNvbm5lY3Rpb25EZXRhaWxzUHJvdmlkZXIpIHtcbiAgICB0aGlzLndlYnNvY2tldE1hbmFnZXIgPSB3ZWJzb2NrZXRNYW5hZ2VyIHx8IGNvbm5lY3QuV2ViU29ja2V0TWFuYWdlci5jcmVhdGUoKTtcbiAgICB0aGlzLndlYnNvY2tldE1hbmFnZXIuc3Vic2NyaWJlVG9waWNzKFtcImF3cy9jaGF0XCJdKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXG4gICAgICB0aGlzLndlYnNvY2tldE1hbmFnZXIub25NZXNzYWdlKFwiYXdzL2NoYXRcIiwgdGhpcy5oYW5kbGVNZXNzYWdlLmJpbmQodGhpcykpLFxuICAgICAgdGhpcy53ZWJzb2NrZXRNYW5hZ2VyLm9uQ29ubmVjdGlvbkdhaW4odGhpcy5oYW5kbGVDb25uZWN0aW9uR2Fpbi5iaW5kKHRoaXMpKSxcbiAgICAgIHRoaXMud2Vic29ja2V0TWFuYWdlci5vbkNvbm5lY3Rpb25Mb3N0KHRoaXMuaGFuZGxlQ29ubmVjdGlvbkxvc3QuYmluZCh0aGlzKSksXG4gICAgICB0aGlzLndlYnNvY2tldE1hbmFnZXIub25Jbml0RmFpbHVyZSh0aGlzLmhhbmRsZUVuZGVkLmJpbmQodGhpcykpXG4gICAgXTtcbiAgICBpZiAoIXdlYnNvY2tldE1hbmFnZXIpIHtcbiAgICAgIHRoaXMud2Vic29ja2V0TWFuYWdlci5pbml0KFxuICAgICAgICAoKSA9PiBjb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyLmZldGNoQ29ubmVjdGlvbkRldGFpbHMoKVxuICAgICAgICAgIC50aGVuKGNvbm5lY3Rpb25EZXRhaWxzID0+ICh7XG4gICAgICAgICAgICB3ZWJTb2NrZXRUcmFuc3BvcnQ6IHtcbiAgICAgICAgICAgICAgdXJsOiBjb25uZWN0aW9uRGV0YWlscy5wcmVTaWduZWRDb25uZWN0aW9uVXJsLFxuICAgICAgICAgICAgICB0cmFuc3BvcnRMaWZlVGltZUluU2Vjb25kczogVFJBTlNQT1JUX0xJRkVUSU1FX0lOX1NFQ09ORFNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgZW5kKCkge1xuICAgIHRoaXMud2Vic29ja2V0TWFuYWdlci5jbG9zZVdlYlNvY2tldCgpO1xuICAgIHRoaXMuZXZlbnRCdXMudW5zdWJzY3JpYmVBbGwoKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaChmID0+IGYoKSk7XG4gIH1cblxuICBzdGFydCgpIHtcbiAgICBpZiAodGhpcy5zdGF0dXMgPT09IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuTmV2ZXJTdGFydGVkKSB7XG4gICAgICB0aGlzLnN0YXR1cyA9IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuU3RhcnRpbmc7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIG9uRW5kZWQoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLmV2ZW50QnVzLnN1YnNjcmliZShDb25uZWN0aW9uSGVscGVyRXZlbnRzLkVuZGVkLCBoYW5kbGVyKTtcbiAgfVxuXG4gIGhhbmRsZUVuZGVkKCkge1xuICAgIHRoaXMuc3RhdHVzID0gQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5FbmRlZDtcbiAgICB0aGlzLmV2ZW50QnVzLnRyaWdnZXIoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5FbmRlZCwge30pO1xuICB9XG5cbiAgb25Db25uZWN0aW9uR2FpbihoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRCdXMuc3Vic2NyaWJlKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuQ29ubmVjdGlvbkdhaW5lZCwgaGFuZGxlcik7XG4gIH1cblxuICBoYW5kbGVDb25uZWN0aW9uR2FpbigpIHtcbiAgICB0aGlzLnN0YXR1cyA9IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuQ29ubmVjdGVkO1xuICAgIHRoaXMuZXZlbnRCdXMudHJpZ2dlcihDb25uZWN0aW9uSGVscGVyRXZlbnRzLkNvbm5lY3Rpb25HYWluZWQsIHt9KTtcbiAgfVxuXG4gIG9uQ29ubmVjdGlvbkxvc3QoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLmV2ZW50QnVzLnN1YnNjcmliZShDb25uZWN0aW9uSGVscGVyRXZlbnRzLkNvbm5lY3Rpb25Mb3N0LCBoYW5kbGVyKTtcbiAgfVxuXG4gIGhhbmRsZUNvbm5lY3Rpb25Mb3N0KCkge1xuICAgIHRoaXMuc3RhdHVzID0gQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5Db25uZWN0aW9uTG9zdDtcbiAgICB0aGlzLmV2ZW50QnVzLnRyaWdnZXIoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5Db25uZWN0aW9uTG9zdCwge30pO1xuICB9XG5cbiAgb25NZXNzYWdlKGhhbmRsZXIpIHtcbiAgICByZXR1cm4gdGhpcy5ldmVudEJ1cy5zdWJzY3JpYmUoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5JbmNvbWluZ01lc3NhZ2UsIGhhbmRsZXIpO1xuICB9XG5cbiAgaGFuZGxlTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgbGV0IHBhcnNlZE1lc3NhZ2U7XG4gICAgdHJ5IHtcbiAgICAgIHBhcnNlZE1lc3NhZ2UgPSBKU09OLnBhcnNlKG1lc3NhZ2UuY29udGVudCk7XG4gICAgICB0aGlzLmV2ZW50QnVzLnRyaWdnZXIoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5JbmNvbWluZ01lc3NhZ2UsIHBhcnNlZE1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBXcm9uZyBtZXNzYWdlIGZvcm1hdDogYCwgbWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0U3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXR1cztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMcGNDb25uZWN0aW9uSGVscGVyO1xuIiwiaW1wb3J0IHsgQ29ubmVjdGlvblR5cGUgfSBmcm9tIFwiLi9iYXNlQ29ubmVjdGlvbkhlbHBlclwiO1xuaW1wb3J0IENvbm5lY3Rpb25EZXRhaWxzUHJvdmlkZXIgZnJvbSBcIi4vY29ubmVjdGlvbkRldGFpbHNQcm92aWRlclwiO1xuXG5pbXBvcnQgSW90Q29ubmVjdGlvbkhlbHBlciBmcm9tIFwiLi9Jb3RDb25uZWN0aW9uSGVscGVyXCI7XG5pbXBvcnQgTHBjQ29ubmVjdGlvbkhlbHBlciBmcm9tIFwiLi9McGNDb25uZWN0aW9uSGVscGVyXCI7XG5cbmNsYXNzIENvbm5lY3Rpb25IZWxwZXJQcm92aWRlciB7XG4gIGdldCh7Y29udGFjdElkLCBpbml0aWFsQ29udGFjdElkLCBjb25uZWN0aW9uRGV0YWlscywgcGFydGljaXBhbnRUb2tlbiwgY2hhdENsaWVudCwgd2Vic29ja2V0TWFuYWdlciwgY3JlYXRlQ29ubmVjdGlvblRva2VuLCByZWNvbm5lY3RDb25maWd9KSB7XG4gICAgY29uc3QgY29ubmVjdGlvbkRldGFpbHNQcm92aWRlciA9IG5ldyBDb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyKGNvbm5lY3Rpb25EZXRhaWxzLCBwYXJ0aWNpcGFudFRva2VuLCBjaGF0Q2xpZW50LCBjcmVhdGVDb25uZWN0aW9uVG9rZW4pO1xuICAgIHJldHVybiBjb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyLmluaXQoKS50aGVuKCgpID0+IHtcbiAgICAgIGlmIChjb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyLmNvbm5lY3Rpb25UeXBlID09PSBDb25uZWN0aW9uVHlwZS5MUEMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMcGNDb25uZWN0aW9uSGVscGVyKGluaXRpYWxDb250YWN0SWQsIGNvbm5lY3Rpb25EZXRhaWxzUHJvdmlkZXIsIHdlYnNvY2tldE1hbmFnZXIpO1xuICAgICAgfSBlbHNlIGlmIChjb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyLmNvbm5lY3Rpb25UeXBlID09PSBDb25uZWN0aW9uVHlwZS5JT1QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJb3RDb25uZWN0aW9uSGVscGVyKGNvbnRhY3RJZCwgY29ubmVjdGlvbkRldGFpbHNQcm92aWRlciwgcmVjb25uZWN0Q29uZmlnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgQ29ubmVjdGlvbkhlbHBlclByb3ZpZGVyKCk7XG4iLCJpbXBvcnQgeyBDb25uZWN0aW9uSGVscGVyU3RhdHVzIH0gZnJvbSBcIi4vY29ubmVjdGlvbkhlbHBlcnMvYmFzZUNvbm5lY3Rpb25IZWxwZXJcIjtcbmltcG9ydCB7XG4gIENIQVRfRVZFTlRTLFxuICBUUkFOU0NSSVBUX0RFRkFVTFRfUEFSQU1TLFxuICBBR0VOVF9SRUNPTk5FQ1RfQ09ORklHLFxuICBDVVNUT01FUl9SRUNPTk5FQ1RfQ09ORklHLFxuICBTRVNTSU9OX1RZUEVTLFxuICBDT05URU5UX1RZUEVcbn0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgTG9nTWFuYWdlciB9IGZyb20gXCIuLi9sb2dcIjtcbmltcG9ydCB7IEV2ZW50QnVzIH0gZnJvbSBcIi4vZXZlbnRidXNcIjtcbmltcG9ydCB7IENoYXRTZXJ2aWNlQXJnc1ZhbGlkYXRvciB9IGZyb20gXCIuL2NoYXRBcmdzVmFsaWRhdG9yXCI7XG5pbXBvcnQgY29ubmVjdGlvbkhlbHBlclByb3ZpZGVyIGZyb20gXCIuL2Nvbm5lY3Rpb25IZWxwZXJzL2Nvbm5lY3Rpb25IZWxwZXJQcm92aWRlclwiO1xuXG52YXIgTmV0d29ya0xpbmtTdGF0dXMgPSB7XG4gIE5ldmVyRXN0YWJsaXNoZWQ6IFwiTmV2ZXJFc3RhYmxpc2hlZFwiLFxuICBFc3RhYmxpc2hpbmc6IFwiRXN0YWJsaXNoaW5nXCIsXG4gIEVzdGFibGlzaGVkOiBcIkVzdGFibGlzaGVkXCIsXG4gIEJyb2tlbjogXCJCcm9rZW5cIlxufTtcblxudmFyIEFDQ0VTU19ERU5JRURfRVhDRVBUSU9OID0gXCJBY2Nlc3NEZW5pZWRFeGNlcHRpb25cIjtcblxuY2xhc3MgQ2hhdENvbnRyb2xsZXIge1xuXG4gIGNvbnN0cnVjdG9yKGFyZ3MpIHtcbiAgICB0aGlzLmxvZ2dlciA9IExvZ01hbmFnZXIuZ2V0TG9nZ2VyKHtcbiAgICAgIHByZWZpeDogXCJDb250YWN0SWQtXCIgKyBhcmdzLmNoYXREZXRhaWxzLmNvbnRhY3RJZCArIFwiOiBcIlxuICAgIH0pO1xuICAgIHRoaXMuYXJnc1ZhbGlkYXRvciA9IG5ldyBDaGF0U2VydmljZUFyZ3NWYWxpZGF0b3IoKTtcbiAgICB0aGlzLnB1YnN1YiA9IG5ldyBFdmVudEJ1cygpO1xuICAgIHRoaXMuc2Vzc2lvblR5cGUgPSBhcmdzLnNlc3Npb25UeXBlO1xuICAgIHRoaXMuY29ubmVjdGlvbkRldGFpbHMgPSBhcmdzLmNoYXREZXRhaWxzLmNvbm5lY3Rpb25EZXRhaWxzO1xuICAgIHRoaXMuaW5pdGlhbENvbnRhY3RJZCA9IGFyZ3MuY2hhdERldGFpbHMuaW5pdGlhbENvbnRhY3RJZDtcbiAgICB0aGlzLmNvbnRhY3RJZCA9IGFyZ3MuY2hhdERldGFpbHMuY29udGFjdElkO1xuICAgIHRoaXMucGFydGljaXBhbnRJZCA9IGFyZ3MuY2hhdERldGFpbHMucGFydGljaXBhbnRJZDtcbiAgICB0aGlzLmNoYXRDbGllbnQgPSBhcmdzLmNoYXRDbGllbnQ7XG4gICAgdGhpcy5wYXJ0aWNpcGFudFRva2VuID0gYXJncy5jaGF0RGV0YWlscy5wYXJ0aWNpcGFudFRva2VuO1xuICAgIHRoaXMud2Vic29ja2V0TWFuYWdlciA9IGFyZ3Mud2Vic29ja2V0TWFuYWdlcjtcbiAgICBcbiAgICAvL2Zyb20gU3RyZWFtc0pTJyBDaGF0Q29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0Q29ubmVjdGlvblRva2VuIEFQSVxuICAgIHRoaXMuY3JlYXRlQ29ubmVjdGlvblRva2VuID0gYXJncy5jaGF0RGV0YWlscy5nZXRDb25uZWN0aW9uVG9rZW47XG4gICAgdGhpcy5fcGFydGljaXBhbnREaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnNlc3Npb25NZXRhZGF0YSA9IHt9O1xuICB9XG5cbiAgc3Vic2NyaWJlKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICB0aGlzLnB1YnN1Yi5zdWJzY3JpYmUoZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhcIlN1YnNjcmliZWQgc3VjY2Vzc2Z1bGx5IHRvIGV2ZW50TmFtZTogXCIsIGV2ZW50TmFtZSk7XG4gIH1cblxuICBoYW5kbGVSZXF1ZXN0U3VjY2VzcyhtZXRhZGF0YSwgcmVxdWVzdCwgcmVxdWVzdE5hbWUpIHtcbiAgICByZXR1cm4gcmVzcG9uc2UgPT4ge1xuICAgICAgcmVzcG9uc2UubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGAke3JlcXVlc3ROYW1lfSBzdWNjZXNzZnVsISBSZXNwb25zZTogYCwgcmVzcG9uc2UsIFwiIC8gUmVxdWVzdDogXCIsIHJlcXVlc3QpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH07XG4gIH1cblxuICBoYW5kbGVSZXF1ZXN0RmFpbHVyZShtZXRhZGF0YSwgcmVxdWVzdCwgcmVxdWVzdE5hbWUpIHtcbiAgICByZXR1cm4gZXJyb3IgPT4ge1xuICAgICAgZXJyb3IubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGAke3JlcXVlc3ROYW1lfSBmYWlsZWQhIEVycm9yOiBgLCBlcnJvciwgXCIgLyBSZXF1ZXN0OiBcIiwgcmVxdWVzdCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH07XG4gIH1cblxuICBzZW5kTWVzc2FnZShhcmdzKSB7XG4gICAgY29uc3QgbWV0YWRhdGEgPSBhcmdzLm1ldGFkYXRhIHx8IG51bGw7XG4gICAgdGhpcy5hcmdzVmFsaWRhdG9yLnZhbGlkYXRlU2VuZE1lc3NhZ2UoYXJncyk7XG4gICAgY29uc3QgY29ubmVjdGlvblRva2VuID0gdGhpcy5jb25uZWN0aW9uSGVscGVyLmdldENvbm5lY3Rpb25Ub2tlbigpO1xuICAgIHJldHVybiB0aGlzLmNoYXRDbGllbnRcbiAgICAgIC5zZW5kTWVzc2FnZShjb25uZWN0aW9uVG9rZW4sIGFyZ3MubWVzc2FnZSwgYXJncy5jb250ZW50VHlwZSlcbiAgICAgIC50aGVuKHRoaXMuaGFuZGxlUmVxdWVzdFN1Y2Nlc3MobWV0YWRhdGEsIGFyZ3MsIFwic2VuZE1lc3NhZ2VcIikpXG4gICAgICAuY2F0Y2godGhpcy5oYW5kbGVSZXF1ZXN0RmFpbHVyZShtZXRhZGF0YSwgYXJncywgXCJzZW5kTWVzc2FnZVwiKSk7XG4gIH1cblxuICBzZW5kRXZlbnQoYXJncykge1xuICAgIGNvbnN0IG1ldGFkYXRhID0gYXJncy5tZXRhZGF0YSB8fCBudWxsO1xuICAgIHRoaXMuYXJnc1ZhbGlkYXRvci52YWxpZGF0ZVNlbmRFdmVudChhcmdzKTtcbiAgICBjb25zdCBjb25uZWN0aW9uVG9rZW4gPSB0aGlzLmNvbm5lY3Rpb25IZWxwZXIuZ2V0Q29ubmVjdGlvblRva2VuKCk7XG4gICAgY29uc3QgY29udGVudCA9IGFyZ3MuY29udGVudCB8fCBudWxsO1xuICAgIHJldHVybiB0aGlzLmNoYXRDbGllbnRcbiAgICAgIC5zZW5kRXZlbnQoXG4gICAgICAgIGNvbm5lY3Rpb25Ub2tlbixcbiAgICAgICAgYXJncy5jb250ZW50VHlwZSxcbiAgICAgICAgY29udGVudFxuICAgICAgKVxuICAgICAgLnRoZW4odGhpcy5oYW5kbGVSZXF1ZXN0U3VjY2VzcyhtZXRhZGF0YSwgYXJncywgXCJzZW5kRXZlbnRcIikpXG4gICAgICAuY2F0Y2godGhpcy5oYW5kbGVSZXF1ZXN0RmFpbHVyZShtZXRhZGF0YSwgYXJncywgXCJzZW5kRXZlbnRcIikpO1xuICB9XG5cbiAgZ2V0VHJhbnNjcmlwdChpbnB1dEFyZ3MpIHtcbiAgICBpZiAodGhpcy5jb25uZWN0aW9uSGVscGVyLmdldFN0YXR1cygpID09PSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLkVuZGVkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoQUNDRVNTX0RFTklFRF9FWENFUFRJT04pO1xuICAgIH1cbiAgICBjb25zdCBtZXRhZGF0YSA9IGlucHV0QXJncy5tZXRhZGF0YSB8fCBudWxsO1xuICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICBzdGFydFBvc2l0aW9uOiBpbnB1dEFyZ3Muc3RhcnRQb3NpdGlvbiB8fCB7fSxcbiAgICAgIHNjYW5EaXJlY3Rpb246IGlucHV0QXJncy5zY2FuRGlyZWN0aW9uIHx8IFRSQU5TQ1JJUFRfREVGQVVMVF9QQVJBTVMuU0NBTl9ESVJFQ1RJT04sXG4gICAgICBzb3J0T3JkZXI6IGlucHV0QXJncy5zb3J0T3JkZXIgfHwgVFJBTlNDUklQVF9ERUZBVUxUX1BBUkFNUy5TT1JUX09SREVSLFxuICAgICAgbWF4UmVzdWx0czogaW5wdXRBcmdzLm1heFJlc3VsdHMgfHwgVFJBTlNDUklQVF9ERUZBVUxUX1BBUkFNUy5NQVhfUkVTVUxUUyxcbiAgICB9O1xuICAgIGlmIChpbnB1dEFyZ3MubmV4dFRva2VuKSB7XG4gICAgICBhcmdzLm5leHRUb2tlbiA9IGlucHV0QXJncy5uZXh0VG9rZW47XG4gICAgfVxuICAgIGlmIChpbnB1dEFyZ3MuY29udGFjdElkKSB7XG4gICAgICBhcmdzLmNvbnRhY3RJZCA9IGlucHV0QXJncy5jb250YWN0SWQ7XG4gICAgfVxuICAgIGNvbnN0IGNvbm5lY3Rpb25Ub2tlbiA9IHRoaXMuY29ubmVjdGlvbkhlbHBlci5nZXRDb25uZWN0aW9uVG9rZW4oKTtcbiAgICByZXR1cm4gdGhpcy5jaGF0Q2xpZW50XG4gICAgICAuZ2V0VHJhbnNjcmlwdChjb25uZWN0aW9uVG9rZW4sIGFyZ3MpXG4gICAgICAudGhlbih0aGlzLmhhbmRsZVJlcXVlc3RTdWNjZXNzKG1ldGFkYXRhLCBhcmdzLCBcImdldFRyYW5zY3JpcHRcIikpXG4gICAgICAuY2F0Y2godGhpcy5oYW5kbGVSZXF1ZXN0RmFpbHVyZShtZXRhZGF0YSwgYXJncywgXCJnZXRUcmFuc2NyaXB0XCIpKTtcbiAgfVxuXG4gIGNvbm5lY3QoYXJncz17fSkge1xuICAgIHRoaXMuc2Vzc2lvbk1ldGFkYXRhID0gYXJncy5tZXRhZGF0YSB8fCBudWxsO1xuICAgIHRoaXMuYXJnc1ZhbGlkYXRvci52YWxpZGF0ZUNvbm5lY3RDaGF0KGFyZ3MpO1xuXG4gICAgcmV0dXJuIGNvbm5lY3Rpb25IZWxwZXJQcm92aWRlclxuICAgICAgLmdldCh7XG4gICAgICAgIGNvbnRhY3RJZDogdGhpcy5jb250YWN0SWQsXG4gICAgICAgIGluaXRpYWxDb250YWN0SWQ6IHRoaXMuaW5pdGlhbENvbnRhY3RJZCxcbiAgICAgICAgY29ubmVjdGlvbkRldGFpbHM6IHRoaXMuY29ubmVjdGlvbkRldGFpbHMsXG4gICAgICAgIHBhcnRpY2lwYW50VG9rZW46IHRoaXMucGFydGljaXBhbnRUb2tlbixcbiAgICAgICAgY2hhdENsaWVudDogdGhpcy5jaGF0Q2xpZW50LFxuICAgICAgICB3ZWJzb2NrZXRNYW5hZ2VyOiB0aGlzLndlYnNvY2tldE1hbmFnZXIsXG4gICAgICAgIGNyZWF0ZUNvbm5lY3Rpb25Ub2tlbjogdGhpcy5jcmVhdGVDb25uZWN0aW9uVG9rZW4sXG4gICAgICAgIHJlY29ubmVjdENvbmZpZzogdGhpcy5zZXNzaW9uVHlwZSA9PT0gU0VTU0lPTl9UWVBFUy5BR0VOVCA/IEFHRU5UX1JFQ09OTkVDVF9DT05GSUcgOiBDVVNUT01FUl9SRUNPTk5FQ1RfQ09ORklHXG4gICAgICB9KVxuICAgICAgLnRoZW4oXG4gICAgICAgIHRoaXMuX2luaXRDb25uZWN0aW9uSGVscGVyLmJpbmQodGhpcylcbiAgICAgIClcbiAgICAgIC50aGVuKFxuICAgICAgICB0aGlzLl9vbkNvbm5lY3RTdWNjZXNzLmJpbmQodGhpcyksXG4gICAgICAgIHRoaXMuX29uQ29ubmVjdEZhaWx1cmUuYmluZCh0aGlzKVxuICAgICAgKTtcbiAgfVxuXG4gIF9pbml0Q29ubmVjdGlvbkhlbHBlcihjb25uZWN0aW9uSGVscGVyKSB7XG4gICAgdGhpcy5jb25uZWN0aW9uSGVscGVyID0gY29ubmVjdGlvbkhlbHBlcjtcbiAgICB0aGlzLmNvbm5lY3Rpb25IZWxwZXIub25FbmRlZCh0aGlzLl9oYW5kbGVFbmRlZENvbm5lY3Rpb24uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5jb25uZWN0aW9uSGVscGVyLm9uQ29ubmVjdGlvbkxvc3QodGhpcy5faGFuZGxlTG9zdENvbm5lY3Rpb24uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5jb25uZWN0aW9uSGVscGVyLm9uQ29ubmVjdGlvbkdhaW4odGhpcy5faGFuZGxlR2FpbmVkQ29ubmVjdGlvbi5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmNvbm5lY3Rpb25IZWxwZXIub25NZXNzYWdlKHRoaXMuX2hhbmRsZUluY29taW5nTWVzc2FnZS5iaW5kKHRoaXMpKTtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uSGVscGVyLnN0YXJ0KCk7XG4gIH1cblxuICBfaGFuZGxlRW5kZWRDb25uZWN0aW9uKGV2ZW50RGF0YSkge1xuICAgIHRoaXMuX2ZvcndhcmRDaGF0RXZlbnQoQ0hBVF9FVkVOVFMuQ09OTkVDVElPTl9CUk9LRU4sIHtcbiAgICAgIGRhdGE6IGV2ZW50RGF0YSxcbiAgICAgIGNoYXREZXRhaWxzOiB0aGlzLmdldENoYXREZXRhaWxzKClcbiAgICB9KTtcbiAgfVxuXG4gIF9oYW5kbGVMb3N0Q29ubmVjdGlvbihldmVudERhdGEpIHtcbiAgICB0aGlzLl9mb3J3YXJkQ2hhdEV2ZW50KENIQVRfRVZFTlRTLkNPTk5FQ1RJT05fTE9TVCwge1xuICAgICAgZGF0YTogZXZlbnREYXRhLFxuICAgICAgY2hhdERldGFpbHM6IHRoaXMuZ2V0Q2hhdERldGFpbHMoKVxuICAgIH0pO1xuICB9XG5cbiAgX2hhbmRsZUdhaW5lZENvbm5lY3Rpb24oZXZlbnREYXRhKSB7XG4gICAgdGhpcy5fZm9yd2FyZENoYXRFdmVudChDSEFUX0VWRU5UUy5DT05ORUNUSU9OX0VTVEFCTElTSEVELCB7XG4gICAgICBkYXRhOiBldmVudERhdGEsXG4gICAgICBjaGF0RGV0YWlsczogdGhpcy5nZXRDaGF0RGV0YWlscygpXG4gICAgfSk7XG4gIH1cblxuICBfaGFuZGxlSW5jb21pbmdNZXNzYWdlKGluY29taW5nRGF0YSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBldmVudFR5cGUgPSBpbmNvbWluZ0RhdGEuQ29udGVudFR5cGUgPT09IENPTlRFTlRfVFlQRS50eXBpbmcgPyBDSEFUX0VWRU5UUy5JTkNPTUlOR19UWVBJTkcgOiBDSEFUX0VWRU5UUy5JTkNPTUlOR19NRVNTQUdFO1xuICAgICAgdGhpcy5fZm9yd2FyZENoYXRFdmVudChldmVudFR5cGUsIHtcbiAgICAgICAgZGF0YTogaW5jb21pbmdEYXRhLFxuICAgICAgICBjaGF0RGV0YWlsczogdGhpcy5nZXRDaGF0RGV0YWlscygpXG4gICAgICB9KTtcbiAgICAgIGlmIChpbmNvbWluZ0RhdGEuQ29udGVudFR5cGUgPT09IENPTlRFTlRfVFlQRS5jaGF0RW5kZWQpIHtcbiAgICAgICAgdGhpcy5fZm9yd2FyZENoYXRFdmVudChDSEFUX0VWRU5UUy5DSEFUX0VOREVELCB7XG4gICAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgICBjaGF0RGV0YWlsczogdGhpcy5nZXRDaGF0RGV0YWlscygpXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmJyZWFrQ29ubmVjdGlvbigpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFxuICAgICAgICBcIkVycm9yIG9jY3VyZWQgd2hpbGUgaGFuZGxpbmcgbWVzc2FnZSBmcm9tIENvbm5lY3Rpb24uIGV2ZW50RGF0YTogXCIsXG4gICAgICAgIGluY29taW5nRGF0YSxcbiAgICAgICAgXCIgQ2F1c2luZyBleGNlcHRpb246IFwiLFxuICAgICAgICBlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIF9mb3J3YXJkQ2hhdEV2ZW50KGV2ZW50TmFtZSwgZXZlbnREYXRhKSB7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcoXCJUcmlnZ2VyaW5nIGV2ZW50IGZvciBzdWJzY3JpYmVyczpcIiwgZXZlbnROYW1lLCBldmVudERhdGEpO1xuICAgIHRoaXMucHVic3ViLnRyaWdnZXJBc3luYyhldmVudE5hbWUsIGV2ZW50RGF0YSk7XG4gIH1cblxuICBfb25Db25uZWN0U3VjY2VzcyhyZXNwb25zZSkge1xuICAgIHRoaXMubG9nZ2VyLmluZm8oXCJDb25uZWN0IHN1Y2Nlc3NmdWwhXCIpO1xuICAgIGNvbnN0IHJlc3BvbnNlT2JqZWN0ID0ge1xuICAgICAgX2RlYnVnOiByZXNwb25zZSxcbiAgICAgIGNvbm5lY3RTdWNjZXNzOiB0cnVlLFxuICAgICAgY29ubmVjdENhbGxlZDogdHJ1ZSxcbiAgICAgIG1ldGFkYXRhOiB0aGlzLnNlc3Npb25NZXRhZGF0YVxuICAgIH07XG4gICAgY29uc3QgZXZlbnREYXRhID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBjaGF0RGV0YWlsczogdGhpcy5nZXRDaGF0RGV0YWlscygpXG4gICAgfSwgcmVzcG9uc2VPYmplY3QpO1xuICAgIHRoaXMucHVic3ViLnRyaWdnZXJBc3luYyhDSEFUX0VWRU5UUy5DT05ORUNUSU9OX0VTVEFCTElTSEVELCBldmVudERhdGEpO1xuXG4gICAgaWYgKHRoaXMuX3Nob3VsZEFja25vd2xlZGdlQ29udGFjdCgpKSB7XG4gICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgIGNvbnRlbnRUeXBlOiBDT05URU5UX1RZUEUuY29ubmVjdGlvbkFja25vd2xlZGdlZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlT2JqZWN0O1xuICB9XG5cbiAgX29uQ29ubmVjdEZhaWx1cmUoZXJyb3IpIHtcbiAgICBjb25zdCBlcnJvck9iamVjdCA9IHtcbiAgICAgIF9kZWJ1ZzogZXJyb3IsXG4gICAgICBjb25uZWN0U3VjY2VzczogZmFsc2UsXG4gICAgICBjb25uZWN0Q2FsbGVkOiB0cnVlLFxuICAgICAgbWV0YWRhdGE6IHRoaXMuc2Vzc2lvbk1ldGFkYXRhXG4gICAgfTtcbiAgICB0aGlzLmxvZ2dlci5lcnJvcihcIkNvbm5lY3QgRmFpbGVkIHdpdGggZGF0YTogXCIsIGVycm9yT2JqZWN0KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3JPYmplY3QpO1xuICB9XG5cbiAgX3Nob3VsZEFja25vd2xlZGdlQ29udGFjdCgpIHtcbiAgICByZXR1cm4gdGhpcy5zZXNzaW9uVHlwZSA9PT0gU0VTU0lPTl9UWVBFUy5BR0VOVDtcbiAgfVxuXG4gIGJyZWFrQ29ubmVjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uSGVscGVyXG4gICAgICA/IHRoaXMuY29ubmVjdGlvbkhlbHBlci5lbmQoKVxuICAgICAgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIC8vIERvIGFueSBjbGVhbiB1cCB0aGF0IG5lZWRzIHRvIGJlIGRvbmUgdXBvbiB0aGUgcGFydGljaXBhbnQgYmVpbmcgZGlzY29ubmVjdGVkIGZyb20gdGhlIGNoYXQgLVxuICAvLyBkaXNjb25uZWN0ZWQgaGVyZSBtZWFucyB0aGF0IHRoZSBwYXJ0aWNpcGFudCBpcyBubyBsb25nZXIgcGFydCBvZiB0aGVyIGNoYXQuXG4gIGNsZWFuVXBPblBhcnRpY2lwYW50RGlzY29ubmVjdCgpIHtcbiAgICB0aGlzLnB1YnN1Yi51bnN1YnNjcmliZUFsbCgpO1xuICB9XG5cbiAgZGlzY29ubmVjdFBhcnRpY2lwYW50KCkge1xuICAgIGNvbnN0IGNvbm5lY3Rpb25Ub2tlbiA9IHRoaXMuY29ubmVjdGlvbkhlbHBlci5nZXRDb25uZWN0aW9uVG9rZW4oKTtcbiAgICByZXR1cm4gdGhpcy5jaGF0Q2xpZW50XG4gICAgICAuZGlzY29ubmVjdFBhcnRpY2lwYW50KGNvbm5lY3Rpb25Ub2tlbilcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhcImRpc2Nvbm5lY3QgcGFydGljaXBhbnQgc3VjY2Vzc2Z1bFwiKTtcbiAgICAgICAgdGhpcy5fcGFydGljaXBhbnREaXNjb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNsZWFuVXBPblBhcnRpY2lwYW50RGlzY29ubmVjdCgpO1xuICAgICAgICB0aGlzLmJyZWFrQ29ubmVjdGlvbigpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFwiZGlzY29ubmVjdCBwYXJ0aWNpcGFudCBmYWlsZWQgd2l0aCBlcnJvcjogXCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZ2V0Q2hhdERldGFpbHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluaXRpYWxDb250YWN0SWQ6IHRoaXMuaW5pdGlhbENvbnRhY3RJZCxcbiAgICAgIGNvbnRhY3RJZDogdGhpcy5jb250YWN0SWQsXG4gICAgICBwYXJ0aWNpcGFudElkOiB0aGlzLnBhcnRpY2lwYW50SWQsXG4gICAgICBwYXJ0aWNpcGFudFRva2VuOiB0aGlzLnBhcnRpY2lwYW50VG9rZW4sXG4gICAgICBjb25uZWN0aW9uRGV0YWlsczogdGhpcy5jb25uZWN0aW9uRGV0YWlsc1xuICAgIH07XG4gIH1cblxuICBfY29udmVydENvbm5lY3Rpb25IZWxwZXJTdGF0dXMoY29ubmVjdGlvbkhlbHBlclN0YXR1cykge1xuICAgIHN3aXRjaCAoY29ubmVjdGlvbkhlbHBlclN0YXR1cykge1xuICAgICAgY2FzZSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLk5ldmVyU3RhcnRlZDpcbiAgICAgICAgcmV0dXJuIE5ldHdvcmtMaW5rU3RhdHVzLk5ldmVyRXN0YWJsaXNoZWQ7XG4gICAgICBjYXNlIENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuU3RhcnRpbmc6XG4gICAgICAgIHJldHVybiBOZXR3b3JrTGlua1N0YXR1cy5Fc3RhYmxpc2hpbmc7XG4gICAgICBjYXNlIENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuRW5kZWQ6XG4gICAgICAgIHJldHVybiBOZXR3b3JrTGlua1N0YXR1cy5Ccm9rZW47XG4gICAgICBjYXNlIENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuQ29ubmVjdGlvbkxvc3Q6XG4gICAgICAgIHJldHVybiBOZXR3b3JrTGlua1N0YXR1cy5Ccm9rZW47XG4gICAgICBjYXNlIENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuQ29ubmVjdGVkOlxuICAgICAgICByZXR1cm4gTmV0d29ya0xpbmtTdGF0dXMuRXN0YWJsaXNoZWQ7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLmVycm9yKFxuICAgICAgXCJSZWFjaGVkIGludmFsaWQgc3RhdGUuIFVua25vd24gY29ubmVjdGlvbkhlbHBlclN0YXR1czogXCIsXG4gICAgICBjb25uZWN0aW9uSGVscGVyU3RhdHVzXG4gICAgKTtcbiAgfVxuXG4gIGdldENvbm5lY3Rpb25TdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnZlcnRDb25uZWN0aW9uSGVscGVyU3RhdHVzKFxuICAgICAgdGhpcy5jb25uZWN0aW9uSGVscGVyLmdldFN0YXR1cygpXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgeyBDaGF0Q29udHJvbGxlciwgTmV0d29ya0xpbmtTdGF0dXMgfTtcbiIsImltcG9ydCB7XG4gIFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24sXG4gIElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvblxufSBmcm9tIFwiLi9leGNlcHRpb25zXCI7XG5pbXBvcnQgeyBDaGF0Q2xpZW50RmFjdG9yeSB9IGZyb20gXCIuLi9jbGllbnQvY2xpZW50XCI7XG5pbXBvcnQgeyBDaGF0U2VydmljZUFyZ3NWYWxpZGF0b3IgfSBmcm9tIFwiLi9jaGF0QXJnc1ZhbGlkYXRvclwiO1xuaW1wb3J0IHsgU0VTU0lPTl9UWVBFUywgQ0hBVF9FVkVOVFMgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBHbG9iYWxDb25maWcgfSBmcm9tIFwiLi4vZ2xvYmFsQ29uZmlnXCI7XG5pbXBvcnQgeyBDaGF0Q29udHJvbGxlciB9IGZyb20gXCIuL2NoYXRDb250cm9sbGVyXCI7XG5pbXBvcnQgeyBMb2dNYW5hZ2VyLCBMb2dMZXZlbCwgTG9nZ2VyIH0gZnJvbSBcIi4uL2xvZ1wiO1xuXG5jbGFzcyBDaGF0U2Vzc2lvbkZhY3Rvcnkge1xuICAvKmVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzKi9cblxuICBjcmVhdGVBZ2VudENoYXRDb250cm9sbGVyKGNoYXREZXRhaWxzLCBwYXJ0aWNpcGFudFR5cGUpIHtcbiAgICB0aHJvdyBuZXcgVW5JbXBsZW1lbnRlZE1ldGhvZEV4Y2VwdGlvbihcbiAgICAgIFwiY3JlYXRlQWdlbnRDaGF0Q29udHJvbGxlciBpbiBDaGF0Q29udHJvbGxlckZhY3RvcnkuXCJcbiAgICApO1xuICB9XG5cbiAgY3JlYXRlQ3VzdG9tZXJDaGF0Q29udHJvbGxlcihjaGF0RGV0YWlscywgcGFydGljaXBhbnRUeXBlKSB7XG4gICAgdGhyb3cgbmV3IFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24oXG4gICAgICBcImNyZWF0ZUN1c3RvbWVyQ2hhdENvbnRyb2xsZXIgaW4gQ2hhdENvbnRyb2xsZXJGYWN0b3J5LlwiXG4gICAgKTtcbiAgfVxuICAvKmVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMqL1xufVxuXG5jbGFzcyBQZXJzaXN0ZW50Q29ubmVjdGlvbkFuZENoYXRTZXJ2aWNlU2Vzc2lvbkZhY3RvcnkgZXh0ZW5kcyBDaGF0U2Vzc2lvbkZhY3Rvcnkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYXJnc1ZhbGlkYXRvciA9IG5ldyBDaGF0U2VydmljZUFyZ3NWYWxpZGF0b3IoKTtcbiAgfVxuXG4gIGNyZWF0ZUNoYXRTZXNzaW9uKHNlc3Npb25UeXBlLCBjaGF0RGV0YWlscywgb3B0aW9ucywgd2Vic29ja2V0TWFuYWdlcikge1xuICAgIGNvbnN0IGNoYXRDb250cm9sbGVyID0gdGhpcy5fY3JlYXRlQ2hhdENvbnRyb2xsZXIoc2Vzc2lvblR5cGUsIGNoYXREZXRhaWxzLCBvcHRpb25zLCB3ZWJzb2NrZXRNYW5hZ2VyKTtcbiAgICBpZiAoc2Vzc2lvblR5cGUgPT09IFNFU1NJT05fVFlQRVMuQUdFTlQpIHtcbiAgICAgIHJldHVybiBuZXcgQWdlbnRDaGF0U2Vzc2lvbihjaGF0Q29udHJvbGxlcik7XG4gICAgfSBlbHNlIGlmIChzZXNzaW9uVHlwZSA9PT0gU0VTU0lPTl9UWVBFUy5DVVNUT01FUikge1xuICAgICAgcmV0dXJuIG5ldyBDdXN0b21lckNoYXRTZXNzaW9uKGNoYXRDb250cm9sbGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbihcbiAgICAgICAgXCJVbmtvd24gdmFsdWUgZm9yIHNlc3Npb24gdHlwZSwgQWxsb3dlZCB2YWx1ZXMgYXJlOiBcIiArXG4gICAgICAgICAgT2JqZWN0LnZhbHVlcyhTRVNTSU9OX1RZUEVTKSxcbiAgICAgICAgICBzZXNzaW9uVHlwZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBfY3JlYXRlQ2hhdENvbnRyb2xsZXIoc2Vzc2lvblR5cGUsIGNoYXREZXRhaWxzSW5wdXQsIG9wdGlvbnMsIHdlYnNvY2tldE1hbmFnZXIpIHtcbiAgICB2YXIgY2hhdERldGFpbHMgPSB0aGlzLmFyZ3NWYWxpZGF0b3Iubm9ybWFsaXplQ2hhdERldGFpbHMoY2hhdERldGFpbHNJbnB1dCk7XG4gICAgdmFyIGFyZ3MgPSB7XG4gICAgICBzZXNzaW9uVHlwZTogc2Vzc2lvblR5cGUsXG4gICAgICBjaGF0RGV0YWlsczogY2hhdERldGFpbHMsXG4gICAgICBjaGF0Q2xpZW50OiBDaGF0Q2xpZW50RmFjdG9yeS5nZXRDYWNoZWRDbGllbnQob3B0aW9ucyksXG4gICAgICB3ZWJzb2NrZXRNYW5hZ2VyOiB3ZWJzb2NrZXRNYW5hZ2VyXG4gICAgfTtcbiAgICByZXR1cm4gbmV3IENoYXRDb250cm9sbGVyKGFyZ3MpO1xuICB9XG59XG5cbmNsYXNzIENoYXRTZXNzaW9uIHtcbiAgY29uc3RydWN0b3IoY29udHJvbGxlcikge1xuICAgIHRoaXMuY29udHJvbGxlciA9IGNvbnRyb2xsZXI7XG4gIH1cblxuICBvbk1lc3NhZ2UoY2FsbGJhY2spIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuc3Vic2NyaWJlKENIQVRfRVZFTlRTLklOQ09NSU5HX01FU1NBR0UsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIG9uVHlwaW5nKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jb250cm9sbGVyLnN1YnNjcmliZShDSEFUX0VWRU5UUy5JTkNPTUlOR19UWVBJTkcsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIG9uQ29ubmVjdGlvbkJyb2tlbihjYWxsYmFjaykge1xuICAgIHRoaXMuY29udHJvbGxlci5zdWJzY3JpYmUoQ0hBVF9FVkVOVFMuQ09OTkVDVElPTl9CUk9LRU4sIGNhbGxiYWNrKTtcbiAgfVxuXG4gIG9uQ29ubmVjdGlvbkVzdGFibGlzaGVkKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jb250cm9sbGVyLnN1YnNjcmliZShDSEFUX0VWRU5UUy5DT05ORUNUSU9OX0VTVEFCTElTSEVELCBjYWxsYmFjayk7XG4gIH1cblxuICBvbkVuZGVkKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jb250cm9sbGVyLnN1YnNjcmliZShDSEFUX0VWRU5UUy5DSEFUX0VOREVELCBjYWxsYmFjayk7XG4gIH1cblxuICBzZW5kTWVzc2FnZShhcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbGxlci5zZW5kTWVzc2FnZShhcmdzKTtcbiAgfVxuXG4gIGNvbm5lY3QoYXJncykge1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2xsZXIuY29ubmVjdChhcmdzKTtcbiAgfVxuXG4gIHNlbmRFdmVudChhcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbGxlci5zZW5kRXZlbnQoYXJncyk7XG4gIH1cblxuICBnZXRUcmFuc2NyaXB0KGFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sbGVyLmdldFRyYW5zY3JpcHQoYXJncyk7XG4gIH1cblxuICBnZXRDaGF0RGV0YWlscygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sbGVyLmdldENoYXREZXRhaWxzKCk7XG4gIH1cbn1cblxuY2xhc3MgQWdlbnRDaGF0U2Vzc2lvbiBleHRlbmRzIENoYXRTZXNzaW9uIHtcbiAgY29uc3RydWN0b3IoY29udHJvbGxlcikge1xuICAgIHN1cGVyKGNvbnRyb2xsZXIpO1xuICB9XG5cbiAgY2xlYW5VcE9uUGFydGljaXBhbnREaXNjb25uZWN0KCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2xsZXIuY2xlYW5VcE9uUGFydGljaXBhbnREaXNjb25uZWN0KCk7XG4gIH1cbn1cblxuY2xhc3MgQ3VzdG9tZXJDaGF0U2Vzc2lvbiBleHRlbmRzIENoYXRTZXNzaW9uIHtcbiAgY29uc3RydWN0b3IoY29udHJvbGxlcikge1xuICAgIHN1cGVyKGNvbnRyb2xsZXIpO1xuICB9XG5cbiAgZGlzY29ubmVjdFBhcnRpY2lwYW50KCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2xsZXIuZGlzY29ubmVjdFBhcnRpY2lwYW50KCk7XG4gIH1cbn1cblxuY29uc3QgQ0hBVF9TRVNTSU9OX0ZBQ1RPUlkgPSBuZXcgUGVyc2lzdGVudENvbm5lY3Rpb25BbmRDaGF0U2VydmljZVNlc3Npb25GYWN0b3J5KCk7XG5cbnZhciBzZXRHbG9iYWxDb25maWcgPSBjb25maWcgPT4ge1xuICB2YXIgbG9nZ2VyQ29uZmlnID0gY29uZmlnLmxvZ2dlckNvbmZpZztcbiAgR2xvYmFsQ29uZmlnLnVwZGF0ZShjb25maWcpO1xuICBMb2dNYW5hZ2VyLnVwZGF0ZUxvZ2dlckNvbmZpZyhsb2dnZXJDb25maWcpO1xufTtcblxudmFyIENoYXRTZXNzaW9uQ29uc3RydWN0b3IgPSBhcmdzID0+IHtcbiAgdmFyIG9wdGlvbnMgPSBhcmdzLm9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gYXJncy50eXBlIHx8IFNFU1NJT05fVFlQRVMuQUdFTlQ7XG4gIHJldHVybiBDSEFUX1NFU1NJT05fRkFDVE9SWS5jcmVhdGVDaGF0U2Vzc2lvbihcbiAgICB0eXBlLFxuICAgIGFyZ3MuY2hhdERldGFpbHMsXG4gICAgb3B0aW9ucyxcbiAgICBhcmdzLndlYnNvY2tldE1hbmFnZXJcbiAgKTtcbn07XG5cbmNvbnN0IENoYXRTZXNzaW9uT2JqZWN0ID0ge1xuICBjcmVhdGU6IENoYXRTZXNzaW9uQ29uc3RydWN0b3IsXG4gIHNldEdsb2JhbENvbmZpZzogc2V0R2xvYmFsQ29uZmlnLFxuICBMb2dMZXZlbDogTG9nTGV2ZWwsXG4gIExvZ2dlcjogTG9nZ2VyLFxuICBTZXNzaW9uVHlwZXM6IFNFU1NJT05fVFlQRVNcbn07XG5cbmV4cG9ydCB7IENoYXRTZXNzaW9uT2JqZWN0IH07XG4iLCIvKiBnbG9iYWxzIF9fd2VicGFja19hbWRfb3B0aW9uc19fICovXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19hbWRfb3B0aW9uc19fO1xuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEJlbG93IGlzIHRoZSBQYWhvIG1xdHQgdmVyc2lvbiAxLjAuMVxuLy8gUGxlYXNlIHRlc3QgcHJvcGVybHkgaWYgeW91IGNoYW5nZSB0aGUgdmVyc2lvbiBvZiB0aGlzIGZpbGUuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IChjKSAyMDEzIElCTSBDb3JwLlxuICpcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHNcbiAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMFxuICogYW5kIEVjbGlwc2UgRGlzdHJpYnV0aW9uIExpY2Vuc2UgdjEuMCB3aGljaCBhY2NvbXBhbnkgdGhpcyBkaXN0cmlidXRpb24uXG4gKlxuICogVGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgaXMgYXZhaWxhYmxlIGF0XG4gKiAgICBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbFxuICogYW5kIHRoZSBFY2xpcHNlIERpc3RyaWJ1dGlvbiBMaWNlbnNlIGlzIGF2YWlsYWJsZSBhdFxuICogICBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL29yZy9kb2N1bWVudHMvZWRsLXYxMC5waHAuXG4gKlxuICogQ29udHJpYnV0b3JzOlxuICogICAgQW5kcmV3IEJhbmtzIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uIGFuZCBpbml0aWFsIGRvY3VtZW50YXRpb25cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vLyBPbmx5IGV4cG9zZSBhIHNpbmdsZSBvYmplY3QgbmFtZSBpbiB0aGUgZ2xvYmFsIG5hbWVzcGFjZS5cbi8vIEV2ZXJ5dGhpbmcgbXVzdCBnbyB0aHJvdWdoIHRoaXMgbW9kdWxlLiBHbG9iYWwgUGFobyBtb2R1bGVcbi8vIG9ubHkgaGFzIGEgc2luZ2xlIHB1YmxpYyBmdW5jdGlvbiwgY2xpZW50LCB3aGljaCByZXR1cm5zXG4vLyBhIFBhaG8gY2xpZW50IG9iamVjdCBnaXZlbiBjb25uZWN0aW9uIGRldGFpbHMuXG5cbi8qKlxuICogU2VuZCBhbmQgcmVjZWl2ZSBtZXNzYWdlcyB1c2luZyB3ZWIgYnJvd3NlcnMuXG4gKiA8cD5cbiAqIFRoaXMgcHJvZ3JhbW1pbmcgaW50ZXJmYWNlIGxldHMgYSBKYXZhU2NyaXB0IGNsaWVudCBhcHBsaWNhdGlvbiB1c2UgdGhlIE1RVFQgVjMuMSBvclxuICogVjMuMS4xIHByb3RvY29sIHRvIGNvbm5lY3QgdG8gYW4gTVFUVC1zdXBwb3J0aW5nIG1lc3NhZ2luZyBzZXJ2ZXIuXG4gKlxuICogVGhlIGZ1bmN0aW9uIHN1cHBvcnRlZCBpbmNsdWRlczpcbiAqIDxvbD5cbiAqIDxsaT5Db25uZWN0aW5nIHRvIGFuZCBkaXNjb25uZWN0aW5nIGZyb20gYSBzZXJ2ZXIuIFRoZSBzZXJ2ZXIgaXMgaWRlbnRpZmllZCBieSBpdHMgaG9zdCBuYW1lIGFuZCBwb3J0IG51bWJlci5cbiAqIDxsaT5TcGVjaWZ5aW5nIG9wdGlvbnMgdGhhdCByZWxhdGUgdG8gdGhlIGNvbW11bmljYXRpb25zIGxpbmsgd2l0aCB0aGUgc2VydmVyLFxuICogZm9yIGV4YW1wbGUgdGhlIGZyZXF1ZW5jeSBvZiBrZWVwLWFsaXZlIGhlYXJ0YmVhdHMsIGFuZCB3aGV0aGVyIFNTTC9UTFMgaXMgcmVxdWlyZWQuXG4gKiA8bGk+U3Vic2NyaWJpbmcgdG8gYW5kIHJlY2VpdmluZyBtZXNzYWdlcyBmcm9tIE1RVFQgVG9waWNzLlxuICogPGxpPlB1Ymxpc2hpbmcgbWVzc2FnZXMgdG8gTVFUVCBUb3BpY3MuXG4gKiA8L29sPlxuICogPHA+XG4gKiBUaGUgQVBJIGNvbnNpc3RzIG9mIHR3byBtYWluIG9iamVjdHM6XG4gKiA8ZGw+XG4gKiA8ZHQ+PGI+e0BsaW5rIFBhaG8uQ2xpZW50fTwvYj48L2R0PlxuICogPGRkPlRoaXMgY29udGFpbnMgbWV0aG9kcyB0aGF0IHByb3ZpZGUgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIEFQSSxcbiAqIGluY2x1ZGluZyBwcm92aXNpb24gb2YgY2FsbGJhY2tzIHRoYXQgbm90aWZ5IHRoZSBhcHBsaWNhdGlvbiB3aGVuIGEgbWVzc2FnZVxuICogYXJyaXZlcyBmcm9tIG9yIGlzIGRlbGl2ZXJlZCB0byB0aGUgbWVzc2FnaW5nIHNlcnZlcixcbiAqIG9yIHdoZW4gdGhlIHN0YXR1cyBvZiBpdHMgY29ubmVjdGlvbiB0byB0aGUgbWVzc2FnaW5nIHNlcnZlciBjaGFuZ2VzLjwvZGQ+XG4gKiA8ZHQ+PGI+e0BsaW5rIFBhaG8uTWVzc2FnZX08L2I+PC9kdD5cbiAqIDxkZD5UaGlzIGVuY2Fwc3VsYXRlcyB0aGUgcGF5bG9hZCBvZiB0aGUgbWVzc2FnZSBhbG9uZyB3aXRoIHZhcmlvdXMgYXR0cmlidXRlc1xuICogYXNzb2NpYXRlZCB3aXRoIGl0cyBkZWxpdmVyeSwgaW4gcGFydGljdWxhciB0aGUgZGVzdGluYXRpb24gdG8gd2hpY2ggaXQgaGFzXG4gKiBiZWVuIChvciBpcyBhYm91dCB0byBiZSkgc2VudC48L2RkPlxuICogPC9kbD5cbiAqIDxwPlxuICogVGhlIHByb2dyYW1taW5nIGludGVyZmFjZSB2YWxpZGF0ZXMgcGFyYW1ldGVycyBwYXNzZWQgdG8gaXQsIGFuZCB3aWxsIHRocm93XG4gKiBhbiBFcnJvciBjb250YWluaW5nIGFuIGVycm9yIG1lc3NhZ2UgaW50ZW5kZWQgZm9yIGRldmVsb3BlciB1c2UsIGlmIGl0IGRldGVjdHNcbiAqIGFuIGVycm9yIHdpdGggYW55IHBhcmFtZXRlci5cbiAqIDxwPlxuICogRXhhbXBsZTpcbiAqXG4gKiA8Y29kZT48cHJlPlxudmFyIGNsaWVudCA9IG5ldyBQYWhvLk1RVFQuQ2xpZW50KGxvY2F0aW9uLmhvc3RuYW1lLCBOdW1iZXIobG9jYXRpb24ucG9ydCksIFwiY2xpZW50SWRcIik7XG5jbGllbnQub25Db25uZWN0aW9uTG9zdCA9IG9uQ29ubmVjdGlvbkxvc3Q7XG5jbGllbnQub25NZXNzYWdlQXJyaXZlZCA9IG9uTWVzc2FnZUFycml2ZWQ7XG5jbGllbnQuY29ubmVjdCh7b25TdWNjZXNzOm9uQ29ubmVjdH0pO1xuXG5mdW5jdGlvbiBvbkNvbm5lY3QoKSB7XG4gIC8vIE9uY2UgYSBjb25uZWN0aW9uIGhhcyBiZWVuIG1hZGUsIG1ha2UgYSBzdWJzY3JpcHRpb24gYW5kIHNlbmQgYSBtZXNzYWdlLlxuICBjb25zb2xlLmxvZyhcIm9uQ29ubmVjdFwiKTtcbiAgY2xpZW50LnN1YnNjcmliZShcIi9Xb3JsZFwiKTtcbiAgdmFyIG1lc3NhZ2UgPSBuZXcgUGFoby5NUVRULk1lc3NhZ2UoXCJIZWxsb1wiKTtcbiAgbWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUgPSBcIi9Xb3JsZFwiO1xuICBjbGllbnQuc2VuZChtZXNzYWdlKTtcbn07XG5mdW5jdGlvbiBvbkNvbm5lY3Rpb25Mb3N0KHJlc3BvbnNlT2JqZWN0KSB7XG4gIGlmIChyZXNwb25zZU9iamVjdC5lcnJvckNvZGUgIT09IDApXG5cdGNvbnNvbGUubG9nKFwib25Db25uZWN0aW9uTG9zdDpcIityZXNwb25zZU9iamVjdC5lcnJvck1lc3NhZ2UpO1xufTtcbmZ1bmN0aW9uIG9uTWVzc2FnZUFycml2ZWQobWVzc2FnZSkge1xuICBjb25zb2xlLmxvZyhcIm9uTWVzc2FnZUFycml2ZWQ6XCIrbWVzc2FnZS5wYXlsb2FkU3RyaW5nKTtcbiAgY2xpZW50LmRpc2Nvbm5lY3QoKTtcbn07XG4gKiA8L3ByZT48L2NvZGU+XG4gKiBAbmFtZXNwYWNlIFBhaG9cbiAqL1xuXG4vKiBqc2hpbnQgc2hhZG93OnRydWUgKi9cbihmdW5jdGlvbiBFeHBvcnRMaWJyYXJ5KHJvb3QsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgIGV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy9pZiAodHlwZW9mIHJvb3QuUGFobyA9PT0gXCJ1bmRlZmluZWRcIil7XG4gICAgLy9cdHJvb3QuUGFobyA9IHt9O1xuICAgIC8vfVxuICAgIHJvb3QuUGFobyA9IGZhY3RvcnkoKTtcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gTGlicmFyeUZhY3RvcnkoKSB7XG4gIHZhciBQYWhvTVFUVCA9IChmdW5jdGlvbihnbG9iYWwpIHtcbiAgICAvLyBQcml2YXRlIHZhcmlhYmxlcyBiZWxvdywgdGhlc2UgYXJlIG9ubHkgdmlzaWJsZSBpbnNpZGUgdGhlIGZ1bmN0aW9uIGNsb3N1cmVcbiAgICAvLyB3aGljaCBpcyB1c2VkIHRvIGRlZmluZSB0aGUgbW9kdWxlLlxuICAgIHZhciB2ZXJzaW9uID0gXCJAVkVSU0lPTkAtQEJVSUxETEVWRUxAXCI7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHZhciBsb2NhbFN0b3JhZ2UgPVxuICAgICAgZ2xvYmFsLmxvY2FsU3RvcmFnZSB8fFxuICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGF0YSA9IHt9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2V0SXRlbTogZnVuY3Rpb24oa2V5LCBpdGVtKSB7XG4gICAgICAgICAgICBkYXRhW2tleV0gPSBpdGVtO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0SXRlbTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVtb3ZlSXRlbTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBkZWxldGUgZGF0YVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pKCk7XG5cbiAgICAvKipcbiAgICAgKiBVbmlxdWUgbWVzc2FnZSB0eXBlIGlkZW50aWZpZXJzLCB3aXRoIGFzc29jaWF0ZWRcbiAgICAgKiBhc3NvY2lhdGVkIGludGVnZXIgdmFsdWVzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdmFyIE1FU1NBR0VfVFlQRSA9IHtcbiAgICAgIENPTk5FQ1Q6IDEsXG4gICAgICBDT05OQUNLOiAyLFxuICAgICAgUFVCTElTSDogMyxcbiAgICAgIFBVQkFDSzogNCxcbiAgICAgIFBVQlJFQzogNSxcbiAgICAgIFBVQlJFTDogNixcbiAgICAgIFBVQkNPTVA6IDcsXG4gICAgICBTVUJTQ1JJQkU6IDgsXG4gICAgICBTVUJBQ0s6IDksXG4gICAgICBVTlNVQlNDUklCRTogMTAsXG4gICAgICBVTlNVQkFDSzogMTEsXG4gICAgICBQSU5HUkVROiAxMixcbiAgICAgIFBJTkdSRVNQOiAxMyxcbiAgICAgIERJU0NPTk5FQ1Q6IDE0XG4gICAgfTtcblxuICAgIC8vIENvbGxlY3Rpb24gb2YgdXRpbGl0eSBtZXRob2RzIHVzZWQgdG8gc2ltcGxpZnkgbW9kdWxlIGNvZGVcbiAgICAvLyBhbmQgcHJvbW90ZSB0aGUgRFJZIHBhdHRlcm4uXG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSBhbiBvYmplY3QncyBwYXJhbWV0ZXIgbmFtZXMgdG8gZW5zdXJlIHRoZXlcbiAgICAgKiBtYXRjaCBhIGxpc3Qgb2YgZXhwZWN0ZWQgdmFyaWFibGVzIG5hbWUgZm9yIHRoaXMgb3B0aW9uXG4gICAgICogdHlwZS4gVXNlZCB0byBlbnN1cmUgb3B0aW9uIG9iamVjdCBwYXNzZWQgaW50byB0aGUgQVBJIGRvbid0XG4gICAgICogY29udGFpbiBlcnJvbmVvdXMgcGFyYW1ldGVycy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gVXNlciBvcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBrZXlzIC0gdmFsaWQga2V5cyBhbmQgdHlwZXMgdGhhdCBtYXkgZXhpc3QgaW4gb2JqLlxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJbnZhbGlkIG9wdGlvbiBwYXJhbWV0ZXIgZm91bmQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbihvYmosIGtleXMpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaWYgKGtleXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmpba2V5XSAhPT0ga2V5c1trZXldKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfVFlQRSwgW3R5cGVvZiBvYmpba2V5XSwga2V5XSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGVycm9yU3RyID1cbiAgICAgICAgICAgICAgXCJVbmtub3duIHByb3BlcnR5LCBcIiArIGtleSArIFwiLiBWYWxpZCBwcm9wZXJ0aWVzIGFyZTpcIjtcbiAgICAgICAgICAgIGZvciAodmFyIHZhbGlkS2V5IGluIGtleXMpXG4gICAgICAgICAgICAgIGlmIChrZXlzLmhhc093blByb3BlcnR5KHZhbGlkS2V5KSlcbiAgICAgICAgICAgICAgICBlcnJvclN0ciA9IGVycm9yU3RyICsgXCIgXCIgKyB2YWxpZEtleTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIG5ldyBmdW5jdGlvbiB3aGljaCBydW5zIHRoZSB1c2VyIGZ1bmN0aW9uIGJvdW5kXG4gICAgICogdG8gYSBmaXhlZCBzY29wZS5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBVc2VyIGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtvYmplY3R9IEZ1bmN0aW9uIHNjb3BlXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259IFVzZXIgZnVuY3Rpb24gYm91bmQgdG8gYW5vdGhlciBzY29wZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdmFyIHNjb3BlID0gZnVuY3Rpb24oZiwgc2NvcGUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGYuYXBwbHkoc2NvcGUsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVbmlxdWUgbWVzc2FnZSB0eXBlIGlkZW50aWZpZXJzLCB3aXRoIGFzc29jaWF0ZWRcbiAgICAgKiBhc3NvY2lhdGVkIGludGVnZXIgdmFsdWVzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdmFyIEVSUk9SID0ge1xuICAgICAgT0s6IHsgY29kZTogMCwgdGV4dDogXCJBTVFKU0MwMDAwSSBPSy5cIiB9LFxuICAgICAgQ09OTkVDVF9USU1FT1VUOiB7IGNvZGU6IDEsIHRleHQ6IFwiQU1RSlNDMDAwMUUgQ29ubmVjdCB0aW1lZCBvdXQuXCIgfSxcbiAgICAgIFNVQlNDUklCRV9USU1FT1VUOiB7IGNvZGU6IDIsIHRleHQ6IFwiQU1RSlMwMDAyRSBTdWJzY3JpYmUgdGltZWQgb3V0LlwiIH0sXG4gICAgICBVTlNVQlNDUklCRV9USU1FT1VUOiB7XG4gICAgICAgIGNvZGU6IDMsXG4gICAgICAgIHRleHQ6IFwiQU1RSlMwMDAzRSBVbnN1YnNjcmliZSB0aW1lZCBvdXQuXCJcbiAgICAgIH0sXG4gICAgICBQSU5HX1RJTUVPVVQ6IHsgY29kZTogNCwgdGV4dDogXCJBTVFKUzAwMDRFIFBpbmcgdGltZWQgb3V0LlwiIH0sXG4gICAgICBJTlRFUk5BTF9FUlJPUjoge1xuICAgICAgICBjb2RlOiA1LFxuICAgICAgICB0ZXh0OiBcIkFNUUpTMDAwNUUgSW50ZXJuYWwgZXJyb3IuIEVycm9yIE1lc3NhZ2U6IHswfSwgU3RhY2sgdHJhY2U6IHsxfVwiXG4gICAgICB9LFxuICAgICAgQ09OTkFDS19SRVRVUk5DT0RFOiB7XG4gICAgICAgIGNvZGU6IDYsXG4gICAgICAgIHRleHQ6IFwiQU1RSlMwMDA2RSBCYWQgQ29ubmFjayByZXR1cm4gY29kZTp7MH0gezF9LlwiXG4gICAgICB9LFxuICAgICAgU09DS0VUX0VSUk9SOiB7IGNvZGU6IDcsIHRleHQ6IFwiQU1RSlMwMDA3RSBTb2NrZXQgZXJyb3I6ezB9LlwiIH0sXG4gICAgICBTT0NLRVRfQ0xPU0U6IHsgY29kZTogOCwgdGV4dDogXCJBTVFKUzAwMDhJIFNvY2tldCBjbG9zZWQuXCIgfSxcbiAgICAgIE1BTEZPUk1FRF9VVEY6IHtcbiAgICAgICAgY29kZTogOSxcbiAgICAgICAgdGV4dDogXCJBTVFKUzAwMDlFIE1hbGZvcm1lZCBVVEYgZGF0YTp7MH0gezF9IHsyfS5cIlxuICAgICAgfSxcbiAgICAgIFVOU1VQUE9SVEVEOiB7XG4gICAgICAgIGNvZGU6IDEwLFxuICAgICAgICB0ZXh0OiBcIkFNUUpTMDAxMEUgezB9IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyLlwiXG4gICAgICB9LFxuICAgICAgSU5WQUxJRF9TVEFURTogeyBjb2RlOiAxMSwgdGV4dDogXCJBTVFKUzAwMTFFIEludmFsaWQgc3RhdGUgezB9LlwiIH0sXG4gICAgICBJTlZBTElEX1RZUEU6IHsgY29kZTogMTIsIHRleHQ6IFwiQU1RSlMwMDEyRSBJbnZhbGlkIHR5cGUgezB9IGZvciB7MX0uXCIgfSxcbiAgICAgIElOVkFMSURfQVJHVU1FTlQ6IHtcbiAgICAgICAgY29kZTogMTMsXG4gICAgICAgIHRleHQ6IFwiQU1RSlMwMDEzRSBJbnZhbGlkIGFyZ3VtZW50IHswfSBmb3IgezF9LlwiXG4gICAgICB9LFxuICAgICAgVU5TVVBQT1JURURfT1BFUkFUSU9OOiB7XG4gICAgICAgIGNvZGU6IDE0LFxuICAgICAgICB0ZXh0OiBcIkFNUUpTMDAxNEUgVW5zdXBwb3J0ZWQgb3BlcmF0aW9uLlwiXG4gICAgICB9LFxuICAgICAgSU5WQUxJRF9TVE9SRURfREFUQToge1xuICAgICAgICBjb2RlOiAxNSxcbiAgICAgICAgdGV4dDogXCJBTVFKUzAwMTVFIEludmFsaWQgZGF0YSBpbiBsb2NhbCBzdG9yYWdlIGtleT17MH0gdmFsdWU9ezF9LlwiXG4gICAgICB9LFxuICAgICAgSU5WQUxJRF9NUVRUX01FU1NBR0VfVFlQRToge1xuICAgICAgICBjb2RlOiAxNixcbiAgICAgICAgdGV4dDogXCJBTVFKUzAwMTZFIEludmFsaWQgTVFUVCBtZXNzYWdlIHR5cGUgezB9LlwiXG4gICAgICB9LFxuICAgICAgTUFMRk9STUVEX1VOSUNPREU6IHtcbiAgICAgICAgY29kZTogMTcsXG4gICAgICAgIHRleHQ6IFwiQU1RSlMwMDE3RSBNYWxmb3JtZWQgVW5pY29kZSBzdHJpbmc6ezB9IHsxfS5cIlxuICAgICAgfSxcbiAgICAgIEJVRkZFUl9GVUxMOiB7XG4gICAgICAgIGNvZGU6IDE4LFxuICAgICAgICB0ZXh0OiBcIkFNUUpTMDAxOEUgTWVzc2FnZSBidWZmZXIgaXMgZnVsbCwgbWF4aW11bSBidWZmZXIgc2l6ZTogezB9LlwiXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKiBDT05OQUNLIFJDIE1lYW5pbmcuICovXG4gICAgdmFyIENPTk5BQ0tfUkMgPSB7XG4gICAgICAwOiBcIkNvbm5lY3Rpb24gQWNjZXB0ZWRcIixcbiAgICAgIDE6IFwiQ29ubmVjdGlvbiBSZWZ1c2VkOiB1bmFjY2VwdGFibGUgcHJvdG9jb2wgdmVyc2lvblwiLFxuICAgICAgMjogXCJDb25uZWN0aW9uIFJlZnVzZWQ6IGlkZW50aWZpZXIgcmVqZWN0ZWRcIixcbiAgICAgIDM6IFwiQ29ubmVjdGlvbiBSZWZ1c2VkOiBzZXJ2ZXIgdW5hdmFpbGFibGVcIixcbiAgICAgIDQ6IFwiQ29ubmVjdGlvbiBSZWZ1c2VkOiBiYWQgdXNlciBuYW1lIG9yIHBhc3N3b3JkXCIsXG4gICAgICA1OiBcIkNvbm5lY3Rpb24gUmVmdXNlZDogbm90IGF1dGhvcml6ZWRcIlxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGb3JtYXQgYW4gZXJyb3IgbWVzc2FnZSB0ZXh0LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtlcnJvcn0gRVJST1IgdmFsdWUgYWJvdmUuXG4gICAgICogQHBhcmFtIHtzdWJzdGl0dXRpb25zfSBbYXJyYXldIHN1YnN0aXR1dGVkIGludG8gdGhlIHRleHQuXG4gICAgICogQHJldHVybiB0aGUgdGV4dCB3aXRoIHRoZSBzdWJzdGl0dXRpb25zIG1hZGUuXG4gICAgICovXG4gICAgdmFyIGZvcm1hdCA9IGZ1bmN0aW9uKGVycm9yLCBzdWJzdGl0dXRpb25zKSB7XG4gICAgICB2YXIgdGV4dCA9IGVycm9yLnRleHQ7XG4gICAgICBpZiAoc3Vic3RpdHV0aW9ucykge1xuICAgICAgICB2YXIgZmllbGQsIHN0YXJ0O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnN0aXR1dGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBmaWVsZCA9IFwie1wiICsgaSArIFwifVwiO1xuICAgICAgICAgIHN0YXJ0ID0gdGV4dC5pbmRleE9mKGZpZWxkKTtcbiAgICAgICAgICBpZiAoc3RhcnQgPiAwKSB7XG4gICAgICAgICAgICB2YXIgcGFydDEgPSB0ZXh0LnN1YnN0cmluZygwLCBzdGFydCk7XG4gICAgICAgICAgICB2YXIgcGFydDIgPSB0ZXh0LnN1YnN0cmluZyhzdGFydCArIGZpZWxkLmxlbmd0aCk7XG4gICAgICAgICAgICB0ZXh0ID0gcGFydDEgKyBzdWJzdGl0dXRpb25zW2ldICsgcGFydDI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9O1xuXG4gICAgLy9NUVRUIHByb3RvY29sIGFuZCB2ZXJzaW9uICAgICAgICAgIDYgICAgTSAgICBRICAgIEkgICAgcyAgICBkICAgIHAgICAgM1xuICAgIHZhciBNcXR0UHJvdG9JZGVudGlmaWVydjMgPSBbXG4gICAgICAweDAwLFxuICAgICAgMHgwNixcbiAgICAgIDB4NGQsXG4gICAgICAweDUxLFxuICAgICAgMHg0OSxcbiAgICAgIDB4NzMsXG4gICAgICAweDY0LFxuICAgICAgMHg3MCxcbiAgICAgIDB4MDNcbiAgICBdO1xuICAgIC8vTVFUVCBwcm90by92ZXJzaW9uIGZvciAzMTEgICAgICAgICA0ICAgIE0gICAgUSAgICBUICAgIFQgICAgNFxuICAgIHZhciBNcXR0UHJvdG9JZGVudGlmaWVydjQgPSBbMHgwMCwgMHgwNCwgMHg0ZCwgMHg1MSwgMHg1NCwgMHg1NCwgMHgwNF07XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYW4gTVFUVCB3aXJlIHByb3RvY29sIG1lc3NhZ2UuXG4gICAgICogQHBhcmFtIHR5cGUgTVFUVCBwYWNrZXQgdHlwZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBvcHRpb25hbCB3aXJlIG1lc3NhZ2UgYXR0cmlidXRlcy5cbiAgICAgKlxuICAgICAqIE9wdGlvbmFsIHByb3BlcnRpZXNcbiAgICAgKlxuICAgICAqIG1lc3NhZ2VJZGVudGlmaWVyOiBtZXNzYWdlIElEIGluIHRoZSByYW5nZSBbMC4uNjU1MzVdXG4gICAgICogcGF5bG9hZE1lc3NhZ2U6XHRBcHBsaWNhdGlvbiBNZXNzYWdlIC0gUFVCTElTSCBvbmx5XG4gICAgICogY29ubmVjdFN0cmluZ3M6XHRhcnJheSBvZiAwIG9yIG1vcmUgU3RyaW5ncyB0byBiZSBwdXQgaW50byB0aGUgQ09OTkVDVCBwYXlsb2FkXG4gICAgICogdG9waWNzOlx0XHRcdGFycmF5IG9mIHN0cmluZ3MgKFNVQlNDUklCRSwgVU5TVUJTQ1JJQkUpXG4gICAgICogcmVxdWVzdFFvUzpcdFx0YXJyYXkgb2YgUW9TIHZhbHVlcyBbMC4uMl1cbiAgICAgKlxuICAgICAqIFwiRmxhZ1wiIHByb3BlcnRpZXNcbiAgICAgKiBjbGVhblNlc3Npb246XHR0cnVlIGlmIHByZXNlbnQgLyBmYWxzZSBpZiBhYnNlbnQgKENPTk5FQ1QpXG4gICAgICogd2lsbE1lc3NhZ2U6ICBcdHRydWUgaWYgcHJlc2VudCAvIGZhbHNlIGlmIGFic2VudCAoQ09OTkVDVClcbiAgICAgKiBpc1JldGFpbmVkOlx0XHR0cnVlIGlmIHByZXNlbnQgLyBmYWxzZSBpZiBhYnNlbnQgKENPTk5FQ1QpXG4gICAgICogdXNlck5hbWU6XHRcdHRydWUgaWYgcHJlc2VudCAvIGZhbHNlIGlmIGFic2VudCAoQ09OTkVDVClcbiAgICAgKiBwYXNzd29yZDpcdFx0dHJ1ZSBpZiBwcmVzZW50IC8gZmFsc2UgaWYgYWJzZW50IChDT05ORUNUKVxuICAgICAqIGtlZXBBbGl2ZUludGVydmFsOlx0aW50ZWdlciBbMC4uNjU1MzVdICAoQ09OTkVDVClcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHZhciBXaXJlTWVzc2FnZSA9IGZ1bmN0aW9uKHR5cGUsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICB0aGlzW25hbWVdID0gb3B0aW9uc1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBXaXJlTWVzc2FnZS5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBDb21wdXRlIHRoZSBmaXJzdCBieXRlIG9mIHRoZSBmaXhlZCBoZWFkZXJcbiAgICAgIHZhciBmaXJzdCA9ICh0aGlzLnR5cGUgJiAweDBmKSA8PCA0O1xuXG4gICAgICAvKlxuICAgICAgICogTm93IGNhbGN1bGF0ZSB0aGUgbGVuZ3RoIG9mIHRoZSB2YXJpYWJsZSBoZWFkZXIgKyBwYXlsb2FkIGJ5IGFkZGluZyB1cCB0aGUgbGVuZ3Roc1xuICAgICAgICogb2YgYWxsIHRoZSBjb21wb25lbnQgcGFydHNcbiAgICAgICAqL1xuXG4gICAgICB2YXIgcmVtTGVuZ3RoID0gMDtcbiAgICAgIHZhciB0b3BpY1N0ckxlbmd0aCA9IFtdO1xuICAgICAgdmFyIGRlc3RpbmF0aW9uTmFtZUxlbmd0aCA9IDA7XG4gICAgICB2YXIgd2lsbE1lc3NhZ2VQYXlsb2FkQnl0ZXM7XG5cbiAgICAgIC8vIGlmIHRoZSBtZXNzYWdlIGNvbnRhaW5zIGEgbWVzc2FnZUlkZW50aWZpZXIgdGhlbiB3ZSBuZWVkIHR3byBieXRlcyBmb3IgdGhhdFxuICAgICAgaWYgKHRoaXMubWVzc2FnZUlkZW50aWZpZXIgIT09IHVuZGVmaW5lZCkgcmVtTGVuZ3RoICs9IDI7XG5cbiAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgIC8vIElmIHRoaXMgYSBDb25uZWN0IHRoZW4gd2UgbmVlZCB0byBpbmNsdWRlIDEyIGJ5dGVzIGZvciBpdHMgaGVhZGVyXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLkNPTk5FQ1Q6XG4gICAgICAgICAgc3dpdGNoICh0aGlzLm1xdHRWZXJzaW9uKSB7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIHJlbUxlbmd0aCArPSBNcXR0UHJvdG9JZGVudGlmaWVydjMubGVuZ3RoICsgMztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgIHJlbUxlbmd0aCArPSBNcXR0UHJvdG9JZGVudGlmaWVydjQubGVuZ3RoICsgMztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVtTGVuZ3RoICs9IFVURjhMZW5ndGgodGhpcy5jbGllbnRJZCkgKyAyO1xuICAgICAgICAgIGlmICh0aGlzLndpbGxNZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlbUxlbmd0aCArPSBVVEY4TGVuZ3RoKHRoaXMud2lsbE1lc3NhZ2UuZGVzdGluYXRpb25OYW1lKSArIDI7XG4gICAgICAgICAgICAvLyBXaWxsIG1lc3NhZ2UgaXMgYWx3YXlzIGEgc3RyaW5nLCBzZW50IGFzIFVURi04IGNoYXJhY3RlcnMgd2l0aCBhIHByZWNlZGluZyBsZW5ndGguXG4gICAgICAgICAgICB3aWxsTWVzc2FnZVBheWxvYWRCeXRlcyA9IHRoaXMud2lsbE1lc3NhZ2UucGF5bG9hZEJ5dGVzO1xuICAgICAgICAgICAgaWYgKCEod2lsbE1lc3NhZ2VQYXlsb2FkQnl0ZXMgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgICAgICAgd2lsbE1lc3NhZ2VQYXlsb2FkQnl0ZXMgPSBuZXcgVWludDhBcnJheShwYXlsb2FkQnl0ZXMpO1xuICAgICAgICAgICAgcmVtTGVuZ3RoICs9IHdpbGxNZXNzYWdlUGF5bG9hZEJ5dGVzLmJ5dGVMZW5ndGggKyAyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy51c2VyTmFtZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVtTGVuZ3RoICs9IFVURjhMZW5ndGgodGhpcy51c2VyTmFtZSkgKyAyO1xuICAgICAgICAgIGlmICh0aGlzLnBhc3N3b3JkICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZW1MZW5ndGggKz0gVVRGOExlbmd0aCh0aGlzLnBhc3N3b3JkKSArIDI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgLy8gU3Vic2NyaWJlLCBVbnN1YnNjcmliZSBjYW4gYm90aCBjb250YWluIHRvcGljIHN0cmluZ3NcbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuU1VCU0NSSUJFOlxuICAgICAgICAgIGZpcnN0IHw9IDB4MDI7IC8vIFFvcyA9IDE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRvcGljcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9waWNTdHJMZW5ndGhbaV0gPSBVVEY4TGVuZ3RoKHRoaXMudG9waWNzW2ldKTtcbiAgICAgICAgICAgIHJlbUxlbmd0aCArPSB0b3BpY1N0ckxlbmd0aFtpXSArIDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlbUxlbmd0aCArPSB0aGlzLnJlcXVlc3RlZFFvcy5sZW5ndGg7IC8vIDEgYnl0ZSBmb3IgZWFjaCB0b3BpYydzIFFvc1xuICAgICAgICAgIC8vIFFvUyBvbiBTdWJzY3JpYmUgb25seVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlVOU1VCU0NSSUJFOlxuICAgICAgICAgIGZpcnN0IHw9IDB4MDI7IC8vIFFvcyA9IDE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRvcGljcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9waWNTdHJMZW5ndGhbaV0gPSBVVEY4TGVuZ3RoKHRoaXMudG9waWNzW2ldKTtcbiAgICAgICAgICAgIHJlbUxlbmd0aCArPSB0b3BpY1N0ckxlbmd0aFtpXSArIDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQlJFTDpcbiAgICAgICAgICBmaXJzdCB8PSAweDAyOyAvLyBRb3MgPSAxO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQkxJU0g6XG4gICAgICAgICAgaWYgKHRoaXMucGF5bG9hZE1lc3NhZ2UuZHVwbGljYXRlKSBmaXJzdCB8PSAweDA4O1xuICAgICAgICAgIGZpcnN0ID0gZmlyc3QgfD0gdGhpcy5wYXlsb2FkTWVzc2FnZS5xb3MgPDwgMTtcbiAgICAgICAgICBpZiAodGhpcy5wYXlsb2FkTWVzc2FnZS5yZXRhaW5lZCkgZmlyc3QgfD0gMHgwMTtcbiAgICAgICAgICBkZXN0aW5hdGlvbk5hbWVMZW5ndGggPSBVVEY4TGVuZ3RoKFxuICAgICAgICAgICAgdGhpcy5wYXlsb2FkTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWVcbiAgICAgICAgICApO1xuICAgICAgICAgIHJlbUxlbmd0aCArPSBkZXN0aW5hdGlvbk5hbWVMZW5ndGggKyAyO1xuICAgICAgICAgIHZhciBwYXlsb2FkQnl0ZXMgPSB0aGlzLnBheWxvYWRNZXNzYWdlLnBheWxvYWRCeXRlcztcbiAgICAgICAgICByZW1MZW5ndGggKz0gcGF5bG9hZEJ5dGVzLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKHBheWxvYWRCeXRlcyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKVxuICAgICAgICAgICAgcGF5bG9hZEJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkocGF5bG9hZEJ5dGVzKTtcbiAgICAgICAgICBlbHNlIGlmICghKHBheWxvYWRCeXRlcyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKVxuICAgICAgICAgICAgcGF5bG9hZEJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkocGF5bG9hZEJ5dGVzLmJ1ZmZlcik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuRElTQ09OTkVDVDpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBOb3cgd2UgY2FuIGFsbG9jYXRlIGEgYnVmZmVyIGZvciB0aGUgbWVzc2FnZVxuXG4gICAgICB2YXIgbWJpID0gZW5jb2RlTUJJKHJlbUxlbmd0aCk7IC8vIENvbnZlcnQgdGhlIGxlbmd0aCB0byBNUVRUIE1CSSBmb3JtYXRcbiAgICAgIHZhciBwb3MgPSBtYmkubGVuZ3RoICsgMTsgLy8gT2Zmc2V0IG9mIHN0YXJ0IG9mIHZhcmlhYmxlIGhlYWRlclxuICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihyZW1MZW5ndGggKyBwb3MpO1xuICAgICAgdmFyIGJ5dGVTdHJlYW0gPSBuZXcgVWludDhBcnJheShidWZmZXIpOyAvLyB2aWV3IGl0IGFzIGEgc2VxdWVuY2Ugb2YgYnl0ZXNcblxuICAgICAgLy9Xcml0ZSB0aGUgZml4ZWQgaGVhZGVyIGludG8gdGhlIGJ1ZmZlclxuICAgICAgYnl0ZVN0cmVhbVswXSA9IGZpcnN0O1xuICAgICAgYnl0ZVN0cmVhbS5zZXQobWJpLCAxKTtcblxuICAgICAgLy8gSWYgdGhpcyBpcyBhIFBVQkxJU0ggdGhlbiB0aGUgdmFyaWFibGUgaGVhZGVyIHN0YXJ0cyB3aXRoIGEgdG9waWNcbiAgICAgIGlmICh0aGlzLnR5cGUgPT0gTUVTU0FHRV9UWVBFLlBVQkxJU0gpXG4gICAgICAgIHBvcyA9IHdyaXRlU3RyaW5nKFxuICAgICAgICAgIHRoaXMucGF5bG9hZE1lc3NhZ2UuZGVzdGluYXRpb25OYW1lLFxuICAgICAgICAgIGRlc3RpbmF0aW9uTmFtZUxlbmd0aCxcbiAgICAgICAgICBieXRlU3RyZWFtLFxuICAgICAgICAgIHBvc1xuICAgICAgICApO1xuICAgICAgLy8gSWYgdGhpcyBpcyBhIENPTk5FQ1QgdGhlbiB0aGUgdmFyaWFibGUgaGVhZGVyIGNvbnRhaW5zIHRoZSBwcm90b2NvbCBuYW1lL3ZlcnNpb24sIGZsYWdzIGFuZCBrZWVwYWxpdmUgdGltZVxuICAgICAgZWxzZSBpZiAodGhpcy50eXBlID09IE1FU1NBR0VfVFlQRS5DT05ORUNUKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5tcXR0VmVyc2lvbikge1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGJ5dGVTdHJlYW0uc2V0KE1xdHRQcm90b0lkZW50aWZpZXJ2MywgcG9zKTtcbiAgICAgICAgICAgIHBvcyArPSBNcXR0UHJvdG9JZGVudGlmaWVydjMubGVuZ3RoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgYnl0ZVN0cmVhbS5zZXQoTXF0dFByb3RvSWRlbnRpZmllcnY0LCBwb3MpO1xuICAgICAgICAgICAgcG9zICs9IE1xdHRQcm90b0lkZW50aWZpZXJ2NC5sZW5ndGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29ubmVjdEZsYWdzID0gMDtcbiAgICAgICAgaWYgKHRoaXMuY2xlYW5TZXNzaW9uKSBjb25uZWN0RmxhZ3MgPSAweDAyO1xuICAgICAgICBpZiAodGhpcy53aWxsTWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29ubmVjdEZsYWdzIHw9IDB4MDQ7XG4gICAgICAgICAgY29ubmVjdEZsYWdzIHw9IHRoaXMud2lsbE1lc3NhZ2UucW9zIDw8IDM7XG4gICAgICAgICAgaWYgKHRoaXMud2lsbE1lc3NhZ2UucmV0YWluZWQpIHtcbiAgICAgICAgICAgIGNvbm5lY3RGbGFncyB8PSAweDIwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy51c2VyTmFtZSAhPT0gdW5kZWZpbmVkKSBjb25uZWN0RmxhZ3MgfD0gMHg4MDtcbiAgICAgICAgaWYgKHRoaXMucGFzc3dvcmQgIT09IHVuZGVmaW5lZCkgY29ubmVjdEZsYWdzIHw9IDB4NDA7XG4gICAgICAgIGJ5dGVTdHJlYW1bcG9zKytdID0gY29ubmVjdEZsYWdzO1xuICAgICAgICBwb3MgPSB3cml0ZVVpbnQxNih0aGlzLmtlZXBBbGl2ZUludGVydmFsLCBieXRlU3RyZWFtLCBwb3MpO1xuICAgICAgfVxuXG4gICAgICAvLyBPdXRwdXQgdGhlIG1lc3NhZ2VJZGVudGlmaWVyIC0gaWYgdGhlcmUgaXMgb25lXG4gICAgICBpZiAodGhpcy5tZXNzYWdlSWRlbnRpZmllciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBwb3MgPSB3cml0ZVVpbnQxNih0aGlzLm1lc3NhZ2VJZGVudGlmaWVyLCBieXRlU3RyZWFtLCBwb3MpO1xuXG4gICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5DT05ORUNUOlxuICAgICAgICAgIHBvcyA9IHdyaXRlU3RyaW5nKFxuICAgICAgICAgICAgdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICAgIFVURjhMZW5ndGgodGhpcy5jbGllbnRJZCksXG4gICAgICAgICAgICBieXRlU3RyZWFtLFxuICAgICAgICAgICAgcG9zXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAodGhpcy53aWxsTWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwb3MgPSB3cml0ZVN0cmluZyhcbiAgICAgICAgICAgICAgdGhpcy53aWxsTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUsXG4gICAgICAgICAgICAgIFVURjhMZW5ndGgodGhpcy53aWxsTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUpLFxuICAgICAgICAgICAgICBieXRlU3RyZWFtLFxuICAgICAgICAgICAgICBwb3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBwb3MgPSB3cml0ZVVpbnQxNihcbiAgICAgICAgICAgICAgd2lsbE1lc3NhZ2VQYXlsb2FkQnl0ZXMuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgICAgYnl0ZVN0cmVhbSxcbiAgICAgICAgICAgICAgcG9zXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnl0ZVN0cmVhbS5zZXQod2lsbE1lc3NhZ2VQYXlsb2FkQnl0ZXMsIHBvcyk7XG4gICAgICAgICAgICBwb3MgKz0gd2lsbE1lc3NhZ2VQYXlsb2FkQnl0ZXMuYnl0ZUxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMudXNlck5hbWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHBvcyA9IHdyaXRlU3RyaW5nKFxuICAgICAgICAgICAgICB0aGlzLnVzZXJOYW1lLFxuICAgICAgICAgICAgICBVVEY4TGVuZ3RoKHRoaXMudXNlck5hbWUpLFxuICAgICAgICAgICAgICBieXRlU3RyZWFtLFxuICAgICAgICAgICAgICBwb3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKHRoaXMucGFzc3dvcmQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHBvcyA9IHdyaXRlU3RyaW5nKFxuICAgICAgICAgICAgICB0aGlzLnBhc3N3b3JkLFxuICAgICAgICAgICAgICBVVEY4TGVuZ3RoKHRoaXMucGFzc3dvcmQpLFxuICAgICAgICAgICAgICBieXRlU3RyZWFtLFxuICAgICAgICAgICAgICBwb3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCTElTSDpcbiAgICAgICAgICAvLyBQVUJMSVNIIGhhcyBhIHRleHQgb3IgYmluYXJ5IHBheWxvYWQsIGlmIHRleHQgZG8gbm90IGFkZCBhIDIgYnl0ZSBsZW5ndGggZmllbGQsIGp1c3QgdGhlIFVURiBjaGFyYWN0ZXJzLlxuICAgICAgICAgIGJ5dGVTdHJlYW0uc2V0KHBheWxvYWRCeXRlcywgcG9zKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIC8vICAgIFx0ICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQlJFQzpcbiAgICAgICAgLy8gICAgXHQgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCUkVMOlxuICAgICAgICAvLyAgICBcdCAgICBjYXNlIE1FU1NBR0VfVFlQRS5QVUJDT01QOlxuICAgICAgICAvLyAgICBcdCAgICBcdGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlNVQlNDUklCRTpcbiAgICAgICAgICAvLyBTVUJTQ1JJQkUgaGFzIGEgbGlzdCBvZiB0b3BpYyBzdHJpbmdzIGFuZCByZXF1ZXN0IFFvU1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50b3BpY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBvcyA9IHdyaXRlU3RyaW5nKFxuICAgICAgICAgICAgICB0aGlzLnRvcGljc1tpXSxcbiAgICAgICAgICAgICAgdG9waWNTdHJMZW5ndGhbaV0sXG4gICAgICAgICAgICAgIGJ5dGVTdHJlYW0sXG4gICAgICAgICAgICAgIHBvc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJ5dGVTdHJlYW1bcG9zKytdID0gdGhpcy5yZXF1ZXN0ZWRRb3NbaV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlVOU1VCU0NSSUJFOlxuICAgICAgICAgIC8vIFVOU1VCU0NSSUJFIGhhcyBhIGxpc3Qgb2YgdG9waWMgc3RyaW5nc1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50b3BpY3MubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBwb3MgPSB3cml0ZVN0cmluZyhcbiAgICAgICAgICAgICAgdGhpcy50b3BpY3NbaV0sXG4gICAgICAgICAgICAgIHRvcGljU3RyTGVuZ3RoW2ldLFxuICAgICAgICAgICAgICBieXRlU3RyZWFtLFxuICAgICAgICAgICAgICBwb3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gRG8gbm90aGluZy5cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZGVjb2RlTWVzc2FnZShpbnB1dCwgcG9zKSB7XG4gICAgICB2YXIgc3RhcnRpbmdQb3MgPSBwb3M7XG4gICAgICB2YXIgZmlyc3QgPSBpbnB1dFtwb3NdO1xuICAgICAgdmFyIHR5cGUgPSBmaXJzdCA+PiA0O1xuICAgICAgdmFyIG1lc3NhZ2VJbmZvID0gKGZpcnN0ICY9IDB4MGYpO1xuICAgICAgcG9zICs9IDE7XG5cbiAgICAgIC8vIERlY29kZSB0aGUgcmVtYWluaW5nIGxlbmd0aCAoTUJJIGZvcm1hdClcblxuICAgICAgdmFyIGRpZ2l0O1xuICAgICAgdmFyIHJlbUxlbmd0aCA9IDA7XG4gICAgICB2YXIgbXVsdGlwbGllciA9IDE7XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChwb3MgPT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIFtudWxsLCBzdGFydGluZ1Bvc107XG4gICAgICAgIH1cbiAgICAgICAgZGlnaXQgPSBpbnB1dFtwb3MrK107XG4gICAgICAgIHJlbUxlbmd0aCArPSAoZGlnaXQgJiAweDdmKSAqIG11bHRpcGxpZXI7XG4gICAgICAgIG11bHRpcGxpZXIgKj0gMTI4O1xuICAgICAgfSB3aGlsZSAoKGRpZ2l0ICYgMHg4MCkgIT09IDApO1xuXG4gICAgICB2YXIgZW5kUG9zID0gcG9zICsgcmVtTGVuZ3RoO1xuICAgICAgaWYgKGVuZFBvcyA+IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW251bGwsIHN0YXJ0aW5nUG9zXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHdpcmVNZXNzYWdlID0gbmV3IFdpcmVNZXNzYWdlKHR5cGUpO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLkNPTk5BQ0s6XG4gICAgICAgICAgdmFyIGNvbm5lY3RBY2tub3dsZWRnZUZsYWdzID0gaW5wdXRbcG9zKytdO1xuICAgICAgICAgIGlmIChjb25uZWN0QWNrbm93bGVkZ2VGbGFncyAmIDB4MDEpIHdpcmVNZXNzYWdlLnNlc3Npb25QcmVzZW50ID0gdHJ1ZTtcbiAgICAgICAgICB3aXJlTWVzc2FnZS5yZXR1cm5Db2RlID0gaW5wdXRbcG9zKytdO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQkxJU0g6XG4gICAgICAgICAgdmFyIHFvcyA9IChtZXNzYWdlSW5mbyA+PiAxKSAmIDB4MDM7XG5cbiAgICAgICAgICB2YXIgbGVuID0gcmVhZFVpbnQxNihpbnB1dCwgcG9zKTtcbiAgICAgICAgICBwb3MgKz0gMjtcbiAgICAgICAgICB2YXIgdG9waWNOYW1lID0gcGFyc2VVVEY4KGlucHV0LCBwb3MsIGxlbik7XG4gICAgICAgICAgcG9zICs9IGxlbjtcbiAgICAgICAgICAvLyBJZiBRb1MgMSBvciAyIHRoZXJlIHdpbGwgYmUgYSBtZXNzYWdlSWRlbnRpZmllclxuICAgICAgICAgIGlmIChxb3MgPiAwKSB7XG4gICAgICAgICAgICB3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllciA9IHJlYWRVaW50MTYoaW5wdXQsIHBvcyk7XG4gICAgICAgICAgICBwb3MgKz0gMjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbWVzc2FnZSA9IG5ldyBNZXNzYWdlKGlucHV0LnN1YmFycmF5KHBvcywgZW5kUG9zKSk7XG4gICAgICAgICAgaWYgKChtZXNzYWdlSW5mbyAmIDB4MDEpID09IDB4MDEpIG1lc3NhZ2UucmV0YWluZWQgPSB0cnVlO1xuICAgICAgICAgIGlmICgobWVzc2FnZUluZm8gJiAweDA4KSA9PSAweDA4KSBtZXNzYWdlLmR1cGxpY2F0ZSA9IHRydWU7XG4gICAgICAgICAgbWVzc2FnZS5xb3MgPSBxb3M7XG4gICAgICAgICAgbWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUgPSB0b3BpY05hbWU7XG4gICAgICAgICAgd2lyZU1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQkFDSzpcbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCUkVDOlxuICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5QVUJSRUw6XG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQkNPTVA6XG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlVOU1VCQUNLOlxuICAgICAgICAgIHdpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyID0gcmVhZFVpbnQxNihpbnB1dCwgcG9zKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5TVUJBQ0s6XG4gICAgICAgICAgd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXIgPSByZWFkVWludDE2KGlucHV0LCBwb3MpO1xuICAgICAgICAgIHBvcyArPSAyO1xuICAgICAgICAgIHdpcmVNZXNzYWdlLnJldHVybkNvZGUgPSBpbnB1dC5zdWJhcnJheShwb3MsIGVuZFBvcyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFt3aXJlTWVzc2FnZSwgZW5kUG9zXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3cml0ZVVpbnQxNihpbnB1dCwgYnVmZmVyLCBvZmZzZXQpIHtcbiAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBpbnB1dCA+PiA4OyAvL01TQlxuICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGlucHV0ICUgMjU2OyAvL0xTQlxuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3cml0ZVN0cmluZyhpbnB1dCwgdXRmOExlbmd0aCwgYnVmZmVyLCBvZmZzZXQpIHtcbiAgICAgIG9mZnNldCA9IHdyaXRlVWludDE2KHV0ZjhMZW5ndGgsIGJ1ZmZlciwgb2Zmc2V0KTtcbiAgICAgIHN0cmluZ1RvVVRGOChpbnB1dCwgYnVmZmVyLCBvZmZzZXQpO1xuICAgICAgcmV0dXJuIG9mZnNldCArIHV0ZjhMZW5ndGg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVhZFVpbnQxNihidWZmZXIsIG9mZnNldCkge1xuICAgICAgcmV0dXJuIDI1NiAqIGJ1ZmZlcltvZmZzZXRdICsgYnVmZmVyW29mZnNldCArIDFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgYW4gTVFUVCBNdWx0aS1CeXRlIEludGVnZXJcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuY29kZU1CSShudW1iZXIpIHtcbiAgICAgIHZhciBvdXRwdXQgPSBuZXcgQXJyYXkoMSk7XG4gICAgICB2YXIgbnVtQnl0ZXMgPSAwO1xuXG4gICAgICBkbyB7XG4gICAgICAgIHZhciBkaWdpdCA9IG51bWJlciAlIDEyODtcbiAgICAgICAgbnVtYmVyID0gbnVtYmVyID4+IDc7XG4gICAgICAgIGlmIChudW1iZXIgPiAwKSB7XG4gICAgICAgICAgZGlnaXQgfD0gMHg4MDtcbiAgICAgICAgfVxuICAgICAgICBvdXRwdXRbbnVtQnl0ZXMrK10gPSBkaWdpdDtcbiAgICAgIH0gd2hpbGUgKG51bWJlciA+IDAgJiYgbnVtQnl0ZXMgPCA0KTtcblxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBhIFN0cmluZyBhbmQgY2FsY3VsYXRlcyBpdHMgbGVuZ3RoIGluIGJ5dGVzIHdoZW4gZW5jb2RlZCBpbiBVVEY4LlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gVVRGOExlbmd0aChpbnB1dCkge1xuICAgICAgdmFyIG91dHB1dCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGFyQ29kZSA9IGlucHV0LmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjaGFyQ29kZSA+IDB4N2ZmKSB7XG4gICAgICAgICAgLy8gU3Vycm9nYXRlIHBhaXIgbWVhbnMgaXRzIGEgNCBieXRlIGNoYXJhY3RlclxuICAgICAgICAgIGlmICgweGQ4MDAgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gMHhkYmZmKSB7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICBvdXRwdXQrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0cHV0ICs9IDM7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhckNvZGUgPiAweDdmKSBvdXRwdXQgKz0gMjtcbiAgICAgICAgZWxzZSBvdXRwdXQrKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGFrZXMgYSBTdHJpbmcgYW5kIHdyaXRlcyBpdCBpbnRvIGFuIGFycmF5IGFzIFVURjggZW5jb2RlZCBieXRlcy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0cmluZ1RvVVRGOChpbnB1dCwgb3V0cHV0LCBzdGFydCkge1xuICAgICAgdmFyIHBvcyA9IHN0YXJ0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hhckNvZGUgPSBpbnB1dC5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICAgIC8vIENoZWNrIGZvciBhIHN1cnJvZ2F0ZSBwYWlyLlxuICAgICAgICBpZiAoMHhkODAwIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IDB4ZGJmZikge1xuICAgICAgICAgIHZhciBsb3dDaGFyQ29kZSA9IGlucHV0LmNoYXJDb2RlQXQoKytpKTtcbiAgICAgICAgICBpZiAoaXNOYU4obG93Q2hhckNvZGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5NQUxGT1JNRURfVU5JQ09ERSwgW2NoYXJDb2RlLCBsb3dDaGFyQ29kZV0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaGFyQ29kZSA9XG4gICAgICAgICAgICAoKGNoYXJDb2RlIC0gMHhkODAwKSA8PCAxMCkgKyAobG93Q2hhckNvZGUgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFyQ29kZSA8PSAweDdmKSB7XG4gICAgICAgICAgb3V0cHV0W3BvcysrXSA9IGNoYXJDb2RlO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXJDb2RlIDw9IDB4N2ZmKSB7XG4gICAgICAgICAgb3V0cHV0W3BvcysrXSA9ICgoY2hhckNvZGUgPj4gNikgJiAweDFmKSB8IDB4YzA7XG4gICAgICAgICAgb3V0cHV0W3BvcysrXSA9IChjaGFyQ29kZSAmIDB4M2YpIHwgMHg4MDtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyQ29kZSA8PSAweGZmZmYpIHtcbiAgICAgICAgICBvdXRwdXRbcG9zKytdID0gKChjaGFyQ29kZSA+PiAxMikgJiAweDBmKSB8IDB4ZTA7XG4gICAgICAgICAgb3V0cHV0W3BvcysrXSA9ICgoY2hhckNvZGUgPj4gNikgJiAweDNmKSB8IDB4ODA7XG4gICAgICAgICAgb3V0cHV0W3BvcysrXSA9IChjaGFyQ29kZSAmIDB4M2YpIHwgMHg4MDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXRwdXRbcG9zKytdID0gKChjaGFyQ29kZSA+PiAxOCkgJiAweDA3KSB8IDB4ZjA7XG4gICAgICAgICAgb3V0cHV0W3BvcysrXSA9ICgoY2hhckNvZGUgPj4gMTIpICYgMHgzZikgfCAweDgwO1xuICAgICAgICAgIG91dHB1dFtwb3MrK10gPSAoKGNoYXJDb2RlID4+IDYpICYgMHgzZikgfCAweDgwO1xuICAgICAgICAgIG91dHB1dFtwb3MrK10gPSAoY2hhckNvZGUgJiAweDNmKSB8IDB4ODA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VVVEY4KGlucHV0LCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgdmFyIG91dHB1dCA9IFwiXCI7XG4gICAgICB2YXIgdXRmMTY7XG4gICAgICB2YXIgcG9zID0gb2Zmc2V0O1xuXG4gICAgICB3aGlsZSAocG9zIDwgb2Zmc2V0ICsgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBieXRlMSA9IGlucHV0W3BvcysrXTtcbiAgICAgICAgaWYgKGJ5dGUxIDwgMTI4KSB1dGYxNiA9IGJ5dGUxO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgYnl0ZTIgPSBpbnB1dFtwb3MrK10gLSAxMjg7XG4gICAgICAgICAgaWYgKGJ5dGUyIDwgMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLk1BTEZPUk1FRF9VVEYsIFtcbiAgICAgICAgICAgICAgICBieXRlMS50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgYnl0ZTIudG9TdHJpbmcoMTYpLFxuICAgICAgICAgICAgICAgIFwiXCJcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKGJ5dGUxIDwgMHhlMClcbiAgICAgICAgICAgIC8vIDIgYnl0ZSBjaGFyYWN0ZXJcbiAgICAgICAgICAgIHV0ZjE2ID0gNjQgKiAoYnl0ZTEgLSAweGMwKSArIGJ5dGUyO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGJ5dGUzID0gaW5wdXRbcG9zKytdIC0gMTI4O1xuICAgICAgICAgICAgaWYgKGJ5dGUzIDwgMClcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5NQUxGT1JNRURfVVRGLCBbXG4gICAgICAgICAgICAgICAgICBieXRlMS50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgICBieXRlMi50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgICBieXRlMy50b1N0cmluZygxNilcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGJ5dGUxIDwgMHhmMClcbiAgICAgICAgICAgICAgLy8gMyBieXRlIGNoYXJhY3RlclxuICAgICAgICAgICAgICB1dGYxNiA9IDQwOTYgKiAoYnl0ZTEgLSAweGUwKSArIDY0ICogYnl0ZTIgKyBieXRlMztcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgYnl0ZTQgPSBpbnB1dFtwb3MrK10gLSAxMjg7XG4gICAgICAgICAgICAgIGlmIChieXRlNCA8IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLk1BTEZPUk1FRF9VVEYsIFtcbiAgICAgICAgICAgICAgICAgICAgYnl0ZTEudG9TdHJpbmcoMTYpLFxuICAgICAgICAgICAgICAgICAgICBieXRlMi50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgICAgIGJ5dGUzLnRvU3RyaW5nKDE2KSxcbiAgICAgICAgICAgICAgICAgICAgYnl0ZTQudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChieXRlMSA8IDB4ZjgpXG4gICAgICAgICAgICAgICAgLy8gNCBieXRlIGNoYXJhY3RlclxuICAgICAgICAgICAgICAgIHV0ZjE2ID1cbiAgICAgICAgICAgICAgICAgIDI2MjE0NCAqIChieXRlMSAtIDB4ZjApICsgNDA5NiAqIGJ5dGUyICsgNjQgKiBieXRlMyArIGJ5dGU0O1xuICAgICAgICAgICAgICAvLyBsb25nZXIgZW5jb2RpbmdzIGFyZSBub3Qgc3VwcG9ydGVkXG4gICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuTUFMRk9STUVEX1VURiwgW1xuICAgICAgICAgICAgICAgICAgICBieXRlMS50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgICAgIGJ5dGUyLnRvU3RyaW5nKDE2KSxcbiAgICAgICAgICAgICAgICAgICAgYnl0ZTMudG9TdHJpbmcoMTYpLFxuICAgICAgICAgICAgICAgICAgICBieXRlNC50b1N0cmluZygxNilcbiAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRmMTYgPiAweGZmZmYpIHtcbiAgICAgICAgICAvLyA0IGJ5dGUgY2hhcmFjdGVyIC0gZXhwcmVzcyBhcyBhIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICAgICAgdXRmMTYgLT0gMHgxMDAwMDtcbiAgICAgICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGQ4MDAgKyAodXRmMTYgPj4gMTApKTsgLy8gbGVhZCBjaGFyYWN0ZXJcbiAgICAgICAgICB1dGYxNiA9IDB4ZGMwMCArICh1dGYxNiAmIDB4M2ZmKTsgLy8gdHJhaWwgY2hhcmFjdGVyXG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodXRmMTYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXQga2VlcGFsaXZlIHJlcXVlc3RzLCBtb25pdG9yIHJlc3BvbnNlcy5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgdmFyIFBpbmdlciA9IGZ1bmN0aW9uKGNsaWVudCwga2VlcEFsaXZlSW50ZXJ2YWwpIHtcbiAgICAgIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcbiAgICAgIHRoaXMuX2tlZXBBbGl2ZUludGVydmFsID0ga2VlcEFsaXZlSW50ZXJ2YWwgKiAxMDAwO1xuICAgICAgdGhpcy5pc1Jlc2V0ID0gZmFsc2U7XG5cbiAgICAgIHZhciBwaW5nUmVxID0gbmV3IFdpcmVNZXNzYWdlKE1FU1NBR0VfVFlQRS5QSU5HUkVRKS5lbmNvZGUoKTtcblxuICAgICAgdmFyIGRvVGltZW91dCA9IGZ1bmN0aW9uKHBpbmdlcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGRvUGluZy5hcHBseShwaW5nZXIpO1xuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgLyoqIEBpZ25vcmUgKi9cbiAgICAgIHZhciBkb1BpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVzZXQpIHtcbiAgICAgICAgICB0aGlzLl9jbGllbnQuX3RyYWNlKFwiUGluZ2VyLmRvUGluZ1wiLCBcIlRpbWVkIG91dFwiKTtcbiAgICAgICAgICB0aGlzLl9jbGllbnQuX2Rpc2Nvbm5lY3RlZChcbiAgICAgICAgICAgIEVSUk9SLlBJTkdfVElNRU9VVC5jb2RlLFxuICAgICAgICAgICAgZm9ybWF0KEVSUk9SLlBJTkdfVElNRU9VVClcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaXNSZXNldCA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuX2NsaWVudC5fdHJhY2UoXCJQaW5nZXIuZG9QaW5nXCIsIFwic2VuZCBQSU5HUkVRXCIpO1xuICAgICAgICAgIHRoaXMuX2NsaWVudC5zb2NrZXQuc2VuZChwaW5nUmVxKTtcbiAgICAgICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGRvVGltZW91dCh0aGlzKSwgdGhpcy5fa2VlcEFsaXZlSW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuaXNSZXNldCA9IHRydWU7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgICAgICBpZiAodGhpcy5fa2VlcEFsaXZlSW50ZXJ2YWwgPiAwKVxuICAgICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZG9UaW1lb3V0KHRoaXMpLCB0aGlzLl9rZWVwQWxpdmVJbnRlcnZhbCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1vbml0b3IgcmVxdWVzdCBjb21wbGV0aW9uLlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICB2YXIgVGltZW91dCA9IGZ1bmN0aW9uKGNsaWVudCwgdGltZW91dFNlY29uZHMsIGFjdGlvbiwgYXJncykge1xuICAgICAgaWYgKCF0aW1lb3V0U2Vjb25kcykgdGltZW91dFNlY29uZHMgPSAzMDtcblxuICAgICAgdmFyIGRvVGltZW91dCA9IGZ1bmN0aW9uKGFjdGlvbiwgY2xpZW50LCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uLmFwcGx5KGNsaWVudCwgYXJncyk7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChcbiAgICAgICAgZG9UaW1lb3V0KGFjdGlvbiwgY2xpZW50LCBhcmdzKSxcbiAgICAgICAgdGltZW91dFNlY29uZHMgKiAxMDAwXG4gICAgICApO1xuXG4gICAgICB0aGlzLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIHRoZSBXZWJzb2NrZXRzIE1RVFQgVjMuMSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBQYWhvLkNsaWVudEltcGwgQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGhvc3QgdGhlIEROUyBuYW1lb2YgdGhlIHdlYlNvY2tldCBob3N0LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3J0IHRoZSBwb3J0IG51bWJlciBmb3IgdGhhdCBob3N0LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjbGllbnRJZCB0aGUgTVEgY2xpZW50IGlkZW50aWZpZXIuXG4gICAgICovXG4gICAgdmFyIENsaWVudEltcGwgPSBmdW5jdGlvbih1cmksIGhvc3QsIHBvcnQsIHBhdGgsIGNsaWVudElkKSB7XG4gICAgICAvLyBDaGVjayBkZXBlbmRlbmNpZXMgYXJlIHNhdGlzZmllZCBpbiB0aGlzIGJyb3dzZXIuXG4gICAgICBpZiAoIShcIldlYlNvY2tldFwiIGluIGdsb2JhbCAmJiBnbG9iYWwuV2ViU29ja2V0ICE9PSBudWxsKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLlVOU1VQUE9SVEVELCBbXCJXZWJTb2NrZXRcIl0pKTtcbiAgICAgIH1cbiAgICAgIGlmICghKFwiQXJyYXlCdWZmZXJcIiBpbiBnbG9iYWwgJiYgZ2xvYmFsLkFycmF5QnVmZmVyICE9PSBudWxsKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLlVOU1VQUE9SVEVELCBbXCJBcnJheUJ1ZmZlclwiXSkpO1xuICAgICAgfVxuICAgICAgdGhpcy5fdHJhY2UoXCJQYWhvLkNsaWVudFwiLCB1cmksIGhvc3QsIHBvcnQsIHBhdGgsIGNsaWVudElkKTtcblxuICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgIHRoaXMucG9ydCA9IHBvcnQ7XG4gICAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgICAgdGhpcy51cmkgPSB1cmk7XG4gICAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWQ7XG4gICAgICB0aGlzLl93c3VyaSA9IG51bGw7XG5cbiAgICAgIC8vIExvY2FsIHN0b3JhZ2VrZXlzIGFyZSBxdWFsaWZpZWQgd2l0aCB0aGUgZm9sbG93aW5nIHN0cmluZy5cbiAgICAgIC8vIFRoZSBjb25kaXRpb25hbCBpbmNsdXNpb24gb2YgcGF0aCBpbiB0aGUga2V5IGlzIGZvciBiYWNrd2FyZFxuICAgICAgLy8gY29tcGF0aWJpbGl0eSB0byB3aGVuIHRoZSBwYXRoIHdhcyBub3QgY29uZmlndXJhYmxlIGFuZCBhc3N1bWVkIHRvXG4gICAgICAvLyBiZSAvbXF0dFxuICAgICAgdGhpcy5fbG9jYWxLZXkgPVxuICAgICAgICBob3N0ICtcbiAgICAgICAgXCI6XCIgK1xuICAgICAgICBwb3J0ICtcbiAgICAgICAgKHBhdGggIT0gXCIvbXF0dFwiID8gXCI6XCIgKyBwYXRoIDogXCJcIikgK1xuICAgICAgICBcIjpcIiArXG4gICAgICAgIGNsaWVudElkICtcbiAgICAgICAgXCI6XCI7XG5cbiAgICAgIC8vIENyZWF0ZSBwcml2YXRlIGluc3RhbmNlLW9ubHkgbWVzc2FnZSBxdWV1ZVxuICAgICAgLy8gSW50ZXJuYWwgcXVldWUgb2YgbWVzc2FnZXMgdG8gYmUgc2VudCwgaW4gc2VuZGluZyBvcmRlci5cbiAgICAgIHRoaXMuX21zZ19xdWV1ZSA9IFtdO1xuICAgICAgdGhpcy5fYnVmZmVyZWRfbXNnX3F1ZXVlID0gW107XG5cbiAgICAgIC8vIE1lc3NhZ2VzIHdlIGhhdmUgc2VudCBhbmQgYXJlIGV4cGVjdGluZyBhIHJlc3BvbnNlIGZvciwgaW5kZXhlZCBieSB0aGVpciByZXNwZWN0aXZlIG1lc3NhZ2UgaWRzLlxuICAgICAgdGhpcy5fc2VudE1lc3NhZ2VzID0ge307XG5cbiAgICAgIC8vIE1lc3NhZ2VzIHdlIGhhdmUgcmVjZWl2ZWQgYW5kIGFja25vd2xlZ2VkIGFuZCBhcmUgZXhwZWN0aW5nIGEgY29uZmlybSBtZXNzYWdlIGZvclxuICAgICAgLy8gaW5kZXhlZCBieSB0aGVpciByZXNwZWN0aXZlIG1lc3NhZ2UgaWRzLlxuICAgICAgdGhpcy5fcmVjZWl2ZWRNZXNzYWdlcyA9IHt9O1xuXG4gICAgICAvLyBJbnRlcm5hbCBsaXN0IG9mIGNhbGxiYWNrcyB0byBiZSBleGVjdXRlZCB3aGVuIG1lc3NhZ2VzXG4gICAgICAvLyBoYXZlIGJlZW4gc3VjY2Vzc2Z1bGx5IHNlbnQgb3ZlciB3ZWIgc29ja2V0LCBlLmcuIGRpc2Nvbm5lY3RcbiAgICAgIC8vIHdoZW4gaXQgZG9lc24ndCBoYXZlIHRvIHdhaXQgZm9yIEFDSywganVzdCBtZXNzYWdlIGlzIGRpc3BhdGNoZWQuXG4gICAgICB0aGlzLl9ub3RpZnlfbXNnX3NlbnQgPSB7fTtcblxuICAgICAgLy8gVW5pcXVlIGlkZW50aWZpZXIgZm9yIFNFTkQgbWVzc2FnZXMsIGluY3JlbWVudGluZ1xuICAgICAgLy8gY291bnRlciBhcyBtZXNzYWdlcyBhcmUgc2VudC5cbiAgICAgIHRoaXMuX21lc3NhZ2VfaWRlbnRpZmllciA9IDE7XG5cbiAgICAgIC8vIFVzZWQgdG8gZGV0ZXJtaW5lIHRoZSB0cmFuc21pc3Npb24gc2VxdWVuY2Ugb2Ygc3RvcmVkIHNlbnQgbWVzc2FnZXMuXG4gICAgICB0aGlzLl9zZXF1ZW5jZSA9IDA7XG5cbiAgICAgIC8vIExvYWQgdGhlIGxvY2FsIHN0YXRlLCBpZiBhbnksIGZyb20gdGhlIHNhdmVkIHZlcnNpb24sIG9ubHkgcmVzdG9yZSBzdGF0ZSByZWxldmFudCB0byB0aGlzIGNsaWVudC5cbiAgICAgIGZvciAodmFyIGtleSBpbiBsb2NhbFN0b3JhZ2UpXG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkuaW5kZXhPZihcIlNlbnQ6XCIgKyB0aGlzLl9sb2NhbEtleSkgPT09IDAgfHxcbiAgICAgICAgICBrZXkuaW5kZXhPZihcIlJlY2VpdmVkOlwiICsgdGhpcy5fbG9jYWxLZXkpID09PSAwXG4gICAgICAgIClcbiAgICAgICAgICB0aGlzLnJlc3RvcmUoa2V5KTtcbiAgICB9O1xuXG4gICAgLy8gTWVzc2FnaW5nIENsaWVudCBwdWJsaWMgaW5zdGFuY2UgbWVtYmVycy5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5ob3N0ID0gbnVsbDtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5wb3J0ID0gbnVsbDtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5wYXRoID0gbnVsbDtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS51cmkgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLmNsaWVudElkID0gbnVsbDtcblxuICAgIC8vIE1lc3NhZ2luZyBDbGllbnQgcHJpdmF0ZSBpbnN0YW5jZSBtZW1iZXJzLlxuICAgIENsaWVudEltcGwucHJvdG90eXBlLnNvY2tldCA9IG51bGw7XG4gICAgLyogdHJ1ZSBvbmNlIHdlIGhhdmUgcmVjZWl2ZWQgYW4gYWNrbm93bGVkZ2VtZW50IHRvIGEgQ09OTkVDVCBwYWNrZXQuICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgLyogVGhlIGxhcmdlc3QgbWVzc2FnZSBpZGVudGlmaWVyIGFsbG93ZWQsIG1heSBub3QgYmUgbGFyZ2VyIHRoYW4gMioqMTYgYnV0XG4gICAgICogaWYgc2V0IHNtYWxsZXIgcmVkdWNlcyB0aGUgbWF4aW11bSBudW1iZXIgb2Ygb3V0Ym91bmQgbWVzc2FnZXMgYWxsb3dlZC5cbiAgICAgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5tYXhNZXNzYWdlSWRlbnRpZmllciA9IDY1NTM2O1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLmNvbm5lY3RPcHRpb25zID0gbnVsbDtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5ob3N0SW5kZXggPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLm9uQ29ubmVjdGVkID0gbnVsbDtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5vbkNvbm5lY3Rpb25Mb3N0ID0gbnVsbDtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5vbk1lc3NhZ2VEZWxpdmVyZWQgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLm9uTWVzc2FnZUFycml2ZWQgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLnRyYWNlRnVuY3Rpb24gPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9tc2dfcXVldWUgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9idWZmZXJlZF9tc2dfcXVldWUgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9jb25uZWN0VGltZW91dCA9IG51bGw7XG4gICAgLyogVGhlIHNlbmRQaW5nZXIgbW9uaXRvcnMgaG93IGxvbmcgd2UgYWxsb3cgYmVmb3JlIHdlIHNlbmQgZGF0YSB0byBwcm92ZSB0byB0aGUgc2VydmVyIHRoYXQgd2UgYXJlIGFsaXZlLiAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLnNlbmRQaW5nZXIgPSBudWxsO1xuICAgIC8qIFRoZSByZWNlaXZlUGluZ2VyIG1vbml0b3JzIGhvdyBsb25nIHdlIGFsbG93IGJlZm9yZSB3ZSByZXF1aXJlIGV2aWRlbmNlIHRoYXQgdGhlIHNlcnZlciBpcyBhbGl2ZS4gKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5yZWNlaXZlUGluZ2VyID0gbnVsbDtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fcmVjb25uZWN0SW50ZXJ2YWwgPSAxOyAvLyBSZWNvbm5lY3QgRGVsYXksIHN0YXJ0cyBhdCAxIHNlY29uZFxuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fcmVjb25uZWN0VGltZW91dCA9IG51bGw7XG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuZGlzY29ubmVjdGVkUHVibGlzaGluZyA9IGZhbHNlO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLmRpc2Nvbm5lY3RlZEJ1ZmZlclNpemUgPSA1MDAwO1xuXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUucmVjZWl2ZUJ1ZmZlciA9IG51bGw7XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fdHJhY2VCdWZmZXIgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9NQVhfVFJBQ0VfRU5UUklFUyA9IDEwMDtcblxuICAgIENsaWVudEltcGwucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbihjb25uZWN0T3B0aW9ucykge1xuICAgICAgdmFyIGNvbm5lY3RPcHRpb25zTWFza2VkID0gdGhpcy5fdHJhY2VNYXNrKGNvbm5lY3RPcHRpb25zLCBcInBhc3N3b3JkXCIpO1xuICAgICAgdGhpcy5fdHJhY2UoXG4gICAgICAgIFwiQ2xpZW50LmNvbm5lY3RcIixcbiAgICAgICAgY29ubmVjdE9wdGlvbnNNYXNrZWQsXG4gICAgICAgIHRoaXMuc29ja2V0LFxuICAgICAgICB0aGlzLmNvbm5lY3RlZFxuICAgICAgKTtcblxuICAgICAgaWYgKHRoaXMuY29ubmVjdGVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLklOVkFMSURfU1RBVEUsIFtcImFscmVhZHkgY29ubmVjdGVkXCJdKSk7XG4gICAgICBpZiAodGhpcy5zb2NrZXQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuSU5WQUxJRF9TVEFURSwgW1wiYWxyZWFkeSBjb25uZWN0ZWRcIl0pKTtcblxuICAgICAgaWYgKHRoaXMuX3JlY29ubmVjdGluZykge1xuICAgICAgICAvLyBjb25uZWN0KCkgZnVuY3Rpb24gaXMgY2FsbGVkIHdoaWxlIHJlY29ubmVjdCBpcyBpbiBwcm9ncmVzcy5cbiAgICAgICAgLy8gVGVybWluYXRlIHRoZSBhdXRvIHJlY29ubmVjdCBwcm9jZXNzIHRvIHVzZSBuZXcgY29ubmVjdCBvcHRpb25zLlxuICAgICAgICB0aGlzLl9yZWNvbm5lY3RUaW1lb3V0LmNhbmNlbCgpO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3RUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29ubmVjdE9wdGlvbnMgPSBjb25uZWN0T3B0aW9ucztcbiAgICAgIHRoaXMuX3JlY29ubmVjdEludGVydmFsID0gMTtcbiAgICAgIHRoaXMuX3JlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgaWYgKGNvbm5lY3RPcHRpb25zLnVyaXMpIHtcbiAgICAgICAgdGhpcy5ob3N0SW5kZXggPSAwO1xuICAgICAgICB0aGlzLl9kb0Nvbm5lY3QoY29ubmVjdE9wdGlvbnMudXJpc1swXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9kb0Nvbm5lY3QodGhpcy51cmkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbihmaWx0ZXIsIHN1YnNjcmliZU9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX3RyYWNlKFwiQ2xpZW50LnN1YnNjcmliZVwiLCBmaWx0ZXIsIHN1YnNjcmliZU9wdGlvbnMpO1xuXG4gICAgICBpZiAoIXRoaXMuY29ubmVjdGVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLklOVkFMSURfU1RBVEUsIFtcIm5vdCBjb25uZWN0ZWRcIl0pKTtcblxuICAgICAgdmFyIHdpcmVNZXNzYWdlID0gbmV3IFdpcmVNZXNzYWdlKE1FU1NBR0VfVFlQRS5TVUJTQ1JJQkUpO1xuICAgICAgd2lyZU1lc3NhZ2UudG9waWNzID0gZmlsdGVyLmNvbnN0cnVjdG9yID09PSBBcnJheSA/IGZpbHRlciA6IFtmaWx0ZXJdO1xuICAgICAgaWYgKHN1YnNjcmliZU9wdGlvbnMucW9zID09PSB1bmRlZmluZWQpIHN1YnNjcmliZU9wdGlvbnMucW9zID0gMDtcbiAgICAgIHdpcmVNZXNzYWdlLnJlcXVlc3RlZFFvcyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3aXJlTWVzc2FnZS50b3BpY3MubGVuZ3RoOyBpKyspXG4gICAgICAgIHdpcmVNZXNzYWdlLnJlcXVlc3RlZFFvc1tpXSA9IHN1YnNjcmliZU9wdGlvbnMucW9zO1xuXG4gICAgICBpZiAoc3Vic2NyaWJlT3B0aW9ucy5vblN1Y2Nlc3MpIHtcbiAgICAgICAgd2lyZU1lc3NhZ2Uub25TdWNjZXNzID0gZnVuY3Rpb24oZ3JhbnRlZFFvcykge1xuICAgICAgICAgIHN1YnNjcmliZU9wdGlvbnMub25TdWNjZXNzKHtcbiAgICAgICAgICAgIGludm9jYXRpb25Db250ZXh0OiBzdWJzY3JpYmVPcHRpb25zLmludm9jYXRpb25Db250ZXh0LFxuICAgICAgICAgICAgZ3JhbnRlZFFvczogZ3JhbnRlZFFvc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoc3Vic2NyaWJlT3B0aW9ucy5vbkZhaWx1cmUpIHtcbiAgICAgICAgd2lyZU1lc3NhZ2Uub25GYWlsdXJlID0gZnVuY3Rpb24oZXJyb3JDb2RlKSB7XG4gICAgICAgICAgc3Vic2NyaWJlT3B0aW9ucy5vbkZhaWx1cmUoe1xuICAgICAgICAgICAgaW52b2NhdGlvbkNvbnRleHQ6IHN1YnNjcmliZU9wdGlvbnMuaW52b2NhdGlvbkNvbnRleHQsXG4gICAgICAgICAgICBlcnJvckNvZGU6IGVycm9yQ29kZSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZm9ybWF0KGVycm9yQ29kZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN1YnNjcmliZU9wdGlvbnMudGltZW91dCkge1xuICAgICAgICB3aXJlTWVzc2FnZS50aW1lT3V0ID0gbmV3IFRpbWVvdXQoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBzdWJzY3JpYmVPcHRpb25zLnRpbWVvdXQsXG4gICAgICAgICAgc3Vic2NyaWJlT3B0aW9ucy5vbkZhaWx1cmUsXG4gICAgICAgICAgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpbnZvY2F0aW9uQ29udGV4dDogc3Vic2NyaWJlT3B0aW9ucy5pbnZvY2F0aW9uQ29udGV4dCxcbiAgICAgICAgICAgICAgZXJyb3JDb2RlOiBFUlJPUi5TVUJTQ1JJQkVfVElNRU9VVC5jb2RlLFxuICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGZvcm1hdChFUlJPUi5TVUJTQ1JJQkVfVElNRU9VVClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFsbCBzdWJzY3JpcHRpb25zIHJldHVybiBhIFNVQkFDSy5cbiAgICAgIHRoaXMuX3JlcXVpcmVzX2Fjayh3aXJlTWVzc2FnZSk7XG4gICAgICB0aGlzLl9zY2hlZHVsZV9tZXNzYWdlKHdpcmVNZXNzYWdlKTtcbiAgICB9O1xuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uKGZpbHRlciwgdW5zdWJzY3JpYmVPcHRpb25zKSB7XG4gICAgICB0aGlzLl90cmFjZShcIkNsaWVudC51bnN1YnNjcmliZVwiLCBmaWx0ZXIsIHVuc3Vic2NyaWJlT3B0aW9ucyk7XG5cbiAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuSU5WQUxJRF9TVEFURSwgW1wibm90IGNvbm5lY3RlZFwiXSkpO1xuXG4gICAgICB2YXIgd2lyZU1lc3NhZ2UgPSBuZXcgV2lyZU1lc3NhZ2UoTUVTU0FHRV9UWVBFLlVOU1VCU0NSSUJFKTtcbiAgICAgIHdpcmVNZXNzYWdlLnRvcGljcyA9IGZpbHRlci5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgPyBmaWx0ZXIgOiBbZmlsdGVyXTtcblxuICAgICAgaWYgKHVuc3Vic2NyaWJlT3B0aW9ucy5vblN1Y2Nlc3MpIHtcbiAgICAgICAgd2lyZU1lc3NhZ2UuY2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1bnN1YnNjcmliZU9wdGlvbnMub25TdWNjZXNzKHtcbiAgICAgICAgICAgIGludm9jYXRpb25Db250ZXh0OiB1bnN1YnNjcmliZU9wdGlvbnMuaW52b2NhdGlvbkNvbnRleHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmICh1bnN1YnNjcmliZU9wdGlvbnMudGltZW91dCkge1xuICAgICAgICB3aXJlTWVzc2FnZS50aW1lT3V0ID0gbmV3IFRpbWVvdXQoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICB1bnN1YnNjcmliZU9wdGlvbnMudGltZW91dCxcbiAgICAgICAgICB1bnN1YnNjcmliZU9wdGlvbnMub25GYWlsdXJlLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaW52b2NhdGlvbkNvbnRleHQ6IHVuc3Vic2NyaWJlT3B0aW9ucy5pbnZvY2F0aW9uQ29udGV4dCxcbiAgICAgICAgICAgICAgZXJyb3JDb2RlOiBFUlJPUi5VTlNVQlNDUklCRV9USU1FT1VULmNvZGUsXG4gICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZm9ybWF0KEVSUk9SLlVOU1VCU0NSSUJFX1RJTUVPVVQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBBbGwgdW5zdWJzY3JpYmVzIHJldHVybiBhIFNVQkFDSy5cbiAgICAgIHRoaXMuX3JlcXVpcmVzX2Fjayh3aXJlTWVzc2FnZSk7XG4gICAgICB0aGlzLl9zY2hlZHVsZV9tZXNzYWdlKHdpcmVNZXNzYWdlKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIHRoaXMuX3RyYWNlKFwiQ2xpZW50LnNlbmRcIiwgbWVzc2FnZSk7XG5cbiAgICAgIHZhciB3aXJlTWVzc2FnZSA9IG5ldyBXaXJlTWVzc2FnZShNRVNTQUdFX1RZUEUuUFVCTElTSCk7XG4gICAgICB3aXJlTWVzc2FnZS5wYXlsb2FkTWVzc2FnZSA9IG1lc3NhZ2U7XG5cbiAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAvLyBNYXJrIHFvcyAxICYgMiBtZXNzYWdlIGFzIFwiQUNLIHJlcXVpcmVkXCJcbiAgICAgICAgLy8gRm9yIHFvcyAwIG1lc3NhZ2UsIGludm9rZSBvbk1lc3NhZ2VEZWxpdmVyZWQgY2FsbGJhY2sgaWYgdGhlcmUgaXMgb25lLlxuICAgICAgICAvLyBUaGVuIHNjaGVkdWxlIHRoZSBtZXNzYWdlLlxuICAgICAgICBpZiAobWVzc2FnZS5xb3MgPiAwKSB7XG4gICAgICAgICAgdGhpcy5fcmVxdWlyZXNfYWNrKHdpcmVNZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9uTWVzc2FnZURlbGl2ZXJlZCkge1xuICAgICAgICAgIHRoaXMuX25vdGlmeV9tc2dfc2VudFt3aXJlTWVzc2FnZV0gPSB0aGlzLm9uTWVzc2FnZURlbGl2ZXJlZChcbiAgICAgICAgICAgIHdpcmVNZXNzYWdlLnBheWxvYWRNZXNzYWdlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zY2hlZHVsZV9tZXNzYWdlKHdpcmVNZXNzYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEN1cnJlbnRseSBkaXNjb25uZWN0ZWQsIHdpbGwgbm90IHNjaGVkdWxlIHRoaXMgbWVzc2FnZVxuICAgICAgICAvLyBDaGVjayBpZiByZWNvbm5lY3RpbmcgaXMgaW4gcHJvZ3Jlc3MgYW5kIGRpc2Nvbm5lY3RlZCBwdWJsaXNoIGlzIGVuYWJsZWQuXG4gICAgICAgIGlmICh0aGlzLl9yZWNvbm5lY3RpbmcgJiYgdGhpcy5kaXNjb25uZWN0ZWRQdWJsaXNoaW5nKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgdGhlIGxpbWl0IHdoaWNoIGluY2x1ZGUgdGhlIFwicmVxdWlyZWQgQUNLXCIgbWVzc2FnZXNcbiAgICAgICAgICB2YXIgbWVzc2FnZUNvdW50ID1cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX3NlbnRNZXNzYWdlcykubGVuZ3RoICtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlcmVkX21zZ19xdWV1ZS5sZW5ndGg7XG4gICAgICAgICAgaWYgKG1lc3NhZ2VDb3VudCA+IHRoaXMuZGlzY29ubmVjdGVkQnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuQlVGRkVSX0ZVTEwsIFt0aGlzLmRpc2Nvbm5lY3RlZEJ1ZmZlclNpemVdKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UucW9zID4gMCkge1xuICAgICAgICAgICAgICAvLyBNYXJrIHRoaXMgbWVzc2FnZSBhcyBcIkFDSyByZXF1aXJlZFwiXG4gICAgICAgICAgICAgIHRoaXMuX3JlcXVpcmVzX2Fjayh3aXJlTWVzc2FnZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aXJlTWVzc2FnZS5zZXF1ZW5jZSA9ICsrdGhpcy5fc2VxdWVuY2U7XG4gICAgICAgICAgICAgIC8vIEFkZCBtZXNzYWdlcyBpbiBmaWZvIG9yZGVyIHRvIGFycmF5LCBieSBhZGRpbmcgdG8gc3RhcnRcbiAgICAgICAgICAgICAgdGhpcy5fYnVmZmVyZWRfbXNnX3F1ZXVlLnVuc2hpZnQod2lyZU1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLklOVkFMSURfU1RBVEUsIFtcIm5vdCBjb25uZWN0ZWRcIl0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl90cmFjZShcIkNsaWVudC5kaXNjb25uZWN0XCIpO1xuXG4gICAgICBpZiAodGhpcy5fcmVjb25uZWN0aW5nKSB7XG4gICAgICAgIC8vIGRpc2Nvbm5lY3QoKSBmdW5jdGlvbiBpcyBjYWxsZWQgd2hpbGUgcmVjb25uZWN0IGlzIGluIHByb2dyZXNzLlxuICAgICAgICAvLyBUZXJtaW5hdGUgdGhlIGF1dG8gcmVjb25uZWN0IHByb2Nlc3MuXG4gICAgICAgIHRoaXMuX3JlY29ubmVjdFRpbWVvdXQuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdFRpbWVvdXQgPSBudWxsO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnNvY2tldClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX1NUQVRFLCBbXCJub3QgY29ubmVjdGluZyBvciBjb25uZWN0ZWRcIl0pXG4gICAgICAgICk7XG5cbiAgICAgIHZhciB3aXJlTWVzc2FnZSA9IG5ldyBXaXJlTWVzc2FnZShNRVNTQUdFX1RZUEUuRElTQ09OTkVDVCk7XG5cbiAgICAgIC8vIFJ1biB0aGUgZGlzY29ubmVjdGVkIGNhbGwgYmFjayBhcyBzb29uIGFzIHRoZSBtZXNzYWdlIGhhcyBiZWVuIHNlbnQsXG4gICAgICAvLyBpbiBjYXNlIG9mIGEgZmFpbHVyZSBsYXRlciBvbiBpbiB0aGUgZGlzY29ubmVjdCBwcm9jZXNzaW5nLlxuICAgICAgLy8gYXMgYSBjb25zZXF1ZW5jZSwgdGhlIF9kaXNjb25lY3RlZCBjYWxsIGJhY2sgbWF5IGJlIHJ1biBzZXZlcmFsIHRpbWVzLlxuICAgICAgdGhpcy5fbm90aWZ5X21zZ19zZW50W3dpcmVNZXNzYWdlXSA9IHNjb3BlKHRoaXMuX2Rpc2Nvbm5lY3RlZCwgdGhpcyk7XG5cbiAgICAgIHRoaXMuX3NjaGVkdWxlX21lc3NhZ2Uod2lyZU1lc3NhZ2UpO1xuICAgIH07XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5nZXRUcmFjZUxvZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX3RyYWNlQnVmZmVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3RyYWNlKFwiQ2xpZW50LmdldFRyYWNlTG9nXCIsIG5ldyBEYXRlKCkpO1xuICAgICAgICB0aGlzLl90cmFjZShcbiAgICAgICAgICBcIkNsaWVudC5nZXRUcmFjZUxvZyBpbiBmbGlnaHQgbWVzc2FnZXNcIixcbiAgICAgICAgICB0aGlzLl9zZW50TWVzc2FnZXMubGVuZ3RoXG4gICAgICAgICk7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl9zZW50TWVzc2FnZXMpXG4gICAgICAgICAgdGhpcy5fdHJhY2UoXCJfc2VudE1lc3NhZ2VzIFwiLCBrZXksIHRoaXMuX3NlbnRNZXNzYWdlc1trZXldKTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuX3JlY2VpdmVkTWVzc2FnZXMpXG4gICAgICAgICAgdGhpcy5fdHJhY2UoXCJfcmVjZWl2ZWRNZXNzYWdlcyBcIiwga2V5LCB0aGlzLl9yZWNlaXZlZE1lc3NhZ2VzW2tleV0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl90cmFjZUJ1ZmZlcjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuc3RhcnRUcmFjZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX3RyYWNlQnVmZmVyID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3RyYWNlQnVmZmVyID0gW107XG4gICAgICB9XG4gICAgICB0aGlzLl90cmFjZShcIkNsaWVudC5zdGFydFRyYWNlXCIsIG5ldyBEYXRlKCksIHZlcnNpb24pO1xuICAgIH07XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5zdG9wVHJhY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl90cmFjZUJ1ZmZlcjtcbiAgICB9O1xuXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX2RvQ29ubmVjdCA9IGZ1bmN0aW9uKHdzdXJsKSB7XG4gICAgICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgb3BlbiwgdGhpcyBjbGllbnQgd2lsbCBzZW5kIHRoZSBDT05ORUNUIFdpcmVNZXNzYWdlIHVzaW5nIHRoZSBzYXZlZCBwYXJhbWV0ZXJzLlxuICAgICAgaWYgKHRoaXMuY29ubmVjdE9wdGlvbnMudXNlU1NMKSB7XG4gICAgICAgIHZhciB1cmlQYXJ0cyA9IHdzdXJsLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgdXJpUGFydHNbMF0gPSBcIndzc1wiO1xuICAgICAgICB3c3VybCA9IHVyaVBhcnRzLmpvaW4oXCI6XCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5fd3N1cmkgPSB3c3VybDtcbiAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLmNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uIDwgNCkge1xuICAgICAgICB0aGlzLnNvY2tldCA9IG5ldyBXZWJTb2NrZXQod3N1cmwsIFtcIm1xdHR2My4xXCJdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc29ja2V0ID0gbmV3IFdlYlNvY2tldCh3c3VybCwgW1wibXF0dFwiXSk7XG4gICAgICB9XG4gICAgICB0aGlzLnNvY2tldC5iaW5hcnlUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgdGhpcy5zb2NrZXQub25vcGVuID0gc2NvcGUodGhpcy5fb25fc29ja2V0X29wZW4sIHRoaXMpO1xuICAgICAgdGhpcy5zb2NrZXQub25tZXNzYWdlID0gc2NvcGUodGhpcy5fb25fc29ja2V0X21lc3NhZ2UsIHRoaXMpO1xuICAgICAgdGhpcy5zb2NrZXQub25lcnJvciA9IHNjb3BlKHRoaXMuX29uX3NvY2tldF9lcnJvciwgdGhpcyk7XG4gICAgICB0aGlzLnNvY2tldC5vbmNsb3NlID0gc2NvcGUodGhpcy5fb25fc29ja2V0X2Nsb3NlLCB0aGlzKTtcblxuICAgICAgdGhpcy5zZW5kUGluZ2VyID0gbmV3IFBpbmdlcih0aGlzLCB0aGlzLmNvbm5lY3RPcHRpb25zLmtlZXBBbGl2ZUludGVydmFsKTtcbiAgICAgIHRoaXMucmVjZWl2ZVBpbmdlciA9IG5ldyBQaW5nZXIoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRoaXMuY29ubmVjdE9wdGlvbnMua2VlcEFsaXZlSW50ZXJ2YWxcbiAgICAgICk7XG4gICAgICBpZiAodGhpcy5fY29ubmVjdFRpbWVvdXQpIHtcbiAgICAgICAgdGhpcy5fY29ubmVjdFRpbWVvdXQuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RUaW1lb3V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2Nvbm5lY3RUaW1lb3V0ID0gbmV3IFRpbWVvdXQoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRoaXMuY29ubmVjdE9wdGlvbnMudGltZW91dCxcbiAgICAgICAgdGhpcy5fZGlzY29ubmVjdGVkLFxuICAgICAgICBbRVJST1IuQ09OTkVDVF9USU1FT1VULmNvZGUsIGZvcm1hdChFUlJPUi5DT05ORUNUX1RJTUVPVVQpXVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgLy8gU2NoZWR1bGUgYSBuZXcgbWVzc2FnZSB0byBiZSBzZW50IG92ZXIgdGhlIFdlYlNvY2tldHNcbiAgICAvLyBjb25uZWN0aW9uLiBDT05ORUNUIG1lc3NhZ2VzIGNhdXNlIFdlYlNvY2tldCBjb25uZWN0aW9uXG4gICAgLy8gdG8gYmUgc3RhcnRlZC4gQWxsIG90aGVyIG1lc3NhZ2VzIGFyZSBxdWV1ZWQgaW50ZXJuYWxseVxuICAgIC8vIHVudGlsIHRoaXMgaGFzIGhhcHBlbmVkLiBXaGVuIFdTIGNvbm5lY3Rpb24gc3RhcnRzLCBwcm9jZXNzXG4gICAgLy8gYWxsIG91dHN0YW5kaW5nIG1lc3NhZ2VzLlxuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9zY2hlZHVsZV9tZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgLy8gQWRkIG1lc3NhZ2VzIGluIGZpZm8gb3JkZXIgdG8gYXJyYXksIGJ5IGFkZGluZyB0byBzdGFydFxuICAgICAgdGhpcy5fbXNnX3F1ZXVlLnVuc2hpZnQobWVzc2FnZSk7XG4gICAgICAvLyBQcm9jZXNzIG91dHN0YW5kaW5nIG1lc3NhZ2VzIGluIHRoZSBxdWV1ZSBpZiB3ZSBoYXZlIGFuICBvcGVuIHNvY2tldCwgYW5kIGhhdmUgcmVjZWl2ZWQgQ09OTkFDSy5cbiAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICB0aGlzLl9wcm9jZXNzX3F1ZXVlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENsaWVudEltcGwucHJvdG90eXBlLnN0b3JlID0gZnVuY3Rpb24ocHJlZml4LCB3aXJlTWVzc2FnZSkge1xuICAgICAgdmFyIHN0b3JlZE1lc3NhZ2UgPSB7XG4gICAgICAgIHR5cGU6IHdpcmVNZXNzYWdlLnR5cGUsXG4gICAgICAgIG1lc3NhZ2VJZGVudGlmaWVyOiB3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcixcbiAgICAgICAgdmVyc2lvbjogMVxuICAgICAgfTtcblxuICAgICAgc3dpdGNoICh3aXJlTWVzc2FnZS50eXBlKSB7XG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQkxJU0g6XG4gICAgICAgICAgaWYgKHdpcmVNZXNzYWdlLnB1YlJlY1JlY2VpdmVkKSBzdG9yZWRNZXNzYWdlLnB1YlJlY1JlY2VpdmVkID0gdHJ1ZTtcblxuICAgICAgICAgIC8vIENvbnZlcnQgdGhlIHBheWxvYWQgdG8gYSBoZXggc3RyaW5nLlxuICAgICAgICAgIHN0b3JlZE1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UgPSB7fTtcbiAgICAgICAgICB2YXIgaGV4ID0gXCJcIjtcbiAgICAgICAgICB2YXIgbWVzc2FnZUJ5dGVzID0gd2lyZU1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UucGF5bG9hZEJ5dGVzO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVzc2FnZUJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZUJ5dGVzW2ldIDw9IDB4ZilcbiAgICAgICAgICAgICAgaGV4ID0gaGV4ICsgXCIwXCIgKyBtZXNzYWdlQnl0ZXNbaV0udG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgZWxzZSBoZXggPSBoZXggKyBtZXNzYWdlQnl0ZXNbaV0udG9TdHJpbmcoMTYpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdG9yZWRNZXNzYWdlLnBheWxvYWRNZXNzYWdlLnBheWxvYWRIZXggPSBoZXg7XG5cbiAgICAgICAgICBzdG9yZWRNZXNzYWdlLnBheWxvYWRNZXNzYWdlLnFvcyA9IHdpcmVNZXNzYWdlLnBheWxvYWRNZXNzYWdlLnFvcztcbiAgICAgICAgICBzdG9yZWRNZXNzYWdlLnBheWxvYWRNZXNzYWdlLmRlc3RpbmF0aW9uTmFtZSA9XG4gICAgICAgICAgICB3aXJlTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWU7XG4gICAgICAgICAgaWYgKHdpcmVNZXNzYWdlLnBheWxvYWRNZXNzYWdlLmR1cGxpY2F0ZSlcbiAgICAgICAgICAgIHN0b3JlZE1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UuZHVwbGljYXRlID0gdHJ1ZTtcbiAgICAgICAgICBpZiAod2lyZU1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UucmV0YWluZWQpXG4gICAgICAgICAgICBzdG9yZWRNZXNzYWdlLnBheWxvYWRNZXNzYWdlLnJldGFpbmVkID0gdHJ1ZTtcblxuICAgICAgICAgIC8vIEFkZCBhIHNlcXVlbmNlIG51bWJlciB0byBzZW50IG1lc3NhZ2VzLlxuICAgICAgICAgIGlmIChwcmVmaXguaW5kZXhPZihcIlNlbnQ6XCIpID09PSAwKSB7XG4gICAgICAgICAgICBpZiAod2lyZU1lc3NhZ2Uuc2VxdWVuY2UgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgd2lyZU1lc3NhZ2Uuc2VxdWVuY2UgPSArK3RoaXMuX3NlcXVlbmNlO1xuICAgICAgICAgICAgc3RvcmVkTWVzc2FnZS5zZXF1ZW5jZSA9IHdpcmVNZXNzYWdlLnNlcXVlbmNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfU1RPUkVEX0RBVEEsIFtcbiAgICAgICAgICAgICAgcHJlZml4ICsgdGhpcy5fbG9jYWxLZXkgKyB3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcixcbiAgICAgICAgICAgICAgc3RvcmVkTWVzc2FnZVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXG4gICAgICAgIHByZWZpeCArIHRoaXMuX2xvY2FsS2V5ICsgd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXIsXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHN0b3JlZE1lc3NhZ2UpXG4gICAgICApO1xuICAgIH07XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgdmFyIHN0b3JlZE1lc3NhZ2UgPSBKU09OLnBhcnNlKHZhbHVlKTtcblxuICAgICAgdmFyIHdpcmVNZXNzYWdlID0gbmV3IFdpcmVNZXNzYWdlKHN0b3JlZE1lc3NhZ2UudHlwZSwgc3RvcmVkTWVzc2FnZSk7XG5cbiAgICAgIHN3aXRjaCAoc3RvcmVkTWVzc2FnZS50eXBlKSB7XG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQkxJU0g6XG4gICAgICAgICAgLy8gUmVwbGFjZSB0aGUgcGF5bG9hZCBtZXNzYWdlIHdpdGggYSBNZXNzYWdlIG9iamVjdC5cbiAgICAgICAgICB2YXIgaGV4ID0gc3RvcmVkTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5wYXlsb2FkSGV4O1xuICAgICAgICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoaGV4Lmxlbmd0aCAvIDIpO1xuICAgICAgICAgIHZhciBieXRlU3RyZWFtID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgd2hpbGUgKGhleC5sZW5ndGggPj0gMikge1xuICAgICAgICAgICAgdmFyIHggPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDAsIDIpLCAxNik7XG4gICAgICAgICAgICBoZXggPSBoZXguc3Vic3RyaW5nKDIsIGhleC5sZW5ndGgpO1xuICAgICAgICAgICAgYnl0ZVN0cmVhbVtpKytdID0geDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHBheWxvYWRNZXNzYWdlID0gbmV3IE1lc3NhZ2UoYnl0ZVN0cmVhbSk7XG5cbiAgICAgICAgICBwYXlsb2FkTWVzc2FnZS5xb3MgPSBzdG9yZWRNZXNzYWdlLnBheWxvYWRNZXNzYWdlLnFvcztcbiAgICAgICAgICBwYXlsb2FkTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUgPVxuICAgICAgICAgICAgc3RvcmVkTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWU7XG4gICAgICAgICAgaWYgKHN0b3JlZE1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UuZHVwbGljYXRlKVxuICAgICAgICAgICAgcGF5bG9hZE1lc3NhZ2UuZHVwbGljYXRlID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoc3RvcmVkTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5yZXRhaW5lZClcbiAgICAgICAgICAgIHBheWxvYWRNZXNzYWdlLnJldGFpbmVkID0gdHJ1ZTtcbiAgICAgICAgICB3aXJlTWVzc2FnZS5wYXlsb2FkTWVzc2FnZSA9IHBheWxvYWRNZXNzYWdlO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXQoRVJST1IuSU5WQUxJRF9TVE9SRURfREFUQSwgW2tleSwgdmFsdWVdKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkuaW5kZXhPZihcIlNlbnQ6XCIgKyB0aGlzLl9sb2NhbEtleSkgPT09IDApIHtcbiAgICAgICAgd2lyZU1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UuZHVwbGljYXRlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fc2VudE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXSA9IHdpcmVNZXNzYWdlO1xuICAgICAgfSBlbHNlIGlmIChrZXkuaW5kZXhPZihcIlJlY2VpdmVkOlwiICsgdGhpcy5fbG9jYWxLZXkpID09PSAwKSB7XG4gICAgICAgIHRoaXMuX3JlY2VpdmVkTWVzc2FnZXNbd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJdID0gd2lyZU1lc3NhZ2U7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9wcm9jZXNzX3F1ZXVlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbWVzc2FnZSA9IG51bGw7XG5cbiAgICAgIC8vIFNlbmQgYWxsIHF1ZXVlZCBtZXNzYWdlcyBkb3duIHNvY2tldCBjb25uZWN0aW9uXG4gICAgICB3aGlsZSAoKG1lc3NhZ2UgPSB0aGlzLl9tc2dfcXVldWUucG9wKCkpKSB7XG4gICAgICAgIHRoaXMuX3NvY2tldF9zZW5kKG1lc3NhZ2UpO1xuICAgICAgICAvLyBOb3RpZnkgbGlzdGVuZXJzIHRoYXQgbWVzc2FnZSB3YXMgc3VjY2Vzc2Z1bGx5IHNlbnRcbiAgICAgICAgaWYgKHRoaXMuX25vdGlmeV9tc2dfc2VudFttZXNzYWdlXSkge1xuICAgICAgICAgIHRoaXMuX25vdGlmeV9tc2dfc2VudFttZXNzYWdlXSgpO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ub3RpZnlfbXNnX3NlbnRbbWVzc2FnZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRXhwZWN0IGFuIEFDSyByZXNwb25zZSBmb3IgdGhpcyBtZXNzYWdlLiBBZGQgbWVzc2FnZSB0byB0aGUgc2V0IG9mIGluIHByb2dyZXNzXG4gICAgICogbWVzc2FnZXMgYW5kIHNldCBhbiB1bnVzZWQgaWRlbnRpZmllciBpbiB0aGlzIG1lc3NhZ2UuXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9yZXF1aXJlc19hY2sgPSBmdW5jdGlvbih3aXJlTWVzc2FnZSkge1xuICAgICAgdmFyIG1lc3NhZ2VDb3VudCA9IE9iamVjdC5rZXlzKHRoaXMuX3NlbnRNZXNzYWdlcykubGVuZ3RoO1xuICAgICAgaWYgKG1lc3NhZ2VDb3VudCA+IHRoaXMubWF4TWVzc2FnZUlkZW50aWZpZXIpXG4gICAgICAgIHRocm93IEVycm9yKFwiVG9vIG1hbnkgbWVzc2FnZXM6XCIgKyBtZXNzYWdlQ291bnQpO1xuXG4gICAgICB3aGlsZSAodGhpcy5fc2VudE1lc3NhZ2VzW3RoaXMuX21lc3NhZ2VfaWRlbnRpZmllcl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9tZXNzYWdlX2lkZW50aWZpZXIrKztcbiAgICAgIH1cbiAgICAgIHdpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyID0gdGhpcy5fbWVzc2FnZV9pZGVudGlmaWVyO1xuICAgICAgdGhpcy5fc2VudE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXSA9IHdpcmVNZXNzYWdlO1xuICAgICAgaWYgKHdpcmVNZXNzYWdlLnR5cGUgPT09IE1FU1NBR0VfVFlQRS5QVUJMSVNIKSB7XG4gICAgICAgIHRoaXMuc3RvcmUoXCJTZW50OlwiLCB3aXJlTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fbWVzc2FnZV9pZGVudGlmaWVyID09PSB0aGlzLm1heE1lc3NhZ2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHRoaXMuX21lc3NhZ2VfaWRlbnRpZmllciA9IDE7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHRoZSB1bmRlcmx5aW5nIHdlYnNvY2tldCBoYXMgYmVlbiBvcGVuZWQuXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9vbl9zb2NrZXRfb3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gQ3JlYXRlIHRoZSBDT05ORUNUIG1lc3NhZ2Ugb2JqZWN0LlxuICAgICAgdmFyIHdpcmVNZXNzYWdlID0gbmV3IFdpcmVNZXNzYWdlKFxuICAgICAgICBNRVNTQUdFX1RZUEUuQ09OTkVDVCxcbiAgICAgICAgdGhpcy5jb25uZWN0T3B0aW9uc1xuICAgICAgKTtcbiAgICAgIHdpcmVNZXNzYWdlLmNsaWVudElkID0gdGhpcy5jbGllbnRJZDtcbiAgICAgIHRoaXMuX3NvY2tldF9zZW5kKHdpcmVNZXNzYWdlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIHVuZGVybHlpbmcgd2Vic29ja2V0IGhhcyByZWNlaXZlZCBhIGNvbXBsZXRlIHBhY2tldC5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX29uX3NvY2tldF9tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHRoaXMuX3RyYWNlKFwiQ2xpZW50Ll9vbl9zb2NrZXRfbWVzc2FnZVwiLCBldmVudC5kYXRhKTtcbiAgICAgIHZhciBtZXNzYWdlcyA9IHRoaXMuX2RlZnJhbWVNZXNzYWdlcyhldmVudC5kYXRhKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVzc2FnZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlTWVzc2FnZShtZXNzYWdlc1tpXSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9kZWZyYW1lTWVzc2FnZXMgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgYnl0ZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gICAgICB2YXIgbWVzc2FnZXMgPSBbXTtcbiAgICAgIGlmICh0aGlzLnJlY2VpdmVCdWZmZXIpIHtcbiAgICAgICAgdmFyIG5ld0RhdGEgPSBuZXcgVWludDhBcnJheShcbiAgICAgICAgICB0aGlzLnJlY2VpdmVCdWZmZXIubGVuZ3RoICsgYnl0ZUFycmF5Lmxlbmd0aFxuICAgICAgICApO1xuICAgICAgICBuZXdEYXRhLnNldCh0aGlzLnJlY2VpdmVCdWZmZXIpO1xuICAgICAgICBuZXdEYXRhLnNldChieXRlQXJyYXksIHRoaXMucmVjZWl2ZUJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICBieXRlQXJyYXkgPSBuZXdEYXRhO1xuICAgICAgICBkZWxldGUgdGhpcy5yZWNlaXZlQnVmZmVyO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHdoaWxlIChvZmZzZXQgPCBieXRlQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGRlY29kZU1lc3NhZ2UoYnl0ZUFycmF5LCBvZmZzZXQpO1xuICAgICAgICAgIHZhciB3aXJlTWVzc2FnZSA9IHJlc3VsdFswXTtcbiAgICAgICAgICBvZmZzZXQgPSByZXN1bHRbMV07XG4gICAgICAgICAgaWYgKHdpcmVNZXNzYWdlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBtZXNzYWdlcy5wdXNoKHdpcmVNZXNzYWdlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgPCBieXRlQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyID0gYnl0ZUFycmF5LnN1YmFycmF5KG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHZhciBlcnJvclN0YWNrID1cbiAgICAgICAgICBlcnJvci5oYXNPd25Qcm9wZXJ0eShcInN0YWNrXCIpID09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgICAgID8gZXJyb3Iuc3RhY2sudG9TdHJpbmcoKVxuICAgICAgICAgICAgOiBcIk5vIEVycm9yIFN0YWNrIEF2YWlsYWJsZVwiO1xuICAgICAgICB0aGlzLl9kaXNjb25uZWN0ZWQoXG4gICAgICAgICAgRVJST1IuSU5URVJOQUxfRVJST1IuY29kZSxcbiAgICAgICAgICBmb3JtYXQoRVJST1IuSU5URVJOQUxfRVJST1IsIFtlcnJvci5tZXNzYWdlLCBlcnJvclN0YWNrXSlcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xuICAgIH07XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5faGFuZGxlTWVzc2FnZSA9IGZ1bmN0aW9uKHdpcmVNZXNzYWdlKSB7XG4gICAgICB0aGlzLl90cmFjZShcIkNsaWVudC5faGFuZGxlTWVzc2FnZVwiLCB3aXJlTWVzc2FnZSk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHN3aXRjaCAod2lyZU1lc3NhZ2UudHlwZSkge1xuICAgICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLkNPTk5BQ0s6XG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0VGltZW91dC5jYW5jZWwoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZWNvbm5lY3RUaW1lb3V0KSB0aGlzLl9yZWNvbm5lY3RUaW1lb3V0LmNhbmNlbCgpO1xuXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIHN0YXJ0ZWQgdXNpbmcgY2xlYW4gc2Vzc2lvbiB0aGVuIGNsZWFyIHVwIHRoZSBsb2NhbCBzdGF0ZS5cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3RPcHRpb25zLmNsZWFuU2Vzc2lvbikge1xuICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fc2VudE1lc3NhZ2VzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbnRNZXNzYWdlID0gdGhpcy5fc2VudE1lc3NhZ2VzW2tleV07XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXG4gICAgICAgICAgICAgICAgICBcIlNlbnQ6XCIgKyB0aGlzLl9sb2NhbEtleSArIHNlbnRNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aGlzLl9zZW50TWVzc2FnZXMgPSB7fTtcblxuICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fcmVjZWl2ZWRNZXNzYWdlcykge1xuICAgICAgICAgICAgICAgIHZhciByZWNlaXZlZE1lc3NhZ2UgPSB0aGlzLl9yZWNlaXZlZE1lc3NhZ2VzW2tleV07XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXG4gICAgICAgICAgICAgICAgICBcIlJlY2VpdmVkOlwiICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxLZXkgK1xuICAgICAgICAgICAgICAgICAgICByZWNlaXZlZE1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMuX3JlY2VpdmVkTWVzc2FnZXMgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENsaWVudCBjb25uZWN0ZWQgYW5kIHJlYWR5IGZvciBidXNpbmVzcy5cbiAgICAgICAgICAgIGlmICh3aXJlTWVzc2FnZS5yZXR1cm5Db2RlID09PSAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgLy8gSnVtcCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0IG9mIHVyaXMgYW5kIHN0b3AgbG9va2luZyBmb3IgYSBnb29kIGhvc3QuXG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdE9wdGlvbnMudXJpcylcbiAgICAgICAgICAgICAgICB0aGlzLmhvc3RJbmRleCA9IHRoaXMuY29ubmVjdE9wdGlvbnMudXJpcy5sZW5ndGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9kaXNjb25uZWN0ZWQoXG4gICAgICAgICAgICAgICAgRVJST1IuQ09OTkFDS19SRVRVUk5DT0RFLmNvZGUsXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLkNPTk5BQ0tfUkVUVVJOQ09ERSwgW1xuICAgICAgICAgICAgICAgICAgd2lyZU1lc3NhZ2UucmV0dXJuQ29kZSxcbiAgICAgICAgICAgICAgICAgIENPTk5BQ0tfUkNbd2lyZU1lc3NhZ2UucmV0dXJuQ29kZV1cbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVzZW5kIG1lc3NhZ2VzLlxuICAgICAgICAgICAgdmFyIHNlcXVlbmNlZE1lc3NhZ2VzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBtc2dJZCBpbiB0aGlzLl9zZW50TWVzc2FnZXMpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuX3NlbnRNZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eShtc2dJZCkpXG4gICAgICAgICAgICAgICAgc2VxdWVuY2VkTWVzc2FnZXMucHVzaCh0aGlzLl9zZW50TWVzc2FnZXNbbXNnSWRdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQWxzbyBzY2hlZHVsZSBxb3MgMCBidWZmZXJlZCBtZXNzYWdlcyBpZiBhbnlcbiAgICAgICAgICAgIGlmICh0aGlzLl9idWZmZXJlZF9tc2dfcXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICB2YXIgbXNnID0gbnVsbDtcbiAgICAgICAgICAgICAgd2hpbGUgKChtc2cgPSB0aGlzLl9idWZmZXJlZF9tc2dfcXVldWUucG9wKCkpKSB7XG4gICAgICAgICAgICAgICAgc2VxdWVuY2VkTWVzc2FnZXMucHVzaChtc2cpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uTWVzc2FnZURlbGl2ZXJlZClcbiAgICAgICAgICAgICAgICAgIHRoaXMuX25vdGlmeV9tc2dfc2VudFttc2ddID0gdGhpcy5vbk1lc3NhZ2VEZWxpdmVyZWQoXG4gICAgICAgICAgICAgICAgICAgIG1zZy5wYXlsb2FkTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTb3J0IHNlbnRNZXNzYWdlcyBpbnRvIHRoZSBvcmlnaW5hbCBzZW50IG9yZGVyLlxuICAgICAgICAgICAgdmFyIHNlcXVlbmNlZE1lc3NhZ2VzID0gc2VxdWVuY2VkTWVzc2FnZXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhLnNlcXVlbmNlIC0gYi5zZXF1ZW5jZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNlcXVlbmNlZE1lc3NhZ2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgIHZhciBzZW50TWVzc2FnZSA9IHNlcXVlbmNlZE1lc3NhZ2VzW2ldO1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc2VudE1lc3NhZ2UudHlwZSA9PSBNRVNTQUdFX1RZUEUuUFVCTElTSCAmJlxuICAgICAgICAgICAgICAgIHNlbnRNZXNzYWdlLnB1YlJlY1JlY2VpdmVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciBwdWJSZWxNZXNzYWdlID0gbmV3IFdpcmVNZXNzYWdlKE1FU1NBR0VfVFlQRS5QVUJSRUwsIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2VJZGVudGlmaWVyOiBzZW50TWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NjaGVkdWxlX21lc3NhZ2UocHViUmVsTWVzc2FnZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVfbWVzc2FnZShzZW50TWVzc2FnZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgY29ubmVjdE9wdGlvbnMub25TdWNjZXNzIGNhbGxiYWNrIGlmIHRoZXJlIGlzIG9uZS5cbiAgICAgICAgICAgIC8vIFdpbGwgYWxzbyBub3cgcmV0dXJuIGlmIHRoaXMgY29ubmVjdGlvbiB3YXMgdGhlIHJlc3VsdCBvZiBhbiBhdXRvbWF0aWNcbiAgICAgICAgICAgIC8vIHJlY29ubmVjdCBhbmQgd2hpY2ggVVJJIHdhcyBzdWNjZXNzZnVsbHkgY29ubmVjdGVkIHRvLlxuICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdE9wdGlvbnMub25TdWNjZXNzKSB7XG4gICAgICAgICAgICAgIHRoaXMuY29ubmVjdE9wdGlvbnMub25TdWNjZXNzKHtcbiAgICAgICAgICAgICAgICBpbnZvY2F0aW9uQ29udGV4dDogdGhpcy5jb25uZWN0T3B0aW9ucy5pbnZvY2F0aW9uQ29udGV4dFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5fcmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgIHJlY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0SW50ZXJ2YWwgPSAxO1xuICAgICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgb25Db25uZWN0ZWQgY2FsbGJhY2sgaWYgdGhlcmUgaXMgb25lLlxuICAgICAgICAgICAgdGhpcy5fY29ubmVjdGVkKHJlY29ubmVjdGVkLCB0aGlzLl93c3VyaSk7XG5cbiAgICAgICAgICAgIC8vIFByb2Nlc3MgYWxsIHF1ZXVlZCBtZXNzYWdlcyBub3cgdGhhdCB0aGUgY29ubmVjdGlvbiBpcyBlc3RhYmxpc2hlZC5cbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NfcXVldWUoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCTElTSDpcbiAgICAgICAgICAgIHRoaXMuX3JlY2VpdmVQdWJsaXNoKHdpcmVNZXNzYWdlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCQUNLOlxuICAgICAgICAgICAgdmFyIHNlbnRNZXNzYWdlID0gdGhpcy5fc2VudE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXTtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSByZSBmbG93IG9mIGEgUFVCQUNLIGFmdGVyIHdlIGhhdmUgcmVzdGFydGVkIHJlY2VpdmVkTWVzc2FnZSB3aWxsIG5vdCBleGlzdC5cbiAgICAgICAgICAgIGlmIChzZW50TWVzc2FnZSkge1xuICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fc2VudE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXTtcbiAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXG4gICAgICAgICAgICAgICAgXCJTZW50OlwiICsgdGhpcy5fbG9jYWxLZXkgKyB3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllclxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBpZiAodGhpcy5vbk1lc3NhZ2VEZWxpdmVyZWQpXG4gICAgICAgICAgICAgICAgdGhpcy5vbk1lc3NhZ2VEZWxpdmVyZWQoc2VudE1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5QVUJSRUM6XG4gICAgICAgICAgICB2YXIgc2VudE1lc3NhZ2UgPSB0aGlzLl9zZW50TWVzc2FnZXNbd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJdO1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHJlIGZsb3cgb2YgYSBQVUJSRUMgYWZ0ZXIgd2UgaGF2ZSByZXN0YXJ0ZWQgcmVjZWl2ZWRNZXNzYWdlIHdpbGwgbm90IGV4aXN0LlxuICAgICAgICAgICAgaWYgKHNlbnRNZXNzYWdlKSB7XG4gICAgICAgICAgICAgIHNlbnRNZXNzYWdlLnB1YlJlY1JlY2VpdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdmFyIHB1YlJlbE1lc3NhZ2UgPSBuZXcgV2lyZU1lc3NhZ2UoTUVTU0FHRV9UWVBFLlBVQlJFTCwge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VJZGVudGlmaWVyOiB3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllclxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdGhpcy5zdG9yZShcIlNlbnQ6XCIsIHNlbnRNZXNzYWdlKTtcbiAgICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVfbWVzc2FnZShwdWJSZWxNZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCUkVMOlxuICAgICAgICAgICAgdmFyIHJlY2VpdmVkTWVzc2FnZSA9IHRoaXMuX3JlY2VpdmVkTWVzc2FnZXNbXG4gICAgICAgICAgICAgIHdpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXG4gICAgICAgICAgICAgIFwiUmVjZWl2ZWQ6XCIgKyB0aGlzLl9sb2NhbEtleSArIHdpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHJlIGZsb3cgb2YgYSBQVUJSRUwgYWZ0ZXIgd2UgaGF2ZSByZXN0YXJ0ZWQgcmVjZWl2ZWRNZXNzYWdlIHdpbGwgbm90IGV4aXN0LlxuICAgICAgICAgICAgaWYgKHJlY2VpdmVkTWVzc2FnZSkge1xuICAgICAgICAgICAgICB0aGlzLl9yZWNlaXZlTWVzc2FnZShyZWNlaXZlZE1lc3NhZ2UpO1xuICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fcmVjZWl2ZWRNZXNzYWdlc1t3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBbHdheXMgZmxvdyBQdWJDb21wLCB3ZSBtYXkgaGF2ZSBwcmV2aW91c2x5IGZsb3dlZCBQdWJDb21wIGJ1dCB0aGUgc2VydmVyIGxvc3QgaXQgYW5kIHJlc3RhcnRlZC5cbiAgICAgICAgICAgIHZhciBwdWJDb21wTWVzc2FnZSA9IG5ldyBXaXJlTWVzc2FnZShNRVNTQUdFX1RZUEUuUFVCQ09NUCwge1xuICAgICAgICAgICAgICBtZXNzYWdlSWRlbnRpZmllcjogd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVfbWVzc2FnZShwdWJDb21wTWVzc2FnZSk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCQ09NUDpcbiAgICAgICAgICAgIHZhciBzZW50TWVzc2FnZSA9IHRoaXMuX3NlbnRNZXNzYWdlc1t3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcl07XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fc2VudE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFxuICAgICAgICAgICAgICBcIlNlbnQ6XCIgKyB0aGlzLl9sb2NhbEtleSArIHdpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHRoaXMub25NZXNzYWdlRGVsaXZlcmVkKVxuICAgICAgICAgICAgICB0aGlzLm9uTWVzc2FnZURlbGl2ZXJlZChzZW50TWVzc2FnZS5wYXlsb2FkTWVzc2FnZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlNVQkFDSzpcbiAgICAgICAgICAgIHZhciBzZW50TWVzc2FnZSA9IHRoaXMuX3NlbnRNZXNzYWdlc1t3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcl07XG4gICAgICAgICAgICBpZiAoc2VudE1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgaWYgKHNlbnRNZXNzYWdlLnRpbWVPdXQpIHNlbnRNZXNzYWdlLnRpbWVPdXQuY2FuY2VsKCk7XG4gICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBuZWVkIHRvIGJlIGZpeGVkIHdoZW4gd2UgYWRkIG11bHRpcGxlIHRvcGljIHN1cHBvcnRcbiAgICAgICAgICAgICAgaWYgKHdpcmVNZXNzYWdlLnJldHVybkNvZGVbMF0gPT09IDB4ODApIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VudE1lc3NhZ2Uub25GYWlsdXJlKSB7XG4gICAgICAgICAgICAgICAgICBzZW50TWVzc2FnZS5vbkZhaWx1cmUod2lyZU1lc3NhZ2UucmV0dXJuQ29kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlbnRNZXNzYWdlLm9uU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHNlbnRNZXNzYWdlLm9uU3VjY2Vzcyh3aXJlTWVzc2FnZS5yZXR1cm5Db2RlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fc2VudE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuVU5TVUJBQ0s6XG4gICAgICAgICAgICB2YXIgc2VudE1lc3NhZ2UgPSB0aGlzLl9zZW50TWVzc2FnZXNbd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJdO1xuICAgICAgICAgICAgaWYgKHNlbnRNZXNzYWdlKSB7XG4gICAgICAgICAgICAgIGlmIChzZW50TWVzc2FnZS50aW1lT3V0KSBzZW50TWVzc2FnZS50aW1lT3V0LmNhbmNlbCgpO1xuICAgICAgICAgICAgICBpZiAoc2VudE1lc3NhZ2UuY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBzZW50TWVzc2FnZS5jYWxsYmFjaygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zZW50TWVzc2FnZXNbd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBJTkdSRVNQOlxuICAgICAgICAgICAgLyogVGhlIHNlbmRQaW5nZXIgb3IgcmVjZWl2ZVBpbmdlciBtYXkgaGF2ZSBzZW50IGEgcGluZywgdGhlIHJlY2VpdmVQaW5nZXIgaGFzIGFscmVhZHkgYmVlbiByZXNldC4gKi9cbiAgICAgICAgICAgIHRoaXMuc2VuZFBpbmdlci5yZXNldCgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5ESVNDT05ORUNUOlxuICAgICAgICAgICAgLy8gQ2xpZW50cyBkbyBub3QgZXhwZWN0IHRvIHJlY2VpdmUgZGlzY29ubmVjdCBwYWNrZXRzLlxuICAgICAgICAgICAgdGhpcy5fZGlzY29ubmVjdGVkKFxuICAgICAgICAgICAgICBFUlJPUi5JTlZBTElEX01RVFRfTUVTU0FHRV9UWVBFLmNvZGUsXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX01RVFRfTUVTU0FHRV9UWVBFLCBbd2lyZU1lc3NhZ2UudHlwZV0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhpcy5fZGlzY29ubmVjdGVkKFxuICAgICAgICAgICAgICBFUlJPUi5JTlZBTElEX01RVFRfTUVTU0FHRV9UWVBFLmNvZGUsXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX01RVFRfTUVTU0FHRV9UWVBFLCBbd2lyZU1lc3NhZ2UudHlwZV0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB2YXIgZXJyb3JTdGFjayA9XG4gICAgICAgICAgZXJyb3IuaGFzT3duUHJvcGVydHkoXCJzdGFja1wiKSA9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICA/IGVycm9yLnN0YWNrLnRvU3RyaW5nKClcbiAgICAgICAgICAgIDogXCJObyBFcnJvciBTdGFjayBBdmFpbGFibGVcIjtcbiAgICAgICAgdGhpcy5fZGlzY29ubmVjdGVkKFxuICAgICAgICAgIEVSUk9SLklOVEVSTkFMX0VSUk9SLmNvZGUsXG4gICAgICAgICAgZm9ybWF0KEVSUk9SLklOVEVSTkFMX0VSUk9SLCBbZXJyb3IubWVzc2FnZSwgZXJyb3JTdGFja10pXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fb25fc29ja2V0X2Vycm9yID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgIGlmICghdGhpcy5fcmVjb25uZWN0aW5nKSB7XG4gICAgICAgIHRoaXMuX2Rpc2Nvbm5lY3RlZChcbiAgICAgICAgICBFUlJPUi5TT0NLRVRfRVJST1IuY29kZSxcbiAgICAgICAgICBmb3JtYXQoRVJST1IuU09DS0VUX0VSUk9SLCBbZXJyb3IuZGF0YV0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKiBAaWdub3JlICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX29uX3NvY2tldF9jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLl9yZWNvbm5lY3RpbmcpIHtcbiAgICAgICAgdGhpcy5fZGlzY29ubmVjdGVkKEVSUk9SLlNPQ0tFVF9DTE9TRS5jb2RlLCBmb3JtYXQoRVJST1IuU09DS0VUX0NMT1NFKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKiBAaWdub3JlICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX3NvY2tldF9zZW5kID0gZnVuY3Rpb24od2lyZU1lc3NhZ2UpIHtcbiAgICAgIGlmICh3aXJlTWVzc2FnZS50eXBlID09IDEpIHtcbiAgICAgICAgdmFyIHdpcmVNZXNzYWdlTWFza2VkID0gdGhpcy5fdHJhY2VNYXNrKHdpcmVNZXNzYWdlLCBcInBhc3N3b3JkXCIpO1xuICAgICAgICB0aGlzLl90cmFjZShcIkNsaWVudC5fc29ja2V0X3NlbmRcIiwgd2lyZU1lc3NhZ2VNYXNrZWQpO1xuICAgICAgfSBlbHNlIHRoaXMuX3RyYWNlKFwiQ2xpZW50Ll9zb2NrZXRfc2VuZFwiLCB3aXJlTWVzc2FnZSk7XG5cbiAgICAgIHRoaXMuc29ja2V0LnNlbmQod2lyZU1lc3NhZ2UuZW5jb2RlKCkpO1xuICAgICAgLyogV2UgaGF2ZSBwcm92ZWQgdG8gdGhlIHNlcnZlciB3ZSBhcmUgYWxpdmUuICovXG4gICAgICB0aGlzLnNlbmRQaW5nZXIucmVzZXQoKTtcbiAgICB9O1xuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fcmVjZWl2ZVB1Ymxpc2ggPSBmdW5jdGlvbih3aXJlTWVzc2FnZSkge1xuICAgICAgc3dpdGNoICh3aXJlTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5xb3MpIHtcbiAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgdGhpcy5fcmVjZWl2ZU1lc3NhZ2Uod2lyZU1lc3NhZ2UpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICB2YXIgcHViQWNrTWVzc2FnZSA9IG5ldyBXaXJlTWVzc2FnZShNRVNTQUdFX1RZUEUuUFVCQUNLLCB7XG4gICAgICAgICAgICBtZXNzYWdlSWRlbnRpZmllcjogd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLl9zY2hlZHVsZV9tZXNzYWdlKHB1YkFja01lc3NhZ2UpO1xuICAgICAgICAgIHRoaXMuX3JlY2VpdmVNZXNzYWdlKHdpcmVNZXNzYWdlKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgdGhpcy5fcmVjZWl2ZWRNZXNzYWdlc1t3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcl0gPSB3aXJlTWVzc2FnZTtcbiAgICAgICAgICB0aGlzLnN0b3JlKFwiUmVjZWl2ZWQ6XCIsIHdpcmVNZXNzYWdlKTtcbiAgICAgICAgICB2YXIgcHViUmVjTWVzc2FnZSA9IG5ldyBXaXJlTWVzc2FnZShNRVNTQUdFX1RZUEUuUFVCUkVDLCB7XG4gICAgICAgICAgICBtZXNzYWdlSWRlbnRpZmllcjogd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLl9zY2hlZHVsZV9tZXNzYWdlKHB1YlJlY01lc3NhZ2UpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFpbGQgcW9zPVwiICsgd2lyZU1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UucW9zKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fcmVjZWl2ZU1lc3NhZ2UgPSBmdW5jdGlvbih3aXJlTWVzc2FnZSkge1xuICAgICAgaWYgKHRoaXMub25NZXNzYWdlQXJyaXZlZCkge1xuICAgICAgICB0aGlzLm9uTWVzc2FnZUFycml2ZWQod2lyZU1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGllbnQgaGFzIGNvbm5lY3RlZC5cbiAgICAgKiBAcGFyYW0ge3JlY29ubmVjdH0gW2Jvb2xlYW5dIGluZGljYXRlIGlmIHRoaXMgd2FzIGEgcmVzdWx0IG9mIHJlY29ubmVjdCBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHt1cml9IFtzdHJpbmddIGZ1bGx5IHF1YWxpZmllZCBXZWJTb2NrZXQgVVJJIG9mIHRoZSBzZXJ2ZXIuXG4gICAgICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX2Nvbm5lY3RlZCA9IGZ1bmN0aW9uKHJlY29ubmVjdCwgdXJpKSB7XG4gICAgICAvLyBFeGVjdXRlIHRoZSBvbkNvbm5lY3RlZCBjYWxsYmFjayBpZiB0aGVyZSBpcyBvbmUuXG4gICAgICBpZiAodGhpcy5vbkNvbm5lY3RlZCkgdGhpcy5vbkNvbm5lY3RlZChyZWNvbm5lY3QsIHVyaSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIHJlY29ubmVjdCB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIuXG4gICAgICogRm9yIGVhY2ggcmVjb25uZWN0IGF0dGVtcHQsIHdpbGwgZG91YmxlIHRoZSByZWNvbm5lY3QgaW50ZXJ2YWxcbiAgICAgKiB1cCB0byAxMjggc2Vjb25kcy5cbiAgICAgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fcmVjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl90cmFjZShcIkNsaWVudC5fcmVjb25uZWN0XCIpO1xuICAgICAgaWYgKCF0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnNlbmRQaW5nZXIuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMucmVjZWl2ZVBpbmdlci5jYW5jZWwoKTtcbiAgICAgICAgaWYgKHRoaXMuX3JlY29ubmVjdEludGVydmFsIDwgMTI4KVxuICAgICAgICAgIHRoaXMuX3JlY29ubmVjdEludGVydmFsID0gdGhpcy5fcmVjb25uZWN0SW50ZXJ2YWwgKiAyO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0T3B0aW9ucy51cmlzKSB7XG4gICAgICAgICAgdGhpcy5ob3N0SW5kZXggPSAwO1xuICAgICAgICAgIHRoaXMuX2RvQ29ubmVjdCh0aGlzLmNvbm5lY3RPcHRpb25zLnVyaXNbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2RvQ29ubmVjdCh0aGlzLnVyaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xpZW50IGhhcyBkaXNjb25uZWN0ZWQgZWl0aGVyIGF0IGl0cyBvd24gcmVxdWVzdCBvciBiZWNhdXNlIHRoZSBzZXJ2ZXJcbiAgICAgKiBvciBuZXR3b3JrIGRpc2Nvbm5lY3RlZCBpdC4gUmVtb3ZlIGFsbCBub24tZHVyYWJsZSBzdGF0ZS5cbiAgICAgKiBAcGFyYW0ge2Vycm9yQ29kZX0gW251bWJlcl0gdGhlIGVycm9yIG51bWJlci5cbiAgICAgKiBAcGFyYW0ge2Vycm9yVGV4dH0gW3N0cmluZ10gdGhlIGVycm9yIHRleHQuXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9kaXNjb25uZWN0ZWQgPSBmdW5jdGlvbihlcnJvckNvZGUsIGVycm9yVGV4dCkge1xuICAgICAgdGhpcy5fdHJhY2UoXCJDbGllbnQuX2Rpc2Nvbm5lY3RlZFwiLCBlcnJvckNvZGUsIGVycm9yVGV4dCk7XG5cbiAgICAgIGlmIChlcnJvckNvZGUgIT09IHVuZGVmaW5lZCAmJiB0aGlzLl9yZWNvbm5lY3RpbmcpIHtcbiAgICAgICAgLy9Db250aW51ZSBhdXRvbWF0aWMgcmVjb25uZWN0IHByb2Nlc3NcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0VGltZW91dCA9IG5ldyBUaW1lb3V0KFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgdGhpcy5fcmVjb25uZWN0SW50ZXJ2YWwsXG4gICAgICAgICAgdGhpcy5fcmVjb25uZWN0XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZW5kUGluZ2VyLmNhbmNlbCgpO1xuICAgICAgdGhpcy5yZWNlaXZlUGluZ2VyLmNhbmNlbCgpO1xuICAgICAgaWYgKHRoaXMuX2Nvbm5lY3RUaW1lb3V0KSB7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RUaW1lb3V0LmNhbmNlbCgpO1xuICAgICAgICB0aGlzLl9jb25uZWN0VGltZW91dCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFyIG1lc3NhZ2UgYnVmZmVycy5cbiAgICAgIHRoaXMuX21zZ19xdWV1ZSA9IFtdO1xuICAgICAgdGhpcy5fYnVmZmVyZWRfbXNnX3F1ZXVlID0gW107XG4gICAgICB0aGlzLl9ub3RpZnlfbXNnX3NlbnQgPSB7fTtcblxuICAgICAgaWYgKHRoaXMuc29ja2V0KSB7XG4gICAgICAgIC8vIENhbmNlbCBhbGwgc29ja2V0IGNhbGxiYWNrcyBzbyB0aGF0IHRoZXkgY2Fubm90IGJlIGRyaXZlbiBhZ2FpbiBieSB0aGlzIHNvY2tldC5cbiAgICAgICAgdGhpcy5zb2NrZXQub25vcGVuID0gbnVsbDtcbiAgICAgICAgdGhpcy5zb2NrZXQub25tZXNzYWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zb2NrZXQub25lcnJvciA9IG51bGw7XG4gICAgICAgIHRoaXMuc29ja2V0Lm9uY2xvc2UgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5zb2NrZXQucmVhZHlTdGF0ZSA9PT0gMSkgdGhpcy5zb2NrZXQuY2xvc2UoKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuc29ja2V0O1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuY29ubmVjdE9wdGlvbnMudXJpcyAmJlxuICAgICAgICB0aGlzLmhvc3RJbmRleCA8IHRoaXMuY29ubmVjdE9wdGlvbnMudXJpcy5sZW5ndGggLSAxXG4gICAgICApIHtcbiAgICAgICAgLy8gVHJ5IHRoZSBuZXh0IGhvc3QuXG4gICAgICAgIHRoaXMuaG9zdEluZGV4Kys7XG4gICAgICAgIHRoaXMuX2RvQ29ubmVjdCh0aGlzLmNvbm5lY3RPcHRpb25zLnVyaXNbdGhpcy5ob3N0SW5kZXhdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChlcnJvckNvZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVycm9yQ29kZSA9IEVSUk9SLk9LLmNvZGU7XG4gICAgICAgICAgZXJyb3JUZXh0ID0gZm9ybWF0KEVSUk9SLk9LKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJ1biBhbnkgYXBwbGljYXRpb24gY2FsbGJhY2tzIGxhc3QgYXMgdGhleSBtYXkgYXR0ZW1wdCB0byByZWNvbm5lY3QgYW5kIGhlbmNlIGNyZWF0ZSBhIG5ldyBzb2NrZXQuXG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgY29ubmVjdGlvbkxvc3RDYWxsYmFjayBpZiB0aGVyZSBpcyBvbmUsIGFuZCB3ZSB3ZXJlIGNvbm5lY3RlZC5cbiAgICAgICAgICBpZiAodGhpcy5vbkNvbm5lY3Rpb25Mb3N0KSB7XG4gICAgICAgICAgICB0aGlzLm9uQ29ubmVjdGlvbkxvc3Qoe1xuICAgICAgICAgICAgICBlcnJvckNvZGU6IGVycm9yQ29kZSxcbiAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlcnJvclRleHQsXG4gICAgICAgICAgICAgIHJlY29ubmVjdDogdGhpcy5jb25uZWN0T3B0aW9ucy5yZWNvbm5lY3QsXG4gICAgICAgICAgICAgIHVyaTogdGhpcy5fd3N1cmlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXJyb3JDb2RlICE9PSBFUlJPUi5PSy5jb2RlICYmIHRoaXMuY29ubmVjdE9wdGlvbnMucmVjb25uZWN0KSB7XG4gICAgICAgICAgICAvLyBTdGFydCBhdXRvbWF0aWMgcmVjb25uZWN0IHByb2Nlc3MgZm9yIHRoZSB2ZXJ5IGZpcnN0IHRpbWUgc2luY2UgbGFzdCBzdWNjZXNzZnVsIGNvbm5lY3QuXG4gICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3RJbnRlcnZhbCA9IDE7XG4gICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3QoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIG5ldmVyIGhhZCBhIGNvbm5lY3Rpb24sIHNvIGluZGljYXRlIHRoYXQgdGhlIGNvbm5lY3QgaGFzIGZhaWxlZC5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uID09PSA0ICYmXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uRXhwbGljaXQgPT09IGZhbHNlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLl90cmFjZShcIkZhaWxlZCB0byBjb25uZWN0IFY0LCBkcm9wcGluZyBiYWNrIHRvIFYzXCIpO1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvbiA9IDM7XG4gICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0T3B0aW9ucy51cmlzKSB7XG4gICAgICAgICAgICAgIHRoaXMuaG9zdEluZGV4ID0gMDtcbiAgICAgICAgICAgICAgdGhpcy5fZG9Db25uZWN0KHRoaXMuY29ubmVjdE9wdGlvbnMudXJpc1swXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9kb0Nvbm5lY3QodGhpcy51cmkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb25uZWN0T3B0aW9ucy5vbkZhaWx1cmUpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdE9wdGlvbnMub25GYWlsdXJlKHtcbiAgICAgICAgICAgICAgaW52b2NhdGlvbkNvbnRleHQ6IHRoaXMuY29ubmVjdE9wdGlvbnMuaW52b2NhdGlvbkNvbnRleHQsXG4gICAgICAgICAgICAgIGVycm9yQ29kZTogZXJyb3JDb2RlLFxuICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yVGV4dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKiBAaWdub3JlICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX3RyYWNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBQYXNzIHRyYWNlIG1lc3NhZ2UgYmFjayB0byBjbGllbnQncyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgaWYgKHRoaXMudHJhY2VGdW5jdGlvbikge1xuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIGZvciAodmFyIGkgaW4gYXJncykge1xuICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1tpXSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgIGFyZ3Muc3BsaWNlKGksIDEsIEpTT04uc3RyaW5naWZ5KGFyZ3NbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVjb3JkID0gYXJncy5qb2luKFwiXCIpO1xuICAgICAgICB0aGlzLnRyYWNlRnVuY3Rpb24oeyBzZXZlcml0eTogXCJEZWJ1Z1wiLCBtZXNzYWdlOiByZWNvcmQgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vYnVmZmVyIHN0eWxlIHRyYWNlXG4gICAgICBpZiAodGhpcy5fdHJhY2VCdWZmZXIgIT09IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1heCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBtYXg7IGkrKykge1xuICAgICAgICAgIGlmICh0aGlzLl90cmFjZUJ1ZmZlci5sZW5ndGggPT0gdGhpcy5fTUFYX1RSQUNFX0VOVFJJRVMpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYWNlQnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpID09PSAwKSB0aGlzLl90cmFjZUJ1ZmZlci5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgIHRoaXMuX3RyYWNlQnVmZmVyLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICAgICAgICBlbHNlIHRoaXMuX3RyYWNlQnVmZmVyLnB1c2goXCIgIFwiICsgSlNPTi5zdHJpbmdpZnkoYXJndW1lbnRzW2ldKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fdHJhY2VNYXNrID0gZnVuY3Rpb24odHJhY2VPYmplY3QsIG1hc2tlZCkge1xuICAgICAgdmFyIHRyYWNlT2JqZWN0TWFza2VkID0ge307XG4gICAgICBmb3IgKHZhciBhdHRyIGluIHRyYWNlT2JqZWN0KSB7XG4gICAgICAgIGlmICh0cmFjZU9iamVjdC5oYXNPd25Qcm9wZXJ0eShhdHRyKSkge1xuICAgICAgICAgIGlmIChhdHRyID09IG1hc2tlZCkgdHJhY2VPYmplY3RNYXNrZWRbYXR0cl0gPSBcIioqKioqKlwiO1xuICAgICAgICAgIGVsc2UgdHJhY2VPYmplY3RNYXNrZWRbYXR0cl0gPSB0cmFjZU9iamVjdFthdHRyXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRyYWNlT2JqZWN0TWFza2VkO1xuICAgIH07XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBQdWJsaWMgUHJvZ3JhbW1pbmcgaW50ZXJmYWNlLlxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogVGhlIEphdmFTY3JpcHQgYXBwbGljYXRpb24gY29tbXVuaWNhdGVzIHRvIHRoZSBzZXJ2ZXIgdXNpbmcgYSB7QGxpbmsgUGFoby5DbGllbnR9IG9iamVjdC5cbiAgICAgKiA8cD5cbiAgICAgKiBNb3N0IGFwcGxpY2F0aW9ucyB3aWxsIGNyZWF0ZSBqdXN0IG9uZSBDbGllbnQgb2JqZWN0IGFuZCB0aGVuIGNhbGwgaXRzIGNvbm5lY3QoKSBtZXRob2QsXG4gICAgICogaG93ZXZlciBhcHBsaWNhdGlvbnMgY2FuIGNyZWF0ZSBtb3JlIHRoYW4gb25lIENsaWVudCBvYmplY3QgaWYgdGhleSB3aXNoLlxuICAgICAqIEluIHRoaXMgY2FzZSB0aGUgY29tYmluYXRpb24gb2YgaG9zdCwgcG9ydCBhbmQgY2xpZW50SWQgYXR0cmlidXRlcyBtdXN0IGJlIGRpZmZlcmVudCBmb3IgZWFjaCBDbGllbnQgb2JqZWN0LlxuICAgICAqIDxwPlxuICAgICAqIFRoZSBzZW5kLCBzdWJzY3JpYmUgYW5kIHVuc3Vic2NyaWJlIG1ldGhvZHMgYXJlIGltcGxlbWVudGVkIGFzIGFzeW5jaHJvbm91cyBKYXZhU2NyaXB0IG1ldGhvZHNcbiAgICAgKiAoZXZlbiB0aG91Z2ggdGhlIHVuZGVybHlpbmcgcHJvdG9jb2wgZXhjaGFuZ2UgbWlnaHQgYmUgc3luY2hyb25vdXMgaW4gbmF0dXJlKS5cbiAgICAgKiBUaGlzIG1lYW5zIHRoZXkgc2lnbmFsIHRoZWlyIGNvbXBsZXRpb24gYnkgY2FsbGluZyBiYWNrIHRvIHRoZSBhcHBsaWNhdGlvbixcbiAgICAgKiB2aWEgU3VjY2VzcyBvciBGYWlsdXJlIGNhbGxiYWNrIGZ1bmN0aW9ucyBwcm92aWRlZCBieSB0aGUgYXBwbGljYXRpb24gb24gdGhlIG1ldGhvZCBpbiBxdWVzdGlvbi5cbiAgICAgKiBTdWNoIGNhbGxiYWNrcyBhcmUgY2FsbGVkIGF0IG1vc3Qgb25jZSBwZXIgbWV0aG9kIGludm9jYXRpb24gYW5kIGRvIG5vdCBwZXJzaXN0IGJleW9uZCB0aGUgbGlmZXRpbWVcbiAgICAgKiBvZiB0aGUgc2NyaXB0IHRoYXQgbWFkZSB0aGUgaW52b2NhdGlvbi5cbiAgICAgKiA8cD5cbiAgICAgKiBJbiBjb250cmFzdCB0aGVyZSBhcmUgc29tZSBjYWxsYmFjayBmdW5jdGlvbnMsIG1vc3Qgbm90YWJseSA8aT5vbk1lc3NhZ2VBcnJpdmVkPC9pPixcbiAgICAgKiB0aGF0IGFyZSBkZWZpbmVkIG9uIHRoZSB7QGxpbmsgUGFoby5DbGllbnR9IG9iamVjdC5cbiAgICAgKiBUaGVzZSBtYXkgZ2V0IGNhbGxlZCBtdWx0aXBsZSB0aW1lcywgYW5kIGFyZW4ndCBkaXJlY3RseSByZWxhdGVkIHRvIHNwZWNpZmljIG1ldGhvZCBpbnZvY2F0aW9ucyBtYWRlIGJ5IHRoZSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBQYWhvLkNsaWVudFxuICAgICAqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaG9zdCAtIHRoZSBhZGRyZXNzIG9mIHRoZSBtZXNzYWdpbmcgc2VydmVyLCBhcyBhIGZ1bGx5IHF1YWxpZmllZCBXZWJTb2NrZXQgVVJJLCBhcyBhIEROUyBuYW1lIG9yIGRvdHRlZCBkZWNpbWFsIElQIGFkZHJlc3MuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBvcnQgLSB0aGUgcG9ydCBudW1iZXIgdG8gY29ubmVjdCB0byAtIG9ubHkgcmVxdWlyZWQgaWYgaG9zdCBpcyBub3QgYSBVUklcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIHRoZSBwYXRoIG9uIHRoZSBob3N0IHRvIGNvbm5lY3QgdG8gLSBvbmx5IHVzZWQgaWYgaG9zdCBpcyBub3QgYSBVUkkuIERlZmF1bHQ6ICcvbXF0dCcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNsaWVudElkIC0gdGhlIE1lc3NhZ2luZyBjbGllbnQgaWRlbnRpZmllciwgYmV0d2VlbiAxIGFuZCAyMyBjaGFyYWN0ZXJzIGluIGxlbmd0aC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBob3N0IC0gPGk+cmVhZCBvbmx5PC9pPiB0aGUgc2VydmVyJ3MgRE5TIGhvc3RuYW1lIG9yIGRvdHRlZCBkZWNpbWFsIElQIGFkZHJlc3MuXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHBvcnQgLSA8aT5yZWFkIG9ubHk8L2k+IHRoZSBzZXJ2ZXIncyBwb3J0LlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwYXRoIC0gPGk+cmVhZCBvbmx5PC9pPiB0aGUgc2VydmVyJ3MgcGF0aC5cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gY2xpZW50SWQgLSA8aT5yZWFkIG9ubHk8L2k+IHVzZWQgd2hlbiBjb25uZWN0aW5nIHRvIHRoZSBzZXJ2ZXIuXG4gICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gb25Db25uZWN0aW9uTG9zdCAtIGNhbGxlZCB3aGVuIGEgY29ubmVjdGlvbiBoYXMgYmVlbiBsb3N0LlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyIGEgY29ubmVjdCgpIG1ldGhvZCBoYXMgc3VjY2VlZGVkLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVzdGFibGlzaCB0aGUgY2FsbCBiYWNrIHVzZWQgd2hlbiBhIGNvbm5lY3Rpb24gaGFzIGJlZW4gbG9zdC4gVGhlIGNvbm5lY3Rpb24gbWF5IGJlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9zdCBiZWNhdXNlIHRoZSBjbGllbnQgaW5pdGlhdGVzIGEgZGlzY29ubmVjdCBvciBiZWNhdXNlIHRoZSBzZXJ2ZXIgb3IgbmV0d29ya1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdXNlIHRoZSBjbGllbnQgdG8gYmUgZGlzY29ubmVjdGVkLiBUaGUgZGlzY29ubmVjdCBjYWxsIGJhY2sgbWF5IGJlIGNhbGxlZCB3aXRob3V0XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGNvbm5lY3Rpb25Db21wbGV0ZSBjYWxsIGJhY2sgYmVpbmcgaW52b2tlZCBpZiwgZm9yIGV4YW1wbGUgdGhlIGNsaWVudCBmYWlscyB0b1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3QuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBzaW5nbGUgcmVzcG9uc2Ugb2JqZWN0IHBhcmFtZXRlciBpcyBwYXNzZWQgdG8gdGhlIG9uQ29ubmVjdGlvbkxvc3QgY2FsbGJhY2sgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIGZpZWxkczpcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmVycm9yQ29kZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5lcnJvck1lc3NhZ2VcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IG9uTWVzc2FnZURlbGl2ZXJlZCAtIGNhbGxlZCB3aGVuIGEgbWVzc2FnZSBoYXMgYmVlbiBkZWxpdmVyZWQuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxsIHByb2Nlc3NpbmcgdGhhdCB0aGlzIENsaWVudCB3aWxsIGV2ZXIgZG8gaGFzIGJlZW4gY29tcGxldGVkLiBTbywgZm9yIGV4YW1wbGUsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGNhc2Ugb2YgYSBRb3M9MiBtZXNzYWdlIHNlbnQgYnkgdGhpcyBjbGllbnQsIHRoZSBQdWJDb21wIGZsb3cgaGFzIGJlZW4gcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBtZXNzYWdlIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBwZXJzaXN0ZW50IHN0b3JhZ2UgYmVmb3JlIHRoaXMgY2FsbGJhY2sgaXMgaW52b2tlZC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJhbWV0ZXJzIHBhc3NlZCB0byB0aGUgb25NZXNzYWdlRGVsaXZlcmVkIGNhbGxiYWNrIGFyZTpcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPntAbGluayBQYWhvLk1lc3NhZ2V9IHRoYXQgd2FzIGRlbGl2ZXJlZC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IG9uTWVzc2FnZUFycml2ZWQgLSBjYWxsZWQgd2hlbiBhIG1lc3NhZ2UgaGFzIGFycml2ZWQgaW4gdGhpcyBQYWhvLmNsaWVudC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJhbWV0ZXJzIHBhc3NlZCB0byB0aGUgb25NZXNzYWdlQXJyaXZlZCBjYWxsYmFjayBhcmU6XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57QGxpbmsgUGFoby5NZXNzYWdlfSB0aGF0IGhhcyBhcnJpdmVkLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gb25Db25uZWN0ZWQgLSBjYWxsZWQgd2hlbiBhIGNvbm5lY3Rpb24gaXMgc3VjY2Vzc2Z1bGx5IG1hZGUgdG8gdGhlIHNlcnZlci5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlciBhIGNvbm5lY3QoKSBtZXRob2QuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyYW1ldGVycyBwYXNzZWQgdG8gdGhlIG9uQ29ubmVjdGVkIGNhbGxiYWNrIGFyZTpcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPnJlY29ubmVjdCAoYm9vbGVhbikgLSBJZiB0cnVlLCB0aGUgY29ubmVjdGlvbiB3YXMgdGhlIHJlc3VsdCBvZiBhIHJlY29ubmVjdC48L2xpPlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5VUkkgKHN0cmluZykgLSBUaGUgVVJJIHVzZWQgdG8gY29ubmVjdCB0byB0aGUgc2VydmVyLjwvbGk+XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGRpc2Nvbm5lY3RlZFB1Ymxpc2hpbmcgLSBpZiBzZXQsIHdpbGwgZW5hYmxlIGRpc2Nvbm5lY3RlZCBwdWJsaXNoaW5nIGluXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBldmVudCB0aGF0IHRoZSBjb25uZWN0aW9uIHRvIHRoZSBzZXJ2ZXIgaXMgbG9zdC5cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gZGlzY29ubmVjdGVkQnVmZmVyU2l6ZSAtIFVzZWQgdG8gc2V0IHRoZSBtYXhpbXVtIG51bWJlciBvZiBtZXNzYWdlcyB0aGF0IHRoZSBkaXNjb25uZWN0ZWRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciB3aWxsIGhvbGQgYmVmb3JlIHJlamVjdGluZyBuZXcgbWVzc2FnZXMuIERlZmF1bHQgc2l6ZTogNTAwMCBtZXNzYWdlc1xuICAgICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IHRyYWNlIC0gY2FsbGVkIHdoZW5ldmVyIHRyYWNlIGlzIGNhbGxlZC4gVE9ET1xuICAgICAqL1xuICAgIHZhciBDbGllbnQgPSBmdW5jdGlvbihob3N0LCBwb3J0LCBwYXRoLCBjbGllbnRJZCkge1xuICAgICAgdmFyIHVyaTtcblxuICAgICAgaWYgKHR5cGVvZiBob3N0ICE9PSBcInN0cmluZ1wiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLklOVkFMSURfVFlQRSwgW3R5cGVvZiBob3N0LCBcImhvc3RcIl0pKTtcblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMikge1xuICAgICAgICAvLyBob3N0OiBtdXN0IGJlIGZ1bGwgd3M6Ly8gdXJpXG4gICAgICAgIC8vIHBvcnQ6IGNsaWVudElkXG4gICAgICAgIGNsaWVudElkID0gcG9ydDtcbiAgICAgICAgdXJpID0gaG9zdDtcbiAgICAgICAgdmFyIG1hdGNoID0gdXJpLm1hdGNoKFxuICAgICAgICAgIC9eKHdzcz8pOlxcL1xcLygoXFxbKC4rKVxcXSl8KFteXFwvXSs/KSkoOihcXGQrKSk/KFxcLy4qKSQvXG4gICAgICAgICk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIGhvc3QgPSBtYXRjaFs0XSB8fCBtYXRjaFsyXTtcbiAgICAgICAgICBwb3J0ID0gcGFyc2VJbnQobWF0Y2hbN10pO1xuICAgICAgICAgIHBhdGggPSBtYXRjaFs4XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtob3N0LCBcImhvc3RcIl0pKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMykge1xuICAgICAgICAgIGNsaWVudElkID0gcGF0aDtcbiAgICAgICAgICBwYXRoID0gXCIvbXF0dFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcG9ydCAhPT0gXCJudW1iZXJcIiB8fCBwb3J0IDwgMClcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLklOVkFMSURfVFlQRSwgW3R5cGVvZiBwb3J0LCBcInBvcnRcIl0pKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXRoICE9PSBcInN0cmluZ1wiKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbdHlwZW9mIHBhdGgsIFwicGF0aFwiXSkpO1xuXG4gICAgICAgIHZhciBpcHY2QWRkU0JyYWNrZXQgPVxuICAgICAgICAgIGhvc3QuaW5kZXhPZihcIjpcIikgIT09IC0xICYmXG4gICAgICAgICAgaG9zdC5zbGljZSgwLCAxKSAhPT0gXCJbXCIgJiZcbiAgICAgICAgICBob3N0LnNsaWNlKC0xKSAhPT0gXCJdXCI7XG4gICAgICAgIHVyaSA9XG4gICAgICAgICAgXCJ3czovL1wiICtcbiAgICAgICAgICAoaXB2NkFkZFNCcmFja2V0ID8gXCJbXCIgKyBob3N0ICsgXCJdXCIgOiBob3N0KSArXG4gICAgICAgICAgXCI6XCIgK1xuICAgICAgICAgIHBvcnQgK1xuICAgICAgICAgIHBhdGg7XG4gICAgICB9XG5cbiAgICAgIHZhciBjbGllbnRJZExlbmd0aCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsaWVudElkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGFyQ29kZSA9IGNsaWVudElkLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmICgweGQ4MDAgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gMHhkYmZmKSB7XG4gICAgICAgICAgaSsrOyAvLyBTdXJyb2dhdGUgcGFpci5cbiAgICAgICAgfVxuICAgICAgICBjbGllbnRJZExlbmd0aCsrO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjbGllbnRJZCAhPT0gXCJzdHJpbmdcIiB8fCBjbGllbnRJZExlbmd0aCA+IDY1NTM1KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtjbGllbnRJZCwgXCJjbGllbnRJZFwiXSkpO1xuXG4gICAgICB2YXIgY2xpZW50ID0gbmV3IENsaWVudEltcGwodXJpLCBob3N0LCBwb3J0LCBwYXRoLCBjbGllbnRJZCk7XG5cbiAgICAgIC8vUHVibGljIFByb3BlcnRpZXNcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgaG9zdDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gaG9zdDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLlVOU1VQUE9SVEVEX09QRVJBVElPTikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcG9ydDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9ydDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLlVOU1VQUE9SVEVEX09QRVJBVElPTikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcGF0aDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLlVOU1VQUE9SVEVEX09QRVJBVElPTikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdXJpOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB1cmk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdChFUlJPUi5VTlNVUFBPUlRFRF9PUEVSQVRJT04pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsaWVudElkOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQuY2xpZW50SWQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdChFUlJPUi5VTlNVUFBPUlRFRF9PUEVSQVRJT04pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ29ubmVjdGVkOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQub25Db25uZWN0ZWQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5ld09uQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5ld09uQ29ubmVjdGVkID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgIGNsaWVudC5vbkNvbm5lY3RlZCA9IG5ld09uQ29ubmVjdGVkO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfVFlQRSwgW1xuICAgICAgICAgICAgICAgICAgdHlwZW9mIG5ld09uQ29ubmVjdGVkLFxuICAgICAgICAgICAgICAgICAgXCJvbkNvbm5lY3RlZFwiXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRpc2Nvbm5lY3RlZFB1Ymxpc2hpbmc6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5kaXNjb25uZWN0ZWRQdWJsaXNoaW5nO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihuZXdEaXNjb25uZWN0ZWRQdWJsaXNoaW5nKSB7XG4gICAgICAgICAgICBjbGllbnQuZGlzY29ubmVjdGVkUHVibGlzaGluZyA9IG5ld0Rpc2Nvbm5lY3RlZFB1Ymxpc2hpbmc7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkaXNjb25uZWN0ZWRCdWZmZXJTaXplOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQuZGlzY29ubmVjdGVkQnVmZmVyU2l6ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24obmV3RGlzY29ubmVjdGVkQnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgY2xpZW50LmRpc2Nvbm5lY3RlZEJ1ZmZlclNpemUgPSBuZXdEaXNjb25uZWN0ZWRCdWZmZXJTaXplO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25Db25uZWN0aW9uTG9zdDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50Lm9uQ29ubmVjdGlvbkxvc3Q7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5ld09uQ29ubmVjdGlvbkxvc3QpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3T25Db25uZWN0aW9uTG9zdCA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICBjbGllbnQub25Db25uZWN0aW9uTG9zdCA9IG5ld09uQ29ubmVjdGlvbkxvc3Q7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbXG4gICAgICAgICAgICAgICAgICB0eXBlb2YgbmV3T25Db25uZWN0aW9uTG9zdCxcbiAgICAgICAgICAgICAgICAgIFwib25Db25uZWN0aW9uTG9zdFwiXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uTWVzc2FnZURlbGl2ZXJlZDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50Lm9uTWVzc2FnZURlbGl2ZXJlZDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24obmV3T25NZXNzYWdlRGVsaXZlcmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5ld09uTWVzc2FnZURlbGl2ZXJlZCA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICBjbGllbnQub25NZXNzYWdlRGVsaXZlcmVkID0gbmV3T25NZXNzYWdlRGVsaXZlcmVkO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfVFlQRSwgW1xuICAgICAgICAgICAgICAgICAgdHlwZW9mIG5ld09uTWVzc2FnZURlbGl2ZXJlZCxcbiAgICAgICAgICAgICAgICAgIFwib25NZXNzYWdlRGVsaXZlcmVkXCJcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25NZXNzYWdlQXJyaXZlZDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50Lm9uTWVzc2FnZUFycml2ZWQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5ld09uTWVzc2FnZUFycml2ZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3T25NZXNzYWdlQXJyaXZlZCA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICBjbGllbnQub25NZXNzYWdlQXJyaXZlZCA9IG5ld09uTWVzc2FnZUFycml2ZWQ7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbXG4gICAgICAgICAgICAgICAgICB0eXBlb2YgbmV3T25NZXNzYWdlQXJyaXZlZCxcbiAgICAgICAgICAgICAgICAgIFwib25NZXNzYWdlQXJyaXZlZFwiXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRyYWNlOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQudHJhY2VGdW5jdGlvbjtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24odHJhY2UpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdHJhY2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICBjbGllbnQudHJhY2VGdW5jdGlvbiA9IHRyYWNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX1RZUEUsIFt0eXBlb2YgdHJhY2UsIFwib25UcmFjZVwiXSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvKipcbiAgICAgICAqIENvbm5lY3QgdGhpcyBNZXNzYWdpbmcgY2xpZW50IHRvIGl0cyBzZXJ2ZXIuXG4gICAgICAgKlxuICAgICAgICogQG5hbWUgUGFoby5DbGllbnQjY29ubmVjdFxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gY29ubmVjdE9wdGlvbnMgLSBBdHRyaWJ1dGVzIHVzZWQgd2l0aCB0aGUgY29ubmVjdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb25uZWN0T3B0aW9ucy50aW1lb3V0IC0gSWYgdGhlIGNvbm5lY3QgaGFzIG5vdCBzdWNjZWVkZWQgd2l0aGluIHRoaXNcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICBudW1iZXIgb2Ygc2Vjb25kcywgaXQgaXMgZGVlbWVkIHRvIGhhdmUgZmFpbGVkLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgIFRoZSBkZWZhdWx0IGlzIDMwIHNlY29uZHMuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29ubmVjdE9wdGlvbnMudXNlck5hbWUgLSBBdXRoZW50aWNhdGlvbiB1c2VybmFtZSBmb3IgdGhpcyBjb25uZWN0aW9uLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbm5lY3RPcHRpb25zLnBhc3N3b3JkIC0gQXV0aGVudGljYXRpb24gcGFzc3dvcmQgZm9yIHRoaXMgY29ubmVjdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7UGFoby5NZXNzYWdlfSBjb25uZWN0T3B0aW9ucy53aWxsTWVzc2FnZSAtIHNlbnQgYnkgdGhlIHNlcnZlciB3aGVuIHRoZSBjbGllbnRcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICBkaXNjb25uZWN0cyBhYm5vcm1hbGx5LlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbm5lY3RPcHRpb25zLmtlZXBBbGl2ZUludGVydmFsIC0gdGhlIHNlcnZlciBkaXNjb25uZWN0cyB0aGlzIGNsaWVudCBpZlxuICAgICAgICogICAgICAgICAgICAgICAgICAgIHRoZXJlIGlzIG5vIGFjdGl2aXR5IGZvciB0aGlzIG51bWJlciBvZiBzZWNvbmRzLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgIFRoZSBkZWZhdWx0IHZhbHVlIG9mIDYwIHNlY29uZHMgaXMgYXNzdW1lZCBpZiBub3Qgc2V0LlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBjb25uZWN0T3B0aW9ucy5jbGVhblNlc3Npb24gLSBpZiB0cnVlKGRlZmF1bHQpIHRoZSBjbGllbnQgYW5kIHNlcnZlclxuICAgICAgICogICAgICAgICAgICAgICAgICAgIHBlcnNpc3RlbnQgc3RhdGUgaXMgZGVsZXRlZCBvbiBzdWNjZXNzZnVsIGNvbm5lY3QuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNvbm5lY3RPcHRpb25zLnVzZVNTTCAtIGlmIHByZXNlbnQgYW5kIHRydWUsIHVzZSBhbiBTU0wgV2Vic29ja2V0IGNvbm5lY3Rpb24uXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gY29ubmVjdE9wdGlvbnMuaW52b2NhdGlvbkNvbnRleHQgLSBwYXNzZWQgdG8gdGhlIG9uU3VjY2VzcyBjYWxsYmFjayBvciBvbkZhaWx1cmUgY2FsbGJhY2suXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25uZWN0T3B0aW9ucy5vblN1Y2Nlc3MgLSBjYWxsZWQgd2hlbiB0aGUgY29ubmVjdCBhY2tub3dsZWRnZW1lbnRcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICAgKiBBIHNpbmdsZSByZXNwb25zZSBvYmplY3QgcGFyYW1ldGVyIGlzIHBhc3NlZCB0byB0aGUgb25TdWNjZXNzIGNhbGxiYWNrIGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBmaWVsZHM6XG4gICAgICAgKiA8b2w+XG4gICAgICAgKiA8bGk+aW52b2NhdGlvbkNvbnRleHQgYXMgcGFzc2VkIGluIHRvIHRoZSBvblN1Y2Nlc3MgbWV0aG9kIGluIHRoZSBjb25uZWN0T3B0aW9ucy5cbiAgICAgICAqIDwvb2w+XG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25uZWN0T3B0aW9ucy5vbkZhaWx1cmUgLSBjYWxsZWQgd2hlbiB0aGUgY29ubmVjdCByZXF1ZXN0IGhhcyBmYWlsZWQgb3IgdGltZWQgb3V0LlxuICAgICAgICogQSBzaW5nbGUgcmVzcG9uc2Ugb2JqZWN0IHBhcmFtZXRlciBpcyBwYXNzZWQgdG8gdGhlIG9uRmFpbHVyZSBjYWxsYmFjayBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICAgICAgICogPG9sPlxuICAgICAgICogPGxpPmludm9jYXRpb25Db250ZXh0IGFzIHBhc3NlZCBpbiB0byB0aGUgb25GYWlsdXJlIG1ldGhvZCBpbiB0aGUgY29ubmVjdE9wdGlvbnMuXG4gICAgICAgKiA8bGk+ZXJyb3JDb2RlIGEgbnVtYmVyIGluZGljYXRpbmcgdGhlIG5hdHVyZSBvZiB0aGUgZXJyb3IuXG4gICAgICAgKiA8bGk+ZXJyb3JNZXNzYWdlIHRleHQgZGVzY3JpYmluZyB0aGUgZXJyb3IuXG4gICAgICAgKiA8L29sPlxuICAgICAgICogQHBhcmFtIHthcnJheX0gY29ubmVjdE9wdGlvbnMuaG9zdHMgLSBJZiBwcmVzZW50IHRoaXMgY29udGFpbnMgZWl0aGVyIGEgc2V0IG9mIGhvc3RuYW1lcyBvciBmdWxseSBxdWFsaWZpZWRcbiAgICAgICAqIFdlYlNvY2tldCBVUklzICh3czovL2lvdC5lY2xpcHNlLm9yZzo4MC93cyksIHRoYXQgYXJlIHRyaWVkIGluIG9yZGVyIGluIHBsYWNlXG4gICAgICAgKiBvZiB0aGUgaG9zdCBhbmQgcG9ydCBwYXJhbWF0ZXIgb24gdGhlIGNvbnN0cnV0b3IuIFRoZSBob3N0cyBhcmUgdHJpZWQgb25lIGF0IGF0IHRpbWUgaW4gb3JkZXIgdW50aWxcbiAgICAgICAqIG9uZSBvZiB0aGVuIHN1Y2NlZWRzLlxuICAgICAgICogQHBhcmFtIHthcnJheX0gY29ubmVjdE9wdGlvbnMucG9ydHMgLSBJZiBwcmVzZW50IHRoZSBzZXQgb2YgcG9ydHMgbWF0Y2hpbmcgdGhlIGhvc3RzLiBJZiBob3N0cyBjb250YWlucyBVUklzLCB0aGlzIHByb3BlcnR5XG4gICAgICAgKiBpcyBub3QgdXNlZC5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY29ubmVjdE9wdGlvbnMucmVjb25uZWN0IC0gU2V0cyB3aGV0aGVyIHRoZSBjbGllbnQgd2lsbCBhdXRvbWF0aWNhbGx5IGF0dGVtcHQgdG8gcmVjb25uZWN0XG4gICAgICAgKiB0byB0aGUgc2VydmVyIGlmIHRoZSBjb25uZWN0aW9uIGlzIGxvc3QuXG4gICAgICAgKjx1bD5cbiAgICAgICAqPGxpPklmIHNldCB0byBmYWxzZSwgdGhlIGNsaWVudCB3aWxsIG5vdCBhdHRlbXB0IHRvIGF1dG9tYXRpY2FsbHkgcmVjb25uZWN0IHRvIHRoZSBzZXJ2ZXIgaW4gdGhlIGV2ZW50IHRoYXQgdGhlXG4gICAgICAgKiBjb25uZWN0aW9uIGlzIGxvc3QuPC9saT5cbiAgICAgICAqPGxpPklmIHNldCB0byB0cnVlLCBpbiB0aGUgZXZlbnQgdGhhdCB0aGUgY29ubmVjdGlvbiBpcyBsb3N0LCB0aGUgY2xpZW50IHdpbGwgYXR0ZW1wdCB0byByZWNvbm5lY3QgdG8gdGhlIHNlcnZlci5cbiAgICAgICAqIEl0IHdpbGwgaW5pdGlhbGx5IHdhaXQgMSBzZWNvbmQgYmVmb3JlIGl0IGF0dGVtcHRzIHRvIHJlY29ubmVjdCwgZm9yIGV2ZXJ5IGZhaWxlZCByZWNvbm5lY3QgYXR0ZW1wdCwgdGhlIGRlbGF5XG4gICAgICAgKiB3aWxsIGRvdWJsZSB1bnRpbCBpdCBpcyBhdCAyIG1pbnV0ZXMgYXQgd2hpY2ggcG9pbnQgdGhlIGRlbGF5IHdpbGwgc3RheSBhdCAyIG1pbnV0ZXMuPC9saT5cbiAgICAgICAqPC91bD5cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvbiAtIFRoZSB2ZXJzaW9uIG9mIE1RVFQgdG8gdXNlIHRvIGNvbm5lY3QgdG8gdGhlIE1RVFQgQnJva2VyLlxuICAgICAgICo8dWw+XG4gICAgICAgKjxsaT4zIC0gTVFUVCBWMy4xPC9saT5cbiAgICAgICAqPGxpPjQgLSBNUVRUIFYzLjEuMTwvbGk+XG4gICAgICAgKjwvdWw+XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uRXhwbGljaXQgLSBJZiBzZXQgdG8gdHJ1ZSwgd2lsbCBmb3JjZSB0aGUgY29ubmVjdGlvbiB0byB1c2UgdGhlXG4gICAgICAgKiBzZWxlY3RlZCBNUVRUIFZlcnNpb24gb3Igd2lsbCBmYWlsIHRvIGNvbm5lY3QuXG4gICAgICAgKiBAcGFyYW0ge2FycmF5fSBjb25uZWN0T3B0aW9ucy51cmlzIC0gSWYgcHJlc2VudCwgc2hvdWxkIGNvbnRhaW4gYSBsaXN0IG9mIGZ1bGx5IHF1YWxpZmllZCBXZWJTb2NrZXQgdXJpc1xuICAgICAgICogKGUuZy4gd3M6Ly9pb3QuZWNsaXBzZS5vcmc6ODAvd3MpLCB0aGF0IGFyZSB0cmllZCBpbiBvcmRlciBpbiBwbGFjZSBvZiB0aGUgaG9zdCBhbmQgcG9ydCBwYXJhbWV0ZXIgb2YgdGhlIGNvbnN0cnV0b3IuXG4gICAgICAgKiBUaGUgdXJpcyBhcmUgdHJpZWQgb25lIGF0IGEgdGltZSBpbiBvcmRlciB1bnRpbCBvbmUgb2YgdGhlbSBzdWNjZWVkcy4gRG8gbm90IHVzZSB0aGlzIGluIGNvbmp1bmN0aW9uIHdpdGggaG9zdHMgYXNcbiAgICAgICAqIHRoZSBob3N0cyBhcnJheSB3aWxsIGJlIGNvbnZlcnRlZCB0byB1cmlzIGFuZCB3aWxsIG92ZXJ3cml0ZSB0aGlzIHByb3BlcnR5LlxuICAgICAgICogQHRocm93cyB7SW52YWxpZFN0YXRlfSBJZiB0aGUgY2xpZW50IGlzIG5vdCBpbiBkaXNjb25uZWN0ZWQgc3RhdGUuIFRoZSBjbGllbnQgbXVzdCBoYXZlIHJlY2VpdmVkIGNvbm5lY3Rpb25Mb3N0XG4gICAgICAgKiBvciBkaXNjb25uZWN0ZWQgYmVmb3JlIGNhbGxpbmcgY29ubmVjdCBmb3IgYSBzZWNvbmQgb3Igc3Vic2VxdWVudCB0aW1lLlxuICAgICAgICovXG4gICAgICB0aGlzLmNvbm5lY3QgPSBmdW5jdGlvbihjb25uZWN0T3B0aW9ucykge1xuICAgICAgICBjb25uZWN0T3B0aW9ucyA9IGNvbm5lY3RPcHRpb25zIHx8IHt9O1xuICAgICAgICB2YWxpZGF0ZShjb25uZWN0T3B0aW9ucywge1xuICAgICAgICAgIHRpbWVvdXQ6IFwibnVtYmVyXCIsXG4gICAgICAgICAgdXNlck5hbWU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgcGFzc3dvcmQ6IFwic3RyaW5nXCIsXG4gICAgICAgICAgd2lsbE1lc3NhZ2U6IFwib2JqZWN0XCIsXG4gICAgICAgICAga2VlcEFsaXZlSW50ZXJ2YWw6IFwibnVtYmVyXCIsXG4gICAgICAgICAgY2xlYW5TZXNzaW9uOiBcImJvb2xlYW5cIixcbiAgICAgICAgICB1c2VTU0w6IFwiYm9vbGVhblwiLFxuICAgICAgICAgIGludm9jYXRpb25Db250ZXh0OiBcIm9iamVjdFwiLFxuICAgICAgICAgIG9uU3VjY2VzczogXCJmdW5jdGlvblwiLFxuICAgICAgICAgIG9uRmFpbHVyZTogXCJmdW5jdGlvblwiLFxuICAgICAgICAgIGhvc3RzOiBcIm9iamVjdFwiLFxuICAgICAgICAgIHBvcnRzOiBcIm9iamVjdFwiLFxuICAgICAgICAgIHJlY29ubmVjdDogXCJib29sZWFuXCIsXG4gICAgICAgICAgbXF0dFZlcnNpb246IFwibnVtYmVyXCIsXG4gICAgICAgICAgbXF0dFZlcnNpb25FeHBsaWNpdDogXCJib29sZWFuXCIsXG4gICAgICAgICAgdXJpczogXCJvYmplY3RcIlxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBJZiBubyBrZWVwIGFsaXZlIGludGVydmFsIGlzIHNldCwgYXNzdW1lIDYwIHNlY29uZHMuXG4gICAgICAgIGlmIChjb25uZWN0T3B0aW9ucy5rZWVwQWxpdmVJbnRlcnZhbCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgIGNvbm5lY3RPcHRpb25zLmtlZXBBbGl2ZUludGVydmFsID0gNjA7XG5cbiAgICAgICAgaWYgKGNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uID4gNCB8fCBjb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvbiA8IDMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9BUkdVTUVOVCwgW1xuICAgICAgICAgICAgICBjb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvbixcbiAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvblwiXG4gICAgICAgICAgICBdKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29ubmVjdE9wdGlvbnMubXF0dFZlcnNpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uRXhwbGljaXQgPSBmYWxzZTtcbiAgICAgICAgICBjb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvbiA9IDQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29ubmVjdE9wdGlvbnMubXF0dFZlcnNpb25FeHBsaWNpdCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvL0NoZWNrIHRoYXQgaWYgcGFzc3dvcmQgaXMgc2V0LCBzbyBpcyB1c2VybmFtZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgY29ubmVjdE9wdGlvbnMucGFzc3dvcmQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgIGNvbm5lY3RPcHRpb25zLnVzZXJOYW1lID09PSB1bmRlZmluZWRcbiAgICAgICAgKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgIGNvbm5lY3RPcHRpb25zLnBhc3N3b3JkLFxuICAgICAgICAgICAgICBcImNvbm5lY3RPcHRpb25zLnBhc3N3b3JkXCJcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgKTtcblxuICAgICAgICBpZiAoY29ubmVjdE9wdGlvbnMud2lsbE1lc3NhZ2UpIHtcbiAgICAgICAgICBpZiAoIShjb25uZWN0T3B0aW9ucy53aWxsTWVzc2FnZSBpbnN0YW5jZW9mIE1lc3NhZ2UpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbXG4gICAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMud2lsbE1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy53aWxsTWVzc2FnZVwiXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIC8vIFRoZSB3aWxsIG1lc3NhZ2UgbXVzdCBoYXZlIGEgcGF5bG9hZCB0aGF0IGNhbiBiZSByZXByZXNlbnRlZCBhcyBhIHN0cmluZy5cbiAgICAgICAgICAvLyBDYXVzZSB0aGUgd2lsbE1lc3NhZ2UgdG8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIHRoaXMgaXMgbm90IHRoZSBjYXNlLlxuICAgICAgICAgIGNvbm5lY3RPcHRpb25zLndpbGxNZXNzYWdlLnN0cmluZ1BheWxvYWQgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25uZWN0T3B0aW9ucy53aWxsTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX1RZUEUsIFtcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29ubmVjdE9wdGlvbnMud2lsbE1lc3NhZ2UuZGVzdGluYXRpb25OYW1lLFxuICAgICAgICAgICAgICAgIFwiY29ubmVjdE9wdGlvbnMud2lsbE1lc3NhZ2UuZGVzdGluYXRpb25OYW1lXCJcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjb25uZWN0T3B0aW9ucy5jbGVhblNlc3Npb24gPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgY29ubmVjdE9wdGlvbnMuY2xlYW5TZXNzaW9uID0gdHJ1ZTtcbiAgICAgICAgaWYgKGNvbm5lY3RPcHRpb25zLmhvc3RzKSB7XG4gICAgICAgICAgaWYgKCEoY29ubmVjdE9wdGlvbnMuaG9zdHMgaW5zdGFuY2VvZiBBcnJheSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMuaG9zdHMsXG4gICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5ob3N0c1wiXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGlmIChjb25uZWN0T3B0aW9ucy5ob3N0cy5sZW5ndGggPCAxKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9BUkdVTUVOVCwgW1xuICAgICAgICAgICAgICAgIGNvbm5lY3RPcHRpb25zLmhvc3RzLFxuICAgICAgICAgICAgICAgIFwiY29ubmVjdE9wdGlvbnMuaG9zdHNcIlxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgIHZhciB1c2luZ1VSSXMgPSBmYWxzZTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbm5lY3RPcHRpb25zLmhvc3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbm5lY3RPcHRpb25zLmhvc3RzW2ldICE9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfVFlQRSwgW1xuICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbm5lY3RPcHRpb25zLmhvc3RzW2ldLFxuICAgICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5ob3N0c1tcIiArIGkgKyBcIl1cIlxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIC9eKHdzcz8pOlxcL1xcLygoXFxbKC4rKVxcXSl8KFteXFwvXSs/KSkoOihcXGQrKSk/KFxcLy4qKSQvLnRlc3QoXG4gICAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMuaG9zdHNbaV1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdXNpbmdVUklzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICghdXNpbmdVUklzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMuaG9zdHNbaV0sXG4gICAgICAgICAgICAgICAgICAgIFwiY29ubmVjdE9wdGlvbnMuaG9zdHNbXCIgKyBpICsgXCJdXCJcbiAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh1c2luZ1VSSXMpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgICAgICBjb25uZWN0T3B0aW9ucy5ob3N0c1tpXSxcbiAgICAgICAgICAgICAgICAgIFwiY29ubmVjdE9wdGlvbnMuaG9zdHNbXCIgKyBpICsgXCJdXCJcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdXNpbmdVUklzKSB7XG4gICAgICAgICAgICBpZiAoIWNvbm5lY3RPcHRpb25zLnBvcnRzKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtcbiAgICAgICAgICAgICAgICAgIGNvbm5lY3RPcHRpb25zLnBvcnRzLFxuICAgICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5wb3J0c1wiXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghKGNvbm5lY3RPcHRpb25zLnBvcnRzIGluc3RhbmNlb2YgQXJyYXkpKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtcbiAgICAgICAgICAgICAgICAgIGNvbm5lY3RPcHRpb25zLnBvcnRzLFxuICAgICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5wb3J0c1wiXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChjb25uZWN0T3B0aW9ucy5ob3N0cy5sZW5ndGggIT09IGNvbm5lY3RPcHRpb25zLnBvcnRzLmxlbmd0aClcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgICAgICBjb25uZWN0T3B0aW9ucy5wb3J0cyxcbiAgICAgICAgICAgICAgICAgIFwiY29ubmVjdE9wdGlvbnMucG9ydHNcIlxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbm5lY3RPcHRpb25zLnVyaXMgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb25uZWN0T3B0aW9ucy5ob3N0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbm5lY3RPcHRpb25zLnBvcnRzW2ldICE9PSBcIm51bWJlclwiIHx8XG4gICAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMucG9ydHNbaV0gPCAwXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjb25uZWN0T3B0aW9ucy5wb3J0c1tpXSxcbiAgICAgICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5wb3J0c1tcIiArIGkgKyBcIl1cIlxuICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB2YXIgaG9zdCA9IGNvbm5lY3RPcHRpb25zLmhvc3RzW2ldO1xuICAgICAgICAgICAgICB2YXIgcG9ydCA9IGNvbm5lY3RPcHRpb25zLnBvcnRzW2ldO1xuXG4gICAgICAgICAgICAgIHZhciBpcHY2ID0gaG9zdC5pbmRleE9mKFwiOlwiKSAhPT0gLTE7XG4gICAgICAgICAgICAgIHVyaSA9XG4gICAgICAgICAgICAgICAgXCJ3czovL1wiICsgKGlwdjYgPyBcIltcIiArIGhvc3QgKyBcIl1cIiA6IGhvc3QpICsgXCI6XCIgKyBwb3J0ICsgcGF0aDtcbiAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMudXJpcy5wdXNoKHVyaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbm5lY3RPcHRpb25zLnVyaXMgPSBjb25uZWN0T3B0aW9ucy5ob3N0cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjbGllbnQuY29ubmVjdChjb25uZWN0T3B0aW9ucyk7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIFN1YnNjcmliZSBmb3IgbWVzc2FnZXMsIHJlcXVlc3QgcmVjZWlwdCBvZiBhIGNvcHkgb2YgbWVzc2FnZXMgc2VudCB0byB0aGUgZGVzdGluYXRpb25zIGRlc2NyaWJlZCBieSB0aGUgZmlsdGVyLlxuICAgICAgICpcbiAgICAgICAqIEBuYW1lIFBhaG8uQ2xpZW50I3N1YnNjcmliZVxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsdGVyIGRlc2NyaWJpbmcgdGhlIGRlc3RpbmF0aW9ucyB0byByZWNlaXZlIG1lc3NhZ2VzIGZyb20uXG4gICAgICAgKiA8YnI+XG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gc3Vic2NyaWJlT3B0aW9ucyAtIHVzZWQgdG8gY29udHJvbCB0aGUgc3Vic2NyaXB0aW9uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnNjcmliZU9wdGlvbnMucW9zIC0gdGhlIG1heGltdW0gcW9zIG9mIGFueSBwdWJsaWNhdGlvbnMgc2VudFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXMgYSByZXN1bHQgb2YgbWFraW5nIHRoaXMgc3Vic2NyaXB0aW9uLlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IHN1YnNjcmliZU9wdGlvbnMuaW52b2NhdGlvbkNvbnRleHQgLSBwYXNzZWQgdG8gdGhlIG9uU3VjY2VzcyBjYWxsYmFja1xuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Igb25GYWlsdXJlIGNhbGxiYWNrLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gc3Vic2NyaWJlT3B0aW9ucy5vblN1Y2Nlc3MgLSBjYWxsZWQgd2hlbiB0aGUgc3Vic2NyaWJlIGFja25vd2xlZGdlbWVudFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzIGJlZW4gcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBzaW5nbGUgcmVzcG9uc2Ugb2JqZWN0IHBhcmFtZXRlciBpcyBwYXNzZWQgdG8gdGhlIG9uU3VjY2VzcyBjYWxsYmFjayBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmludm9jYXRpb25Db250ZXh0IGlmIHNldCBpbiB0aGUgc3Vic2NyaWJlT3B0aW9ucy5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdWJzY3JpYmVPcHRpb25zLm9uRmFpbHVyZSAtIGNhbGxlZCB3aGVuIHRoZSBzdWJzY3JpYmUgcmVxdWVzdCBoYXMgZmFpbGVkIG9yIHRpbWVkIG91dC5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEEgc2luZ2xlIHJlc3BvbnNlIG9iamVjdCBwYXJhbWV0ZXIgaXMgcGFzc2VkIHRvIHRoZSBvbkZhaWx1cmUgY2FsbGJhY2sgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIGZpZWxkczpcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5pbnZvY2F0aW9uQ29udGV4dCAtIGlmIHNldCBpbiB0aGUgc3Vic2NyaWJlT3B0aW9ucy5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5lcnJvckNvZGUgLSBhIG51bWJlciBpbmRpY2F0aW5nIHRoZSBuYXR1cmUgb2YgdGhlIGVycm9yLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmVycm9yTWVzc2FnZSAtIHRleHQgZGVzY3JpYmluZyB0aGUgZXJyb3IuXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnNjcmliZU9wdGlvbnMudGltZW91dCAtIHdoaWNoLCBpZiBwcmVzZW50LCBkZXRlcm1pbmVzIHRoZSBudW1iZXIgb2ZcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHMgYWZ0ZXIgd2hpY2ggdGhlIG9uRmFpbHVyZSBjYWxiYWNrIGlzIGNhbGxlZC5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBwcmVzZW5jZSBvZiBhIHRpbWVvdXQgZG9lcyBub3QgcHJldmVudCB0aGUgb25TdWNjZXNzXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayBmcm9tIGJlaW5nIGNhbGxlZCB3aGVuIHRoZSBzdWJzY3JpYmUgY29tcGxldGVzLlxuICAgICAgICogQHRocm93cyB7SW52YWxpZFN0YXRlfSBpZiB0aGUgY2xpZW50IGlzIG5vdCBpbiBjb25uZWN0ZWQgc3RhdGUuXG4gICAgICAgKi9cbiAgICAgIHRoaXMuc3Vic2NyaWJlID0gZnVuY3Rpb24oZmlsdGVyLCBzdWJzY3JpYmVPcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmlsdGVyICE9PSBcInN0cmluZ1wiICYmIGZpbHRlci5jb25zdHJ1Y3RvciAhPT0gQXJyYXkpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudDpcIiArIGZpbHRlcik7XG4gICAgICAgIHN1YnNjcmliZU9wdGlvbnMgPSBzdWJzY3JpYmVPcHRpb25zIHx8IHt9O1xuICAgICAgICB2YWxpZGF0ZShzdWJzY3JpYmVPcHRpb25zLCB7XG4gICAgICAgICAgcW9zOiBcIm51bWJlclwiLFxuICAgICAgICAgIGludm9jYXRpb25Db250ZXh0OiBcIm9iamVjdFwiLFxuICAgICAgICAgIG9uU3VjY2VzczogXCJmdW5jdGlvblwiLFxuICAgICAgICAgIG9uRmFpbHVyZTogXCJmdW5jdGlvblwiLFxuICAgICAgICAgIHRpbWVvdXQ6IFwibnVtYmVyXCJcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzdWJzY3JpYmVPcHRpb25zLnRpbWVvdXQgJiYgIXN1YnNjcmliZU9wdGlvbnMub25GYWlsdXJlKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIFwic3Vic2NyaWJlT3B0aW9ucy50aW1lb3V0IHNwZWNpZmllZCB3aXRoIG5vIG9uRmFpbHVyZSBjYWxsYmFjay5cIlxuICAgICAgICAgICk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2Ygc3Vic2NyaWJlT3B0aW9ucy5xb3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAhKFxuICAgICAgICAgICAgc3Vic2NyaWJlT3B0aW9ucy5xb3MgPT09IDAgfHxcbiAgICAgICAgICAgIHN1YnNjcmliZU9wdGlvbnMucW9zID09PSAxIHx8XG4gICAgICAgICAgICBzdWJzY3JpYmVPcHRpb25zLnFvcyA9PT0gMlxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgIHN1YnNjcmliZU9wdGlvbnMucW9zLFxuICAgICAgICAgICAgICBcInN1YnNjcmliZU9wdGlvbnMucW9zXCJcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgKTtcbiAgICAgICAgY2xpZW50LnN1YnNjcmliZShmaWx0ZXIsIHN1YnNjcmliZU9wdGlvbnMpO1xuICAgICAgfTtcblxuICAgICAgLyoqXG5cdFx0ICogVW5zdWJzY3JpYmUgZm9yIG1lc3NhZ2VzLCBzdG9wIHJlY2VpdmluZyBtZXNzYWdlcyBzZW50IHRvIGRlc3RpbmF0aW9ucyBkZXNjcmliZWQgYnkgdGhlIGZpbHRlci5cblx0XHQgKlxuXHRcdCAqIEBuYW1lIFBhaG8uQ2xpZW50I3Vuc3Vic2NyaWJlXG5cdFx0ICogQGZ1bmN0aW9uXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IGZpbHRlciAtIGRlc2NyaWJpbmcgdGhlIGRlc3RpbmF0aW9ucyB0byByZWNlaXZlIG1lc3NhZ2VzIGZyb20uXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IHVuc3Vic2NyaWJlT3B0aW9ucyAtIHVzZWQgdG8gY29udHJvbCB0aGUgc3Vic2NyaXB0aW9uXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IHVuc3Vic2NyaWJlT3B0aW9ucy5pbnZvY2F0aW9uQ29udGV4dCAtIHBhc3NlZCB0byB0aGUgb25TdWNjZXNzIGNhbGxiYWNrXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICBvciBvbkZhaWx1cmUgY2FsbGJhY2suXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbn0gdW5zdWJzY3JpYmVPcHRpb25zLm9uU3VjY2VzcyAtIGNhbGxlZCB3aGVuIHRoZSB1bnN1YnNjcmliZSBhY2tub3dsZWRnZW1lbnQgaGFzIGJlZW4gcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyLlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBzaW5nbGUgcmVzcG9uc2Ugb2JqZWN0IHBhcmFtZXRlciBpcyBwYXNzZWQgdG8gdGhlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblN1Y2Nlc3MgY2FsbGJhY2sgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIGZpZWxkczpcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5pbnZvY2F0aW9uQ29udGV4dCAtIGlmIHNldCBpbiB0aGUgdW5zdWJzY3JpYmVPcHRpb25zLlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSB1bnN1YnNjcmliZU9wdGlvbnMub25GYWlsdXJlIGNhbGxlZCB3aGVuIHRoZSB1bnN1YnNjcmliZSByZXF1ZXN0IGhhcyBmYWlsZWQgb3IgdGltZWQgb3V0LlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBzaW5nbGUgcmVzcG9uc2Ugb2JqZWN0IHBhcmFtZXRlciBpcyBwYXNzZWQgdG8gdGhlIG9uRmFpbHVyZSBjYWxsYmFjayBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmludm9jYXRpb25Db250ZXh0IC0gaWYgc2V0IGluIHRoZSB1bnN1YnNjcmliZU9wdGlvbnMuXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+ZXJyb3JDb2RlIC0gYSBudW1iZXIgaW5kaWNhdGluZyB0aGUgbmF0dXJlIG9mIHRoZSBlcnJvci5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5lcnJvck1lc3NhZ2UgLSB0ZXh0IGRlc2NyaWJpbmcgdGhlIGVycm9yLlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gdW5zdWJzY3JpYmVPcHRpb25zLnRpbWVvdXQgLSB3aGljaCwgaWYgcHJlc2VudCwgZGV0ZXJtaW5lcyB0aGUgbnVtYmVyIG9mIHNlY29uZHNcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyIHdoaWNoIHRoZSBvbkZhaWx1cmUgY2FsbGJhY2sgaXMgY2FsbGVkLiBUaGUgcHJlc2VuY2Ugb2Zcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgdGltZW91dCBkb2VzIG5vdCBwcmV2ZW50IHRoZSBvblN1Y2Nlc3MgY2FsbGJhY2sgZnJvbSBiZWluZ1xuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVkIHdoZW4gdGhlIHVuc3Vic2NyaWJlIGNvbXBsZXRlc1xuXHRcdCAqIEB0aHJvd3Mge0ludmFsaWRTdGF0ZX0gaWYgdGhlIGNsaWVudCBpcyBub3QgaW4gY29ubmVjdGVkIHN0YXRlLlxuXHRcdCAqL1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IGZ1bmN0aW9uKGZpbHRlciwgdW5zdWJzY3JpYmVPcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmlsdGVyICE9PSBcInN0cmluZ1wiICYmIGZpbHRlci5jb25zdHJ1Y3RvciAhPT0gQXJyYXkpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudDpcIiArIGZpbHRlcik7XG4gICAgICAgIHVuc3Vic2NyaWJlT3B0aW9ucyA9IHVuc3Vic2NyaWJlT3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFsaWRhdGUodW5zdWJzY3JpYmVPcHRpb25zLCB7XG4gICAgICAgICAgaW52b2NhdGlvbkNvbnRleHQ6IFwib2JqZWN0XCIsXG4gICAgICAgICAgb25TdWNjZXNzOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgICAgb25GYWlsdXJlOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgICAgdGltZW91dDogXCJudW1iZXJcIlxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHVuc3Vic2NyaWJlT3B0aW9ucy50aW1lb3V0ICYmICF1bnN1YnNjcmliZU9wdGlvbnMub25GYWlsdXJlKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIFwidW5zdWJzY3JpYmVPcHRpb25zLnRpbWVvdXQgc3BlY2lmaWVkIHdpdGggbm8gb25GYWlsdXJlIGNhbGxiYWNrLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgY2xpZW50LnVuc3Vic2NyaWJlKGZpbHRlciwgdW5zdWJzY3JpYmVPcHRpb25zKTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogU2VuZCBhIG1lc3NhZ2UgdG8gdGhlIGNvbnN1bWVycyBvZiB0aGUgZGVzdGluYXRpb24gaW4gdGhlIE1lc3NhZ2UuXG4gICAgICAgKlxuICAgICAgICogQG5hbWUgUGFoby5DbGllbnQjc2VuZFxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xQYWhvLk1lc3NhZ2V9IHRvcGljIC0gPGI+bWFuZGF0b3J5PC9iPiBUaGUgbmFtZSBvZiB0aGUgZGVzdGluYXRpb24gdG8gd2hpY2ggdGhlIG1lc3NhZ2UgaXMgdG8gYmUgc2VudC5cbiAgICAgICAqIFx0XHRcdFx0XHQgICAtIElmIGl0IGlzIHRoZSBvbmx5IHBhcmFtZXRlciwgdXNlZCBhcyBQYWhvLk1lc3NhZ2Ugb2JqZWN0LlxuICAgICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXlCdWZmZXJ9IHBheWxvYWQgLSBUaGUgbWVzc2FnZSBkYXRhIHRvIGJlIHNlbnQuXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gcW9zIFRoZSBRdWFsaXR5IG9mIFNlcnZpY2UgdXNlZCB0byBkZWxpdmVyIHRoZSBtZXNzYWdlLlxuICAgICAgICogXHRcdDxkbD5cbiAgICAgICAqIFx0XHRcdDxkdD4wIEJlc3QgZWZmb3J0IChkZWZhdWx0KS5cbiAgICAgICAqICAgICBcdFx0XHQ8ZHQ+MSBBdCBsZWFzdCBvbmNlLlxuICAgICAgICogICAgIFx0XHRcdDxkdD4yIEV4YWN0bHkgb25jZS5cbiAgICAgICAqIFx0XHQ8L2RsPlxuICAgICAgICogQHBhcmFtIHtCb29sZWFufSByZXRhaW5lZCBJZiB0cnVlLCB0aGUgbWVzc2FnZSBpcyB0byBiZSByZXRhaW5lZCBieSB0aGUgc2VydmVyIGFuZCBkZWxpdmVyZWRcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgdG8gYm90aCBjdXJyZW50IGFuZCBmdXR1cmUgc3Vic2NyaXB0aW9ucy5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgSWYgZmFsc2UgdGhlIHNlcnZlciBvbmx5IGRlbGl2ZXJzIHRoZSBtZXNzYWdlIHRvIGN1cnJlbnQgc3Vic2NyaWJlcnMsIHRoaXMgaXMgdGhlIGRlZmF1bHQgZm9yIG5ldyBNZXNzYWdlcy5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgQSByZWNlaXZlZCBtZXNzYWdlIGhhcyB0aGUgcmV0YWluZWQgYm9vbGVhbiBzZXQgdG8gdHJ1ZSBpZiB0aGUgbWVzc2FnZSB3YXMgcHVibGlzaGVkXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIHJldGFpbmVkIGJvb2xlYW4gc2V0IHRvIHRydWVcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBzdWJzY3JwdGlvbiB3YXMgbWFkZSBhZnRlciB0aGUgbWVzc2FnZSBoYXMgYmVlbiBwdWJsaXNoZWQuXG4gICAgICAgKiBAdGhyb3dzIHtJbnZhbGlkU3RhdGV9IGlmIHRoZSBjbGllbnQgaXMgbm90IGNvbm5lY3RlZC5cbiAgICAgICAqL1xuICAgICAgdGhpcy5zZW5kID0gZnVuY3Rpb24odG9waWMsIHBheWxvYWQsIHFvcywgcmV0YWluZWQpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2U7XG5cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50LlwiICsgXCJsZW5ndGhcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgaWYgKCEodG9waWMgaW5zdGFuY2VvZiBNZXNzYWdlKSAmJiB0eXBlb2YgdG9waWMgIT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50OlwiICsgdHlwZW9mIHRvcGljKTtcblxuICAgICAgICAgIG1lc3NhZ2UgPSB0b3BpYztcbiAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UuZGVzdGluYXRpb25OYW1lID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9BUkdVTUVOVCwgW1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGVzdGluYXRpb25OYW1lLFxuICAgICAgICAgICAgICAgIFwiTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWVcIlxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICBjbGllbnQuc2VuZChtZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL3BhcmFtZXRlciBjaGVja2luZyBpbiBNZXNzYWdlIG9iamVjdFxuICAgICAgICAgIG1lc3NhZ2UgPSBuZXcgTWVzc2FnZShwYXlsb2FkKTtcbiAgICAgICAgICBtZXNzYWdlLmRlc3RpbmF0aW9uTmFtZSA9IHRvcGljO1xuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIG1lc3NhZ2UucW9zID0gcW9zO1xuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIG1lc3NhZ2UucmV0YWluZWQgPSByZXRhaW5lZDtcbiAgICAgICAgICBjbGllbnQuc2VuZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBQdWJsaXNoIGEgbWVzc2FnZSB0byB0aGUgY29uc3VtZXJzIG9mIHRoZSBkZXN0aW5hdGlvbiBpbiB0aGUgTWVzc2FnZS5cbiAgICAgICAqIFN5bm9ueW0gZm9yIFBhaG8uTXF0dC5DbGllbnQjc2VuZFxuICAgICAgICpcbiAgICAgICAqIEBuYW1lIFBhaG8uQ2xpZW50I3B1Ymxpc2hcbiAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8UGFoby5NZXNzYWdlfSB0b3BpYyAtIDxiPm1hbmRhdG9yeTwvYj4gVGhlIG5hbWUgb2YgdGhlIHRvcGljIHRvIHdoaWNoIHRoZSBtZXNzYWdlIGlzIHRvIGJlIHB1Ymxpc2hlZC5cbiAgICAgICAqIFx0XHRcdFx0XHQgICAtIElmIGl0IGlzIHRoZSBvbmx5IHBhcmFtZXRlciwgdXNlZCBhcyBQYWhvLk1lc3NhZ2Ugb2JqZWN0LlxuICAgICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXlCdWZmZXJ9IHBheWxvYWQgLSBUaGUgbWVzc2FnZSBkYXRhIHRvIGJlIHB1Ymxpc2hlZC5cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBxb3MgVGhlIFF1YWxpdHkgb2YgU2VydmljZSB1c2VkIHRvIGRlbGl2ZXIgdGhlIG1lc3NhZ2UuXG4gICAgICAgKiBcdFx0PGRsPlxuICAgICAgICogXHRcdFx0PGR0PjAgQmVzdCBlZmZvcnQgKGRlZmF1bHQpLlxuICAgICAgICogICAgIFx0XHRcdDxkdD4xIEF0IGxlYXN0IG9uY2UuXG4gICAgICAgKiAgICAgXHRcdFx0PGR0PjIgRXhhY3RseSBvbmNlLlxuICAgICAgICogXHRcdDwvZGw+XG4gICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJldGFpbmVkIElmIHRydWUsIHRoZSBtZXNzYWdlIGlzIHRvIGJlIHJldGFpbmVkIGJ5IHRoZSBzZXJ2ZXIgYW5kIGRlbGl2ZXJlZFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICB0byBib3RoIGN1cnJlbnQgYW5kIGZ1dHVyZSBzdWJzY3JpcHRpb25zLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICBJZiBmYWxzZSB0aGUgc2VydmVyIG9ubHkgZGVsaXZlcnMgdGhlIG1lc3NhZ2UgdG8gY3VycmVudCBzdWJzY3JpYmVycywgdGhpcyBpcyB0aGUgZGVmYXVsdCBmb3IgbmV3IE1lc3NhZ2VzLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICBBIHJlY2VpdmVkIG1lc3NhZ2UgaGFzIHRoZSByZXRhaW5lZCBib29sZWFuIHNldCB0byB0cnVlIGlmIHRoZSBtZXNzYWdlIHdhcyBwdWJsaXNoZWRcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgcmV0YWluZWQgYm9vbGVhbiBzZXQgdG8gdHJ1ZVxuICAgICAgICogICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHN1YnNjcnB0aW9uIHdhcyBtYWRlIGFmdGVyIHRoZSBtZXNzYWdlIGhhcyBiZWVuIHB1Ymxpc2hlZC5cbiAgICAgICAqIEB0aHJvd3Mge0ludmFsaWRTdGF0ZX0gaWYgdGhlIGNsaWVudCBpcyBub3QgY29ubmVjdGVkLlxuICAgICAgICovXG4gICAgICB0aGlzLnB1Ymxpc2ggPSBmdW5jdGlvbih0b3BpYywgcGF5bG9hZCwgcW9zLCByZXRhaW5lZCkge1xuICAgICAgICB2YXIgbWVzc2FnZTtcblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQuXCIgKyBcImxlbmd0aFwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICBpZiAoISh0b3BpYyBpbnN0YW5jZW9mIE1lc3NhZ2UpICYmIHR5cGVvZiB0b3BpYyAhPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQ6XCIgKyB0eXBlb2YgdG9waWMpO1xuXG4gICAgICAgICAgbWVzc2FnZSA9IHRvcGljO1xuICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgICAgbWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAgXCJNZXNzYWdlLmRlc3RpbmF0aW9uTmFtZVwiXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGNsaWVudC5zZW5kKG1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vcGFyYW1ldGVyIGNoZWNraW5nIGluIE1lc3NhZ2Ugb2JqZWN0XG4gICAgICAgICAgbWVzc2FnZSA9IG5ldyBNZXNzYWdlKHBheWxvYWQpO1xuICAgICAgICAgIG1lc3NhZ2UuZGVzdGluYXRpb25OYW1lID0gdG9waWM7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgbWVzc2FnZS5xb3MgPSBxb3M7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgbWVzc2FnZS5yZXRhaW5lZCA9IHJldGFpbmVkO1xuICAgICAgICAgIGNsaWVudC5zZW5kKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIE5vcm1hbCBkaXNjb25uZWN0IG9mIHRoaXMgTWVzc2FnaW5nIGNsaWVudCBmcm9tIGl0cyBzZXJ2ZXIuXG4gICAgICAgKlxuICAgICAgICogQG5hbWUgUGFoby5DbGllbnQjZGlzY29ubmVjdFxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBAdGhyb3dzIHtJbnZhbGlkU3RhdGV9IGlmIHRoZSBjbGllbnQgaXMgYWxyZWFkeSBkaXNjb25uZWN0ZWQuXG4gICAgICAgKi9cbiAgICAgIHRoaXMuZGlzY29ubmVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGllbnQuZGlzY29ubmVjdCgpO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgdGhlIGNvbnRlbnRzIG9mIHRoZSB0cmFjZSBsb2cuXG4gICAgICAgKlxuICAgICAgICogQG5hbWUgUGFoby5DbGllbnQjZ2V0VHJhY2VMb2dcbiAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICogQHJldHVybiB7T2JqZWN0W119IHRyYWNlYnVmZmVyIGNvbnRhaW5pbmcgdGhlIHRpbWUgb3JkZXJlZCB0cmFjZSByZWNvcmRzLlxuICAgICAgICovXG4gICAgICB0aGlzLmdldFRyYWNlTG9nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjbGllbnQuZ2V0VHJhY2VMb2coKTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogU3RhcnQgdHJhY2luZy5cbiAgICAgICAqXG4gICAgICAgKiBAbmFtZSBQYWhvLkNsaWVudCNzdGFydFRyYWNlXG4gICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAqL1xuICAgICAgdGhpcy5zdGFydFRyYWNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsaWVudC5zdGFydFRyYWNlKCk7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIFN0b3AgdHJhY2luZy5cbiAgICAgICAqXG4gICAgICAgKiBAbmFtZSBQYWhvLkNsaWVudCNzdG9wVHJhY2VcbiAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICovXG4gICAgICB0aGlzLnN0b3BUcmFjZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGllbnQuc3RvcFRyYWNlKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmlzQ29ubmVjdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjbGllbnQuY29ubmVjdGVkO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQW4gYXBwbGljYXRpb24gbWVzc2FnZSwgc2VudCBvciByZWNlaXZlZC5cbiAgICAgKiA8cD5cbiAgICAgKiBBbGwgYXR0cmlidXRlcyBtYXkgYmUgbnVsbCwgd2hpY2ggaW1wbGllcyB0aGUgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAbmFtZSBQYWhvLk1lc3NhZ2VcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheUJ1ZmZlcn0gcGF5bG9hZCBUaGUgbWVzc2FnZSBkYXRhIHRvIGJlIHNlbnQuXG4gICAgICogPHA+XG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IHBheWxvYWRTdHJpbmcgPGk+cmVhZCBvbmx5PC9pPiBUaGUgcGF5bG9hZCBhcyBhIHN0cmluZyBpZiB0aGUgcGF5bG9hZCBjb25zaXN0cyBvZiB2YWxpZCBVVEYtOCBjaGFyYWN0ZXJzLlxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXlCdWZmZXJ9IHBheWxvYWRCeXRlcyA8aT5yZWFkIG9ubHk8L2k+IFRoZSBwYXlsb2FkIGFzIGFuIEFycmF5QnVmZmVyLlxuICAgICAqIDxwPlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXN0aW5hdGlvbk5hbWUgPGI+bWFuZGF0b3J5PC9iPiBUaGUgbmFtZSBvZiB0aGUgZGVzdGluYXRpb24gdG8gd2hpY2ggdGhlIG1lc3NhZ2UgaXMgdG8gYmUgc2VudFxuICAgICAqICAgICAgICAgICAgICAgICAgICAoZm9yIG1lc3NhZ2VzIGFib3V0IHRvIGJlIHNlbnQpIG9yIHRoZSBuYW1lIG9mIHRoZSBkZXN0aW5hdGlvbiBmcm9tIHdoaWNoIHRoZSBtZXNzYWdlIGhhcyBiZWVuIHJlY2VpdmVkLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAoZm9yIG1lc3NhZ2VzIHJlY2VpdmVkIGJ5IHRoZSBvbk1lc3NhZ2UgZnVuY3Rpb24pLlxuICAgICAqIDxwPlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBxb3MgVGhlIFF1YWxpdHkgb2YgU2VydmljZSB1c2VkIHRvIGRlbGl2ZXIgdGhlIG1lc3NhZ2UuXG4gICAgICogPGRsPlxuICAgICAqICAgICA8ZHQ+MCBCZXN0IGVmZm9ydCAoZGVmYXVsdCkuXG4gICAgICogICAgIDxkdD4xIEF0IGxlYXN0IG9uY2UuXG4gICAgICogICAgIDxkdD4yIEV4YWN0bHkgb25jZS5cbiAgICAgKiA8L2RsPlxuICAgICAqIDxwPlxuICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gcmV0YWluZWQgSWYgdHJ1ZSwgdGhlIG1lc3NhZ2UgaXMgdG8gYmUgcmV0YWluZWQgYnkgdGhlIHNlcnZlciBhbmQgZGVsaXZlcmVkXG4gICAgICogICAgICAgICAgICAgICAgICAgICB0byBib3RoIGN1cnJlbnQgYW5kIGZ1dHVyZSBzdWJzY3JpcHRpb25zLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgSWYgZmFsc2UgdGhlIHNlcnZlciBvbmx5IGRlbGl2ZXJzIHRoZSBtZXNzYWdlIHRvIGN1cnJlbnQgc3Vic2NyaWJlcnMsIHRoaXMgaXMgdGhlIGRlZmF1bHQgZm9yIG5ldyBNZXNzYWdlcy5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgIEEgcmVjZWl2ZWQgbWVzc2FnZSBoYXMgdGhlIHJldGFpbmVkIGJvb2xlYW4gc2V0IHRvIHRydWUgaWYgdGhlIG1lc3NhZ2Ugd2FzIHB1Ymxpc2hlZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgcmV0YWluZWQgYm9vbGVhbiBzZXQgdG8gdHJ1ZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBzdWJzY3JwdGlvbiB3YXMgbWFkZSBhZnRlciB0aGUgbWVzc2FnZSBoYXMgYmVlbiBwdWJsaXNoZWQuXG4gICAgICogPHA+XG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBkdXBsaWNhdGUgPGk+cmVhZCBvbmx5PC9pPiBJZiB0cnVlLCB0aGlzIG1lc3NhZ2UgbWlnaHQgYmUgYSBkdXBsaWNhdGUgb2Ygb25lIHdoaWNoIGhhcyBhbHJlYWR5IGJlZW4gcmVjZWl2ZWQuXG4gICAgICogICAgICAgICAgICAgICAgICAgICBUaGlzIGlzIG9ubHkgc2V0IG9uIG1lc3NhZ2VzIHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlci5cbiAgICAgKlxuICAgICAqL1xuICAgIHZhciBNZXNzYWdlID0gZnVuY3Rpb24obmV3UGF5bG9hZCkge1xuICAgICAgdmFyIHBheWxvYWQ7XG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBuZXdQYXlsb2FkID09PSBcInN0cmluZ1wiIHx8XG4gICAgICAgIG5ld1BheWxvYWQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fFxuICAgICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KG5ld1BheWxvYWQpICYmICEobmV3UGF5bG9hZCBpbnN0YW5jZW9mIERhdGFWaWV3KSlcbiAgICAgICkge1xuICAgICAgICBwYXlsb2FkID0gbmV3UGF5bG9hZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbbmV3UGF5bG9hZCwgXCJuZXdQYXlsb2FkXCJdKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlc3RpbmF0aW9uTmFtZTtcbiAgICAgIHZhciBxb3MgPSAwO1xuICAgICAgdmFyIHJldGFpbmVkID0gZmFsc2U7XG4gICAgICB2YXIgZHVwbGljYXRlID0gZmFsc2U7XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgcGF5bG9hZFN0cmluZzoge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIHBheWxvYWQ7XG4gICAgICAgICAgICBlbHNlIHJldHVybiBwYXJzZVVURjgocGF5bG9hZCwgMCwgcGF5bG9hZC5sZW5ndGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcGF5bG9hZEJ5dGVzOiB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXlsb2FkID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoVVRGOExlbmd0aChwYXlsb2FkKSk7XG4gICAgICAgICAgICAgIHZhciBieXRlU3RyZWFtID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgICAgICAgc3RyaW5nVG9VVEY4KHBheWxvYWQsIGJ5dGVTdHJlYW0sIDApO1xuXG4gICAgICAgICAgICAgIHJldHVybiBieXRlU3RyZWFtO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZXN0aW5hdGlvbk5hbWU6IHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVzdGluYXRpb25OYW1lO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihuZXdEZXN0aW5hdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3RGVzdGluYXRpb25OYW1lID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICBkZXN0aW5hdGlvbk5hbWUgPSBuZXdEZXN0aW5hdGlvbk5hbWU7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9BUkdVTUVOVCwgW1xuICAgICAgICAgICAgICAgICAgbmV3RGVzdGluYXRpb25OYW1lLFxuICAgICAgICAgICAgICAgICAgXCJuZXdEZXN0aW5hdGlvbk5hbWVcIlxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBxb3M6IHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcW9zO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihuZXdRb3MpIHtcbiAgICAgICAgICAgIGlmIChuZXdRb3MgPT09IDAgfHwgbmV3UW9zID09PSAxIHx8IG5ld1FvcyA9PT0gMikgcW9zID0gbmV3UW9zO1xuICAgICAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50OlwiICsgbmV3UW9zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJldGFpbmVkOiB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJldGFpbmVkO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihuZXdSZXRhaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdSZXRhaW5lZCA9PT0gXCJib29sZWFuXCIpIHJldGFpbmVkID0gbmV3UmV0YWluZWQ7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9BUkdVTUVOVCwgW25ld1JldGFpbmVkLCBcIm5ld1JldGFpbmVkXCJdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdG9waWM6IHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVzdGluYXRpb25OYW1lO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihuZXdUb3BpYykge1xuICAgICAgICAgICAgZGVzdGluYXRpb25OYW1lID0gbmV3VG9waWM7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkdXBsaWNhdGU6IHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZHVwbGljYXRlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihuZXdEdXBsaWNhdGUpIHtcbiAgICAgICAgICAgIGR1cGxpY2F0ZSA9IG5ld0R1cGxpY2F0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBNb2R1bGUgY29udGVudHMuXG4gICAgcmV0dXJuIHtcbiAgICAgIENsaWVudDogQ2xpZW50LFxuICAgICAgTWVzc2FnZTogTWVzc2FnZVxuICAgIH07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gIH0pKFxuICAgIHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgID8gZ2xvYmFsXG4gICAgICA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICA/IHNlbGZcbiAgICAgIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgPyB3aW5kb3dcbiAgICAgIDoge31cbiAgKTtcbiAgcmV0dXJuIFBhaG9NUVRUO1xufSk7XG4iLCIvKmVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiovXG5pbXBvcnQgXCJAYW16bi9hbWF6b24tY29ubmVjdC13ZWJzb2NrZXQtbWFuYWdlclwiO1xuaW1wb3J0IHsgQ2hhdFNlc3Npb25PYmplY3QgfSBmcm9tIFwiLi9jb3JlL2NoYXRTZXNzaW9uXCI7XG5cbmdsb2JhbC5jb25uZWN0ID0gZ2xvYmFsLmNvbm5lY3QgfHwge307XG5jb25uZWN0LkNoYXRTZXNzaW9uID0gQ2hhdFNlc3Npb25PYmplY3Q7XG5cbmV4cG9ydCBjb25zdCBDaGF0U2Vzc2lvbiA9IENoYXRTZXNzaW9uT2JqZWN0O1xuIiwiIWZ1bmN0aW9uKGUpe3ZhciBuPXt9O2Z1bmN0aW9uIHQocil7aWYobltyXSlyZXR1cm4gbltyXS5leHBvcnRzO3ZhciBvPW5bcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHQpLG8ubD0hMCxvLmV4cG9ydHN9dC5tPWUsdC5jPW4sdC5kPWZ1bmN0aW9uKGUsbixyKXt0Lm8oZSxuKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7ZW51bWVyYWJsZTohMCxnZXQ6cn0pfSx0LnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sdC50PWZ1bmN0aW9uKGUsbil7aWYoMSZuJiYoZT10KGUpKSw4Jm4pcmV0dXJuIGU7aWYoNCZuJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciByPU9iamVjdC5jcmVhdGUobnVsbCk7aWYodC5yKHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJm4mJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgbyBpbiBlKXQuZChyLG8sZnVuY3Rpb24obil7cmV0dXJuIGVbbl19LmJpbmQobnVsbCxvKSk7cmV0dXJuIHJ9LHQubj1mdW5jdGlvbihlKXt2YXIgbj1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gdC5kKG4sXCJhXCIsbiksbn0sdC5vPWZ1bmN0aW9uKGUsbil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pfSx0LnA9XCJcIix0KHQucz0yKX0oW2Z1bmN0aW9uKGUsbix0KXtcInVzZSBzdHJpY3RcIjt2YXIgcj10KDEpO2Z1bmN0aW9uIG8oZSl7cmV0dXJuKG89XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0pKGUpfXZhciBpPXthc3NlcnRUcnVlOmZ1bmN0aW9uKGUsbil7aWYoIWUpdGhyb3cgbmV3IEVycm9yKG4pfSxhc3NlcnROb3ROdWxsOmZ1bmN0aW9uKGUsbil7cmV0dXJuIGkuYXNzZXJ0VHJ1ZShudWxsIT09ZSYmdm9pZCAwIT09byhlKSxPYmplY3Qoci5zcHJpbnRmKShcIiVzIG11c3QgYmUgcHJvdmlkZWRcIixufHxcIkEgdmFsdWVcIikpLGV9LGlzU3RyaW5nOmZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlfSxhc3NlcnRJc05vbkVtcHR5U3RyaW5nOmZ1bmN0aW9uKGUsbil7aWYoIWV8fFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihuK1wiIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmchXCIpfSxhc3NlcnRJc0xpc3Q6ZnVuY3Rpb24oZSxuKXtpZighQXJyYXkuaXNBcnJheShlKSl0aHJvdyBuZXcgRXJyb3IobitcIiBpcyBub3QgYW4gYXJyYXlcIil9LGFzc2VydElzRW51bTpmdW5jdGlvbihlLG4sdCl7dmFyIHI7Zm9yKHI9MDtyPG4ubGVuZ3RoO3IrKylpZihuW3JdPT09ZSlyZXR1cm47dGhyb3cgbmV3IEVycm9yKHQrXCIgcGFzc2VkIGlzIG5vdCB2YWxpZC4gQWxsb3dlZCB2YWx1ZXMgYXJlOiBcIituKX0sbWFrZUVudW06ZnVuY3Rpb24oZSl7dmFyIG49e307cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lLnJlcGxhY2UoL1xcLj8oW2Etel0rKV8/L2csZnVuY3Rpb24oZSxuKXtyZXR1cm4gbi50b1VwcGVyQ2FzZSgpK1wiX1wifSkucmVwbGFjZSgvXyQvLFwiXCIpO25bdF09ZX0pLG59LGlzRnVuY3Rpb246ZnVuY3Rpb24oZSl7cmV0dXJuISEoZSYmZS5jb25zdHJ1Y3RvciYmZS5jYWxsJiZlLmFwcGx5KX0saXNPYmplY3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIShcIm9iamVjdFwiIT09byhlKXx8bnVsbD09PWUpfX07aS5pc1N0cmluZz1mdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZX0saS5pc051bWJlcj1mdW5jdGlvbihlKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgZX07dmFyIGE9bmV3IFJlZ0V4cChcIl4od3NzOi8vKVxcXFx3KlwiKTtpLnZhbGlkV1NVcmw9ZnVuY3Rpb24oZSl7cmV0dXJuIGEudGVzdChlKX0saS5hc3NlcnRJc09iamVjdD1mdW5jdGlvbihlLG4pe2lmKCFpLmlzT2JqZWN0KGUpKXRocm93IG5ldyBFcnJvcihuK1wiIGlzIG5vdCBhbiBvYmplY3QhXCIpfTt2YXIgYz1pLHM9XCJOVUxMXCIsdT1cIkNMSUVOVF9MT0dHRVJcIixsPVwiREVCVUdcIixmPVwiYXdzL3N1YnNjcmliZVwiLHA9XCJhd3MvdW5zdWJzY3JpYmVcIixnPVwiYXdzL2hlYXJ0YmVhdFwiO2Z1bmN0aW9uIGQoZSl7cmV0dXJuKGQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0pKGUpfWZ1bmN0aW9uIGIoZSxuKXtyZXR1cm4hbnx8XCJvYmplY3RcIiE9PWQobikmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG4/ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIGV9KGUpOm59ZnVuY3Rpb24geShlKXtyZXR1cm4oeT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mOmZ1bmN0aW9uKGUpe3JldHVybiBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpfSkoZSl9ZnVuY3Rpb24gbShlLG4pe3JldHVybihtPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24oZSxuKXtyZXR1cm4gZS5fX3Byb3RvX189bixlfSkoZSxuKX1mdW5jdGlvbiB2KGUsbil7aWYoIShlIGluc3RhbmNlb2YgbikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBoKGUsbil7Zm9yKHZhciB0PTA7dDxuLmxlbmd0aDt0Kyspe3ZhciByPW5bdF07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfX1mdW5jdGlvbiBTKGUsbix0KXtyZXR1cm4gbiYmaChlLnByb3RvdHlwZSxuKSx0JiZoKGUsdCksZX12YXIgdz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt2KHRoaXMsZSl9cmV0dXJuIFMoZSxbe2tleTpcImRlYnVnXCIsdmFsdWU6ZnVuY3Rpb24oZSl7fX0se2tleTpcImluZm9cIix2YWx1ZTpmdW5jdGlvbihlKXt9fSx7a2V5Olwid2FyblwiLHZhbHVlOmZ1bmN0aW9uKGUpe319LHtrZXk6XCJlcnJvclwiLHZhbHVlOmZ1bmN0aW9uKGUpe319XSksZX0oKSxrPXtERUJVRzoxMCxJTkZPOjIwLFdBUk46MzAsRVJST1I6NDB9LF89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dih0aGlzLGUpLHRoaXMudXBkYXRlTG9nZ2VyQ29uZmlnKCksdGhpcy5jb25zb2xlTG9nZ2VyV3JhcHBlcj1PKCl9cmV0dXJuIFMoZSxbe2tleTpcIndyaXRlVG9DbGllbnRMb2dnZXJcIix2YWx1ZTpmdW5jdGlvbihlLG4pe2lmKHRoaXMuaGFzQ2xpZW50TG9nZ2VyKCkpc3dpdGNoKGUpe2Nhc2Ugay5ERUJVRzpyZXR1cm4gdGhpcy5fY2xpZW50TG9nZ2VyLmRlYnVnKG4pO2Nhc2Ugay5JTkZPOnJldHVybiB0aGlzLl9jbGllbnRMb2dnZXIuaW5mbyhuKTtjYXNlIGsuV0FSTjpyZXR1cm4gdGhpcy5fY2xpZW50TG9nZ2VyLndhcm4obik7Y2FzZSBrLkVSUk9SOnJldHVybiB0aGlzLl9jbGllbnRMb2dnZXIuZXJyb3Iobil9fX0se2tleTpcImlzTGV2ZWxFbmFibGVkXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGU+PXRoaXMuX2xldmVsfX0se2tleTpcImhhc0NsaWVudExvZ2dlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPT10aGlzLl9jbGllbnRMb2dnZXJ9fSx7a2V5OlwiZ2V0TG9nZ2VyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIG49ZS5wcmVmaXh8fFwiXCI7cmV0dXJuIHRoaXMuX2xvZ3NEZXN0aW5hdGlvbj09PWw/dGhpcy5jb25zb2xlTG9nZ2VyV3JhcHBlcjpuZXcgQyhuKX19LHtrZXk6XCJ1cGRhdGVMb2dnZXJDb25maWdcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgbj1lfHx7fTt0aGlzLl9sZXZlbD1uLmxldmVsfHxrLklORk8sdGhpcy5fY2xpZW50TG9nZ2VyPW4ubG9nZ2VyfHxudWxsLHRoaXMuX2xvZ3NEZXN0aW5hdGlvbj1zLG4uZGVidWcmJih0aGlzLl9sb2dzRGVzdGluYXRpb249bCksbi5sb2dnZXImJih0aGlzLl9sb2dzRGVzdGluYXRpb249dSl9fV0pLGV9KCksVD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt2KHRoaXMsZSl9cmV0dXJuIFMoZSxbe2tleTpcImRlYnVnXCIsdmFsdWU6ZnVuY3Rpb24oKXt9fSx7a2V5OlwiaW5mb1wiLHZhbHVlOmZ1bmN0aW9uKCl7fX0se2tleTpcIndhcm5cIix2YWx1ZTpmdW5jdGlvbigpe319LHtrZXk6XCJlcnJvclwiLHZhbHVlOmZ1bmN0aW9uKCl7fX1dKSxlfSgpLEM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbihlKXt2YXIgdDtyZXR1cm4gdih0aGlzLG4pLCh0PWIodGhpcyx5KG4pLmNhbGwodGhpcykpKS5wcmVmaXg9ZXx8XCJcIix0fXJldHVybiBmdW5jdGlvbihlLG4pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJm51bGwhPT1uKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG4mJm4ucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksbiYmbShlLG4pfShuLFQpLFMobixbe2tleTpcImRlYnVnXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheShlKSx0PTA7dDxlO3QrKyluW3RdPWFyZ3VtZW50c1t0XTt0aGlzLl9sb2coay5ERUJVRyxuKX19LHtrZXk6XCJpbmZvXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheShlKSx0PTA7dDxlO3QrKyluW3RdPWFyZ3VtZW50c1t0XTt0aGlzLl9sb2coay5JTkZPLG4pfX0se2tleTpcIndhcm5cIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KGUpLHQ9MDt0PGU7dCsrKW5bdF09YXJndW1lbnRzW3RdO3RoaXMuX2xvZyhrLldBUk4sbil9fSx7a2V5OlwiZXJyb3JcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KGUpLHQ9MDt0PGU7dCsrKW5bdF09YXJndW1lbnRzW3RdO3RoaXMuX2xvZyhrLkVSUk9SLG4pfX0se2tleTpcIl9zaG91bGRMb2dcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4geC5oYXNDbGllbnRMb2dnZXIoKSYmeC5pc0xldmVsRW5hYmxlZChlKX19LHtrZXk6XCJfd3JpdGVUb0NsaWVudExvZ2dlclwiLHZhbHVlOmZ1bmN0aW9uKGUsbil7eC53cml0ZVRvQ2xpZW50TG9nZ2VyKGUsbil9fSx7a2V5OlwiX2xvZ1wiLHZhbHVlOmZ1bmN0aW9uKGUsbil7aWYodGhpcy5fc2hvdWxkTG9nKGUpKXt2YXIgdD10aGlzLl9jb252ZXJ0VG9TaW5nbGVTdGF0ZW1lbnQobik7dGhpcy5fd3JpdGVUb0NsaWVudExvZ2dlcihlLHQpfX19LHtrZXk6XCJfY29udmVydFRvU2luZ2xlU3RhdGVtZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIG49XCJcIjt0aGlzLnByZWZpeCYmKG4rPXRoaXMucHJlZml4K1wiIFwiKTtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIHI9ZVt0XTtuKz10aGlzLl9jb252ZXJ0VG9TdHJpbmcocikrXCIgXCJ9cmV0dXJuIG59fSx7a2V5OlwiX2NvbnZlcnRUb1N0cmluZ1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3RyeXtpZighZSlyZXR1cm5cIlwiO2lmKGMuaXNTdHJpbmcoZSkpcmV0dXJuIGU7aWYoYy5pc09iamVjdChlKSYmYy5pc0Z1bmN0aW9uKGUudG9TdHJpbmcpKXt2YXIgbj1lLnRvU3RyaW5nKCk7aWYoXCJbb2JqZWN0IE9iamVjdF1cIiE9PW4pcmV0dXJuIG59cmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpfWNhdGNoKG4pe3JldHVybiBjb25zb2xlLmVycm9yKFwiRXJyb3Igd2hpbGUgY29udmVydGluZyBhcmd1bWVudCB0byBzdHJpbmdcIixlLG4pLFwiXCJ9fX1dKSxufSgpLE89ZnVuY3Rpb24oKXt2YXIgZT1uZXcgVDtyZXR1cm4gZS5kZWJ1Zz1jb25zb2xlLmRlYnVnLGUuaW5mbz1jb25zb2xlLmluZm8sZS53YXJuPWNvbnNvbGUud2FybixlLmVycm9yPWNvbnNvbGUuZXJyb3IsZX0seD1uZXcgXzt0LmQobixcImFcIixmdW5jdGlvbigpe3JldHVybiBMfSk7dmFyIEU9ZnVuY3Rpb24oKXt2YXIgZT14LmdldExvZ2dlcih7fSksbj1udWxsLHQ9e3JlY29ubmVjdFdlYlNvY2tldDohMSx3ZWJzb2NrZXRJbml0RmFpbGVkOiExLGxpbmVhckNvbm5lY3RBdHRlbXB0OjAsZXhwb25lbnRpYWxDb25uZWN0QXR0ZW1wdDowLGV4cG9uZW50aWFsQmFja09mZlRpbWU6MSxleHBvbmVudGlhbFRpbWVvdXRIYW5kbGU6bnVsbCxsaWZlVGltZVRpbWVvdXRIYW5kbGU6bnVsbH0scj17cGVuZGluZ1Jlc3BvbnNlOiExLGludGVydmFsSGFuZGxlOm51bGx9LG89e2luaXRGYWlsdXJlOm5ldyBTZXQsZ2V0V2ViU29ja2V0VHJhbnNwb3J0Om51bGwsc3Vic2NyaXB0aW9uVXBkYXRlOm5ldyBTZXQsc3Vic2NyaXB0aW9uRmFpbHVyZTpuZXcgU2V0LHRvcGljOm5ldyBNYXAsYWxsTWVzc2FnZTpuZXcgU2V0LGNvbm5lY3Rpb25HYWluOm5ldyBTZXQsY29ubmVjdGlvbkxvc3Q6bmV3IFNldH0saT17Y29ubkNvbmZpZzpudWxsLHByb21pc2VIYW5kbGU6bnVsbCxwcm9taXNlQ29tcGxldGVkOiExfSxhPXtzdWJzY3JpYmVkOm5ldyBTZXQscGVuZGluZzpuZXcgU2V0fSxzPW5ldyBTZXQoW2YscCxnXSksdT1uYXZpZ2F0b3Iub25MaW5lLGw9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXt1IT09bmF2aWdhdG9yLm9uTGluZSYmKHU9bmF2aWdhdG9yLm9uTGluZSkmJighbnx8bi5yZWFkeVN0YXRlPjEpJiYoZS5pbmZvKFwiTmV0d29yayBvbmxpbmUsIENvbm5lY3RpbmcgdG8gd2Vic29ja2V0XCIpLE8oKSl9LDI1MCksZD1mdW5jdGlvbihlLG4pe2UuZm9yRWFjaChmdW5jdGlvbihlKXtlKG4pfSl9LGI9ZnVuY3Rpb24oKXtpZihyLnBlbmRpbmdSZXNwb25zZSlyZXR1cm4gZS53YXJuKFwiSGVhcnRiZWF0IHJlc3BvbnNlIG5vdCByZWNlaXZlZFwiKSxjbGVhckludGVydmFsKHIuaW50ZXJ2YWxIYW5kbGUpLHIucGVuZGluZ1Jlc3BvbnNlPSExLHZvaWQgaygpO2UuZGVidWcoXCJTZW5kaW5nIGhlYXJ0YmVhdFwiKSxuLnNlbmQoVChnKSksci5wZW5kaW5nUmVzcG9uc2U9ITB9LHk9ZnVuY3Rpb24oKXt0LmxpbmVhckNvbm5lY3RBdHRlbXB0PTAsdC5leHBvbmVudGlhbENvbm5lY3RBdHRlbXB0PTAsdC5leHBvbmVudGlhbEJhY2tPZmZUaW1lPTEsci5wZW5kaW5nUmVzcG9uc2U9ITEsdC5yZWNvbm5lY3RXZWJTb2NrZXQ9ITEsY2xlYXJUaW1lb3V0KHQubGlmZVRpbWVUaW1lb3V0SGFuZGxlKSxjbGVhckludGVydmFsKHIuaW50ZXJ2YWxIYW5kbGUpLGNsZWFyVGltZW91dCh0LmV4cG9uZW50aWFsVGltZW91dEhhbmRsZSl9LG09ZnVuY3Rpb24oKXt0cnl7aWYoZS5pbmZvKFwiV2ViU29ja2V0IGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQhXCIpLGQoby5jb25uZWN0aW9uR2FpbikseSgpLGEuc3Vic2NyaWJlZC5zaXplPjB8fGEucGVuZGluZy5zaXplPjApe3ZhciBjPUFycmF5LmZyb20oYS5zdWJzY3JpYmVkLnZhbHVlcygpKTtjPWMuY29uY2F0KEFycmF5LmZyb20oYS5wZW5kaW5nLnZhbHVlcygpKSksYS5zdWJzY3JpYmVkLmNsZWFyKCksbi5zZW5kKFQoZix7dG9waWNzOmN9KSl9YigpLHIuaW50ZXJ2YWxIYW5kbGU9c2V0SW50ZXJ2YWwoYiwxZTQpLHQubGlmZVRpbWVUaW1lb3V0SGFuZGxlPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLmRlYnVnKFwiU3RhcnRpbmcgc2NoZWR1bGVkIFdlYlNvY2tldCBtYW5hZ2VyIHJlY29ubmVjdFwiKSxrKCl9LDFlMyppLmNvbm5Db25maWcud2ViU29ja2V0VHJhbnNwb3J0LnRyYW5zcG9ydExpZmVUaW1lSW5TZWNvbmRzKX1jYXRjaChuKXtlLmVycm9yKFwiRXJyb3IgYWZ0ZXIgZXN0YWJsaXNoaW5nIHdlYiBzb2NrZXQgY29ubmVjdGlvbiwgZXJyb3I6IFwiLG4pfX0sdj1mdW5jdGlvbihuKXt0LmxpbmVhckNvbm5lY3RBdHRlbXB0PD0xJiZkKG8uY29ubmVjdGlvbkxvc3QpLGUuaW5mbyhcIlNvY2tldCBjb25uZWN0aW9uIGlzIGNsb3NlZC4gZXZlbnQ6IFwiLG4pLHQucmVjb25uZWN0V2ViU29ja2V0JiZFKCl9LGg9ZnVuY3Rpb24obil7ZS5lcnJvcihcIldlYlNvY2tldE1hbmFnZXIgRXJyb3IsIGVycm9yX2V2ZW50OiBcIixuKSxrKCl9LFM9ZnVuY3Rpb24obil7ZS5kZWJ1ZyhcIk1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSB3ZWJTb2NrZXQgc2VydmVyXCIsbi5kYXRhKTt2YXIgdD1KU09OLnBhcnNlKG4uZGF0YSk7c3dpdGNoKHQudG9waWMpe2Nhc2UgZjpcInN1Y2Nlc3NcIj09PXQuY29udGVudC5zdGF0dXM/KHQuY29udGVudC50b3BpY3MuZm9yRWFjaChmdW5jdGlvbihlKXthLnN1YnNjcmliZWQuYWRkKGUpLGEucGVuZGluZy5kZWxldGUoZSl9KSxkKG8uc3Vic2NyaXB0aW9uVXBkYXRlLHQpKTpkKG8uc3Vic2NyaXB0aW9uRmFpbHVyZSx0KTticmVhaztjYXNlIGc6ZS5kZWJ1ZyhcIkhlYXJ0YmVhdCByZXNwb25zZSByZWNlaXZlZFwiKSxyLnBlbmRpbmdSZXNwb25zZT0hMTticmVhaztkZWZhdWx0OmlmKHQudG9waWMpe2lmKDA9PT1vLmFsbE1lc3NhZ2Uuc2l6ZSYmMD09PW8udG9waWMuc2l6ZSlyZXR1cm4gdm9pZCBlLndhcm4oXCJObyByZWdpc3RlcmVkIGNhbGxiYWNrIGxpc3RlbmVyIGZvciBUb3BpYzogXCIsdCk7ZChvLmFsbE1lc3NhZ2UsdCksby50b3BpYy5oYXModC50b3BpYykmJmQoby50b3BpYy5nZXQodC50b3BpYyksdCl9ZWxzZSB0Lm1lc3NhZ2U/ZS53YXJuKFwiV2ViU29ja2V0TWFuYWdlciBNZXNzYWdlIEVycm9yLCBlcnJvcjogXCIsdCk6ZS53YXJuKFwiSW52YWxpZCBpbmNvbWluZyBtZXNzYWdlLCBlcnJvcjogXCIsdCl9fSx3PWZ1bmN0aW9uKGUpe3JldHVybiEoIW58fG4ucmVhZHlTdGF0ZT09PVdlYlNvY2tldC5DTE9TRUQpJiYobi5jbG9zZSgxZTMsZSksITApfSxrPWZ1bmN0aW9uKCl7dT8oY2xlYXJUaW1lb3V0KHQubGlmZVRpbWVUaW1lb3V0SGFuZGxlKSxjbGVhckludGVydmFsKHIuaW50ZXJ2YWxIYW5kbGUpLHQubGluZWFyQ29ubmVjdEF0dGVtcHQ8Mz8odC5saW5lYXJDb25uZWN0QXR0ZW1wdCsrLGUuZGVidWcoXCJTdGFydGluZyBDb25zZWN1dGl2ZSBXZWJTb2NrZXQgcmVjb25uZWN0LCBBdHRlbXB0IDogXCIrdC5saW5lYXJDb25uZWN0QXR0ZW1wdCksdC5yZWNvbm5lY3RXZWJTb2NrZXQ9ITAsTygpKTp0LmV4cG9uZW50aWFsQ29ubmVjdEF0dGVtcHQ8NT8odC5leHBvbmVudGlhbENvbm5lY3RBdHRlbXB0KyssdC5leHBvbmVudGlhbEJhY2tPZmZUaW1lKj0yLGUuZGVidWcoXCJTdGFydGluZyBFeHBvbmVudGlhbCBXZWJTb2NrZXQgcmVjb25uZWN0LCBBdHRlbXB0IDogXCIrdC5leHBvbmVudGlhbENvbm5lY3RBdHRlbXB0K1wiIHdpdGggZGVsYXkgXCIrdC5leHBvbmVudGlhbEJhY2tPZmZUaW1lK1wiIHNlYy5cIiksaS5wcm9taXNlQ29tcGxldGVkPSExLGkuY29ubkNvbmZpZz1udWxsLHQuZXhwb25lbnRpYWxUaW1lb3V0SGFuZGxlPXNldFRpbWVvdXQoZnVuY3Rpb24oKXt0LnJlY29ubmVjdFdlYlNvY2tldD0hMCxPKCl9LDFlMyp0LmV4cG9uZW50aWFsQmFja09mZlRpbWUpKTppLnByb21pc2VDb21wbGV0ZWQmJihlLmVycm9yKFwiQ291bGQgbm90IGNvbm5lY3QgdG8gV2ViU29ja2V0IGFmdGVyIHNldmVyYWwgYXR0ZW1wdHNcIiksXygpKSk6dyhcIk5ldHdvcmsgT2ZmbGluZSwgQ2xvc2luZyBXZWJTb2NrZXQgTWFuYWdlclwiKX0sXz1mdW5jdGlvbigpe3koKSx3KFwiVGVybWluYXRpbmcgV2ViU29ja2V0IE1hbmFnZXJcIiksZS5lcnJvcihcIldlYlNvY2tldCBJbml0aWFsaXphdGlvbiBmYWlsZWRcIiksdC53ZWJzb2NrZXRJbml0RmFpbGVkPSEwLGNsZWFySW50ZXJ2YWwobCksZChvLmluaXRGYWlsdXJlKX0sVD1mdW5jdGlvbihlLG4pe3JldHVybiBKU09OLnN0cmluZ2lmeSh7dG9waWM6ZSxjb250ZW50Om59KX0sQz1mdW5jdGlvbihuKXtyZXR1cm4hIShjLmlzT2JqZWN0KG4pJiZjLmlzT2JqZWN0KG4ud2ViU29ja2V0VHJhbnNwb3J0KSYmYy5pc1N0cmluZyhuLndlYlNvY2tldFRyYW5zcG9ydC51cmwpJiZjLnZhbGlkV1NVcmwobi53ZWJTb2NrZXRUcmFuc3BvcnQudXJsKSYmYy5pc051bWJlcihuLndlYlNvY2tldFRyYW5zcG9ydC50cmFuc3BvcnRMaWZlVGltZUluU2Vjb25kcykmJm4ud2ViU29ja2V0VHJhbnNwb3J0LnRyYW5zcG9ydExpZmVUaW1lSW5TZWNvbmRzPj0zNjAwKXx8KGUuZXJyb3IoXCJJbnZhbGlkIFdlYlNvY2tldCBDb25uZWN0aW9uIENvbmZpZ3VyYXRpb25cIixuKSwhMSl9LE89ZnVuY3Rpb24oKXt0LndlYnNvY2tldEluaXRGYWlsZWR8fChpLmNvbm5Db25maWc9bnVsbCxpLnByb21pc2VDb21wbGV0ZWQ9ITEsaS5wcm9taXNlSGFuZGxlPW8uZ2V0V2ViU29ja2V0VHJhbnNwb3J0KCksaS5wcm9taXNlSGFuZGxlLnRoZW4oZnVuY3Rpb24obil7aS5wcm9taXNlQ29tcGxldGVkPSEwLGUuZGVidWcoXCJTdWNjZXNzZnVsbHkgZmV0Y2hlZCB3ZWJTb2NrZXQgY29ubmVjdGlvbiBjb25maWd1cmF0aW9uXCIpLEMobik/KGkuY29ubkNvbmZpZz1uLHUmJih3KFwiUmVzdGFydGluZyBXZWJTb2NrZXQgTWFuYWdlclwiKXx8RSgpKSk6XygpfSxmdW5jdGlvbihuKXtpLnByb21pc2VDb21wbGV0ZWQ9ITAsZS5lcnJvcihcIkZhaWxlZCB0byBmZXRjaCB3ZWJTb2NrZXQgY29ubmVjdGlvbiBjb25maWd1cmF0aW9uXCIsbiksaygpfSkpfSxFPWZ1bmN0aW9uKCl7aWYoIXQud2Vic29ja2V0SW5pdEZhaWxlZCl7ZS5kZWJ1ZyhcIkluaXRpYWxpemluZyBXZWJzb2NrZXQgTWFuYWdlclwiKTt0cnl7QyhpLmNvbm5Db25maWcpPygobj1uZXcgV2ViU29ja2V0KGkuY29ubkNvbmZpZy53ZWJTb2NrZXRUcmFuc3BvcnQudXJsKSkuYWRkRXZlbnRMaXN0ZW5lcihcIm9wZW5cIixtKSxuLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsUyksbi5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIixoKSxuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbG9zZVwiLHYpKTppLnByb21pc2VDb21wbGV0ZWQmJl8oKX1jYXRjaChuKXtlLmVycm9yKFwiRXJyb3IgSW5pdGlhbGl6aW5nIHdlYi1zb2NrZXQtbWFuYWdlclwiLG4pLF8oKX19fTt0aGlzLmluaXQ9ZnVuY3Rpb24obil7Yy5hc3NlcnRUcnVlKGMuaXNGdW5jdGlvbihuKSxcInRyYW5zcG9ydEhhbmRsZSBtdXN0IGJlIGEgZnVuY3Rpb25cIiksbnVsbD09PW8uZ2V0V2ViU29ja2V0VHJhbnNwb3J0PyhvLmdldFdlYlNvY2tldFRyYW5zcG9ydD1uLE8oKSk6ZS53YXJuKFwiV2ViIFNvY2tldCBNYW5hZ2VyIHdhcyBhbHJlYWR5IGluaXRpYWxpemVkXCIpfSx0aGlzLm9uSW5pdEZhaWx1cmU9ZnVuY3Rpb24oZSl7cmV0dXJuIGMuYXNzZXJ0VHJ1ZShjLmlzRnVuY3Rpb24oZSksXCJjYiBtdXN0IGJlIGEgZnVuY3Rpb25cIiksby5pbml0RmFpbHVyZS5hZGQoZSksdC53ZWJzb2NrZXRJbml0RmFpbGVkJiZlKCksZnVuY3Rpb24oKXtyZXR1cm4gby5pbml0RmFpbHVyZS5kZWxldGUoZSl9fSx0aGlzLm9uQ29ubmVjdGlvbkdhaW49ZnVuY3Rpb24oZSl7cmV0dXJuIGMuYXNzZXJ0VHJ1ZShjLmlzRnVuY3Rpb24oZSksXCJjYiBtdXN0IGJlIGEgZnVuY3Rpb25cIiksby5jb25uZWN0aW9uR2Fpbi5hZGQoZSksbiYmbi5yZWFkeVN0YXRlPT09V2ViU29ja2V0Lk9QRU4mJmUoKSxmdW5jdGlvbigpe3JldHVybiBvLmNvbm5lY3Rpb25HYWluLmRlbGV0ZShlKX19LHRoaXMub25Db25uZWN0aW9uTG9zdD1mdW5jdGlvbihlKXtyZXR1cm4gYy5hc3NlcnRUcnVlKGMuaXNGdW5jdGlvbihlKSxcImNiIG11c3QgYmUgYSBmdW5jdGlvblwiKSxvLmNvbm5lY3Rpb25Mb3N0LmFkZChlKSxuJiZuLnJlYWR5U3RhdGU9PT1XZWJTb2NrZXQuQ0xPU0VEJiZlKCksZnVuY3Rpb24oKXtyZXR1cm4gby5jb25uZWN0aW9uTG9zdC5kZWxldGUoZSl9fSx0aGlzLm9uU3Vic2NyaXB0aW9uVXBkYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBjLmFzc2VydFRydWUoYy5pc0Z1bmN0aW9uKGUpLFwiY2IgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpLG8uc3Vic2NyaXB0aW9uVXBkYXRlLmFkZChlKSxmdW5jdGlvbigpe3JldHVybiBvLnN1YnNjcmlwdGlvblVwZGF0ZS5kZWxldGUoZSl9fSx0aGlzLm9uU3Vic2NyaXB0aW9uRmFpbHVyZT1mdW5jdGlvbihlKXtyZXR1cm4gYy5hc3NlcnRUcnVlKGMuaXNGdW5jdGlvbihlKSxcImNiIG11c3QgYmUgYSBmdW5jdGlvblwiKSxvLnN1YnNjcmlwdGlvbkZhaWx1cmUuYWRkKGUpLGZ1bmN0aW9uKCl7cmV0dXJuIG8uc3Vic2NyaXB0aW9uRmFpbHVyZS5kZWxldGUoZSl9fSx0aGlzLm9uTWVzc2FnZT1mdW5jdGlvbihlLG4pe3JldHVybiBjLmFzc2VydE5vdE51bGwoZSxcInRvcGljTmFtZVwiKSxjLmFzc2VydFRydWUoYy5pc0Z1bmN0aW9uKG4pLFwiY2IgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpLG8udG9waWMuaGFzKGUpP28udG9waWMuZ2V0KGUpLmFkZChuKTpvLnRvcGljLnNldChlLG5ldyBTZXQoW25dKSksZnVuY3Rpb24oKXtyZXR1cm4gby50b3BpYy5nZXQoZSkuZGVsZXRlKG4pfX0sdGhpcy5vbkFsbE1lc3NhZ2U9ZnVuY3Rpb24oZSl7cmV0dXJuIGMuYXNzZXJ0VHJ1ZShjLmlzRnVuY3Rpb24oZSksXCJjYiBtdXN0IGJlIGEgZnVuY3Rpb25cIiksby5hbGxNZXNzYWdlLmFkZChlKSxmdW5jdGlvbigpe3JldHVybiBvLmFsbE1lc3NhZ2UuZGVsZXRlKGUpfX0sdGhpcy5zdWJzY3JpYmVUb3BpY3M9ZnVuY3Rpb24oZSl7Yy5hc3NlcnROb3ROdWxsKGUsXCJ0b3BpY3NcIiksYy5hc3NlcnRJc0xpc3QoZSksZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2EucGVuZGluZy5hZGQoZSl9KSxuJiZuLnJlYWR5U3RhdGU9PT1XZWJTb2NrZXQuT1BFTiYmbi5zZW5kKFQoZix7dG9waWNzOmV9KSl9LHRoaXMuc2VuZE1lc3NhZ2U9ZnVuY3Rpb24odCl7aWYoYy5hc3NlcnRJc09iamVjdCh0LFwicGF5bG9hZFwiKSx2b2lkIDA9PT10LnRvcGljfHxzLmhhcyh0LnRvcGljKSllLndhcm4oXCJDYW5ub3Qgc2VuZCBtZXNzYWdlLCBJbnZhbGlkIHRvcGljXCIsdCk7ZWxzZXt0cnl7dD1KU09OLnN0cmluZ2lmeSh0KX1jYXRjaChuKXtyZXR1cm4gdm9pZCBlLndhcm4oXCJFcnJvciBzdHJpbmdpZnkgbWVzc2FnZVwiLHQpfW4mJm4ucmVhZHlTdGF0ZT09PVdlYlNvY2tldC5PUEVOPyhlLmRlYnVnKFwiV2ViU29ja2V0TWFuYWdlciBzZW5kaW5nIG1lc3NhZ2VcIix0KSxuLnNlbmQodCkpOmUud2FybihcIkNhbm5vdCBzZW5kIG1lc3NhZ2UsIHdlYiBzb2NrZXQgY29ubmVjdGlvbiBpcyBub3Qgb3BlblwiKX19LHRoaXMuY2xvc2VXZWJTb2NrZXQ9ZnVuY3Rpb24oKXt5KCksY2xlYXJJbnRlcnZhbChsKSx3KFwiVXNlciByZXF1ZXN0IHRvIGNsb3NlIFdlYlNvY2tldFwiKX19LEw9e2NyZWF0ZTpmdW5jdGlvbigpe3JldHVybiBuZXcgRX0sc2V0R2xvYmFsQ29uZmlnOmZ1bmN0aW9uKGUpe3ZhciBuPWUubG9nZ2VyQ29uZmlnO3gudXBkYXRlTG9nZ2VyQ29uZmlnKG4pfSxMb2dMZXZlbDprLExvZ2dlcjp3fX0sZnVuY3Rpb24oZSxuLHQpe3ZhciByOyFmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBvPXtub3Rfc3RyaW5nOi9bXnNdLyxub3RfYm9vbDovW150XS8sbm90X3R5cGU6L1teVF0vLG5vdF9wcmltaXRpdmU6L1tedl0vLG51bWJlcjovW2RpZWZnXS8sbnVtZXJpY19hcmc6L1tiY2RpZWZndXhYXS8sanNvbjovW2pdLyxub3RfanNvbjovW15qXS8sdGV4dDovXlteXFx4MjVdKy8sbW9kdWxvOi9eXFx4MjV7Mn0vLHBsYWNlaG9sZGVyOi9eXFx4MjUoPzooWzEtOV1cXGQqKVxcJHxcXCgoW14pXSspXFwpKT8oXFwrKT8oMHwnW14kXSk/KC0pPyhcXGQrKT8oPzpcXC4oXFxkKykpPyhbYi1naWpvc3RUdXZ4WF0pLyxrZXk6L14oW2Etel9dW2Etel9cXGRdKikvaSxrZXlfYWNjZXNzOi9eXFwuKFthLXpfXVthLXpfXFxkXSopL2ksaW5kZXhfYWNjZXNzOi9eXFxbKFxcZCspXFxdLyxzaWduOi9eWystXS99O2Z1bmN0aW9uIGkoZSl7cmV0dXJuIGZ1bmN0aW9uKGUsbil7dmFyIHQscixhLGMscyx1LGwsZixwLGc9MSxkPWUubGVuZ3RoLGI9XCJcIjtmb3Iocj0wO3I8ZDtyKyspaWYoXCJzdHJpbmdcIj09dHlwZW9mIGVbcl0pYis9ZVtyXTtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBlW3JdKXtpZigoYz1lW3JdKS5rZXlzKWZvcih0PW5bZ10sYT0wO2E8Yy5rZXlzLmxlbmd0aDthKyspe2lmKG51bGw9PXQpdGhyb3cgbmV3IEVycm9yKGkoJ1tzcHJpbnRmXSBDYW5ub3QgYWNjZXNzIHByb3BlcnR5IFwiJXNcIiBvZiB1bmRlZmluZWQgdmFsdWUgXCIlc1wiJyxjLmtleXNbYV0sYy5rZXlzW2EtMV0pKTt0PXRbYy5rZXlzW2FdXX1lbHNlIHQ9Yy5wYXJhbV9ubz9uW2MucGFyYW1fbm9dOm5bZysrXTtpZihvLm5vdF90eXBlLnRlc3QoYy50eXBlKSYmby5ub3RfcHJpbWl0aXZlLnRlc3QoYy50eXBlKSYmdCBpbnN0YW5jZW9mIEZ1bmN0aW9uJiYodD10KCkpLG8ubnVtZXJpY19hcmcudGVzdChjLnR5cGUpJiZcIm51bWJlclwiIT10eXBlb2YgdCYmaXNOYU4odCkpdGhyb3cgbmV3IFR5cGVFcnJvcihpKFwiW3NwcmludGZdIGV4cGVjdGluZyBudW1iZXIgYnV0IGZvdW5kICVUXCIsdCkpO3N3aXRjaChvLm51bWJlci50ZXN0KGMudHlwZSkmJihmPXQ+PTApLGMudHlwZSl7Y2FzZVwiYlwiOnQ9cGFyc2VJbnQodCwxMCkudG9TdHJpbmcoMik7YnJlYWs7Y2FzZVwiY1wiOnQ9U3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludCh0LDEwKSk7YnJlYWs7Y2FzZVwiZFwiOmNhc2VcImlcIjp0PXBhcnNlSW50KHQsMTApO2JyZWFrO2Nhc2VcImpcIjp0PUpTT04uc3RyaW5naWZ5KHQsbnVsbCxjLndpZHRoP3BhcnNlSW50KGMud2lkdGgpOjApO2JyZWFrO2Nhc2VcImVcIjp0PWMucHJlY2lzaW9uP3BhcnNlRmxvYXQodCkudG9FeHBvbmVudGlhbChjLnByZWNpc2lvbik6cGFyc2VGbG9hdCh0KS50b0V4cG9uZW50aWFsKCk7YnJlYWs7Y2FzZVwiZlwiOnQ9Yy5wcmVjaXNpb24/cGFyc2VGbG9hdCh0KS50b0ZpeGVkKGMucHJlY2lzaW9uKTpwYXJzZUZsb2F0KHQpO2JyZWFrO2Nhc2VcImdcIjp0PWMucHJlY2lzaW9uP1N0cmluZyhOdW1iZXIodC50b1ByZWNpc2lvbihjLnByZWNpc2lvbikpKTpwYXJzZUZsb2F0KHQpO2JyZWFrO2Nhc2VcIm9cIjp0PShwYXJzZUludCh0LDEwKT4+PjApLnRvU3RyaW5nKDgpO2JyZWFrO2Nhc2VcInNcIjp0PVN0cmluZyh0KSx0PWMucHJlY2lzaW9uP3Quc3Vic3RyaW5nKDAsYy5wcmVjaXNpb24pOnQ7YnJlYWs7Y2FzZVwidFwiOnQ9U3RyaW5nKCEhdCksdD1jLnByZWNpc2lvbj90LnN1YnN0cmluZygwLGMucHJlY2lzaW9uKTp0O2JyZWFrO2Nhc2VcIlRcIjp0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KS5zbGljZSg4LC0xKS50b0xvd2VyQ2FzZSgpLHQ9Yy5wcmVjaXNpb24/dC5zdWJzdHJpbmcoMCxjLnByZWNpc2lvbik6dDticmVhaztjYXNlXCJ1XCI6dD1wYXJzZUludCh0LDEwKT4+PjA7YnJlYWs7Y2FzZVwidlwiOnQ9dC52YWx1ZU9mKCksdD1jLnByZWNpc2lvbj90LnN1YnN0cmluZygwLGMucHJlY2lzaW9uKTp0O2JyZWFrO2Nhc2VcInhcIjp0PShwYXJzZUludCh0LDEwKT4+PjApLnRvU3RyaW5nKDE2KTticmVhaztjYXNlXCJYXCI6dD0ocGFyc2VJbnQodCwxMCk+Pj4wKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX1vLmpzb24udGVzdChjLnR5cGUpP2IrPXQ6KCFvLm51bWJlci50ZXN0KGMudHlwZSl8fGYmJiFjLnNpZ24/cD1cIlwiOihwPWY/XCIrXCI6XCItXCIsdD10LnRvU3RyaW5nKCkucmVwbGFjZShvLnNpZ24sXCJcIikpLHU9Yy5wYWRfY2hhcj9cIjBcIj09PWMucGFkX2NoYXI/XCIwXCI6Yy5wYWRfY2hhci5jaGFyQXQoMSk6XCIgXCIsbD1jLndpZHRoLShwK3QpLmxlbmd0aCxzPWMud2lkdGgmJmw+MD91LnJlcGVhdChsKTpcIlwiLGIrPWMuYWxpZ24/cCt0K3M6XCIwXCI9PT11P3Arcyt0OnMrcCt0KX1yZXR1cm4gYn0oZnVuY3Rpb24oZSl7aWYoY1tlXSlyZXR1cm4gY1tlXTt2YXIgbix0PWUscj1bXSxpPTA7Zm9yKDt0Oyl7aWYobnVsbCE9PShuPW8udGV4dC5leGVjKHQpKSlyLnB1c2goblswXSk7ZWxzZSBpZihudWxsIT09KG49by5tb2R1bG8uZXhlYyh0KSkpci5wdXNoKFwiJVwiKTtlbHNle2lmKG51bGw9PT0obj1vLnBsYWNlaG9sZGVyLmV4ZWModCkpKXRocm93IG5ldyBTeW50YXhFcnJvcihcIltzcHJpbnRmXSB1bmV4cGVjdGVkIHBsYWNlaG9sZGVyXCIpO2lmKG5bMl0pe2l8PTE7dmFyIGE9W10scz1uWzJdLHU9W107aWYobnVsbD09PSh1PW8ua2V5LmV4ZWMocykpKXRocm93IG5ldyBTeW50YXhFcnJvcihcIltzcHJpbnRmXSBmYWlsZWQgdG8gcGFyc2UgbmFtZWQgYXJndW1lbnQga2V5XCIpO2ZvcihhLnB1c2godVsxXSk7XCJcIiE9PShzPXMuc3Vic3RyaW5nKHVbMF0ubGVuZ3RoKSk7KWlmKG51bGwhPT0odT1vLmtleV9hY2Nlc3MuZXhlYyhzKSkpYS5wdXNoKHVbMV0pO2Vsc2V7aWYobnVsbD09PSh1PW8uaW5kZXhfYWNjZXNzLmV4ZWMocykpKXRocm93IG5ldyBTeW50YXhFcnJvcihcIltzcHJpbnRmXSBmYWlsZWQgdG8gcGFyc2UgbmFtZWQgYXJndW1lbnQga2V5XCIpO2EucHVzaCh1WzFdKX1uWzJdPWF9ZWxzZSBpfD0yO2lmKDM9PT1pKXRocm93IG5ldyBFcnJvcihcIltzcHJpbnRmXSBtaXhpbmcgcG9zaXRpb25hbCBhbmQgbmFtZWQgcGxhY2Vob2xkZXJzIGlzIG5vdCAoeWV0KSBzdXBwb3J0ZWRcIik7ci5wdXNoKHtwbGFjZWhvbGRlcjpuWzBdLHBhcmFtX25vOm5bMV0sa2V5czpuWzJdLHNpZ246blszXSxwYWRfY2hhcjpuWzRdLGFsaWduOm5bNV0sd2lkdGg6bls2XSxwcmVjaXNpb246bls3XSx0eXBlOm5bOF19KX10PXQuc3Vic3RyaW5nKG5bMF0ubGVuZ3RoKX1yZXR1cm4gY1tlXT1yfShlKSxhcmd1bWVudHMpfWZ1bmN0aW9uIGEoZSxuKXtyZXR1cm4gaS5hcHBseShudWxsLFtlXS5jb25jYXQobnx8W10pKX12YXIgYz1PYmplY3QuY3JlYXRlKG51bGwpO24uc3ByaW50Zj1pLG4udnNwcmludGY9YSxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYod2luZG93LnNwcmludGY9aSx3aW5kb3cudnNwcmludGY9YSx2b2lkIDA9PT0ocj1mdW5jdGlvbigpe3JldHVybntzcHJpbnRmOmksdnNwcmludGY6YX19LmNhbGwobix0LG4sZSkpfHwoZS5leHBvcnRzPXIpKX0oKX0sZnVuY3Rpb24oZSxuLHQpe1widXNlIHN0cmljdFwiO3QucihuKSxmdW5jdGlvbihlKXt0LmQobixcIldlYlNvY2tldE1hbmFnZXJcIixmdW5jdGlvbigpe3JldHVybiBvfSk7dmFyIHI9dCgwKTtlLmNvbm5lY3Q9ZS5jb25uZWN0fHx7fSxjb25uZWN0LldlYlNvY2tldE1hbmFnZXI9ci5hO3ZhciBvPXIuYX0uY2FsbCh0aGlzLHQoMykpfSxmdW5jdGlvbihlLG4pe3ZhciB0O3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30oKTt0cnl7dD10fHxuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpfWNhdGNoKGUpe1wib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJih0PXdpbmRvdyl9ZS5leHBvcnRzPXR9XSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2ZDJWaWNHRmpheTlpYjI5MGMzUnlZWEFpTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDNWMGFXeHpMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMM055WXk5amIyNXpkR0Z1ZEhNdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMnh2Wnk1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZkMlZpVTI5amEyVjBUV0Z1WVdkbGNpNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXViMlJsWDIxdlpIVnNaWE12YzNCeWFXNTBaaTFxY3k5emNtTXZjM0J5YVc1MFppNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12YVc1a1pYZ3Vhbk1pTENKM1pXSndZV05yT2k4dkx5aDNaV0p3WVdOcktTOWlkV2xzWkdsdUwyZHNiMkpoYkM1cWN5SmRMQ0p1WVcxbGN5STZXeUpwYm5OMFlXeHNaV1JOYjJSMWJHVnpJaXdpWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlJc0ltMXZaSFZzWlVsa0lpd2laWGh3YjNKMGN5SXNJbTF2WkhWc1pTSXNJbWtpTENKc0lpd2liVzlrZFd4bGN5SXNJbU5oYkd3aUxDSnRJaXdpWXlJc0ltUWlMQ0p1WVcxbElpd2laMlYwZEdWeUlpd2lieUlzSWs5aWFtVmpkQ0lzSW1SbFptbHVaVkJ5YjNCbGNuUjVJaXdpWlc1MWJXVnlZV0pzWlNJc0ltZGxkQ0lzSW5JaUxDSlRlVzFpYjJ3aUxDSjBiMU4wY21sdVoxUmhaeUlzSW5aaGJIVmxJaXdpZENJc0ltMXZaR1VpTENKZlgyVnpUVzlrZFd4bElpd2libk1pTENKamNtVmhkR1VpTENKclpYa2lMQ0ppYVc1a0lpd2liaUlzSW05aWFtVmpkQ0lzSW5CeWIzQmxjblI1SWl3aWNISnZkRzkwZVhCbElpd2lhR0Z6VDNkdVVISnZjR1Z5ZEhraUxDSndJaXdpY3lJc0lsVjBhV3h6SWl3aWNISmxiV2x6WlNJc0ltMWxjM05oWjJVaUxDSkZjbkp2Y2lJc0ltRnpjMlZ5ZEZSeWRXVWlMQ0oxYm1SbFptbHVaV1FpTENKZmRIbHdaVzltSWl3aWMzQnlhVzUwWmlJc0lrRnljbUY1SWl3aWFYTkJjbkpoZVNJc0ltRnNiRzkzWldSV1lXeDFaWE1pTENKc1pXNW5kR2dpTENKMllXeDFaWE1pTENKbGJuVnRUMkpxSWl3aVptOXlSV0ZqYUNJc0luSmxjR3hoWTJVaUxDSjRJaXdpZVNJc0luUnZWWEJ3WlhKRFlYTmxJaXdpYjJKcUlpd2lZMjl1YzNSeWRXTjBiM0lpTENKaGNIQnNlU0lzSW1selUzUnlhVzVuSWl3aWFYTk9kVzFpWlhJaUxDSjNjMUpsWjJWNElpd2lVbVZuUlhod0lpd2lkbUZzYVdSWFUxVnliQ0lzSW5kelZYSnNJaXdpZEdWemRDSXNJbUZ6YzJWeWRFbHpUMkpxWldOMElpd2lhWE5QWW1wbFkzUWlMQ0pNVDBkVFgwUkZVMVJKVGtGVVNVOU9JaXdpVWs5VlZFVmZTMFZaSWl3aVRHOW5aMlZ5SWl3aVpHRjBZU0lzSWt4dloweGxkbVZzSWl3aVJFVkNWVWNpTENKSlRrWlBJaXdpVjBGU1RpSXNJa1ZTVWs5U0lpd2lURzluVFdGdVlXZGxja2x0Y0d3aUxDSmZZMnhoYzNORFlXeHNRMmhsWTJzaUxDSjBhR2x6SWl3aWRYQmtZWFJsVEc5bloyVnlRMjl1Wm1sbklpd2lZMjl1YzI5c1pVeHZaMmRsY2xkeVlYQndaWElpTENKamNtVmhkR1ZEYjI1emIyeGxURzluWjJWeUlpd2liR1YyWld3aUxDSnNiMmRUZEdGMFpXMWxiblFpTENKb1lYTkRiR2xsYm5STWIyZG5aWElpTENKZlkyeHBaVzUwVEc5bloyVnlJaXdpWkdWaWRXY2lMQ0pwYm1adklpd2lkMkZ5YmlJc0ltVnljbTl5SWl3aVgyeGxkbVZzSWl3aWIzQjBhVzl1Y3lJc0luQnlaV1pwZUNJc0lsOXNiMmR6UkdWemRHbHVZWFJwYjI0aUxDSk1iMmRuWlhKWGNtRndjR1Z5U1cxd2JDSXNJbWx1Y0hWMFEyOXVabWxuSWl3aVkyOXVabWxuSWl3aWJHOW5aMlZ5SWl3aVRHOW5aMlZ5VjNKaGNIQmxjaUlzSWw5MGFHbHpJaXdpWDNCdmMzTnBZbXhsUTI5dWMzUnlkV04wYjNKU1pYUjFjbTRpTENKZloyVjBVSEp2ZEc5MGVYQmxUMllpTENKZmJHVnVJaXdpWVhKbmRXMWxiblJ6SWl3aVlYSm5jeUlzSWw5clpYa2lMQ0pmYkc5bklpd2lYMnhsYmpJaUxDSmZhMlY1TWlJc0lsOXNaVzR6SWl3aVgydGxlVE1pTENKZmJHVnVOQ0lzSWw5clpYazBJaXdpVEc5blRXRnVZV2RsY2lJc0ltbHpUR1YyWld4RmJtRmliR1ZrSWl3aWQzSnBkR1ZVYjBOc2FXVnVkRXh2WjJkbGNpSXNJbDl6YUc5MWJHUk1iMmNpTENKZlkyOXVkbVZ5ZEZSdlUybHVaMnhsVTNSaGRHVnRaVzUwSWl3aVgzZHlhWFJsVkc5RGJHbGxiblJNYjJkblpYSWlMQ0pwYm1SbGVDSXNJbUZ5WnlJc0lsOWpiMjUyWlhKMFZHOVRkSEpwYm1jaUxDSnBjMFoxYm1OMGFXOXVJaXdpZEc5VGRISnBibWNpTENKMGIxTjBjbWx1WjFKbGMzVnNkQ0lzSWtwVFQwNGlMQ0p6ZEhKcGJtZHBabmtpTENKamIyNXpiMnhsSWl3aVgxOTNaV0p3WVdOclgyVjRjRzl5ZEhOZlh5SXNJbGRsWWxOdlkydGxkRTFoYm1GblpYSlBZbXBsWTNRaUxDSlhaV0pUYjJOclpYUk5ZVzVoWjJWeUlpd2laMlYwVEc5bloyVnlJaXdpZDJWaVUyOWphMlYwSWl3aWNtVmpiMjV1WldOMFEyOXVabWxuSWl3aWNtVmpiMjV1WldOMFYyVmlVMjlqYTJWMElpd2lkMlZpYzI5amEyVjBTVzVwZEVaaGFXeGxaQ0lzSW14cGJtVmhja052Ym01bFkzUkJkSFJsYlhCMElpd2laWGh3YjI1bGJuUnBZV3hEYjI1dVpXTjBRWFIwWlcxd2RDSXNJbVY0Y0c5dVpXNTBhV0ZzUW1GamEwOW1abFJwYldVaUxDSmxlSEJ2Ym1WdWRHbGhiRlJwYldWdmRYUklZVzVrYkdVaUxDSnNhV1psVkdsdFpWUnBiV1Z2ZFhSSVlXNWtiR1VpTENKb1pXRnlkR0psWVhSRGIyNW1hV2NpTENKd1pXNWthVzVuVW1WemNHOXVjMlVpTENKcGJuUmxjblpoYkVoaGJtUnNaU0lzSW1OaGJHeGlZV05yY3lJc0ltbHVhWFJHWVdsc2RYSmxJaXdpVTJWMElpd2laMlYwVjJWaVUyOWphMlYwVkhKaGJuTndiM0owSWl3aWMzVmljMk55YVhCMGFXOXVWWEJrWVhSbElpd2ljM1ZpYzJOeWFYQjBhVzl1Um1GcGJIVnlaU0lzSW5SdmNHbGpJaXdpVFdGd0lpd2lZV3hzVFdWemMyRm5aU0lzSW1OdmJtNWxZM1JwYjI1SFlXbHVJaXdpWTI5dWJtVmpkR2x2Ymt4dmMzUWlMQ0ozWldKVGIyTnJaWFJEYjI1bWFXY2lMQ0pqYjI1dVEyOXVabWxuSWl3aWNISnZiV2x6WlVoaGJtUnNaU0lzSW5CeWIyMXBjMlZEYjIxd2JHVjBaV1FpTENKMGIzQnBZMU4xWW5OamNtbHdkR2x2YmlJc0luTjFZbk5qY21saVpXUWlMQ0p3Wlc1a2FXNW5JaXdpYVc1MllXeHBaRk5sYm1STlpYTnpZV2RsVW05MWRHVkxaWGx6SWl3aWIyNXNhVzVsSWl3aWJtRjJhV2RoZEc5eUlpd2liMjVNYVc1bElpd2libVYwZDI5eWEwTnZibTVsWTNScGRtbDBlVU5vWldOclpYSWlMQ0p6WlhSSmJuUmxjblpoYkNJc0luSmxZV1I1VTNSaGRHVWlMQ0puWlhSWFpXSlRiMk5yWlhSRGIyNXVRMjl1Wm1sbklpd2lhVzUyYjJ0bFEyRnNiR0poWTJ0eklpd2ljbVZ6Y0c5dWMyVWlMQ0pqWVd4c1ltRmpheUlzSW5ObGJtUklaV0Z5ZEVKbFlYUWlMQ0pqYkdWaGNrbHVkR1Z5ZG1Gc0lpd2ljbVZtY21WemFGZGxZbE52WTJ0bGRFTnZibTVsWTNScGIyNGlMQ0p6Wlc1a0lpd2lZM0psWVhSbFYyVmlVMjlqYTJWMFVHRjViRzloWkNJc0luSmxjMlYwVTNSaGRHVWlMQ0pqYkdWaGNsUnBiV1Z2ZFhRaUxDSjNaV0pUYjJOclpYUlBiazl3Wlc0aUxDSnphWHBsSWl3aWRHOXdhV056SWl3aVpuSnZiU0lzSW1OdmJtTmhkQ0lzSW1Oc1pXRnlJaXdpYzJWMFZHbHRaVzkxZENJc0luZGxZbE52WTJ0bGRGUnlZVzV6Y0c5eWRDSXNJblJ5WVc1emNHOXlkRXhwWm1WVWFXMWxTVzVUWldOdmJtUnpJaXdpZDJWaVUyOWphMlYwVDI1RGJHOXpaU0lzSW1WMlpXNTBJaXdpYVc1cGRGZGxZbE52WTJ0bGRDSXNJbmRsWWxOdlkydGxkRTl1UlhKeWIzSWlMQ0ozWldKVGIyTnJaWFJQYmsxbGMzTmhaMlVpTENKd1lYSnpaU0lzSW1OdmJuUmxiblFpTENKemRHRjBkWE1pTENKMGIzQnBZMDVoYldVaUxDSmhaR1FpTENKb1lYTWlMQ0pqYkc5elpWZGxZbE52WTJ0bGRDSXNJbkpsWVhOdmJpSXNJbGRsWWxOdlkydGxkQ0lzSWtOTVQxTkZSQ0lzSW1Oc2IzTmxJaXdpZEdWeWJXbHVZWFJsVjJWaVUyOWphMlYwVFdGdVlXZGxjaUlzSW5aaGJHbGtWMlZpVTI5amEyVjBRMjl1YmtOdmJtWnBaeUlzSW5WeWJDSXNJblJvWlc0aUxDSmhaR1JGZG1WdWRFeHBjM1JsYm1WeUlpd2lhVzVwZENJc0luUnlZVzV6Y0c5eWRFaGhibVJzWlNJc0ltOXVTVzVwZEVaaGFXeDFjbVVpTENKallpSXNJbTl1UTI5dWJtVmpkR2x2YmtkaGFXNGlMQ0pQVUVWT0lpd2liMjVEYjI1dVpXTjBhVzl1VEc5emRDSXNJbTl1VTNWaWMyTnlhWEIwYVc5dVZYQmtZWFJsSWl3aWIyNVRkV0p6WTNKcGNIUnBiMjVHWVdsc2RYSmxJaXdpYjI1TlpYTnpZV2RsSWl3aVlYTnpaWEowVG05MFRuVnNiQ0lzSW5ObGRDSXNJbTl1UVd4c1RXVnpjMkZuWlNJc0luTjFZbk5qY21saVpWUnZjR2xqY3lJc0ltRnpjMlZ5ZEVselRHbHpkQ0lzSW5ObGJtUk5aWE56WVdkbElpd2ljR0Y1Ykc5aFpDSXNJbk5sZEVkc2IySmhiRU52Ym1acFp5SXNJbXh2WjJkbGNrTnZibVpwWnlJc0lsOWZWMFZDVUVGRFMxOUJUVVJmUkVWR1NVNUZYMUpGVTFWTVZGOWZJaXdpY21VaUxDSnViM1JmYzNSeWFXNW5JaXdpYm05MFgySnZiMndpTENKdWIzUmZkSGx3WlNJc0ltNXZkRjl3Y21sdGFYUnBkbVVpTENKdWRXMWlaWElpTENKdWRXMWxjbWxqWDJGeVp5SXNJbXB6YjI0aUxDSnViM1JmYW5OdmJpSXNJblJsZUhRaUxDSnRiMlIxYkc4aUxDSndiR0ZqWldodmJHUmxjaUlzSW10bGVWOWhZMk5sYzNNaUxDSnBibVJsZUY5aFkyTmxjM01pTENKemFXZHVJaXdpY0dGeWMyVmZkSEpsWlNJc0ltRnlaM1lpTENKcklpd2ljR2dpTENKd1lXUWlMQ0p3WVdSZlkyaGhjbUZqZEdWeUlpd2ljR0ZrWDJ4bGJtZDBhQ0lzSW1selgzQnZjMmwwYVhabElpd2lZM1Z5YzI5eUlpd2lkSEpsWlY5c1pXNW5kR2dpTENKdmRYUndkWFFpTENKclpYbHpJaXdpY0dGeVlXMWZibThpTENKMGVYQmxJaXdpUm5WdVkzUnBiMjRpTENKcGMwNWhUaUlzSWxSNWNHVkZjbkp2Y2lJc0luQmhjbk5sU1c1MElpd2lVM1J5YVc1bklpd2labkp2YlVOb1lYSkRiMlJsSWl3aWQybGtkR2dpTENKd2NtVmphWE5wYjI0aUxDSndZWEp6WlVac2IyRjBJaXdpZEc5RmVIQnZibVZ1ZEdsaGJDSXNJblJ2Um1sNFpXUWlMQ0pPZFcxaVpYSWlMQ0owYjFCeVpXTnBjMmx2YmlJc0luTjFZbk4wY21sdVp5SXNJbk5zYVdObElpd2lkRzlNYjNkbGNrTmhjMlVpTENKMllXeDFaVTltSWl3aWNHRmtYMk5vWVhJaUxDSmphR0Z5UVhRaUxDSnlaWEJsWVhRaUxDSmhiR2xuYmlJc0luTndjbWx1ZEdaZlptOXliV0YwSWl3aVptMTBJaXdpYzNCeWFXNTBabDlqWVdOb1pTSXNJbTFoZEdOb0lpd2lYMlp0ZENJc0ltRnlaMTl1WVcxbGN5SXNJbVY0WldNaUxDSndkWE5vSWl3aVUzbHVkR0Y0UlhKeWIzSWlMQ0ptYVdWc1pGOXNhWE4wSWl3aWNtVndiR0ZqWlcxbGJuUmZabWxsYkdRaUxDSm1hV1ZzWkY5dFlYUmphQ0lzSW5Od2NtbHVkR1pmY0dGeWMyVWlMQ0oyYzNCeWFXNTBaaUlzSW5kcGJtUnZkeUlzSW1kc2IySmhiQ0lzSWw5M1pXSlRiMk5yWlhSTllXNWhaMlZ5WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh3WDE4aUxDSmpiMjV1WldOMElpd2laeUlzSW1VaVhTd2liV0Z3Y0dsdVozTWlPaUpoUVVORkxFbEJRVWxCTEVWQlFXMUNMRWRCUjNaQ0xGTkJRVk5ETEVWQlFXOUNReXhIUVVjMVFpeEhRVUZIUml4RlFVRnBRa1VzUjBGRGJrSXNUMEZCVDBZc1JVRkJhVUpGTEVkQlFWVkRMRkZCUjI1RExFbEJRVWxETEVWQlFWTktMRVZCUVdsQ1JTeEhRVUZaTEVOQlEzcERSeXhGUVVGSFNDeEZRVU5JU1N4SFFVRkhMRVZCUTBoSUxGRkJRVk1zU1VGVlZpeFBRVTVCU1N4RlFVRlJUQ3hIUVVGVlRTeExRVUZMU2l4RlFVRlBSQ3hSUVVGVFF5eEZRVUZSUVN4RlFVRlBSQ3hSUVVGVFJpeEhRVWN2UkVjc1JVRkJUMFVzUjBGQlNTeEZRVWRLUml4RlFVRlBSQ3hSUVV0bVJpeEZRVUZ2UWxFc1JVRkJTVVlzUlVGSGVFSk9MRVZCUVc5Q1V5eEZRVUZKVml4RlFVZDRRa01zUlVGQmIwSlZMRVZCUVVrc1UwRkJVMUlzUlVGQlUxTXNSVUZCVFVNc1IwRkRNME5hTEVWQlFXOUNZU3hGUVVGRldDeEZRVUZUVXl4SlFVTnNRMGNzVDBGQlQwTXNaVUZCWldJc1JVRkJVMU1zUlVGQlRTeERRVUZGU3l4WlFVRlpMRVZCUVUxRExFbEJRVXRNTEV0QlMyaEZXaXhGUVVGdlFtdENMRVZCUVVrc1UwRkJVMmhDTEVkQlExZ3NiMEpCUVZocFFpeFJRVUV3UWtFc1QwRkJUME1zWVVGRE1VTk9MRTlCUVU5RExHVkJRV1ZpTEVWQlFWTnBRaXhQUVVGUFF5eFpRVUZoTEVOQlFVVkRMRTFCUVU4c1YwRkZOMFJRTEU5QlFVOURMR1ZCUVdWaUxFVkJRVk1zWVVGQll5eERRVUZGYlVJc1QwRkJUeXhMUVZGMlJISkNMRVZCUVc5Q2MwSXNSVUZCU1N4VFFVRlRSQ3hGUVVGUFJTeEhRVVYyUXl4SFFVUlZMRVZCUVZCQkxFbEJRVlZHTEVWQlFWRnlRaXhGUVVGdlFuRkNMRWxCUXk5Q0xFVkJRVkJGTEVWQlFWVXNUMEZCVDBZc1JVRkRjRUlzUjBGQlZ5eEZRVUZRUlN4SFFVRTRRaXhwUWtGQlZrWXNSMEZCYzBKQkxFZEJRVk5CTEVWQlFVMUhMRmRCUVZrc1QwRkJUMGdzUlVGRGFFWXNTVUZCU1Vrc1JVRkJTMWdzVDBGQlQxa3NUMEZCVHl4TlFVZDJRaXhIUVVaQk1VSXNSVUZCYjBKclFpeEZRVUZGVHl4SFFVTjBRbGdzVDBGQlQwTXNaVUZCWlZVc1JVRkJTU3hWUVVGWExFTkJRVVZVTEZsQlFWa3NSVUZCVFVzc1RVRkJUMEVzU1VGRGRFUXNSVUZCVUVVc1IwRkJORUlzYVVKQlFWUkdMRVZCUVcxQ0xFbEJRVWtzU1VGQlNVMHNTMEZCVDA0c1JVRkJUM0pDTEVWQlFXOUNWU3hGUVVGRlpTeEZRVUZKUlN4RlFVRkxMRk5CUVZOQkxFZEJRVThzVDBGQlQwNHNSVUZCVFUwc1NVRkJVVU1zUzBGQlN5eExRVUZOUkN4SlFVTTVTU3hQUVVGUFJpeEhRVWxTZWtJc1JVRkJiMEkyUWl4RlFVRkpMRk5CUVZNeFFpeEhRVU5vUXl4SlFVRkpVeXhGUVVGVFZDeEhRVUZWUVN4RlFVRlBjVUlzVjBGRE4wSXNWMEZCZDBJc1QwRkJUM0pDTEVWQlFXZENMRk5CUXk5RExGZEJRVGhDTEU5QlFVOUJMRWRCUlhSRExFOUJSRUZJTEVWQlFXOUNWU3hGUVVGRlJTeEZRVUZSTEVsQlFVdEJMRWRCUXpWQ1FTeEhRVWxTV2l4RlFVRnZRbUVzUlVGQlNTeFRRVUZUYVVJc1JVRkJVVU1zUjBGQldTeFBRVUZQYWtJc1QwRkJUMnRDTEZWQlFWVkRMR1ZCUVdVeFFpeExRVUZMZFVJc1JVRkJVVU1zU1VGSGVrY3ZRaXhGUVVGdlFtdERMRVZCUVVrc1IwRkpha0pzUXl4RlFVRnZRa0VzUlVGQmIwSnRReXhGUVVGSkxFY3NLMUZEYWtaeVJDeEpRVUZOUXl4RlFVRlJMRU5CUzJSQkxGZEJRVzFDTEZOQlFWTkRMRVZCUVZORExFZEJRMjVETEVsQlFVdEVMRVZCUTBnc1RVRkJUU3hKUVVGSlJTeE5RVUZOUkN4SlFVOXdRa1lzWTBGQmMwSXNVMEZCVTJZc1JVRkJUMVlzUjBGTGNFTXNUMEZLUVhsQ0xFVkJRVTFKTEZkQlEwMHNUMEZCVm01Q0xGRkJRVzFEYjBJc1NVRkJha0pETEVWQlFVOXlRaXhIUVVONlFuTkNMR3RDUVVGUkxITkNRVUYxUW1oRExFZEJRVkVzV1VGRmJFTlZMRWRCUjFSbExGTkJRV2xDTEZOQlFWTm1MRWRCUTNoQ0xFMUJRWGRDTEdsQ1FVRldRU3hIUVVkb1FtVXNkVUpCUVN0Q0xGTkJRVk5tTEVWQlFVOU5MRWRCUXpkRExFbEJRVXRPTEVkQlFUQkNMR2xDUVVGV1FTeEZRVU51UWl4TlFVRk5MRWxCUVVsclFpeE5RVUZOV2l4RlFVRk5MR2REUVVreFFsTXNZVUZCY1VJc1UwRkJVMllzUlVGQlQwMHNSMEZEYmtNc1NVRkJTMmxDTEUxQlFVMURMRkZCUVZGNFFpeEhRVU5xUWl4TlFVRk5MRWxCUVVsclFpeE5RVUZOV2l4RlFVRk5MSEZDUVVreFFsTXNZVUZCY1VJc1UwRkJVMllzUlVGQlQzbENMRVZCUVdWdVFpeEhRVU5zUkN4SlFVRkpka0lzUlVGRFNpeEpRVUZMUVN4RlFVRkpMRVZCUVVkQkxFVkJRVWt3UXl4RlFVRmpReXhQUVVGUk0wTXNTVUZEY0VNc1IwRkJTVEJETEVWQlFXTXhReXhMUVVGUGFVSXNSVUZEZGtJc1QwRkhTaXhOUVVGTkxFbEJRVWxyUWl4TlFVTlNXaXhGUVVGTkxEWkRRVUZ2UkcxQ0xFbEJWemxFVml4VFFVRnBRaXhUUVVGVFdTeEhRVU40UWl4SlFVRkpReXhGUVVGVkxFZEJXV1FzVDBGV1FVUXNSVUZCVDBVc1VVRkJVU3hUUVVGVE4wSXNSMEZEZEVJc1NVRkJTVTBzUlVGQlRVNHNSVUZEVURoQ0xGRkJRVkVzYVVKQlFXdENMRk5CUVZORExFVkJRVWRETEVkQlEzSkRMRTlCUVU5QkxFVkJRVVZETEdOQlFXZENMRTFCUlRGQ1NDeFJRVUZSTEV0QlFVMHNTVUZGYWtKR0xFVkJRVkYwUWl4SFFVRlBUaXhKUVVkV05FSXNSMEZQVkdJc1YwRkJiVUlzVTBGQlUyMUNMRWRCUXpGQ0xGTkJRVlZCTEVkQlFVOUJMRVZCUVVsRExHRkJRV1ZFTEVWQlFVbG9SQ3hOUVVGUlowUXNSVUZCU1VVc1VVRkhkRVJ5UWl4VFFVRnBRaXhUUVVGVFppeEhRVU40UWl4UlFVRXdRaXhYUVVGcVFuRkNMRVZCUVU5eVFpeEpRVUZuUXl4UFFVRldRU3hMUVVkNFEyVXNSVUZCVFhOQ0xGTkJRVmNzVTBGQlUzSkRMRWRCUTNoQ0xFMUJRWGRDTEdsQ1FVRldRU3hIUVVkb1FtVXNSVUZCVFhWQ0xGTkJRVmNzVTBGQlUzUkRMRWRCUTNoQ0xFMUJRWGRDTEdsQ1FVRldRU3hIUVVkb1FpeEpRVUZOZFVNc1JVRkJWU3hKUVVGSlF5eFBRVUZQTEdsQ1FVTXpRbnBDTEVWQlFVMHdRaXhYUVVGaExGTkJRVlZETEVkQlF6TkNMRTlCUVU5SUxFVkJRVkZKTEV0QlFVdEVMRWxCUjNSQ00wSXNSVUZCVFRaQ0xHVkJRV2xDTEZOQlFWTTFReXhGUVVGUFRTeEhRVU55UXl4SlFVRkxVeXhGUVVGTk9FSXNVMEZCVXpkRExFZEJRMnhDTEUxQlFVMHNTVUZCU1d0Q0xFMUJRVTFhTEVWQlFVMHNkVUpCU1ZoVExGRkRlRWRHSzBJc1JVRkRUQ3hQUVVSTFFTeEZRVVZKTEdkQ1FVWktRU3hGUVVkS0xGRkJVVWxETEVWQlEwRXNaMEpCUkVGQkxFVkJSVVVzYTBKQlJrWkJMRVZCUjBFc1owSXNhemhDUTFoUVF5eEZMREJGUVVORlF5eE5MREpDUVVWRVFTeE5MREpDUVVWQlFTeE5MRFJDUVVWRFFTeFJMRXRCU1VaRExFVkJRVmNzUTBGRFprTXNUVUZCVHl4SFFVTlFReXhMUVVGTkxFZEJRMDVETEV0QlFVMHNSMEZEVGtNc1RVRkJUeXhKUVVkSVF5eEZMRmRCUTBvc1UwRkJRVUVzU1VGQlkwTXNSVUZCUVVNc1MwRkJRVVlzUjBGRFdrVXNTMEZCUzBNc2NVSkJRMHhFTEV0QlFVdEZMSEZDUVVGMVFrTXNTU3h6UkVGSFZrTXNSVUZCVDBNc1IwRkRla0lzUjBGQlMwd3NTMEZCUzAwc2EwSkJSMVlzVDBGQlVVWXNSMEZEVGl4TFFVRkxXQ3hGUVVGVFF5eE5RVU5hTEU5QlFVOU5MRXRCUVV0UExHTkJRV05ETEUxQlFVMUlMRWRCUTJ4RExFdEJRVXRhTEVWQlFWTkZMRXRCUTFvc1QwRkJUMHNzUzBGQlMwOHNZMEZCWTBVc1MwRkJTMG9zUjBGRGFrTXNTMEZCUzFvc1JVRkJVMGNzUzBGRFdpeFBRVUZQU1N4TFFVRkxUeXhqUVVGalJ5eExRVUZMVEN4SFFVTnFReXhMUVVGTFdpeEZRVUZUU1N4TlFVTmFMRTlCUVU5SExFdEJRVXRQTEdOQlFXTkpMRTFCUVUxT0xFMHNjVU5CU1haQ1JDeEhRVU5pTEU5QlFVOUJMRWRCUVZOS0xFdEJRVXRaTEZNc2QwTkJTWEpDTEU5QlFUaENMRTlCUVhaQ1dpeExRVUZMVHl4blFpeG5RMEZIU2swc1IwRkRVaXhKUVVGSlF5eEZRVUZUUkN4RlFVRlJReXhSUVVGVkxFZEJReTlDTEU5QlFVbGtMRXRCUVV0bExHMUNRVUZ4UWpGQ0xFVkJRM0pDVnl4TFFVRkxSU3h4UWtGRlVDeEpRVUZKWXl4RlFVRnJRa1lzU3l4NVEwRkhXa2NzUjBGRGFrSXNTVUZCU1VNc1JVRkJVMFFzUjBGQlpTeEhRVU0xUW1wQ0xFdEJRVXRaTEU5QlFWTk5MRVZCUVU5a0xFOUJRVk5ZTEVWQlFWTkZMRXRCUTNaRFN5eExRVUZMVHl4alFVRm5RbGNzUlVGQlQwTXNVVUZCVlN4TFFVTjBRMjVDTEV0QlFVdGxMR2xDUVVGdFFqRkNMRVZCUTNCQ05rSXNSVUZCVDFZc1VVRkRWRklzUzBGQlMyVXNhVUpCUVcxQ01VSXNSMEZGZEVJMlFpeEZRVUZQUXl4VFFVTlVia0lzUzBGQlMyVXNhVUpCUVcxQ01VSXNUeXhMUVV0NFFpdENMRVVzZFV4QlZVRktMRVVzV1VGRFNpeFRRVUZCUVN4RlFVRlpSaXhIUVVGUkxFbEJRVUZQTEVWQlFVRXNUMEZCUVhSQ0xFVkJRVUZETEV0QlFVRm5RaXhKUVVOc1Frc3NSVUZCUVVNc1JVRkJRWFJDTEV0QlFVRjFRaXhGUVVGQlVDeEhRVUZCZGtZc1MwRkJRWFZGTEZGQlEwdGpMRTlCUVZOQkxFZEJRVlVzUjBGR1RrOHNSU3cwVDBGRVZVUXNSeXh0UTBGTlppeFJRVUZCU1N4RlFVRkJReXhWUVVGQmVFUXNUMEZCVG5sRUxFVkJRVTBzU1VGQlFUVkVMRTFCUVVFd1JDeEhRVUZCUnl4RlFVRkJMRVZCUVVGQkxFVkJRVUZJTEVWQlFVRkhMRWxCUVU1RUxFVkJRVTFETEVkQlFVRkdMRlZCUVVGRkxFZEJRMkl6UWl4TFFVRkxORUlzUzBGQlMyNURMRVZCUVZORExFMUJRVTluUXl4TExEWkNRVWRrTEZGQlFVRkhMRVZCUVVGS0xGVkJRVUY0UkN4UFFVRk9lVVFzUlVGQlRTeEpRVUZCTlVRc1RVRkJRU3RFTEVkQlFVRkRMRVZCUVVFc1JVRkJRVUVzUlVGQlFVUXNSVUZCUVVNc1NVRkJUa29zUlVGQlRVa3NSMEZCUVV3c1ZVRkJRVXNzUjBGRFdqbENMRXRCUVVzMFFpeExRVUZMYmtNc1JVRkJVMFVzUzBGQlRTdENMRXNzTmtKQlIySXNVVUZCUVVzc1JVRkJRVTRzVlVGQlFYaEVMRTlCUVU1NVJDeEZRVUZOTEVsQlFVRTFSQ3hOUVVGQmFVVXNSMEZCUVVNc1JVRkJRU3hGUVVGQlFTeEZRVUZCUkN4RlFVRkJReXhKUVVGT1RpeEZRVUZOVFN4SFFVRkJVQ3hWUVVGQlR5eEhRVU5hYUVNc1MwRkJTelJDTEV0QlFVdHVReXhGUVVGVFJ5eExRVUZOT0VJc1N5dzRRa0ZIV2l4UlFVRkJUeXhGUVVGQlVpeFZRVUZCZUVRc1QwRkJUbmxFTEVWQlFVMHNTVUZCUVRWRUxFMUJRVUZ0UlN4SFFVRkJReXhGUVVGQkxFVkJRVUZCTEVWQlFVRkVMRVZCUVVGRExFbEJRVTVTTEVWQlFVMVJMRWRCUVVGVUxGVkJRVUZUTEVkQlEySnNReXhMUVVGTE5FSXNTMEZCUzI1RExFVkJRVk5KTEUxQlFVODJRaXhMTEdsRFFVZHFRblJDTEVkQlExUXNUMEZCVHl0Q0xFVkJRVmMzUWl4dFFrRkJjVUkyUWl4RlFVRlhReXhsUVVGbGFFTXNTeXd5UTBGSE9VTkJMRVZCUVU5RExFZEJRekZDT0VJc1JVRkJWMFVzYjBKQlFXOUNha01zUlVGQlQwTXNTeXd5UWtGSGJrTkVMRVZCUVU5elFpeEhRVU5XTEVkQlFVa3hRaXhMUVVGTGMwTXNWMEZCVjJ4RExFZEJRVkVzUTBGRE1VSXNTVUZCU1VNc1JVRkJaVXdzUzBGQlMzVkRMREJDUVVFd1FtSXNSMEZEYkVReFFpeExRVUZMZDBNc2NVSkJRWEZDY0VNc1JVRkJUME1zVFN4blJFRkpXSEZDTEVkQlEzaENMRWxCUVVseVFpeEZRVUZsTEVkQlEyWk1MRXRCUVV0akxGTkJRMUJVTEVkQlFXZENUQ3hMUVVGTFl5eFBRVUZUTEV0QlJXaERMRWxCUVVzc1NVRkJTVEpDTEVWQlFWRXNSVUZCUjBFc1JVRkJVV1lzUlVGQlMzcEVMRTlCUVZGM1JTeEpRVUZUTEVOQlEyaEVMRWxCUVVsRExFVkJRVTFvUWl4RlFVRkxaU3hIUVVObWNFTXNSMEZCWjBKTUxFdEJRVXN5UXl4cFFrRkJhVUpFTEVkQlFVOHNTVUZGTDBNc1QwRkJUM0pETEVrc2RVTkJSMUZ4UXl4SFFVTm1MRWxCUTBVc1NVRkJTMEVzUlVGRFNDeE5RVUZQTEVkQlJWUXNSMEZCU1hCR0xFVkJRVTF6UWl4VFFVRlRPRVFzUjBGRGFrSXNUMEZCVDBFc1JVRkZWQ3hIUVVGSmNFWXNSVUZCVFRoQ0xGTkJRVk56UkN4SlFVRlJjRVlzUlVGQlRYTkdMRmRCUVZkR0xFVkJRVWxITEZWQlFWY3NRMEZEZWtRc1NVRkJTVU1zUlVGQmFVSktMRVZCUVVsSExGZEJRM3BDTEVkQlFYVkNMRzlDUVVGdVFrTXNSVUZEUml4UFFVRlBRU3hGUVVkWUxFOUJRVTlETEV0QlFVdERMRlZCUVZWT0xFZEJRM1JDTEUxQlFVOHZRaXhIUVVWUUxFOUJSRUZ6UXl4UlFVRlJkRU1zVFVGQlRTdzBRMEZCTmtNclFpeEZRVUZMTDBJc1IwRkRla1FzVVN4TFFVdFVVaXhGUVVGelFpeFhRVU40UWl4SlFVRkpaMElzUlVGQlV5eEpRVUZKUXl4RlFVdHFRaXhQUVVwQlJDeEZRVUZQV0N4TlFVRlJlVU1zVVVGQlVYcERMRTFCUTNaQ1Z5eEZRVUZQVml4TFFVRlBkME1zVVVGQlVYaERMRXRCUTNSQ1ZTeEZRVUZQVkN4TFFVRlBkVU1zVVVGQlVYWkRMRXRCUTNSQ1V5eEZRVUZQVWl4TlFVRlJjME1zVVVGQlVYUkRMRTFCUTJoQ1VTeEhRVWRJWjBJc1JVRkJZU3hKUVVGSmNrTXNSVU53UzNaQ05VVXNSVUZCUVZVc1JVRkJRWE5JTEVWQlFVRXNjMEpCUVVGRExFbEJWMEVzU1VGQlRVTXNSVUZCYlVJc1YwRkZja0lzU1VGQlRXcERMRVZCUVZOblFpeEZRVUZYYTBJc1ZVRkJWU3hKUVVWb1EwTXNSVUZCV1N4TFFVVmFReXhGUVVGclFpeERRVU5zUWtNc2IwSkJRVzlDTEVWQlEzQkNReXh4UWtGQmNVSXNSVUZEY2tKRExIRkNRVUZ6UWl4RlFVTjBRa01zTUVKQlFUSkNMRVZCUXpOQ1F5eDFRa0ZCZDBJc1JVRkRlRUpETEhsQ1FVRXdRaXhMUVVNeFFrTXNjMEpCUVhWQ0xFMUJSM1pDUXl4RlFVRnJRaXhEUVVOc1FrTXNhVUpCUVdsQ0xFVkJRMnBDUXl4bFFVRm5RaXhOUVVkb1FrTXNSVUZCV1N4RFFVTmFReXhaUVVGaExFbEJRVWxETEVsQlEycENReXh6UWtGQmRVSXNTMEZEZGtKRExHMUNRVUZ2UWl4SlFVRkpSaXhKUVVONFFrY3NiMEpCUVhGQ0xFbEJRVWxJTEVsQlEzcENTU3hOUVVGUExFbEJRVWxETEVsQlExaERMRmRCUVZrc1NVRkJTVTRzU1VGRGFFSlBMR1ZCUVdkQ0xFbEJRVWxRTEVsQlEzQkNVU3hsUVVGblFpeEpRVUZKVWl4TFFVZHdRbE1zUlVGQmEwSXNRMEZEYkVKRExGZEJRVmtzUzBGRFdrTXNZMEZCWlN4TFFVTm1ReXhyUWtGQmEwSXNSMEZIYkVKRExFVkJRVzlDTEVOQlEzQkNReXhYUVVGWkxFbEJRVWxrTEVsQlEyaENaU3hSUVVGVExFbEJRVWxtTEV0QlIxaG5RaXhGUVVFNFFpeEpRVUZKYUVJc1NVRkJTU3hEUVVGRE9VVXNSVUZCY1VKQkxFVkJRWFZDUVN4SlFVVnlSaXRHTEVWQlFWTkRMRlZCUVZWRExFOUJRMnBDUXl4RlFVRTJRa01zV1VGQldTeFhRVU4yUTBvc1NVRkJWME1zVlVGQlZVTXNVMEZEY2tKR0xFVkJRVk5ETEZWQlFWVkRMRmRCUTBocVF5eEhRVUZoUVN4RlFVRlZiME1zVjBGQllTeExRVU5vUkhaRkxFVkJRVTlXTEV0QlFVc3NNa05CUTFwclJpeE5RVWRVTEV0QlJVZERMRVZCUVd0Q0xGTkJRVk14UWl4RlFVRlhNa0lzUjBGRGVFTXpRaXhGUVVGVk9VWXNVVUZCVVN4VFFVRlZNRWdzUjBGRGVFSkJMRVZCUVZORUxFMUJTVmhGTEVWQlFXZENMRmRCUTJ4Q0xFZEJRVWxvUXl4RlFVRm5Ra01zWjBKQlMyaENMRTlCU2tFM1F5eEZRVUZQVkN4TFFVRkxMRzFEUVVOYWMwWXNZMEZCWTJwRExFVkJRV2RDUlN4blFrRkRPVUpHTEVWQlFXZENReXhwUWtGQmEwSXNUMEZEYkVOcFF5eEpRVWRLT1VVc1JVRkJUMWdzVFVGQlRTeHhRa0ZEWWpoRExFVkJRVlUwUXl4TFFVRkxReXhGUVVGMVFqZEhMRWxCUTNSRGVVVXNSVUZCWjBKRExHbENRVUZyUWl4SFFVZG9RMjlETEVWQlFXRXNWMEZEWmpkRExFVkJRV2RDUnl4eFFrRkJkVUlzUlVGRGRrTklMRVZCUVdkQ1NTd3dRa0ZCTkVJc1JVRkROVU5LTEVWQlFXZENTeXgxUWtGQmVVSXNSVUZEZWtOSExFVkJRV2RDUXl4cFFrRkJhMElzUlVGRGJFTlVMRVZCUVdkQ1F5eHZRa0ZCY1VJc1JVRkZja00yUXl4aFFVRmhPVU1zUlVGQlowSlBMSFZDUVVNM1FtdERMR05CUVdOcVF5eEZRVUZuUWtVc1owSkJRemxDYjBNc1lVRkJZVGxETEVWQlFXZENUU3d5UWtGSE0wSjVReXhGUVVGclFpeFhRVU53UWl4SlFVMUpMRWRCVEVGdVJpeEZRVUZQVml4TFFVRkxMSEZEUVVOYWJVWXNSVUZCWjBJeFFpeEZRVUZWVXl4blFrRkZNVUo1UWl4SlFVVkpia0lzUlVGQmEwSkRMRmRCUVZkeFFpeExRVUZQTEVkQlFVdDBRaXhGUVVGclFrVXNVVUZCVVc5Q0xFdEJRVThzUlVGQlJ5eERRVU0zUlN4SlFVRkpReXhGUVVGVE1Va3NUVUZCVFRKSkxFdEJRVXQ0UWl4RlFVRnJRa01zVjBGQlYyaElMRlZCUTNKRWMwa3NSVUZCVTBFc1JVRkJUMFVzVDBGQlR6VkpMRTFCUVUweVNTeExRVUZMZUVJc1JVRkJhMEpGTEZGQlFWRnFTQ3hYUVVNMVJDdEhMRVZCUVd0Q1F5eFhRVUZYZVVJc1VVRkROMEp5UkN4RlFVRlZORU1zUzBGQlMwTXNSVUZCZFVJM1J5eEZRVUZ4UWl4RFFVRkRhMGdzVDBGQlZVRXNTMEZITVVWVUxFbEJRMEZvUXl4RlFVRm5Ra1VzWlVGQmFVSjNRaXhaUVVGWlRTeEZRVUZsTEV0QlJUVkVlRU1zUlVGQlowSlBMSE5DUVVGM1FqaERMRmRCUVZjc1YwRkRMME42Uml4RlFVRlBXQ3hOUVVGTkxHdEVRVU5pZVVZc1MwRkRSQ3hKUVVGUGNFSXNSVUZCWjBKRExGZEJRVmNyUWl4dFFrRkJiVUpETERSQ1FVTXhSQ3hOUVVGUGJrY3NSMEZEVEZFc1JVRkJUMUlzVFVGQlRTd3dSRUZCTWtSQkxFdEJTVEZGYjBjc1JVRkJiVUlzVTBGQlUwTXNSMEZETVVKNlJDeEZRVUZuUWtjc2MwSkJRWGRDTEVkQlEzaERhME1zUlVGQlowSXhRaXhGUVVGVlZTeG5Ra0ZGT1VKNlJDeEZRVUZQVml4TFFVRkxMSFZEUVVGM1EzVkhMRWRCUTJoRWVrUXNSVUZCWjBKRExHOUNRVU5vUW5sRUxFdEJTVVpETEVWQlFXMUNMRk5CUVZOR0xFZEJRemxDTjBZc1JVRkJUMUlzVFVGQlRTeDNRMEZCZVVOeFJ5eEhRVU4wUkdZc1MwRkhSV3RDTEVWQlFYRkNMRk5CUVZOSUxFZEJRMmhETjBZc1JVRkJUMWdzVFVGQlRTeDVRMEZCTUVOM1J5eEZRVUZOZUVnc1RVRkROMFFzU1VGQlRYRkhMRVZCUVZjNVF5eExRVUZMY1VVc1RVRkJUVW9zUlVGQlRYaElMRTFCUTJ4RExFOUJRVkZ4Unl4RlFVRlRja0lzVDBGRFlpeExRVUZMYkVZc1JVRkRLMElzV1VGQk5VSjFSeXhGUVVGVGQwSXNVVUZCVVVNc1VVRkRha0o2UWl4RlFVRlRkMElzVVVGQlVXSXNUMEZCVDNCSkxGRkJRVk1zVTBGQlZXMUtMRWRCUTNaRGRFTXNSVUZCYTBKRExGZEJRVmR6UXl4SlFVRkpSQ3hIUVVOcVEzUkRMRVZCUVd0Q1JTeFJRVUZzUWl4UFFVRnBRMjlETEV0QlJYSkRNMElzUlVGQlowSXhRaXhGUVVGVlNTeHRRa0ZCYjBKMVFpeEpRVVU1UTBRc1JVRkJaMEl4UWl4RlFVRlZTeXh2UWtGQmNVSnpRaXhIUVVWdVJDeE5RVU5LTEV0QlFVdDJSeXhGUVVORU5rSXNSVUZCVDFnc1RVRkJUU3dyUWtGRFluVkVMRVZCUVdkQ1F5eHBRa0ZCYTBJc1JVRkRiRU1zVFVGRFNpeFJRVU5KTEVkQlFVazJRaXhGUVVGVGNrSXNUVUZCVHl4RFFVTm9RaXhIUVVGclF5eEpRVUU1UWs0c1JVRkJWVkVzVjBGQlZ6WkNMRTFCUVhWRExFbEJRWHBDY2tNc1JVRkJWVTBzVFVGQlRTdENMRXRCUlc1RUxGbEJSRUZ3Uml4RlFVRlBWQ3hMUVVGTExEaERRVUVyUTIxR0xFZEJSeTlFUkN4RlFVRm5RakZDTEVWQlFWVlJMRmRCUVZsdFFpeEhRVU5zUXpOQ0xFVkJRVlZOTEUxQlFVMXBSQ3hKUVVGSk5VSXNSVUZCVTNKQ0xGRkJRemRDYjBJc1JVRkJaMEl4UWl4RlFVRlZUU3hOUVVGTmNra3NTVUZCU1RCS0xFVkJRVk55UWl4UFFVRlJjVUlzVVVGRmJFUkJMRVZCUVZOeVNTeFJRVU5vUWpKRUxFVkJRVTlVTEV0QlFVc3NNRU5CUVRKRGJVWXNSMEZGZGtReFJTeEZRVUZQVkN4TFFVRkxMRzlEUVVGeFEyMUdMRXRCU3pORU5rSXNSVUZCYVVJc1UwRkJVME1zUjBGRE5VSXNVMEZCU1hKRkxFZEJRV0ZCTEVWQlFWVnZReXhoUVVGbGEwTXNWVUZCVlVNc1ZVRkRhRVIyUlN4RlFVRlZkMFVzVFVGQlRTeEpRVUZOU0N4SlFVTm1MRWxCUzFReFFpeEZRVUUyUWl4WFFVTXhRbG9zUjBGSlRHZENMR0ZCUVdFNVF5eEZRVUZuUWs4c2RVSkJRemRDYTBNc1kwRkJZMnBETEVWQlFXZENSU3huUWtGRk1VSldMRVZCUVdkQ1J5eHhRa1o0VEdVc1IwVjVUQzlDU0N4RlFVRm5Ra2NzZFVKQlEyaENka01zUlVGQlQxZ3NUVUZCVFN4MVJFRkJlVVFyUXl4RlFVRm5Ra2NzYzBKQlEzUkdTQ3hGUVVGblFrTXNiMEpCUVhGQ0xFVkJRM0pEYlVNc1MwRkRUM0JETEVWQlFXZENTU3d3UWtZMVRHRXNSMFUyVEhCRFNpeEZRVUZuUWtrc05FSkJRMmhDU2l4RlFVRm5Ra3NzZDBKQlFUQkNMRVZCUXpGRGVrTXNSVUZCVDFnc1RVRkJUU3gxUkVGRFVDdERMRVZCUVdkQ1NTd3dRa0ZCTkVJc1pVRkROVU5LTEVWQlFXZENTeXgxUWtGQmVVSXNVMEZITDBOcFFpeEZRVUZuUWtjc2EwSkJRVzFDTEVWQlEyNURTQ3hGUVVGblFrTXNWMEZCWVN4TFFVVTNRblpDTEVWQlFXZENUU3g1UWtGQk1rSXJReXhYUVVGWExGZEJRMnhFY2tRc1JVRkJaMEpETEc5Q1FVRnhRaXhGUVVOeVEyMURMRXRCUTBRc1NVRkJUM0JETEVWQlFXZENTeXg1UWtGRGJrSnBRaXhGUVVGblFrY3NiVUpCUTNaQ04wUXNSVUZCVDFJc1RVRkJUU3g1UkVGRFltOUlMRTFCTlVKQlRDeEZRVUZsTEN0RFFXZERha0pMTEVWQlFUUkNMRmRCUXpsQ00wSXNTVUZEUVhOQ0xFVkJRV1VzYVVOQlEyWjJSeXhGUVVGUFVpeE5RVUZOTEcxRFFVTmlORU1zUlVGQlowSkZMSEZDUVVGelFpeEZRVU4wUTNWRExHTkJRV05TTEVkQlEyUkpMRVZCUVdkQ01VSXNSVUZCVlVNc1kwRkhlRUpuUXl4RlFVRjVRaXhUUVVGVmRFb3NSVUZCUzNkTExFZEJRekZETEU5QlFVOTBSU3hMUVVGTFF5eFZRVUZWTEVOQlEyeENkMElzVFVGQlV6TklMRVZCUTFSM1N5eFJRVUZYUVN4TFFYRkRZbGNzUlVGQk1rSXNVMEZCVld4RUxFZEJRM1pETEZOQlFVbDRTQ3hGUVVGTk9FSXNVMEZCVXpCR0xFbEJRV1Y0U0N4RlFVRk5PRUlzVTBGQlV6QkdMRVZCUVZjclFpeHhRa0ZEY2tSMlNpeEZRVUZOYzBJc1UwRkJVMnRITEVWQlFWY3JRaXh0UWtGQmJVSnZRaXhOUVVNM1F6TkxMRVZCUVUwd1FpeFhRVUZYT0VZc1JVRkJWeXRDTEcxQ1FVRnRRbTlDTEUxQlF5OURNMHNzUlVGQlRYVkNMRk5CUVZOcFJ5eEZRVUZYSzBJc2JVSkJRVzFDUXl3MlFrRkRhRVJvUXl4RlFVRlhLMElzYlVKQlFXMUNReXcwUWtaNlVVb3NVVVUwVVRsQ00wWXNSVUZCVDFJc1RVRkJUU3cyUTBGQk9FTnRSU3hKUVVOd1JDeEpRVWRNWVN4RlFVRjVRaXhYUVVOMlFuQkRMRVZCUVdkQ1JTeHpRa0ZIY0VKdlFpeEZRVUZuUWtNc1YwRkJZU3hMUVVNM1FrUXNSVUZCWjBKSExHdENRVUZ0UWl4RlFVTnVRMGdzUlVGQlowSkZMR05CUVdkQ1lpeEZRVUZWUnl4M1FrRkRNVU5STEVWQlFXZENSU3hqUVVOWWJVUXNTMEZCU3l4VFFVRlRja01zUjBGRFVHaENMRVZCUVdkQ1J5eHJRa0ZCYlVJc1JVRkRia00zUkN4RlFVRlBXQ3hOUVVGTkxESkVRVU5TZDBnc1JVRkJlVUp1UXl4SlFVazVRbWhDTEVWQlFXZENReXhYUVVGaFpTeEZRVU40UWxJc1NVRkhSSEZETEVWQlFXVXNhVU5CUjI1Q1ZDeE5RVlpKWXl4TFFWbFNMRk5CUVZOS0xFZEJRMHc1UXl4RlFVRm5Ra2NzYTBKQlFXMUNMRVZCUTI1RE4wUXNSVUZCVDFJc1RVRkJUU3h4UkVGQmMwUm5TQ3hIUVVOdVJURkNMRkZCU1ZablFpeEZRVUZuUWl4WFFVTnNRaXhKUVVGSk1VUXNSVUZCWjBKRkxHOUNRVUZ3UWl4RFFVZEJkRU1zUlVGQlQxZ3NUVUZCVFN4clEwRkRZaXhKUVVOUmQwZ3NSVUZCZVVKdVJDeEZRVUZuUWtNc1kwRkZla040UWl4RlFVRlpMRWxCUVVselJTeFZRVUZWTDBNc1JVRkJaMEpETEZkQlFWY3JRaXh0UWtGQmJVSnZRaXhOUVVNNVJFVXNhVUpCUVdsQ0xFOUJRVkUzUWl4SFFVTnVRMmhFTEVWQlFWVTJSU3hwUWtGQmFVSXNWVUZCVjJoQ0xFZEJRM1JETjBRc1JVRkJWVFpGTEdsQ1FVRnBRaXhSUVVGVGFrSXNSMEZEY0VNMVJDeEZRVUZWTmtVc2FVSkJRV2xDTEZGQlFWTndRaXhKUVVWb1EyeERMRVZCUVdkQ1J5eHJRa0ZEYUVJclF5eEpRVWRXTEUxQlFVOXdTQ3hIUVVOTVVTeEZRVUZQVWl4TlFVRk5MSGREUVVGNVEwRXNSMEZEZEVSdlNDeFBRWFZGVWk5SUxFdEJRVXR2U1N4TFFYaERVU3hUUVVGVFF5eEhRVU5zUWk5TExFVkJRVTFKTEZkQlFWZEtMRVZCUVUxelJpeFhRVUZYZVVZc1IwRkJhMElzYzBOQlExb3NUMEZCY0VOdVJTeEZRVUZWUnl4MVFrRkpaRWdzUlVGQlZVY3NjMEpCUVhkQ1owVXNSVUZGYkVNeFF5eExRVXhKZUVVc1JVRkJUMVFzUzBGQlN5d3JRMEZ6UTNCQ1ZpeExRVUZMYzBrc1kwRnNSR2xDTEZOQlFWTkRMRWRCVFROQ0xFOUJURUZxVEN4RlFVRk5TU3hYUVVGWFNpeEZRVUZOYzBZc1YwRkJWekpHTEVkQlFVc3NlVUpCUTNaRGNrVXNSVUZCVlVNc1dVRkJXWEZFTEVsQlFVbGxMRWRCUTNSQ2FFWXNSVUZCWjBKRkxIRkNRVU5vUWpoRkxFbEJSVWNzYTBKQlFVMXlSU3hGUVVGVlF5eFpRVUZXTEU5QlFUWkNiMFVzUzBFMlF6bERka2tzUzBGQlMzZEpMR2xDUVhKRmIwSXNVMEZCVTBRc1IwRk5PVUlzVDBGTVFXcE1MRVZCUVUxSkxGZEJRVmRLTEVWQlFVMXpSaXhYUVVGWE1rWXNSMEZCU3l4NVFrRkRka055UlN4RlFVRlZVeXhsUVVGbE5rTXNTVUZCU1dVc1IwRkRla0pxUml4SFFVRmhRU3hGUVVGVmIwTXNZVUZCWld0RExGVkJRVlZoTEUxQlEyaEVSaXhKUVVWSExHdENRVUZOY2tVc1JVRkJWVk1zWlVGQlZpeFBRVUZuUXpSRUxFdEJaMFZxUkhaSkxFdEJRVXN3U1N4cFFrRTNSRzlDTEZOQlFWTklMRWRCVFRsQ0xFOUJURUZxVEN4RlFVRk5TU3hYUVVGWFNpeEZRVUZOYzBZc1YwRkJWekpHTEVkQlFVc3NlVUpCUTNaRGNrVXNSVUZCVlZVc1pVRkJaVFJETEVsQlFVbGxMRWRCUTNwQ2FrWXNSMEZCWVVFc1JVRkJWVzlETEdGQlFXVnJReXhWUVVGVlF5eFJRVU5vUkZVc1NVRkZSeXhyUWtGQlRYSkZMRVZCUVZWVkxHVkJRVllzVDBGQlowTXlSQ3hMUVhkRWFrUjJTU3hMUVVGTE1ra3NjVUpCYWtOM1FpeFRRVUZUU2l4SFFVZHNReXhQUVVaQmFrd3NSVUZCVFVrc1YwRkJWMG9zUlVGQlRYTkdMRmRCUVZjeVJpeEhRVUZMTEhsQ1FVTjJRM0pGTEVWQlFWVkpMRzFDUVVGdFFtdEVMRWxCUVVsbExFZEJRekZDTEd0Q1FVRk5ja1VzUlVGQlZVa3NiVUpCUVZZc1QwRkJiME5wUlN4TFFTdENja1IyU1N4TFFVRkxORWtzYzBKQk5VSjVRaXhUUVVGVFRDeEhRVWR1UXl4UFFVWkJha3dzUlVGQlRVa3NWMEZCVjBvc1JVRkJUWE5HTEZkQlFWY3lSaXhIUVVGTExIbENRVU4yUTNKRkxFVkJRVlZMTEc5Q1FVRnZRbWxFTEVsQlFVbGxMRWRCUXpOQ0xHdENRVUZOY2tVc1JVRkJWVXNzYjBKQlFWWXNUMEZCY1VOblJTeExRVEJDZEVSMlNTeExRVUZMTmtrc1ZVRjJRbUVzVTBGQlUzUkNMRVZCUVZkblFpeEhRVkZzUXl4UFFWQkJha3dzUlVGQlRYZE1MR05CUVdOMlFpeEZRVUZYTEdGQlF5OUNha3NzUlVGQlRVa3NWMEZCVjBvc1JVRkJUWE5HTEZkQlFWY3lSaXhIUVVGTExIbENRVU51UTNKRkxFVkJRVlZOTEUxQlFVMXBSQ3hKUVVGSlJpeEhRVU53UW5KRUxFVkJRVlZOTEUxQlFVMXlTU3hKUVVGSmIwd3NSMEZCVjBNc1NVRkJTV1VzUjBGRmJrTnlSU3hGUVVGVlRTeE5RVUZOZFVVc1NVRkJTWGhDTEVWQlFWY3NTVUZCU1c1RUxFbEJRVWtzUTBGQlEyMUZMRXRCUlhKRExHdENRVUZOY2tVc1JVRkJWVTBzVFVGQlRYSkpMRWxCUVVsdlRDeEhRVUZ3UWl4UFFVRnpRMmRDTEV0QlowSjJSSFpKTEV0QlFVdG5TaXhoUVdKblFpeFRRVUZWVkN4SFFVY3pRaXhQUVVaQmFrd3NSVUZCVFVrc1YwRkJWMG9zUlVGQlRYTkdMRmRCUVZjeVJpeEhRVUZMTEhsQ1FVTjJRM0pGTEVWQlFWVlJMRmRCUVZjNFF5eEpRVUZKWlN4SFFVTnNRaXhyUWtGQlRYSkZMRVZCUVZWUkxGZEJRVllzVDBGQk5FSTJSQ3hMUVZjM1EzWkpMRXRCUVV0cFNpeG5Ra0V6U20xQ0xGTkJRVk42UXl4SFFVTTNRbXhLTEVWQlFVMTNUQ3hqUVVGamRFTXNSVUZCVVN4VlFVTTFRbXhLTEVWQlFVMDBUQ3hoUVVGaE1VTXNSMEZGYmtKQkxFVkJRVTl3U1N4UlFVRlJMRk5CUVZWdlJ5eEhRVU55UWxNc1JVRkJhMEpGTEZGQlFWRnhReXhKUVVGSmFFUXNTMEZIT1VKc1FpeEhRVUZoUVN4RlFVRlZiME1zWVVGQlpXdERMRlZCUVZWaExFMUJRMmhFYmtZc1JVRkJWVFJETEV0QlFVdERMRVZCUVhWQ04wY3NSVUZCY1VJc1EwRkJRMnRJTEU5QlFWVkJMRTFCYlVvNVJYaEhMRXRCUVV0dFNpeFpRV2hNWlN4VFFVRlRReXhIUVVWNlFpeEhRVVJCT1V3c1JVRkJUVFpDTEdWQlFXVnBTeXhGUVVGVExHZENRVU5TZWt3c1NVRkJiRUo1VEN4RlFVRlJOVVVzVDBGQmRVSlpMRVZCUVRSQ2NVTXNTVUZCU1RKQ0xFVkJRVkUxUlN4UFFVTjJSWEpFTEVWQlFVOVVMRXRCUVVzc2NVTkJRWE5ETUVrc1QwRkVkRVFzUTBGSlFTeEpRVU5KUVN4RlFVRlZja2NzUzBGQlMwTXNWVUZCVlc5SExFZEJRek5DTEUxQlFVOTZTU3hIUVVWTUxGbEJSRUZSTEVWQlFVOVVMRXRCUVVzc01FSkJRVEpDTUVrc1IwRkhka001Uml4SFFVRmhRU3hGUVVGVmIwTXNZVUZCWld0RExGVkJRVlZoTEUxQlEyaEVkRWdzUlVGQlQxZ3NUVUZCVFN4dFEwRkJiME0wU1N4SFFVTnFSRGxHTEVWQlFWVTBReXhMUVVGTGEwUXNTVUZGWm1wSkxFVkJRVTlVTEV0QlFVc3NORVJCYTB0d1FsWXNTMEZCU3pCSUxHVkJRV2xDTEZkQlEyeENkRUlzU1VGRFFVb3NZMEZCWTFJc1IwRkRaR3RETEVWQlFXVXNjVU5CWVdwQ2RrVXNSVUZCZVVJc1EwRkRNMEoyUnl4UFFWWm5ReXhYUVVOb1F5eFBRVUZQTEVsQlFVbDNSeXhIUVZWWWFVY3NaMEpCVUc5Q0xGTkJRVUZ1U1N4SFFVTndRaXhKUVVGTmIwa3NSVUZCWlhCSkxFVkJRVTl2U1N4aFFVTTFRbTVJTEVWQlFWZHNReXh0UWtGQmJVSnhTaXhKUVUwNVFqZEtMRk5CUVZWQkxFVkJRMVpHTEU5QlFWRkJMRWtzWjBKRGFHSmFMRWxCUVVGblN5eEhRVVZETEZkQlEwY3NZVUZGUVN4SlFVRkpReXhGUVVGTExFTkJRMHhETEZkQlFWa3NUMEZEV2tNc1UwRkJWU3hQUVVOV1F5eFRRVUZWTEU5QlExWkRMR05CUVdVc1QwRkRaa01zVDBGQlVTeFZRVU5TUXl4WlFVRmhMR1ZCUTJKRExFdEJRVTBzVFVGRFRrTXNVMEZCVlN4UFFVTldReXhMUVVGTkxGbEJRMDVETEU5QlFWRXNWMEZEVWtNc1dVRkJZU3d5UmtGRFluUk9MRWxCUVVzc2MwSkJRMHgxVGl4WFFVRlpMSGRDUVVOYVF5eGhRVUZqTEdGQlEyUkRMRXRCUVUwc1UwRkhWaXhUUVVGVGVrMHNSVUZCVVdoQ0xFZEJSV0lzVDBGUFNpeFRRVUYzUWpCT0xFVkJRVmxETEVkQlEyaERMRWxCUVdsRU9VZ3NSVUZCYTBKd1NDeEZRVUZIYlZBc1JVRkJSME1zUlVGQlNVTXNSVUZCUzBNc1JVRkJaVU1zUlVGQldVTXNSVUZCWVZJc1JVRkJkRWhUTEVWQlFWTXNSVUZCUjBNc1JVRkJZMVFzUlVGQlYzUk5MRTlCUVdGblRpeEZRVUZUTEVkQlF5OUVMRWxCUVVzelVDeEZRVUZKTEVWQlFVZEJMRVZCUVVrd1VDeEZRVUZoTVZBc1NVRkRla0lzUjBGQk5rSXNhVUpCUVd4Q2FWQXNSVUZCVjJwUUxFZEJRMnhDTWxBc1IwRkJWVllzUlVGQlYycFFMRkZCUlhCQ0xFZEJRVFpDTEdsQ1FVRnNRbWxRTEVWQlFWZHFVQ3hIUVVGcFFpeERRVVY0UXl4SlFVUkJiMUFzUlVGQlMwZ3NSVUZCVjJwUUxFbEJRMVEwVUN4TFFVVklMRWxCUkVGNFNTeEZRVUZOT0Vnc1JVRkJTMDhzUjBGRFRrNHNSVUZCU1N4RlFVRkhRU3hGUVVGSlF5eEZRVUZIVVN4TFFVRkxhazRzVDBGQlVYZE5MRWxCUVVzc1EwRkRha01zUjBGQlZ6bE5MRTFCUVZBclJTeEZRVU5CTEUxQlFVMHNTVUZCU1dwR0xFMUJRVTFKTEVWQlFWRXNaMFZCUVdsRk5rMHNSVUZCUjFFc1MwRkJTMVFzUjBGQlNVTXNSVUZCUjFFc1MwRkJTMVFzUlVGQlJTeExRVVZ1U0M5SUxFVkJRVTFCTEVWQlFVbG5TU3hGUVVGSFVTeExRVUZMVkN4VFFVbDBRaTlJTEVWQlJFdG5TU3hGUVVGSFV5eFRRVU5HV0N4RlFVRkxSU3hGUVVGSFV5eFZRVWRTV0N4RlFVRkxUeXhMUVU5bUxFZEJTa2wyUWl4RlFVRkhSeXhUUVVGVGVrc3NTMEZCUzNkTUxFVkJRVWRWTEU5QlFWTTFRaXhGUVVGSFNTeGpRVUZqTVVzc1MwRkJTM2RNTEVWQlFVZFZMRTlCUVZNeFNTeGhRVUZsTWtrc1YwRkRPVVV6U1N4RlFVRk5RU3hMUVVkT09FY3NSVUZCUjAwc1dVRkJXVFZMTEV0QlFVdDNUQ3hGUVVGSFZTeFBRVUY1UWl4cFFrRkJVakZKTEVkQlFXOUNORWtzVFVGQlRUVkpMRWRCUTJ4RkxFMUJRVTBzU1VGQlNUWkpMRlZCUVZVeFRpeEZRVUZSTERCRFFVRXlRelpGTEVsQlR6TkZMRTlCU2trNFJ5eEZRVUZIU3l4UFFVRlBNMHNzUzBGQlMzZE1MRVZCUVVkVkxGRkJRMnhDVGl4RlFVRmpjRWtzUjBGQlR5eEhRVWRxUW1kSkxFVkJRVWRWTEUxQlExQXNTVUZCU3l4SlFVTkVNVWtzUlVGQlRUaEpMRk5CUVZNNVNTeEZRVUZMTEVsQlFVbEhMRk5CUVZNc1IwRkRha01zVFVGRFNpeEpRVUZMTEVsQlEwUklMRVZCUVUwclNTeFBRVUZQUXl4aFFVRmhSaXhUUVVGVE9Va3NSVUZCU3l4TFFVTjRReXhOUVVOS0xFbEJRVXNzU1VGRFRDeEpRVUZMTEVsQlEwUkJMRVZCUVUwNFNTeFRRVUZUT1Vrc1JVRkJTeXhKUVVOd1FpeE5RVU5LTEVsQlFVc3NTVUZEUkVFc1JVRkJUVXNzUzBGQlMwTXNWVUZCVlU0c1JVRkJTeXhMUVVGTlowa3NSVUZCUjJsQ0xFMUJRVkZJTEZOQlFWTmtMRVZCUVVkcFFpeFBRVUZUTEVkQlEyaEZMRTFCUTBvc1NVRkJTeXhKUVVORWFrb3NSVUZCVFdkSkxFVkJRVWRyUWl4VlFVRlpReXhYUVVGWGJrb3NSMEZCUzI5S0xHTkJRV053UWl4RlFVRkhhMElzVjBGQllVTXNWMEZCVjI1S0xFZEJRVXR2U2l4blFrRkRia1lzVFVGRFNpeEpRVUZMTEVsQlEwUndTaXhGUVVGTlowa3NSVUZCUjJ0Q0xGVkJRVmxETEZkQlFWZHVTaXhIUVVGTGNVb3NVVUZCVVhKQ0xFVkJRVWRyUWl4WFFVRmhReXhYUVVGWGJrb3NSMEZEZUVVc1RVRkRTaXhKUVVGTExFbEJRMFJCTEVWQlFVMW5TU3hGUVVGSGEwSXNWVUZCV1Vnc1QwRkJUMDhzVDBGQlQzUktMRVZCUVVsMVNpeFpRVUZaZGtJc1JVRkJSMnRDTEdGQlFXVkRMRmRCUVZkdVNpeEhRVU5vUml4TlFVTktMRWxCUVVzc1NVRkRSRUVzUjBGQlR6aEpMRk5CUVZNNVNTeEZRVUZMTEUxQlFWRXNSMEZCUjBjc1UwRkJVeXhIUVVONlF5eE5RVU5LTEVsQlFVc3NTVUZEUkVnc1JVRkJUU3RKTEU5QlFVOHZTU3hIUVVOaVFTeEZRVUZQWjBrc1JVRkJSMnRDTEZWQlFWbHNTaXhGUVVGSmQwb3NWVUZCVlN4RlFVRkhlRUlzUlVGQlIydENMRmRCUVdGc1NpeEZRVU4yUkN4TlFVTktMRWxCUVVzc1NVRkRSRUVzUlVGQlRTdEpMRk5CUVZNdlNTeEhRVU5tUVN4RlFVRlBaMGtzUlVGQlIydENMRlZCUVZsc1NpeEZRVUZKZDBvc1ZVRkJWU3hGUVVGSGVFSXNSVUZCUjJ0Q0xGZEJRV0ZzU2l4RlFVTjJSQ3hOUVVOS0xFbEJRVXNzU1VGRFJFRXNSVUZCVFRGSExFOUJRVTlyUWl4VlFVRlZNa1lzVTBGQlUzQklMRXRCUVV0cFNDeEhRVUZMZVVvc1RVRkJUU3hIUVVGSkxFZEJRVWRETEdOQlEzWkVNVW9zUlVGQlQyZEpMRVZCUVVkclFpeFZRVUZaYkVvc1JVRkJTWGRLTEZWQlFWVXNSVUZCUjNoQ0xFVkJRVWRyUWl4WFFVRmhiRW9zUlVGRGRrUXNUVUZEU2l4SlFVRkxMRWxCUTBSQkxFVkJRVTA0U1N4VFFVRlRPVWtzUlVGQlN5eE5RVUZSTEVWQlF6VkNMRTFCUTBvc1NVRkJTeXhKUVVORVFTeEZRVUZOUVN4RlFVRkpNa29zVlVGRFZqTktMRVZCUVU5blNTeEZRVUZIYTBJc1ZVRkJXV3hLTEVWQlFVbDNTaXhWUVVGVkxFVkJRVWQ0UWl4RlFVRkhhMElzVjBGQllXeEtMRVZCUTNaRUxFMUJRMG9zU1VGQlN5eEpRVU5FUVN4SFFVRlBPRWtzVTBGQlV6bEpMRVZCUVVzc1RVRkJVU3hIUVVGSFJ5eFRRVUZUTEVsQlEzcERMRTFCUTBvc1NVRkJTeXhKUVVORVNDeEhRVUZQT0Vrc1UwRkJVemxKTEVWQlFVc3NUVUZCVVN4SFFVRkhSeXhUUVVGVExFbEJRVWx5UlN4alFVZHFSR2RNTEVWQlFVZFBMRXRCUVVzM1N5eExRVUZMZDB3c1JVRkJSMVVzVFVGRGFFSklMRWRCUVZWMlNTeEpRVWRPT0Vjc1JVRkJSMHNzVDBGQlR6TkxMRXRCUVV0M1RDeEZRVUZIVlN4UFFVRlhUaXhKUVVGbFNpeEZRVUZIU2l4TFFVc3ZRMEVzUlVGQlR5eEpRVXBRUVN4RlFVRlBVU3hGUVVGakxFbEJRVTBzU1VGRE0wSndTU3hGUVVGTlFTeEZRVUZKUnl4WFFVRlhlRVVzVVVGQlVXMU1MRVZCUVVkakxFdEJRVTBzUzBGTE1VTk5MRVZCUVdkQ1JpeEZRVUZITkVJc1UwRkJNa0lzVFVGQmFFSTFRaXhGUVVGSE5FSXNVMEZCYlVJc1NVRkJUVFZDTEVWQlFVYzBRaXhUUVVGVFF5eFBRVUZQTEVkQlFVc3NTVUZEYkVZeFFpeEZRVUZoU0N4RlFVRkhhVUlzVDBGQlUzSkNMRVZCUVU4MVNDeEhRVUZMZWtVc1QwRkRja013VFN4RlFVRk5SQ3hGUVVGSGFVSXNUMEZCVTJRc1JVRkJZU3hGUVVGSlJDeEZRVUZqTkVJc1QwRkJUek5DTEVkQlFXOUNMRWRCUXpWRlNTeEhRVUZWVUN4RlFVRkhLMElzVFVGQlVXNURMRVZCUVU4MVNDeEZRVUZOYVVrc1JVRkJlVUlzVFVGQmJFSkRMRVZCUVhkQ1RpeEZRVUZQU3l4RlFVRk5ha2tzUlVGQlRXbEpMRVZCUVUxTUxFVkJRVTgxU0N4SFFVazNSeXhQUVVGUGRVa3NSVUZxU0VGNVFpeERRWE5JV0N4VFFVRjFRa01zUjBGRGJrSXNSMEZCU1VNc1JVRkJZMFFzUjBGRFpDeFBRVUZQUXl4RlFVRmpSQ3hIUVVkNlFpeEpRVUZuUWtVc1JVRkJXa01zUlVGQlQwZ3NSVUZCV1hCRExFVkJRV0VzUjBGQlNYZERMRVZCUVZrc1JVRkRjRVFzUzBGQlQwUXNSMEZCVFN4RFFVTlVMRWRCUVhGRExGRkJRV2hEUkN4RlFVRlJja1FzUlVGQlIxTXNTMEZCU3l0RExFdEJRVXRHTEVsQlEzUkNka01zUlVGQlZ6QkRMRXRCUVV0S0xFVkJRVTBzVTBGRmNrSXNSMEZCZFVNc1VVRkJiRU5CTEVWQlFWRnlSQ3hGUVVGSFZTeFBRVUZQT0VNc1MwRkJTMFlzU1VGRE4wSjJReXhGUVVGWE1FTXNTMEZCU3l4VFFVVm1MRWxCUVRSRExGRkJRWFpEU2l4RlFVRlJja1FzUlVGQlIxY3NXVUZCV1RaRExFdEJRVXRHTEVsQk5rTnNReXhOUVVGTkxFbEJRVWxKTEZsQlFWa3NiME5CTlVOMFFpeEhRVUZKVEN4RlFVRk5MRWRCUVVrc1EwRkRWa1VzUjBGQllTeEZRVU5pTEVsQlFVbEpMRVZCUVdFc1IwRkJTVU1zUlVGQmIwSlFMRVZCUVUwc1IwRkJTVkVzUlVGQll5eEhRVU5xUlN4SFFVRjFSQ3hSUVVGc1JFRXNSVUZCWXpkRUxFVkJRVWN6VFN4SlFVRkpiVkVzUzBGQlMwa3NTVUZsTTBJc1RVRkJUU3hKUVVGSlJpeFpRVUZaTEdkRVFXSjBRaXhKUVVSQlF5eEZRVUZYUml4TFFVRkxTU3hGUVVGWkxFbEJRM2RFTEUxQlFUVkZSQ3hGUVVGdlFrRXNSVUZCYTBKc1FpeFZRVUZWYlVJc1JVRkJXU3hIUVVGSGNGQXNWVUZEYmtVc1IwRkJPRVFzVVVGQmVrUnZVQ3hGUVVGak4wUXNSVUZCUjFrc1YwRkJWelJETEV0QlFVdEpMRWxCUTJ4RFJDeEZRVUZYUml4TFFVRkxTU3hGUVVGWkxGRkJSVE5DTEVsQlFXZEZMRkZCUVRORVFTeEZRVUZqTjBRc1JVRkJSMkVzWVVGQllUSkRMRXRCUVV0SkxFbEJTWHBETEUxQlFVMHNTVUZCU1VZc1dVRkJXU3huUkVGSWRFSkRMRVZCUVZkR0xFdEJRVXRKTEVWQlFWa3NTVUZWZUVOU0xFVkJRVTBzUjBGQlMwMHNUMEZIV0Vvc1IwRkJZU3hGUVVWcVFpeEhRVUZyUWl4SlFVRmtRU3hGUVVOQkxFMUJRVTBzU1VGQlNYUlFMRTFCUVUwc05rVkJSM0JDT0Uwc1JVRkJWekJETEV0QlExQXNRMEZEU1RsRExGbEJRV0V3UXl4RlFVRk5MRWRCUTI1Q01VSXNVMEZCWVRCQ0xFVkJRVTBzUjBGRGJrSXpRaXhMUVVGaE1rSXNSVUZCVFN4SFFVTnVRblpETEV0QlFXRjFReXhGUVVGTkxFZEJRMjVDVUN4VFFVRmhUeXhGUVVGTkxFZEJRMjVDU2l4TlFVRmhTU3hGUVVGTkxFZEJRMjVDYkVJc1RVRkJZV3RDTEVWQlFVMHNSMEZEYmtKcVFpeFZRVUZoYVVJc1JVRkJUU3hIUVVOdVFucENMRXRCUVdGNVFpeEZRVUZOTEV0QlR5OUNReXhGUVVGUFFTeEZRVUZMV2l4VlFVRlZWeXhGUVVGTkxFZEJRVWMxVHl4UlFVVnVReXhQUVVGUE1rOHNSVUZCWTBRc1IwRkJUM0JETEVWQmNFeE9LME1zUTBGQlkzcFJMRWRCUVUwMFJTeFhRVWM1UXl4VFFVRlRPRXdzUlVGQlUxb3NSVUZCUzI1RExFZEJRMjVDTEU5QlFVOHpUU3hGUVVGUll5eE5RVUZOTEV0QlFVMHNRMEZCUTJkUExFZEJRVXRxUnl4UFFVRlBPRVFzUjBGQlVTeExRV2RJY0VRc1NVRkJTVzlETEVWQlFXZENOVkVzVDBGQlQxa3NUMEZCVHl4TlFYZEZPVUo0UWl4RlFVRnBRaXhSUVVGSmVVTXNSVUZEY2tKNlF5eEZRVUZyUWl4VFFVRkpiVk1zUlVGRlNpeHZRa0ZCV0VNc1UwRkRVRUVzVDBGQlowSXNVVUZCU1ROUUxFVkJRM0JDTWxBc1QwRkJhVUlzVTBGQlNVUXNUMEZSYUVJMVVDeExRVXhFTkV3c1JVRkJRU3hYUVVOSkxFMUJRVThzUTBGRFNERk1MRkZCUVZkQkxFVkJRMWd3VUN4VFFVRlpRU3hKUVVWdVFqbFNMRXRCUVVGTUxFVkJRVUZHTEVWQlFVRkZMRVZCUVVGRExGRkJRVUZFTEZGQlFVRnRUeXhKUVdoUFdpeEpMRFpDUTBaRWNrOHNSVUZCUVd0Q0xFVkJRVUU0Unl4SFFVRkJMRk5CUVVGMVN5eEhRVUZCZGxNc1JVRkJRVlVzUlVGQlFYTklMRVZCUVVFc2NVTkJRVUZGTEVsQlFVRXNTVUZCUVhOTExFVkJRVUY0VXl4RlFVRkJMRWRCUjBGMVV5eEZRVUZQUlN4UlFVRlZSaXhGUVVGUFJTeFRRVUZYTEVkQlEyNURRU3hSUVVGUmRrc3NhVUpCUVcxQ1JDeEpRVVZ3UWl4SlFVRk5ReXhGUVVGdFFrUXNTeXdyUWtOT2FFTXNTVUZCU1hsTExFVkJSMHBCTEVWQlFVa3NWMEZEU0N4UFFVRlBOVTRzUzBGRVNpeEhRVWxLTEVsQlJVTTBUaXhGUVVGSlFTeEhRVUZMTEVsQlFVbDJReXhUUVVGVExHTkJRV0lzUjBGRFVpeE5RVUZQZDBNc1IwRkZZeXhwUWtGQldFd3NVMEZCY1VKSkxFVkJRVWxLTEZGQlQzSkRibE1zUlVGQlQwUXNVVUZCVlhkVElpd2labWxzWlNJNkltRnRZWHB2YmkxamIyNXVaV04wTFhkbFluTnZZMnRsZEMxdFlXNWhaMlZ5TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lJRngwTHk4Z1ZHaGxJRzF2WkhWc1pTQmpZV05vWlZ4dUlGeDBkbUZ5SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE1nUFNCN2ZUdGNibHh1SUZ4MEx5OGdWR2hsSUhKbGNYVnBjbVVnWm5WdVkzUnBiMjVjYmlCY2RHWjFibU4wYVc5dUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9iVzlrZFd4bFNXUXBJSHRjYmx4dUlGeDBYSFF2THlCRGFHVmpheUJwWmlCdGIyUjFiR1VnYVhNZ2FXNGdZMkZqYUdWY2JpQmNkRngwYVdZb2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwcElIdGNiaUJjZEZ4MFhIUnlaWFIxY200Z2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwdVpYaHdiM0owY3p0Y2JpQmNkRngwZlZ4dUlGeDBYSFF2THlCRGNtVmhkR1VnWVNCdVpYY2diVzlrZFd4bElDaGhibVFnY0hWMElHbDBJR2x1ZEc4Z2RHaGxJR05oWTJobEtWeHVJRngwWEhSMllYSWdiVzlrZFd4bElEMGdhVzV6ZEdGc2JHVmtUVzlrZFd4bGMxdHRiMlIxYkdWSlpGMGdQU0I3WEc0Z1hIUmNkRngwYVRvZ2JXOWtkV3hsU1dRc1hHNGdYSFJjZEZ4MGJEb2dabUZzYzJVc1hHNGdYSFJjZEZ4MFpYaHdiM0owY3pvZ2UzMWNiaUJjZEZ4MGZUdGNibHh1SUZ4MFhIUXZMeUJGZUdWamRYUmxJSFJvWlNCdGIyUjFiR1VnWm5WdVkzUnBiMjVjYmlCY2RGeDBiVzlrZFd4bGMxdHRiMlIxYkdWSlpGMHVZMkZzYkNodGIyUjFiR1V1Wlhod2IzSjBjeXdnYlc5a2RXeGxMQ0J0YjJSMWJHVXVaWGh3YjNKMGN5d2dYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWs3WEc1Y2JpQmNkRngwTHk4Z1JteGhaeUIwYUdVZ2JXOWtkV3hsSUdGeklHeHZZV1JsWkZ4dUlGeDBYSFJ0YjJSMWJHVXViQ0E5SUhSeWRXVTdYRzVjYmlCY2RGeDBMeThnVW1WMGRYSnVJSFJvWlNCbGVIQnZjblJ6SUc5bUlIUm9aU0J0YjJSMWJHVmNiaUJjZEZ4MGNtVjBkWEp1SUcxdlpIVnNaUzVsZUhCdmNuUnpPMXh1SUZ4MGZWeHVYRzVjYmlCY2RDOHZJR1Y0Y0c5elpTQjBhR1VnYlc5a2RXeGxjeUJ2WW1wbFkzUWdLRjlmZDJWaWNHRmphMTl0YjJSMWJHVnpYMThwWEc0Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbTBnUFNCdGIyUjFiR1Z6TzF4dVhHNGdYSFF2THlCbGVIQnZjMlVnZEdobElHMXZaSFZzWlNCallXTm9aVnh1SUZ4MFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NWpJRDBnYVc1emRHRnNiR1ZrVFc5a2RXeGxjenRjYmx4dUlGeDBMeThnWkdWbWFXNWxJR2RsZEhSbGNpQm1kVzVqZEdsdmJpQm1iM0lnYUdGeWJXOXVlU0JsZUhCdmNuUnpYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtUWdQU0JtZFc1amRHbHZiaWhsZUhCdmNuUnpMQ0J1WVcxbExDQm5aWFIwWlhJcElIdGNiaUJjZEZ4MGFXWW9JVjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1YnlobGVIQnZjblJ6TENCdVlXMWxLU2tnZTF4dUlGeDBYSFJjZEU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQnVZVzFsTENCN0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc0lHZGxkRG9nWjJWMGRHVnlJSDBwTzF4dUlGeDBYSFI5WEc0Z1hIUjlPMXh1WEc0Z1hIUXZMeUJrWldacGJtVWdYMTlsYzAxdlpIVnNaU0J2YmlCbGVIQnZjblJ6WEc0Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbklnUFNCbWRXNWpkR2x2YmlobGVIQnZjblJ6S1NCN1hHNGdYSFJjZEdsbUtIUjVjR1Z2WmlCVGVXMWliMndnSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUZONWJXSnZiQzUwYjFOMGNtbHVaMVJoWnlrZ2UxeHVJRngwWEhSY2RFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JUZVcxaWIyd3VkRzlUZEhKcGJtZFVZV2NzSUhzZ2RtRnNkV1U2SUNkTmIyUjFiR1VuSUgwcE8xeHVJRngwWEhSOVhHNGdYSFJjZEU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQW5YMTlsYzAxdlpIVnNaU2NzSUhzZ2RtRnNkV1U2SUhSeWRXVWdmU2s3WEc0Z1hIUjlPMXh1WEc0Z1hIUXZMeUJqY21WaGRHVWdZU0JtWVd0bElHNWhiV1Z6Y0dGalpTQnZZbXBsWTNSY2JpQmNkQzh2SUcxdlpHVWdKaUF4T2lCMllXeDFaU0JwY3lCaElHMXZaSFZzWlNCcFpDd2djbVZ4ZFdseVpTQnBkRnh1SUZ4MEx5OGdiVzlrWlNBbUlESTZJRzFsY21kbElHRnNiQ0J3Y205d1pYSjBhV1Z6SUc5bUlIWmhiSFZsSUdsdWRHOGdkR2hsSUc1elhHNGdYSFF2THlCdGIyUmxJQ1lnTkRvZ2NtVjBkWEp1SUhaaGJIVmxJSGRvWlc0Z1lXeHlaV0ZrZVNCdWN5QnZZbXBsWTNSY2JpQmNkQzh2SUcxdlpHVWdKaUE0ZkRFNklHSmxhR0YyWlNCc2FXdGxJSEpsY1hWcGNtVmNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWRDQTlJR1oxYm1OMGFXOXVLSFpoYkhWbExDQnRiMlJsS1NCN1hHNGdYSFJjZEdsbUtHMXZaR1VnSmlBeEtTQjJZV3gxWlNBOUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9kbUZzZFdVcE8xeHVJRngwWEhScFppaHRiMlJsSUNZZ09Da2djbVYwZFhKdUlIWmhiSFZsTzF4dUlGeDBYSFJwWmlnb2JXOWtaU0FtSURRcElDWW1JSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdKMjlpYW1WamRDY2dKaVlnZG1Gc2RXVWdKaVlnZG1Gc2RXVXVYMTlsYzAxdlpIVnNaU2tnY21WMGRYSnVJSFpoYkhWbE8xeHVJRngwWEhSMllYSWdibk1nUFNCUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cE8xeHVJRngwWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxuSW9ibk1wTzF4dUlGeDBYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2JuTXNJQ2RrWldaaGRXeDBKeXdnZXlCbGJuVnRaWEpoWW14bE9pQjBjblZsTENCMllXeDFaVG9nZG1Gc2RXVWdmU2s3WEc0Z1hIUmNkR2xtS0cxdlpHVWdKaUF5SUNZbUlIUjVjR1Z2WmlCMllXeDFaU0FoUFNBbmMzUnlhVzVuSnlrZ1ptOXlLSFpoY2lCclpYa2dhVzRnZG1Gc2RXVXBJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1WkNodWN5d2dhMlY1TENCbWRXNWpkR2x2YmloclpYa3BJSHNnY21WMGRYSnVJSFpoYkhWbFcydGxlVjA3SUgwdVltbHVaQ2h1ZFd4c0xDQnJaWGtwS1R0Y2JpQmNkRngwY21WMGRYSnVJRzV6TzF4dUlGeDBmVHRjYmx4dUlGeDBMeThnWjJWMFJHVm1ZWFZzZEVWNGNHOXlkQ0JtZFc1amRHbHZiaUJtYjNJZ1kyOXRjR0YwYVdKcGJHbDBlU0IzYVhSb0lHNXZiaTFvWVhKdGIyNTVJRzF2WkhWc1pYTmNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWJpQTlJR1oxYm1OMGFXOXVLRzF2WkhWc1pTa2dlMXh1SUZ4MFhIUjJZWElnWjJWMGRHVnlJRDBnYlc5a2RXeGxJQ1ltSUcxdlpIVnNaUzVmWDJWelRXOWtkV3hsSUQ5Y2JpQmNkRngwWEhSbWRXNWpkR2x2YmlCblpYUkVaV1poZFd4MEtDa2dleUJ5WlhSMWNtNGdiVzlrZFd4bFd5ZGtaV1poZFd4MEoxMDdJSDBnT2x4dUlGeDBYSFJjZEdaMWJtTjBhVzl1SUdkbGRFMXZaSFZzWlVWNGNHOXlkSE1vS1NCN0lISmxkSFZ5YmlCdGIyUjFiR1U3SUgwN1hHNGdYSFJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dVpDaG5aWFIwWlhJc0lDZGhKeXdnWjJWMGRHVnlLVHRjYmlCY2RGeDBjbVYwZFhKdUlHZGxkSFJsY2p0Y2JpQmNkSDA3WEc1Y2JpQmNkQzh2SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkZ4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV2SUQwZ1puVnVZM1JwYjI0b2IySnFaV04wTENCd2NtOXdaWEowZVNrZ2V5QnlaWFIxY200Z1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHOWlhbVZqZEN3Z2NISnZjR1Z5ZEhrcE95QjlPMXh1WEc0Z1hIUXZMeUJmWDNkbFluQmhZMnRmY0hWaWJHbGpYM0JoZEdoZlgxeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1d0lEMGdYQ0pjSWp0Y2JseHVYRzRnWEhRdkx5Qk1iMkZrSUdWdWRISjVJRzF2WkhWc1pTQmhibVFnY21WMGRYSnVJR1Y0Y0c5eWRITmNiaUJjZEhKbGRIVnliaUJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0Y5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWN5QTlJRElwTzF4dUlpd2lhVzF3YjNKMElIc2djM0J5YVc1MFppQjlJR1p5YjIwZ1hDSnpjSEpwYm5SbUxXcHpYQ0k3WEc1amIyNXpkQ0JWZEdsc2N5QTlJSHQ5TzF4dVhHNHZLaXBjYmlBcUlFRnpjMlZ5ZEhNZ2RHaGhkQ0JoSUhCeVpXMXBjMlVnYVhNZ2RISjFaUzVjYmlBcUwxeHVWWFJwYkhNdVlYTnpaWEowVkhKMVpTQTlJR1oxYm1OMGFXOXVLSEJ5WlcxcGMyVXNJRzFsYzNOaFoyVXBJSHRjYmlBZ2FXWWdLQ0Z3Y21WdGFYTmxLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHMWxjM05oWjJVcE8xeHVJQ0I5WEc1OU8xeHVYRzR2S2lwY2JpQXFJRUZ6YzJWeWRITWdkR2hoZENCaElIWmhiSFZsSUdseklHNXZkQ0J1ZFd4c0lHOXlJSFZ1WkdWbWFXNWxaQzVjYmlBcUwxeHVWWFJwYkhNdVlYTnpaWEowVG05MFRuVnNiQ0E5SUdaMWJtTjBhVzl1S0haaGJIVmxMQ0J1WVcxbEtTQjdYRzRnSUZWMGFXeHpMbUZ6YzJWeWRGUnlkV1VvWEc0Z0lDQWdkbUZzZFdVZ0lUMDlJRzUxYkd3Z0ppWWdkSGx3Wlc5bUlIWmhiSFZsSUNFOVBTQjFibVJsWm1sdVpXUXNYRzRnSUNBZ2MzQnlhVzUwWmloY0lpVnpJRzExYzNRZ1ltVWdjSEp2ZG1sa1pXUmNJaXdnYm1GdFpTQjhmQ0JjSWtFZ2RtRnNkV1ZjSWlsY2JpQWdLVHRjYmlBZ2NtVjBkWEp1SUhaaGJIVmxPMXh1ZlR0Y2JseHVWWFJwYkhNdWFYTlRkSEpwYm1jZ1BTQm1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQmNJbk4wY21sdVoxd2lPMXh1ZlR0Y2JseHVWWFJwYkhNdVlYTnpaWEowU1hOT2IyNUZiWEIwZVZOMGNtbHVaeUE5SUdaMWJtTjBhVzl1S0haaGJIVmxMQ0JyWlhrcElIdGNiaUFnYVdZZ0tDRjJZV3gxWlNCOGZDQjBlWEJsYjJZZ2RtRnNkV1VnSVQwOUlGd2ljM1J5YVc1blhDSXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb2EyVjVJQ3NnWENJZ2FYTWdibTkwSUdFZ2JtOXVMV1Z0Y0hSNUlITjBjbWx1WnlGY0lpazdYRzRnSUgxY2JuMDdYRzVjYmxWMGFXeHpMbUZ6YzJWeWRFbHpUR2x6ZENBOUlHWjFibU4wYVc5dUtIWmhiSFZsTENCclpYa3BJSHRjYmlBZ2FXWWdLQ0ZCY25KaGVTNXBjMEZ5Y21GNUtIWmhiSFZsS1NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhyWlhrZ0t5QmNJaUJwY3lCdWIzUWdZVzRnWVhKeVlYbGNJaWs3WEc0Z0lIMWNibjA3WEc1Y2JsVjBhV3h6TG1GemMyVnlkRWx6Ulc1MWJTQTlJR1oxYm1OMGFXOXVLSFpoYkhWbExDQmhiR3h2ZDJWa1ZtRnNkV1Z6TENCclpYa3BJSHRjYmlBZ2RtRnlJR2s3WEc0Z0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCaGJHeHZkMlZrVm1Gc2RXVnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnYVdZZ0tHRnNiRzkzWldSV1lXeDFaWE5iYVYwZ1BUMDlJSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjYmlBZ0lDQnJaWGtnS3lCY0lpQndZWE56WldRZ2FYTWdibTkwSUhaaGJHbGtMaUJjSWlBcklGd2lRV3hzYjNkbFpDQjJZV3gxWlhNZ1lYSmxPaUJjSWlBcklHRnNiRzkzWldSV1lXeDFaWE5jYmlBZ0tUdGNibjA3WEc1Y2JpOHFLbHh1SUNvZ1IyVnVaWEpoZEdVZ1lXNGdaVzUxYlNCbWNtOXRJSFJvWlNCbmFYWmxiaUJzYVhOMElHOW1JR3h2ZDJWeUxXTmhjMlVnWlc1MWJTQjJZV3gxWlhNc1hHNGdLaUIzYUdWeVpTQjBhR1VnWlc1MWJTQnJaWGx6SUhkcGJHd2dZbVVnZFhCd1pYSWdZMkZ6WlM1Y2JpQXFYRzRnS2lCRGIyNTJaWEp6YVc5dUlHWnliMjBnY0dGelkyRnNJR05oYzJVZ1ltRnpaV1FnYjI0Z1kyOWtaU0JtY205dElHaGxjbVU2WEc0Z0tpQm9kSFJ3T2k4dmMzUmhZMnR2ZG1WeVpteHZkeTVqYjIwdmNYVmxjM1JwYjI1ekx6TXdOVEl4TWpJMFhHNGdLaTljYmxWMGFXeHpMbTFoYTJWRmJuVnRJRDBnWm5WdVkzUnBiMjRvZG1Gc2RXVnpLU0I3WEc0Z0lIWmhjaUJsYm5WdFQySnFJRDBnZTMwN1hHNWNiaUFnZG1Gc2RXVnpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9kbUZzZFdVcElIdGNiaUFnSUNCMllYSWdhMlY1SUQwZ2RtRnNkV1ZjYmlBZ0lDQWdJQzV5WlhCc1lXTmxLQzljWEM0L0tGdGhMWHBkS3lsZlB5OW5MQ0JtZFc1amRHbHZiaWg0TENCNUtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjVMblJ2VlhCd1pYSkRZWE5sS0NrZ0t5QmNJbDljSWp0Y2JpQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBdWNtVndiR0ZqWlNndlh5UXZMQ0JjSWx3aUtUdGNibHh1SUNBZ0lHVnVkVzFQWW1wYmEyVjVYU0E5SUhaaGJIVmxPMXh1SUNCOUtUdGNibHh1SUNCeVpYUjFjbTRnWlc1MWJVOWlhanRjYm4wN1hHNWNiaThxS2x4dUlDb2dSR1YwWlhKdGFXNWxJR2xtSUhSb1pTQm5hWFpsYmlCMllXeDFaU0JwY3lCaElHTmhiR3hoWW14bElHWjFibU4wYVc5dUlIUjVjR1V1WEc0Z0tpQkNiM0p5YjNkbFpDQm1jbTl0SUZWdVpHVnljMk52Y21VdWFuTXVYRzRnS2k5Y2JsVjBhV3h6TG1selJuVnVZM1JwYjI0Z1BTQm1kVzVqZEdsdmJpaHZZbW9wSUh0Y2JpQWdjbVYwZFhKdUlDRWhLRzlpYWlBbUppQnZZbW91WTI5dWMzUnlkV04wYjNJZ0ppWWdiMkpxTG1OaGJHd2dKaVlnYjJKcUxtRndjR3g1S1R0Y2JuMDdYRzVjYmxWMGFXeHpMbWx6VDJKcVpXTjBJRDBnWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjYmlBZ2NtVjBkWEp1SUNFb2RIbHdaVzltSUhaaGJIVmxJQ0U5UFNCY0ltOWlhbVZqZEZ3aUlIeDhJSFpoYkhWbElEMDlQU0J1ZFd4c0tUdGNibjA3WEc1Y2JsVjBhV3h6TG1selUzUnlhVzVuSUQwZ1puVnVZM1JwYjI0b2RtRnNkV1VwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ1hDSnpkSEpwYm1kY0lqdGNibjA3WEc1Y2JsVjBhV3h6TG1selRuVnRZbVZ5SUQwZ1puVnVZM1JwYjI0b2RtRnNkV1VwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ1hDSnVkVzFpWlhKY0lqdGNibjA3WEc1Y2JtTnZibk4wSUhkelVtVm5aWGdnUFNCdVpYY2dVbVZuUlhod0tGd2lYaWgzYzNNNkx5OHBYRnhjWEhjcVhDSXBPMXh1VlhScGJITXVkbUZzYVdSWFUxVnliQ0E5SUdaMWJtTjBhVzl1SUNoM2MxVnliQ2tnZTF4dUlDQnlaWFIxY200Z2QzTlNaV2RsZUM1MFpYTjBLSGR6VlhKc0tUdGNibjA3WEc1Y2JsVjBhV3h6TG1GemMyVnlkRWx6VDJKcVpXTjBJRDBnWm5WdVkzUnBiMjRvZG1Gc2RXVXNJR3RsZVNrZ2UxeHVJQ0JwWmlBb0lWVjBhV3h6TG1selQySnFaV04wS0haaGJIVmxLU2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaHJaWGtnS3lCY0lpQnBjeUJ1YjNRZ1lXNGdiMkpxWldOMElWd2lLVHRjYmlBZ2ZWeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVlhScGJITTdYRzVjYmlJc0lseHVaWGh3YjNKMElHTnZibk4wSUV4UFIxTmZSRVZUVkVsT1FWUkpUMDRnUFNCN1hHNGdJRTVWVEV3NklGd2lUbFZNVEZ3aUxGeHVJQ0JEVEVsRlRsUmZURTlIUjBWU09pQmNJa05NU1VWT1ZGOU1UMGRIUlZKY0lpeGNiaUFnUkVWQ1ZVYzZJRndpUkVWQ1ZVZGNJbHh1ZlR0Y2JseHVaWGh3YjNKMElHTnZibk4wSUUxSlRsOVhSVUpUVDBOTFJWUmZURWxHUlZSSlRVVWdQU0F6TmpBd08xeHVaWGh3YjNKMElHTnZibk4wSUUxQldGOU1TVTVGUVZKZlEwOU9Ua1ZEVkY5QlZGUkZUVkJVVXlBOUlETTdYRzVsZUhCdmNuUWdZMjl1YzNRZ1RVRllYMFZZVUU5T1JVNVVTVUZNWDBOUFRrNUZRMVJmUVZSVVJVMVFWRk1nUFNBMU8xeHVaWGh3YjNKMElHTnZibk4wSUVoRlFWSlVRa1ZCVkY5SlRsUkZVbFpCVENBOUlERXdPeUF2TDNObFkyOXVaSE5jYmx4dVpYaHdiM0owSUdOdmJuTjBJRkpQVlZSRlgwdEZXU0E5SUh0Y2JpQWdVMVZDVTBOU1NVSkZPaUJjSW1GM2N5OXpkV0p6WTNKcFltVmNJaXhjYmlBZ1ZVNVRWVUpUUTFKSlFrVTZJRndpWVhkekwzVnVjM1ZpYzJOeWFXSmxYQ0lzWEc0Z0lFaEZRVkpVUWtWQlZEb2dYQ0poZDNNdmFHVmhjblJpWldGMFhDSmNibjA3WEc0aUxDSnBiWEJ2Y25RZ1ZYUnBiSE1nWm5KdmJTQmNJaTR2ZFhScGJITmNJanRjYm1sdGNHOXlkQ0I3SUV4UFIxTmZSRVZUVkVsT1FWUkpUMDRnZlNCbWNtOXRJRndpTGk5amIyNXpkR0Z1ZEhOY0lqdGNibHh1THlwbGMyeHBiblF0WkdsellXSnNaU0J1YnkxMWJuVnpaV1F0ZG1GeWN5b3ZYRzVqYkdGemN5Qk1iMmRuWlhJZ2UxeHVJQ0JrWldKMVp5aGtZWFJoS1NCN2ZWeHVYRzRnSUdsdVptOG9aR0YwWVNrZ2UzMWNibHh1SUNCM1lYSnVLR1JoZEdFcElIdDlYRzVjYmlBZ1pYSnliM0lvWkdGMFlTa2dlMzFjYm4xY2JpOHFaWE5zYVc1MExXVnVZV0pzWlNCdWJ5MTFiblZ6WldRdGRtRnljeW92WEc1Y2JtTnZibk4wSUV4dloweGxkbVZzSUQwZ2UxeHVJQ0JFUlVKVlJ6b2dNVEFzWEc0Z0lFbE9Sazg2SURJd0xGeHVJQ0JYUVZKT09pQXpNQ3hjYmlBZ1JWSlNUMUk2SURRd1hHNTlPMXh1WEc1amJHRnpjeUJNYjJkTllXNWhaMlZ5U1cxd2JDQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lIUm9hWE11ZFhCa1lYUmxURzluWjJWeVEyOXVabWxuS0NrN1hHNGdJQ0FnZEdocGN5NWpiMjV6YjJ4bFRHOW5aMlZ5VjNKaGNIQmxjaUE5SUdOeVpXRjBaVU52Ym5OdmJHVk1iMmRuWlhJb0tUdGNiaUFnZlZ4dVhHNGdJSGR5YVhSbFZHOURiR2xsYm5STWIyZG5aWElvYkdWMlpXd3NJR3h2WjFOMFlYUmxiV1Z1ZENrZ2UxeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1b1lYTkRiR2xsYm5STWIyZG5aWElvS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmlBZ0lDQnpkMmwwWTJnZ0tHeGxkbVZzS1NCN1hHNGdJQ0FnSUNCallYTmxJRXh2WjB4bGRtVnNMa1JGUWxWSE9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWTJ4cFpXNTBURzluWjJWeUxtUmxZblZuS0d4dloxTjBZWFJsYldWdWRDazdYRzRnSUNBZ0lDQmpZWE5sSUV4dloweGxkbVZzTGtsT1JrODZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5amJHbGxiblJNYjJkblpYSXVhVzVtYnloc2IyZFRkR0YwWlcxbGJuUXBPMXh1SUNBZ0lDQWdZMkZ6WlNCTWIyZE1aWFpsYkM1WFFWSk9PbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlkyeHBaVzUwVEc5bloyVnlMbmRoY200b2JHOW5VM1JoZEdWdFpXNTBLVHRjYmlBZ0lDQWdJR05oYzJVZ1RHOW5UR1YyWld3dVJWSlNUMUk2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWpiR2xsYm5STWIyZG5aWEl1WlhKeWIzSW9iRzluVTNSaGRHVnRaVzUwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCcGMweGxkbVZzUlc1aFlteGxaQ2hzWlhabGJDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCc1pYWmxiQ0ErUFNCMGFHbHpMbDlzWlhabGJEdGNiaUFnZlZ4dVhHNGdJR2hoYzBOc2FXVnVkRXh2WjJkbGNpZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWTJ4cFpXNTBURzluWjJWeUlDRTlQU0J1ZFd4c08xeHVJQ0I5WEc1Y2JpQWdaMlYwVEc5bloyVnlLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQjJZWElnY0hKbFptbDRJRDBnYjNCMGFXOXVjeTV3Y21WbWFYZ2dmSHdnWENKY0lqdGNiaUFnSUNCcFppQW9kR2hwY3k1ZmJHOW5jMFJsYzNScGJtRjBhVzl1SUQwOVBTQk1UMGRUWDBSRlUxUkpUa0ZVU1U5T0xrUkZRbFZIS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpiMjV6YjJ4bFRHOW5aMlZ5VjNKaGNIQmxjanRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5Qk1iMmRuWlhKWGNtRndjR1Z5U1cxd2JDaHdjbVZtYVhncE8xeHVJQ0I5WEc1Y2JpQWdkWEJrWVhSbFRHOW5aMlZ5UTI5dVptbG5LR2x1Y0hWMFEyOXVabWxuS1NCN1hHNGdJQ0FnZG1GeUlHTnZibVpwWnlBOUlHbHVjSFYwUTI5dVptbG5JSHg4SUh0OU8xeHVJQ0FnSUhSb2FYTXVYMnhsZG1Wc0lEMGdZMjl1Wm1sbkxteGxkbVZzSUh4OElFeHZaMHhsZG1Wc0xrbE9Sazg3WEc0Z0lDQWdkR2hwY3k1ZlkyeHBaVzUwVEc5bloyVnlJRDBnWTI5dVptbG5MbXh2WjJkbGNpQjhmQ0J1ZFd4c08xeHVJQ0FnSUhSb2FYTXVYMnh2WjNORVpYTjBhVzVoZEdsdmJpQTlJRXhQUjFOZlJFVlRWRWxPUVZSSlQwNHVUbFZNVER0Y2JpQWdJQ0JwWmlBb1kyOXVabWxuTG1SbFluVm5LU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOXNiMmR6UkdWemRHbHVZWFJwYjI0Z1BTQk1UMGRUWDBSRlUxUkpUa0ZVU1U5T0xrUkZRbFZITzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWTI5dVptbG5MbXh2WjJkbGNpa2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZmJHOW5jMFJsYzNScGJtRjBhVzl1SUQwZ1RFOUhVMTlFUlZOVVNVNUJWRWxQVGk1RFRFbEZUbFJmVEU5SFIwVlNPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVqYkdGemN5Qk1iMmRuWlhKWGNtRndjR1Z5SUh0Y2JpQWdaR1ZpZFdjb0tTQjdmVnh1WEc0Z0lHbHVabThvS1NCN2ZWeHVYRzRnSUhkaGNtNG9LU0I3ZlZ4dVhHNGdJR1Z5Y205eUtDa2dlMzFjYm4xY2JseHVZMnhoYzNNZ1RHOW5aMlZ5VjNKaGNIQmxja2x0Y0d3Z1pYaDBaVzVrY3lCTWIyZG5aWEpYY21Gd2NHVnlJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jSEpsWm1sNEtTQjdYRzRnSUNBZ2MzVndaWElvS1R0Y2JpQWdJQ0IwYUdsekxuQnlaV1pwZUNBOUlIQnlaV1pwZUNCOGZDQmNJbHdpTzF4dUlDQjlYRzVjYmlBZ1pHVmlkV2NvTGk0dVlYSm5jeWtnZTF4dUlDQWdJSFJvYVhNdVgyeHZaeWhNYjJkTVpYWmxiQzVFUlVKVlJ5d2dZWEpuY3lrN1hHNGdJSDFjYmx4dUlDQnBibVp2S0M0dUxtRnlaM01wSUh0Y2JpQWdJQ0IwYUdsekxsOXNiMmNvVEc5blRHVjJaV3d1U1U1R1R5d2dZWEpuY3lrN1hHNGdJSDFjYmx4dUlDQjNZWEp1S0M0dUxtRnlaM01wSUh0Y2JpQWdJQ0IwYUdsekxsOXNiMmNvVEc5blRHVjJaV3d1VjBGU1Rpd2dZWEpuY3lrN1hHNGdJSDFjYmx4dUlDQmxjbkp2Y2lndUxpNWhjbWR6S1NCN1hHNGdJQ0FnZEdocGN5NWZiRzluS0V4dloweGxkbVZzTGtWU1VrOVNMQ0JoY21kektUdGNiaUFnZlZ4dVhHNGdJRjl6YUc5MWJHUk1iMmNvYkdWMlpXd3BJSHRjYmlBZ0lDQnlaWFIxY200Z1RHOW5UV0Z1WVdkbGNpNW9ZWE5EYkdsbGJuUk1iMmRuWlhJb0tTQW1KaUJNYjJkTllXNWhaMlZ5TG1selRHVjJaV3hGYm1GaWJHVmtLR3hsZG1Wc0tUdGNiaUFnZlZ4dVhHNGdJRjkzY21sMFpWUnZRMnhwWlc1MFRHOW5aMlZ5S0d4bGRtVnNMQ0JzYjJkVGRHRjBaVzFsYm5RcElIdGNiaUFnSUNCTWIyZE5ZVzVoWjJWeUxuZHlhWFJsVkc5RGJHbGxiblJNYjJkblpYSW9iR1YyWld3c0lHeHZaMU4wWVhSbGJXVnVkQ2s3WEc0Z0lIMWNibHh1SUNCZmJHOW5LR3hsZG1Wc0xDQmhjbWR6S1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WDNOb2IzVnNaRXh2Wnloc1pYWmxiQ2twSUh0Y2JpQWdJQ0FnSUhaaGNpQnNiMmRUZEdGMFpXMWxiblFnUFNCMGFHbHpMbDlqYjI1MlpYSjBWRzlUYVc1bmJHVlRkR0YwWlcxbGJuUW9ZWEpuY3lrN1hHNGdJQ0FnSUNCMGFHbHpMbDkzY21sMFpWUnZRMnhwWlc1MFRHOW5aMlZ5S0d4bGRtVnNMQ0JzYjJkVGRHRjBaVzFsYm5RcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lGOWpiMjUyWlhKMFZHOVRhVzVuYkdWVGRHRjBaVzFsYm5Rb1lYSm5jeWtnZTF4dUlDQWdJSFpoY2lCc2IyZFRkR0YwWlcxbGJuUWdQU0JjSWx3aU8xeHVJQ0FnSUdsbUlDaDBhR2x6TG5CeVpXWnBlQ2tnZTF4dUlDQWdJQ0FnYkc5blUzUmhkR1Z0Wlc1MElDczlJSFJvYVhNdWNISmxabWw0SUNzZ1hDSWdYQ0k3WEc0Z0lDQWdmVnh1SUNBZ0lHWnZjaUFvZG1GeUlHbHVaR1Y0SUQwZ01Ec2dhVzVrWlhnZ1BDQmhjbWR6TG14bGJtZDBhRHNnYVc1a1pYZ3JLeWtnZTF4dUlDQWdJQ0FnZG1GeUlHRnlaeUE5SUdGeVozTmJhVzVrWlhoZE8xeHVJQ0FnSUNBZ2JHOW5VM1JoZEdWdFpXNTBJQ3M5SUhSb2FYTXVYMk52Ym5abGNuUlViMU4wY21sdVp5aGhjbWNwSUNzZ1hDSWdYQ0k3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCc2IyZFRkR0YwWlcxbGJuUTdYRzRnSUgxY2JseHVJQ0JmWTI5dWRtVnlkRlJ2VTNSeWFXNW5LR0Z5WnlrZ2UxeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQnBaaUFvSVdGeVp5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYQ0pjSWp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDaFZkR2xzY3k1cGMxTjBjbWx1WnloaGNtY3BLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoY21jN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9WWFJwYkhNdWFYTlBZbXBsWTNRb1lYSm5LU0FtSmlCVmRHbHNjeTVwYzBaMWJtTjBhVzl1S0dGeVp5NTBiMU4wY21sdVp5a3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIUnZVM1J5YVc1blVtVnpkV3gwSUQwZ1lYSm5MblJ2VTNSeWFXNW5LQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBiMU4wY21sdVoxSmxjM1ZzZENBaFBUMGdYQ0piYjJKcVpXTjBJRTlpYW1WamRGMWNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGIxTjBjbWx1WjFKbGMzVnNkRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJRXBUVDA0dWMzUnlhVzVuYVdaNUtHRnlaeWs3WEc0Z0lDQWdmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvWENKRmNuSnZjaUIzYUdsc1pTQmpiMjUyWlhKMGFXNW5JR0Z5WjNWdFpXNTBJSFJ2SUhOMGNtbHVaMXdpTENCaGNtY3NJR1Z5Y205eUtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCY0lsd2lPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzUyWVhJZ1kzSmxZWFJsUTI5dWMyOXNaVXh2WjJkbGNpQTlJQ2dwSUQwK0lIdGNiaUFnZG1GeUlHeHZaMmRsY2lBOUlHNWxkeUJNYjJkblpYSlhjbUZ3Y0dWeUtDazdYRzRnSUd4dloyZGxjaTVrWldKMVp5QTlJR052Ym5OdmJHVXVaR1ZpZFdjN1hHNGdJR3h2WjJkbGNpNXBibVp2SUQwZ1kyOXVjMjlzWlM1cGJtWnZPMXh1SUNCc2IyZG5aWEl1ZDJGeWJpQTlJR052Ym5OdmJHVXVkMkZ5Ymp0Y2JpQWdiRzluWjJWeUxtVnljbTl5SUQwZ1kyOXVjMjlzWlM1bGNuSnZjanRjYmlBZ2NtVjBkWEp1SUd4dloyZGxjanRjYm4wN1hHNWNibU52Ym5OMElFeHZaMDFoYm1GblpYSWdQU0J1WlhjZ1RHOW5UV0Z1WVdkbGNrbHRjR3dvS1R0Y2JseHVaWGh3YjNKMElIc2dURzluVFdGdVlXZGxjaXdnVEc5bloyVnlMQ0JNYjJkTVpYWmxiQ0I5TzF4dUlpd2lhVzF3YjNKMElGVjBhV3h6SUdaeWIyMGdYQ0l1TDNWMGFXeHpYQ0k3WEc1cGJYQnZjblFnZXlCTWIyZE5ZVzVoWjJWeUxDQk1iMmRNWlhabGJDd2dURzluWjJWeUlIMGdabkp2YlNCY0lpNHZiRzluWENJN1hHNXBiWEJ2Y25RZ2UxeHVJQ0FnSUUxSlRsOVhSVUpUVDBOTFJWUmZURWxHUlZSSlRVVXNYRzRnSUNBZ1RVRllYMHhKVGtWQlVsOURUMDVPUlVOVVgwRlVWRVZOVUZSVExGeHVJQ0FnSUUxQldGOUZXRkJQVGtWT1ZFbEJURjlEVDA1T1JVTlVYMEZVVkVWTlVGUlRMRnh1SUNBZ0lFaEZRVkpVUWtWQlZGOUpUbFJGVWxaQlRDeGNiaUFnSUNCU1QxVlVSVjlMUlZsY2JuMGdabkp2YlNCY0lpNHZZMjl1YzNSaGJuUnpYQ0k3WEc1Y2JseHVZMjl1YzNRZ1YyVmlVMjlqYTJWMFRXRnVZV2RsY2lBOUlHWjFibU4wYVc5dUtDa2dlMXh1WEc0Z0lDQWdZMjl1YzNRZ2JHOW5aMlZ5SUQwZ1RHOW5UV0Z1WVdkbGNpNW5aWFJNYjJkblpYSW9lMzBwTzF4dVhHNGdJQ0FnYkdWMElIZGxZbE52WTJ0bGRDQTlJRzUxYkd3N1hHNWNiaUFnSUNCc1pYUWdjbVZqYjI1dVpXTjBRMjl1Wm1sbklEMGdlMXh1SUNBZ0lDQWdJQ0J5WldOdmJtNWxZM1JYWldKVGIyTnJaWFE2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0IzWldKemIyTnJaWFJKYm1sMFJtRnBiR1ZrT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnYkdsdVpXRnlRMjl1Ym1WamRFRjBkR1Z0Y0hRNklEQXNYRzRnSUNBZ0lDQWdJR1Y0Y0c5dVpXNTBhV0ZzUTI5dWJtVmpkRUYwZEdWdGNIUTZJREFzWEc0Z0lDQWdJQ0FnSUdWNGNHOXVaVzUwYVdGc1FtRmphMDltWmxScGJXVTZJREVzWEc0Z0lDQWdJQ0FnSUdWNGNHOXVaVzUwYVdGc1ZHbHRaVzkxZEVoaGJtUnNaVG9nYm5Wc2JDeGNiaUFnSUNBZ0lDQWdiR2xtWlZScGJXVlVhVzFsYjNWMFNHRnVaR3hsT2lCdWRXeHNYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHeGxkQ0JvWldGeWRHSmxZWFJEYjI1bWFXY2dQU0I3WEc0Z0lDQWdJQ0FnSUhCbGJtUnBibWRTWlhOd2IyNXpaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJR2x1ZEdWeWRtRnNTR0Z1Wkd4bE9pQnVkV3hzWEc0Z0lDQWdmVHRjYmx4dUlDQWdJR3hsZENCallXeHNZbUZqYTNNZ1BTQjdYRzRnSUNBZ0lDQWdJR2x1YVhSR1lXbHNkWEpsT2lCdVpYY2dVMlYwS0Nrc1hHNGdJQ0FnSUNBZ0lHZGxkRmRsWWxOdlkydGxkRlJ5WVc1emNHOXlkRG9nYm5Wc2JDeGNiaUFnSUNBZ0lDQWdjM1ZpYzJOeWFYQjBhVzl1VlhCa1lYUmxPaUJ1WlhjZ1UyVjBLQ2tzWEc0Z0lDQWdJQ0FnSUhOMVluTmpjbWx3ZEdsdmJrWmhhV3gxY21VNklHNWxkeUJUWlhRb0tTeGNiaUFnSUNBZ0lDQWdkRzl3YVdNNklHNWxkeUJOWVhBb0tTeGNiaUFnSUNBZ0lDQWdZV3hzVFdWemMyRm5aVG9nYm1WM0lGTmxkQ2dwTEZ4dUlDQWdJQ0FnSUNCamIyNXVaV04wYVc5dVIyRnBiam9nYm1WM0lGTmxkQ2dwTEZ4dUlDQWdJQ0FnSUNCamIyNXVaV04wYVc5dVRHOXpkRG9nYm1WM0lGTmxkQ2dwWEc0Z0lDQWdmVHRjYmx4dUlDQWdJR3hsZENCM1pXSlRiMk5yWlhSRGIyNW1hV2NnUFNCN1hHNGdJQ0FnSUNBZ0lHTnZibTVEYjI1bWFXYzZJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lIQnliMjFwYzJWSVlXNWtiR1U2SUc1MWJHd3NYRzRnSUNBZ0lDQWdJSEJ5YjIxcGMyVkRiMjF3YkdWMFpXUTZJR1poYkhObFhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUd4bGRDQjBiM0JwWTFOMVluTmpjbWx3ZEdsdmJpQTlJSHRjYmlBZ0lDQWdJQ0FnYzNWaWMyTnlhV0psWkRvZ2JtVjNJRk5sZENncExGeHVJQ0FnSUNBZ0lDQndaVzVrYVc1bk9pQnVaWGNnVTJWMEtDbGNiaUFnSUNCOU8xeHVYRzRnSUNBZ1kyOXVjM1FnYVc1MllXeHBaRk5sYm1STlpYTnpZV2RsVW05MWRHVkxaWGx6SUQwZ2JtVjNJRk5sZENoYlVrOVZWRVZmUzBWWkxsTlZRbE5EVWtsQ1JTd2dVazlWVkVWZlMwVlpMbFZPVTFWQ1UwTlNTVUpGTENCU1QxVlVSVjlMUlZrdVNFVkJVbFJDUlVGVVhTazdYRzVjYmlBZ0lDQnNaWFFnYjI1c2FXNWxJRDBnYm1GMmFXZGhkRzl5TG05dVRHbHVaVHRjYmlBZ0lDQmpiMjV6ZENCdVpYUjNiM0pyUTI5dWJtVmpkR2wyYVhSNVEyaGxZMnRsY2lBOUlITmxkRWx1ZEdWeWRtRnNLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzl1YkdsdVpTQWhQVDBnYm1GMmFXZGhkRzl5TG05dVRHbHVaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVzYVc1bElEMGdibUYyYVdkaGRHOXlMbTl1VEdsdVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZibXhwYm1VZ0ppWWdLQ0YzWldKVGIyTnJaWFFnZkh3Z2QyVmlVMjlqYTJWMExuSmxZV1I1VTNSaGRHVWdQaUF4S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHZaMmRsY2k1cGJtWnZLRndpVG1WMGQyOXlheUJ2Ym14cGJtVXNJRU52Ym01bFkzUnBibWNnZEc4Z2QyVmljMjlqYTJWMFhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2RsZEZkbFlsTnZZMnRsZEVOdmJtNURiMjVtYVdjb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc0lESTFNQ2s3WEc1Y2JpQWdJQ0JqYjI1emRDQnBiblp2YTJWRFlXeHNZbUZqYTNNZ1BTQm1kVzVqZEdsdmJpaGpZV3hzWW1GamEzTXNJSEpsYzNCdmJuTmxLU0I3WEc0Z0lDQWdJQ0FnSUdOaGJHeGlZV05yY3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNoallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGc2JHSmhZMnNvY21WemNHOXVjMlVwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ1kyOXVjM1FnYzJWdVpFaGxZWEowUW1WaGRDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9hR1ZoY25SaVpXRjBRMjl1Wm1sbkxuQmxibVJwYm1kU1pYTndiMjV6WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkc5bloyVnlMbmRoY200b1hDSklaV0Z5ZEdKbFlYUWdjbVZ6Y0c5dWMyVWdibTkwSUhKbFkyVnBkbVZrWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlYSkpiblJsY25aaGJDaG9aV0Z5ZEdKbFlYUkRiMjVtYVdjdWFXNTBaWEoyWVd4SVlXNWtiR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhR1ZoY25SaVpXRjBRMjl1Wm1sbkxuQmxibVJwYm1kU1pYTndiMjV6WlNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZtY21WemFGZGxZbE52WTJ0bGRFTnZibTVsWTNScGIyNG9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnNiMmRuWlhJdVpHVmlkV2NvWENKVFpXNWthVzVuSUdobFlYSjBZbVZoZEZ3aUtUdGNiaUFnSUNBZ0lDQWdkMlZpVTI5amEyVjBMbk5sYm1Rb1kzSmxZWFJsVjJWaVUyOWphMlYwVUdGNWJHOWhaQ2hTVDFWVVJWOUxSVmt1U0VWQlVsUkNSVUZVS1NrN1hHNGdJQ0FnSUNBZ0lHaGxZWEowWW1WaGRFTnZibVpwWnk1d1pXNWthVzVuVW1WemNHOXVjMlVnUFNCMGNuVmxPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjV6ZENCeVpYTmxkRk4wWVhSbElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbFkyOXVibVZqZEVOdmJtWnBaeTVzYVc1bFlYSkRiMjV1WldOMFFYUjBaVzF3ZENBOUlEQTdYRzRnSUNBZ0lDQWdJSEpsWTI5dWJtVmpkRU52Ym1acFp5NWxlSEJ2Ym1WdWRHbGhiRU52Ym01bFkzUkJkSFJsYlhCMElEMGdNRHRjYmlBZ0lDQWdJQ0FnY21WamIyNXVaV04wUTI5dVptbG5MbVY0Y0c5dVpXNTBhV0ZzUW1GamEwOW1abFJwYldVZ1BTQXhPMXh1SUNBZ0lDQWdJQ0JvWldGeWRHSmxZWFJEYjI1bWFXY3VjR1Z1WkdsdVoxSmxjM0J2Ym5ObElEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lISmxZMjl1Ym1WamRFTnZibVpwWnk1eVpXTnZibTVsWTNSWFpXSlRiMk5yWlhRZ1BTQm1ZV3h6WlR0Y2JseHVJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvY21WamIyNXVaV04wUTI5dVptbG5MbXhwWm1WVWFXMWxWR2x0Wlc5MWRFaGhibVJzWlNrN1hHNGdJQ0FnSUNBZ0lHTnNaV0Z5U1c1MFpYSjJZV3dvYUdWaGNuUmlaV0YwUTI5dVptbG5MbWx1ZEdWeWRtRnNTR0Z1Wkd4bEtUdGNiaUFnSUNBZ0lDQWdZMnhsWVhKVWFXMWxiM1YwS0hKbFkyOXVibVZqZEVOdmJtWnBaeTVsZUhCdmJtVnVkR2xoYkZScGJXVnZkWFJJWVc1a2JHVXBPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjV6ZENCM1pXSlRiMk5yWlhSUGJrOXdaVzRnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WjJkbGNpNXBibVp2S0Z3aVYyVmlVMjlqYTJWMElHTnZibTVsWTNScGIyNGdaWE4wWVdKc2FYTm9aV1FoWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1MmIydGxRMkZzYkdKaFkydHpLR05oYkd4aVlXTnJjeTVqYjI1dVpXTjBhVzl1UjJGcGJpazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjMlYwVTNSaGRHVW9LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSdmNHbGpVM1ZpYzJOeWFYQjBhVzl1TG5OMVluTmpjbWxpWldRdWMybDZaU0ErSURBZ2ZId2dkRzl3YVdOVGRXSnpZM0pwY0hScGIyNHVjR1Z1WkdsdVp5NXphWHBsSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMGIzQnBZM01nUFNCQmNuSmhlUzVtY205dEtIUnZjR2xqVTNWaWMyTnlhWEIwYVc5dUxuTjFZbk5qY21saVpXUXVkbUZzZFdWektDa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2Y0dsamN5QTlJSFJ2Y0dsamN5NWpiMjVqWVhRb1FYSnlZWGt1Wm5KdmJTaDBiM0JwWTFOMVluTmpjbWx3ZEdsdmJpNXdaVzVrYVc1bkxuWmhiSFZsY3lncEtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzl3YVdOVGRXSnpZM0pwY0hScGIyNHVjM1ZpYzJOeWFXSmxaQzVqYkdWaGNpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRsWWxOdlkydGxkQzV6Wlc1a0tHTnlaV0YwWlZkbFlsTnZZMnRsZEZCaGVXeHZZV1FvVWs5VlZFVmZTMFZaTGxOVlFsTkRVa2xDUlN3Z2Uxd2lkRzl3YVdOelhDSTZJSFJ2Y0dsamMzMHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnVaRWhsWVhKMFFtVmhkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhR1ZoY25SaVpXRjBRMjl1Wm1sbkxtbHVkR1Z5ZG1Gc1NHRnVaR3hsSUQwZ2MyVjBTVzUwWlhKMllXd29jMlZ1WkVobFlYSjBRbVZoZEN3Z01UQXdNQ0FxSUVoRlFWSlVRa1ZCVkY5SlRsUkZVbFpCVENrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFkyOXVibVZqZEVOdmJtWnBaeTVzYVdabFZHbHRaVlJwYldWdmRYUklZVzVrYkdVZ1BTQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4dloyZGxjaTVrWldKMVp5aGNJbE4wWVhKMGFXNW5JSE5qYUdWa2RXeGxaQ0JYWldKVGIyTnJaWFFnYldGdVlXZGxjaUJ5WldOdmJtNWxZM1JjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVm1jbVZ6YUZkbFlsTnZZMnRsZEVOdmJtNWxZM1JwYjI0b0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc0lERXdNREFnS2lCM1pXSlRiMk5yWlhSRGIyNW1hV2N1WTI5dWJrTnZibVpwWnk1M1pXSlRiMk5yWlhSVWNtRnVjM0J2Y25RdWRISmhibk53YjNKMFRHbG1aVlJwYldWSmJsTmxZMjl1WkhNcE8xeHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkc5bloyVnlMbVZ5Y205eUtGd2lSWEp5YjNJZ1lXWjBaWElnWlhOMFlXSnNhWE5vYVc1bklIZGxZaUJ6YjJOclpYUWdZMjl1Ym1WamRHbHZiaXdnWlhKeWIzSTZJRndpTENCbGNuSnZjaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnWTI5dWMzUWdkMlZpVTI5amEyVjBUMjVEYkc5elpTQTlJR1oxYm1OMGFXOXVLR1YyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoeVpXTnZibTVsWTNSRGIyNW1hV2N1YkdsdVpXRnlRMjl1Ym1WamRFRjBkR1Z0Y0hRZ1BEMGdNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzUyYjJ0bFEyRnNiR0poWTJ0ektHTmhiR3hpWVdOcmN5NWpiMjV1WldOMGFXOXVURzl6ZENrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdiRzluWjJWeUxtbHVabThvWENKVGIyTnJaWFFnWTI5dWJtVmpkR2x2YmlCcGN5QmpiRzl6WldRdUlHVjJaVzUwT2lCY0lpd2daWFpsYm5RcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvY21WamIyNXVaV04wUTI5dVptbG5MbkpsWTI5dWJtVmpkRmRsWWxOdlkydGxkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzVwZEZkbFlsTnZZMnRsZENncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHTnZibk4wSUhkbFlsTnZZMnRsZEU5dVJYSnliM0lnUFNCbWRXNWpkR2x2YmlobGRtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCc2IyZG5aWEl1WlhKeWIzSW9YQ0pYWldKVGIyTnJaWFJOWVc1aFoyVnlJRVZ5Y205eUxDQmxjbkp2Y2w5bGRtVnVkRG9nWENJc0lHVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ2NtVm1jbVZ6YUZkbFlsTnZZMnRsZEVOdmJtNWxZM1JwYjI0b0tUdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ1kyOXVjM1FnZDJWaVUyOWphMlYwVDI1TlpYTnpZV2RsSUQwZ1puVnVZM1JwYjI0b1pYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2JHOW5aMlZ5TG1SbFluVm5LRndpVFdWemMyRm5aU0J5WldObGFYWmxaQ0JtY205dElIZGxZbE52WTJ0bGRDQnpaWEoyWlhKY0lpd2daWFpsYm5RdVpHRjBZU2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEpsYzNCdmJuTmxJRDBnU2xOUFRpNXdZWEp6WlNobGRtVnVkQzVrWVhSaEtUdGNiaUFnSUNBZ0lDQWdjM2RwZEdOb0lDaHlaWE53YjI1elpTNTBiM0JwWXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQlNUMVZVUlY5TFJWa3VVMVZDVTBOU1NVSkZPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTndiMjV6WlM1amIyNTBaVzUwTG5OMFlYUjFjeUE5UFQwZ1hDSnpkV05qWlhOelhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpjRzl1YzJVdVkyOXVkR1Z1ZEM1MGIzQnBZM011Wm05eVJXRmphQ2dvWm5WdVkzUnBiMjRnS0hSdmNHbGpUbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOXdhV05UZFdKelkzSnBjSFJwYjI0dWMzVmljMk55YVdKbFpDNWhaR1FvZEc5d2FXTk9ZVzFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdmNHbGpVM1ZpYzJOeWFYQjBhVzl1TG5CbGJtUnBibWN1WkdWc1pYUmxLSFJ2Y0dsalRtRnRaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNTJiMnRsUTJGc2JHSmhZMnR6S0dOaGJHeGlZV05yY3k1emRXSnpZM0pwY0hScGIyNVZjR1JoZEdVc0lISmxjM0J2Ym5ObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm5admEyVkRZV3hzWW1GamEzTW9ZMkZzYkdKaFkydHpMbk4xWW5OamNtbHdkR2x2YmtaaGFXeDFjbVVzSUhKbGMzQnZibk5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZKUFZWUkZYMHRGV1M1SVJVRlNWRUpGUVZRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHOW5aMlZ5TG1SbFluVm5LRndpU0dWaGNuUmlaV0YwSUhKbGMzQnZibk5sSUhKbFkyVnBkbVZrWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGxZWEowWW1WaGRFTnZibVpwWnk1d1pXNWthVzVuVW1WemNHOXVjMlVnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjM0J2Ym5ObExuUnZjR2xqS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoallXeHNZbUZqYTNNdVlXeHNUV1Z6YzJGblpTNXphWHBsSUQwOVBTQXdJQ1ltSUdOaGJHeGlZV05yY3k1MGIzQnBZeTV6YVhwbElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyZG5aWEl1ZDJGeWJpZ25UbThnY21WbmFYTjBaWEpsWkNCallXeHNZbUZqYXlCc2FYTjBaVzVsY2lCbWIzSWdWRzl3YVdNNklDY3NJSEpsYzNCdmJuTmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBiblp2YTJWRFlXeHNZbUZqYTNNb1kyRnNiR0poWTJ0ekxtRnNiRTFsYzNOaFoyVXNJSEpsYzNCdmJuTmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR05oYkd4aVlXTnJjeTUwYjNCcFl5NW9ZWE1vY21WemNHOXVjMlV1ZEc5d2FXTXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm5admEyVkRZV3hzWW1GamEzTW9ZMkZzYkdKaFkydHpMblJ2Y0dsakxtZGxkQ2h5WlhOd2IyNXpaUzUwYjNCcFl5a3NJSEpsYzNCdmJuTmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jbVZ6Y0c5dWMyVXViV1Z6YzJGblpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyZG5aWEl1ZDJGeWJpaGNJbGRsWWxOdlkydGxkRTFoYm1GblpYSWdUV1Z6YzJGblpTQkZjbkp2Y2l3Z1pYSnliM0k2SUZ3aUxDQnlaWE53YjI1elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkc5bloyVnlMbmRoY200b1hDSkpiblpoYkdsa0lHbHVZMjl0YVc1bklHMWxjM05oWjJVc0lHVnljbTl5T2lCY0lpd2djbVZ6Y0c5dWMyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JqYjI1emRDQmpiRzl6WlZkbFlsTnZZMnRsZENBOUlHWjFibU4wYVc5dUtISmxZWE52YmlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZDJWaVUyOWphMlYwSUNZbUlIZGxZbE52WTJ0bGRDNXlaV0ZrZVZOMFlYUmxJQ0U5UFNCWFpXSlRiMk5yWlhRdVEweFBVMFZFS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IzWldKVGIyTnJaWFF1WTJ4dmMyVW9NVEF3TUN3Z2NtVmhjMjl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdZMjl1YzNRZ2NtVm1jbVZ6YUZkbFlsTnZZMnRsZEVOdmJtNWxZM1JwYjI0Z1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hiMjVzYVc1bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHOXpaVmRsWWxOdlkydGxkQ2hjSWs1bGRIZHZjbXNnVDJabWJHbHVaU3dnUTJ4dmMybHVaeUJYWldKVGIyTnJaWFFnVFdGdVlXZGxjbHdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqYkdWaGNsUnBiV1Z2ZFhRb2NtVmpiMjV1WldOMFEyOXVabWxuTG14cFptVlVhVzFsVkdsdFpXOTFkRWhoYm1Sc1pTazdYRzRnSUNBZ0lDQWdJR05zWldGeVNXNTBaWEoyWVd3b2FHVmhjblJpWldGMFEyOXVabWxuTG1sdWRHVnlkbUZzU0dGdVpHeGxLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9jbVZqYjI1dVpXTjBRMjl1Wm1sbkxteHBibVZoY2tOdmJtNWxZM1JCZEhSbGJYQjBJRHdnVFVGWVgweEpUa1ZCVWw5RFQwNU9SVU5VWDBGVVZFVk5VRlJUS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldOdmJtNWxZM1JEYjI1bWFXY3ViR2x1WldGeVEyOXVibVZqZEVGMGRHVnRjSFFyS3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WjJkbGNpNWtaV0oxWnloY0lsTjBZWEowYVc1bklFTnZibk5sWTNWMGFYWmxJRmRsWWxOdlkydGxkQ0J5WldOdmJtNWxZM1FzSUVGMGRHVnRjSFFnT2lCY0lpQXJJSEpsWTI5dWJtVmpkRU52Ym1acFp5NXNhVzVsWVhKRGIyNXVaV04wUVhSMFpXMXdkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV052Ym01bFkzUkRiMjVtYVdjdWNtVmpiMjV1WldOMFYyVmlVMjlqYTJWMElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RsZEZkbFlsTnZZMnRsZEVOdmJtNURiMjVtYVdjb0tUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h5WldOdmJtNWxZM1JEYjI1bWFXY3VaWGh3YjI1bGJuUnBZV3hEYjI1dVpXTjBRWFIwWlcxd2RDQThJRTFCV0Y5RldGQlBUa1ZPVkVsQlRGOURUMDVPUlVOVVgwRlVWRVZOVUZSVEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXTnZibTVsWTNSRGIyNW1hV2N1Wlhod2IyNWxiblJwWVd4RGIyNXVaV04wUVhSMFpXMXdkQ3NyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZqYjI1dVpXTjBRMjl1Wm1sbkxtVjRjRzl1Wlc1MGFXRnNRbUZqYTA5bVpsUnBiV1VnS2owZ01qdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4dloyZGxjaTVrWldKMVp5aGNJbE4wWVhKMGFXNW5JRVY0Y0c5dVpXNTBhV0ZzSUZkbFlsTnZZMnRsZENCeVpXTnZibTVsWTNRc0lFRjBkR1Z0Y0hRZ09pQmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ3NnY21WamIyNXVaV04wUTI5dVptbG5MbVY0Y0c5dVpXNTBhV0ZzUTI5dWJtVmpkRUYwZEdWdGNIUWdLeUJjSWlCM2FYUm9JR1JsYkdGNUlGd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLeUJ5WldOdmJtNWxZM1JEYjI1bWFXY3VaWGh3YjI1bGJuUnBZV3hDWVdOclQyWm1WR2x0WlNBcklGd2lJSE5sWXk1Y0lpazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSEpsY1hWcGNtVmtJR1p2Y2lCelkyVnVZWEpwYjNNZ2QyaGxiaUJsY25KdmNpQmhibVFnWTJ4dmMyVWdaWFpsYm5SeklHRnlaU0JtYVhKbFpDQmlZV05ySUhSdklHSmhZMnRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZGxZbE52WTJ0bGRFTnZibVpwWnk1d2NtOXRhWE5sUTI5dGNHeGxkR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNaV0pUYjJOclpYUkRiMjVtYVdjdVkyOXVia052Ym1acFp5QTlJRzUxYkd3N1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFkyOXVibVZqZEVOdmJtWnBaeTVsZUhCdmJtVnVkR2xoYkZScGJXVnZkWFJJWVc1a2JHVWdQU0J6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxZMjl1Ym1WamRFTnZibVpwWnk1eVpXTnZibTVsWTNSWFpXSlRiMk5yWlhRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkbGRGZGxZbE52WTJ0bGRFTnZibTVEYjI1bWFXY29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJREV3TURBZ0tpQnlaV052Ym01bFkzUkRiMjVtYVdjdVpYaHdiMjVsYm5ScFlXeENZV05yVDJabVZHbHRaU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2QyVmlVMjlqYTJWMFEyOXVabWxuTG5CeWIyMXBjMlZEYjIxd2JHVjBaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WjJkbGNpNWxjbkp2Y2loY0lrTnZkV3hrSUc1dmRDQmpiMjV1WldOMElIUnZJRmRsWWxOdlkydGxkQ0JoWm5SbGNpQnpaWFpsY21Gc0lHRjBkR1Z0Y0hSelhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHVnliV2x1WVhSbFYyVmlVMjlqYTJWMFRXRnVZV2RsY2lncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHTnZibk4wSUhSbGNtMXBibUYwWlZkbFlsTnZZMnRsZEUxaGJtRm5aWElnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSEpsYzJWMFUzUmhkR1VvS1R0Y2JpQWdJQ0FnSUNBZ1kyeHZjMlZYWldKVGIyTnJaWFFvWENKVVpYSnRhVzVoZEdsdVp5QlhaV0pUYjJOclpYUWdUV0Z1WVdkbGNsd2lLVHRjYmlBZ0lDQWdJQ0FnYkc5bloyVnlMbVZ5Y205eUtGd2lWMlZpVTI5amEyVjBJRWx1YVhScFlXeHBlbUYwYVc5dUlHWmhhV3hsWkZ3aUtUdGNiaUFnSUNBZ0lDQWdjbVZqYjI1dVpXTjBRMjl1Wm1sbkxuZGxZbk52WTJ0bGRFbHVhWFJHWVdsc1pXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQmpiR1ZoY2tsdWRHVnlkbUZzS0c1bGRIZHZjbXREYjI1dVpXTjBhWFpwZEhsRGFHVmphMlZ5S1R0Y2JpQWdJQ0FnSUNBZ2FXNTJiMnRsUTJGc2JHSmhZMnR6S0dOaGJHeGlZV05yY3k1cGJtbDBSbUZwYkhWeVpTazdYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHTnZibk4wSUdOeVpXRjBaVmRsWWxOdlkydGxkRkJoZVd4dllXUWdQU0JtZFc1amRHbHZiaUFvYTJWNUxDQmpiMjUwWlc1MEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQktVMDlPTG5OMGNtbHVaMmxtZVNoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW5SdmNHbGpYQ0k2SUd0bGVTeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aVkyOXVkR1Z1ZEZ3aU9pQmpiMjUwWlc1MFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjV6ZENCelpXNWtUV1Z6YzJGblpTQTlJR1oxYm1OMGFXOXVLSEJoZVd4dllXUXBJSHRjYmlBZ0lDQWdJQ0FnVlhScGJITXVZWE56WlhKMFNYTlBZbXBsWTNRb2NHRjViRzloWkN3Z1hDSndZWGxzYjJGa1hDSXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NHRjViRzloWkM1MGIzQnBZeUE5UFQwZ2RXNWtaV1pwYm1Wa0lIeDhJR2x1ZG1Gc2FXUlRaVzVrVFdWemMyRm5aVkp2ZFhSbFMyVjVjeTVvWVhNb2NHRjViRzloWkM1MGIzQnBZeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WjJkbGNpNTNZWEp1S0Z3aVEyRnVibTkwSUhObGJtUWdiV1Z6YzJGblpTd2dTVzUyWVd4cFpDQjBiM0JwWTF3aUxDQndZWGxzYjJGa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NHRjViRzloWkNBOUlFcFRUMDR1YzNSeWFXNW5hV1o1S0hCaGVXeHZZV1FwTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiRzluWjJWeUxuZGhjbTRvWENKRmNuSnZjaUJ6ZEhKcGJtZHBabmtnYldWemMyRm5aVndpTENCd1lYbHNiMkZrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2QyVmlVMjlqYTJWMElDWW1JSGRsWWxOdlkydGxkQzV5WldGa2VWTjBZWFJsSUQwOVBTQlhaV0pUYjJOclpYUXVUMUJGVGlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkc5bloyVnlMbVJsWW5WbktDZFhaV0pUYjJOclpYUk5ZVzVoWjJWeUlITmxibVJwYm1jZ2JXVnpjMkZuWlNjc0lIQmhlV3h2WVdRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJWaVUyOWphMlYwTG5ObGJtUW9jR0Y1Ykc5aFpDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc2IyZG5aWEl1ZDJGeWJpaGNJa05oYm01dmRDQnpaVzVrSUcxbGMzTmhaMlVzSUhkbFlpQnpiMk5yWlhRZ1kyOXVibVZqZEdsdmJpQnBjeUJ1YjNRZ2IzQmxibHdpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNWNiaUFnSUNCamIyNXpkQ0J6ZFdKelkzSnBZbVZVYjNCcFkzTWdQU0JtZFc1amRHbHZiaWgwYjNCcFkzTXBJSHRjYmlBZ0lDQWdJQ0FnVlhScGJITXVZWE56WlhKMFRtOTBUblZzYkNoMGIzQnBZM01zSUNkMGIzQnBZM01uS1R0Y2JpQWdJQ0FnSUNBZ1ZYUnBiSE11WVhOelpYSjBTWE5NYVhOMEtIUnZjR2xqY3lrN1hHNWNiaUFnSUNBZ0lDQWdkRzl3YVdOekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tIUnZjR2xqS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjNCcFkxTjFZbk5qY21sd2RHbHZiaTV3Wlc1a2FXNW5MbUZrWkNoMGIzQnBZeWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoM1pXSlRiMk5yWlhRZ0ppWWdkMlZpVTI5amEyVjBMbkpsWVdSNVUzUmhkR1VnUFQwOUlGZGxZbE52WTJ0bGRDNVBVRVZPS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IzWldKVGIyTnJaWFF1YzJWdVpDaGpjbVZoZEdWWFpXSlRiMk5yWlhSUVlYbHNiMkZrS0ZKUFZWUkZYMHRGV1M1VFZVSlRRMUpKUWtVc0lIdGNJblJ2Y0dsamMxd2lPaUIwYjNCcFkzTjlLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnWTI5dWMzUWdkbUZzYVdSWFpXSlRiMk5yWlhSRGIyNXVRMjl1Wm1sbklEMGdablZ1WTNScGIyNGdLR052Ym01RGIyNW1hV2NwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRlYwYVd4ekxtbHpUMkpxWldOMEtHTnZibTVEYjI1bWFXY3BJQ1ltSUZWMGFXeHpMbWx6VDJKcVpXTjBLR052Ym01RGIyNW1hV2N1ZDJWaVUyOWphMlYwVkhKaGJuTndiM0owS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdKaVlnVlhScGJITXVhWE5UZEhKcGJtY29ZMjl1YmtOdmJtWnBaeTUzWldKVGIyTnJaWFJVY21GdWMzQnZjblF1ZFhKc0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSmlZZ1ZYUnBiSE11ZG1Gc2FXUlhVMVZ5YkNoamIyNXVRMjl1Wm1sbkxuZGxZbE52WTJ0bGRGUnlZVzV6Y0c5eWRDNTFjbXdwWEc0Z0lDQWdJQ0FnSUNBZ0lDQW1KaUJWZEdsc2N5NXBjMDUxYldKbGNpaGpiMjV1UTI5dVptbG5MbmRsWWxOdlkydGxkRlJ5WVc1emNHOXlkQzUwY21GdWMzQnZjblJNYVdabFZHbHRaVWx1VTJWamIyNWtjeWtnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym01RGIyNW1hV2N1ZDJWaVUyOWphMlYwVkhKaGJuTndiM0owTG5SeVlXNXpjRzl5ZEV4cFptVlVhVzFsU1c1VFpXTnZibVJ6SUQ0OUlFMUpUbDlYUlVKVFQwTkxSVlJmVEVsR1JWUkpUVVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHeHZaMmRsY2k1bGNuSnZjaWhjSWtsdWRtRnNhV1FnVjJWaVUyOWphMlYwSUVOdmJtNWxZM1JwYjI0Z1EyOXVabWxuZFhKaGRHbHZibHdpTENCamIyNXVRMjl1Wm1sbktUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JqYjI1emRDQm5aWFJYWldKVGIyTnJaWFJEYjI1dVEyOXVabWxuSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2NtVmpiMjV1WldOMFEyOXVabWxuTG5kbFluTnZZMnRsZEVsdWFYUkdZV2xzWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCM1pXSlRiMk5yWlhSRGIyNW1hV2N1WTI5dWJrTnZibVpwWnlBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhkbFlsTnZZMnRsZEVOdmJtWnBaeTV3Y205dGFYTmxRMjl0Y0d4bGRHVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSGRsWWxOdlkydGxkRU52Ym1acFp5NXdjbTl0YVhObFNHRnVaR3hsSUQwZ1kyRnNiR0poWTJ0ekxtZGxkRmRsWWxOdlkydGxkRlJ5WVc1emNHOXlkQ2dwTzF4dUlDQWdJQ0FnSUNCM1pXSlRiMk5yWlhSRGIyNW1hV2N1Y0hKdmJXbHpaVWhoYm1Sc1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnTG5Sb1pXNG9ablZ1WTNScGIyNG9jbVZ6Y0c5dWMyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyVmlVMjlqYTJWMFEyOXVabWxuTG5CeWIyMXBjMlZEYjIxd2JHVjBaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyZG5aWEl1WkdWaWRXY29YQ0pUZFdOalpYTnpablZzYkhrZ1ptVjBZMmhsWkNCM1pXSlRiMk5yWlhRZ1kyOXVibVZqZEdsdmJpQmpiMjVtYVdkMWNtRjBhVzl1WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYWmhiR2xrVjJWaVUyOWphMlYwUTI5dWJrTnZibVpwWnloeVpYTndiMjV6WlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmxjbTFwYm1GMFpWZGxZbE52WTJ0bGRFMWhibUZuWlhJb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM1pXSlRiMk5yWlhSRGIyNW1hV2N1WTI5dWJrTnZibVpwWnlBOUlISmxjM0J2Ym5ObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXOXViR2x1WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpiRzl6WlZkbFlsTnZZMnRsZENoY0lsSmxjM1JoY25ScGJtY2dWMlZpVTI5amEyVjBJRTFoYm1GblpYSmNJaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm1sMFYyVmlVMjlqYTJWMEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaWh5WldGemIyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyVmlVMjlqYTJWMFEyOXVabWxuTG5CeWIyMXBjMlZEYjIxd2JHVjBaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyZG5aWEl1WlhKeWIzSW9YQ0pHWVdsc1pXUWdkRzhnWm1WMFkyZ2dkMlZpVTI5amEyVjBJR052Ym01bFkzUnBiMjRnWTI5dVptbG5kWEpoZEdsdmJsd2lMQ0J5WldGemIyNHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXWnlaWE5vVjJWaVUyOWphMlYwUTI5dWJtVmpkR2x2YmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjV6ZENCcGJtbDBWMlZpVTI5amEyVjBJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5WldOdmJtNWxZM1JEYjI1bWFXY3VkMlZpYzI5amEyVjBTVzVwZEVaaGFXeGxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR3h2WjJkbGNpNWtaV0oxWnloY0lrbHVhWFJwWVd4cGVtbHVaeUJYWldKemIyTnJaWFFnVFdGdVlXZGxjbHdpS1R0Y2JpQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyWVd4cFpGZGxZbE52WTJ0bGRFTnZibTVEYjI1bWFXY29kMlZpVTI5amEyVjBRMjl1Wm1sbkxtTnZibTVEYjI1bWFXY3BLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM1pXSlRiMk5yWlhRZ1BTQnVaWGNnVjJWaVUyOWphMlYwS0hkbFlsTnZZMnRsZEVOdmJtWnBaeTVqYjI1dVEyOXVabWxuTG5kbFlsTnZZMnRsZEZSeVlXNXpjRzl5ZEM1MWNtd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRsWWxOdlkydGxkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRndpYjNCbGJsd2lMQ0IzWldKVGIyTnJaWFJQYms5d1pXNHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRsWWxOdlkydGxkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRndpYldWemMyRm5aVndpTENCM1pXSlRiMk5yWlhSUGJrMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZGxZbE52WTJ0bGRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2laWEp5YjNKY0lpd2dkMlZpVTI5amEyVjBUMjVGY25KdmNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMlZpVTI5amEyVjBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0pqYkc5elpWd2lMQ0IzWldKVGIyTnJaWFJQYmtOc2IzTmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSGRsWWxOdlkydGxkRU52Ym1acFp5NXdjbTl0YVhObFEyOXRjR3hsZEdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGNtMXBibUYwWlZkbFlsTnZZMnRsZEUxaGJtRm5aWElvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNiMmRuWlhJdVpYSnliM0lvWENKRmNuSnZjaUJKYm1sMGFXRnNhWHBwYm1jZ2QyVmlMWE52WTJ0bGRDMXRZVzVoWjJWeVhDSXNJR1Z5Y205eUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSbGNtMXBibUYwWlZkbFlsTnZZMnRsZEUxaGJtRm5aWElvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNWNiaUFnSUNCamIyNXpkQ0J2YmtOdmJtNWxZM1JwYjI1SFlXbHVJRDBnWm5WdVkzUnBiMjRvWTJJcElIdGNiaUFnSUNBZ0lDQWdWWFJwYkhNdVlYTnpaWEowVkhKMVpTaFZkR2xzY3k1cGMwWjFibU4wYVc5dUtHTmlLU3dnSjJOaUlHMTFjM1FnWW1VZ1lTQm1kVzVqZEdsdmJpY3BPMXh1SUNBZ0lDQWdJQ0JqWVd4c1ltRmphM011WTI5dWJtVmpkR2x2YmtkaGFXNHVZV1JrS0dOaUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hkbFlsTnZZMnRsZENBbUppQjNaV0pUYjJOclpYUXVjbVZoWkhsVGRHRjBaU0E5UFQwZ1YyVmlVMjlqYTJWMExrOVFSVTRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05pS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDZ3BJRDArSUdOaGJHeGlZV05yY3k1amIyNXVaV04wYVc5dVIyRnBiaTVrWld4bGRHVW9ZMklwTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JqYjI1emRDQnZia052Ym01bFkzUnBiMjVNYjNOMElEMGdablZ1WTNScGIyNG9ZMklwSUh0Y2JpQWdJQ0FnSUNBZ1ZYUnBiSE11WVhOelpYSjBWSEoxWlNoVmRHbHNjeTVwYzBaMWJtTjBhVzl1S0dOaUtTd2dKMk5pSUcxMWMzUWdZbVVnWVNCbWRXNWpkR2x2YmljcE8xeHVJQ0FnSUNBZ0lDQmpZV3hzWW1GamEzTXVZMjl1Ym1WamRHbHZia3h2YzNRdVlXUmtLR05pS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSGRsWWxOdlkydGxkQ0FtSmlCM1pXSlRiMk5yWlhRdWNtVmhaSGxUZEdGMFpTQTlQVDBnVjJWaVUyOWphMlYwTGtOTVQxTkZSQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMklvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tDa2dQVDRnWTJGc2JHSmhZMnR6TG1OdmJtNWxZM1JwYjI1TWIzTjBMbVJsYkdWMFpTaGpZaWs3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJR052Ym5OMElHOXVTVzVwZEVaaGFXeDFjbVVnUFNCbWRXNWpkR2x2Ymloallpa2dlMXh1SUNBZ0lDQWdJQ0JWZEdsc2N5NWhjM05sY25SVWNuVmxLRlYwYVd4ekxtbHpSblZ1WTNScGIyNG9ZMklwTENBblkySWdiWFZ6ZENCaVpTQmhJR1oxYm1OMGFXOXVKeWs3WEc0Z0lDQWdJQ0FnSUdOaGJHeGlZV05yY3k1cGJtbDBSbUZwYkhWeVpTNWhaR1FvWTJJcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvY21WamIyNXVaV04wUTI5dVptbG5MbmRsWW5OdlkydGxkRWx1YVhSR1lXbHNaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05pS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDZ3BJRDArSUdOaGJHeGlZV05yY3k1cGJtbDBSbUZwYkhWeVpTNWtaV3hsZEdVb1kySXBPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjV6ZENCcGJtbDBJRDBnWm5WdVkzUnBiMjRvZEhKaGJuTndiM0owU0dGdVpHeGxLU0I3WEc0Z0lDQWdJQ0FnSUZWMGFXeHpMbUZ6YzJWeWRGUnlkV1VvVlhScGJITXVhWE5HZFc1amRHbHZiaWgwY21GdWMzQnZjblJJWVc1a2JHVXBMQ0FuZEhKaGJuTndiM0owU0dGdVpHeGxJRzExYzNRZ1ltVWdZU0JtZFc1amRHbHZiaWNwTzF4dUlDQWdJQ0FnSUNCcFppQW9ZMkZzYkdKaFkydHpMbWRsZEZkbFlsTnZZMnRsZEZSeVlXNXpjRzl5ZENBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkc5bloyVnlMbmRoY200b1hDSlhaV0lnVTI5amEyVjBJRTFoYm1GblpYSWdkMkZ6SUdGc2NtVmhaSGtnYVc1cGRHbGhiR2w2WldSY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1kyRnNiR0poWTJ0ekxtZGxkRmRsWWxOdlkydGxkRlJ5WVc1emNHOXlkQ0E5SUhSeVlXNXpjRzl5ZEVoaGJtUnNaVHRjYmx4dUlDQWdJQ0FnSUNCblpYUlhaV0pUYjJOclpYUkRiMjV1UTI5dVptbG5LQ2s3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJR052Ym5OMElHOXVVM1ZpYzJOeWFYQjBhVzl1VlhCa1lYUmxJRDBnWm5WdVkzUnBiMjRvWTJJcElIdGNiaUFnSUNBZ0lDQWdWWFJwYkhNdVlYTnpaWEowVkhKMVpTaFZkR2xzY3k1cGMwWjFibU4wYVc5dUtHTmlLU3dnSjJOaUlHMTFjM1FnWW1VZ1lTQm1kVzVqZEdsdmJpY3BPMXh1SUNBZ0lDQWdJQ0JqWVd4c1ltRmphM011YzNWaWMyTnlhWEIwYVc5dVZYQmtZWFJsTG1Ga1pDaGpZaWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFvS1NBOVBpQmpZV3hzWW1GamEzTXVjM1ZpYzJOeWFYQjBhVzl1VlhCa1lYUmxMbVJsYkdWMFpTaGpZaWs3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJR052Ym5OMElHOXVVM1ZpYzJOeWFYQjBhVzl1Um1GcGJIVnlaU0E5SUdaMWJtTjBhVzl1S0dOaUtTQjdYRzRnSUNBZ0lDQWdJRlYwYVd4ekxtRnpjMlZ5ZEZSeWRXVW9WWFJwYkhNdWFYTkdkVzVqZEdsdmJpaGpZaWtzSUNkallpQnRkWE4wSUdKbElHRWdablZ1WTNScGIyNG5LVHRjYmlBZ0lDQWdJQ0FnWTJGc2JHSmhZMnR6TG5OMVluTmpjbWx3ZEdsdmJrWmhhV3gxY21VdVlXUmtLR05pS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNncElEMCtJR05oYkd4aVlXTnJjeTV6ZFdKelkzSnBjSFJwYjI1R1lXbHNkWEpsTG1SbGJHVjBaU2hqWWlrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdOdmJuTjBJRzl1VFdWemMyRm5aU0E5SUdaMWJtTjBhVzl1S0hSdmNHbGpUbUZ0WlN3Z1kySXBJSHRjYmlBZ0lDQWdJQ0FnVlhScGJITXVZWE56WlhKMFRtOTBUblZzYkNoMGIzQnBZMDVoYldVc0lDZDBiM0JwWTA1aGJXVW5LVHRjYmlBZ0lDQWdJQ0FnVlhScGJITXVZWE56WlhKMFZISjFaU2hWZEdsc2N5NXBjMFoxYm1OMGFXOXVLR05pS1N3Z0oyTmlJRzExYzNRZ1ltVWdZU0JtZFc1amRHbHZiaWNwTzF4dUlDQWdJQ0FnSUNCcFppQW9ZMkZzYkdKaFkydHpMblJ2Y0dsakxtaGhjeWgwYjNCcFkwNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVd4c1ltRmphM011ZEc5d2FXTXVaMlYwS0hSdmNHbGpUbUZ0WlNrdVlXUmtLR05pS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYkd4aVlXTnJjeTUwYjNCcFl5NXpaWFFvZEc5d2FXTk9ZVzFsTENCdVpYY2dVMlYwS0Z0allsMHBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0NrZ1BUNGdZMkZzYkdKaFkydHpMblJ2Y0dsakxtZGxkQ2gwYjNCcFkwNWhiV1VwTG1SbGJHVjBaU2hqWWlrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdOdmJuTjBJRzl1UVd4c1RXVnpjMkZuWlNBOUlHWjFibU4wYVc5dUlDaGpZaWtnZTF4dUlDQWdJQ0FnSUNCVmRHbHNjeTVoYzNObGNuUlVjblZsS0ZWMGFXeHpMbWx6Um5WdVkzUnBiMjRvWTJJcExDQW5ZMklnYlhWemRDQmlaU0JoSUdaMWJtTjBhVzl1SnlrN1hHNGdJQ0FnSUNBZ0lHTmhiR3hpWVdOcmN5NWhiR3hOWlhOellXZGxMbUZrWkNoallpazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW9LU0E5UGlCallXeHNZbUZqYTNNdVlXeHNUV1Z6YzJGblpTNWtaV3hsZEdVb1kySXBPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQjBhR2x6TG1sdWFYUWdQU0JwYm1sME8xeHVJQ0FnSUhSb2FYTXViMjVKYm1sMFJtRnBiSFZ5WlNBOUlHOXVTVzVwZEVaaGFXeDFjbVU3WEc0Z0lDQWdkR2hwY3k1dmJrTnZibTVsWTNScGIyNUhZV2x1SUQwZ2IyNURiMjV1WldOMGFXOXVSMkZwYmp0Y2JpQWdJQ0IwYUdsekxtOXVRMjl1Ym1WamRHbHZia3h2YzNRZ1BTQnZia052Ym01bFkzUnBiMjVNYjNOME8xeHVJQ0FnSUhSb2FYTXViMjVUZFdKelkzSnBjSFJwYjI1VmNHUmhkR1VnUFNCdmJsTjFZbk5qY21sd2RHbHZibFZ3WkdGMFpUdGNiaUFnSUNCMGFHbHpMbTl1VTNWaWMyTnlhWEIwYVc5dVJtRnBiSFZ5WlNBOUlHOXVVM1ZpYzJOeWFYQjBhVzl1Um1GcGJIVnlaVHRjYmlBZ0lDQjBhR2x6TG05dVRXVnpjMkZuWlNBOUlHOXVUV1Z6YzJGblpUdGNiaUFnSUNCMGFHbHpMbTl1UVd4c1RXVnpjMkZuWlNBOUlHOXVRV3hzVFdWemMyRm5aVHRjYmlBZ0lDQjBhR2x6TG5OMVluTmpjbWxpWlZSdmNHbGpjeUE5SUhOMVluTmpjbWxpWlZSdmNHbGpjenRjYmlBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbElEMGdjMlZ1WkUxbGMzTmhaMlU3WEc1Y2JpQWdJQ0IwYUdsekxtTnNiM05sVjJWaVUyOWphMlYwSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsYzJWMFUzUmhkR1VvS1R0Y2JpQWdJQ0FnSUNBZ1kyeGxZWEpKYm5SbGNuWmhiQ2h1WlhSM2IzSnJRMjl1Ym1WamRHbDJhWFI1UTJobFkydGxjaWs3WEc0Z0lDQWdJQ0FnSUdOc2IzTmxWMlZpVTI5amEyVjBLRndpVlhObGNpQnlaWEYxWlhOMElIUnZJR05zYjNObElGZGxZbE52WTJ0bGRGd2lLVHRjYmlBZ0lDQjlPMXh1ZlR0Y2JseHVZMjl1YzNRZ1YyVmlVMjlqYTJWMFRXRnVZV2RsY2tOdmJuTjBjblZqZEc5eUlEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1YyVmlVMjlqYTJWMFRXRnVZV2RsY2lncE8xeHVmVHRjYmx4dVkyOXVjM1FnYzJWMFIyeHZZbUZzUTI5dVptbG5JRDBnWTI5dVptbG5JRDArSUh0Y2JpQWdJQ0JqYjI1emRDQnNiMmRuWlhKRGIyNW1hV2NnUFNCamIyNW1hV2N1Ykc5bloyVnlRMjl1Wm1sbk8xeHVJQ0FnSUV4dlowMWhibUZuWlhJdWRYQmtZWFJsVEc5bloyVnlRMjl1Wm1sbktHeHZaMmRsY2tOdmJtWnBaeWs3WEc1OU8xeHVYRzVqYjI1emRDQlhaV0pUYjJOclpYUk5ZVzVoWjJWeVQySnFaV04wSUQwZ2UxeHVJQ0FnSUdOeVpXRjBaVG9nVjJWaVUyOWphMlYwVFdGdVlXZGxja052Ym5OMGNuVmpkRzl5TEZ4dUlDQWdJSE5sZEVkc2IySmhiRU52Ym1acFp6b2djMlYwUjJ4dlltRnNRMjl1Wm1sbkxGeHVJQ0FnSUV4dloweGxkbVZzT2lCTWIyZE1aWFpsYkN4Y2JpQWdJQ0JNYjJkblpYSTZJRXh2WjJkbGNseHVmVHRjYmx4dVpYaHdiM0owSUhzZ1YyVmlVMjlqYTJWMFRXRnVZV2RsY2s5aWFtVmpkQ0I5T3lJc0lpOHFJR2RzYjJKaGJDQjNhVzVrYjNjc0lHVjRjRzl5ZEhNc0lHUmxabWx1WlNBcUwxeHVYRzRoWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSjNWelpTQnpkSEpwWTNRblhHNWNiaUFnSUNCMllYSWdjbVVnUFNCN1hHNGdJQ0FnSUNBZ0lHNXZkRjl6ZEhKcGJtYzZJQzliWG5OZEx5eGNiaUFnSUNBZ0lDQWdibTkwWDJKdmIydzZJQzliWG5SZEx5eGNiaUFnSUNBZ0lDQWdibTkwWDNSNWNHVTZJQzliWGxSZEx5eGNiaUFnSUNBZ0lDQWdibTkwWDNCeWFXMXBkR2wyWlRvZ0wxdGVkbDB2TEZ4dUlDQWdJQ0FnSUNCdWRXMWlaWEk2SUM5YlpHbGxabWRkTHl4Y2JpQWdJQ0FnSUNBZ2JuVnRaWEpwWTE5aGNtYzZJQzliWW1Oa2FXVm1aM1Y0V0YwdkxGeHVJQ0FnSUNBZ0lDQnFjMjl1T2lBdlcycGRMeXhjYmlBZ0lDQWdJQ0FnYm05MFgycHpiMjQ2SUM5YlhtcGRMeXhjYmlBZ0lDQWdJQ0FnZEdWNGREb2dMMTViWGx4Y2VESTFYU3N2TEZ4dUlDQWdJQ0FnSUNCdGIyUjFiRzg2SUM5ZVhGeDRNalY3TW4wdkxGeHVJQ0FnSUNBZ0lDQndiR0ZqWldodmJHUmxjam9nTDE1Y1hIZ3lOU2cvT2loYk1TMDVYVnhjWkNvcFhGd2tmRnhjS0NoYlhpbGRLeWxjWENrcFB5aGNYQ3NwUHlnd2ZDZGJYaVJkS1Q4b0xTay9LRnhjWkNzcFB5Zy9PbHhjTGloY1hHUXJLU2svS0Z0aUxXZHBhbTl6ZEZSMWRuaFlYU2t2TEZ4dUlDQWdJQ0FnSUNCclpYazZJQzllS0Z0aExYcGZYVnRoTFhwZlhGeGtYU29wTDJrc1hHNGdJQ0FnSUNBZ0lHdGxlVjloWTJObGMzTTZJQzllWEZ3dUtGdGhMWHBmWFZ0aExYcGZYRnhrWFNvcEwya3NYRzRnSUNBZ0lDQWdJR2x1WkdWNFgyRmpZMlZ6Y3pvZ0wxNWNYRnNvWEZ4a0t5bGNYRjB2TEZ4dUlDQWdJQ0FnSUNCemFXZHVPaUF2WGxzckxWMHZYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1puVnVZM1JwYjI0Z2MzQnlhVzUwWmloclpYa3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1lHRnlaM1Z0Wlc1MGMyQWdhWE1nYm05MElHRnVJR0Z5Y21GNUxDQmlkWFFnYzJodmRXeGtJR0psSUdacGJtVWdabTl5SUhSb2FYTWdZMkZzYkZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzNCeWFXNTBabDltYjNKdFlYUW9jM0J5YVc1MFpsOXdZWEp6WlNoclpYa3BMQ0JoY21kMWJXVnVkSE1wWEc0Z0lDQWdmVnh1WEc0Z0lDQWdablZ1WTNScGIyNGdkbk53Y21sdWRHWW9abTEwTENCaGNtZDJLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6Y0hKcGJuUm1MbUZ3Y0d4NUtHNTFiR3dzSUZ0bWJYUmRMbU52Ym1OaGRDaGhjbWQySUh4OElGdGRLU2xjYmlBZ0lDQjlYRzVjYmlBZ0lDQm1kVzVqZEdsdmJpQnpjSEpwYm5SbVgyWnZjbTFoZENod1lYSnpaVjkwY21WbExDQmhjbWQyS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJqZFhKemIzSWdQU0F4TENCMGNtVmxYMnhsYm1kMGFDQTlJSEJoY25ObFgzUnlaV1V1YkdWdVozUm9MQ0JoY21jc0lHOTFkSEIxZENBOUlDY25MQ0JwTENCckxDQndhQ3dnY0dGa0xDQndZV1JmWTJoaGNtRmpkR1Z5TENCd1lXUmZiR1Z1WjNSb0xDQnBjMTl3YjNOcGRHbDJaU3dnYzJsbmJseHVJQ0FnSUNBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2RISmxaVjlzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCd1lYSnpaVjkwY21WbFcybGRJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOTFkSEIxZENBclBTQndZWEp6WlY5MGNtVmxXMmxkWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoMGVYQmxiMllnY0dGeWMyVmZkSEpsWlZ0cFhTQTlQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2FDQTlJSEJoY25ObFgzUnlaV1ZiYVYwZ0x5OGdZMjl1ZG1WdWFXVnVZMlVnY0hWeWNHOXpaWE1nYjI1c2VWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3YUM1clpYbHpLU0I3SUM4dklHdGxlWGR2Y21RZ1lYSm5kVzFsYm5SY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpuSUQwZ1lYSm5kbHRqZFhKemIzSmRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9heUE5SURBN0lHc2dQQ0J3YUM1clpYbHpMbXhsYm1kMGFEc2dheXNyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZWEpuSUQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWh6Y0hKcGJuUm1LQ2RiYzNCeWFXNTBabDBnUTJGdWJtOTBJR0ZqWTJWemN5QndjbTl3WlhKMGVTQmNJaVZ6WENJZ2IyWWdkVzVrWldacGJtVmtJSFpoYkhWbElGd2lKWE5jSWljc0lIQm9MbXRsZVhOYmExMHNJSEJvTG10bGVYTmJheTB4WFNrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtY2dQU0JoY21kYmNHZ3VhMlY1YzF0clhWMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNod2FDNXdZWEpoYlY5dWJ5a2dleUF2THlCd2IzTnBkR2x2Ym1Gc0lHRnlaM1Z0Wlc1MElDaGxlSEJzYVdOcGRDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKbklEMGdZWEpuZGx0d2FDNXdZWEpoYlY5dWIxMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN0lDOHZJSEJ2YzJsMGFXOXVZV3dnWVhKbmRXMWxiblFnS0dsdGNHeHBZMmwwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbWNnUFNCaGNtZDJXMk4xY25OdmNpc3JYVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaUzV1YjNSZmRIbHdaUzUwWlhOMEtIQm9MblI1Y0dVcElDWW1JSEpsTG01dmRGOXdjbWx0YVhScGRtVXVkR1Z6ZENod2FDNTBlWEJsS1NBbUppQmhjbWNnYVc1emRHRnVZMlZ2WmlCR2RXNWpkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21jZ1BTQmhjbWNvS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlM1dWRXMWxjbWxqWDJGeVp5NTBaWE4wS0hCb0xuUjVjR1VwSUNZbUlDaDBlWEJsYjJZZ1lYSm5JQ0U5UFNBbmJuVnRZbVZ5SnlBbUppQnBjMDVoVGloaGNtY3BLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLSE53Y21sdWRHWW9KMXR6Y0hKcGJuUm1YU0JsZUhCbFkzUnBibWNnYm5WdFltVnlJR0oxZENCbWIzVnVaQ0FsVkNjc0lHRnlaeWtwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsTG01MWJXSmxjaTUwWlhOMEtIQm9MblI1Y0dVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdselgzQnZjMmwwYVhabElEMGdZWEpuSUQ0OUlEQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLSEJvTG5SNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuWWljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtY2dQU0J3WVhKelpVbHVkQ2hoY21jc0lERXdLUzUwYjFOMGNtbHVaeWd5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5ZeWM2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21jZ1BTQlRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLSEJoY25ObFNXNTBLR0Z5Wnl3Z01UQXBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBblpDYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMmtuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKbklEMGdjR0Z5YzJWSmJuUW9ZWEpuTENBeE1DbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjJvbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYSm5JRDBnU2xOUFRpNXpkSEpwYm1kcFpua29ZWEpuTENCdWRXeHNMQ0J3YUM1M2FXUjBhQ0EvSUhCaGNuTmxTVzUwS0hCb0xuZHBaSFJvS1NBNklEQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkbEp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnlaeUE5SUhCb0xuQnlaV05wYzJsdmJpQS9JSEJoY25ObFJteHZZWFFvWVhKbktTNTBiMFY0Y0c5dVpXNTBhV0ZzS0hCb0xuQnlaV05wYzJsdmJpa2dPaUJ3WVhKelpVWnNiMkYwS0dGeVp5a3VkRzlGZUhCdmJtVnVkR2xoYkNncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RtSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeVp5QTlJSEJvTG5CeVpXTnBjMmx2YmlBL0lIQmhjbk5sUm14dllYUW9ZWEpuS1M1MGIwWnBlR1ZrS0hCb0xuQnlaV05wYzJsdmJpa2dPaUJ3WVhKelpVWnNiMkYwS0dGeVp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjJjbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYSm5JRDBnY0dndWNISmxZMmx6YVc5dUlEOGdVM1J5YVc1bktFNTFiV0psY2loaGNtY3VkRzlRY21WamFYTnBiMjRvY0dndWNISmxZMmx6YVc5dUtTa3BJRG9nY0dGeWMyVkdiRzloZENoaGNtY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkdkp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnlaeUE5SUNod1lYSnpaVWx1ZENoaGNtY3NJREV3S1NBK1BqNGdNQ2t1ZEc5VGRISnBibWNvT0NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM01uT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKbklEMGdVM1J5YVc1bktHRnlaeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WnlBOUlDaHdhQzV3Y21WamFYTnBiMjRnUHlCaGNtY3VjM1ZpYzNSeWFXNW5LREFzSUhCb0xuQnlaV05wYzJsdmJpa2dPaUJoY21jcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2QwSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeVp5QTlJRk4wY21sdVp5Z2hJV0Z5WnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeVp5QTlJQ2h3YUM1d2NtVmphWE5wYjI0Z1B5QmhjbWN1YzNWaWMzUnlhVzVuS0RBc0lIQm9MbkJ5WldOcGMybHZiaWtnT2lCaGNtY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkVUp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnlaeUE5SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1ZEc5VGRISnBibWN1WTJGc2JDaGhjbWNwTG5Oc2FXTmxLRGdzSUMweEtTNTBiMHh2ZDJWeVEyRnpaU2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21jZ1BTQW9jR2d1Y0hKbFkybHphVzl1SUQ4Z1lYSm5Mbk4xWW5OMGNtbHVaeWd3TENCd2FDNXdjbVZqYVhOcGIyNHBJRG9nWVhKbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuZFNjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtY2dQU0J3WVhKelpVbHVkQ2hoY21jc0lERXdLU0ErUGo0Z01GeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuZGljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtY2dQU0JoY21jdWRtRnNkV1ZQWmlncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtY2dQU0FvY0dndWNISmxZMmx6YVc5dUlEOGdZWEpuTG5OMVluTjBjbWx1Wnlnd0xDQndhQzV3Y21WamFYTnBiMjRwSURvZ1lYSm5LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmVDYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbWNnUFNBb2NHRnljMlZKYm5Rb1lYSm5MQ0F4TUNrZ1BqNCtJREFwTG5SdlUzUnlhVzVuS0RFMktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuV0NjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtY2dQU0FvY0dGeWMyVkpiblFvWVhKbkxDQXhNQ2tnUGo0K0lEQXBMblJ2VTNSeWFXNW5LREUyS1M1MGIxVndjR1Z5UTJGelpTZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVV1YW5OdmJpNTBaWE4wS0hCb0xuUjVjR1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzkxZEhCMWRDQXJQU0JoY21kY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlM1dWRXMWlaWEl1ZEdWemRDaHdhQzUwZVhCbEtTQW1KaUFvSVdselgzQnZjMmwwYVhabElIeDhJSEJvTG5OcFoyNHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YVdkdUlEMGdhWE5mY0c5emFYUnBkbVVnUHlBbkt5Y2dPaUFuTFNkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeVp5QTlJR0Z5Wnk1MGIxTjBjbWx1WnlncExuSmxjR3hoWTJVb2NtVXVjMmxuYml3Z0p5Y3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFXZHVJRDBnSnlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lXUmZZMmhoY21GamRHVnlJRDBnY0dndWNHRmtYMk5vWVhJZ1B5QndhQzV3WVdSZlkyaGhjaUE5UFQwZ0p6QW5JRDhnSnpBbklEb2djR2d1Y0dGa1gyTm9ZWEl1WTJoaGNrRjBLREVwSURvZ0p5QW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaFpGOXNaVzVuZEdnZ1BTQndhQzUzYVdSMGFDQXRJQ2h6YVdkdUlDc2dZWEpuS1M1c1pXNW5kR2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRmtJRDBnY0dndWQybGtkR2dnUHlBb2NHRmtYMnhsYm1kMGFDQStJREFnUHlCd1lXUmZZMmhoY21GamRHVnlMbkpsY0dWaGRDaHdZV1JmYkdWdVozUm9LU0E2SUNjbktTQTZJQ2NuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOTFkSEIxZENBclBTQndhQzVoYkdsbmJpQS9JSE5wWjI0Z0t5QmhjbWNnS3lCd1lXUWdPaUFvY0dGa1gyTm9ZWEpoWTNSbGNpQTlQVDBnSnpBbklEOGdjMmxuYmlBcklIQmhaQ0FySUdGeVp5QTZJSEJoWkNBcklITnBaMjRnS3lCaGNtY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnZkWFJ3ZFhSY2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2MzQnlhVzUwWmw5allXTm9aU0E5SUU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNsY2JseHVJQ0FnSUdaMWJtTjBhVzl1SUhOd2NtbHVkR1pmY0dGeWMyVW9abTEwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6Y0hKcGJuUm1YMk5oWTJobFcyWnRkRjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpjSEpwYm5SbVgyTmhZMmhsVzJadGRGMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhaaGNpQmZabTEwSUQwZ1ptMTBMQ0J0WVhSamFDd2djR0Z5YzJWZmRISmxaU0E5SUZ0ZExDQmhjbWRmYm1GdFpYTWdQU0F3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2hmWm0xMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9LRzFoZEdOb0lEMGdjbVV1ZEdWNGRDNWxlR1ZqS0Y5bWJYUXBLU0FoUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGNuTmxYM1J5WldVdWNIVnphQ2h0WVhSamFGc3dYU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0NodFlYUmphQ0E5SUhKbExtMXZaSFZzYnk1bGVHVmpLRjltYlhRcEtTQWhQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoY25ObFgzUnlaV1V1Y0hWemFDZ25KU2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNnb2JXRjBZMmdnUFNCeVpTNXdiR0ZqWldodmJHUmxjaTVsZUdWaktGOW1iWFFwS1NBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0WVhSamFGc3lYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbWRmYm1GdFpYTWdmRDBnTVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWm1sbGJHUmZiR2x6ZENBOUlGdGRMQ0J5WlhCc1lXTmxiV1Z1ZEY5bWFXVnNaQ0E5SUcxaGRHTm9XekpkTENCbWFXVnNaRjl0WVhSamFDQTlJRnRkWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dvWm1sbGJHUmZiV0YwWTJnZ1BTQnlaUzVyWlhrdVpYaGxZeWh5WlhCc1lXTmxiV1Z1ZEY5bWFXVnNaQ2twSUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXVnNaRjlzYVhOMExuQjFjMmdvWm1sbGJHUmZiV0YwWTJoYk1WMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhR2xzWlNBb0tISmxjR3hoWTJWdFpXNTBYMlpwWld4a0lEMGdjbVZ3YkdGalpXMWxiblJmWm1sbGJHUXVjM1ZpYzNSeWFXNW5LR1pwWld4a1gyMWhkR05vV3pCZExteGxibWQwYUNrcElDRTlQU0FuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnb1ptbGxiR1JmYldGMFkyZ2dQU0J5WlM1clpYbGZZV05qWlhOekxtVjRaV01vY21Wd2JHRmpaVzFsYm5SZlptbGxiR1FwS1NBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXVnNaRjlzYVhOMExuQjFjMmdvWm1sbGJHUmZiV0YwWTJoYk1WMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tDaG1hV1ZzWkY5dFlYUmphQ0E5SUhKbExtbHVaR1Y0WDJGalkyVnpjeTVsZUdWaktISmxjR3hoWTJWdFpXNTBYMlpwWld4a0tTa2dJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxsYkdSZmJHbHpkQzV3ZFhOb0tHWnBaV3hrWDIxaGRHTm9XekZkS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGTjViblJoZUVWeWNtOXlLQ2RiYzNCeWFXNTBabDBnWm1GcGJHVmtJSFJ2SUhCaGNuTmxJRzVoYldWa0lHRnlaM1Z0Wlc1MElHdGxlU2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZONWJuUmhlRVZ5Y205eUtDZGJjM0J5YVc1MFpsMGdabUZwYkdWa0lIUnZJSEJoY25ObElHNWhiV1ZrSUdGeVozVnRaVzUwSUd0bGVTY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0YwWTJoYk1sMGdQU0JtYVdWc1pGOXNhWE4wWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtZGZibUZ0WlhNZ2ZEMGdNbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lYSm5YMjVoYldWeklEMDlQU0F6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25XM053Y21sdWRHWmRJRzFwZUdsdVp5QndiM05wZEdsdmJtRnNJR0Z1WkNCdVlXMWxaQ0J3YkdGalpXaHZiR1JsY25NZ2FYTWdibTkwSUNoNVpYUXBJSE4xY0hCdmNuUmxaQ2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRnljMlZmZEhKbFpTNXdkWE5vS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndiR0ZqWldodmJHUmxjam9nYldGMFkyaGJNRjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVhKaGJWOXViem9nSUNBZ2JXRjBZMmhiTVYwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCclpYbHpPaUFnSUNBZ0lDQWdiV0YwWTJoYk1sMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphV2R1T2lBZ0lDQWdJQ0FnYldGMFkyaGJNMTBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVdSZlkyaGhjam9nSUNBZ2JXRjBZMmhiTkYwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGJHbG5iam9nSUNBZ0lDQWdiV0YwWTJoYk5WMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhV1IwYURvZ0lDQWdJQ0FnYldGMFkyaGJObDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y21WamFYTnBiMjQ2SUNBZ2JXRjBZMmhiTjEwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFnSUNBZ0lDQWdiV0YwWTJoYk9GMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVGVXNTBZWGhGY25KdmNpZ25XM053Y21sdWRHWmRJSFZ1Wlhod1pXTjBaV1FnY0d4aFkyVm9iMnhrWlhJbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdYMlp0ZENBOUlGOW1iWFF1YzNWaWMzUnlhVzVuS0cxaGRHTm9XekJkTG14bGJtZDBhQ2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzNCeWFXNTBabDlqWVdOb1pWdG1iWFJkSUQwZ2NHRnljMlZmZEhKbFpWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlHVjRjRzl5ZENCMGJ5QmxhWFJvWlhJZ1luSnZkM05sY2lCdmNpQnViMlJsTG1welhHNGdJQ0FnSUNvdlhHNGdJQ0FnTHlvZ1pYTnNhVzUwTFdScGMyRmliR1VnY1hWdmRHVXRjSEp2Y0hNZ0tpOWNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHVjRjRzl5ZEhNZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lHVjRjRzl5ZEhOYkozTndjbWx1ZEdZblhTQTlJSE53Y21sdWRHWmNiaUFnSUNBZ0lDQWdaWGh3YjNKMGMxc25kbk53Y21sdWRHWW5YU0E5SUhaemNISnBiblJtWEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdkMmx1Wkc5M0lDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQjNhVzVrYjNkYkozTndjbWx1ZEdZblhTQTlJSE53Y21sdWRHWmNiaUFnSUNBZ0lDQWdkMmx1Wkc5M1d5ZDJjM0J5YVc1MFppZGRJRDBnZG5Od2NtbHVkR1pjYmx4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHUmxabWx1WlNBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCa1pXWnBibVZiSjJGdFpDZGRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV1pwYm1Vb1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjNOd2NtbHVkR1luT2lCemNISnBiblJtTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5kbk53Y21sdWRHWW5PaUIyYzNCeWFXNTBabHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ0x5b2daWE5zYVc1MExXVnVZV0pzWlNCeGRXOTBaUzF3Y205d2N5QXFMMXh1ZlNncE95QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsWEc0aUxDSXZLbVZ6YkdsdWRDQnVieTExYm5WelpXUXRkbUZ5Y3pvZ1hDSnZabVpjSWlvdlhHNXBiWEJ2Y25RZ2V5QlhaV0pUYjJOclpYUk5ZVzVoWjJWeVQySnFaV04wSUgwZ1puSnZiU0JjSWk0dmQyVmlVMjlqYTJWMFRXRnVZV2RsY2x3aU8xeHVYRzVuYkc5aVlXd3VZMjl1Ym1WamRDQTlJR2RzYjJKaGJDNWpiMjV1WldOMElIeDhJSHQ5TzF4dVkyOXVibVZqZEM1WFpXSlRiMk5yWlhSTllXNWhaMlZ5SUQwZ1YyVmlVMjlqYTJWMFRXRnVZV2RsY2s5aWFtVmpkRHRjYmx4dVpYaHdiM0owSUdOdmJuTjBJRmRsWWxOdlkydGxkRTFoYm1GblpYSWdQU0JYWldKVGIyTnJaWFJOWVc1aFoyVnlUMkpxWldOME8xeHVJaXdpZG1GeUlHYzdYRzVjYmk4dklGUm9hWE1nZDI5eWEzTWdhVzRnYm05dUxYTjBjbWxqZENCdGIyUmxYRzVuSUQwZ0tHWjFibU4wYVc5dUtDa2dlMXh1WEhSeVpYUjFjbTRnZEdocGN6dGNibjBwS0NrN1hHNWNiblJ5ZVNCN1hHNWNkQzh2SUZSb2FYTWdkMjl5YTNNZ2FXWWdaWFpoYkNCcGN5QmhiR3h2ZDJWa0lDaHpaV1VnUTFOUUtWeHVYSFJuSUQwZ1p5QjhmQ0J1WlhjZ1JuVnVZM1JwYjI0b1hDSnlaWFIxY200Z2RHaHBjMXdpS1NncE8xeHVmU0JqWVhSamFDQW9aU2tnZTF4dVhIUXZMeUJVYUdseklIZHZjbXR6SUdsbUlIUm9aU0IzYVc1a2IzY2djbVZtWlhKbGJtTmxJR2x6SUdGMllXbHNZV0pzWlZ4dVhIUnBaaUFvZEhsd1pXOW1JSGRwYm1SdmR5QTlQVDBnWENKdlltcGxZM1JjSWlrZ1p5QTlJSGRwYm1SdmR6dGNibjFjYmx4dUx5OGdaeUJqWVc0Z2MzUnBiR3dnWW1VZ2RXNWtaV1pwYm1Wa0xDQmlkWFFnYm05MGFHbHVaeUIwYnlCa2J5QmhZbTkxZENCcGRDNHVMbHh1THk4Z1YyVWdjbVYwZFhKdUlIVnVaR1ZtYVc1bFpDd2dhVzV6ZEdWaFpDQnZaaUJ1YjNSb2FXNW5JR2hsY21Vc0lITnZJR2wwSjNOY2JpOHZJR1ZoYzJsbGNpQjBieUJvWVc1a2JHVWdkR2hwY3lCallYTmxMaUJwWmlnaFoyeHZZbUZzS1NCN0lDNHVMbjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbk8xeHVJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09IiwiLy8gQVdTIFNESyBmb3IgSmF2YVNjcmlwdCB2Mi41NjkuMFxuLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vLyBMaWNlbnNlIGF0IGh0dHBzOi8vc2RrLmFtYXpvbmF3cy5jb20vanMvQlVORExFX0xJQ0VOU0UudHh0XG4hZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQscixuKXtmdW5jdGlvbiBpKHMsYSl7aWYoIXJbc10pe2lmKCF0W3NdKXt2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFhJiZ1KXJldHVybiB1KHMsITApO2lmKG8pcmV0dXJuIG8ocywhMCk7dmFyIGM9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitzK1wiJ1wiKTt0aHJvdyBjLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsY312YXIgbD1yW3NdPXtleHBvcnRzOnt9fTt0W3NdWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiBpKHRbc11bMV1bZV18fGUpfSxsLGwuZXhwb3J0cyxlLHQscixuKX1yZXR1cm4gcltzXS5leHBvcnRzfWZvcih2YXIgbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLHM9MDtzPG4ubGVuZ3RoO3MrKylpKG5bc10pO3JldHVybiBpfXJldHVybiBlfSgpKHsxOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXt2ZXJzaW9uOlwiMi4wXCIsbWV0YWRhdGE6e2FwaVZlcnNpb246XCIyMDE0LTA2LTMwXCIsZW5kcG9pbnRQcmVmaXg6XCJjb2duaXRvLWlkZW50aXR5XCIsanNvblZlcnNpb246XCIxLjFcIixwcm90b2NvbDpcImpzb25cIixzZXJ2aWNlRnVsbE5hbWU6XCJBbWF6b24gQ29nbml0byBJZGVudGl0eVwiLHNlcnZpY2VJZDpcIkNvZ25pdG8gSWRlbnRpdHlcIixzaWduYXR1cmVWZXJzaW9uOlwidjRcIix0YXJnZXRQcmVmaXg6XCJBV1NDb2duaXRvSWRlbnRpdHlTZXJ2aWNlXCIsdWlkOlwiY29nbml0by1pZGVudGl0eS0yMDE0LTA2LTMwXCJ9LG9wZXJhdGlvbnM6e0NyZWF0ZUlkZW50aXR5UG9vbDp7aW5wdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJJZGVudGl0eVBvb2xOYW1lXCIsXCJBbGxvd1VuYXV0aGVudGljYXRlZElkZW50aXRpZXNcIl0sbWVtYmVyczp7SWRlbnRpdHlQb29sTmFtZTp7fSxBbGxvd1VuYXV0aGVudGljYXRlZElkZW50aXRpZXM6e3R5cGU6XCJib29sZWFuXCJ9LEFsbG93Q2xhc3NpY0Zsb3c6e3R5cGU6XCJib29sZWFuXCJ9LFN1cHBvcnRlZExvZ2luUHJvdmlkZXJzOntzaGFwZTpcIlM1XCJ9LERldmVsb3BlclByb3ZpZGVyTmFtZTp7fSxPcGVuSWRDb25uZWN0UHJvdmlkZXJBUk5zOntzaGFwZTpcIlM5XCJ9LENvZ25pdG9JZGVudGl0eVByb3ZpZGVyczp7c2hhcGU6XCJTYlwifSxTYW1sUHJvdmlkZXJBUk5zOntzaGFwZTpcIlNnXCJ9LElkZW50aXR5UG9vbFRhZ3M6e3NoYXBlOlwiU2hcIn19fSxvdXRwdXQ6e3NoYXBlOlwiU2tcIn19LERlbGV0ZUlkZW50aXRpZXM6e2lucHV0Ont0eXBlOlwic3RydWN0dXJlXCIscmVxdWlyZWQ6W1wiSWRlbnRpdHlJZHNUb0RlbGV0ZVwiXSxtZW1iZXJzOntJZGVudGl0eUlkc1RvRGVsZXRlOnt0eXBlOlwibGlzdFwiLG1lbWJlcjp7fX19fSxvdXRwdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOntVbnByb2Nlc3NlZElkZW50aXR5SWRzOnt0eXBlOlwibGlzdFwiLG1lbWJlcjp7dHlwZTpcInN0cnVjdHVyZVwiLG1lbWJlcnM6e0lkZW50aXR5SWQ6e30sRXJyb3JDb2RlOnt9fX19fX19LERlbGV0ZUlkZW50aXR5UG9vbDp7aW5wdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJJZGVudGl0eVBvb2xJZFwiXSxtZW1iZXJzOntJZGVudGl0eVBvb2xJZDp7fX19fSxEZXNjcmliZUlkZW50aXR5OntpbnB1dDp7dHlwZTpcInN0cnVjdHVyZVwiLHJlcXVpcmVkOltcIklkZW50aXR5SWRcIl0sbWVtYmVyczp7SWRlbnRpdHlJZDp7fX19LG91dHB1dDp7c2hhcGU6XCJTdlwifX0sRGVzY3JpYmVJZGVudGl0eVBvb2w6e2lucHV0Ont0eXBlOlwic3RydWN0dXJlXCIscmVxdWlyZWQ6W1wiSWRlbnRpdHlQb29sSWRcIl0sbWVtYmVyczp7SWRlbnRpdHlQb29sSWQ6e319fSxvdXRwdXQ6e3NoYXBlOlwiU2tcIn19LEdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHk6e2lucHV0Ont0eXBlOlwic3RydWN0dXJlXCIscmVxdWlyZWQ6W1wiSWRlbnRpdHlJZFwiXSxtZW1iZXJzOntJZGVudGl0eUlkOnt9LExvZ2luczp7c2hhcGU6XCJTMTBcIn0sQ3VzdG9tUm9sZUFybjp7fX19LG91dHB1dDp7dHlwZTpcInN0cnVjdHVyZVwiLG1lbWJlcnM6e0lkZW50aXR5SWQ6e30sQ3JlZGVudGlhbHM6e3R5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOntBY2Nlc3NLZXlJZDp7fSxTZWNyZXRLZXk6e30sU2Vzc2lvblRva2VuOnt9LEV4cGlyYXRpb246e3R5cGU6XCJ0aW1lc3RhbXBcIn19fX19fSxHZXRJZDp7aW5wdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJJZGVudGl0eVBvb2xJZFwiXSxtZW1iZXJzOntBY2NvdW50SWQ6e30sSWRlbnRpdHlQb29sSWQ6e30sTG9naW5zOntzaGFwZTpcIlMxMFwifX19LG91dHB1dDp7dHlwZTpcInN0cnVjdHVyZVwiLG1lbWJlcnM6e0lkZW50aXR5SWQ6e319fX0sR2V0SWRlbnRpdHlQb29sUm9sZXM6e2lucHV0Ont0eXBlOlwic3RydWN0dXJlXCIscmVxdWlyZWQ6W1wiSWRlbnRpdHlQb29sSWRcIl0sbWVtYmVyczp7SWRlbnRpdHlQb29sSWQ6e319fSxvdXRwdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOntJZGVudGl0eVBvb2xJZDp7fSxSb2xlczp7c2hhcGU6XCJTMWNcIn0sUm9sZU1hcHBpbmdzOntzaGFwZTpcIlMxZVwifX19fSxHZXRPcGVuSWRUb2tlbjp7aW5wdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJJZGVudGl0eUlkXCJdLG1lbWJlcnM6e0lkZW50aXR5SWQ6e30sTG9naW5zOntzaGFwZTpcIlMxMFwifX19LG91dHB1dDp7dHlwZTpcInN0cnVjdHVyZVwiLG1lbWJlcnM6e0lkZW50aXR5SWQ6e30sVG9rZW46e319fX0sR2V0T3BlbklkVG9rZW5Gb3JEZXZlbG9wZXJJZGVudGl0eTp7aW5wdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJJZGVudGl0eVBvb2xJZFwiLFwiTG9naW5zXCJdLG1lbWJlcnM6e0lkZW50aXR5UG9vbElkOnt9LElkZW50aXR5SWQ6e30sTG9naW5zOntzaGFwZTpcIlMxMFwifSxUb2tlbkR1cmF0aW9uOnt0eXBlOlwibG9uZ1wifX19LG91dHB1dDp7dHlwZTpcInN0cnVjdHVyZVwiLG1lbWJlcnM6e0lkZW50aXR5SWQ6e30sVG9rZW46e319fX0sTGlzdElkZW50aXRpZXM6e2lucHV0Ont0eXBlOlwic3RydWN0dXJlXCIscmVxdWlyZWQ6W1wiSWRlbnRpdHlQb29sSWRcIixcIk1heFJlc3VsdHNcIl0sbWVtYmVyczp7SWRlbnRpdHlQb29sSWQ6e30sTWF4UmVzdWx0czp7dHlwZTpcImludGVnZXJcIn0sTmV4dFRva2VuOnt9LEhpZGVEaXNhYmxlZDp7dHlwZTpcImJvb2xlYW5cIn19fSxvdXRwdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOntJZGVudGl0eVBvb2xJZDp7fSxJZGVudGl0aWVzOnt0eXBlOlwibGlzdFwiLG1lbWJlcjp7c2hhcGU6XCJTdlwifX0sTmV4dFRva2VuOnt9fX19LExpc3RJZGVudGl0eVBvb2xzOntpbnB1dDp7dHlwZTpcInN0cnVjdHVyZVwiLHJlcXVpcmVkOltcIk1heFJlc3VsdHNcIl0sbWVtYmVyczp7TWF4UmVzdWx0czp7dHlwZTpcImludGVnZXJcIn0sTmV4dFRva2VuOnt9fX0sb3V0cHV0Ont0eXBlOlwic3RydWN0dXJlXCIsbWVtYmVyczp7SWRlbnRpdHlQb29sczp7dHlwZTpcImxpc3RcIixtZW1iZXI6e3R5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOntJZGVudGl0eVBvb2xJZDp7fSxJZGVudGl0eVBvb2xOYW1lOnt9fX19LE5leHRUb2tlbjp7fX19fSxMaXN0VGFnc0ZvclJlc291cmNlOntpbnB1dDp7dHlwZTpcInN0cnVjdHVyZVwiLHJlcXVpcmVkOltcIlJlc291cmNlQXJuXCJdLG1lbWJlcnM6e1Jlc291cmNlQXJuOnt9fX0sb3V0cHV0Ont0eXBlOlwic3RydWN0dXJlXCIsbWVtYmVyczp7VGFnczp7c2hhcGU6XCJTaFwifX19fSxMb29rdXBEZXZlbG9wZXJJZGVudGl0eTp7aW5wdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJJZGVudGl0eVBvb2xJZFwiXSxtZW1iZXJzOntJZGVudGl0eVBvb2xJZDp7fSxJZGVudGl0eUlkOnt9LERldmVsb3BlclVzZXJJZGVudGlmaWVyOnt9LE1heFJlc3VsdHM6e3R5cGU6XCJpbnRlZ2VyXCJ9LE5leHRUb2tlbjp7fX19LG91dHB1dDp7dHlwZTpcInN0cnVjdHVyZVwiLG1lbWJlcnM6e0lkZW50aXR5SWQ6e30sRGV2ZWxvcGVyVXNlcklkZW50aWZpZXJMaXN0Ont0eXBlOlwibGlzdFwiLG1lbWJlcjp7fX0sTmV4dFRva2VuOnt9fX19LE1lcmdlRGV2ZWxvcGVySWRlbnRpdGllczp7aW5wdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJTb3VyY2VVc2VySWRlbnRpZmllclwiLFwiRGVzdGluYXRpb25Vc2VySWRlbnRpZmllclwiLFwiRGV2ZWxvcGVyUHJvdmlkZXJOYW1lXCIsXCJJZGVudGl0eVBvb2xJZFwiXSxtZW1iZXJzOntTb3VyY2VVc2VySWRlbnRpZmllcjp7fSxEZXN0aW5hdGlvblVzZXJJZGVudGlmaWVyOnt9LERldmVsb3BlclByb3ZpZGVyTmFtZTp7fSxJZGVudGl0eVBvb2xJZDp7fX19LG91dHB1dDp7dHlwZTpcInN0cnVjdHVyZVwiLG1lbWJlcnM6e0lkZW50aXR5SWQ6e319fX0sU2V0SWRlbnRpdHlQb29sUm9sZXM6e2lucHV0Ont0eXBlOlwic3RydWN0dXJlXCIscmVxdWlyZWQ6W1wiSWRlbnRpdHlQb29sSWRcIixcIlJvbGVzXCJdLG1lbWJlcnM6e0lkZW50aXR5UG9vbElkOnt9LFJvbGVzOntzaGFwZTpcIlMxY1wifSxSb2xlTWFwcGluZ3M6e3NoYXBlOlwiUzFlXCJ9fX19LFRhZ1Jlc291cmNlOntpbnB1dDp7dHlwZTpcInN0cnVjdHVyZVwiLHJlcXVpcmVkOltcIlJlc291cmNlQXJuXCIsXCJUYWdzXCJdLG1lbWJlcnM6e1Jlc291cmNlQXJuOnt9LFRhZ3M6e3NoYXBlOlwiU2hcIn19fSxvdXRwdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOnt9fX0sVW5saW5rRGV2ZWxvcGVySWRlbnRpdHk6e2lucHV0Ont0eXBlOlwic3RydWN0dXJlXCIscmVxdWlyZWQ6W1wiSWRlbnRpdHlJZFwiLFwiSWRlbnRpdHlQb29sSWRcIixcIkRldmVsb3BlclByb3ZpZGVyTmFtZVwiLFwiRGV2ZWxvcGVyVXNlcklkZW50aWZpZXJcIl0sbWVtYmVyczp7SWRlbnRpdHlJZDp7fSxJZGVudGl0eVBvb2xJZDp7fSxEZXZlbG9wZXJQcm92aWRlck5hbWU6e30sRGV2ZWxvcGVyVXNlcklkZW50aWZpZXI6e319fX0sVW5saW5rSWRlbnRpdHk6e2lucHV0Ont0eXBlOlwic3RydWN0dXJlXCIscmVxdWlyZWQ6W1wiSWRlbnRpdHlJZFwiLFwiTG9naW5zXCIsXCJMb2dpbnNUb1JlbW92ZVwiXSxtZW1iZXJzOntJZGVudGl0eUlkOnt9LExvZ2luczp7c2hhcGU6XCJTMTBcIn0sTG9naW5zVG9SZW1vdmU6e3NoYXBlOlwiU3dcIn19fX0sVW50YWdSZXNvdXJjZTp7aW5wdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJSZXNvdXJjZUFyblwiLFwiVGFnS2V5c1wiXSxtZW1iZXJzOntSZXNvdXJjZUFybjp7fSxUYWdLZXlzOnt0eXBlOlwibGlzdFwiLG1lbWJlcjp7fX19fSxvdXRwdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOnt9fX0sVXBkYXRlSWRlbnRpdHlQb29sOntpbnB1dDp7c2hhcGU6XCJTa1wifSxvdXRwdXQ6e3NoYXBlOlwiU2tcIn19fSxzaGFwZXM6e1M1Ont0eXBlOlwibWFwXCIsa2V5Ont9LHZhbHVlOnt9fSxTOTp7dHlwZTpcImxpc3RcIixtZW1iZXI6e319LFNiOnt0eXBlOlwibGlzdFwiLG1lbWJlcjp7dHlwZTpcInN0cnVjdHVyZVwiLG1lbWJlcnM6e1Byb3ZpZGVyTmFtZTp7fSxDbGllbnRJZDp7fSxTZXJ2ZXJTaWRlVG9rZW5DaGVjazp7dHlwZTpcImJvb2xlYW5cIn19fX0sU2c6e3R5cGU6XCJsaXN0XCIsbWVtYmVyOnt9fSxTaDp7dHlwZTpcIm1hcFwiLGtleTp7fSx2YWx1ZTp7fX0sU2s6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJJZGVudGl0eVBvb2xJZFwiLFwiSWRlbnRpdHlQb29sTmFtZVwiLFwiQWxsb3dVbmF1dGhlbnRpY2F0ZWRJZGVudGl0aWVzXCJdLG1lbWJlcnM6e0lkZW50aXR5UG9vbElkOnt9LElkZW50aXR5UG9vbE5hbWU6e30sQWxsb3dVbmF1dGhlbnRpY2F0ZWRJZGVudGl0aWVzOnt0eXBlOlwiYm9vbGVhblwifSxBbGxvd0NsYXNzaWNGbG93Ont0eXBlOlwiYm9vbGVhblwifSxTdXBwb3J0ZWRMb2dpblByb3ZpZGVyczp7c2hhcGU6XCJTNVwifSxEZXZlbG9wZXJQcm92aWRlck5hbWU6e30sT3BlbklkQ29ubmVjdFByb3ZpZGVyQVJOczp7c2hhcGU6XCJTOVwifSxDb2duaXRvSWRlbnRpdHlQcm92aWRlcnM6e3NoYXBlOlwiU2JcIn0sU2FtbFByb3ZpZGVyQVJOczp7c2hhcGU6XCJTZ1wifSxJZGVudGl0eVBvb2xUYWdzOntzaGFwZTpcIlNoXCJ9fX0sU3Y6e3R5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOntJZGVudGl0eUlkOnt9LExvZ2luczp7c2hhcGU6XCJTd1wifSxDcmVhdGlvbkRhdGU6e3R5cGU6XCJ0aW1lc3RhbXBcIn0sTGFzdE1vZGlmaWVkRGF0ZTp7dHlwZTpcInRpbWVzdGFtcFwifX19LFN3Ont0eXBlOlwibGlzdFwiLG1lbWJlcjp7fX0sUzEwOnt0eXBlOlwibWFwXCIsa2V5Ont9LHZhbHVlOnt9fSxTMWM6e3R5cGU6XCJtYXBcIixrZXk6e30sdmFsdWU6e319LFMxZTp7dHlwZTpcIm1hcFwiLGtleTp7fSx2YWx1ZTp7dHlwZTpcInN0cnVjdHVyZVwiLHJlcXVpcmVkOltcIlR5cGVcIl0sbWVtYmVyczp7VHlwZTp7fSxBbWJpZ3VvdXNSb2xlUmVzb2x1dGlvbjp7fSxSdWxlc0NvbmZpZ3VyYXRpb246e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJSdWxlc1wiXSxtZW1iZXJzOntSdWxlczp7dHlwZTpcImxpc3RcIixtZW1iZXI6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJDbGFpbVwiLFwiTWF0Y2hUeXBlXCIsXCJWYWx1ZVwiLFwiUm9sZUFSTlwiXSxtZW1iZXJzOntDbGFpbTp7fSxNYXRjaFR5cGU6e30sVmFsdWU6e30sUm9sZUFSTjp7fX19fX19fX19fX19LHt9XSwyOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtwYWdpbmF0aW9uOnt9fX0se31dLDM6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e3ZlcnNpb246XCIyLjBcIixtZXRhZGF0YTp7YXBpVmVyc2lvbjpcIjIwMTgtMDktMDdcIixlbmRwb2ludFByZWZpeDpcInBhcnRpY2lwYW50LmNvbm5lY3RcIixqc29uVmVyc2lvbjpcIjEuMVwiLHByb3RvY29sOlwicmVzdC1qc29uXCIsc2VydmljZUFiYnJldmlhdGlvbjpcIkFtYXpvbiBDb25uZWN0IFBhcnRpY2lwYW50XCIsc2VydmljZUZ1bGxOYW1lOlwiQW1hem9uIENvbm5lY3QgUGFydGljaXBhbnQgU2VydmljZVwiLHNlcnZpY2VJZDpcIkNvbm5lY3RQYXJ0aWNpcGFudFwiLHNpZ25hdHVyZVZlcnNpb246XCJ2NFwiLHNpZ25pbmdOYW1lOlwiZXhlY3V0ZS1hcGlcIix1aWQ6XCJjb25uZWN0cGFydGljaXBhbnQtMjAxOC0wOS0wN1wifSxvcGVyYXRpb25zOntDcmVhdGVQYXJ0aWNpcGFudENvbm5lY3Rpb246e2h0dHA6e3JlcXVlc3RVcmk6XCIvcGFydGljaXBhbnQvY29ubmVjdGlvblwifSxpbnB1dDp7dHlwZTpcInN0cnVjdHVyZVwiLHJlcXVpcmVkOltcIlR5cGVcIixcIlBhcnRpY2lwYW50VG9rZW5cIl0sbWVtYmVyczp7VHlwZTp7dHlwZTpcImxpc3RcIixtZW1iZXI6e319LFBhcnRpY2lwYW50VG9rZW46e2xvY2F0aW9uOlwiaGVhZGVyXCIsbG9jYXRpb25OYW1lOlwiWC1BbXotQmVhcmVyXCJ9fX0sb3V0cHV0Ont0eXBlOlwic3RydWN0dXJlXCIsbWVtYmVyczp7V2Vic29ja2V0Ont0eXBlOlwic3RydWN0dXJlXCIsbWVtYmVyczp7VXJsOnt9LENvbm5lY3Rpb25FeHBpcnk6e319fSxDb25uZWN0aW9uQ3JlZGVudGlhbHM6e3R5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOntDb25uZWN0aW9uVG9rZW46e30sRXhwaXJ5Ont9fX19fX0sRGlzY29ubmVjdFBhcnRpY2lwYW50OntodHRwOntyZXF1ZXN0VXJpOlwiL3BhcnRpY2lwYW50L2Rpc2Nvbm5lY3RcIn0saW5wdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJDb25uZWN0aW9uVG9rZW5cIl0sbWVtYmVyczp7Q2xpZW50VG9rZW46e2lkZW1wb3RlbmN5VG9rZW46ITB9LENvbm5lY3Rpb25Ub2tlbjp7bG9jYXRpb246XCJoZWFkZXJcIixsb2NhdGlvbk5hbWU6XCJYLUFtei1CZWFyZXJcIn19fSxvdXRwdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOnt9fX0sR2V0VHJhbnNjcmlwdDp7aHR0cDp7cmVxdWVzdFVyaTpcIi9wYXJ0aWNpcGFudC90cmFuc2NyaXB0XCJ9LGlucHV0Ont0eXBlOlwic3RydWN0dXJlXCIscmVxdWlyZWQ6W1wiQ29ubmVjdGlvblRva2VuXCJdLG1lbWJlcnM6e0NvbnRhY3RJZDp7fSxNYXhSZXN1bHRzOnt0eXBlOlwiaW50ZWdlclwifSxOZXh0VG9rZW46e30sU2NhbkRpcmVjdGlvbjp7fSxTb3J0T3JkZXI6e30sU3RhcnRQb3NpdGlvbjp7dHlwZTpcInN0cnVjdHVyZVwiLG1lbWJlcnM6e0lkOnt9LEFic29sdXRlVGltZTp7fSxNb3N0UmVjZW50Ont0eXBlOlwiaW50ZWdlclwifX19LENvbm5lY3Rpb25Ub2tlbjp7bG9jYXRpb246XCJoZWFkZXJcIixsb2NhdGlvbk5hbWU6XCJYLUFtei1CZWFyZXJcIn19fSxvdXRwdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOntJbml0aWFsQ29udGFjdElkOnt9LFRyYW5zY3JpcHQ6e3R5cGU6XCJsaXN0XCIsbWVtYmVyOnt0eXBlOlwic3RydWN0dXJlXCIsbWVtYmVyczp7QWJzb2x1dGVUaW1lOnt9LENvbnRlbnQ6e30sQ29udGVudFR5cGU6e30sSWQ6e30sVHlwZTp7fSxQYXJ0aWNpcGFudElkOnt9LERpc3BsYXlOYW1lOnt9LFBhcnRpY2lwYW50Um9sZTp7fX19fSxOZXh0VG9rZW46e319fX0sU2VuZEV2ZW50OntodHRwOntyZXF1ZXN0VXJpOlwiL3BhcnRpY2lwYW50L2V2ZW50XCJ9LGlucHV0Ont0eXBlOlwic3RydWN0dXJlXCIscmVxdWlyZWQ6W1wiQ29udGVudFR5cGVcIixcIkNvbm5lY3Rpb25Ub2tlblwiXSxtZW1iZXJzOntDb250ZW50VHlwZTp7fSxDb250ZW50Ont9LENsaWVudFRva2VuOntpZGVtcG90ZW5jeVRva2VuOiEwfSxDb25uZWN0aW9uVG9rZW46e2xvY2F0aW9uOlwiaGVhZGVyXCIsbG9jYXRpb25OYW1lOlwiWC1BbXotQmVhcmVyXCJ9fX0sb3V0cHV0Ont0eXBlOlwic3RydWN0dXJlXCIsbWVtYmVyczp7SWQ6e30sQWJzb2x1dGVUaW1lOnt9fX19LFNlbmRNZXNzYWdlOntodHRwOntyZXF1ZXN0VXJpOlwiL3BhcnRpY2lwYW50L21lc3NhZ2VcIn0saW5wdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJDb250ZW50VHlwZVwiLFwiQ29udGVudFwiLFwiQ29ubmVjdGlvblRva2VuXCJdLG1lbWJlcnM6e0NvbnRlbnRUeXBlOnt9LENvbnRlbnQ6e30sQ2xpZW50VG9rZW46e2lkZW1wb3RlbmN5VG9rZW46ITB9LENvbm5lY3Rpb25Ub2tlbjp7bG9jYXRpb246XCJoZWFkZXJcIixsb2NhdGlvbk5hbWU6XCJYLUFtei1CZWFyZXJcIn19fSxvdXRwdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOntJZDp7fSxBYnNvbHV0ZVRpbWU6e319fX19LHNoYXBlczp7fX19LHt9XSw0OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtwYWdpbmF0aW9uOntHZXRUcmFuc2NyaXB0OntpbnB1dF90b2tlbjpcIk5leHRUb2tlblwiLG91dHB1dF90b2tlbjpcIk5leHRUb2tlblwiLGxpbWl0X2tleTpcIk1heFJlc3VsdHNcIn19fX0se31dLDU6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e2FjbTp7bmFtZTpcIkFDTVwiLGNvcnM6ITB9LGFwaWdhdGV3YXk6e25hbWU6XCJBUElHYXRld2F5XCIsY29yczohMH0sYXBwbGljYXRpb25hdXRvc2NhbGluZzp7cHJlZml4OlwiYXBwbGljYXRpb24tYXV0b3NjYWxpbmdcIixuYW1lOlwiQXBwbGljYXRpb25BdXRvU2NhbGluZ1wiLGNvcnM6ITB9LGFwcHN0cmVhbTp7bmFtZTpcIkFwcFN0cmVhbVwifSxhdXRvc2NhbGluZzp7bmFtZTpcIkF1dG9TY2FsaW5nXCIsY29yczohMH0sYmF0Y2g6e25hbWU6XCJCYXRjaFwifSxidWRnZXRzOntuYW1lOlwiQnVkZ2V0c1wifSxjbG91ZGRpcmVjdG9yeTp7bmFtZTpcIkNsb3VkRGlyZWN0b3J5XCIsdmVyc2lvbnM6W1wiMjAxNi0wNS0xMCpcIl19LGNsb3VkZm9ybWF0aW9uOntuYW1lOlwiQ2xvdWRGb3JtYXRpb25cIixjb3JzOiEwfSxjbG91ZGZyb250OntuYW1lOlwiQ2xvdWRGcm9udFwiLHZlcnNpb25zOltcIjIwMTMtMDUtMTIqXCIsXCIyMDEzLTExLTExKlwiLFwiMjAxNC0wNS0zMSpcIixcIjIwMTQtMTAtMjEqXCIsXCIyMDE0LTExLTA2KlwiLFwiMjAxNS0wNC0xNypcIixcIjIwMTUtMDctMjcqXCIsXCIyMDE1LTA5LTE3KlwiLFwiMjAxNi0wMS0xMypcIixcIjIwMTYtMDEtMjgqXCIsXCIyMDE2LTA4LTAxKlwiLFwiMjAxNi0wOC0yMCpcIixcIjIwMTYtMDktMDcqXCIsXCIyMDE2LTA5LTI5KlwiLFwiMjAxNi0xMS0yNSpcIixcIjIwMTctMDMtMjUqXCIsXCIyMDE3LTEwLTMwKlwiLFwiMjAxOC0wNi0xOCpcIixcIjIwMTgtMTEtMDUqXCJdLGNvcnM6ITB9LGNsb3VkaHNtOntuYW1lOlwiQ2xvdWRIU01cIixjb3JzOiEwfSxjbG91ZHNlYXJjaDp7bmFtZTpcIkNsb3VkU2VhcmNoXCJ9LGNsb3Vkc2VhcmNoZG9tYWluOntuYW1lOlwiQ2xvdWRTZWFyY2hEb21haW5cIn0sY2xvdWR0cmFpbDp7bmFtZTpcIkNsb3VkVHJhaWxcIixjb3JzOiEwfSxjbG91ZHdhdGNoOntwcmVmaXg6XCJtb25pdG9yaW5nXCIsbmFtZTpcIkNsb3VkV2F0Y2hcIixjb3JzOiEwfSxjbG91ZHdhdGNoZXZlbnRzOntwcmVmaXg6XCJldmVudHNcIixuYW1lOlwiQ2xvdWRXYXRjaEV2ZW50c1wiLHZlcnNpb25zOltcIjIwMTQtMDItMDMqXCJdLGNvcnM6ITB9LGNsb3Vkd2F0Y2hsb2dzOntwcmVmaXg6XCJsb2dzXCIsbmFtZTpcIkNsb3VkV2F0Y2hMb2dzXCIsY29yczohMH0sY29kZWJ1aWxkOntuYW1lOlwiQ29kZUJ1aWxkXCIsY29yczohMH0sY29kZWNvbW1pdDp7bmFtZTpcIkNvZGVDb21taXRcIixjb3JzOiEwfSxjb2RlZGVwbG95OntuYW1lOlwiQ29kZURlcGxveVwiLGNvcnM6ITB9LGNvZGVwaXBlbGluZTp7bmFtZTpcIkNvZGVQaXBlbGluZVwiLGNvcnM6ITB9LGNvZ25pdG9pZGVudGl0eTp7cHJlZml4OlwiY29nbml0by1pZGVudGl0eVwiLG5hbWU6XCJDb2duaXRvSWRlbnRpdHlcIixjb3JzOiEwfSxjb2duaXRvaWRlbnRpdHlzZXJ2aWNlcHJvdmlkZXI6e3ByZWZpeDpcImNvZ25pdG8taWRwXCIsbmFtZTpcIkNvZ25pdG9JZGVudGl0eVNlcnZpY2VQcm92aWRlclwiLGNvcnM6ITB9LGNvZ25pdG9zeW5jOntwcmVmaXg6XCJjb2duaXRvLXN5bmNcIixuYW1lOlwiQ29nbml0b1N5bmNcIixjb3JzOiEwfSxjb25maWdzZXJ2aWNlOntwcmVmaXg6XCJjb25maWdcIixuYW1lOlwiQ29uZmlnU2VydmljZVwiLGNvcnM6ITB9LGN1cjp7bmFtZTpcIkNVUlwiLGNvcnM6ITB9LGRhdGFwaXBlbGluZTp7bmFtZTpcIkRhdGFQaXBlbGluZVwifSxkZXZpY2VmYXJtOntuYW1lOlwiRGV2aWNlRmFybVwiLGNvcnM6ITB9LGRpcmVjdGNvbm5lY3Q6e25hbWU6XCJEaXJlY3RDb25uZWN0XCIsY29yczohMH0sZGlyZWN0b3J5c2VydmljZTp7cHJlZml4OlwiZHNcIixuYW1lOlwiRGlyZWN0b3J5U2VydmljZVwifSxkaXNjb3Zlcnk6e25hbWU6XCJEaXNjb3ZlcnlcIn0sZG1zOntuYW1lOlwiRE1TXCJ9LGR5bmFtb2RiOntuYW1lOlwiRHluYW1vREJcIixjb3JzOiEwfSxkeW5hbW9kYnN0cmVhbXM6e3ByZWZpeDpcInN0cmVhbXMuZHluYW1vZGJcIixuYW1lOlwiRHluYW1vREJTdHJlYW1zXCIsY29yczohMH0sZWMyOntuYW1lOlwiRUMyXCIsdmVyc2lvbnM6W1wiMjAxMy0wNi0xNSpcIixcIjIwMTMtMTAtMTUqXCIsXCIyMDE0LTAyLTAxKlwiLFwiMjAxNC0wNS0wMSpcIixcIjIwMTQtMDYtMTUqXCIsXCIyMDE0LTA5LTAxKlwiLFwiMjAxNC0xMC0wMSpcIixcIjIwMTUtMDMtMDEqXCIsXCIyMDE1LTA0LTE1KlwiLFwiMjAxNS0xMC0wMSpcIixcIjIwMTYtMDQtMDEqXCIsXCIyMDE2LTA5LTE1KlwiXSxjb3JzOiEwfSxlY3I6e25hbWU6XCJFQ1JcIixjb3JzOiEwfSxlY3M6e25hbWU6XCJFQ1NcIixjb3JzOiEwfSxlZnM6e3ByZWZpeDpcImVsYXN0aWNmaWxlc3lzdGVtXCIsbmFtZTpcIkVGU1wiLGNvcnM6ITB9LGVsYXN0aWNhY2hlOntuYW1lOlwiRWxhc3RpQ2FjaGVcIix2ZXJzaW9uczpbXCIyMDEyLTExLTE1KlwiLFwiMjAxNC0wMy0yNCpcIixcIjIwMTQtMDctMTUqXCIsXCIyMDE0LTA5LTMwKlwiXSxjb3JzOiEwfSxlbGFzdGljYmVhbnN0YWxrOntuYW1lOlwiRWxhc3RpY0JlYW5zdGFsa1wiLGNvcnM6ITB9LGVsYjp7cHJlZml4OlwiZWxhc3RpY2xvYWRiYWxhbmNpbmdcIixuYW1lOlwiRUxCXCIsY29yczohMH0sZWxidjI6e3ByZWZpeDpcImVsYXN0aWNsb2FkYmFsYW5jaW5ndjJcIixuYW1lOlwiRUxCdjJcIixjb3JzOiEwfSxlbXI6e3ByZWZpeDpcImVsYXN0aWNtYXByZWR1Y2VcIixuYW1lOlwiRU1SXCIsY29yczohMH0sZXM6e25hbWU6XCJFU1wifSxlbGFzdGljdHJhbnNjb2Rlcjp7bmFtZTpcIkVsYXN0aWNUcmFuc2NvZGVyXCIsY29yczohMH0sZmlyZWhvc2U6e25hbWU6XCJGaXJlaG9zZVwiLGNvcnM6ITB9LGdhbWVsaWZ0OntuYW1lOlwiR2FtZUxpZnRcIixjb3JzOiEwfSxnbGFjaWVyOntuYW1lOlwiR2xhY2llclwifSxoZWFsdGg6e25hbWU6XCJIZWFsdGhcIn0saWFtOntuYW1lOlwiSUFNXCIsY29yczohMH0saW1wb3J0ZXhwb3J0OntuYW1lOlwiSW1wb3J0RXhwb3J0XCJ9LGluc3BlY3Rvcjp7bmFtZTpcIkluc3BlY3RvclwiLHZlcnNpb25zOltcIjIwMTUtMDgtMTgqXCJdLGNvcnM6ITB9LGlvdDp7bmFtZTpcIklvdFwiLGNvcnM6ITB9LGlvdGRhdGE6e3ByZWZpeDpcImlvdC1kYXRhXCIsbmFtZTpcIklvdERhdGFcIixjb3JzOiEwfSxraW5lc2lzOntuYW1lOlwiS2luZXNpc1wiLGNvcnM6ITB9LGtpbmVzaXNhbmFseXRpY3M6e25hbWU6XCJLaW5lc2lzQW5hbHl0aWNzXCJ9LGttczp7bmFtZTpcIktNU1wiLGNvcnM6ITB9LGxhbWJkYTp7bmFtZTpcIkxhbWJkYVwiLGNvcnM6ITB9LGxleHJ1bnRpbWU6e3ByZWZpeDpcInJ1bnRpbWUubGV4XCIsbmFtZTpcIkxleFJ1bnRpbWVcIixjb3JzOiEwfSxsaWdodHNhaWw6e25hbWU6XCJMaWdodHNhaWxcIn0sbWFjaGluZWxlYXJuaW5nOntuYW1lOlwiTWFjaGluZUxlYXJuaW5nXCIsY29yczohMH0sbWFya2V0cGxhY2Vjb21tZXJjZWFuYWx5dGljczp7bmFtZTpcIk1hcmtldHBsYWNlQ29tbWVyY2VBbmFseXRpY3NcIixjb3JzOiEwfSxtYXJrZXRwbGFjZW1ldGVyaW5nOntwcmVmaXg6XCJtZXRlcmluZ21hcmtldHBsYWNlXCIsbmFtZTpcIk1hcmtldHBsYWNlTWV0ZXJpbmdcIn0sbXR1cms6e3ByZWZpeDpcIm10dXJrLXJlcXVlc3RlclwiLG5hbWU6XCJNVHVya1wiLGNvcnM6ITB9LG1vYmlsZWFuYWx5dGljczp7bmFtZTpcIk1vYmlsZUFuYWx5dGljc1wiLGNvcnM6ITB9LG9wc3dvcmtzOntuYW1lOlwiT3BzV29ya3NcIixjb3JzOiEwfSxvcHN3b3Jrc2NtOntuYW1lOlwiT3BzV29ya3NDTVwifSxvcmdhbml6YXRpb25zOntuYW1lOlwiT3JnYW5pemF0aW9uc1wifSxwaW5wb2ludDp7bmFtZTpcIlBpbnBvaW50XCJ9LHBvbGx5OntuYW1lOlwiUG9sbHlcIixjb3JzOiEwfSxyZHM6e25hbWU6XCJSRFNcIix2ZXJzaW9uczpbXCIyMDE0LTA5LTAxKlwiXSxjb3JzOiEwfSxyZWRzaGlmdDp7bmFtZTpcIlJlZHNoaWZ0XCIsY29yczohMH0scmVrb2duaXRpb246e25hbWU6XCJSZWtvZ25pdGlvblwiLGNvcnM6ITB9LHJlc291cmNlZ3JvdXBzdGFnZ2luZ2FwaTp7bmFtZTpcIlJlc291cmNlR3JvdXBzVGFnZ2luZ0FQSVwifSxyb3V0ZTUzOntuYW1lOlwiUm91dGU1M1wiLGNvcnM6ITB9LHJvdXRlNTNkb21haW5zOntuYW1lOlwiUm91dGU1M0RvbWFpbnNcIixjb3JzOiEwfSxzMzp7bmFtZTpcIlMzXCIsZHVhbHN0YWNrQXZhaWxhYmxlOiEwLGNvcnM6ITB9LHMzY29udHJvbDp7bmFtZTpcIlMzQ29udHJvbFwiLGR1YWxzdGFja0F2YWlsYWJsZTohMH0sc2VydmljZWNhdGFsb2c6e25hbWU6XCJTZXJ2aWNlQ2F0YWxvZ1wiLGNvcnM6ITB9LHNlczp7cHJlZml4OlwiZW1haWxcIixuYW1lOlwiU0VTXCIsY29yczohMH0sc2hpZWxkOntuYW1lOlwiU2hpZWxkXCJ9LHNpbXBsZWRiOntwcmVmaXg6XCJzZGJcIixuYW1lOlwiU2ltcGxlREJcIn0sc21zOntuYW1lOlwiU01TXCJ9LHNub3diYWxsOntuYW1lOlwiU25vd2JhbGxcIn0sc25zOntuYW1lOlwiU05TXCIsY29yczohMH0sc3FzOntuYW1lOlwiU1FTXCIsY29yczohMH0sc3NtOntuYW1lOlwiU1NNXCIsY29yczohMH0sc3RvcmFnZWdhdGV3YXk6e25hbWU6XCJTdG9yYWdlR2F0ZXdheVwiLGNvcnM6ITB9LHN0ZXBmdW5jdGlvbnM6e3ByZWZpeDpcInN0YXRlc1wiLG5hbWU6XCJTdGVwRnVuY3Rpb25zXCJ9LHN0czp7bmFtZTpcIlNUU1wiLGNvcnM6ITB9LHN1cHBvcnQ6e25hbWU6XCJTdXBwb3J0XCJ9LHN3Zjp7bmFtZTpcIlNXRlwifSx4cmF5OntuYW1lOlwiWFJheVwiLGNvcnM6ITB9LHdhZjp7bmFtZTpcIldBRlwiLGNvcnM6ITB9LHdhZnJlZ2lvbmFsOntwcmVmaXg6XCJ3YWYtcmVnaW9uYWxcIixuYW1lOlwiV0FGUmVnaW9uYWxcIn0sd29ya2RvY3M6e25hbWU6XCJXb3JrRG9jc1wiLGNvcnM6ITB9LHdvcmtzcGFjZXM6e25hbWU6XCJXb3JrU3BhY2VzXCJ9LGNvZGVzdGFyOntuYW1lOlwiQ29kZVN0YXJcIn0sbGV4bW9kZWxidWlsZGluZ3NlcnZpY2U6e3ByZWZpeDpcImxleC1tb2RlbHNcIixuYW1lOlwiTGV4TW9kZWxCdWlsZGluZ1NlcnZpY2VcIixjb3JzOiEwfSxtYXJrZXRwbGFjZWVudGl0bGVtZW50c2VydmljZTp7cHJlZml4OlwiZW50aXRsZW1lbnQubWFya2V0cGxhY2VcIixuYW1lOlwiTWFya2V0cGxhY2VFbnRpdGxlbWVudFNlcnZpY2VcIn0sYXRoZW5hOntuYW1lOlwiQXRoZW5hXCJ9LGdyZWVuZ3Jhc3M6e25hbWU6XCJHcmVlbmdyYXNzXCJ9LGRheDp7bmFtZTpcIkRBWFwifSxtaWdyYXRpb25odWI6e3ByZWZpeDpcIkFXU01pZ3JhdGlvbkh1YlwiLG5hbWU6XCJNaWdyYXRpb25IdWJcIn0sY2xvdWRoc212Mjp7bmFtZTpcIkNsb3VkSFNNVjJcIn0sZ2x1ZTp7bmFtZTpcIkdsdWVcIn0sbW9iaWxlOntuYW1lOlwiTW9iaWxlXCJ9LHByaWNpbmc6e25hbWU6XCJQcmljaW5nXCIsY29yczohMH0sY29zdGV4cGxvcmVyOntwcmVmaXg6XCJjZVwiLG5hbWU6XCJDb3N0RXhwbG9yZXJcIixjb3JzOiEwfSxtZWRpYWNvbnZlcnQ6e25hbWU6XCJNZWRpYUNvbnZlcnRcIn0sbWVkaWFsaXZlOntuYW1lOlwiTWVkaWFMaXZlXCJ9LG1lZGlhcGFja2FnZTp7bmFtZTpcIk1lZGlhUGFja2FnZVwifSxtZWRpYXN0b3JlOntuYW1lOlwiTWVkaWFTdG9yZVwifSxtZWRpYXN0b3JlZGF0YTp7cHJlZml4OlwibWVkaWFzdG9yZS1kYXRhXCIsbmFtZTpcIk1lZGlhU3RvcmVEYXRhXCIsY29yczohMH0sYXBwc3luYzp7bmFtZTpcIkFwcFN5bmNcIn0sZ3VhcmRkdXR5OntuYW1lOlwiR3VhcmREdXR5XCJ9LG1xOntuYW1lOlwiTVFcIn0sY29tcHJlaGVuZDp7bmFtZTpcIkNvbXByZWhlbmRcIixjb3JzOiEwfSxpb3Rqb2JzZGF0YXBsYW5lOntwcmVmaXg6XCJpb3Qtam9icy1kYXRhXCIsbmFtZTpcIklvVEpvYnNEYXRhUGxhbmVcIn0sa2luZXNpc3ZpZGVvYXJjaGl2ZWRtZWRpYTp7cHJlZml4Olwia2luZXNpcy12aWRlby1hcmNoaXZlZC1tZWRpYVwiLG5hbWU6XCJLaW5lc2lzVmlkZW9BcmNoaXZlZE1lZGlhXCIsY29yczohMH0sa2luZXNpc3ZpZGVvbWVkaWE6e3ByZWZpeDpcImtpbmVzaXMtdmlkZW8tbWVkaWFcIixuYW1lOlwiS2luZXNpc1ZpZGVvTWVkaWFcIixjb3JzOiEwfSxraW5lc2lzdmlkZW86e25hbWU6XCJLaW5lc2lzVmlkZW9cIixjb3JzOiEwfSxzYWdlbWFrZXJydW50aW1lOntwcmVmaXg6XCJydW50aW1lLnNhZ2VtYWtlclwiLG5hbWU6XCJTYWdlTWFrZXJSdW50aW1lXCJ9LHNhZ2VtYWtlcjp7bmFtZTpcIlNhZ2VNYWtlclwifSx0cmFuc2xhdGU6e25hbWU6XCJUcmFuc2xhdGVcIixjb3JzOiEwfSxyZXNvdXJjZWdyb3Vwczp7cHJlZml4OlwicmVzb3VyY2UtZ3JvdXBzXCIsbmFtZTpcIlJlc291cmNlR3JvdXBzXCIsY29yczohMH0sYWxleGFmb3JidXNpbmVzczp7bmFtZTpcIkFsZXhhRm9yQnVzaW5lc3NcIn0sY2xvdWQ5OntuYW1lOlwiQ2xvdWQ5XCJ9LHNlcnZlcmxlc3NhcHBsaWNhdGlvbnJlcG9zaXRvcnk6e3ByZWZpeDpcInNlcnZlcmxlc3NyZXBvXCIsbmFtZTpcIlNlcnZlcmxlc3NBcHBsaWNhdGlvblJlcG9zaXRvcnlcIn0sc2VydmljZWRpc2NvdmVyeTp7bmFtZTpcIlNlcnZpY2VEaXNjb3ZlcnlcIn0sd29ya21haWw6e25hbWU6XCJXb3JrTWFpbFwifSxhdXRvc2NhbGluZ3BsYW5zOntwcmVmaXg6XCJhdXRvc2NhbGluZy1wbGFuc1wiLG5hbWU6XCJBdXRvU2NhbGluZ1BsYW5zXCJ9LHRyYW5zY3JpYmVzZXJ2aWNlOntwcmVmaXg6XCJ0cmFuc2NyaWJlXCIsbmFtZTpcIlRyYW5zY3JpYmVTZXJ2aWNlXCJ9LGNvbm5lY3Q6e25hbWU6XCJDb25uZWN0XCIsY29yczohMH0sYWNtcGNhOntwcmVmaXg6XCJhY20tcGNhXCIsbmFtZTpcIkFDTVBDQVwifSxmbXM6e25hbWU6XCJGTVNcIn0sc2VjcmV0c21hbmFnZXI6e25hbWU6XCJTZWNyZXRzTWFuYWdlclwiLGNvcnM6ITB9LGlvdGFuYWx5dGljczp7bmFtZTpcIklvVEFuYWx5dGljc1wiLGNvcnM6ITB9LGlvdDFjbGlja2RldmljZXNzZXJ2aWNlOntwcmVmaXg6XCJpb3QxY2xpY2stZGV2aWNlc1wiLG5hbWU6XCJJb1QxQ2xpY2tEZXZpY2VzU2VydmljZVwifSxpb3QxY2xpY2twcm9qZWN0czp7cHJlZml4OlwiaW90MWNsaWNrLXByb2plY3RzXCIsbmFtZTpcIklvVDFDbGlja1Byb2plY3RzXCJ9LHBpOntuYW1lOlwiUElcIn0sbmVwdHVuZTp7bmFtZTpcIk5lcHR1bmVcIn0sbWVkaWF0YWlsb3I6e25hbWU6XCJNZWRpYVRhaWxvclwifSxla3M6e25hbWU6XCJFS1NcIn0sbWFjaWU6e25hbWU6XCJNYWNpZVwifSxkbG06e25hbWU6XCJETE1cIn0sc2lnbmVyOntuYW1lOlwiU2lnbmVyXCJ9LGNoaW1lOntuYW1lOlwiQ2hpbWVcIn0scGlucG9pbnRlbWFpbDp7cHJlZml4OlwicGlucG9pbnQtZW1haWxcIixuYW1lOlwiUGlucG9pbnRFbWFpbFwifSxyYW06e25hbWU6XCJSQU1cIn0scm91dGU1M3Jlc29sdmVyOntuYW1lOlwiUm91dGU1M1Jlc29sdmVyXCJ9LHBpbnBvaW50c21zdm9pY2U6e3ByZWZpeDpcInNtcy12b2ljZVwiLG5hbWU6XCJQaW5wb2ludFNNU1ZvaWNlXCJ9LHF1aWNrc2lnaHQ6e25hbWU6XCJRdWlja1NpZ2h0XCJ9LHJkc2RhdGFzZXJ2aWNlOntwcmVmaXg6XCJyZHMtZGF0YVwiLG5hbWU6XCJSRFNEYXRhU2VydmljZVwifSxhbXBsaWZ5OntuYW1lOlwiQW1wbGlmeVwifSxkYXRhc3luYzp7bmFtZTpcIkRhdGFTeW5jXCJ9LHJvYm9tYWtlcjp7bmFtZTpcIlJvYm9NYWtlclwifSx0cmFuc2Zlcjp7bmFtZTpcIlRyYW5zZmVyXCJ9LGdsb2JhbGFjY2VsZXJhdG9yOntuYW1lOlwiR2xvYmFsQWNjZWxlcmF0b3JcIn0sY29tcHJlaGVuZG1lZGljYWw6e25hbWU6XCJDb21wcmVoZW5kTWVkaWNhbFwiLGNvcnM6ITB9LGtpbmVzaXNhbmFseXRpY3N2Mjp7bmFtZTpcIktpbmVzaXNBbmFseXRpY3NWMlwifSxtZWRpYWNvbm5lY3Q6e25hbWU6XCJNZWRpYUNvbm5lY3RcIn0sZnN4OntuYW1lOlwiRlN4XCJ9LHNlY3VyaXR5aHViOntuYW1lOlwiU2VjdXJpdHlIdWJcIn0sYXBwbWVzaDp7bmFtZTpcIkFwcE1lc2hcIix2ZXJzaW9uczpbXCIyMDE4LTEwLTAxKlwiXX0sbGljZW5zZW1hbmFnZXI6e3ByZWZpeDpcImxpY2Vuc2UtbWFuYWdlclwiLG5hbWU6XCJMaWNlbnNlTWFuYWdlclwifSxrYWZrYTp7bmFtZTpcIkthZmthXCJ9LGFwaWdhdGV3YXltYW5hZ2VtZW50YXBpOntuYW1lOlwiQXBpR2F0ZXdheU1hbmFnZW1lbnRBcGlcIn0sYXBpZ2F0ZXdheXYyOntuYW1lOlwiQXBpR2F0ZXdheVYyXCJ9LGRvY2RiOntuYW1lOlwiRG9jREJcIn0sYmFja3VwOntuYW1lOlwiQmFja3VwXCJ9LHdvcmtsaW5rOntuYW1lOlwiV29ya0xpbmtcIn0sdGV4dHJhY3Q6e25hbWU6XCJUZXh0cmFjdFwifSxtYW5hZ2VkYmxvY2tjaGFpbjp7bmFtZTpcIk1hbmFnZWRCbG9ja2NoYWluXCJ9LG1lZGlhcGFja2FnZXZvZDp7cHJlZml4OlwibWVkaWFwYWNrYWdlLXZvZFwiLG5hbWU6XCJNZWRpYVBhY2thZ2VWb2RcIn0sZ3JvdW5kc3RhdGlvbjp7bmFtZTpcIkdyb3VuZFN0YXRpb25cIn0saW90dGhpbmdzZ3JhcGg6e25hbWU6XCJJb1RUaGluZ3NHcmFwaFwifSxpb3RldmVudHM6e25hbWU6XCJJb1RFdmVudHNcIn0saW90ZXZlbnRzZGF0YTp7cHJlZml4OlwiaW90ZXZlbnRzLWRhdGFcIixuYW1lOlwiSW9URXZlbnRzRGF0YVwifSxwZXJzb25hbGl6ZTp7bmFtZTpcIlBlcnNvbmFsaXplXCIsY29yczohMH0scGVyc29uYWxpemVldmVudHM6e3ByZWZpeDpcInBlcnNvbmFsaXplLWV2ZW50c1wiLG5hbWU6XCJQZXJzb25hbGl6ZUV2ZW50c1wiLGNvcnM6ITB9LHBlcnNvbmFsaXplcnVudGltZTp7cHJlZml4OlwicGVyc29uYWxpemUtcnVudGltZVwiLG5hbWU6XCJQZXJzb25hbGl6ZVJ1bnRpbWVcIixjb3JzOiEwfSxhcHBsaWNhdGlvbmluc2lnaHRzOntwcmVmaXg6XCJhcHBsaWNhdGlvbi1pbnNpZ2h0c1wiLG5hbWU6XCJBcHBsaWNhdGlvbkluc2lnaHRzXCJ9LHNlcnZpY2VxdW90YXM6e3ByZWZpeDpcInNlcnZpY2UtcXVvdGFzXCIsbmFtZTpcIlNlcnZpY2VRdW90YXNcIn0sZWMyaW5zdGFuY2Vjb25uZWN0OntwcmVmaXg6XCJlYzItaW5zdGFuY2UtY29ubmVjdFwiLG5hbWU6XCJFQzJJbnN0YW5jZUNvbm5lY3RcIn0sZXZlbnRicmlkZ2U6e25hbWU6XCJFdmVudEJyaWRnZVwifSxsYWtlZm9ybWF0aW9uOntuYW1lOlwiTGFrZUZvcm1hdGlvblwifSxmb3JlY2FzdHNlcnZpY2U6e3ByZWZpeDpcImZvcmVjYXN0XCIsbmFtZTpcIkZvcmVjYXN0U2VydmljZVwiLGNvcnM6ITB9LGZvcmVjYXN0cXVlcnlzZXJ2aWNlOntwcmVmaXg6XCJmb3JlY2FzdHF1ZXJ5XCIsbmFtZTpcIkZvcmVjYXN0UXVlcnlTZXJ2aWNlXCIsY29yczohMH0scWxkYjp7bmFtZTpcIlFMREJcIn0scWxkYnNlc3Npb246e3ByZWZpeDpcInFsZGItc2Vzc2lvblwiLG5hbWU6XCJRTERCU2Vzc2lvblwifSx3b3JrbWFpbG1lc3NhZ2VmbG93OntuYW1lOlwiV29ya01haWxNZXNzYWdlRmxvd1wifSxjb2Rlc3Rhcm5vdGlmaWNhdGlvbnM6e3ByZWZpeDpcImNvZGVzdGFyLW5vdGlmaWNhdGlvbnNcIixuYW1lOlwiQ29kZVN0YXJOb3RpZmljYXRpb25zXCJ9LHNhdmluZ3NwbGFuczp7bmFtZTpcIlNhdmluZ3NQbGFuc1wifSxzc286e25hbWU6XCJTU09cIn0sc3Nvb2lkYzp7cHJlZml4Olwic3NvLW9pZGNcIixuYW1lOlwiU1NPT0lEQ1wifSxjb25uZWN0cGFydGljaXBhbnQ6e25hbWU6XCJDb25uZWN0UGFydGljaXBhbnRcIn19fSx7fV0sNjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17dmVyc2lvbjpcIjIuMFwiLG1ldGFkYXRhOnthcGlWZXJzaW9uOlwiMjAxMS0wNi0xNVwiLGVuZHBvaW50UHJlZml4Olwic3RzXCIsZ2xvYmFsRW5kcG9pbnQ6XCJzdHMuYW1hem9uYXdzLmNvbVwiLHByb3RvY29sOlwicXVlcnlcIixzZXJ2aWNlQWJicmV2aWF0aW9uOlwiQVdTIFNUU1wiLHNlcnZpY2VGdWxsTmFtZTpcIkFXUyBTZWN1cml0eSBUb2tlbiBTZXJ2aWNlXCIsc2VydmljZUlkOlwiU1RTXCIsc2lnbmF0dXJlVmVyc2lvbjpcInY0XCIsdWlkOlwic3RzLTIwMTEtMDYtMTVcIix4bWxOYW1lc3BhY2U6XCJodHRwczovL3N0cy5hbWF6b25hd3MuY29tL2RvYy8yMDExLTA2LTE1L1wifSxvcGVyYXRpb25zOntBc3N1bWVSb2xlOntpbnB1dDp7dHlwZTpcInN0cnVjdHVyZVwiLHJlcXVpcmVkOltcIlJvbGVBcm5cIixcIlJvbGVTZXNzaW9uTmFtZVwiXSxtZW1iZXJzOntSb2xlQXJuOnt9LFJvbGVTZXNzaW9uTmFtZTp7fSxQb2xpY3lBcm5zOntzaGFwZTpcIlM0XCJ9LFBvbGljeTp7fSxEdXJhdGlvblNlY29uZHM6e3R5cGU6XCJpbnRlZ2VyXCJ9LEV4dGVybmFsSWQ6e30sU2VyaWFsTnVtYmVyOnt9LFRva2VuQ29kZTp7fX19LG91dHB1dDp7cmVzdWx0V3JhcHBlcjpcIkFzc3VtZVJvbGVSZXN1bHRcIix0eXBlOlwic3RydWN0dXJlXCIsbWVtYmVyczp7Q3JlZGVudGlhbHM6e3NoYXBlOlwiU2NcIn0sQXNzdW1lZFJvbGVVc2VyOntzaGFwZTpcIlNoXCJ9LFBhY2tlZFBvbGljeVNpemU6e3R5cGU6XCJpbnRlZ2VyXCJ9fX19LEFzc3VtZVJvbGVXaXRoU0FNTDp7aW5wdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJSb2xlQXJuXCIsXCJQcmluY2lwYWxBcm5cIixcIlNBTUxBc3NlcnRpb25cIl0sbWVtYmVyczp7Um9sZUFybjp7fSxQcmluY2lwYWxBcm46e30sU0FNTEFzc2VydGlvbjp7fSxQb2xpY3lBcm5zOntzaGFwZTpcIlM0XCJ9LFBvbGljeTp7fSxEdXJhdGlvblNlY29uZHM6e3R5cGU6XCJpbnRlZ2VyXCJ9fX0sb3V0cHV0OntyZXN1bHRXcmFwcGVyOlwiQXNzdW1lUm9sZVdpdGhTQU1MUmVzdWx0XCIsdHlwZTpcInN0cnVjdHVyZVwiLG1lbWJlcnM6e0NyZWRlbnRpYWxzOntzaGFwZTpcIlNjXCJ9LEFzc3VtZWRSb2xlVXNlcjp7c2hhcGU6XCJTaFwifSxQYWNrZWRQb2xpY3lTaXplOnt0eXBlOlwiaW50ZWdlclwifSxTdWJqZWN0Ont9LFN1YmplY3RUeXBlOnt9LElzc3Vlcjp7fSxBdWRpZW5jZTp7fSxOYW1lUXVhbGlmaWVyOnt9fX19LEFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHk6e2lucHV0Ont0eXBlOlwic3RydWN0dXJlXCIscmVxdWlyZWQ6W1wiUm9sZUFyblwiLFwiUm9sZVNlc3Npb25OYW1lXCIsXCJXZWJJZGVudGl0eVRva2VuXCJdLG1lbWJlcnM6e1JvbGVBcm46e30sUm9sZVNlc3Npb25OYW1lOnt9LFdlYklkZW50aXR5VG9rZW46e30sUHJvdmlkZXJJZDp7fSxQb2xpY3lBcm5zOntzaGFwZTpcIlM0XCJ9LFBvbGljeTp7fSxEdXJhdGlvblNlY29uZHM6e3R5cGU6XCJpbnRlZ2VyXCJ9fX0sb3V0cHV0OntyZXN1bHRXcmFwcGVyOlwiQXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eVJlc3VsdFwiLHR5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOntDcmVkZW50aWFsczp7c2hhcGU6XCJTY1wifSxTdWJqZWN0RnJvbVdlYklkZW50aXR5VG9rZW46e30sQXNzdW1lZFJvbGVVc2VyOntzaGFwZTpcIlNoXCJ9LFBhY2tlZFBvbGljeVNpemU6e3R5cGU6XCJpbnRlZ2VyXCJ9LFByb3ZpZGVyOnt9LEF1ZGllbmNlOnt9fX19LERlY29kZUF1dGhvcml6YXRpb25NZXNzYWdlOntpbnB1dDp7dHlwZTpcInN0cnVjdHVyZVwiLHJlcXVpcmVkOltcIkVuY29kZWRNZXNzYWdlXCJdLG1lbWJlcnM6e0VuY29kZWRNZXNzYWdlOnt9fX0sb3V0cHV0OntyZXN1bHRXcmFwcGVyOlwiRGVjb2RlQXV0aG9yaXphdGlvbk1lc3NhZ2VSZXN1bHRcIix0eXBlOlwic3RydWN0dXJlXCIsbWVtYmVyczp7RGVjb2RlZE1lc3NhZ2U6e319fX0sR2V0QWNjZXNzS2V5SW5mbzp7aW5wdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJBY2Nlc3NLZXlJZFwiXSxtZW1iZXJzOntBY2Nlc3NLZXlJZDp7fX19LG91dHB1dDp7cmVzdWx0V3JhcHBlcjpcIkdldEFjY2Vzc0tleUluZm9SZXN1bHRcIix0eXBlOlwic3RydWN0dXJlXCIsbWVtYmVyczp7QWNjb3VudDp7fX19fSxHZXRDYWxsZXJJZGVudGl0eTp7aW5wdXQ6e3R5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOnt9fSxvdXRwdXQ6e3Jlc3VsdFdyYXBwZXI6XCJHZXRDYWxsZXJJZGVudGl0eVJlc3VsdFwiLHR5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOntVc2VySWQ6e30sQWNjb3VudDp7fSxBcm46e319fX0sR2V0RmVkZXJhdGlvblRva2VuOntpbnB1dDp7dHlwZTpcInN0cnVjdHVyZVwiLHJlcXVpcmVkOltcIk5hbWVcIl0sbWVtYmVyczp7TmFtZTp7fSxQb2xpY3k6e30sUG9saWN5QXJuczp7c2hhcGU6XCJTNFwifSxEdXJhdGlvblNlY29uZHM6e3R5cGU6XCJpbnRlZ2VyXCJ9fX0sb3V0cHV0OntyZXN1bHRXcmFwcGVyOlwiR2V0RmVkZXJhdGlvblRva2VuUmVzdWx0XCIsdHlwZTpcInN0cnVjdHVyZVwiLG1lbWJlcnM6e0NyZWRlbnRpYWxzOntzaGFwZTpcIlNjXCJ9LEZlZGVyYXRlZFVzZXI6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJGZWRlcmF0ZWRVc2VySWRcIixcIkFyblwiXSxtZW1iZXJzOntGZWRlcmF0ZWRVc2VySWQ6e30sQXJuOnt9fX0sUGFja2VkUG9saWN5U2l6ZTp7dHlwZTpcImludGVnZXJcIn19fX0sR2V0U2Vzc2lvblRva2VuOntpbnB1dDp7dHlwZTpcInN0cnVjdHVyZVwiLG1lbWJlcnM6e0R1cmF0aW9uU2Vjb25kczp7dHlwZTpcImludGVnZXJcIn0sU2VyaWFsTnVtYmVyOnt9LFRva2VuQ29kZTp7fX19LG91dHB1dDp7cmVzdWx0V3JhcHBlcjpcIkdldFNlc3Npb25Ub2tlblJlc3VsdFwiLHR5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOntDcmVkZW50aWFsczp7c2hhcGU6XCJTY1wifX19fX0sc2hhcGVzOntTNDp7dHlwZTpcImxpc3RcIixtZW1iZXI6e3R5cGU6XCJzdHJ1Y3R1cmVcIixtZW1iZXJzOnthcm46e319fX0sU2M6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJBY2Nlc3NLZXlJZFwiLFwiU2VjcmV0QWNjZXNzS2V5XCIsXCJTZXNzaW9uVG9rZW5cIixcIkV4cGlyYXRpb25cIl0sbWVtYmVyczp7QWNjZXNzS2V5SWQ6e30sU2VjcmV0QWNjZXNzS2V5Ont9LFNlc3Npb25Ub2tlbjp7fSxFeHBpcmF0aW9uOnt0eXBlOlwidGltZXN0YW1wXCJ9fX0sU2g6e3R5cGU6XCJzdHJ1Y3R1cmVcIixyZXF1aXJlZDpbXCJBc3N1bWVkUm9sZUlkXCIsXCJBcm5cIl0sbWVtYmVyczp7QXNzdW1lZFJvbGVJZDp7fSxBcm46e319fX19fSx7fV0sNzpbZnVuY3Rpb24oZSx0LHIpe2FyZ3VtZW50c1s0XVsyXVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtkdXA6Mn1dLDg6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi4vbGliL25vZGVfbG9hZGVyXCIpO3ZhciBuPWUoXCIuLi9saWIvY29yZVwiKSxpPW4uU2VydmljZSxvPW4uYXBpTG9hZGVyO28uc2VydmljZXMuY29nbml0b2lkZW50aXR5PXt9LG4uQ29nbml0b0lkZW50aXR5PWkuZGVmaW5lU2VydmljZShcImNvZ25pdG9pZGVudGl0eVwiLFtcIjIwMTQtMDYtMzBcIl0pLGUoXCIuLi9saWIvc2VydmljZXMvY29nbml0b2lkZW50aXR5XCIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLnNlcnZpY2VzLmNvZ25pdG9pZGVudGl0eSxcIjIwMTQtMDYtMzBcIix7Z2V0OmZ1bmN0aW9uKCl7dmFyIHQ9ZShcIi4uL2FwaXMvY29nbml0by1pZGVudGl0eS0yMDE0LTA2LTMwLm1pbi5qc29uXCIpO3JldHVybiB0LnBhZ2luYXRvcnM9ZShcIi4uL2FwaXMvY29nbml0by1pZGVudGl0eS0yMDE0LTA2LTMwLnBhZ2luYXRvcnMuanNvblwiKS5wYWdpbmF0aW9uLHR9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5leHBvcnRzPW4uQ29nbml0b0lkZW50aXR5fSx7XCIuLi9hcGlzL2NvZ25pdG8taWRlbnRpdHktMjAxNC0wNi0zMC5taW4uanNvblwiOjEsXCIuLi9hcGlzL2NvZ25pdG8taWRlbnRpdHktMjAxNC0wNi0zMC5wYWdpbmF0b3JzLmpzb25cIjoyLFwiLi4vbGliL2NvcmVcIjoxOSxcIi4uL2xpYi9ub2RlX2xvYWRlclwiOjE3LFwiLi4vbGliL3NlcnZpY2VzL2NvZ25pdG9pZGVudGl0eVwiOjYxfV0sOTpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuLi9saWIvbm9kZV9sb2FkZXJcIik7dmFyIG49ZShcIi4uL2xpYi9jb3JlXCIpLGk9bi5TZXJ2aWNlLG89bi5hcGlMb2FkZXI7by5zZXJ2aWNlcy5zdHM9e30sbi5TVFM9aS5kZWZpbmVTZXJ2aWNlKFwic3RzXCIsW1wiMjAxMS0wNi0xNVwiXSksZShcIi4uL2xpYi9zZXJ2aWNlcy9zdHNcIiksT2JqZWN0LmRlZmluZVByb3BlcnR5KG8uc2VydmljZXMuc3RzLFwiMjAxMS0wNi0xNVwiLHtnZXQ6ZnVuY3Rpb24oKXt2YXIgdD1lKFwiLi4vYXBpcy9zdHMtMjAxMS0wNi0xNS5taW4uanNvblwiKTtyZXR1cm4gdC5wYWdpbmF0b3JzPWUoXCIuLi9hcGlzL3N0cy0yMDExLTA2LTE1LnBhZ2luYXRvcnMuanNvblwiKS5wYWdpbmF0aW9uLHR9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5leHBvcnRzPW4uU1RTfSx7XCIuLi9hcGlzL3N0cy0yMDExLTA2LTE1Lm1pbi5qc29uXCI6NixcIi4uL2FwaXMvc3RzLTIwMTEtMDYtMTUucGFnaW5hdG9ycy5qc29uXCI6NyxcIi4uL2xpYi9jb3JlXCI6MTksXCIuLi9saWIvbm9kZV9sb2FkZXJcIjoxNyxcIi4uL2xpYi9zZXJ2aWNlcy9zdHNcIjo2Mn1dLDEwOltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlLHQpe2lmKCFuLnNlcnZpY2VzLmhhc093blByb3BlcnR5KGUpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWRTZXJ2aWNlOiBGYWlsZWQgdG8gbG9hZCBhcGkgZm9yIFwiK2UpO3JldHVybiBuLnNlcnZpY2VzW2VdW3RdfW4uc2VydmljZXM9e30sdC5leHBvcnRzPW59LHt9XSwxMTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL2Jyb3dzZXJIbWFjXCIpLGk9ZShcIi4vYnJvd3Nlck1kNVwiKSxvPWUoXCIuL2Jyb3dzZXJTaGExXCIpLHM9ZShcIi4vYnJvd3NlclNoYTI1NlwiKTt0LmV4cG9ydHM9e2NyZWF0ZUhhc2g6ZnVuY3Rpb24oZSl7aWYoXCJtZDVcIj09PShlPWUudG9Mb3dlckNhc2UoKSkpcmV0dXJuIG5ldyBpO2lmKFwic2hhMjU2XCI9PT1lKXJldHVybiBuZXcgcztpZihcInNoYTFcIj09PWUpcmV0dXJuIG5ldyBvO3Rocm93IG5ldyBFcnJvcihcIkhhc2ggYWxnb3JpdGhtIFwiK2UrXCIgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGUgYnJvd3NlciBTREtcIil9LGNyZWF0ZUhtYWM6ZnVuY3Rpb24oZSx0KXtpZihcIm1kNVwiPT09KGU9ZS50b0xvd2VyQ2FzZSgpKSlyZXR1cm4gbmV3IG4oaSx0KTtpZihcInNoYTI1NlwiPT09ZSlyZXR1cm4gbmV3IG4ocyx0KTtpZihcInNoYTFcIj09PWUpcmV0dXJuIG5ldyBuKG8sdCk7dGhyb3cgbmV3IEVycm9yKFwiSE1BQyBhbGdvcml0aG0gXCIrZStcIiBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIFNES1wiKX0sY3JlYXRlU2lnbjpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcImNyZWF0ZVNpZ24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBicm93c2VyXCIpfX19LHtcIi4vYnJvd3NlckhtYWNcIjoxMyxcIi4vYnJvd3Nlck1kNVwiOjE0LFwiLi9icm93c2VyU2hhMVwiOjE1LFwiLi9icm93c2VyU2hhMjU2XCI6MTZ9XSwxMjpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGU/MD09PWUubGVuZ3RoOjA9PT1lLmJ5dGVMZW5ndGh9ZnVuY3Rpb24gaShlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9bmV3IG8oZSxcInV0ZjhcIikpLEFycmF5QnVmZmVyLmlzVmlldyhlKT9uZXcgVWludDhBcnJheShlLmJ1ZmZlcixlLmJ5dGVPZmZzZXQsZS5ieXRlTGVuZ3RoL1VpbnQ4QXJyYXkuQllURVNfUEVSX0VMRU1FTlQpOm5ldyBVaW50OEFycmF5KGUpfXZhciBvPWUoXCJidWZmZXIvXCIpLkJ1ZmZlcjtcInVuZGVmaW5lZFwiIT10eXBlb2YgQXJyYXlCdWZmZXImJnZvaWQgMD09PUFycmF5QnVmZmVyLmlzVmlldyYmKEFycmF5QnVmZmVyLmlzVmlldz1mdW5jdGlvbihlKXtyZXR1cm4gcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSk+LTF9KTt2YXIgcz1bXCJbb2JqZWN0IEludDhBcnJheV1cIixcIltvYmplY3QgVWludDhBcnJheV1cIixcIltvYmplY3QgVWludDhDbGFtcGVkQXJyYXldXCIsXCJbb2JqZWN0IEludDE2QXJyYXldXCIsXCJbb2JqZWN0IFVpbnQxNkFycmF5XVwiLFwiW29iamVjdCBJbnQzMkFycmF5XVwiLFwiW29iamVjdCBVaW50MzJBcnJheV1cIixcIltvYmplY3QgRmxvYXQzMkFycmF5XVwiLFwiW29iamVjdCBGbG9hdDY0QXJyYXldXCIsXCJbb2JqZWN0IERhdGFWaWV3XVwiXTt0LmV4cG9ydHM9e2lzRW1wdHlEYXRhOm4sY29udmVydFRvQnVmZmVyOml9fSx7XCJidWZmZXIvXCI6ODF9XSwxMzpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oZSx0KXt0aGlzLmhhc2g9bmV3IGUsdGhpcy5vdXRlcj1uZXcgZTt2YXIgcj1pKGUsdCksbj1uZXcgVWludDhBcnJheShlLkJMT0NLX1NJWkUpO24uc2V0KHIpO2Zvcih2YXIgbz0wO288ZS5CTE9DS19TSVpFO28rKylyW29dXj01NCxuW29dXj05Mjt0aGlzLmhhc2gudXBkYXRlKHIpLHRoaXMub3V0ZXIudXBkYXRlKG4pO2Zvcih2YXIgbz0wO288ci5ieXRlTGVuZ3RoO28rKylyW29dPTB9ZnVuY3Rpb24gaShlLHQpe3ZhciByPW8uY29udmVydFRvQnVmZmVyKHQpO2lmKHIuYnl0ZUxlbmd0aD5lLkJMT0NLX1NJWkUpe3ZhciBuPW5ldyBlO24udXBkYXRlKHIpLHI9bi5kaWdlc3QoKX12YXIgaT1uZXcgVWludDhBcnJheShlLkJMT0NLX1NJWkUpO3JldHVybiBpLnNldChyKSxpfXZhciBvPWUoXCIuL2Jyb3dzZXJIYXNoVXRpbHNcIik7dC5leHBvcnRzPW4sbi5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKGUpe2lmKG8uaXNFbXB0eURhdGEoZSl8fHRoaXMuZXJyb3IpcmV0dXJuIHRoaXM7dHJ5e3RoaXMuaGFzaC51cGRhdGUoby5jb252ZXJ0VG9CdWZmZXIoZSkpfWNhdGNoKGUpe3RoaXMuZXJyb3I9ZX1yZXR1cm4gdGhpc30sbi5wcm90b3R5cGUuZGlnZXN0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm91dGVyLmZpbmlzaGVkfHx0aGlzLm91dGVyLnVwZGF0ZSh0aGlzLmhhc2guZGlnZXN0KCkpLHRoaXMub3V0ZXIuZGlnZXN0KGUpfX0se1wiLi9icm93c2VySGFzaFV0aWxzXCI6MTJ9XSwxNDpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oKXt0aGlzLnN0YXRlPVsxNzMyNTg0MTkzLDQwMjMyMzM0MTcsMjU2MjM4MzEwMiwyNzE3MzM4NzhdLHRoaXMuYnVmZmVyPW5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIocCkpLHRoaXMuYnVmZmVyTGVuZ3RoPTAsdGhpcy5ieXRlc0hhc2hlZD0wLHRoaXMuZmluaXNoZWQ9ITF9ZnVuY3Rpb24gaShlLHQscixuLGksbyl7cmV0dXJuKCh0PSh0K2UmNDI5NDk2NzI5NSkrKG4rbyY0Mjk0OTY3Mjk1KSY0Mjk0OTY3Mjk1KTw8aXx0Pj4+MzItaSkrciY0Mjk0OTY3Mjk1fWZ1bmN0aW9uIG8oZSx0LHIsbixvLHMsYSl7cmV0dXJuIGkodCZyfH50Jm4sZSx0LG8scyxhKX1mdW5jdGlvbiBzKGUsdCxyLG4sbyxzLGEpe3JldHVybiBpKHQmbnxyJn5uLGUsdCxvLHMsYSl9ZnVuY3Rpb24gYShlLHQscixuLG8scyxhKXtyZXR1cm4gaSh0XnJebixlLHQsbyxzLGEpfWZ1bmN0aW9uIHUoZSx0LHIsbixvLHMsYSl7cmV0dXJuIGkocl4odHx+biksZSx0LG8scyxhKX12YXIgYz1lKFwiLi9icm93c2VySGFzaFV0aWxzXCIpLGw9ZShcImJ1ZmZlci9cIikuQnVmZmVyLHA9NjQ7dC5leHBvcnRzPW4sbi5CTE9DS19TSVpFPXAsbi5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKGUpe2lmKGMuaXNFbXB0eURhdGEoZSkpcmV0dXJuIHRoaXM7aWYodGhpcy5maW5pc2hlZCl0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0ZWQgdG8gdXBkYXRlIGFuIGFscmVhZHkgZmluaXNoZWQgaGFzaC5cIik7dmFyIHQ9Yy5jb252ZXJ0VG9CdWZmZXIoZSkscj0wLG49dC5ieXRlTGVuZ3RoO2Zvcih0aGlzLmJ5dGVzSGFzaGVkKz1uO24+MDspdGhpcy5idWZmZXIuc2V0VWludDgodGhpcy5idWZmZXJMZW5ndGgrKyx0W3IrK10pLG4tLSx0aGlzLmJ1ZmZlckxlbmd0aD09PXAmJih0aGlzLmhhc2hCdWZmZXIoKSx0aGlzLmJ1ZmZlckxlbmd0aD0wKTtyZXR1cm4gdGhpc30sbi5wcm90b3R5cGUuZGlnZXN0PWZ1bmN0aW9uKGUpe2lmKCF0aGlzLmZpbmlzaGVkKXt2YXIgdD10aGlzLHI9dC5idWZmZXIsbj10LmJ1ZmZlckxlbmd0aCxpPXQuYnl0ZXNIYXNoZWQsbz04Kmk7aWYoci5zZXRVaW50OCh0aGlzLmJ1ZmZlckxlbmd0aCsrLDEyOCksbiVwPj1wLTgpe2Zvcih2YXIgcz10aGlzLmJ1ZmZlckxlbmd0aDtzPHA7cysrKXIuc2V0VWludDgocywwKTt0aGlzLmhhc2hCdWZmZXIoKSx0aGlzLmJ1ZmZlckxlbmd0aD0wfWZvcih2YXIgcz10aGlzLmJ1ZmZlckxlbmd0aDtzPHAtODtzKyspci5zZXRVaW50OChzLDApO3Iuc2V0VWludDMyKHAtOCxvPj4+MCwhMCksci5zZXRVaW50MzIocC00LE1hdGguZmxvb3Ioby80Mjk0OTY3Mjk2KSwhMCksdGhpcy5oYXNoQnVmZmVyKCksdGhpcy5maW5pc2hlZD0hMH1mb3IodmFyIGE9bmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxNikpLHM9MDtzPDQ7cysrKWEuc2V0VWludDMyKDQqcyx0aGlzLnN0YXRlW3NdLCEwKTt2YXIgdT1uZXcgbChhLmJ1ZmZlcixhLmJ5dGVPZmZzZXQsYS5ieXRlTGVuZ3RoKTtyZXR1cm4gZT91LnRvU3RyaW5nKGUpOnV9LG4ucHJvdG90eXBlLmhhc2hCdWZmZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS5idWZmZXIscj1lLnN0YXRlLG49clswXSxpPXJbMV0sYz1yWzJdLGw9clszXTtuPW8obixpLGMsbCx0LmdldFVpbnQzMigwLCEwKSw3LDM2MTQwOTAzNjApLGw9byhsLG4saSxjLHQuZ2V0VWludDMyKDQsITApLDEyLDM5MDU0MDI3MTApLGM9byhjLGwsbixpLHQuZ2V0VWludDMyKDgsITApLDE3LDYwNjEwNTgxOSksaT1vKGksYyxsLG4sdC5nZXRVaW50MzIoMTIsITApLDIyLDMyNTA0NDE5NjYpLG49byhuLGksYyxsLHQuZ2V0VWludDMyKDE2LCEwKSw3LDQxMTg1NDgzOTkpLGw9byhsLG4saSxjLHQuZ2V0VWludDMyKDIwLCEwKSwxMiwxMjAwMDgwNDI2KSxjPW8oYyxsLG4saSx0LmdldFVpbnQzMigyNCwhMCksMTcsMjgyMTczNTk1NSksaT1vKGksYyxsLG4sdC5nZXRVaW50MzIoMjgsITApLDIyLDQyNDkyNjEzMTMpLG49byhuLGksYyxsLHQuZ2V0VWludDMyKDMyLCEwKSw3LDE3NzAwMzU0MTYpLGw9byhsLG4saSxjLHQuZ2V0VWludDMyKDM2LCEwKSwxMiwyMzM2NTUyODc5KSxjPW8oYyxsLG4saSx0LmdldFVpbnQzMig0MCwhMCksMTcsNDI5NDkyNTIzMyksaT1vKGksYyxsLG4sdC5nZXRVaW50MzIoNDQsITApLDIyLDIzMDQ1NjMxMzQpLG49byhuLGksYyxsLHQuZ2V0VWludDMyKDQ4LCEwKSw3LDE4MDQ2MDM2ODIpLGw9byhsLG4saSxjLHQuZ2V0VWludDMyKDUyLCEwKSwxMiw0MjU0NjI2MTk1KSxjPW8oYyxsLG4saSx0LmdldFVpbnQzMig1NiwhMCksMTcsMjc5Mjk2NTAwNiksaT1vKGksYyxsLG4sdC5nZXRVaW50MzIoNjAsITApLDIyLDEyMzY1MzUzMjkpLG49cyhuLGksYyxsLHQuZ2V0VWludDMyKDQsITApLDUsNDEyOTE3MDc4NiksbD1zKGwsbixpLGMsdC5nZXRVaW50MzIoMjQsITApLDksMzIyNTQ2NTY2NCksYz1zKGMsbCxuLGksdC5nZXRVaW50MzIoNDQsITApLDE0LDY0MzcxNzcxMyksaT1zKGksYyxsLG4sdC5nZXRVaW50MzIoMCwhMCksMjAsMzkyMTA2OTk5NCksbj1zKG4saSxjLGwsdC5nZXRVaW50MzIoMjAsITApLDUsMzU5MzQwODYwNSksbD1zKGwsbixpLGMsdC5nZXRVaW50MzIoNDAsITApLDksMzgwMTYwODMpLGM9cyhjLGwsbixpLHQuZ2V0VWludDMyKDYwLCEwKSwxNCwzNjM0NDg4OTYxKSxpPXMoaSxjLGwsbix0LmdldFVpbnQzMigxNiwhMCksMjAsMzg4OTQyOTQ0OCksbj1zKG4saSxjLGwsdC5nZXRVaW50MzIoMzYsITApLDUsNTY4NDQ2NDM4KSxsPXMobCxuLGksYyx0LmdldFVpbnQzMig1NiwhMCksOSwzMjc1MTYzNjA2KSxjPXMoYyxsLG4saSx0LmdldFVpbnQzMigxMiwhMCksMTQsNDEwNzYwMzMzNSksaT1zKGksYyxsLG4sdC5nZXRVaW50MzIoMzIsITApLDIwLDExNjM1MzE1MDEpLG49cyhuLGksYyxsLHQuZ2V0VWludDMyKDUyLCEwKSw1LDI4NTAyODU4MjkpLGw9cyhsLG4saSxjLHQuZ2V0VWludDMyKDgsITApLDksNDI0MzU2MzUxMiksYz1zKGMsbCxuLGksdC5nZXRVaW50MzIoMjgsITApLDE0LDE3MzUzMjg0NzMpLGk9cyhpLGMsbCxuLHQuZ2V0VWludDMyKDQ4LCEwKSwyMCwyMzY4MzU5NTYyKSxuPWEobixpLGMsbCx0LmdldFVpbnQzMigyMCwhMCksNCw0Mjk0NTg4NzM4KSxsPWEobCxuLGksYyx0LmdldFVpbnQzMigzMiwhMCksMTEsMjI3MjM5MjgzMyksYz1hKGMsbCxuLGksdC5nZXRVaW50MzIoNDQsITApLDE2LDE4MzkwMzA1NjIpLGk9YShpLGMsbCxuLHQuZ2V0VWludDMyKDU2LCEwKSwyMyw0MjU5NjU3NzQwKSxuPWEobixpLGMsbCx0LmdldFVpbnQzMig0LCEwKSw0LDI3NjM5NzUyMzYpLGw9YShsLG4saSxjLHQuZ2V0VWludDMyKDE2LCEwKSwxMSwxMjcyODkzMzUzKSxjPWEoYyxsLG4saSx0LmdldFVpbnQzMigyOCwhMCksMTYsNDEzOTQ2OTY2NCksaT1hKGksYyxsLG4sdC5nZXRVaW50MzIoNDAsITApLDIzLDMyMDAyMzY2NTYpLG49YShuLGksYyxsLHQuZ2V0VWludDMyKDUyLCEwKSw0LDY4MTI3OTE3NCksbD1hKGwsbixpLGMsdC5nZXRVaW50MzIoMCwhMCksMTEsMzkzNjQzMDA3NCksYz1hKGMsbCxuLGksdC5nZXRVaW50MzIoMTIsITApLDE2LDM1NzI0NDUzMTcpLGk9YShpLGMsbCxuLHQuZ2V0VWludDMyKDI0LCEwKSwyMyw3NjAyOTE4OSksbj1hKG4saSxjLGwsdC5nZXRVaW50MzIoMzYsITApLDQsMzY1NDYwMjgwOSksbD1hKGwsbixpLGMsdC5nZXRVaW50MzIoNDgsITApLDExLDM4NzMxNTE0NjEpLGM9YShjLGwsbixpLHQuZ2V0VWludDMyKDYwLCEwKSwxNiw1MzA3NDI1MjApLGk9YShpLGMsbCxuLHQuZ2V0VWludDMyKDgsITApLDIzLDMyOTk2Mjg2NDUpLG49dShuLGksYyxsLHQuZ2V0VWludDMyKDAsITApLDYsNDA5NjMzNjQ1MiksbD11KGwsbixpLGMsdC5nZXRVaW50MzIoMjgsITApLDEwLDExMjY4OTE0MTUpLGM9dShjLGwsbixpLHQuZ2V0VWludDMyKDU2LCEwKSwxNSwyODc4NjEyMzkxKSxpPXUoaSxjLGwsbix0LmdldFVpbnQzMigyMCwhMCksMjEsNDIzNzUzMzI0MSksbj11KG4saSxjLGwsdC5nZXRVaW50MzIoNDgsITApLDYsMTcwMDQ4NTU3MSksbD11KGwsbixpLGMsdC5nZXRVaW50MzIoMTIsITApLDEwLDIzOTk5ODA2OTApLGM9dShjLGwsbixpLHQuZ2V0VWludDMyKDQwLCEwKSwxNSw0MjkzOTE1NzczKSxpPXUoaSxjLGwsbix0LmdldFVpbnQzMig0LCEwKSwyMSwyMjQwMDQ0NDk3KSxuPXUobixpLGMsbCx0LmdldFVpbnQzMigzMiwhMCksNiwxODczMzEzMzU5KSxsPXUobCxuLGksYyx0LmdldFVpbnQzMig2MCwhMCksMTAsNDI2NDM1NTU1MiksYz11KGMsbCxuLGksdC5nZXRVaW50MzIoMjQsITApLDE1LDI3MzQ3Njg5MTYpLGk9dShpLGMsbCxuLHQuZ2V0VWludDMyKDUyLCEwKSwyMSwxMzA5MTUxNjQ5KSxuPXUobixpLGMsbCx0LmdldFVpbnQzMigxNiwhMCksNiw0MTQ5NDQ0MjI2KSxsPXUobCxuLGksYyx0LmdldFVpbnQzMig0NCwhMCksMTAsMzE3NDc1NjkxNyksYz11KGMsbCxuLGksdC5nZXRVaW50MzIoOCwhMCksMTUsNzE4Nzg3MjU5KSxpPXUoaSxjLGwsbix0LmdldFVpbnQzMigzNiwhMCksMjEsMzk1MTQ4MTc0NSksclswXT1uK3JbMF0mNDI5NDk2NzI5NSxyWzFdPWkrclsxXSY0Mjk0OTY3Mjk1LHJbMl09YytyWzJdJjQyOTQ5NjcyOTUsclszXT1sK3JbM10mNDI5NDk2NzI5NX19LHtcIi4vYnJvd3Nlckhhc2hVdGlsc1wiOjEyLFwiYnVmZmVyL1wiOjgxfV0sMTU6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKCl7dGhpcy5oMD0xNzMyNTg0MTkzLHRoaXMuaDE9NDAyMzIzMzQxNyx0aGlzLmgyPTI1NjIzODMxMDIsdGhpcy5oMz0yNzE3MzM4NzgsdGhpcy5oND0zMjg1Mzc3NTIwLHRoaXMuYmxvY2s9bmV3IFVpbnQzMkFycmF5KDgwKSx0aGlzLm9mZnNldD0wLHRoaXMuc2hpZnQ9MjQsdGhpcy50b3RhbExlbmd0aD0wfXZhciBpPWUoXCJidWZmZXIvXCIpLkJ1ZmZlcixvPWUoXCIuL2Jyb3dzZXJIYXNoVXRpbHNcIik7bmV3IFVpbnQzMkFycmF5KFsxNTE4NTAwMjQ5LDE4NTk3NzUzOTMsLTE4OTQwMDc1ODgsLTg5OTQ5NzUxNF0pLE1hdGgucG93KDIsNTMpO3QuZXhwb3J0cz1uLG4uQkxPQ0tfU0laRT02NCxuLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oZSl7aWYodGhpcy5maW5pc2hlZCl0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0ZWQgdG8gdXBkYXRlIGFuIGFscmVhZHkgZmluaXNoZWQgaGFzaC5cIik7aWYoby5pc0VtcHR5RGF0YShlKSlyZXR1cm4gdGhpcztlPW8uY29udmVydFRvQnVmZmVyKGUpO3ZhciB0PWUubGVuZ3RoO3RoaXMudG90YWxMZW5ndGgrPTgqdDtmb3IodmFyIHI9MDtyPHQ7cisrKXRoaXMud3JpdGUoZVtyXSk7cmV0dXJuIHRoaXN9LG4ucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKGUpe3RoaXMuYmxvY2tbdGhpcy5vZmZzZXRdfD0oMjU1JmUpPDx0aGlzLnNoaWZ0LHRoaXMuc2hpZnQ/dGhpcy5zaGlmdC09ODoodGhpcy5vZmZzZXQrKyx0aGlzLnNoaWZ0PTI0KSwxNj09PXRoaXMub2Zmc2V0JiZ0aGlzLnByb2Nlc3NCbG9jaygpfSxuLnByb3RvdHlwZS5kaWdlc3Q9ZnVuY3Rpb24oZSl7dGhpcy53cml0ZSgxMjgpLCh0aGlzLm9mZnNldD4xNHx8MTQ9PT10aGlzLm9mZnNldCYmdGhpcy5zaGlmdDwyNCkmJnRoaXMucHJvY2Vzc0Jsb2NrKCksdGhpcy5vZmZzZXQ9MTQsdGhpcy5zaGlmdD0yNCx0aGlzLndyaXRlKDApLHRoaXMud3JpdGUoMCksdGhpcy53cml0ZSh0aGlzLnRvdGFsTGVuZ3RoPjB4ZmZmZmZmZmZmZj90aGlzLnRvdGFsTGVuZ3RoLzEwOTk1MTE2Mjc3NzY6MCksdGhpcy53cml0ZSh0aGlzLnRvdGFsTGVuZ3RoPjQyOTQ5NjcyOTU/dGhpcy50b3RhbExlbmd0aC80Mjk0OTY3Mjk2OjApO2Zvcih2YXIgdD0yNDt0Pj0wO3QtPTgpdGhpcy53cml0ZSh0aGlzLnRvdGFsTGVuZ3RoPj50KTt2YXIgcj1uZXcgaSgyMCksbj1uZXcgRGF0YVZpZXcoci5idWZmZXIpO3JldHVybiBuLnNldFVpbnQzMigwLHRoaXMuaDAsITEpLG4uc2V0VWludDMyKDQsdGhpcy5oMSwhMSksbi5zZXRVaW50MzIoOCx0aGlzLmgyLCExKSxuLnNldFVpbnQzMigxMix0aGlzLmgzLCExKSxuLnNldFVpbnQzMigxNix0aGlzLmg0LCExKSxlP3IudG9TdHJpbmcoZSk6cn0sbi5wcm90b3R5cGUucHJvY2Vzc0Jsb2NrPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPTE2O2U8ODA7ZSsrKXt2YXIgdD10aGlzLmJsb2NrW2UtM11edGhpcy5ibG9ja1tlLThdXnRoaXMuYmxvY2tbZS0xNF1edGhpcy5ibG9ja1tlLTE2XTt0aGlzLmJsb2NrW2VdPXQ8PDF8dD4+PjMxfXZhciByLG4saT10aGlzLmgwLG89dGhpcy5oMSxzPXRoaXMuaDIsYT10aGlzLmgzLHU9dGhpcy5oNDtmb3IoZT0wO2U8ODA7ZSsrKXtlPDIwPyhyPWFebyYoc15hKSxuPTE1MTg1MDAyNDkpOmU8NDA/KHI9b15zXmEsbj0xODU5Nzc1MzkzKTplPDYwPyhyPW8mc3xhJihvfHMpLG49MjQwMDk1OTcwOCk6KHI9b15zXmEsbj0zMzk1NDY5NzgyKTt2YXIgYz0oaTw8NXxpPj4+MjcpK3IrdStuKygwfHRoaXMuYmxvY2tbZV0pO3U9YSxhPXMscz1vPDwzMHxvPj4+MixvPWksaT1jfWZvcih0aGlzLmgwPXRoaXMuaDAraXwwLHRoaXMuaDE9dGhpcy5oMStvfDAsdGhpcy5oMj10aGlzLmgyK3N8MCx0aGlzLmgzPXRoaXMuaDMrYXwwLHRoaXMuaDQ9dGhpcy5oNCt1fDAsdGhpcy5vZmZzZXQ9MCxlPTA7ZTwxNjtlKyspdGhpcy5ibG9ja1tlXT0wfX0se1wiLi9icm93c2VySGFzaFV0aWxzXCI6MTIsXCJidWZmZXIvXCI6ODF9XSwxNjpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oKXt0aGlzLnN0YXRlPVsxNzc5MDMzNzAzLDMxNDQxMzQyNzcsMTAxMzkwNDI0MiwyNzczNDgwNzYyLDEzNTk4OTMxMTksMjYwMDgyMjkyNCw1Mjg3MzQ2MzUsMTU0MTQ1OTIyNV0sdGhpcy50ZW1wPW5ldyBJbnQzMkFycmF5KDY0KSx0aGlzLmJ1ZmZlcj1uZXcgVWludDhBcnJheSg2NCksdGhpcy5idWZmZXJMZW5ndGg9MCx0aGlzLmJ5dGVzSGFzaGVkPTAsdGhpcy5maW5pc2hlZD0hMX1cbnZhciBpPWUoXCJidWZmZXIvXCIpLkJ1ZmZlcixvPWUoXCIuL2Jyb3dzZXJIYXNoVXRpbHNcIikscz1uZXcgVWludDMyQXJyYXkoWzExMTYzNTI0MDgsMTg5OTQ0NzQ0MSwzMDQ5MzIzNDcxLDM5MjEwMDk1NzMsOTYxOTg3MTYzLDE1MDg5NzA5OTMsMjQ1MzYzNTc0OCwyODcwNzYzMjIxLDM2MjQzODEwODAsMzEwNTk4NDAxLDYwNzIyNTI3OCwxNDI2ODgxOTg3LDE5MjUwNzgzODgsMjE2MjA3ODIwNiwyNjE0ODg4MTAzLDMyNDgyMjI1ODAsMzgzNTM5MDQwMSw0MDIyMjI0Nzc0LDI2NDM0NzA3OCw2MDQ4MDc2MjgsNzcwMjU1OTgzLDEyNDkxNTAxMjIsMTU1NTA4MTY5MiwxOTk2MDY0OTg2LDI1NTQyMjA4ODIsMjgyMTgzNDM0OSwyOTUyOTk2ODA4LDMyMTAzMTM2NzEsMzMzNjU3MTg5MSwzNTg0NTI4NzExLDExMzkyNjk5MywzMzgyNDE4OTUsNjY2MzA3MjA1LDc3MzUyOTkxMiwxMjk0NzU3MzcyLDEzOTYxODIyOTEsMTY5NTE4MzcwMCwxOTg2NjYxMDUxLDIxNzcwMjYzNTAsMjQ1Njk1NjAzNywyNzMwNDg1OTIxLDI4MjAzMDI0MTEsMzI1OTczMDgwMCwzMzQ1NzY0NzcxLDM1MTYwNjU4MTcsMzYwMDM1MjgwNCw0MDk0NTcxOTA5LDI3NTQyMzM0NCw0MzAyMjc3MzQsNTA2OTQ4NjE2LDY1OTA2MDU1Niw4ODM5OTc4NzcsOTU4MTM5NTcxLDEzMjI4MjIyMTgsMTUzNzAwMjA2MywxNzQ3ODczNzc5LDE5NTU1NjIyMjIsMjAyNDEwNDgxNSwyMjI3NzMwNDUyLDIzNjE4NTI0MjQsMjQyODQzNjQ3NCwyNzU2NzM0MTg3LDMyMDQwMzE0NzksMzMyOTMyNTI5OF0pLGE9TWF0aC5wb3coMiw1MyktMTt0LmV4cG9ydHM9bixuLkJMT0NLX1NJWkU9NjQsbi5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKGUpe2lmKHRoaXMuZmluaXNoZWQpdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIHVwZGF0ZSBhbiBhbHJlYWR5IGZpbmlzaGVkIGhhc2guXCIpO2lmKG8uaXNFbXB0eURhdGEoZSkpcmV0dXJuIHRoaXM7ZT1vLmNvbnZlcnRUb0J1ZmZlcihlKTt2YXIgdD0wLHI9ZS5ieXRlTGVuZ3RoO2lmKHRoaXMuYnl0ZXNIYXNoZWQrPXIsOCp0aGlzLmJ5dGVzSGFzaGVkPmEpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGhhc2ggbW9yZSB0aGFuIDJeNTMgLSAxIGJpdHNcIik7Zm9yKDtyPjA7KXRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyTGVuZ3RoKytdPWVbdCsrXSxyLS0sNjQ9PT10aGlzLmJ1ZmZlckxlbmd0aCYmKHRoaXMuaGFzaEJ1ZmZlcigpLHRoaXMuYnVmZmVyTGVuZ3RoPTApO3JldHVybiB0aGlzfSxuLnByb3RvdHlwZS5kaWdlc3Q9ZnVuY3Rpb24oZSl7aWYoIXRoaXMuZmluaXNoZWQpe3ZhciB0PTgqdGhpcy5ieXRlc0hhc2hlZCxyPW5ldyBEYXRhVmlldyh0aGlzLmJ1ZmZlci5idWZmZXIsdGhpcy5idWZmZXIuYnl0ZU9mZnNldCx0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKSxuPXRoaXMuYnVmZmVyTGVuZ3RoO2lmKHIuc2V0VWludDgodGhpcy5idWZmZXJMZW5ndGgrKywxMjgpLG4lNjQ+PTU2KXtmb3IodmFyIG89dGhpcy5idWZmZXJMZW5ndGg7bzw2NDtvKyspci5zZXRVaW50OChvLDApO3RoaXMuaGFzaEJ1ZmZlcigpLHRoaXMuYnVmZmVyTGVuZ3RoPTB9Zm9yKHZhciBvPXRoaXMuYnVmZmVyTGVuZ3RoO288NTY7bysrKXIuc2V0VWludDgobywwKTtyLnNldFVpbnQzMig1NixNYXRoLmZsb29yKHQvNDI5NDk2NzI5NiksITApLHIuc2V0VWludDMyKDYwLHQpLHRoaXMuaGFzaEJ1ZmZlcigpLHRoaXMuZmluaXNoZWQ9ITB9Zm9yKHZhciBzPW5ldyBpKDMyKSxvPTA7bzw4O28rKylzWzQqb109dGhpcy5zdGF0ZVtvXT4+PjI0JjI1NSxzWzQqbysxXT10aGlzLnN0YXRlW29dPj4+MTYmMjU1LHNbNCpvKzJdPXRoaXMuc3RhdGVbb10+Pj44JjI1NSxzWzQqbyszXT10aGlzLnN0YXRlW29dPj4+MCYyNTU7cmV0dXJuIGU/cy50b1N0cmluZyhlKTpzfSxuLnByb3RvdHlwZS5oYXNoQnVmZmVyPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMsdD1lLmJ1ZmZlcixyPWUuc3RhdGUsbj1yWzBdLGk9clsxXSxvPXJbMl0sYT1yWzNdLHU9cls0XSxjPXJbNV0sbD1yWzZdLHA9cls3XSxoPTA7aDw2NDtoKyspe2lmKGg8MTYpdGhpcy50ZW1wW2hdPSgyNTUmdFs0KmhdKTw8MjR8KDI1NSZ0WzQqaCsxXSk8PDE2fCgyNTUmdFs0KmgrMl0pPDw4fDI1NSZ0WzQqaCszXTtlbHNle3ZhciBmPXRoaXMudGVtcFtoLTJdLGQ9KGY+Pj4xN3xmPDwxNSleKGY+Pj4xOXxmPDwxMyleZj4+PjEwO2Y9dGhpcy50ZW1wW2gtMTVdO3ZhciBtPShmPj4+N3xmPDwyNSleKGY+Pj4xOHxmPDwxNCleZj4+PjM7dGhpcy50ZW1wW2hdPShkK3RoaXMudGVtcFtoLTddfDApKyhtK3RoaXMudGVtcFtoLTE2XXwwKX12YXIgdj0oKCh1Pj4+Nnx1PDwyNileKHU+Pj4xMXx1PDwyMSleKHU+Pj4yNXx1PDw3KSkrKHUmY15+dSZsKXwwKSsocCsoc1toXSt0aGlzLnRlbXBbaF18MCl8MCl8MCx5PSgobj4+PjJ8bjw8MzApXihuPj4+MTN8bjw8MTkpXihuPj4+MjJ8bjw8MTApKSsobiZpXm4mb15pJm8pfDA7cD1sLGw9YyxjPXUsdT1hK3Z8MCxhPW8sbz1pLGk9bixuPXYreXwwfXJbMF0rPW4sclsxXSs9aSxyWzJdKz1vLHJbM10rPWEscls0XSs9dSxyWzVdKz1jLHJbNl0rPWwscls3XSs9cH19LHtcIi4vYnJvd3Nlckhhc2hVdGlsc1wiOjEyLFwiYnVmZmVyL1wiOjgxfV0sMTc6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24ocil7dmFyIG49ZShcIi4vdXRpbFwiKTtuLmNyeXB0by5saWI9ZShcIi4vYnJvd3NlckNyeXB0b0xpYlwiKSxuLkJ1ZmZlcj1lKFwiYnVmZmVyL1wiKS5CdWZmZXIsbi51cmw9ZShcInVybC9cIiksbi5xdWVyeXN0cmluZz1lKFwicXVlcnlzdHJpbmcvXCIpLG4ucmVhbENsb2NrPWUoXCIuL3JlYWxjbG9jay9icm93c2VyQ2xvY2tcIiksbi5lbnZpcm9ubWVudD1cImpzXCIsbi5jcmVhdGVFdmVudFN0cmVhbT1lKFwiLi9ldmVudC1zdHJlYW0vYnVmZmVyZWQtY3JlYXRlLWV2ZW50LXN0cmVhbVwiKS5jcmVhdGVFdmVudFN0cmVhbSxuLmlzQnJvd3Nlcj1mdW5jdGlvbigpe3JldHVybiEwfSxuLmlzTm9kZT1mdW5jdGlvbigpe3JldHVybiExfTt2YXIgaT1lKFwiLi9jb3JlXCIpO2lmKHQuZXhwb3J0cz1pLGUoXCIuL2NyZWRlbnRpYWxzXCIpLGUoXCIuL2NyZWRlbnRpYWxzL2NyZWRlbnRpYWxfcHJvdmlkZXJfY2hhaW5cIiksZShcIi4vY3JlZGVudGlhbHMvdGVtcG9yYXJ5X2NyZWRlbnRpYWxzXCIpLGUoXCIuL2NyZWRlbnRpYWxzL2NoYWluYWJsZV90ZW1wb3JhcnlfY3JlZGVudGlhbHNcIiksZShcIi4vY3JlZGVudGlhbHMvd2ViX2lkZW50aXR5X2NyZWRlbnRpYWxzXCIpLGUoXCIuL2NyZWRlbnRpYWxzL2NvZ25pdG9faWRlbnRpdHlfY3JlZGVudGlhbHNcIiksZShcIi4vY3JlZGVudGlhbHMvc2FtbF9jcmVkZW50aWFsc1wiKSxpLlhNTC5QYXJzZXI9ZShcIi4veG1sL2Jyb3dzZXJfcGFyc2VyXCIpLGUoXCIuL2h0dHAveGhyXCIpLHZvaWQgMD09PXIpdmFyIHI9e2Jyb3dzZXI6ITB9fSkuY2FsbCh0aGlzLGUoXCJfcHJvY2Vzc1wiKSl9LHtcIi4vYnJvd3NlckNyeXB0b0xpYlwiOjExLFwiLi9jb3JlXCI6MTksXCIuL2NyZWRlbnRpYWxzXCI6MjAsXCIuL2NyZWRlbnRpYWxzL2NoYWluYWJsZV90ZW1wb3JhcnlfY3JlZGVudGlhbHNcIjoyMSxcIi4vY3JlZGVudGlhbHMvY29nbml0b19pZGVudGl0eV9jcmVkZW50aWFsc1wiOjIyLFwiLi9jcmVkZW50aWFscy9jcmVkZW50aWFsX3Byb3ZpZGVyX2NoYWluXCI6MjMsXCIuL2NyZWRlbnRpYWxzL3NhbWxfY3JlZGVudGlhbHNcIjoyNCxcIi4vY3JlZGVudGlhbHMvdGVtcG9yYXJ5X2NyZWRlbnRpYWxzXCI6MjUsXCIuL2NyZWRlbnRpYWxzL3dlYl9pZGVudGl0eV9jcmVkZW50aWFsc1wiOjI2LFwiLi9ldmVudC1zdHJlYW0vYnVmZmVyZWQtY3JlYXRlLWV2ZW50LXN0cmVhbVwiOjI4LFwiLi9odHRwL3hoclwiOjM2LFwiLi9yZWFsY2xvY2svYnJvd3NlckNsb2NrXCI6NTMsXCIuL3V0aWxcIjo3MixcIi4veG1sL2Jyb3dzZXJfcGFyc2VyXCI6NzMsX3Byb2Nlc3M6ODYsXCJidWZmZXIvXCI6ODEsXCJxdWVyeXN0cmluZy9cIjo5MyxcInVybC9cIjo5NX1dLDE4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vY29yZVwiKTtlKFwiLi9jcmVkZW50aWFsc1wiKSxlKFwiLi9jcmVkZW50aWFscy9jcmVkZW50aWFsX3Byb3ZpZGVyX2NoYWluXCIpO3ZhciBpO24uQ29uZmlnPW4udXRpbC5pbmhlcml0KHtjb25zdHJ1Y3RvcjpmdW5jdGlvbihlKXt2b2lkIDA9PT1lJiYoZT17fSksZT10aGlzLmV4dHJhY3RDcmVkZW50aWFscyhlKSxuLnV0aWwuZWFjaC5jYWxsKHRoaXMsdGhpcy5rZXlzLGZ1bmN0aW9uKHQscil7dGhpcy5zZXQodCxlW3RdLHIpfSl9LGdldENyZWRlbnRpYWxzOmZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7ZSh0LHQ/bnVsbDppLmNyZWRlbnRpYWxzKX1mdW5jdGlvbiByKGUsdCl7cmV0dXJuIG5ldyBuLnV0aWwuZXJyb3IodHx8bmV3IEVycm9yLHtjb2RlOlwiQ3JlZGVudGlhbHNFcnJvclwiLG1lc3NhZ2U6ZSxuYW1lOlwiQ3JlZGVudGlhbHNFcnJvclwifSl9dmFyIGk9dGhpcztpLmNyZWRlbnRpYWxzP1wiZnVuY3Rpb25cIj09dHlwZW9mIGkuY3JlZGVudGlhbHMuZ2V0P2Z1bmN0aW9uKCl7aS5jcmVkZW50aWFscy5nZXQoZnVuY3Rpb24oZSl7ZSYmKGU9cihcIkNvdWxkIG5vdCBsb2FkIGNyZWRlbnRpYWxzIGZyb20gXCIraS5jcmVkZW50aWFscy5jb25zdHJ1Y3Rvci5uYW1lLGUpKSx0KGUpfSl9KCk6ZnVuY3Rpb24oKXt2YXIgZT1udWxsO2kuY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQmJmkuY3JlZGVudGlhbHMuc2VjcmV0QWNjZXNzS2V5fHwoZT1yKFwiTWlzc2luZyBjcmVkZW50aWFsc1wiKSksdChlKX0oKTppLmNyZWRlbnRpYWxQcm92aWRlcj9pLmNyZWRlbnRpYWxQcm92aWRlci5yZXNvbHZlKGZ1bmN0aW9uKGUsbil7ZSYmKGU9cihcIkNvdWxkIG5vdCBsb2FkIGNyZWRlbnRpYWxzIGZyb20gYW55IHByb3ZpZGVyc1wiLGUpKSxpLmNyZWRlbnRpYWxzPW4sdChlKX0pOnQocihcIk5vIGNyZWRlbnRpYWxzIHRvIGxvYWRcIikpfSx1cGRhdGU6ZnVuY3Rpb24oZSx0KXt0PXR8fCExLGU9dGhpcy5leHRyYWN0Q3JlZGVudGlhbHMoZSksbi51dGlsLmVhY2guY2FsbCh0aGlzLGUsZnVuY3Rpb24oZSxyKXsodHx8T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMua2V5cyxlKXx8bi5TZXJ2aWNlLmhhc1NlcnZpY2UoZSkpJiZ0aGlzLnNldChlLHIpfSl9LGxvYWRGcm9tUGF0aDpmdW5jdGlvbihlKXt0aGlzLmNsZWFyKCk7dmFyIHQ9SlNPTi5wYXJzZShuLnV0aWwucmVhZEZpbGVTeW5jKGUpKSxyPW5ldyBuLkZpbGVTeXN0ZW1DcmVkZW50aWFscyhlKSxpPW5ldyBuLkNyZWRlbnRpYWxQcm92aWRlckNoYWluO3JldHVybiBpLnByb3ZpZGVycy51bnNoaWZ0KHIpLGkucmVzb2x2ZShmdW5jdGlvbihlLHIpe2lmKGUpdGhyb3cgZTt0LmNyZWRlbnRpYWxzPXJ9KSx0aGlzLmNvbnN0cnVjdG9yKHQpLHRoaXN9LGNsZWFyOmZ1bmN0aW9uKCl7bi51dGlsLmVhY2guY2FsbCh0aGlzLHRoaXMua2V5cyxmdW5jdGlvbihlKXtkZWxldGUgdGhpc1tlXX0pLHRoaXMuc2V0KFwiY3JlZGVudGlhbHNcIix2b2lkIDApLHRoaXMuc2V0KFwiY3JlZGVudGlhbFByb3ZpZGVyXCIsdm9pZCAwKX0sc2V0OmZ1bmN0aW9uKGUsdCxyKXt2b2lkIDA9PT10Pyh2b2lkIDA9PT1yJiYocj10aGlzLmtleXNbZV0pLHRoaXNbZV09XCJmdW5jdGlvblwiPT10eXBlb2Ygcj9yLmNhbGwodGhpcyk6cik6XCJodHRwT3B0aW9uc1wiPT09ZSYmdGhpc1tlXT90aGlzW2VdPW4udXRpbC5tZXJnZSh0aGlzW2VdLHQpOnRoaXNbZV09dH0sa2V5czp7Y3JlZGVudGlhbHM6bnVsbCxjcmVkZW50aWFsUHJvdmlkZXI6bnVsbCxyZWdpb246bnVsbCxsb2dnZXI6bnVsbCxhcGlWZXJzaW9uczp7fSxhcGlWZXJzaW9uOm51bGwsZW5kcG9pbnQ6dm9pZCAwLGh0dHBPcHRpb25zOnt0aW1lb3V0OjEyZTR9LG1heFJldHJpZXM6dm9pZCAwLG1heFJlZGlyZWN0czoxMCxwYXJhbVZhbGlkYXRpb246ITAsc3NsRW5hYmxlZDohMCxzM0ZvcmNlUGF0aFN0eWxlOiExLHMzQnVja2V0RW5kcG9pbnQ6ITEsczNEaXNhYmxlQm9keVNpZ25pbmc6ITAsY29tcHV0ZUNoZWNrc3VtczohMCxjb252ZXJ0UmVzcG9uc2VUeXBlczohMCxjb3JyZWN0Q2xvY2tTa2V3OiExLGN1c3RvbVVzZXJBZ2VudDpudWxsLGR5bmFtb0RiQ3JjMzI6ITAsc3lzdGVtQ2xvY2tPZmZzZXQ6MCxzaWduYXR1cmVWZXJzaW9uOm51bGwsc2lnbmF0dXJlQ2FjaGU6ITAscmV0cnlEZWxheU9wdGlvbnM6e30sdXNlQWNjZWxlcmF0ZUVuZHBvaW50OiExLGNsaWVudFNpZGVNb25pdG9yaW5nOiExLGVuZHBvaW50RGlzY292ZXJ5RW5hYmxlZDohMSxlbmRwb2ludENhY2hlU2l6ZToxZTMsaG9zdFByZWZpeEVuYWJsZWQ6ITAsc3RzUmVnaW9uYWxFbmRwb2ludHM6bnVsbH0sZXh0cmFjdENyZWRlbnRpYWxzOmZ1bmN0aW9uKGUpe3JldHVybiBlLmFjY2Vzc0tleUlkJiZlLnNlY3JldEFjY2Vzc0tleSYmKGU9bi51dGlsLmNvcHkoZSksZS5jcmVkZW50aWFscz1uZXcgbi5DcmVkZW50aWFscyhlKSksZX0sc2V0UHJvbWlzZXNEZXBlbmRlbmN5OmZ1bmN0aW9uKGUpe2k9ZSxudWxsPT09ZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgUHJvbWlzZSYmKGk9UHJvbWlzZSk7dmFyIHQ9W24uUmVxdWVzdCxuLkNyZWRlbnRpYWxzLG4uQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW5dO24uUzMmJih0LnB1c2gobi5TMyksbi5TMy5NYW5hZ2VkVXBsb2FkJiZ0LnB1c2gobi5TMy5NYW5hZ2VkVXBsb2FkKSksbi51dGlsLmFkZFByb21pc2VzKHQsaSl9LGdldFByb21pc2VzRGVwZW5kZW5jeTpmdW5jdGlvbigpe3JldHVybiBpfX0pLG4uY29uZmlnPW5ldyBuLkNvbmZpZ30se1wiLi9jb3JlXCI6MTksXCIuL2NyZWRlbnRpYWxzXCI6MjAsXCIuL2NyZWRlbnRpYWxzL2NyZWRlbnRpYWxfcHJvdmlkZXJfY2hhaW5cIjoyM31dLDE5OltmdW5jdGlvbihlLHQscil7dmFyIG49e3V0aWw6ZShcIi4vdXRpbFwiKX07KHt9KS50b1N0cmluZygpLHQuZXhwb3J0cz1uLG4udXRpbC51cGRhdGUobix7VkVSU0lPTjpcIjIuNTY5LjBcIixTaWduZXJzOnt9LFByb3RvY29sOntKc29uOmUoXCIuL3Byb3RvY29sL2pzb25cIiksUXVlcnk6ZShcIi4vcHJvdG9jb2wvcXVlcnlcIiksUmVzdDplKFwiLi9wcm90b2NvbC9yZXN0XCIpLFJlc3RKc29uOmUoXCIuL3Byb3RvY29sL3Jlc3RfanNvblwiKSxSZXN0WG1sOmUoXCIuL3Byb3RvY29sL3Jlc3RfeG1sXCIpfSxYTUw6e0J1aWxkZXI6ZShcIi4veG1sL2J1aWxkZXJcIiksUGFyc2VyOm51bGx9LEpTT046e0J1aWxkZXI6ZShcIi4vanNvbi9idWlsZGVyXCIpLFBhcnNlcjplKFwiLi9qc29uL3BhcnNlclwiKX0sTW9kZWw6e0FwaTplKFwiLi9tb2RlbC9hcGlcIiksT3BlcmF0aW9uOmUoXCIuL21vZGVsL29wZXJhdGlvblwiKSxTaGFwZTplKFwiLi9tb2RlbC9zaGFwZVwiKSxQYWdpbmF0b3I6ZShcIi4vbW9kZWwvcGFnaW5hdG9yXCIpLFJlc291cmNlV2FpdGVyOmUoXCIuL21vZGVsL3Jlc291cmNlX3dhaXRlclwiKX0sYXBpTG9hZGVyOmUoXCIuL2FwaV9sb2FkZXJcIiksRW5kcG9pbnRDYWNoZTplKFwiLi4vdmVuZG9yL2VuZHBvaW50LWNhY2hlXCIpLkVuZHBvaW50Q2FjaGV9KSxlKFwiLi9zZXF1ZW50aWFsX2V4ZWN1dG9yXCIpLGUoXCIuL3NlcnZpY2VcIiksZShcIi4vY29uZmlnXCIpLGUoXCIuL2h0dHBcIiksZShcIi4vZXZlbnRfbGlzdGVuZXJzXCIpLGUoXCIuL3JlcXVlc3RcIiksZShcIi4vcmVzcG9uc2VcIiksZShcIi4vcmVzb3VyY2Vfd2FpdGVyXCIpLGUoXCIuL3NpZ25lcnMvcmVxdWVzdF9zaWduZXJcIiksZShcIi4vcGFyYW1fdmFsaWRhdG9yXCIpLG4uZXZlbnRzPW5ldyBuLlNlcXVlbnRpYWxFeGVjdXRvcixuLnV0aWwubWVtb2l6ZWRQcm9wZXJ0eShuLFwiZW5kcG9pbnRDYWNoZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBuLkVuZHBvaW50Q2FjaGUobi5jb25maWcuZW5kcG9pbnRDYWNoZVNpemUpfSwhMCl9LHtcIi4uL3ZlbmRvci9lbmRwb2ludC1jYWNoZVwiOjEwNCxcIi4vYXBpX2xvYWRlclwiOjEwLFwiLi9jb25maWdcIjoxOCxcIi4vZXZlbnRfbGlzdGVuZXJzXCI6MzQsXCIuL2h0dHBcIjozNSxcIi4vanNvbi9idWlsZGVyXCI6MzcsXCIuL2pzb24vcGFyc2VyXCI6MzgsXCIuL21vZGVsL2FwaVwiOjM5LFwiLi9tb2RlbC9vcGVyYXRpb25cIjo0MSxcIi4vbW9kZWwvcGFnaW5hdG9yXCI6NDIsXCIuL21vZGVsL3Jlc291cmNlX3dhaXRlclwiOjQzLFwiLi9tb2RlbC9zaGFwZVwiOjQ0LFwiLi9wYXJhbV92YWxpZGF0b3JcIjo0NSxcIi4vcHJvdG9jb2wvanNvblwiOjQ3LFwiLi9wcm90b2NvbC9xdWVyeVwiOjQ4LFwiLi9wcm90b2NvbC9yZXN0XCI6NDksXCIuL3Byb3RvY29sL3Jlc3RfanNvblwiOjUwLFwiLi9wcm90b2NvbC9yZXN0X3htbFwiOjUxLFwiLi9yZXF1ZXN0XCI6NTYsXCIuL3Jlc291cmNlX3dhaXRlclwiOjU3LFwiLi9yZXNwb25zZVwiOjU4LFwiLi9zZXF1ZW50aWFsX2V4ZWN1dG9yXCI6NTksXCIuL3NlcnZpY2VcIjo2MCxcIi4vc2lnbmVycy9yZXF1ZXN0X3NpZ25lclwiOjY0LFwiLi91dGlsXCI6NzIsXCIuL3htbC9idWlsZGVyXCI6NzR9XSwyMDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL2NvcmVcIik7bi5DcmVkZW50aWFscz1uLnV0aWwuaW5oZXJpdCh7Y29uc3RydWN0b3I6ZnVuY3Rpb24oKXtpZihuLnV0aWwuaGlkZVByb3BlcnRpZXModGhpcyxbXCJzZWNyZXRBY2Nlc3NLZXlcIl0pLHRoaXMuZXhwaXJlZD0hMSx0aGlzLmV4cGlyZVRpbWU9bnVsbCx0aGlzLnJlZnJlc2hDYWxsYmFja3M9W10sMT09PWFyZ3VtZW50cy5sZW5ndGgmJlwib2JqZWN0XCI9PXR5cGVvZiBhcmd1bWVudHNbMF0pe3ZhciBlPWFyZ3VtZW50c1swXS5jcmVkZW50aWFsc3x8YXJndW1lbnRzWzBdO3RoaXMuYWNjZXNzS2V5SWQ9ZS5hY2Nlc3NLZXlJZCx0aGlzLnNlY3JldEFjY2Vzc0tleT1lLnNlY3JldEFjY2Vzc0tleSx0aGlzLnNlc3Npb25Ub2tlbj1lLnNlc3Npb25Ub2tlbn1lbHNlIHRoaXMuYWNjZXNzS2V5SWQ9YXJndW1lbnRzWzBdLHRoaXMuc2VjcmV0QWNjZXNzS2V5PWFyZ3VtZW50c1sxXSx0aGlzLnNlc3Npb25Ub2tlbj1hcmd1bWVudHNbMl19LGV4cGlyeVdpbmRvdzoxNSxuZWVkc1JlZnJlc2g6ZnVuY3Rpb24oKXt2YXIgZT1uLnV0aWwuZGF0ZS5nZXREYXRlKCkuZ2V0VGltZSgpLHQ9bmV3IERhdGUoZSsxZTMqdGhpcy5leHBpcnlXaW5kb3cpO3JldHVybiEhKHRoaXMuZXhwaXJlVGltZSYmdD50aGlzLmV4cGlyZVRpbWUpfHwodGhpcy5leHBpcmVkfHwhdGhpcy5hY2Nlc3NLZXlJZHx8IXRoaXMuc2VjcmV0QWNjZXNzS2V5KX0sZ2V0OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5uZWVkc1JlZnJlc2goKT90aGlzLnJlZnJlc2goZnVuY3Rpb24ocil7cnx8KHQuZXhwaXJlZD0hMSksZSYmZShyKX0pOmUmJmUoKX0scmVmcmVzaDpmdW5jdGlvbihlKXt0aGlzLmV4cGlyZWQ9ITEsZSgpfSxjb2FsZXNjZVJlZnJlc2g6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzOzE9PT1yLnJlZnJlc2hDYWxsYmFja3MucHVzaChlKSYmci5sb2FkKGZ1bmN0aW9uKGUpe24udXRpbC5hcnJheUVhY2goci5yZWZyZXNoQ2FsbGJhY2tzLGZ1bmN0aW9uKHIpe3Q/cihlKTpuLnV0aWwuZGVmZXIoZnVuY3Rpb24oKXtyKGUpfSl9KSxyLnJlZnJlc2hDYWxsYmFja3MubGVuZ3RoPTB9KX0sbG9hZDpmdW5jdGlvbihlKXtlKCl9fSksbi5DcmVkZW50aWFscy5hZGRQcm9taXNlc1RvQ2xhc3M9ZnVuY3Rpb24oZSl7dGhpcy5wcm90b3R5cGUuZ2V0UHJvbWlzZT1uLnV0aWwucHJvbWlzaWZ5TWV0aG9kKFwiZ2V0XCIsZSksdGhpcy5wcm90b3R5cGUucmVmcmVzaFByb21pc2U9bi51dGlsLnByb21pc2lmeU1ldGhvZChcInJlZnJlc2hcIixlKX0sbi5DcmVkZW50aWFscy5kZWxldGVQcm9taXNlc0Zyb21DbGFzcz1mdW5jdGlvbigpe2RlbGV0ZSB0aGlzLnByb3RvdHlwZS5nZXRQcm9taXNlLGRlbGV0ZSB0aGlzLnByb3RvdHlwZS5yZWZyZXNoUHJvbWlzZX0sbi51dGlsLmFkZFByb21pc2VzKG4uQ3JlZGVudGlhbHMpfSx7XCIuL2NvcmVcIjoxOX1dLDIxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4uL2NvcmVcIiksaT1lKFwiLi4vLi4vY2xpZW50cy9zdHNcIik7bi5DaGFpbmFibGVUZW1wb3JhcnlDcmVkZW50aWFscz1uLnV0aWwuaW5oZXJpdChuLkNyZWRlbnRpYWxzLHtjb25zdHJ1Y3RvcjpmdW5jdGlvbihlKXtuLkNyZWRlbnRpYWxzLmNhbGwodGhpcyksZT1lfHx7fSx0aGlzLmVycm9yQ29kZT1cIkNoYWluYWJsZVRlbXBvcmFyeUNyZWRlbnRpYWxzUHJvdmlkZXJGYWlsdXJlXCIsdGhpcy5leHBpcmVkPSEwLHRoaXMudG9rZW5Db2RlRm49bnVsbDt2YXIgdD1uLnV0aWwuY29weShlLnBhcmFtcyl8fHt9O2lmKHQuUm9sZUFybiYmKHQuUm9sZVNlc3Npb25OYW1lPXQuUm9sZVNlc3Npb25OYW1lfHxcInRlbXBvcmFyeS1jcmVkZW50aWFsc1wiKSx0LlNlcmlhbE51bWJlcil7aWYoIWUudG9rZW5Db2RlRm58fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUudG9rZW5Db2RlRm4pdGhyb3cgbmV3IG4udXRpbC5lcnJvcihuZXcgRXJyb3IoXCJ0b2tlbkNvZGVGbiBtdXN0IGJlIGEgZnVuY3Rpb24gd2hlbiBwYXJhbXMuU2VyaWFsTnVtYmVyIGlzIGdpdmVuXCIpLHtjb2RlOnRoaXMuZXJyb3JDb2RlfSk7dGhpcy50b2tlbkNvZGVGbj1lLnRva2VuQ29kZUZufXZhciByPW4udXRpbC5tZXJnZSh7cGFyYW1zOnQsY3JlZGVudGlhbHM6ZS5tYXN0ZXJDcmVkZW50aWFsc3x8bi5jb25maWcuY3JlZGVudGlhbHN9LGUuc3RzQ29uZmlnfHx7fSk7dGhpcy5zZXJ2aWNlPW5ldyBpKHIpfSxyZWZyZXNoOmZ1bmN0aW9uKGUpe3RoaXMuY29hbGVzY2VSZWZyZXNoKGV8fG4udXRpbC5mbi5jYWxsYmFjayl9LGxvYWQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPXQuc2VydmljZS5jb25maWcucGFyYW1zLlJvbGVBcm4/XCJhc3N1bWVSb2xlXCI6XCJnZXRTZXNzaW9uVG9rZW5cIjt0aGlzLmdldFRva2VuQ29kZShmdW5jdGlvbihuLGkpe3ZhciBvPXt9O2lmKG4pcmV0dXJuIHZvaWQgZShuKTtpJiYoby5Ub2tlbkNvZGU9aSksdC5zZXJ2aWNlW3JdKG8sZnVuY3Rpb24ocixuKXtyfHx0LnNlcnZpY2UuY3JlZGVudGlhbHNGcm9tKG4sdCksZShyKX0pfSl9LGdldFRva2VuQ29kZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMudG9rZW5Db2RlRm4/dGhpcy50b2tlbkNvZGVGbih0aGlzLnNlcnZpY2UuY29uZmlnLnBhcmFtcy5TZXJpYWxOdW1iZXIsZnVuY3Rpb24ocixpKXtpZihyKXt2YXIgbz1yO3JldHVybiByIGluc3RhbmNlb2YgRXJyb3ImJihvPXIubWVzc2FnZSksdm9pZCBlKG4udXRpbC5lcnJvcihuZXcgRXJyb3IoXCJFcnJvciBmZXRjaGluZyBNRkEgdG9rZW46IFwiK28pLHtjb2RlOnQuZXJyb3JDb2RlfSkpfWUobnVsbCxpKX0pOmUobnVsbCl9fSl9LHtcIi4uLy4uL2NsaWVudHMvc3RzXCI6OSxcIi4uL2NvcmVcIjoxOX1dLDIyOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4uL2NvcmVcIiksaT1lKFwiLi4vLi4vY2xpZW50cy9jb2duaXRvaWRlbnRpdHlcIiksbz1lKFwiLi4vLi4vY2xpZW50cy9zdHNcIik7bi5Db2duaXRvSWRlbnRpdHlDcmVkZW50aWFscz1uLnV0aWwuaW5oZXJpdChuLkNyZWRlbnRpYWxzLHtsb2NhbFN0b3JhZ2VLZXk6e2lkOlwiYXdzLmNvZ25pdG8uaWRlbnRpdHktaWQuXCIscHJvdmlkZXJzOlwiYXdzLmNvZ25pdG8uaWRlbnRpdHktcHJvdmlkZXJzLlwifSxjb25zdHJ1Y3RvcjpmdW5jdGlvbihlLHQpe24uQ3JlZGVudGlhbHMuY2FsbCh0aGlzKSx0aGlzLmV4cGlyZWQ9ITAsdGhpcy5wYXJhbXM9ZSx0aGlzLmRhdGE9bnVsbCx0aGlzLl9pZGVudGl0eUlkPW51bGwsdGhpcy5fY2xpZW50Q29uZmlnPW4udXRpbC5jb3B5KHR8fHt9KSx0aGlzLmxvYWRDYWNoZWRJZCgpO3ZhciByPXRoaXM7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJpZGVudGl0eUlkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiByLmxvYWRDYWNoZWRJZCgpLHIuX2lkZW50aXR5SWR8fHIucGFyYW1zLklkZW50aXR5SWR9LHNldDpmdW5jdGlvbihlKXtyLl9pZGVudGl0eUlkPWV9fSl9LHJlZnJlc2g6ZnVuY3Rpb24oZSl7dGhpcy5jb2FsZXNjZVJlZnJlc2goZXx8bi51dGlsLmZuLmNhbGxiYWNrKX0sbG9hZDpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3QuY3JlYXRlQ2xpZW50cygpLHQuZGF0YT1udWxsLHQuX2lkZW50aXR5SWQ9bnVsbCx0LmdldElkKGZ1bmN0aW9uKHIpe3I/KHQuY2xlYXJJZE9uTm90QXV0aG9yaXplZChyKSxlKHIpKTp0LnBhcmFtcy5Sb2xlQXJuP3QuZ2V0Q3JlZGVudGlhbHNGcm9tU1RTKGUpOnQuZ2V0Q3JlZGVudGlhbHNGb3JJZGVudGl0eShlKX0pfSxjbGVhckNhY2hlZElkOmZ1bmN0aW9uKCl7dGhpcy5faWRlbnRpdHlJZD1udWxsLGRlbGV0ZSB0aGlzLnBhcmFtcy5JZGVudGl0eUlkO3ZhciBlPXRoaXMucGFyYW1zLklkZW50aXR5UG9vbElkLHQ9dGhpcy5wYXJhbXMuTG9naW5JZHx8XCJcIjtkZWxldGUgdGhpcy5zdG9yYWdlW3RoaXMubG9jYWxTdG9yYWdlS2V5LmlkK2UrdF0sZGVsZXRlIHRoaXMuc3RvcmFnZVt0aGlzLmxvY2FsU3RvcmFnZUtleS5wcm92aWRlcnMrZSt0XX0sY2xlYXJJZE9uTm90QXV0aG9yaXplZDpmdW5jdGlvbihlKXt2YXIgdD10aGlzO1wiTm90QXV0aG9yaXplZEV4Y2VwdGlvblwiPT1lLmNvZGUmJnQuY2xlYXJDYWNoZWRJZCgpfSxnZXRJZDpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0LnBhcmFtcy5JZGVudGl0eUlkKXJldHVybiBlKG51bGwsdC5wYXJhbXMuSWRlbnRpdHlJZCk7dC5jb2duaXRvLmdldElkKGZ1bmN0aW9uKHIsbil7IXImJm4uSWRlbnRpdHlJZD8odC5wYXJhbXMuSWRlbnRpdHlJZD1uLklkZW50aXR5SWQsZShudWxsLG4uSWRlbnRpdHlJZCkpOmUocil9KX0sbG9hZENyZWRlbnRpYWxzOmZ1bmN0aW9uKGUsdCl7ZSYmdCYmKHQuZXhwaXJlZD0hMSx0LmFjY2Vzc0tleUlkPWUuQ3JlZGVudGlhbHMuQWNjZXNzS2V5SWQsdC5zZWNyZXRBY2Nlc3NLZXk9ZS5DcmVkZW50aWFscy5TZWNyZXRLZXksdC5zZXNzaW9uVG9rZW49ZS5DcmVkZW50aWFscy5TZXNzaW9uVG9rZW4sdC5leHBpcmVUaW1lPWUuQ3JlZGVudGlhbHMuRXhwaXJhdGlvbil9LGdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHk6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0LmNvZ25pdG8uZ2V0Q3JlZGVudGlhbHNGb3JJZGVudGl0eShmdW5jdGlvbihyLG4pe3I/dC5jbGVhcklkT25Ob3RBdXRob3JpemVkKHIpOih0LmNhY2hlSWQobiksdC5kYXRhPW4sdC5sb2FkQ3JlZGVudGlhbHModC5kYXRhLHQpKSxlKHIpfSl9LGdldENyZWRlbnRpYWxzRnJvbVNUUzpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3QuY29nbml0by5nZXRPcGVuSWRUb2tlbihmdW5jdGlvbihyLG4pe3I/KHQuY2xlYXJJZE9uTm90QXV0aG9yaXplZChyKSxlKHIpKToodC5jYWNoZUlkKG4pLHQucGFyYW1zLldlYklkZW50aXR5VG9rZW49bi5Ub2tlbix0LndlYklkZW50aXR5Q3JlZGVudGlhbHMucmVmcmVzaChmdW5jdGlvbihyKXtyfHwodC5kYXRhPXQud2ViSWRlbnRpdHlDcmVkZW50aWFscy5kYXRhLHQuc3RzLmNyZWRlbnRpYWxzRnJvbSh0LmRhdGEsdCkpLGUocil9KSl9KX0sbG9hZENhY2hlZElkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZihuLnV0aWwuaXNCcm93c2VyKCkmJiFlLnBhcmFtcy5JZGVudGl0eUlkKXt2YXIgdD1lLmdldFN0b3JhZ2UoXCJpZFwiKTtpZih0JiZlLnBhcmFtcy5Mb2dpbnMpe3ZhciByPU9iamVjdC5rZXlzKGUucGFyYW1zLkxvZ2lucyk7MCE9PShlLmdldFN0b3JhZ2UoXCJwcm92aWRlcnNcIil8fFwiXCIpLnNwbGl0KFwiLFwiKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuLTEhPT1yLmluZGV4T2YoZSl9KS5sZW5ndGgmJihlLnBhcmFtcy5JZGVudGl0eUlkPXQpfWVsc2UgdCYmKGUucGFyYW1zLklkZW50aXR5SWQ9dCl9fSxjcmVhdGVDbGllbnRzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fY2xpZW50Q29uZmlnO2lmKHRoaXMud2ViSWRlbnRpdHlDcmVkZW50aWFscz10aGlzLndlYklkZW50aXR5Q3JlZGVudGlhbHN8fG5ldyBuLldlYklkZW50aXR5Q3JlZGVudGlhbHModGhpcy5wYXJhbXMsZSksIXRoaXMuY29nbml0byl7dmFyIHQ9bi51dGlsLm1lcmdlKHt9LGUpO3QucGFyYW1zPXRoaXMucGFyYW1zLHRoaXMuY29nbml0bz1uZXcgaSh0KX10aGlzLnN0cz10aGlzLnN0c3x8bmV3IG8oZSl9LGNhY2hlSWQ6ZnVuY3Rpb24oZSl7dGhpcy5faWRlbnRpdHlJZD1lLklkZW50aXR5SWQsdGhpcy5wYXJhbXMuSWRlbnRpdHlJZD10aGlzLl9pZGVudGl0eUlkLG4udXRpbC5pc0Jyb3dzZXIoKSYmKHRoaXMuc2V0U3RvcmFnZShcImlkXCIsZS5JZGVudGl0eUlkKSx0aGlzLnBhcmFtcy5Mb2dpbnMmJnRoaXMuc2V0U3RvcmFnZShcInByb3ZpZGVyc1wiLE9iamVjdC5rZXlzKHRoaXMucGFyYW1zLkxvZ2lucykuam9pbihcIixcIikpKX0sZ2V0U3RvcmFnZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zdG9yYWdlW3RoaXMubG9jYWxTdG9yYWdlS2V5W2VdK3RoaXMucGFyYW1zLklkZW50aXR5UG9vbElkKyh0aGlzLnBhcmFtcy5Mb2dpbklkfHxcIlwiKV19LHNldFN0b3JhZ2U6ZnVuY3Rpb24oZSx0KXt0cnl7dGhpcy5zdG9yYWdlW3RoaXMubG9jYWxTdG9yYWdlS2V5W2VdK3RoaXMucGFyYW1zLklkZW50aXR5UG9vbElkKyh0aGlzLnBhcmFtcy5Mb2dpbklkfHxcIlwiKV09dH1jYXRjaChlKXt9fSxzdG9yYWdlOmZ1bmN0aW9uKCl7dHJ5e3ZhciBlPW4udXRpbC5pc0Jyb3dzZXIoKSYmbnVsbCE9PXdpbmRvdy5sb2NhbFN0b3JhZ2UmJlwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cubG9jYWxTdG9yYWdlP3dpbmRvdy5sb2NhbFN0b3JhZ2U6e307cmV0dXJuIGVbXCJhd3MudGVzdC1zdG9yYWdlXCJdPVwiZm9vYmFyXCIsZGVsZXRlIGVbXCJhd3MudGVzdC1zdG9yYWdlXCJdLGV9Y2F0Y2goZSl7cmV0dXJue319fSgpfSl9LHtcIi4uLy4uL2NsaWVudHMvY29nbml0b2lkZW50aXR5XCI6OCxcIi4uLy4uL2NsaWVudHMvc3RzXCI6OSxcIi4uL2NvcmVcIjoxOX1dLDIzOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4uL2NvcmVcIik7bi5DcmVkZW50aWFsUHJvdmlkZXJDaGFpbj1uLnV0aWwuaW5oZXJpdChuLkNyZWRlbnRpYWxzLHtjb25zdHJ1Y3RvcjpmdW5jdGlvbihlKXt0aGlzLnByb3ZpZGVycz1lfHxuLkNyZWRlbnRpYWxQcm92aWRlckNoYWluLmRlZmF1bHRQcm92aWRlcnMuc2xpY2UoMCksdGhpcy5yZXNvbHZlQ2FsbGJhY2tzPVtdfSxyZXNvbHZlOmZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxzKXtpZighZSYmc3x8aT09PW8ubGVuZ3RoKXJldHVybiBuLnV0aWwuYXJyYXlFYWNoKHIucmVzb2x2ZUNhbGxiYWNrcyxmdW5jdGlvbih0KXt0KGUscyl9KSx2b2lkKHIucmVzb2x2ZUNhbGxiYWNrcy5sZW5ndGg9MCk7dmFyIGE9b1tpKytdO3M9XCJmdW5jdGlvblwiPT10eXBlb2YgYT9hLmNhbGwoKTphLHMuZ2V0P3MuZ2V0KGZ1bmN0aW9uKGUpe3QoZSxlP251bGw6cyl9KTp0KG51bGwscyl9dmFyIHI9dGhpcztpZigwPT09ci5wcm92aWRlcnMubGVuZ3RoKXJldHVybiBlKG5ldyBFcnJvcihcIk5vIHByb3ZpZGVyc1wiKSkscjtpZigxPT09ci5yZXNvbHZlQ2FsbGJhY2tzLnB1c2goZSkpe3ZhciBpPTAsbz1yLnByb3ZpZGVycy5zbGljZSgwKTt0KCl9cmV0dXJuIHJ9fSksbi5DcmVkZW50aWFsUHJvdmlkZXJDaGFpbi5kZWZhdWx0UHJvdmlkZXJzPVtdLG4uQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW4uYWRkUHJvbWlzZXNUb0NsYXNzPWZ1bmN0aW9uKGUpe3RoaXMucHJvdG90eXBlLnJlc29sdmVQcm9taXNlPW4udXRpbC5wcm9taXNpZnlNZXRob2QoXCJyZXNvbHZlXCIsZSl9LG4uQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW4uZGVsZXRlUHJvbWlzZXNGcm9tQ2xhc3M9ZnVuY3Rpb24oKXtkZWxldGUgdGhpcy5wcm90b3R5cGUucmVzb2x2ZVByb21pc2V9LG4udXRpbC5hZGRQcm9taXNlcyhuLkNyZWRlbnRpYWxQcm92aWRlckNoYWluKX0se1wiLi4vY29yZVwiOjE5fV0sMjQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi4vY29yZVwiKSxpPWUoXCIuLi8uLi9jbGllbnRzL3N0c1wiKTtuLlNBTUxDcmVkZW50aWFscz1uLnV0aWwuaW5oZXJpdChuLkNyZWRlbnRpYWxzLHtjb25zdHJ1Y3RvcjpmdW5jdGlvbihlKXtuLkNyZWRlbnRpYWxzLmNhbGwodGhpcyksdGhpcy5leHBpcmVkPSEwLHRoaXMucGFyYW1zPWV9LHJlZnJlc2g6ZnVuY3Rpb24oZSl7dGhpcy5jb2FsZXNjZVJlZnJlc2goZXx8bi51dGlsLmZuLmNhbGxiYWNrKX0sbG9hZDpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3QuY3JlYXRlQ2xpZW50cygpLHQuc2VydmljZS5hc3N1bWVSb2xlV2l0aFNBTUwoZnVuY3Rpb24ocixuKXtyfHx0LnNlcnZpY2UuY3JlZGVudGlhbHNGcm9tKG4sdCksZShyKX0pfSxjcmVhdGVDbGllbnRzOmZ1bmN0aW9uKCl7dGhpcy5zZXJ2aWNlPXRoaXMuc2VydmljZXx8bmV3IGkoe3BhcmFtczp0aGlzLnBhcmFtc30pfX0pfSx7XCIuLi8uLi9jbGllbnRzL3N0c1wiOjksXCIuLi9jb3JlXCI6MTl9XSwyNTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuLi9jb3JlXCIpLGk9ZShcIi4uLy4uL2NsaWVudHMvc3RzXCIpO24uVGVtcG9yYXJ5Q3JlZGVudGlhbHM9bi51dGlsLmluaGVyaXQobi5DcmVkZW50aWFscyx7Y29uc3RydWN0b3I6ZnVuY3Rpb24oZSx0KXtuLkNyZWRlbnRpYWxzLmNhbGwodGhpcyksdGhpcy5sb2FkTWFzdGVyQ3JlZGVudGlhbHModCksdGhpcy5leHBpcmVkPSEwLHRoaXMucGFyYW1zPWV8fHt9LHRoaXMucGFyYW1zLlJvbGVBcm4mJih0aGlzLnBhcmFtcy5Sb2xlU2Vzc2lvbk5hbWU9dGhpcy5wYXJhbXMuUm9sZVNlc3Npb25OYW1lfHxcInRlbXBvcmFyeS1jcmVkZW50aWFsc1wiKX0scmVmcmVzaDpmdW5jdGlvbihlKXt0aGlzLmNvYWxlc2NlUmVmcmVzaChlfHxuLnV0aWwuZm4uY2FsbGJhY2spfSxsb2FkOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dC5jcmVhdGVDbGllbnRzKCksdC5tYXN0ZXJDcmVkZW50aWFscy5nZXQoZnVuY3Rpb24oKXt0LnNlcnZpY2UuY29uZmlnLmNyZWRlbnRpYWxzPXQubWFzdGVyQ3JlZGVudGlhbHMsKHQucGFyYW1zLlJvbGVBcm4/dC5zZXJ2aWNlLmFzc3VtZVJvbGU6dC5zZXJ2aWNlLmdldFNlc3Npb25Ub2tlbikuY2FsbCh0LnNlcnZpY2UsZnVuY3Rpb24ocixuKXtyfHx0LnNlcnZpY2UuY3JlZGVudGlhbHNGcm9tKG4sdCksZShyKX0pfSl9LGxvYWRNYXN0ZXJDcmVkZW50aWFsczpmdW5jdGlvbihlKXtmb3IodGhpcy5tYXN0ZXJDcmVkZW50aWFscz1lfHxuLmNvbmZpZy5jcmVkZW50aWFsczt0aGlzLm1hc3RlckNyZWRlbnRpYWxzLm1hc3RlckNyZWRlbnRpYWxzOyl0aGlzLm1hc3RlckNyZWRlbnRpYWxzPXRoaXMubWFzdGVyQ3JlZGVudGlhbHMubWFzdGVyQ3JlZGVudGlhbHM7XCJmdW5jdGlvblwiIT10eXBlb2YgdGhpcy5tYXN0ZXJDcmVkZW50aWFscy5nZXQmJih0aGlzLm1hc3RlckNyZWRlbnRpYWxzPW5ldyBuLkNyZWRlbnRpYWxzKHRoaXMubWFzdGVyQ3JlZGVudGlhbHMpKX0sY3JlYXRlQ2xpZW50czpmdW5jdGlvbigpe3RoaXMuc2VydmljZT10aGlzLnNlcnZpY2V8fG5ldyBpKHtwYXJhbXM6dGhpcy5wYXJhbXN9KX19KX0se1wiLi4vLi4vY2xpZW50cy9zdHNcIjo5LFwiLi4vY29yZVwiOjE5fV0sMjY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi4vY29yZVwiKSxpPWUoXCIuLi8uLi9jbGllbnRzL3N0c1wiKTtuLldlYklkZW50aXR5Q3JlZGVudGlhbHM9bi51dGlsLmluaGVyaXQobi5DcmVkZW50aWFscyx7Y29uc3RydWN0b3I6ZnVuY3Rpb24oZSx0KXtuLkNyZWRlbnRpYWxzLmNhbGwodGhpcyksdGhpcy5leHBpcmVkPSEwLHRoaXMucGFyYW1zPWUsdGhpcy5wYXJhbXMuUm9sZVNlc3Npb25OYW1lPXRoaXMucGFyYW1zLlJvbGVTZXNzaW9uTmFtZXx8XCJ3ZWItaWRlbnRpdHlcIix0aGlzLmRhdGE9bnVsbCx0aGlzLl9jbGllbnRDb25maWc9bi51dGlsLmNvcHkodHx8e30pfSxyZWZyZXNoOmZ1bmN0aW9uKGUpe3RoaXMuY29hbGVzY2VSZWZyZXNoKGV8fG4udXRpbC5mbi5jYWxsYmFjayl9LGxvYWQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0LmNyZWF0ZUNsaWVudHMoKSx0LnNlcnZpY2UuYXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eShmdW5jdGlvbihyLG4pe3QuZGF0YT1udWxsLHJ8fCh0LmRhdGE9bix0LnNlcnZpY2UuY3JlZGVudGlhbHNGcm9tKG4sdCkpLGUocil9KX0sY3JlYXRlQ2xpZW50czpmdW5jdGlvbigpe2lmKCF0aGlzLnNlcnZpY2Upe3ZhciBlPW4udXRpbC5tZXJnZSh7fSx0aGlzLl9jbGllbnRDb25maWcpO2UucGFyYW1zPXRoaXMucGFyYW1zLHRoaXMuc2VydmljZT1uZXcgaShlKX19fSl9LHtcIi4uLy4uL2NsaWVudHMvc3RzXCI6OSxcIi4uL2NvcmVcIjoxOX1dLDI3OltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKHIpe2Z1bmN0aW9uIG4oZSl7dmFyIHQ9ZS5zZXJ2aWNlLHI9dC5hcGl8fHt9LG49e307cmV0dXJuIHQuY29uZmlnLnJlZ2lvbiYmKG4ucmVnaW9uPXQuY29uZmlnLnJlZ2lvbiksci5zZXJ2aWNlSWQmJihuLnNlcnZpY2VJZD1yLnNlcnZpY2VJZCksdC5jb25maWcuY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQmJihuLmFjY2Vzc0tleUlkPXQuY29uZmlnLmNyZWRlbnRpYWxzLmFjY2Vzc0tleUlkKSxufWZ1bmN0aW9uIGkoZSx0LHIpe3ImJnZvaWQgMCE9PXQmJm51bGwhPT10JiZcInN0cnVjdHVyZVwiPT09ci50eXBlJiZyLnJlcXVpcmVkJiZyLnJlcXVpcmVkLmxlbmd0aD4wJiZtLmFycmF5RWFjaChyLnJlcXVpcmVkLGZ1bmN0aW9uKG4pe3ZhciBvPXIubWVtYmVyc1tuXTtpZighMD09PW8uZW5kcG9pbnREaXNjb3ZlcnlJZCl7dmFyIHM9by5pc0xvY2F0aW9uTmFtZT9vLm5hbWU6bjtlW3NdPVN0cmluZyh0W25dKX1lbHNlIGkoZSx0W25dLG8pfSl9ZnVuY3Rpb24gbyhlLHQpe3ZhciByPXt9O3JldHVybiBpKHIsZS5wYXJhbXMsdCkscn1mdW5jdGlvbiBzKGUpe3ZhciB0PWUuc2VydmljZSxyPXQuYXBpLGk9ci5vcGVyYXRpb25zP3Iub3BlcmF0aW9uc1tlLm9wZXJhdGlvbl06dm9pZCAwLHM9aT9pLmlucHV0OnZvaWQgMCxhPW8oZSxzKSxjPW4oZSk7T2JqZWN0LmtleXMoYSkubGVuZ3RoPjAmJihjPW0udXBkYXRlKGMsYSksaSYmKGMub3BlcmF0aW9uPWkubmFtZSkpO3ZhciBsPWQuZW5kcG9pbnRDYWNoZS5nZXQoYyk7aWYoIWx8fDEhPT1sLmxlbmd0aHx8XCJcIiE9PWxbMF0uQWRkcmVzcylpZihsJiZsLmxlbmd0aD4wKWUuaHR0cFJlcXVlc3QudXBkYXRlRW5kcG9pbnQobFswXS5BZGRyZXNzKTtlbHNle3ZhciBwPXQubWFrZVJlcXVlc3Qoci5lbmRwb2ludE9wZXJhdGlvbix7T3BlcmF0aW9uOmkubmFtZSxJZGVudGlmaWVyczphfSk7dShwKSxwLnJlbW92ZUxpc3RlbmVyKFwidmFsaWRhdGVcIixkLkV2ZW50TGlzdGVuZXJzLkNvcmUuVkFMSURBVEVfUEFSQU1FVEVSUykscC5yZW1vdmVMaXN0ZW5lcihcInJldHJ5XCIsZC5FdmVudExpc3RlbmVycy5Db3JlLlJFVFJZX0NIRUNLKSxkLmVuZHBvaW50Q2FjaGUucHV0KGMsW3tBZGRyZXNzOlwiXCIsQ2FjaGVQZXJpb2RJbk1pbnV0ZXM6MX1dKSxwLnNlbmQoZnVuY3Rpb24oZSx0KXt0JiZ0LkVuZHBvaW50cz9kLmVuZHBvaW50Q2FjaGUucHV0KGMsdC5FbmRwb2ludHMpOmUmJmQuZW5kcG9pbnRDYWNoZS5wdXQoYyxbe0FkZHJlc3M6XCJcIixDYWNoZVBlcmlvZEluTWludXRlczoxfV0pfSl9fWZ1bmN0aW9uIGEoZSx0KXt2YXIgcj1lLnNlcnZpY2UsaT1yLmFwaSxzPWkub3BlcmF0aW9ucz9pLm9wZXJhdGlvbnNbZS5vcGVyYXRpb25dOnZvaWQgMCxhPXM/cy5pbnB1dDp2b2lkIDAsYz1vKGUsYSksbD1uKGUpO09iamVjdC5rZXlzKGMpLmxlbmd0aD4wJiYobD1tLnVwZGF0ZShsLGMpLHMmJihsLm9wZXJhdGlvbj1zLm5hbWUpKTt2YXIgcD1kLkVuZHBvaW50Q2FjaGUuZ2V0S2V5U3RyaW5nKGwpLGg9ZC5lbmRwb2ludENhY2hlLmdldChwKTtpZihoJiYxPT09aC5sZW5ndGgmJlwiXCI9PT1oWzBdLkFkZHJlc3MpcmV0dXJuIHlbcF18fCh5W3BdPVtdKSx2b2lkIHlbcF0ucHVzaCh7cmVxdWVzdDplLGNhbGxiYWNrOnR9KTtpZihoJiZoLmxlbmd0aD4wKWUuaHR0cFJlcXVlc3QudXBkYXRlRW5kcG9pbnQoaFswXS5BZGRyZXNzKSx0KCk7ZWxzZXt2YXIgZj1yLm1ha2VSZXF1ZXN0KGkuZW5kcG9pbnRPcGVyYXRpb24se09wZXJhdGlvbjpzLm5hbWUsSWRlbnRpZmllcnM6Y30pO2YucmVtb3ZlTGlzdGVuZXIoXCJ2YWxpZGF0ZVwiLGQuRXZlbnRMaXN0ZW5lcnMuQ29yZS5WQUxJREFURV9QQVJBTUVURVJTKSx1KGYpLGQuZW5kcG9pbnRDYWNoZS5wdXQocCxbe0FkZHJlc3M6XCJcIixDYWNoZVBlcmlvZEluTWludXRlczo2MH1dKSxmLnNlbmQoZnVuY3Rpb24ocixuKXtpZihyKXt2YXIgaT17Y29kZTpcIkVuZHBvaW50RGlzY292ZXJ5RXhjZXB0aW9uXCIsbWVzc2FnZTpcIlJlcXVlc3QgY2Fubm90IGJlIGZ1bGZpbGxlZCB3aXRob3V0IHNwZWNpZnlpbmcgYW4gZW5kcG9pbnRcIixyZXRyeWFibGU6ITF9O2lmKGUucmVzcG9uc2UuZXJyb3I9bS5lcnJvcihyLGkpLGQuZW5kcG9pbnRDYWNoZS5yZW1vdmUobCkseVtwXSl7dmFyIG89eVtwXTttLmFycmF5RWFjaChvLGZ1bmN0aW9uKGUpe2UucmVxdWVzdC5yZXNwb25zZS5lcnJvcj1tLmVycm9yKHIsaSksZS5jYWxsYmFjaygpfSksZGVsZXRlIHlbcF19fWVsc2UgaWYobiYmKGQuZW5kcG9pbnRDYWNoZS5wdXQocCxuLkVuZHBvaW50cyksZS5odHRwUmVxdWVzdC51cGRhdGVFbmRwb2ludChuLkVuZHBvaW50c1swXS5BZGRyZXNzKSx5W3BdKSl7dmFyIG89eVtwXTttLmFycmF5RWFjaChvLGZ1bmN0aW9uKGUpe2UucmVxdWVzdC5odHRwUmVxdWVzdC51cGRhdGVFbmRwb2ludChuLkVuZHBvaW50c1swXS5BZGRyZXNzKSxlLmNhbGxiYWNrKCl9KSxkZWxldGUgeVtwXX10KCl9KX19ZnVuY3Rpb24gdShlKXt2YXIgdD1lLnNlcnZpY2UuYXBpLHI9dC5hcGlWZXJzaW9uO3ImJiFlLmh0dHBSZXF1ZXN0LmhlYWRlcnNbXCJ4LWFtei1hcGktdmVyc2lvblwiXSYmKGUuaHR0cFJlcXVlc3QuaGVhZGVyc1tcIngtYW16LWFwaS12ZXJzaW9uXCJdPXIpfWZ1bmN0aW9uIGMoZSl7dmFyIHQ9ZS5lcnJvcixyPWUuaHR0cFJlc3BvbnNlO2lmKHQmJihcIkludmFsaWRFbmRwb2ludEV4Y2VwdGlvblwiPT09dC5jb2RlfHw0MjE9PT1yLnN0YXR1c0NvZGUpKXt2YXIgaT1lLnJlcXVlc3Qscz1pLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnN8fHt9LGE9c1tpLm9wZXJhdGlvbl0/c1tpLm9wZXJhdGlvbl0uaW5wdXQ6dm9pZCAwLHU9byhpLGEpLGM9bihpKTtPYmplY3Qua2V5cyh1KS5sZW5ndGg+MCYmKGM9bS51cGRhdGUoYyx1KSxzW2kub3BlcmF0aW9uXSYmKGMub3BlcmF0aW9uPXNbaS5vcGVyYXRpb25dLm5hbWUpKSxkLmVuZHBvaW50Q2FjaGUucmVtb3ZlKGMpfX1mdW5jdGlvbiBsKGUpe2lmKGUuX29yaWdpbmFsQ29uZmlnJiZlLl9vcmlnaW5hbENvbmZpZy5lbmRwb2ludCYmITA9PT1lLl9vcmlnaW5hbENvbmZpZy5lbmRwb2ludERpc2NvdmVyeUVuYWJsZWQpdGhyb3cgbS5lcnJvcihuZXcgRXJyb3Ise2NvZGU6XCJDb25maWd1cmF0aW9uRXhjZXB0aW9uXCIsbWVzc2FnZTpcIkN1c3RvbSBlbmRwb2ludCBpcyBzdXBwbGllZDsgZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkIG11c3Qgbm90IGJlIHRydWUuXCJ9KTt2YXIgdD1kLmNvbmZpZ1tlLnNlcnZpY2VJZGVudGlmaWVyXXx8e307cmV0dXJuIEJvb2xlYW4oZC5jb25maWcuZW5kcG9pbnR8fHQuZW5kcG9pbnR8fGUuX29yaWdpbmFsQ29uZmlnJiZlLl9vcmlnaW5hbENvbmZpZy5lbmRwb2ludCl9ZnVuY3Rpb24gcChlKXtyZXR1cm5bXCJmYWxzZVwiLFwiMFwiXS5pbmRleE9mKGUpPj0wfWZ1bmN0aW9uIGgoZSl7aWYoITA9PT0oZS5zZXJ2aWNlfHx7fSkuY29uZmlnLmVuZHBvaW50RGlzY292ZXJ5RW5hYmxlZClyZXR1cm4hMDtpZihtLmlzQnJvd3NlcigpKXJldHVybiExO2Zvcih2YXIgdD0wO3Q8di5sZW5ndGg7dCsrKXt2YXIgbj12W3RdO2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyLmVudixuKSl7aWYoXCJcIj09PXIuZW52W25dfHx2b2lkIDA9PT1yLmVudltuXSl0aHJvdyBtLmVycm9yKG5ldyBFcnJvcix7Y29kZTpcIkNvbmZpZ3VyYXRpb25FeGNlcHRpb25cIixtZXNzYWdlOlwiZW52aXJvbm1lbnRhbCB2YXJpYWJsZSBcIituK1wiIGNhbm5vdCBiZSBzZXQgdG8gbm90aGluZ1wifSk7aWYoIXAoci5lbnZbbl0pKXJldHVybiEwfX12YXIgaT17fTt0cnl7aT1kLnV0aWwuaW5pTG9hZGVyP2QudXRpbC5pbmlMb2FkZXIubG9hZEZyb20oe2lzQ29uZmlnOiEwLGZpbGVuYW1lOnIuZW52W2QudXRpbC5zaGFyZWRDb25maWdGaWxlRW52XX0pOnt9fWNhdGNoKGUpe312YXIgbz1pW3IuZW52LkFXU19QUk9GSUxFfHxkLnV0aWwuZGVmYXVsdFByb2ZpbGVdfHx7fTtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobyxcImVuZHBvaW50X2Rpc2NvdmVyeV9lbmFibGVkXCIpKXtpZih2b2lkIDA9PT1vLmVuZHBvaW50X2Rpc2NvdmVyeV9lbmFibGVkKXRocm93IG0uZXJyb3IobmV3IEVycm9yLHtjb2RlOlwiQ29uZmlndXJhdGlvbkV4Y2VwdGlvblwiLG1lc3NhZ2U6XCJjb25maWcgZmlsZSBlbnRyeSAnZW5kcG9pbnRfZGlzY292ZXJ5X2VuYWJsZWQnIGNhbm5vdCBiZSBzZXQgdG8gbm90aGluZ1wifSk7aWYoIXAoby5lbmRwb2ludF9kaXNjb3ZlcnlfZW5hYmxlZCkpcmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gZihlLHQpe3ZhciByPWUuc2VydmljZXx8e307aWYobChyKXx8ZS5pc1ByZXNpZ25lZCgpKXJldHVybiB0KCk7aWYoIWgoZSkpcmV0dXJuIHQoKTtlLmh0dHBSZXF1ZXN0LmFwcGVuZFRvVXNlckFnZW50KFwiZW5kcG9pbnQtZGlzY292ZXJ5XCIpO3ZhciBuPXIuYXBpLm9wZXJhdGlvbnN8fHt9LGk9bltlLm9wZXJhdGlvbl07c3dpdGNoKGk/aS5lbmRwb2ludERpc2NvdmVyeVJlcXVpcmVkOlwiTlVMTFwiKXtjYXNlXCJPUFRJT05BTFwiOnMoZSksZS5hZGROYW1lZExpc3RlbmVyKFwiSU5WQUxJREFURV9DQUNIRURfRU5EUE9JTlRTXCIsXCJleHRyYWN0RXJyb3JcIixjKSx0KCk7YnJlYWs7Y2FzZVwiUkVRVUlSRURcIjplLmFkZE5hbWVkTGlzdGVuZXIoXCJJTlZBTElEQVRFX0NBQ0hFRF9FTkRQT0lOVFNcIixcImV4dHJhY3RFcnJvclwiLGMpLGEoZSx0KTticmVhaztjYXNlXCJOVUxMXCI6ZGVmYXVsdDp0KCl9fXZhciBkPWUoXCIuL2NvcmVcIiksbT1lKFwiLi91dGlsXCIpLHY9W1wiQVdTX0VOQUJMRV9FTkRQT0lOVF9ESVNDT1ZFUllcIixcIkFXU19FTkRQT0lOVF9ESVNDT1ZFUllfRU5BQkxFRFwiXSx5PXt9O3QuZXhwb3J0cz17ZGlzY292ZXJFbmRwb2ludDpmLHJlcXVpcmVkRGlzY292ZXJFbmRwb2ludDphLG9wdGlvbmFsRGlzY292ZXJFbmRwb2ludDpzLG1hcnNoYWxsQ3VzdG9tSWRlbnRpZmllcnM6byxnZXRDYWNoZUtleTpuLGludmFsaWRhdGVDYWNoZWRFbmRwb2ludDpjfX0pLmNhbGwodGhpcyxlKFwiX3Byb2Nlc3NcIikpfSx7XCIuL2NvcmVcIjoxOSxcIi4vdXRpbFwiOjcyLF9wcm9jZXNzOjg2fV0sMjg6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKGUsdCxyKXtmb3IodmFyIG49aShlKSxzPVtdLGE9MDthPG4ubGVuZ3RoO2ErKylzLnB1c2gobyh0LG5bYV0scikpO3JldHVybiBzfXZhciBpPWUoXCIuLi9ldmVudC1zdHJlYW0vZXZlbnQtbWVzc2FnZS1jaHVua2VyXCIpLmV2ZW50TWVzc2FnZUNodW5rZXIsbz1lKFwiLi9wYXJzZS1ldmVudFwiKS5wYXJzZUV2ZW50O3QuZXhwb3J0cz17Y3JlYXRlRXZlbnRTdHJlYW06bn19LHtcIi4uL2V2ZW50LXN0cmVhbS9ldmVudC1tZXNzYWdlLWNodW5rZXJcIjoyOSxcIi4vcGFyc2UtZXZlbnRcIjozMX1dLDI5OltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlKXtmb3IodmFyIHQ9W10scj0wO3I8ZS5sZW5ndGg7KXt2YXIgbj1lLnJlYWRJbnQzMkJFKHIpLGk9ZS5zbGljZShyLG4rcik7cis9bix0LnB1c2goaSl9cmV0dXJuIHR9dC5leHBvcnRzPXtldmVudE1lc3NhZ2VDaHVua2VyOm59fSx7fV0sMzA6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKGUpe2lmKDghPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJJbnQ2NCBidWZmZXJzIG11c3QgYmUgZXhhY3RseSA4IGJ5dGVzXCIpO28uQnVmZmVyLmlzQnVmZmVyKGUpfHwoZT1zKGUpKSx0aGlzLmJ5dGVzPWV9ZnVuY3Rpb24gaShlKXtmb3IodmFyIHQ9MDt0PDg7dCsrKWVbdF1ePTI1NTtmb3IodmFyIHQ9Nzt0Pi0xJiYwPT09KytlW3RdO3QtLSk7fXZhciBvPWUoXCIuLi9jb3JlXCIpLnV0aWwscz1vLmJ1ZmZlci50b0J1ZmZlcjtuLmZyb21OdW1iZXI9ZnVuY3Rpb24oZSl7aWYoZT4weDgwMDAwMDAwMDAwMDAwMDB8fGU8LTB4ODAwMDAwMDAwMDAwMDAwMCl0aHJvdyBuZXcgRXJyb3IoZStcIiBpcyB0b28gbGFyZ2UgKG9yLCBpZiBuZWdhdGl2ZSwgdG9vIHNtYWxsKSB0byByZXByZXNlbnQgYXMgYW4gSW50NjRcIik7Zm9yKHZhciB0PW5ldyBVaW50OEFycmF5KDgpLHI9NyxvPU1hdGguYWJzKE1hdGgucm91bmQoZSkpO3I+LTEmJm8+MDtyLS0sby89MjU2KXRbcl09bztyZXR1cm4gZTwwJiZpKHQpLG5ldyBuKHQpfSxuLnByb3RvdHlwZS52YWx1ZU9mPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5ieXRlcy5zbGljZSgwKSx0PTEyOCZlWzBdO3JldHVybiB0JiZpKGUpLHBhcnNlSW50KGUudG9TdHJpbmcoXCJoZXhcIiksMTYpKih0Py0xOjEpfSxuLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBTdHJpbmcodGhpcy52YWx1ZU9mKCkpfSx0LmV4cG9ydHM9e0ludDY0Om59fSx7XCIuLi9jb3JlXCI6MTl9XSwzMTpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oZSx0LHIpe3ZhciBuPW8odCkscz1uLmhlYWRlcnNbXCI6bWVzc2FnZS10eXBlXCJdO2lmKHMpe2lmKFwiZXJyb3JcIj09PXMudmFsdWUpdGhyb3cgaShuKTtpZihcImV2ZW50XCIhPT1zLnZhbHVlKXJldHVybn12YXIgYT1uLmhlYWRlcnNbXCI6ZXZlbnQtdHlwZVwiXSx1PXIubWVtYmVyc1thLnZhbHVlXTtpZih1KXt2YXIgYz17fSxsPXUuZXZlbnRQYXlsb2FkTWVtYmVyTmFtZTtpZihsKXt2YXIgcD11Lm1lbWJlcnNbbF07XCJiaW5hcnlcIj09PXAudHlwZT9jW2xdPW4uYm9keTpjW2xdPWUucGFyc2Uobi5ib2R5LnRvU3RyaW5nKCkscCl9Zm9yKHZhciBoPXUuZXZlbnRIZWFkZXJNZW1iZXJOYW1lcyxmPTA7ZjxoLmxlbmd0aDtmKyspe3ZhciBkPWhbZl07bi5oZWFkZXJzW2RdJiYoY1tkXT11Lm1lbWJlcnNbZF0udG9UeXBlKG4uaGVhZGVyc1tkXS52YWx1ZSkpfXZhciBtPXt9O3JldHVybiBtW2EudmFsdWVdPWMsbX19ZnVuY3Rpb24gaShlKXt2YXIgdD1lLmhlYWRlcnNbXCI6ZXJyb3ItY29kZVwiXSxyPWUuaGVhZGVyc1tcIjplcnJvci1tZXNzYWdlXCJdLG49bmV3IEVycm9yKHIudmFsdWV8fHIpO3JldHVybiBuLmNvZGU9bi5uYW1lPXQudmFsdWV8fHQsbn12YXIgbz1lKFwiLi9wYXJzZS1tZXNzYWdlXCIpLnBhcnNlTWVzc2FnZTt0LmV4cG9ydHM9e3BhcnNlRXZlbnQ6bn19LHtcIi4vcGFyc2UtbWVzc2FnZVwiOjMyfV0sMzI6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKGUpe2Zvcih2YXIgdD17fSxyPTA7cjxlLmxlbmd0aDspe3ZhciBuPWUucmVhZFVJbnQ4KHIrKyksaT1lLnNsaWNlKHIscituKS50b1N0cmluZygpO3N3aXRjaChyKz1uLGUucmVhZFVJbnQ4KHIrKykpe2Nhc2UgMDp0W2ldPXt0eXBlOmEsdmFsdWU6ITB9O2JyZWFrO2Nhc2UgMTp0W2ldPXt0eXBlOmEsdmFsdWU6ITF9O2JyZWFrO2Nhc2UgMjp0W2ldPXt0eXBlOnUsdmFsdWU6ZS5yZWFkSW50OChyKyspfTticmVhaztjYXNlIDM6dFtpXT17dHlwZTpjLHZhbHVlOmUucmVhZEludDE2QkUocil9LHIrPTI7YnJlYWs7Y2FzZSA0OnRbaV09e3R5cGU6bCx2YWx1ZTplLnJlYWRJbnQzMkJFKHIpfSxyKz00O2JyZWFrO2Nhc2UgNTp0W2ldPXt0eXBlOnAsdmFsdWU6bmV3IG8oZS5zbGljZShyLHIrOCkpfSxyKz04O2JyZWFrO2Nhc2UgNjp2YXIgcz1lLnJlYWRVSW50MTZCRShyKTtyKz0yLHRbaV09e3R5cGU6aCx2YWx1ZTplLnNsaWNlKHIscitzKX0scis9czticmVhaztjYXNlIDc6dmFyIHY9ZS5yZWFkVUludDE2QkUocik7cis9Mix0W2ldPXt0eXBlOmYsdmFsdWU6ZS5zbGljZShyLHIrdikudG9TdHJpbmcoKX0scis9djticmVhaztjYXNlIDg6dFtpXT17dHlwZTpkLHZhbHVlOm5ldyBEYXRlKG5ldyBvKGUuc2xpY2UocixyKzgpKS52YWx1ZU9mKCkpfSxyKz04O2JyZWFrO2Nhc2UgOTp2YXIgeT1lLnNsaWNlKHIscisxNikudG9TdHJpbmcoXCJoZXhcIik7cis9MTYsdFtpXT17dHlwZTptLHZhbHVlOnkuc3Vic3RyKDAsOCkrXCItXCIreS5zdWJzdHIoOCw0KStcIi1cIit5LnN1YnN0cigxMiw0KStcIi1cIit5LnN1YnN0cigxNiw0KStcIi1cIit5LnN1YnN0cigyMCl9O2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIGhlYWRlciB0eXBlIHRhZ1wiKX19cmV0dXJuIHR9ZnVuY3Rpb24gaShlKXt2YXIgdD1zKGUpO3JldHVybntoZWFkZXJzOm4odC5oZWFkZXJzKSxib2R5OnQuYm9keX19dmFyIG89ZShcIi4vaW50NjRcIikuSW50NjQscz1lKFwiLi9zcGxpdC1tZXNzYWdlXCIpLnNwbGl0TWVzc2FnZSxhPVwiYm9vbGVhblwiLHU9XCJieXRlXCIsYz1cInNob3J0XCIsbD1cImludGVnZXJcIixwPVwibG9uZ1wiLGg9XCJiaW5hcnlcIixmPVwic3RyaW5nXCIsZD1cInRpbWVzdGFtcFwiLG09XCJ1dWlkXCI7dC5leHBvcnRzPXtwYXJzZU1lc3NhZ2U6aX19LHtcIi4vaW50NjRcIjozMCxcIi4vc3BsaXQtbWVzc2FnZVwiOjMzfV0sMzM6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKGUpe2lmKGkuQnVmZmVyLmlzQnVmZmVyKGUpfHwoZT1vKGUpKSxlLmxlbmd0aDxjKXRocm93IG5ldyBFcnJvcihcIlByb3ZpZGVkIG1lc3NhZ2UgdG9vIHNob3J0IHRvIGFjY29tbW9kYXRlIGV2ZW50IHN0cmVhbSBtZXNzYWdlIG92ZXJoZWFkXCIpO2lmKGUubGVuZ3RoIT09ZS5yZWFkVUludDMyQkUoMCkpdGhyb3cgbmV3IEVycm9yKFwiUmVwb3J0ZWQgbWVzc2FnZSBsZW5ndGggZG9lcyBub3QgbWF0Y2ggcmVjZWl2ZWQgbWVzc2FnZSBsZW5ndGhcIik7dmFyIHQ9ZS5yZWFkVUludDMyQkUoYSk7aWYodCE9PWkuY3J5cHRvLmNyYzMyKGUuc2xpY2UoMCxhKSkpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHByZWx1ZGUgY2hlY2tzdW0gc3BlY2lmaWVkIGluIHRoZSBtZXNzYWdlIChcIit0K1wiKSBkb2VzIG5vdCBtYXRjaCB0aGUgY2FsY3VsYXRlZCBDUkMzMiBjaGVja3N1bS5cIik7dmFyIHI9ZS5yZWFkVUludDMyQkUoZS5sZW5ndGgtdSk7aWYociE9PWkuY3J5cHRvLmNyYzMyKGUuc2xpY2UoMCxlLmxlbmd0aC11KSkpdGhyb3cgbmV3IEVycm9yKFwiVGhlIG1lc3NhZ2UgY2hlY2tzdW0gZGlkIG5vdCBtYXRjaCB0aGUgZXhwZWN0ZWQgdmFsdWUgb2YgXCIrcik7dmFyIG49YSt1LGw9bitlLnJlYWRVSW50MzJCRShzKTtyZXR1cm57aGVhZGVyczplLnNsaWNlKG4sbCksYm9keTplLnNsaWNlKGwsZS5sZW5ndGgtdSl9fXZhciBpPWUoXCIuLi9jb3JlXCIpLnV0aWwsbz1pLmJ1ZmZlci50b0J1ZmZlcixzPTQsYT0yKnMsdT00LGM9YSsyKnU7dC5leHBvcnRzPXtzcGxpdE1lc3NhZ2U6bn19LHtcIi4uL2NvcmVcIjoxOX1dLDM0OltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlKXtpZighZS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zKXJldHVyblwiXCI7dmFyIHQ9ZS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW2Uub3BlcmF0aW9uXTtyZXR1cm4gdD90LmF1dGh0eXBlOlwiXCJ9dmFyIGk9ZShcIi4vY29yZVwiKSxvPWUoXCIuL3NlcXVlbnRpYWxfZXhlY3V0b3JcIikscz1lKFwiLi9kaXNjb3Zlcl9lbmRwb2ludFwiKS5kaXNjb3ZlckVuZHBvaW50O2kuRXZlbnRMaXN0ZW5lcnM9e0NvcmU6e319LGkuRXZlbnRMaXN0ZW5lcnM9e0NvcmU6KG5ldyBvKS5hZGROYW1lZExpc3RlbmVycyhmdW5jdGlvbihlLHQpe3QoXCJWQUxJREFURV9DUkVERU5USUFMU1wiLFwidmFsaWRhdGVcIixmdW5jdGlvbihlLHQpe2lmKCFlLnNlcnZpY2UuYXBpLnNpZ25hdHVyZVZlcnNpb24mJiFlLnNlcnZpY2UuY29uZmlnLnNpZ25hdHVyZVZlcnNpb24pcmV0dXJuIHQoKTtlLnNlcnZpY2UuY29uZmlnLmdldENyZWRlbnRpYWxzKGZ1bmN0aW9uKHIpe3ImJihlLnJlc3BvbnNlLmVycm9yPWkudXRpbC5lcnJvcihyLHtjb2RlOlwiQ3JlZGVudGlhbHNFcnJvclwiLG1lc3NhZ2U6XCJNaXNzaW5nIGNyZWRlbnRpYWxzIGluIGNvbmZpZ1wifSkpLHQoKX0pfSksZShcIlZBTElEQVRFX1JFR0lPTlwiLFwidmFsaWRhdGVcIixmdW5jdGlvbihlKXtlLnNlcnZpY2UuY29uZmlnLnJlZ2lvbnx8ZS5zZXJ2aWNlLmlzR2xvYmFsRW5kcG9pbnR8fChlLnJlc3BvbnNlLmVycm9yPWkudXRpbC5lcnJvcihuZXcgRXJyb3Ise2NvZGU6XCJDb25maWdFcnJvclwiLG1lc3NhZ2U6XCJNaXNzaW5nIHJlZ2lvbiBpbiBjb25maWdcIn0pKX0pLGUoXCJCVUlMRF9JREVNUE9URU5DWV9UT0tFTlNcIixcInZhbGlkYXRlXCIsZnVuY3Rpb24oZSl7aWYoZS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zKXt2YXIgdD1lLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbZS5vcGVyYXRpb25dO2lmKHQpe3ZhciByPXQuaWRlbXBvdGVudE1lbWJlcnM7aWYoci5sZW5ndGgpe2Zvcih2YXIgbj1pLnV0aWwuY29weShlLnBhcmFtcyksbz0wLHM9ci5sZW5ndGg7bzxzO28rKyluW3Jbb11dfHwobltyW29dXT1pLnV0aWwudXVpZC52NCgpKTtlLnBhcmFtcz1ufX19fSksZShcIlZBTElEQVRFX1BBUkFNRVRFUlNcIixcInZhbGlkYXRlXCIsZnVuY3Rpb24oZSl7aWYoZS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zKXt2YXIgdD1lLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbZS5vcGVyYXRpb25dLmlucHV0LHI9ZS5zZXJ2aWNlLmNvbmZpZy5wYXJhbVZhbGlkYXRpb247bmV3IGkuUGFyYW1WYWxpZGF0b3IocikudmFsaWRhdGUodCxlLnBhcmFtcyl9fSksdChcIkNPTVBVVEVfU0hBMjU2XCIsXCJhZnRlckJ1aWxkXCIsZnVuY3Rpb24oZSx0KXtpZihlLmhhbHRIYW5kbGVyc09uRXJyb3IoKSxlLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnMpe3ZhciByPWUuc2VydmljZS5hcGkub3BlcmF0aW9uc1tlLm9wZXJhdGlvbl0sbj1yP3IuYXV0aHR5cGU6XCJcIjtpZighZS5zZXJ2aWNlLmFwaS5zaWduYXR1cmVWZXJzaW9uJiYhbiYmIWUuc2VydmljZS5jb25maWcuc2lnbmF0dXJlVmVyc2lvbilyZXR1cm4gdCgpO2lmKGUuc2VydmljZS5nZXRTaWduZXJDbGFzcyhlKT09PWkuU2lnbmVycy5WNCl7dmFyIG89ZS5odHRwUmVxdWVzdC5ib2R5fHxcIlwiO2lmKG4uaW5kZXhPZihcInVuc2lnbmVkLWJvZHlcIik+PTApcmV0dXJuIGUuaHR0cFJlcXVlc3QuaGVhZGVyc1tcIlgtQW16LUNvbnRlbnQtU2hhMjU2XCJdPVwiVU5TSUdORUQtUEFZTE9BRFwiLHQoKTtpLnV0aWwuY29tcHV0ZVNoYTI1NihvLGZ1bmN0aW9uKHIsbil7cj90KHIpOihlLmh0dHBSZXF1ZXN0LmhlYWRlcnNbXCJYLUFtei1Db250ZW50LVNoYTI1NlwiXT1uLHQoKSl9KX1lbHNlIHQoKX19KSxlKFwiU0VUX0NPTlRFTlRfTEVOR1RIXCIsXCJhZnRlckJ1aWxkXCIsZnVuY3Rpb24oZSl7dmFyIHQ9bihlKSxyPWkudXRpbC5nZXRSZXF1ZXN0UGF5bG9hZFNoYXBlKGUpO2lmKHZvaWQgMD09PWUuaHR0cFJlcXVlc3QuaGVhZGVyc1tcIkNvbnRlbnQtTGVuZ3RoXCJdKXRyeXt2YXIgbz1pLnV0aWwuc3RyaW5nLmJ5dGVMZW5ndGgoZS5odHRwUmVxdWVzdC5ib2R5KTtlLmh0dHBSZXF1ZXN0LmhlYWRlcnNbXCJDb250ZW50LUxlbmd0aFwiXT1vfWNhdGNoKG4pe2lmKHImJnIuaXNTdHJlYW1pbmcpe2lmKHIucmVxdWlyZXNMZW5ndGgpdGhyb3cgbjtpZih0LmluZGV4T2YoXCJ1bnNpZ25lZC1ib2R5XCIpPj0wKXJldHVybiB2b2lkKGUuaHR0cFJlcXVlc3QuaGVhZGVyc1tcIlRyYW5zZmVyLUVuY29kaW5nXCJdPVwiY2h1bmtlZFwiKTt0aHJvdyBufXRocm93IG59fSksZShcIlNFVF9IVFRQX0hPU1RcIixcImFmdGVyQnVpbGRcIixmdW5jdGlvbihlKXtlLmh0dHBSZXF1ZXN0LmhlYWRlcnMuSG9zdD1lLmh0dHBSZXF1ZXN0LmVuZHBvaW50Lmhvc3R9KSxlKFwiUkVTVEFSVFwiLFwicmVzdGFydFwiLGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yZXNwb25zZS5lcnJvcjtlJiZlLnJldHJ5YWJsZSYmKHRoaXMuaHR0cFJlcXVlc3Q9bmV3IGkuSHR0cFJlcXVlc3QodGhpcy5zZXJ2aWNlLmVuZHBvaW50LHRoaXMuc2VydmljZS5yZWdpb24pLHRoaXMucmVzcG9uc2UucmV0cnlDb3VudDx0aGlzLnNlcnZpY2UuY29uZmlnLm1heFJldHJpZXM/dGhpcy5yZXNwb25zZS5yZXRyeUNvdW50Kys6dGhpcy5yZXNwb25zZS5lcnJvcj1udWxsKX0pO3QoXCJESVNDT1ZFUl9FTkRQT0lOVFwiLFwic2lnblwiLHMsITApLHQoXCJTSUdOXCIsXCJzaWduXCIsZnVuY3Rpb24oZSx0KXt2YXIgcj1lLnNlcnZpY2Usbj1lLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnN8fHt9LGk9bltlLm9wZXJhdGlvbl0sbz1pP2kuYXV0aHR5cGU6XCJcIjtpZighci5hcGkuc2lnbmF0dXJlVmVyc2lvbiYmIW8mJiFyLmNvbmZpZy5zaWduYXR1cmVWZXJzaW9uKXJldHVybiB0KCk7ci5jb25maWcuZ2V0Q3JlZGVudGlhbHMoZnVuY3Rpb24obixvKXtpZihuKXJldHVybiBlLnJlc3BvbnNlLmVycm9yPW4sdCgpO3RyeXt2YXIgcz1yLmdldFNrZXdDb3JyZWN0ZWREYXRlKCksYT1yLmdldFNpZ25lckNsYXNzKGUpLHU9bmV3IGEoZS5odHRwUmVxdWVzdCxyLmFwaS5zaWduaW5nTmFtZXx8ci5hcGkuZW5kcG9pbnRQcmVmaXgse3NpZ25hdHVyZUNhY2hlOnIuY29uZmlnLnNpZ25hdHVyZUNhY2hlLG9wZXJhdGlvbjppLHNpZ25hdHVyZVZlcnNpb246ci5hcGkuc2lnbmF0dXJlVmVyc2lvbn0pO3Uuc2V0U2VydmljZUNsaWVudElkKHIuX2NsaWVudElkKSxkZWxldGUgZS5odHRwUmVxdWVzdC5oZWFkZXJzLkF1dGhvcml6YXRpb24sZGVsZXRlIGUuaHR0cFJlcXVlc3QuaGVhZGVycy5EYXRlLGRlbGV0ZSBlLmh0dHBSZXF1ZXN0LmhlYWRlcnNbXCJYLUFtei1EYXRlXCJdLHUuYWRkQXV0aG9yaXphdGlvbihvLHMpLGUuc2lnbmVkQXQ9c31jYXRjaCh0KXtlLnJlc3BvbnNlLmVycm9yPXR9dCgpfSl9KSxlKFwiVkFMSURBVEVfUkVTUE9OU0VcIixcInZhbGlkYXRlUmVzcG9uc2VcIixmdW5jdGlvbihlKXt0aGlzLnNlcnZpY2Uuc3VjY2Vzc2Z1bFJlc3BvbnNlKGUsdGhpcyk/KGUuZGF0YT17fSxlLmVycm9yPW51bGwpOihlLmRhdGE9bnVsbCxlLmVycm9yPWkudXRpbC5lcnJvcihuZXcgRXJyb3Ise2NvZGU6XCJVbmtub3duRXJyb3JcIixtZXNzYWdlOlwiQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZC5cIn0pKX0pLHQoXCJTRU5EXCIsXCJzZW5kXCIsZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKHIpe2UuaHR0cFJlc3BvbnNlLnN0cmVhbT1yO3ZhciBuPWUucmVxdWVzdC5odHRwUmVxdWVzdC5zdHJlYW0sbz1lLnJlcXVlc3Quc2VydmljZSxzPW8uYXBpLGE9ZS5yZXF1ZXN0Lm9wZXJhdGlvbix1PXMub3BlcmF0aW9uc1thXXx8e307ci5vbihcImhlYWRlcnNcIixmdW5jdGlvbihuLHMsYSl7aWYoZS5yZXF1ZXN0LmVtaXQoXCJodHRwSGVhZGVyc1wiLFtuLHMsZSxhXSksIWUuaHR0cFJlc3BvbnNlLnN0cmVhbWluZylpZigyPT09aS5IdHRwQ2xpZW50LnN0cmVhbXNBcGlWZXJzaW9uKXtpZih1Lmhhc0V2ZW50T3V0cHV0JiZvLnN1Y2Nlc3NmdWxSZXNwb25zZShlKSlyZXR1cm4gZS5yZXF1ZXN0LmVtaXQoXCJodHRwRG9uZVwiKSx2b2lkIHQoKTtyLm9uKFwicmVhZGFibGVcIixmdW5jdGlvbigpe3ZhciB0PXIucmVhZCgpO251bGwhPT10JiZlLnJlcXVlc3QuZW1pdChcImh0dHBEYXRhXCIsW3QsZV0pfSl9ZWxzZSByLm9uKFwiZGF0YVwiLGZ1bmN0aW9uKHQpe2UucmVxdWVzdC5lbWl0KFwiaHR0cERhdGFcIixbdCxlXSl9KX0pLHIub24oXCJlbmRcIixmdW5jdGlvbigpe2lmKCFufHwhbi5kaWRDYWxsYmFjayl7aWYoMj09PWkuSHR0cENsaWVudC5zdHJlYW1zQXBpVmVyc2lvbiYmdS5oYXNFdmVudE91dHB1dCYmby5zdWNjZXNzZnVsUmVzcG9uc2UoZSkpcmV0dXJuO2UucmVxdWVzdC5lbWl0KFwiaHR0cERvbmVcIiksdCgpfX0pfWZ1bmN0aW9uIG4odCl7dC5vbihcInNlbmRQcm9ncmVzc1wiLGZ1bmN0aW9uKHQpe2UucmVxdWVzdC5lbWl0KFwiaHR0cFVwbG9hZFByb2dyZXNzXCIsW3QsZV0pfSksdC5vbihcInJlY2VpdmVQcm9ncmVzc1wiLGZ1bmN0aW9uKHQpe2UucmVxdWVzdC5lbWl0KFwiaHR0cERvd25sb2FkUHJvZ3Jlc3NcIixbdCxlXSl9KX1mdW5jdGlvbiBvKHIpe2lmKFwiUmVxdWVzdEFib3J0ZWRFcnJvclwiIT09ci5jb2RlKXt2YXIgbj1cIlRpbWVvdXRFcnJvclwiPT09ci5jb2RlP3IuY29kZTpcIk5ldHdvcmtpbmdFcnJvclwiO3I9aS51dGlsLmVycm9yKHIse2NvZGU6bixyZWdpb246ZS5yZXF1ZXN0Lmh0dHBSZXF1ZXN0LnJlZ2lvbixob3N0bmFtZTplLnJlcXVlc3QuaHR0cFJlcXVlc3QuZW5kcG9pbnQuaG9zdG5hbWUscmV0cnlhYmxlOiEwfSl9ZS5lcnJvcj1yLGUucmVxdWVzdC5lbWl0KFwiaHR0cEVycm9yXCIsW2UuZXJyb3IsZV0sZnVuY3Rpb24oKXt0KCl9KX1mdW5jdGlvbiBzKCl7dmFyIHQ9aS5IdHRwQ2xpZW50LmdldEluc3RhbmNlKCkscz1lLnJlcXVlc3Quc2VydmljZS5jb25maWcuaHR0cE9wdGlvbnN8fHt9O3RyeXtuKHQuaGFuZGxlUmVxdWVzdChlLnJlcXVlc3QuaHR0cFJlcXVlc3QscyxyLG8pKX1jYXRjaChlKXtvKGUpfX1lLmh0dHBSZXNwb25zZS5fYWJvcnRDYWxsYmFjaz10LGUuZXJyb3I9bnVsbCxlLmRhdGE9bnVsbCwoZS5yZXF1ZXN0LnNlcnZpY2UuZ2V0U2tld0NvcnJlY3RlZERhdGUoKS10aGlzLnNpZ25lZEF0KS8xZTM+PTYwMD90aGlzLmVtaXQoXCJzaWduXCIsW3RoaXNdLGZ1bmN0aW9uKGUpe1xuZT90KGUpOnMoKX0pOnMoKX0pLGUoXCJIVFRQX0hFQURFUlNcIixcImh0dHBIZWFkZXJzXCIsZnVuY3Rpb24oZSx0LHIsbil7ci5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZT1lLHIuaHR0cFJlc3BvbnNlLnN0YXR1c01lc3NhZ2U9bixyLmh0dHBSZXNwb25zZS5oZWFkZXJzPXQsci5odHRwUmVzcG9uc2UuYm9keT1pLnV0aWwuYnVmZmVyLnRvQnVmZmVyKFwiXCIpLHIuaHR0cFJlc3BvbnNlLmJ1ZmZlcnM9W10sci5odHRwUmVzcG9uc2UubnVtQnl0ZXM9MDt2YXIgbz10LmRhdGV8fHQuRGF0ZSxzPXIucmVxdWVzdC5zZXJ2aWNlO2lmKG8pe3ZhciBhPURhdGUucGFyc2Uobyk7cy5jb25maWcuY29ycmVjdENsb2NrU2tldyYmcy5pc0Nsb2NrU2tld2VkKGEpJiZzLmFwcGx5Q2xvY2tPZmZzZXQoYSl9fSksZShcIkhUVFBfREFUQVwiLFwiaHR0cERhdGFcIixmdW5jdGlvbihlLHQpe2lmKGUpe2lmKGkudXRpbC5pc05vZGUoKSl7dC5odHRwUmVzcG9uc2UubnVtQnl0ZXMrPWUubGVuZ3RoO3ZhciByPXQuaHR0cFJlc3BvbnNlLmhlYWRlcnNbXCJjb250ZW50LWxlbmd0aFwiXSxuPXtsb2FkZWQ6dC5odHRwUmVzcG9uc2UubnVtQnl0ZXMsdG90YWw6cn07dC5yZXF1ZXN0LmVtaXQoXCJodHRwRG93bmxvYWRQcm9ncmVzc1wiLFtuLHRdKX10Lmh0dHBSZXNwb25zZS5idWZmZXJzLnB1c2goaS51dGlsLmJ1ZmZlci50b0J1ZmZlcihlKSl9fSksZShcIkhUVFBfRE9ORVwiLFwiaHR0cERvbmVcIixmdW5jdGlvbihlKXtpZihlLmh0dHBSZXNwb25zZS5idWZmZXJzJiZlLmh0dHBSZXNwb25zZS5idWZmZXJzLmxlbmd0aD4wKXt2YXIgdD1pLnV0aWwuYnVmZmVyLmNvbmNhdChlLmh0dHBSZXNwb25zZS5idWZmZXJzKTtlLmh0dHBSZXNwb25zZS5ib2R5PXR9ZGVsZXRlIGUuaHR0cFJlc3BvbnNlLm51bUJ5dGVzLGRlbGV0ZSBlLmh0dHBSZXNwb25zZS5idWZmZXJzfSksZShcIkZJTkFMSVpFX0VSUk9SXCIsXCJyZXRyeVwiLGZ1bmN0aW9uKGUpe2UuaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUmJihlLmVycm9yLnN0YXR1c0NvZGU9ZS5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSx2b2lkIDA9PT1lLmVycm9yLnJldHJ5YWJsZSYmKGUuZXJyb3IucmV0cnlhYmxlPXRoaXMuc2VydmljZS5yZXRyeWFibGVFcnJvcihlLmVycm9yLHRoaXMpKSl9KSxlKFwiSU5WQUxJREFURV9DUkVERU5USUFMU1wiLFwicmV0cnlcIixmdW5jdGlvbihlKXtpZihlLmVycm9yKXN3aXRjaChlLmVycm9yLmNvZGUpe2Nhc2VcIlJlcXVlc3RFeHBpcmVkXCI6Y2FzZVwiRXhwaXJlZFRva2VuRXhjZXB0aW9uXCI6Y2FzZVwiRXhwaXJlZFRva2VuXCI6ZS5lcnJvci5yZXRyeWFibGU9ITAsZS5yZXF1ZXN0LnNlcnZpY2UuY29uZmlnLmNyZWRlbnRpYWxzLmV4cGlyZWQ9ITB9fSksZShcIkVYUElSRURfU0lHTkFUVVJFXCIsXCJyZXRyeVwiLGZ1bmN0aW9uKGUpe3ZhciB0PWUuZXJyb3I7dCYmXCJzdHJpbmdcIj09dHlwZW9mIHQuY29kZSYmXCJzdHJpbmdcIj09dHlwZW9mIHQubWVzc2FnZSYmdC5jb2RlLm1hdGNoKC9TaWduYXR1cmUvKSYmdC5tZXNzYWdlLm1hdGNoKC9leHBpcmVkLykmJihlLmVycm9yLnJldHJ5YWJsZT0hMCl9KSxlKFwiQ0xPQ0tfU0tFV0VEXCIsXCJyZXRyeVwiLGZ1bmN0aW9uKGUpe2UuZXJyb3ImJnRoaXMuc2VydmljZS5jbG9ja1NrZXdFcnJvcihlLmVycm9yKSYmdGhpcy5zZXJ2aWNlLmNvbmZpZy5jb3JyZWN0Q2xvY2tTa2V3JiYoZS5lcnJvci5yZXRyeWFibGU9ITApfSksZShcIlJFRElSRUNUXCIsXCJyZXRyeVwiLGZ1bmN0aW9uKGUpe2UuZXJyb3ImJmUuZXJyb3Iuc3RhdHVzQ29kZT49MzAwJiZlLmVycm9yLnN0YXR1c0NvZGU8NDAwJiZlLmh0dHBSZXNwb25zZS5oZWFkZXJzLmxvY2F0aW9uJiYodGhpcy5odHRwUmVxdWVzdC5lbmRwb2ludD1uZXcgaS5FbmRwb2ludChlLmh0dHBSZXNwb25zZS5oZWFkZXJzLmxvY2F0aW9uKSx0aGlzLmh0dHBSZXF1ZXN0LmhlYWRlcnMuSG9zdD10aGlzLmh0dHBSZXF1ZXN0LmVuZHBvaW50Lmhvc3QsZS5lcnJvci5yZWRpcmVjdD0hMCxlLmVycm9yLnJldHJ5YWJsZT0hMCl9KSxlKFwiUkVUUllfQ0hFQ0tcIixcInJldHJ5XCIsZnVuY3Rpb24oZSl7ZS5lcnJvciYmKGUuZXJyb3IucmVkaXJlY3QmJmUucmVkaXJlY3RDb3VudDxlLm1heFJlZGlyZWN0cz9lLmVycm9yLnJldHJ5RGVsYXk9MDplLnJldHJ5Q291bnQ8ZS5tYXhSZXRyaWVzJiYoZS5lcnJvci5yZXRyeURlbGF5PXRoaXMuc2VydmljZS5yZXRyeURlbGF5cyhlLnJldHJ5Q291bnQsZS5lcnJvcil8fDApKX0pLHQoXCJSRVNFVF9SRVRSWV9TVEFURVwiLFwiYWZ0ZXJSZXRyeVwiLGZ1bmN0aW9uKGUsdCl7dmFyIHIsbj0hMTtlLmVycm9yJiYocj1lLmVycm9yLnJldHJ5RGVsYXl8fDAsZS5lcnJvci5yZXRyeWFibGUmJmUucmV0cnlDb3VudDxlLm1heFJldHJpZXM/KGUucmV0cnlDb3VudCsrLG49ITApOmUuZXJyb3IucmVkaXJlY3QmJmUucmVkaXJlY3RDb3VudDxlLm1heFJlZGlyZWN0cyYmKGUucmVkaXJlY3RDb3VudCsrLG49ITApKSxuJiZyPj0wPyhlLmVycm9yPW51bGwsc2V0VGltZW91dCh0LHIpKTp0KCl9KX0pLENvcmVQb3N0OihuZXcgbykuYWRkTmFtZWRMaXN0ZW5lcnMoZnVuY3Rpb24oZSl7ZShcIkVYVFJBQ1RfUkVRVUVTVF9JRFwiLFwiZXh0cmFjdERhdGFcIixpLnV0aWwuZXh0cmFjdFJlcXVlc3RJZCksZShcIkVYVFJBQ1RfUkVRVUVTVF9JRFwiLFwiZXh0cmFjdEVycm9yXCIsaS51dGlsLmV4dHJhY3RSZXF1ZXN0SWQpLGUoXCJFTk9URk9VTkRfRVJST1JcIixcImh0dHBFcnJvclwiLGZ1bmN0aW9uKGUpe2lmKFwiTmV0d29ya2luZ0Vycm9yXCI9PT1lLmNvZGUmJlwiRU5PVEZPVU5EXCI9PT1lLmVycm5vKXt2YXIgdD1cIkluYWNjZXNzaWJsZSBob3N0OiBgXCIrZS5ob3N0bmFtZStcIicuIFRoaXMgc2VydmljZSBtYXkgbm90IGJlIGF2YWlsYWJsZSBpbiB0aGUgYFwiK2UucmVnaW9uK1wiJyByZWdpb24uXCI7dGhpcy5yZXNwb25zZS5lcnJvcj1pLnV0aWwuZXJyb3IobmV3IEVycm9yKHQpLHtjb2RlOlwiVW5rbm93bkVuZHBvaW50XCIscmVnaW9uOmUucmVnaW9uLGhvc3RuYW1lOmUuaG9zdG5hbWUscmV0cnlhYmxlOiEwLG9yaWdpbmFsRXJyb3I6ZX0pfX0pfSksTG9nZ2VyOihuZXcgbykuYWRkTmFtZWRMaXN0ZW5lcnMoZnVuY3Rpb24odCl7dChcIkxPR19SRVFVRVNUXCIsXCJjb21wbGV0ZVwiLGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIHIoZSx0KXtpZighdClyZXR1cm4gdDtzd2l0Y2goZS50eXBlKXtjYXNlXCJzdHJ1Y3R1cmVcIjp2YXIgbj17fTtyZXR1cm4gaS51dGlsLmVhY2godCxmdW5jdGlvbih0LGkpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLm1lbWJlcnMsdCk/blt0XT1yKGUubWVtYmVyc1t0XSxpKTpuW3RdPWl9KSxuO2Nhc2VcImxpc3RcIjp2YXIgbz1bXTtyZXR1cm4gaS51dGlsLmFycmF5RWFjaCh0LGZ1bmN0aW9uKHQsbil7by5wdXNoKHIoZS5tZW1iZXIsdCkpfSksbztjYXNlXCJtYXBcIjp2YXIgcz17fTtyZXR1cm4gaS51dGlsLmVhY2godCxmdW5jdGlvbih0LG4pe3NbdF09cihlLnZhbHVlLG4pfSkscztkZWZhdWx0OnJldHVybiBlLmlzU2Vuc2l0aXZlP1wiKioqU2Vuc2l0aXZlSW5mb3JtYXRpb24qKipcIjp0fX12YXIgbj10LnJlcXVlc3Qsbz1uLnNlcnZpY2UuY29uZmlnLmxvZ2dlcjtpZihvKXt2YXIgcz1mdW5jdGlvbigpe3ZhciBzPXQucmVxdWVzdC5zZXJ2aWNlLmdldFNrZXdDb3JyZWN0ZWREYXRlKCkuZ2V0VGltZSgpLGE9KHMtbi5zdGFydFRpbWUuZ2V0VGltZSgpKS8xZTMsdT0hIW8uaXNUVFksYz10Lmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlLGw9bi5wYXJhbXM7aWYobi5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zJiZuLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbbi5vcGVyYXRpb25dJiZuLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbbi5vcGVyYXRpb25dLmlucHV0KXtsPXIobi5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW24ub3BlcmF0aW9uXS5pbnB1dCxuLnBhcmFtcyl9dmFyIHA9ZShcInV0aWxcIikuaW5zcGVjdChsLCEwLG51bGwpLGg9XCJcIjtyZXR1cm4gdSYmKGgrPVwiXHUwMDFiWzMzbVwiKSxoKz1cIltBV1MgXCIrbi5zZXJ2aWNlLnNlcnZpY2VJZGVudGlmaWVyK1wiIFwiK2MsaCs9XCIgXCIrYS50b1N0cmluZygpK1wicyBcIit0LnJldHJ5Q291bnQrXCIgcmV0cmllc11cIix1JiYoaCs9XCJcdTAwMWJbMDsxbVwiKSxoKz1cIiBcIitpLnV0aWwuc3RyaW5nLmxvd2VyRmlyc3Qobi5vcGVyYXRpb24pLGgrPVwiKFwiK3ArXCIpXCIsdSYmKGgrPVwiXHUwMDFiWzBtXCIpLGh9KCk7XCJmdW5jdGlvblwiPT10eXBlb2Ygby5sb2c/by5sb2cocyk6XCJmdW5jdGlvblwiPT10eXBlb2Ygby53cml0ZSYmby53cml0ZShzK1wiXFxuXCIpfX0pfSksSnNvbjoobmV3IG8pLmFkZE5hbWVkTGlzdGVuZXJzKGZ1bmN0aW9uKHQpe3ZhciByPWUoXCIuL3Byb3RvY29sL2pzb25cIik7dChcIkJVSUxEXCIsXCJidWlsZFwiLHIuYnVpbGRSZXF1ZXN0KSx0KFwiRVhUUkFDVF9EQVRBXCIsXCJleHRyYWN0RGF0YVwiLHIuZXh0cmFjdERhdGEpLHQoXCJFWFRSQUNUX0VSUk9SXCIsXCJleHRyYWN0RXJyb3JcIixyLmV4dHJhY3RFcnJvcil9KSxSZXN0OihuZXcgbykuYWRkTmFtZWRMaXN0ZW5lcnMoZnVuY3Rpb24odCl7dmFyIHI9ZShcIi4vcHJvdG9jb2wvcmVzdFwiKTt0KFwiQlVJTERcIixcImJ1aWxkXCIsci5idWlsZFJlcXVlc3QpLHQoXCJFWFRSQUNUX0RBVEFcIixcImV4dHJhY3REYXRhXCIsci5leHRyYWN0RGF0YSksdChcIkVYVFJBQ1RfRVJST1JcIixcImV4dHJhY3RFcnJvclwiLHIuZXh0cmFjdEVycm9yKX0pLFJlc3RKc29uOihuZXcgbykuYWRkTmFtZWRMaXN0ZW5lcnMoZnVuY3Rpb24odCl7dmFyIHI9ZShcIi4vcHJvdG9jb2wvcmVzdF9qc29uXCIpO3QoXCJCVUlMRFwiLFwiYnVpbGRcIixyLmJ1aWxkUmVxdWVzdCksdChcIkVYVFJBQ1RfREFUQVwiLFwiZXh0cmFjdERhdGFcIixyLmV4dHJhY3REYXRhKSx0KFwiRVhUUkFDVF9FUlJPUlwiLFwiZXh0cmFjdEVycm9yXCIsci5leHRyYWN0RXJyb3IpfSksUmVzdFhtbDoobmV3IG8pLmFkZE5hbWVkTGlzdGVuZXJzKGZ1bmN0aW9uKHQpe3ZhciByPWUoXCIuL3Byb3RvY29sL3Jlc3RfeG1sXCIpO3QoXCJCVUlMRFwiLFwiYnVpbGRcIixyLmJ1aWxkUmVxdWVzdCksdChcIkVYVFJBQ1RfREFUQVwiLFwiZXh0cmFjdERhdGFcIixyLmV4dHJhY3REYXRhKSx0KFwiRVhUUkFDVF9FUlJPUlwiLFwiZXh0cmFjdEVycm9yXCIsci5leHRyYWN0RXJyb3IpfSksUXVlcnk6KG5ldyBvKS5hZGROYW1lZExpc3RlbmVycyhmdW5jdGlvbih0KXt2YXIgcj1lKFwiLi9wcm90b2NvbC9xdWVyeVwiKTt0KFwiQlVJTERcIixcImJ1aWxkXCIsci5idWlsZFJlcXVlc3QpLHQoXCJFWFRSQUNUX0RBVEFcIixcImV4dHJhY3REYXRhXCIsci5leHRyYWN0RGF0YSksdChcIkVYVFJBQ1RfRVJST1JcIixcImV4dHJhY3RFcnJvclwiLHIuZXh0cmFjdEVycm9yKX0pfX0se1wiLi9jb3JlXCI6MTksXCIuL2Rpc2NvdmVyX2VuZHBvaW50XCI6MjcsXCIuL3Byb3RvY29sL2pzb25cIjo0NyxcIi4vcHJvdG9jb2wvcXVlcnlcIjo0OCxcIi4vcHJvdG9jb2wvcmVzdFwiOjQ5LFwiLi9wcm90b2NvbC9yZXN0X2pzb25cIjo1MCxcIi4vcHJvdG9jb2wvcmVzdF94bWxcIjo1MSxcIi4vc2VxdWVudGlhbF9leGVjdXRvclwiOjU5LHV0aWw6OTh9XSwzNTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL2NvcmVcIiksaT1uLnV0aWwuaW5oZXJpdDtuLkVuZHBvaW50PWkoe2NvbnN0cnVjdG9yOmZ1bmN0aW9uKGUsdCl7aWYobi51dGlsLmhpZGVQcm9wZXJ0aWVzKHRoaXMsW1wic2xhc2hlc1wiLFwiYXV0aFwiLFwiaGFzaFwiLFwic2VhcmNoXCIsXCJxdWVyeVwiXSksdm9pZCAwPT09ZXx8bnVsbD09PWUpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBlbmRwb2ludDogXCIrZSk7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuIG4udXRpbC5jb3B5KGUpO2lmKCFlLm1hdGNoKC9eaHR0cC8pKXtlPSgodCYmdm9pZCAwIT09dC5zc2xFbmFibGVkP3Quc3NsRW5hYmxlZDpuLmNvbmZpZy5zc2xFbmFibGVkKT9cImh0dHBzXCI6XCJodHRwXCIpK1wiOi8vXCIrZX1uLnV0aWwudXBkYXRlKHRoaXMsbi51dGlsLnVybFBhcnNlKGUpKSx0aGlzLnBvcnQ/dGhpcy5wb3J0PXBhcnNlSW50KHRoaXMucG9ydCwxMCk6dGhpcy5wb3J0PVwiaHR0cHM6XCI9PT10aGlzLnByb3RvY29sPzQ0Mzo4MH19KSxuLkh0dHBSZXF1ZXN0PWkoe2NvbnN0cnVjdG9yOmZ1bmN0aW9uKGUsdCl7ZT1uZXcgbi5FbmRwb2ludChlKSx0aGlzLm1ldGhvZD1cIlBPU1RcIix0aGlzLnBhdGg9ZS5wYXRofHxcIi9cIix0aGlzLmhlYWRlcnM9e30sdGhpcy5ib2R5PVwiXCIsdGhpcy5lbmRwb2ludD1lLHRoaXMucmVnaW9uPXQsdGhpcy5fdXNlckFnZW50PVwiXCIsdGhpcy5zZXRVc2VyQWdlbnQoKX0sc2V0VXNlckFnZW50OmZ1bmN0aW9uKCl7dGhpcy5fdXNlckFnZW50PXRoaXMuaGVhZGVyc1t0aGlzLmdldFVzZXJBZ2VudEhlYWRlck5hbWUoKV09bi51dGlsLnVzZXJBZ2VudCgpfSxnZXRVc2VyQWdlbnRIZWFkZXJOYW1lOmZ1bmN0aW9uKCl7cmV0dXJuKG4udXRpbC5pc0Jyb3dzZXIoKT9cIlgtQW16LVwiOlwiXCIpK1wiVXNlci1BZ2VudFwifSxhcHBlbmRUb1VzZXJBZ2VudDpmdW5jdGlvbihlKXtcInN0cmluZ1wiPT10eXBlb2YgZSYmZSYmKHRoaXMuX3VzZXJBZ2VudCs9XCIgXCIrZSksdGhpcy5oZWFkZXJzW3RoaXMuZ2V0VXNlckFnZW50SGVhZGVyTmFtZSgpXT10aGlzLl91c2VyQWdlbnR9LGdldFVzZXJBZ2VudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl91c2VyQWdlbnR9LHBhdGhuYW1lOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGF0aC5zcGxpdChcIj9cIiwxKVswXX0sc2VhcmNoOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wYXRoLnNwbGl0KFwiP1wiLDIpWzFdO3JldHVybiBlPyhlPW4udXRpbC5xdWVyeVN0cmluZ1BhcnNlKGUpLG4udXRpbC5xdWVyeVBhcmFtc1RvU3RyaW5nKGUpKTpcIlwifSx1cGRhdGVFbmRwb2ludDpmdW5jdGlvbihlKXt2YXIgdD1uZXcgbi5FbmRwb2ludChlKTt0aGlzLmVuZHBvaW50PXQsdGhpcy5wYXRoPXQucGF0aHx8XCIvXCJ9fSksbi5IdHRwUmVzcG9uc2U9aSh7Y29uc3RydWN0b3I6ZnVuY3Rpb24oKXt0aGlzLnN0YXR1c0NvZGU9dm9pZCAwLHRoaXMuaGVhZGVycz17fSx0aGlzLmJvZHk9dm9pZCAwLHRoaXMuc3RyZWFtaW5nPSExLHRoaXMuc3RyZWFtPW51bGx9LGNyZWF0ZVVuYnVmZmVyZWRTdHJlYW06ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdHJlYW1pbmc9ITAsdGhpcy5zdHJlYW19fSksbi5IdHRwQ2xpZW50PWkoe30pLG4uSHR0cENsaWVudC5nZXRJbnN0YW5jZT1mdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT10aGlzLnNpbmdsZXRvbiYmKHRoaXMuc2luZ2xldG9uPW5ldyB0aGlzKSx0aGlzLnNpbmdsZXRvbn19LHtcIi4vY29yZVwiOjE5fV0sMzY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi4vY29yZVwiKSxpPWUoXCJldmVudHNcIikuRXZlbnRFbWl0dGVyO2UoXCIuLi9odHRwXCIpLG4uWEhSQ2xpZW50PW4udXRpbC5pbmhlcml0KHtoYW5kbGVSZXF1ZXN0OmZ1bmN0aW9uKGUsdCxyLG8pe3ZhciBzPXRoaXMsYT1lLmVuZHBvaW50LHU9bmV3IGksYz1hLnByb3RvY29sK1wiLy9cIithLmhvc3RuYW1lOzgwIT09YS5wb3J0JiY0NDMhPT1hLnBvcnQmJihjKz1cIjpcIithLnBvcnQpLGMrPWUucGF0aDt2YXIgbD1uZXcgWE1MSHR0cFJlcXVlc3QscD0hMTtlLnN0cmVhbT1sLGwuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIixmdW5jdGlvbigpe3RyeXtpZigwPT09bC5zdGF0dXMpcmV0dXJufWNhdGNoKGUpe3JldHVybn10aGlzLnJlYWR5U3RhdGU+PXRoaXMuSEVBREVSU19SRUNFSVZFRCYmIXAmJih1LnN0YXR1c0NvZGU9bC5zdGF0dXMsdS5oZWFkZXJzPXMucGFyc2VIZWFkZXJzKGwuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpLHUuZW1pdChcImhlYWRlcnNcIix1LnN0YXR1c0NvZGUsdS5oZWFkZXJzLGwuc3RhdHVzVGV4dCkscD0hMCksdGhpcy5yZWFkeVN0YXRlPT09dGhpcy5ET05FJiZzLmZpbmlzaFJlcXVlc3QobCx1KX0sITEpLGwudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoXCJwcm9ncmVzc1wiLGZ1bmN0aW9uKGUpe3UuZW1pdChcInNlbmRQcm9ncmVzc1wiLGUpfSksbC5hZGRFdmVudExpc3RlbmVyKFwicHJvZ3Jlc3NcIixmdW5jdGlvbihlKXt1LmVtaXQoXCJyZWNlaXZlUHJvZ3Jlc3NcIixlKX0sITEpLGwuYWRkRXZlbnRMaXN0ZW5lcihcInRpbWVvdXRcIixmdW5jdGlvbigpe28obi51dGlsLmVycm9yKG5ldyBFcnJvcihcIlRpbWVvdXRcIikse2NvZGU6XCJUaW1lb3V0RXJyb3JcIn0pKX0sITEpLGwuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsZnVuY3Rpb24oKXtvKG4udXRpbC5lcnJvcihuZXcgRXJyb3IoXCJOZXR3b3JrIEZhaWx1cmVcIikse2NvZGU6XCJOZXR3b3JraW5nRXJyb3JcIn0pKX0sITEpLGwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsZnVuY3Rpb24oKXtvKG4udXRpbC5lcnJvcihuZXcgRXJyb3IoXCJSZXF1ZXN0IGFib3J0ZWRcIikse2NvZGU6XCJSZXF1ZXN0QWJvcnRlZEVycm9yXCJ9KSl9LCExKSxyKHUpLGwub3BlbihlLm1ldGhvZCxjLCExIT09dC54aHJBc3luYyksbi51dGlsLmVhY2goZS5oZWFkZXJzLGZ1bmN0aW9uKGUsdCl7XCJDb250ZW50LUxlbmd0aFwiIT09ZSYmXCJVc2VyLUFnZW50XCIhPT1lJiZcIkhvc3RcIiE9PWUmJmwuc2V0UmVxdWVzdEhlYWRlcihlLHQpfSksdC50aW1lb3V0JiYhMSE9PXQueGhyQXN5bmMmJihsLnRpbWVvdXQ9dC50aW1lb3V0KSx0LnhocldpdGhDcmVkZW50aWFscyYmKGwud2l0aENyZWRlbnRpYWxzPSEwKTt0cnl7bC5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwifWNhdGNoKGUpe310cnl7ZS5ib2R5P2wuc2VuZChlLmJvZHkpOmwuc2VuZCgpfWNhdGNoKHQpe2lmKCFlLmJvZHl8fFwib2JqZWN0XCIhPXR5cGVvZiBlLmJvZHkuYnVmZmVyKXRocm93IHQ7bC5zZW5kKGUuYm9keS5idWZmZXIpfXJldHVybiB1fSxwYXJzZUhlYWRlcnM6ZnVuY3Rpb24oZSl7dmFyIHQ9e307cmV0dXJuIG4udXRpbC5hcnJheUVhY2goZS5zcGxpdCgvXFxyP1xcbi8pLGZ1bmN0aW9uKGUpe3ZhciByPWUuc3BsaXQoXCI6XCIsMSlbMF0sbj1lLnN1YnN0cmluZyhyLmxlbmd0aCsyKTtyLmxlbmd0aD4wJiYodFtyLnRvTG93ZXJDYXNlKCldPW4pfSksdH0sZmluaXNoUmVxdWVzdDpmdW5jdGlvbihlLHQpe3ZhciByO2lmKFwiYXJyYXlidWZmZXJcIj09PWUucmVzcG9uc2VUeXBlJiZlLnJlc3BvbnNlKXt2YXIgaT1lLnJlc3BvbnNlO3I9bmV3IG4udXRpbC5CdWZmZXIoaS5ieXRlTGVuZ3RoKTtmb3IodmFyIG89bmV3IFVpbnQ4QXJyYXkoaSkscz0wO3M8ci5sZW5ndGg7KytzKXJbc109b1tzXX10cnl7cnx8XCJzdHJpbmdcIiE9dHlwZW9mIGUucmVzcG9uc2VUZXh0fHwocj1uZXcgbi51dGlsLkJ1ZmZlcihlLnJlc3BvbnNlVGV4dCkpfWNhdGNoKGUpe31yJiZ0LmVtaXQoXCJkYXRhXCIsciksdC5lbWl0KFwiZW5kXCIpfX0pLG4uSHR0cENsaWVudC5wcm90b3R5cGU9bi5YSFJDbGllbnQucHJvdG90eXBlLG4uSHR0cENsaWVudC5zdHJlYW1zQXBpVmVyc2lvbj0xfSx7XCIuLi9jb3JlXCI6MTksXCIuLi9odHRwXCI6MzUsZXZlbnRzOjgyfV0sMzc6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKCl7fWZ1bmN0aW9uIGkoZSx0KXtpZih0JiZ2b2lkIDAhPT1lJiZudWxsIT09ZSlzd2l0Y2godC50eXBlKXtjYXNlXCJzdHJ1Y3R1cmVcIjpyZXR1cm4gbyhlLHQpO2Nhc2VcIm1hcFwiOnJldHVybiBhKGUsdCk7Y2FzZVwibGlzdFwiOnJldHVybiBzKGUsdCk7ZGVmYXVsdDpyZXR1cm4gdShlLHQpfX1mdW5jdGlvbiBvKGUsdCl7dmFyIHI9e307cmV0dXJuIGMuZWFjaChlLGZ1bmN0aW9uKGUsbil7dmFyIG89dC5tZW1iZXJzW2VdO2lmKG8pe2lmKFwiYm9keVwiIT09by5sb2NhdGlvbilyZXR1cm47dmFyIHM9by5pc0xvY2F0aW9uTmFtZT9vLm5hbWU6ZSxhPWkobixvKTt2b2lkIDAhPT1hJiYocltzXT1hKX19KSxyfWZ1bmN0aW9uIHMoZSx0KXt2YXIgcj1bXTtyZXR1cm4gYy5hcnJheUVhY2goZSxmdW5jdGlvbihlKXt2YXIgbj1pKGUsdC5tZW1iZXIpO3ZvaWQgMCE9PW4mJnIucHVzaChuKX0pLHJ9ZnVuY3Rpb24gYShlLHQpe3ZhciByPXt9O3JldHVybiBjLmVhY2goZSxmdW5jdGlvbihlLG4pe3ZhciBvPWkobix0LnZhbHVlKTt2b2lkIDAhPT1vJiYocltlXT1vKX0pLHJ9ZnVuY3Rpb24gdShlLHQpe3JldHVybiB0LnRvV2lyZUZvcm1hdChlKX12YXIgYz1lKFwiLi4vdXRpbFwiKTtuLnByb3RvdHlwZS5idWlsZD1mdW5jdGlvbihlLHQpe3JldHVybiBKU09OLnN0cmluZ2lmeShpKGUsdCkpfSx0LmV4cG9ydHM9bn0se1wiLi4vdXRpbFwiOjcyfV0sMzg6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKCl7fWZ1bmN0aW9uIGkoZSx0KXtpZih0JiZ2b2lkIDAhPT1lKXN3aXRjaCh0LnR5cGUpe2Nhc2VcInN0cnVjdHVyZVwiOnJldHVybiBvKGUsdCk7Y2FzZVwibWFwXCI6cmV0dXJuIGEoZSx0KTtjYXNlXCJsaXN0XCI6cmV0dXJuIHMoZSx0KTtkZWZhdWx0OnJldHVybiB1KGUsdCl9fWZ1bmN0aW9uIG8oZSx0KXtpZihudWxsIT1lKXt2YXIgcj17fSxuPXQubWVtYmVycztyZXR1cm4gYy5lYWNoKG4sZnVuY3Rpb24odCxuKXt2YXIgbz1uLmlzTG9jYXRpb25OYW1lP24ubmFtZTp0O2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG8pKXt2YXIgcz1lW29dLGE9aShzLG4pO3ZvaWQgMCE9PWEmJihyW3RdPWEpfX0pLHJ9fWZ1bmN0aW9uIHMoZSx0KXtpZihudWxsIT1lKXt2YXIgcj1bXTtyZXR1cm4gYy5hcnJheUVhY2goZSxmdW5jdGlvbihlKXt2YXIgbj1pKGUsdC5tZW1iZXIpO3ZvaWQgMD09PW4/ci5wdXNoKG51bGwpOnIucHVzaChuKX0pLHJ9fWZ1bmN0aW9uIGEoZSx0KXtpZihudWxsIT1lKXt2YXIgcj17fTtyZXR1cm4gYy5lYWNoKGUsZnVuY3Rpb24oZSxuKXt2YXIgbz1pKG4sdC52YWx1ZSk7cltlXT12b2lkIDA9PT1vP251bGw6b30pLHJ9fWZ1bmN0aW9uIHUoZSx0KXtyZXR1cm4gdC50b1R5cGUoZSl9dmFyIGM9ZShcIi4uL3V0aWxcIik7bi5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaShKU09OLnBhcnNlKGUpLHQpfSx0LmV4cG9ydHM9bn0se1wiLi4vdXRpbFwiOjcyfV0sMzk6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKGUsdCl7ZnVuY3Rpb24gcihlLHQpeyEwPT09dC5lbmRwb2ludG9wZXJhdGlvbiYmbChuLFwiZW5kcG9pbnRPcGVyYXRpb25cIixjLnN0cmluZy5sb3dlckZpcnN0KGUpKX12YXIgbj10aGlzO2U9ZXx8e30sdD10fHx7fSx0LmFwaT10aGlzLGUubWV0YWRhdGE9ZS5tZXRhZGF0YXx8e30sbCh0aGlzLFwiaXNBcGlcIiwhMCwhMSksbCh0aGlzLFwiYXBpVmVyc2lvblwiLGUubWV0YWRhdGEuYXBpVmVyc2lvbiksbCh0aGlzLFwiZW5kcG9pbnRQcmVmaXhcIixlLm1ldGFkYXRhLmVuZHBvaW50UHJlZml4KSxsKHRoaXMsXCJzaWduaW5nTmFtZVwiLGUubWV0YWRhdGEuc2lnbmluZ05hbWUpLGwodGhpcyxcImdsb2JhbEVuZHBvaW50XCIsZS5tZXRhZGF0YS5nbG9iYWxFbmRwb2ludCksbCh0aGlzLFwic2lnbmF0dXJlVmVyc2lvblwiLGUubWV0YWRhdGEuc2lnbmF0dXJlVmVyc2lvbiksbCh0aGlzLFwianNvblZlcnNpb25cIixlLm1ldGFkYXRhLmpzb25WZXJzaW9uKSxsKHRoaXMsXCJ0YXJnZXRQcmVmaXhcIixlLm1ldGFkYXRhLnRhcmdldFByZWZpeCksbCh0aGlzLFwicHJvdG9jb2xcIixlLm1ldGFkYXRhLnByb3RvY29sKSxsKHRoaXMsXCJ0aW1lc3RhbXBGb3JtYXRcIixlLm1ldGFkYXRhLnRpbWVzdGFtcEZvcm1hdCksbCh0aGlzLFwieG1sTmFtZXNwYWNlVXJpXCIsZS5tZXRhZGF0YS54bWxOYW1lc3BhY2UpLGwodGhpcyxcImFiYnJldmlhdGlvblwiLGUubWV0YWRhdGEuc2VydmljZUFiYnJldmlhdGlvbiksbCh0aGlzLFwiZnVsbE5hbWVcIixlLm1ldGFkYXRhLnNlcnZpY2VGdWxsTmFtZSksbCh0aGlzLFwic2VydmljZUlkXCIsZS5tZXRhZGF0YS5zZXJ2aWNlSWQpLHAodGhpcyxcImNsYXNzTmFtZVwiLGZ1bmN0aW9uKCl7dmFyIHQ9ZS5tZXRhZGF0YS5zZXJ2aWNlQWJicmV2aWF0aW9ufHxlLm1ldGFkYXRhLnNlcnZpY2VGdWxsTmFtZTtyZXR1cm4gdD8odD10LnJlcGxhY2UoL15BbWF6b258QVdTXFxzKnxcXCguKnxcXHMrfFxcVysvZyxcIlwiKSxcIkVsYXN0aWNMb2FkQmFsYW5jaW5nXCI9PT10JiYodD1cIkVMQlwiKSx0KTpudWxsfSksbCh0aGlzLFwib3BlcmF0aW9uc1wiLG5ldyBpKGUub3BlcmF0aW9ucyx0LGZ1bmN0aW9uKGUscil7cmV0dXJuIG5ldyBvKGUscix0KX0sYy5zdHJpbmcubG93ZXJGaXJzdCxyKSksbCh0aGlzLFwic2hhcGVzXCIsbmV3IGkoZS5zaGFwZXMsdCxmdW5jdGlvbihlLHIpe3JldHVybiBzLmNyZWF0ZShyLHQpfSkpLGwodGhpcyxcInBhZ2luYXRvcnNcIixuZXcgaShlLnBhZ2luYXRvcnMsdCxmdW5jdGlvbihlLHIpe3JldHVybiBuZXcgYShlLHIsdCl9KSksbCh0aGlzLFwid2FpdGVyc1wiLG5ldyBpKGUud2FpdGVycyx0LGZ1bmN0aW9uKGUscil7cmV0dXJuIG5ldyB1KGUscix0KX0sYy5zdHJpbmcubG93ZXJGaXJzdCkpLHQuZG9jdW1lbnRhdGlvbiYmKGwodGhpcyxcImRvY3VtZW50YXRpb25cIixlLmRvY3VtZW50YXRpb24pLGwodGhpcyxcImRvY3VtZW50YXRpb25VcmxcIixlLmRvY3VtZW50YXRpb25VcmwpKX12YXIgaT1lKFwiLi9jb2xsZWN0aW9uXCIpLG89ZShcIi4vb3BlcmF0aW9uXCIpLHM9ZShcIi4vc2hhcGVcIiksYT1lKFwiLi9wYWdpbmF0b3JcIiksdT1lKFwiLi9yZXNvdXJjZV93YWl0ZXJcIiksYz1lKFwiLi4vdXRpbFwiKSxsPWMucHJvcGVydHkscD1jLm1lbW9pemVkUHJvcGVydHk7dC5leHBvcnRzPW59LHtcIi4uL3V0aWxcIjo3MixcIi4vY29sbGVjdGlvblwiOjQwLFwiLi9vcGVyYXRpb25cIjo0MSxcIi4vcGFnaW5hdG9yXCI6NDIsXCIuL3Jlc291cmNlX3dhaXRlclwiOjQzLFwiLi9zaGFwZVwiOjQ0fV0sNDA6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKGUsdCxyLG4pe28odGhpcyxuKGUpLGZ1bmN0aW9uKCl7cmV0dXJuIHIoZSx0KX0pfWZ1bmN0aW9uIGkoZSx0LHIsaSxvKXtpPWl8fFN0cmluZzt2YXIgcz10aGlzO2Zvcih2YXIgYSBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLGEpJiYobi5jYWxsKHMsYSxlW2FdLHIsaSksbyYmbyhhLGVbYV0pKX12YXIgbz1lKFwiLi4vdXRpbFwiKS5tZW1vaXplZFByb3BlcnR5O3QuZXhwb3J0cz1pfSx7XCIuLi91dGlsXCI6NzJ9XSw0MTpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oZSx0LHIpe3ZhciBuPXRoaXM7cj1yfHx7fSxhKHRoaXMsXCJuYW1lXCIsdC5uYW1lfHxlKSxhKHRoaXMsXCJhcGlcIixyLmFwaSwhMSksdC5odHRwPXQuaHR0cHx8e30sYSh0aGlzLFwiZW5kcG9pbnRcIix0LmVuZHBvaW50KSxhKHRoaXMsXCJodHRwTWV0aG9kXCIsdC5odHRwLm1ldGhvZHx8XCJQT1NUXCIpLGEodGhpcyxcImh0dHBQYXRoXCIsdC5odHRwLnJlcXVlc3RVcml8fFwiL1wiKSxhKHRoaXMsXCJhdXRodHlwZVwiLHQuYXV0aHR5cGV8fFwiXCIpLGEodGhpcyxcImVuZHBvaW50RGlzY292ZXJ5UmVxdWlyZWRcIix0LmVuZHBvaW50ZGlzY292ZXJ5P3QuZW5kcG9pbnRkaXNjb3ZlcnkucmVxdWlyZWQ/XCJSRVFVSVJFRFwiOlwiT1BUSU9OQUxcIjpcIk5VTExcIiksdSh0aGlzLFwiaW5wdXRcIixmdW5jdGlvbigpe3JldHVybiB0LmlucHV0P28uY3JlYXRlKHQuaW5wdXQscik6bmV3IG8uY3JlYXRlKHt0eXBlOlwic3RydWN0dXJlXCJ9LHIpfSksdSh0aGlzLFwib3V0cHV0XCIsZnVuY3Rpb24oKXtyZXR1cm4gdC5vdXRwdXQ/by5jcmVhdGUodC5vdXRwdXQscik6bmV3IG8uY3JlYXRlKHt0eXBlOlwic3RydWN0dXJlXCJ9LHIpfSksdSh0aGlzLFwiZXJyb3JzXCIsZnVuY3Rpb24oKXt2YXIgZT1bXTtpZighdC5lcnJvcnMpcmV0dXJuIG51bGw7Zm9yKHZhciBuPTA7bjx0LmVycm9ycy5sZW5ndGg7bisrKWUucHVzaChvLmNyZWF0ZSh0LmVycm9yc1tuXSxyKSk7cmV0dXJuIGV9KSx1KHRoaXMsXCJwYWdpbmF0b3JcIixmdW5jdGlvbigpe3JldHVybiByLmFwaS5wYWdpbmF0b3JzW2VdfSksci5kb2N1bWVudGF0aW9uJiYoYSh0aGlzLFwiZG9jdW1lbnRhdGlvblwiLHQuZG9jdW1lbnRhdGlvbiksYSh0aGlzLFwiZG9jdW1lbnRhdGlvblVybFwiLHQuZG9jdW1lbnRhdGlvblVybCkpLHUodGhpcyxcImlkZW1wb3RlbnRNZW1iZXJzXCIsZnVuY3Rpb24oKXt2YXIgZT1bXSx0PW4uaW5wdXQscj10Lm1lbWJlcnM7aWYoIXQubWVtYmVycylyZXR1cm4gZTtmb3IodmFyIGkgaW4gcilyLmhhc093blByb3BlcnR5KGkpJiYhMD09PXJbaV0uaXNJZGVtcG90ZW50JiZlLnB1c2goaSk7cmV0dXJuIGV9KSx1KHRoaXMsXCJoYXNFdmVudE91dHB1dFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkobi5vdXRwdXQpfSl9ZnVuY3Rpb24gaShlKXt2YXIgdD1lLm1lbWJlcnMscj1lLnBheWxvYWQ7aWYoIWUubWVtYmVycylyZXR1cm4hMTtpZihyKXtyZXR1cm4gdFtyXS5pc0V2ZW50U3RyZWFtfWZvcih2YXIgbiBpbiB0KWlmKCF0Lmhhc093blByb3BlcnR5KG4pJiYhMD09PXRbbl0uaXNFdmVudFN0cmVhbSlyZXR1cm4hMDtyZXR1cm4hMX12YXIgbz1lKFwiLi9zaGFwZVwiKSxzPWUoXCIuLi91dGlsXCIpLGE9cy5wcm9wZXJ0eSx1PXMubWVtb2l6ZWRQcm9wZXJ0eTt0LmV4cG9ydHM9bn0se1wiLi4vdXRpbFwiOjcyLFwiLi9zaGFwZVwiOjQ0fV0sNDI6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKGUsdCl7aSh0aGlzLFwiaW5wdXRUb2tlblwiLHQuaW5wdXRfdG9rZW4pLGkodGhpcyxcImxpbWl0S2V5XCIsdC5saW1pdF9rZXkpLGkodGhpcyxcIm1vcmVSZXN1bHRzXCIsdC5tb3JlX3Jlc3VsdHMpLGkodGhpcyxcIm91dHB1dFRva2VuXCIsdC5vdXRwdXRfdG9rZW4pLGkodGhpcyxcInJlc3VsdEtleVwiLHQucmVzdWx0X2tleSl9dmFyIGk9ZShcIi4uL3V0aWxcIikucHJvcGVydHk7dC5leHBvcnRzPW59LHtcIi4uL3V0aWxcIjo3Mn1dLDQzOltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlLHQscil7cj1yfHx7fSxvKHRoaXMsXCJuYW1lXCIsZSksbyh0aGlzLFwiYXBpXCIsci5hcGksITEpLHQub3BlcmF0aW9uJiZvKHRoaXMsXCJvcGVyYXRpb25cIixpLnN0cmluZy5sb3dlckZpcnN0KHQub3BlcmF0aW9uKSk7dmFyIG49dGhpcztbXCJ0eXBlXCIsXCJkZXNjcmlwdGlvblwiLFwiZGVsYXlcIixcIm1heEF0dGVtcHRzXCIsXCJhY2NlcHRvcnNcIl0uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgcj10W2VdO3ImJm8obixlLHIpfSl9dmFyIGk9ZShcIi4uL3V0aWxcIiksbz1pLnByb3BlcnR5O3QuZXhwb3J0cz1ufSx7XCIuLi91dGlsXCI6NzJ9XSw0NDpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oZSx0LHIpe251bGwhPT1yJiZ2b2lkIDAhPT1yJiZnLnByb3BlcnR5LmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBpKGUsdCl7ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGVbdF18fGcubWVtb2l6ZWRQcm9wZXJ0eS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gbyhlLHQscil7dD10fHx7fSxuKHRoaXMsXCJzaGFwZVwiLGUuc2hhcGUpLG4odGhpcyxcImFwaVwiLHQuYXBpLCExKSxuKHRoaXMsXCJ0eXBlXCIsZS50eXBlKSxuKHRoaXMsXCJlbnVtXCIsZS5lbnVtKSxuKHRoaXMsXCJtaW5cIixlLm1pbiksbih0aGlzLFwibWF4XCIsZS5tYXgpLG4odGhpcyxcInBhdHRlcm5cIixlLnBhdHRlcm4pLG4odGhpcyxcImxvY2F0aW9uXCIsZS5sb2NhdGlvbnx8dGhpcy5sb2NhdGlvbnx8XCJib2R5XCIpLG4odGhpcyxcIm5hbWVcIix0aGlzLm5hbWV8fGUueG1sTmFtZXx8ZS5xdWVyeU5hbWV8fGUubG9jYXRpb25OYW1lfHxyKSxuKHRoaXMsXCJpc1N0cmVhbWluZ1wiLGUuc3RyZWFtaW5nfHx0aGlzLmlzU3RyZWFtaW5nfHwhMSksbih0aGlzLFwicmVxdWlyZXNMZW5ndGhcIixlLnJlcXVpcmVzTGVuZ3RoLCExKSxuKHRoaXMsXCJpc0NvbXBvc2l0ZVwiLGUuaXNDb21wb3NpdGV8fCExKSxuKHRoaXMsXCJpc1NoYXBlXCIsITAsITEpLG4odGhpcyxcImlzUXVlcnlOYW1lXCIsQm9vbGVhbihlLnF1ZXJ5TmFtZSksITEpLG4odGhpcyxcImlzTG9jYXRpb25OYW1lXCIsQm9vbGVhbihlLmxvY2F0aW9uTmFtZSksITEpLG4odGhpcyxcImlzSWRlbXBvdGVudFwiLCEwPT09ZS5pZGVtcG90ZW5jeVRva2VuKSxuKHRoaXMsXCJpc0pzb25WYWx1ZVwiLCEwPT09ZS5qc29udmFsdWUpLG4odGhpcyxcImlzU2Vuc2l0aXZlXCIsITA9PT1lLnNlbnNpdGl2ZXx8ZS5wcm90b3R5cGUmJiEwPT09ZS5wcm90b3R5cGUuc2Vuc2l0aXZlKSxuKHRoaXMsXCJpc0V2ZW50U3RyZWFtXCIsQm9vbGVhbihlLmV2ZW50c3RyZWFtKSwhMSksbih0aGlzLFwiaXNFdmVudFwiLEJvb2xlYW4oZS5ldmVudCksITEpLG4odGhpcyxcImlzRXZlbnRQYXlsb2FkXCIsQm9vbGVhbihlLmV2ZW50cGF5bG9hZCksITEpLG4odGhpcyxcImlzRXZlbnRIZWFkZXJcIixCb29sZWFuKGUuZXZlbnRoZWFkZXIpLCExKSxuKHRoaXMsXCJpc1RpbWVzdGFtcEZvcm1hdFNldFwiLEJvb2xlYW4oZS50aW1lc3RhbXBGb3JtYXQpfHxlLnByb3RvdHlwZSYmITA9PT1lLnByb3RvdHlwZS5pc1RpbWVzdGFtcEZvcm1hdFNldCwhMSksbih0aGlzLFwiZW5kcG9pbnREaXNjb3ZlcnlJZFwiLEJvb2xlYW4oZS5lbmRwb2ludGRpc2NvdmVyeWlkKSwhMSksbih0aGlzLFwiaG9zdExhYmVsXCIsQm9vbGVhbihlLmhvc3RMYWJlbCksITEpLHQuZG9jdW1lbnRhdGlvbiYmKG4odGhpcyxcImRvY3VtZW50YXRpb25cIixlLmRvY3VtZW50YXRpb24pLG4odGhpcyxcImRvY3VtZW50YXRpb25VcmxcIixlLmRvY3VtZW50YXRpb25VcmwpKSxlLnhtbEF0dHJpYnV0ZSYmbih0aGlzLFwiaXNYbWxBdHRyaWJ1dGVcIixlLnhtbEF0dHJpYnV0ZXx8ITEpLG4odGhpcyxcImRlZmF1bHRWYWx1ZVwiLG51bGwpLHRoaXMudG9XaXJlRm9ybWF0PWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZXx8dm9pZCAwPT09ZT9cIlwiOmV9LHRoaXMudG9UeXBlPWZ1bmN0aW9uKGUpe3JldHVybiBlfX1mdW5jdGlvbiBzKGUpe28uYXBwbHkodGhpcyxhcmd1bWVudHMpLG4odGhpcyxcImlzQ29tcG9zaXRlXCIsITApLGUuZmxhdHRlbmVkJiZuKHRoaXMsXCJmbGF0dGVuZWRcIixlLmZsYXR0ZW5lZHx8ITEpfWZ1bmN0aW9uIGEoZSx0KXt2YXIgcj10aGlzLGE9bnVsbCx1PSF0aGlzLmlzU2hhcGU7cy5hcHBseSh0aGlzLGFyZ3VtZW50cyksdSYmKG4odGhpcyxcImRlZmF1bHRWYWx1ZVwiLGZ1bmN0aW9uKCl7cmV0dXJue319KSxuKHRoaXMsXCJtZW1iZXJzXCIse30pLG4odGhpcyxcIm1lbWJlck5hbWVzXCIsW10pLG4odGhpcyxcInJlcXVpcmVkXCIsW10pLG4odGhpcyxcImlzUmVxdWlyZWRcIixmdW5jdGlvbigpe3JldHVybiExfSkpLGUubWVtYmVycyYmKG4odGhpcyxcIm1lbWJlcnNcIixuZXcgeShlLm1lbWJlcnMsdCxmdW5jdGlvbihlLHIpe3JldHVybiBvLmNyZWF0ZShyLHQsZSl9KSksaSh0aGlzLFwibWVtYmVyTmFtZXNcIixmdW5jdGlvbigpe3JldHVybiBlLnhtbE9yZGVyfHxPYmplY3Qua2V5cyhlLm1lbWJlcnMpfSksZS5ldmVudCYmKGkodGhpcyxcImV2ZW50UGF5bG9hZE1lbWJlck5hbWVcIixmdW5jdGlvbigpe2Zvcih2YXIgZT1yLm1lbWJlcnMsdD1yLm1lbWJlck5hbWVzLG49MCxpPXQubGVuZ3RoO248aTtuKyspaWYoZVt0W25dXS5pc0V2ZW50UGF5bG9hZClyZXR1cm4gdFtuXX0pLGkodGhpcyxcImV2ZW50SGVhZGVyTWVtYmVyTmFtZXNcIixmdW5jdGlvbigpe2Zvcih2YXIgZT1yLm1lbWJlcnMsdD1yLm1lbWJlck5hbWVzLG49W10saT0wLG89dC5sZW5ndGg7aTxvO2krKyllW3RbaV1dLmlzRXZlbnRIZWFkZXImJm4ucHVzaCh0W2ldKTtyZXR1cm4gbn0pKSksZS5yZXF1aXJlZCYmKG4odGhpcyxcInJlcXVpcmVkXCIsZS5yZXF1aXJlZCksbih0aGlzLFwiaXNSZXF1aXJlZFwiLGZ1bmN0aW9uKHQpe2lmKCFhKXthPXt9O2Zvcih2YXIgcj0wO3I8ZS5yZXF1aXJlZC5sZW5ndGg7cisrKWFbZS5yZXF1aXJlZFtyXV09ITB9cmV0dXJuIGFbdF19LCExLCEwKSksbih0aGlzLFwicmVzdWx0V3JhcHBlclwiLGUucmVzdWx0V3JhcHBlcnx8bnVsbCksZS5wYXlsb2FkJiZuKHRoaXMsXCJwYXlsb2FkXCIsZS5wYXlsb2FkKSxcInN0cmluZ1wiPT10eXBlb2YgZS54bWxOYW1lc3BhY2U/bih0aGlzLFwieG1sTmFtZXNwYWNlVXJpXCIsZS54bWxOYW1lc3BhY2UpOlwib2JqZWN0XCI9PXR5cGVvZiBlLnhtbE5hbWVzcGFjZSYmKG4odGhpcyxcInhtbE5hbWVzcGFjZVByZWZpeFwiLGUueG1sTmFtZXNwYWNlLnByZWZpeCksbih0aGlzLFwieG1sTmFtZXNwYWNlVXJpXCIsZS54bWxOYW1lc3BhY2UudXJpKSl9ZnVuY3Rpb24gdShlLHQpe3ZhciByPXRoaXMsYT0hdGhpcy5pc1NoYXBlO2lmKHMuYXBwbHkodGhpcyxhcmd1bWVudHMpLGEmJm4odGhpcyxcImRlZmF1bHRWYWx1ZVwiLGZ1bmN0aW9uKCl7cmV0dXJuW119KSxlLm1lbWJlciYmaSh0aGlzLFwibWVtYmVyXCIsZnVuY3Rpb24oKXtyZXR1cm4gby5jcmVhdGUoZS5tZW1iZXIsdCl9KSx0aGlzLmZsYXR0ZW5lZCl7dmFyIHU9dGhpcy5uYW1lO2kodGhpcyxcIm5hbWVcIixmdW5jdGlvbigpe3JldHVybiByLm1lbWJlci5uYW1lfHx1fSl9fWZ1bmN0aW9uIGMoZSx0KXt2YXIgcj0hdGhpcy5pc1NoYXBlO3MuYXBwbHkodGhpcyxhcmd1bWVudHMpLHImJihuKHRoaXMsXCJkZWZhdWx0VmFsdWVcIixmdW5jdGlvbigpe3JldHVybnt9fSksbih0aGlzLFwia2V5XCIsby5jcmVhdGUoe3R5cGU6XCJzdHJpbmdcIn0sdCkpLG4odGhpcyxcInZhbHVlXCIsby5jcmVhdGUoe3R5cGU6XCJzdHJpbmdcIn0sdCkpKSxlLmtleSYmaSh0aGlzLFwia2V5XCIsZnVuY3Rpb24oKXtyZXR1cm4gby5jcmVhdGUoZS5rZXksdCl9KSxlLnZhbHVlJiZpKHRoaXMsXCJ2YWx1ZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIG8uY3JlYXRlKGUudmFsdWUsdCl9KX1mdW5jdGlvbiBsKGUpe3ZhciB0PXRoaXM7aWYoby5hcHBseSh0aGlzLGFyZ3VtZW50cyksZS50aW1lc3RhbXBGb3JtYXQpbih0aGlzLFwidGltZXN0YW1wRm9ybWF0XCIsZS50aW1lc3RhbXBGb3JtYXQpO2Vsc2UgaWYodC5pc1RpbWVzdGFtcEZvcm1hdFNldCYmdGhpcy50aW1lc3RhbXBGb3JtYXQpbih0aGlzLFwidGltZXN0YW1wRm9ybWF0XCIsdGhpcy50aW1lc3RhbXBGb3JtYXQpO2Vsc2UgaWYoXCJoZWFkZXJcIj09PXRoaXMubG9jYXRpb24pbih0aGlzLFwidGltZXN0YW1wRm9ybWF0XCIsXCJyZmM4MjJcIik7ZWxzZSBpZihcInF1ZXJ5c3RyaW5nXCI9PT10aGlzLmxvY2F0aW9uKW4odGhpcyxcInRpbWVzdGFtcEZvcm1hdFwiLFwiaXNvODYwMVwiKTtlbHNlIGlmKHRoaXMuYXBpKXN3aXRjaCh0aGlzLmFwaS5wcm90b2NvbCl7Y2FzZVwianNvblwiOmNhc2VcInJlc3QtanNvblwiOm4odGhpcyxcInRpbWVzdGFtcEZvcm1hdFwiLFwidW5peFRpbWVzdGFtcFwiKTticmVhaztjYXNlXCJyZXN0LXhtbFwiOmNhc2VcInF1ZXJ5XCI6Y2FzZVwiZWMyXCI6bih0aGlzLFwidGltZXN0YW1wRm9ybWF0XCIsXCJpc284NjAxXCIpfXRoaXMudG9UeXBlPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZXx8dm9pZCAwPT09ZT9udWxsOlwiZnVuY3Rpb25cIj09dHlwZW9mIGUudG9VVENTdHJpbmc/ZTpcInN0cmluZ1wiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGU/Zy5kYXRlLnBhcnNlVGltZXN0YW1wKGUpOm51bGx9LHRoaXMudG9XaXJlRm9ybWF0PWZ1bmN0aW9uKGUpe3JldHVybiBnLmRhdGUuZm9ybWF0KGUsdC50aW1lc3RhbXBGb3JtYXQpfX1mdW5jdGlvbiBwKCl7by5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIGU9W1wicmVzdC14bWxcIixcInF1ZXJ5XCIsXCJlYzJcIl07dGhpcy50b1R5cGU9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9dGhpcy5hcGkmJmUuaW5kZXhPZih0aGlzLmFwaS5wcm90b2NvbCk+LTE/dHx8XCJcIjp0LHRoaXMuaXNKc29uVmFsdWU/SlNPTi5wYXJzZSh0KTp0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnRvU3RyaW5nP3QudG9TdHJpbmcoKTp0fSx0aGlzLnRvV2lyZUZvcm1hdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5pc0pzb25WYWx1ZT9KU09OLnN0cmluZ2lmeShlKTplfX1mdW5jdGlvbiBoKCl7by5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy50b1R5cGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PT1lfHx2b2lkIDA9PT1lP251bGw6cGFyc2VGbG9hdChlKX0sdGhpcy50b1dpcmVGb3JtYXQ9dGhpcy50b1R5cGV9ZnVuY3Rpb24gZigpe28uYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMudG9UeXBlPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZXx8dm9pZCAwPT09ZT9udWxsOnBhcnNlSW50KGUsMTApfSx0aGlzLnRvV2lyZUZvcm1hdD10aGlzLnRvVHlwZX1mdW5jdGlvbiBkKCl7by5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy50b1R5cGU9ZnVuY3Rpb24oZSl7dmFyIHQ9Zy5iYXNlNjQuZGVjb2RlKGUpO2lmKHRoaXMuaXNTZW5zaXRpdmUmJmcuaXNOb2RlKCkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGcuQnVmZmVyLmFsbG9jKXt2YXIgcj1nLkJ1ZmZlci5hbGxvYyh0Lmxlbmd0aCx0KTt0LmZpbGwoMCksdD1yfXJldHVybiB0fSx0aGlzLnRvV2lyZUZvcm1hdD1nLmJhc2U2NC5lbmNvZGV9ZnVuY3Rpb24gbSgpe2QuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIHYoKXtvLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLnRvVHlwZT1mdW5jdGlvbihlKXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGU/ZTpudWxsPT09ZXx8dm9pZCAwPT09ZT9udWxsOlwidHJ1ZVwiPT09ZX19dmFyIHk9ZShcIi4vY29sbGVjdGlvblwiKSxnPWUoXCIuLi91dGlsXCIpO28ubm9ybWFsaXplZFR5cGVzPXtjaGFyYWN0ZXI6XCJzdHJpbmdcIixkb3VibGU6XCJmbG9hdFwiLGxvbmc6XCJpbnRlZ2VyXCIsc2hvcnQ6XCJpbnRlZ2VyXCIsYmlnaW50ZWdlcjpcImludGVnZXJcIixiaWdkZWNpbWFsOlwiZmxvYXRcIixibG9iOlwiYmluYXJ5XCJ9LG8udHlwZXM9e3N0cnVjdHVyZTphLGxpc3Q6dSxtYXA6Yyxib29sZWFuOnYsdGltZXN0YW1wOmwsZmxvYXQ6aCxpbnRlZ2VyOmYsc3RyaW5nOnAsYmFzZTY0Om0sYmluYXJ5OmR9LG8ucmVzb2x2ZT1mdW5jdGlvbihlLHQpe2lmKGUuc2hhcGUpe3ZhciByPXQuYXBpLnNoYXBlc1tlLnNoYXBlXTtpZighcil0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBzaGFwZSByZWZlcmVuY2U6IFwiK2Uuc2hhcGUpO3JldHVybiByfXJldHVybiBudWxsfSxvLmNyZWF0ZT1mdW5jdGlvbihlLHQscil7aWYoZS5pc1NoYXBlKXJldHVybiBlO3ZhciBuPW8ucmVzb2x2ZShlLHQpO2lmKG4pe3ZhciBpPU9iamVjdC5rZXlzKGUpO3QuZG9jdW1lbnRhdGlvbnx8KGk9aS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIWUubWF0Y2goL2RvY3VtZW50YXRpb24vKX0pKTt2YXIgcz1mdW5jdGlvbigpe24uY29uc3RydWN0b3IuY2FsbCh0aGlzLGUsdCxyKX07cmV0dXJuIHMucHJvdG90eXBlPW4sbmV3IHN9ZS50eXBlfHwoZS5tZW1iZXJzP2UudHlwZT1cInN0cnVjdHVyZVwiOmUubWVtYmVyP2UudHlwZT1cImxpc3RcIjplLmtleT9lLnR5cGU9XCJtYXBcIjplLnR5cGU9XCJzdHJpbmdcIik7dmFyIGE9ZS50eXBlO2lmKG8ubm9ybWFsaXplZFR5cGVzW2UudHlwZV0mJihlLnR5cGU9by5ub3JtYWxpemVkVHlwZXNbZS50eXBlXSksby50eXBlc1tlLnR5cGVdKXJldHVybiBuZXcgby50eXBlc1tlLnR5cGVdKGUsdCxyKTt0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgc2hhcGUgdHlwZTogXCIrYSl9LG8uc2hhcGVzPXtTdHJ1Y3R1cmVTaGFwZTphLExpc3RTaGFwZTp1LE1hcFNoYXBlOmMsU3RyaW5nU2hhcGU6cCxCb29sZWFuU2hhcGU6dixCYXNlNjRTaGFwZTptfSx0LmV4cG9ydHM9b30se1wiLi4vdXRpbFwiOjcyLFwiLi9jb2xsZWN0aW9uXCI6NDB9XSw0NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL2NvcmVcIik7bi5QYXJhbVZhbGlkYXRvcj1uLnV0aWwuaW5oZXJpdCh7Y29uc3RydWN0b3I6ZnVuY3Rpb24oZSl7ITAhPT1lJiZ2b2lkIDAhPT1lfHwoZT17bWluOiEwfSksdGhpcy52YWxpZGF0aW9uPWV9LHZhbGlkYXRlOmZ1bmN0aW9uKGUsdCxyKXtpZih0aGlzLmVycm9ycz1bXSx0aGlzLnZhbGlkYXRlTWVtYmVyKGUsdHx8e30scnx8XCJwYXJhbXNcIiksdGhpcy5lcnJvcnMubGVuZ3RoPjEpe3ZhciBpPXRoaXMuZXJyb3JzLmpvaW4oXCJcXG4qIFwiKTt0aHJvdyBpPVwiVGhlcmUgd2VyZSBcIit0aGlzLmVycm9ycy5sZW5ndGgrXCIgdmFsaWRhdGlvbiBlcnJvcnM6XFxuKiBcIitpLG4udXRpbC5lcnJvcihuZXcgRXJyb3IoaSkse2NvZGU6XCJNdWx0aXBsZVZhbGlkYXRpb25FcnJvcnNcIixlcnJvcnM6dGhpcy5lcnJvcnN9KX1pZigxPT09dGhpcy5lcnJvcnMubGVuZ3RoKXRocm93IHRoaXMuZXJyb3JzWzBdO3JldHVybiEwfSxmYWlsOmZ1bmN0aW9uKGUsdCl7dGhpcy5lcnJvcnMucHVzaChuLnV0aWwuZXJyb3IobmV3IEVycm9yKHQpLHtjb2RlOmV9KSl9LHZhbGlkYXRlU3RydWN0dXJlOmZ1bmN0aW9uKGUsdCxyKXt0aGlzLnZhbGlkYXRlVHlwZSh0LHIsW1wib2JqZWN0XCJdLFwic3RydWN0dXJlXCIpO2Zvcih2YXIgbixpPTA7ZS5yZXF1aXJlZCYmaTxlLnJlcXVpcmVkLmxlbmd0aDtpKyspe249ZS5yZXF1aXJlZFtpXTt2YXIgbz10W25dO3ZvaWQgMCE9PW8mJm51bGwhPT1vfHx0aGlzLmZhaWwoXCJNaXNzaW5nUmVxdWlyZWRQYXJhbWV0ZXJcIixcIk1pc3NpbmcgcmVxdWlyZWQga2V5ICdcIituK1wiJyBpbiBcIityKX1mb3IobiBpbiB0KWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG4pKXt2YXIgcz10W25dLGE9ZS5tZW1iZXJzW25dO2lmKHZvaWQgMCE9PWEpe3ZhciB1PVtyLG5dLmpvaW4oXCIuXCIpO3RoaXMudmFsaWRhdGVNZW1iZXIoYSxzLHUpfWVsc2UgdGhpcy5mYWlsKFwiVW5leHBlY3RlZFBhcmFtZXRlclwiLFwiVW5leHBlY3RlZCBrZXkgJ1wiK24rXCInIGZvdW5kIGluIFwiK3IpfXJldHVybiEwfSx2YWxpZGF0ZU1lbWJlcjpmdW5jdGlvbihlLHQscil7c3dpdGNoKGUudHlwZSl7Y2FzZVwic3RydWN0dXJlXCI6cmV0dXJuIHRoaXMudmFsaWRhdGVTdHJ1Y3R1cmUoZSx0LHIpO2Nhc2VcImxpc3RcIjpyZXR1cm4gdGhpcy52YWxpZGF0ZUxpc3QoZSx0LHIpO2Nhc2VcIm1hcFwiOnJldHVybiB0aGlzLnZhbGlkYXRlTWFwKGUsdCxyKTtkZWZhdWx0OnJldHVybiB0aGlzLnZhbGlkYXRlU2NhbGFyKGUsdCxyKX19LHZhbGlkYXRlTGlzdDpmdW5jdGlvbihlLHQscil7aWYodGhpcy52YWxpZGF0ZVR5cGUodCxyLFtBcnJheV0pKXt0aGlzLnZhbGlkYXRlUmFuZ2UoZSx0Lmxlbmd0aCxyLFwibGlzdCBtZW1iZXIgY291bnRcIik7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspdGhpcy52YWxpZGF0ZU1lbWJlcihlLm1lbWJlcix0W25dLHIrXCJbXCIrbitcIl1cIil9fSx2YWxpZGF0ZU1hcDpmdW5jdGlvbihlLHQscil7aWYodGhpcy52YWxpZGF0ZVR5cGUodCxyLFtcIm9iamVjdFwiXSxcIm1hcFwiKSl7dmFyIG49MDtmb3IodmFyIGkgaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxpKSYmKHRoaXMudmFsaWRhdGVNZW1iZXIoZS5rZXksaSxyK1wiW2tleT0nXCIraStcIiddXCIpLHRoaXMudmFsaWRhdGVNZW1iZXIoZS52YWx1ZSx0W2ldLHIrXCJbJ1wiK2krXCInXVwiKSxuKyspO3RoaXMudmFsaWRhdGVSYW5nZShlLG4scixcIm1hcCBtZW1iZXIgY291bnRcIil9fSx2YWxpZGF0ZVNjYWxhcjpmdW5jdGlvbihlLHQscil7c3dpdGNoKGUudHlwZSl7Y2FzZSBudWxsOmNhc2Ugdm9pZCAwOmNhc2VcInN0cmluZ1wiOnJldHVybiB0aGlzLnZhbGlkYXRlU3RyaW5nKGUsdCxyKTtjYXNlXCJiYXNlNjRcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gdGhpcy52YWxpZGF0ZVBheWxvYWQodCxyKTtjYXNlXCJpbnRlZ2VyXCI6Y2FzZVwiZmxvYXRcIjpyZXR1cm4gdGhpcy52YWxpZGF0ZU51bWJlcihlLHQscik7Y2FzZVwiYm9vbGVhblwiOnJldHVybiB0aGlzLnZhbGlkYXRlVHlwZSh0LHIsW1wiYm9vbGVhblwiXSk7Y2FzZVwidGltZXN0YW1wXCI6cmV0dXJuIHRoaXMudmFsaWRhdGVUeXBlKHQscixbRGF0ZSwvXlxcZHs0fS1cXGR7Mn0tXFxkezJ9VFxcZHsyfTpcXGR7Mn06XFxkezJ9KFxcLlxcZCspP1okLyxcIm51bWJlclwiXSxcIkRhdGUgb2JqZWN0LCBJU08tODYwMSBzdHJpbmcsIG9yIGEgVU5JWCB0aW1lc3RhbXBcIik7ZGVmYXVsdDpyZXR1cm4gdGhpcy5mYWlsKFwiVW5rb3duVHlwZVwiLFwiVW5oYW5kbGVkIHR5cGUgXCIrZS50eXBlK1wiIGZvciBcIityKX19LHZhbGlkYXRlU3RyaW5nOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1bXCJzdHJpbmdcIl07ZS5pc0pzb25WYWx1ZSYmKG49bi5jb25jYXQoW1wibnVtYmVyXCIsXCJvYmplY3RcIixcImJvb2xlYW5cIl0pKSxudWxsIT09dCYmdGhpcy52YWxpZGF0ZVR5cGUodCxyLG4pJiYodGhpcy52YWxpZGF0ZUVudW0oZSx0LHIpLHRoaXMudmFsaWRhdGVSYW5nZShlLHQubGVuZ3RoLHIsXCJzdHJpbmcgbGVuZ3RoXCIpLHRoaXMudmFsaWRhdGVQYXR0ZXJuKGUsdCxyKSx0aGlzLnZhbGlkYXRlVXJpKGUsdCxyKSl9LHZhbGlkYXRlVXJpOmZ1bmN0aW9uKGUsdCxyKXtcInVyaVwiPT09ZS5sb2NhdGlvbiYmMD09PXQubGVuZ3RoJiZ0aGlzLmZhaWwoXCJVcmlQYXJhbWV0ZXJFcnJvclwiLCdFeHBlY3RlZCB1cmkgcGFyYW1ldGVyIHRvIGhhdmUgbGVuZ3RoID49IDEsIGJ1dCBmb3VuZCBcIicrdCsnXCIgZm9yICcrcil9LHZhbGlkYXRlUGF0dGVybjpmdW5jdGlvbihlLHQscil7dGhpcy52YWxpZGF0aW9uLnBhdHRlcm4mJnZvaWQgMCE9PWUucGF0dGVybiYmKG5ldyBSZWdFeHAoZS5wYXR0ZXJuKS50ZXN0KHQpfHx0aGlzLmZhaWwoXCJQYXR0ZXJuTWF0Y2hFcnJvclwiLCdQcm92aWRlZCB2YWx1ZSBcIicrdCsnXCIgZG9lcyBub3QgbWF0Y2ggcmVnZXggcGF0dGVybiAvJytlLnBhdHRlcm4rXCIvIGZvciBcIityKSl9LHZhbGlkYXRlUmFuZ2U6ZnVuY3Rpb24oZSx0LHIsbil7dGhpcy52YWxpZGF0aW9uLm1pbiYmdm9pZCAwIT09ZS5taW4mJnQ8ZS5taW4mJnRoaXMuZmFpbChcIk1pblJhbmdlRXJyb3JcIixcIkV4cGVjdGVkIFwiK24rXCIgPj0gXCIrZS5taW4rXCIsIGJ1dCBmb3VuZCBcIit0K1wiIGZvciBcIityKSx0aGlzLnZhbGlkYXRpb24ubWF4JiZ2b2lkIDAhPT1lLm1heCYmdD5lLm1heCYmdGhpcy5mYWlsKFwiTWF4UmFuZ2VFcnJvclwiLFwiRXhwZWN0ZWQgXCIrbitcIiA8PSBcIitlLm1heCtcIiwgYnV0IGZvdW5kIFwiK3QrXCIgZm9yIFwiK3IpfSx2YWxpZGF0ZUVudW06ZnVuY3Rpb24oZSx0LHIpe3RoaXMudmFsaWRhdGlvbi5lbnVtJiZ2b2lkIDAhPT1lLmVudW0mJi0xPT09ZS5lbnVtLmluZGV4T2YodCkmJnRoaXMuZmFpbChcIkVudW1FcnJvclwiLFwiRm91bmQgc3RyaW5nIHZhbHVlIG9mIFwiK3QrXCIsIGJ1dCBleHBlY3RlZCBcIitlLmVudW0uam9pbihcInxcIikrXCIgZm9yIFwiK3IpfSx2YWxpZGF0ZVR5cGU6ZnVuY3Rpb24oZSx0LHIsaSl7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpcmV0dXJuITE7Zm9yKHZhciBvPSExLHM9MDtzPHIubGVuZ3RoO3MrKyl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHJbc10pe2lmKHR5cGVvZiBlPT09cltzXSlyZXR1cm4hMH1lbHNlIGlmKHJbc11pbnN0YW5jZW9mIFJlZ0V4cCl7aWYoKGV8fFwiXCIpLnRvU3RyaW5nKCkubWF0Y2gocltzXSkpcmV0dXJuITB9ZWxzZXtpZihlIGluc3RhbmNlb2YgcltzXSlyZXR1cm4hMDtpZihuLnV0aWwuaXNUeXBlKGUscltzXSkpcmV0dXJuITA7aXx8b3x8KHI9ci5zbGljZSgpKSxyW3NdPW4udXRpbC50eXBlTmFtZShyW3NdKX1vPSEwfXZhciBhPWk7YXx8KGE9ci5qb2luKFwiLCBcIikucmVwbGFjZSgvLChbXixdKykkLyxcIiwgb3IkMVwiKSk7dmFyIHU9YS5tYXRjaCgvXlthZWlvdV0vaSk/XCJuXCI6XCJcIjtyZXR1cm4gdGhpcy5mYWlsKFwiSW52YWxpZFBhcmFtZXRlclR5cGVcIixcIkV4cGVjdGVkIFwiK3QrXCIgdG8gYmUgYVwiK3UrXCIgXCIrYSksITF9LHZhbGlkYXRlTnVtYmVyOmZ1bmN0aW9uKGUsdCxyKXtpZihudWxsIT09dCYmdm9pZCAwIT09dCl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe3ZhciBuPXBhcnNlRmxvYXQodCk7bi50b1N0cmluZygpPT09dCYmKHQ9bil9dGhpcy52YWxpZGF0ZVR5cGUodCxyLFtcIm51bWJlclwiXSkmJnRoaXMudmFsaWRhdGVSYW5nZShlLHQscixcIm51bWVyaWMgdmFsdWVcIil9fSx2YWxpZGF0ZVBheWxvYWQ6ZnVuY3Rpb24oZSx0KXtpZihudWxsIT09ZSYmdm9pZCAwIT09ZSYmXCJzdHJpbmdcIiE9dHlwZW9mIGUmJighZXx8XCJudW1iZXJcIiE9dHlwZW9mIGUuYnl0ZUxlbmd0aCkpe2lmKG4udXRpbC5pc05vZGUoKSl7dmFyIHI9bi51dGlsLnN0cmVhbS5TdHJlYW07aWYobi51dGlsLkJ1ZmZlci5pc0J1ZmZlcihlKXx8ZSBpbnN0YW5jZW9mIHIpcmV0dXJufWVsc2UgaWYodm9pZCAwIT09dHlwZW9mIEJsb2ImJmUgaW5zdGFuY2VvZiBCbG9iKXJldHVybjt2YXIgaT1bXCJCdWZmZXJcIixcIlN0cmVhbVwiLFwiRmlsZVwiLFwiQmxvYlwiLFwiQXJyYXlCdWZmZXJcIixcIkRhdGFWaWV3XCJdO2lmKGUpZm9yKHZhciBvPTA7bzxpLmxlbmd0aDtvKyspe2lmKG4udXRpbC5pc1R5cGUoZSxpW29dKSlyZXR1cm47aWYobi51dGlsLnR5cGVOYW1lKGUuY29uc3RydWN0b3IpPT09aVtvXSlyZXR1cm59dGhpcy5mYWlsKFwiSW52YWxpZFBhcmFtZXRlclR5cGVcIixcIkV4cGVjdGVkIFwiK3QrXCIgdG8gYmUgYSBzdHJpbmcsIEJ1ZmZlciwgU3RyZWFtLCBCbG9iLCBvciB0eXBlZCBhcnJheSBvYmplY3RcIil9fX0pfSx7XCIuL2NvcmVcIjoxOX1dLDQ2OltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlKXtpZighZS5zZXJ2aWNlLmNvbmZpZy5ob3N0UHJlZml4RW5hYmxlZClyZXR1cm4gZTt2YXIgdD1lLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbZS5vcGVyYXRpb25dO2lmKGkoZSkpcmV0dXJuIGU7aWYodC5lbmRwb2ludCYmdC5lbmRwb2ludC5ob3N0UHJlZml4KXt2YXIgcj10LmVuZHBvaW50Lmhvc3RQcmVmaXgsbj1vKHIsZS5wYXJhbXMsdC5pbnB1dCk7cyhlLmh0dHBSZXF1ZXN0LmVuZHBvaW50LG4pLGEoZS5odHRwUmVxdWVzdC5lbmRwb2ludC5ob3N0bmFtZSl9cmV0dXJuIGV9ZnVuY3Rpb24gaShlKXt2YXIgdD1lLnNlcnZpY2UuYXBpLHI9dC5vcGVyYXRpb25zW2Uub3BlcmF0aW9uXSxuPXQuZW5kcG9pbnRPcGVyYXRpb24mJnQuZW5kcG9pbnRPcGVyYXRpb249PT11LnN0cmluZy5sb3dlckZpcnN0KHIubmFtZSk7cmV0dXJuXCJOVUxMXCIhPT1yLmVuZHBvaW50RGlzY292ZXJ5UmVxdWlyZWR8fCEwPT09bn1mdW5jdGlvbiBvKGUsdCxyKXtyZXR1cm4gdS5lYWNoKHIubWVtYmVycyxmdW5jdGlvbihyLG4pe2lmKCEwPT09bi5ob3N0TGFiZWwpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0W3JdfHxcIlwiPT09dFtyXSl0aHJvdyB1LmVycm9yKG5ldyBFcnJvcix7bWVzc2FnZTpcIlBhcmFtZXRlciBcIityK1wiIHNob3VsZCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcuXCIsY29kZTpcIkludmFsaWRQYXJhbWV0ZXJcIn0pO3ZhciBpPW5ldyBSZWdFeHAoXCJcXFxce1wiK3IrXCJcXFxcfVwiLFwiZ1wiKTtlPWUucmVwbGFjZShpLHRbcl0pfX0pLGV9ZnVuY3Rpb24gcyhlLHQpe2UuaG9zdCYmKGUuaG9zdD10K2UuaG9zdCksZS5ob3N0bmFtZSYmKGUuaG9zdG5hbWU9dCtlLmhvc3RuYW1lKX1mdW5jdGlvbiBhKGUpe3ZhciB0PWUuc3BsaXQoXCIuXCIpLHI9L15bYS16QS1aMC05XXsxfSR8XlthLXpBLVowLTldW2EtekEtWjAtOVxcLV0qW2EtekEtWjAtOV0kLzt1LmFycmF5RWFjaCh0LGZ1bmN0aW9uKGUpe2lmKCFlLmxlbmd0aHx8ZS5sZW5ndGg8MXx8ZS5sZW5ndGg+NjMpdGhyb3cgdS5lcnJvcihuZXcgRXJyb3Ise2NvZGU6XCJWYWxpZGF0aW9uRXJyb3JcIixtZXNzYWdlOlwiSG9zdG5hbWUgbGFiZWwgbGVuZ3RoIHNob3VsZCBiZSBiZXR3ZWVuIDEgdG8gNjMgY2hhcmFjdGVycywgaW5jbHVzaXZlLlwifSk7aWYoIXIudGVzdChlKSl0aHJvdyBjLnV0aWwuZXJyb3IobmV3IEVycm9yLHtjb2RlOlwiVmFsaWRhdGlvbkVycm9yXCIsbWVzc2FnZTplK1wiIGlzIG5vdCBob3N0bmFtZSBjb21wYXRpYmxlLlwifSl9KX12YXIgdT1lKFwiLi4vdXRpbFwiKSxjPWUoXCIuLi9jb3JlXCIpO3QuZXhwb3J0cz17cG9wdWxhdGVIb3N0UHJlZml4Om59fSx7XCIuLi9jb3JlXCI6MTksXCIuLi91dGlsXCI6NzJ9XSw0NzpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oZSl7dmFyIHQ9ZS5odHRwUmVxdWVzdCxyPWUuc2VydmljZS5hcGksbj1yLnRhcmdldFByZWZpeCtcIi5cIityLm9wZXJhdGlvbnNbZS5vcGVyYXRpb25dLm5hbWUsaT1yLmpzb25WZXJzaW9ufHxcIjEuMFwiLG89ci5vcGVyYXRpb25zW2Uub3BlcmF0aW9uXS5pbnB1dCxzPW5ldyBhOzE9PT1pJiYoaT1cIjEuMFwiKSx0LmJvZHk9cy5idWlsZChlLnBhcmFtc3x8e30sbyksdC5oZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdPVwiYXBwbGljYXRpb24veC1hbXotanNvbi1cIitpLHQuaGVhZGVyc1tcIlgtQW16LVRhcmdldFwiXT1uLGMoZSl9ZnVuY3Rpb24gaShlKXt2YXIgdD17fSxyPWUuaHR0cFJlc3BvbnNlO2lmKHQuY29kZT1yLmhlYWRlcnNbXCJ4LWFtem4tZXJyb3J0eXBlXCJdfHxcIlVua25vd25FcnJvclwiLFwic3RyaW5nXCI9PXR5cGVvZiB0LmNvZGUmJih0LmNvZGU9dC5jb2RlLnNwbGl0KFwiOlwiKVswXSksci5ib2R5Lmxlbmd0aD4wKXRyeXt2YXIgbj1KU09OLnBhcnNlKHIuYm9keS50b1N0cmluZygpKTsobi5fX3R5cGV8fG4uY29kZSkmJih0LmNvZGU9KG4uX190eXBlfHxuLmNvZGUpLnNwbGl0KFwiI1wiKS5wb3AoKSksXCJSZXF1ZXN0RW50aXR5VG9vTGFyZ2VcIj09PXQuY29kZT90Lm1lc3NhZ2U9XCJSZXF1ZXN0IGJvZHkgbXVzdCBiZSBsZXNzIHRoYW4gMSBNQlwiOnQubWVzc2FnZT1uLm1lc3NhZ2V8fG4uTWVzc2FnZXx8bnVsbH1jYXRjaChuKXt0LnN0YXR1c0NvZGU9ci5zdGF0dXNDb2RlLHQubWVzc2FnZT1yLnN0YXR1c01lc3NhZ2V9ZWxzZSB0LnN0YXR1c0NvZGU9ci5zdGF0dXNDb2RlLHQubWVzc2FnZT1yLnN0YXR1c0NvZGUudG9TdHJpbmcoKTtlLmVycm9yPXMuZXJyb3IobmV3IEVycm9yLHQpfWZ1bmN0aW9uIG8oZSl7dmFyIHQ9ZS5odHRwUmVzcG9uc2UuYm9keS50b1N0cmluZygpfHxcInt9XCI7aWYoITE9PT1lLnJlcXVlc3Quc2VydmljZS5jb25maWcuY29udmVydFJlc3BvbnNlVHlwZXMpZS5kYXRhPUpTT04ucGFyc2UodCk7ZWxzZXt2YXIgcj1lLnJlcXVlc3Quc2VydmljZS5hcGkub3BlcmF0aW9uc1tlLnJlcXVlc3Qub3BlcmF0aW9uXSxuPXIub3V0cHV0fHx7fSxpPW5ldyB1O2UuZGF0YT1pLnBhcnNlKHQsbil9fXZhciBzPWUoXCIuLi91dGlsXCIpLGE9ZShcIi4uL2pzb24vYnVpbGRlclwiKSx1PWUoXCIuLi9qc29uL3BhcnNlclwiKSxjPWUoXCIuL2hlbHBlcnNcIikucG9wdWxhdGVIb3N0UHJlZml4O3QuZXhwb3J0cz17YnVpbGRSZXF1ZXN0Om4sZXh0cmFjdEVycm9yOmksZXh0cmFjdERhdGE6b319LHtcIi4uL2pzb24vYnVpbGRlclwiOjM3LFwiLi4vanNvbi9wYXJzZXJcIjozOCxcIi4uL3V0aWxcIjo3MixcIi4vaGVscGVyc1wiOjQ2fV0sNDg6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKGUpe3ZhciB0PWUuc2VydmljZS5hcGkub3BlcmF0aW9uc1tlLm9wZXJhdGlvbl0scj1lLmh0dHBSZXF1ZXN0O3IuaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXT1cImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD11dGYtOFwiLHIucGFyYW1zPXtWZXJzaW9uOmUuc2VydmljZS5hcGkuYXBpVmVyc2lvbixBY3Rpb246dC5uYW1lfSwobmV3IHUpLnNlcmlhbGl6ZShlLnBhcmFtcyx0LmlucHV0LGZ1bmN0aW9uKGUsdCl7ci5wYXJhbXNbZV09dH0pLHIuYm9keT1hLnF1ZXJ5UGFyYW1zVG9TdHJpbmcoci5wYXJhbXMpLGwoZSl9ZnVuY3Rpb24gaShlKXt2YXIgdCxyPWUuaHR0cFJlc3BvbnNlLmJvZHkudG9TdHJpbmcoKTtpZihyLm1hdGNoKFwiPFVua25vd25PcGVyYXRpb25FeGNlcHRpb25cIikpdD17Q29kZTpcIlVua25vd25PcGVyYXRpb25cIixNZXNzYWdlOlwiVW5rbm93biBvcGVyYXRpb24gXCIrZS5yZXF1ZXN0Lm9wZXJhdGlvbn07ZWxzZSB0cnl7dD0obmV3IHMuWE1MLlBhcnNlcikucGFyc2Uocil9Y2F0Y2gocil7dD17Q29kZTplLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlLE1lc3NhZ2U6ZS5odHRwUmVzcG9uc2Uuc3RhdHVzTWVzc2FnZX19dC5yZXF1ZXN0SWQmJiFlLnJlcXVlc3RJZCYmKGUucmVxdWVzdElkPXQucmVxdWVzdElkKSx0LkVycm9ycyYmKHQ9dC5FcnJvcnMpLHQuRXJyb3ImJih0PXQuRXJyb3IpLHQuQ29kZT9lLmVycm9yPWEuZXJyb3IobmV3IEVycm9yLHtjb2RlOnQuQ29kZSxtZXNzYWdlOnQuTWVzc2FnZX0pOmUuZXJyb3I9YS5lcnJvcihuZXcgRXJyb3Ise2NvZGU6ZS5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSxtZXNzYWdlOm51bGx9KX1mdW5jdGlvbiBvKGUpe3ZhciB0PWUucmVxdWVzdCxyPXQuc2VydmljZS5hcGkub3BlcmF0aW9uc1t0Lm9wZXJhdGlvbl0sbj1yLm91dHB1dHx8e30saT1uO2lmKGkucmVzdWx0V3JhcHBlcil7dmFyIG89Yy5jcmVhdGUoe3R5cGU6XCJzdHJ1Y3R1cmVcIn0pO28ubWVtYmVyc1tpLnJlc3VsdFdyYXBwZXJdPW4sby5tZW1iZXJOYW1lcz1baS5yZXN1bHRXcmFwcGVyXSxhLnByb3BlcnR5KG4sXCJuYW1lXCIsbi5yZXN1bHRXcmFwcGVyKSxuPW99dmFyIHU9bmV3IHMuWE1MLlBhcnNlcjtpZihuJiZuLm1lbWJlcnMmJiFuLm1lbWJlcnMuX1hBTVpSZXF1ZXN0SWQpe3ZhciBsPWMuY3JlYXRlKHt0eXBlOlwic3RyaW5nXCJ9LHthcGk6e3Byb3RvY29sOlwicXVlcnlcIn19LFwicmVxdWVzdElkXCIpO24ubWVtYmVycy5fWEFNWlJlcXVlc3RJZD1sfXZhciBwPXUucGFyc2UoZS5odHRwUmVzcG9uc2UuYm9keS50b1N0cmluZygpLG4pO2UucmVxdWVzdElkPXAuX1hBTVpSZXF1ZXN0SWR8fHAucmVxdWVzdElkLHAuX1hBTVpSZXF1ZXN0SWQmJmRlbGV0ZSBwLl9YQU1aUmVxdWVzdElkLGkucmVzdWx0V3JhcHBlciYmcFtpLnJlc3VsdFdyYXBwZXJdJiYoYS51cGRhdGUocCxwW2kucmVzdWx0V3JhcHBlcl0pLGRlbGV0ZSBwW2kucmVzdWx0V3JhcHBlcl0pLGUuZGF0YT1wfXZhciBzPWUoXCIuLi9jb3JlXCIpLGE9ZShcIi4uL3V0aWxcIiksdT1lKFwiLi4vcXVlcnkvcXVlcnlfcGFyYW1fc2VyaWFsaXplclwiKSxjPWUoXCIuLi9tb2RlbC9zaGFwZVwiKSxsPWUoXCIuL2hlbHBlcnNcIikucG9wdWxhdGVIb3N0UHJlZml4O3QuZXhwb3J0cz17YnVpbGRSZXF1ZXN0Om4sZXh0cmFjdEVycm9yOmksZXh0cmFjdERhdGE6b319LHtcIi4uL2NvcmVcIjoxOSxcIi4uL21vZGVsL3NoYXBlXCI6NDQsXCIuLi9xdWVyeS9xdWVyeV9wYXJhbV9zZXJpYWxpemVyXCI6NTIsXCIuLi91dGlsXCI6NzIsXCIuL2hlbHBlcnNcIjo0Nn1dLDQ5OltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlKXtlLmh0dHBSZXF1ZXN0Lm1ldGhvZD1lLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbZS5vcGVyYXRpb25dLmh0dHBNZXRob2R9ZnVuY3Rpb24gaShlLHQscixuKXt2YXIgaT1bZSx0XS5qb2luKFwiL1wiKTtpPWkucmVwbGFjZSgvXFwvKy9nLFwiL1wiKTt2YXIgbz17fSxzPSExO2lmKGwuZWFjaChyLm1lbWJlcnMsZnVuY3Rpb24oZSx0KXt2YXIgcj1uW2VdO2lmKG51bGwhPT1yJiZ2b2lkIDAhPT1yKWlmKFwidXJpXCI9PT10LmxvY2F0aW9uKXt2YXIgYT1uZXcgUmVnRXhwKFwiXFxcXHtcIit0Lm5hbWUrXCIoXFxcXCspP1xcXFx9XCIpO2k9aS5yZXBsYWNlKGEsZnVuY3Rpb24oZSx0KXtyZXR1cm4odD9sLnVyaUVzY2FwZVBhdGg6bC51cmlFc2NhcGUpKFN0cmluZyhyKSl9KX1lbHNlXCJxdWVyeXN0cmluZ1wiPT09dC5sb2NhdGlvbiYmKHM9ITAsXCJsaXN0XCI9PT10LnR5cGU/b1t0Lm5hbWVdPXIubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBsLnVyaUVzY2FwZSh0Lm1lbWJlci50b1dpcmVGb3JtYXQoZSkudG9TdHJpbmcoKSl9KTpcIm1hcFwiPT09dC50eXBlP2wuZWFjaChyLGZ1bmN0aW9uKGUsdCl7QXJyYXkuaXNBcnJheSh0KT9vW2VdPXQubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBsLnVyaUVzY2FwZShTdHJpbmcoZSkpfSk6b1tlXT1sLnVyaUVzY2FwZShTdHJpbmcodCkpfSk6b1t0Lm5hbWVdPWwudXJpRXNjYXBlKHQudG9XaXJlRm9ybWF0KHIpLnRvU3RyaW5nKCkpKX0pLHMpe2krPWkuaW5kZXhPZihcIj9cIik+PTA/XCImXCI6XCI/XCI7dmFyIGE9W107bC5hcnJheUVhY2goT2JqZWN0LmtleXMobykuc29ydCgpLGZ1bmN0aW9uKGUpe0FycmF5LmlzQXJyYXkob1tlXSl8fChvW2VdPVtvW2VdXSk7Zm9yKHZhciB0PTA7dDxvW2VdLmxlbmd0aDt0KyspYS5wdXNoKGwudXJpRXNjYXBlKFN0cmluZyhlKSkrXCI9XCIrb1tlXVt0XSl9KSxpKz1hLmpvaW4oXCImXCIpfXJldHVybiBpfWZ1bmN0aW9uIG8oZSl7dmFyIHQ9ZS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW2Uub3BlcmF0aW9uXSxyPXQuaW5wdXQsbj1pKGUuaHR0cFJlcXVlc3QuZW5kcG9pbnQucGF0aCx0Lmh0dHBQYXRoLHIsZS5wYXJhbXMpO2UuaHR0cFJlcXVlc3QucGF0aD1ufWZ1bmN0aW9uIHMoZSl7dmFyIHQ9ZS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW2Uub3BlcmF0aW9uXTtsLmVhY2godC5pbnB1dC5tZW1iZXJzLGZ1bmN0aW9uKHQscil7dmFyIG49ZS5wYXJhbXNbdF07bnVsbCE9PW4mJnZvaWQgMCE9PW4mJihcImhlYWRlcnNcIj09PXIubG9jYXRpb24mJlwibWFwXCI9PT1yLnR5cGU/bC5lYWNoKG4sZnVuY3Rpb24odCxuKXtlLmh0dHBSZXF1ZXN0LmhlYWRlcnNbci5uYW1lK3RdPW59KTpcImhlYWRlclwiPT09ci5sb2NhdGlvbiYmKG49ci50b1dpcmVGb3JtYXQobikudG9TdHJpbmcoKSxyLmlzSnNvblZhbHVlJiYobj1sLmJhc2U2NC5lbmNvZGUobikpLGUuaHR0cFJlcXVlc3QuaGVhZGVyc1tyLm5hbWVdPW4pKX0pfWZ1bmN0aW9uIGEoZSl7bihlKSxvKGUpLHMoZSkscChlKX1mdW5jdGlvbiB1KCl7fWZ1bmN0aW9uIGMoZSl7dmFyIHQ9ZS5yZXF1ZXN0LHI9e30sbj1lLmh0dHBSZXNwb25zZSxpPXQuc2VydmljZS5hcGkub3BlcmF0aW9uc1t0Lm9wZXJhdGlvbl0sbz1pLm91dHB1dCxzPXt9O2wuZWFjaChuLmhlYWRlcnMsZnVuY3Rpb24oZSx0KXtcbnNbZS50b0xvd2VyQ2FzZSgpXT10fSksbC5lYWNoKG8ubWVtYmVycyxmdW5jdGlvbihlLHQpe3ZhciBpPSh0Lm5hbWV8fGUpLnRvTG93ZXJDYXNlKCk7aWYoXCJoZWFkZXJzXCI9PT10LmxvY2F0aW9uJiZcIm1hcFwiPT09dC50eXBlKXtyW2VdPXt9O3ZhciBvPXQuaXNMb2NhdGlvbk5hbWU/dC5uYW1lOlwiXCIsYT1uZXcgUmVnRXhwKFwiXlwiK28rXCIoLispXCIsXCJpXCIpO2wuZWFjaChuLmhlYWRlcnMsZnVuY3Rpb24odCxuKXt2YXIgaT10Lm1hdGNoKGEpO251bGwhPT1pJiYocltlXVtpWzFdXT1uKX0pfWVsc2UgaWYoXCJoZWFkZXJcIj09PXQubG9jYXRpb24pe2lmKHZvaWQgMCE9PXNbaV0pe3ZhciB1PXQuaXNKc29uVmFsdWU/bC5iYXNlNjQuZGVjb2RlKHNbaV0pOnNbaV07cltlXT10LnRvVHlwZSh1KX19ZWxzZVwic3RhdHVzQ29kZVwiPT09dC5sb2NhdGlvbiYmKHJbZV09cGFyc2VJbnQobi5zdGF0dXNDb2RlLDEwKSl9KSxlLmRhdGE9cn12YXIgbD1lKFwiLi4vdXRpbFwiKSxwPWUoXCIuL2hlbHBlcnNcIikucG9wdWxhdGVIb3N0UHJlZml4O3QuZXhwb3J0cz17YnVpbGRSZXF1ZXN0OmEsZXh0cmFjdEVycm9yOnUsZXh0cmFjdERhdGE6YyxnZW5lcmF0ZVVSSTppfX0se1wiLi4vdXRpbFwiOjcyLFwiLi9oZWxwZXJzXCI6NDZ9XSw1MDpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oZSl7dmFyIHQ9bmV3IHAscj1lLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbZS5vcGVyYXRpb25dLmlucHV0O2lmKHIucGF5bG9hZCl7dmFyIG49e30sbz1yLm1lbWJlcnNbci5wYXlsb2FkXTtpZih2b2lkIDA9PT0obj1lLnBhcmFtc1tyLnBheWxvYWRdKSlyZXR1cm47XCJzdHJ1Y3R1cmVcIj09PW8udHlwZT8oZS5odHRwUmVxdWVzdC5ib2R5PXQuYnVpbGQobixvKSxpKGUpKTooZS5odHRwUmVxdWVzdC5ib2R5PW4sKFwiYmluYXJ5XCI9PT1vLnR5cGV8fG8uaXNTdHJlYW1pbmcpJiZpKGUsITApKX1lbHNle3ZhciBzPXQuYnVpbGQoZS5wYXJhbXMscik7XCJ7fVwiPT09cyYmXCJHRVRcIj09PWUuaHR0cFJlcXVlc3QubWV0aG9kfHwoZS5odHRwUmVxdWVzdC5ib2R5PXMpLGkoZSl9fWZ1bmN0aW9uIGkoZSx0KXt2YXIgcj1lLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbZS5vcGVyYXRpb25dO3IuaW5wdXQ7aWYoIWUuaHR0cFJlcXVlc3QuaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSl7dmFyIG49dD9cImJpbmFyeS9vY3RldC1zdHJlYW1cIjpcImFwcGxpY2F0aW9uL2pzb25cIjtlLmh0dHBSZXF1ZXN0LmhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl09bn19ZnVuY3Rpb24gbyhlKXtjLmJ1aWxkUmVxdWVzdChlKSxbXCJIRUFEXCIsXCJERUxFVEVcIl0uaW5kZXhPZihlLmh0dHBSZXF1ZXN0Lm1ldGhvZCk8MCYmbihlKX1mdW5jdGlvbiBzKGUpe2wuZXh0cmFjdEVycm9yKGUpfWZ1bmN0aW9uIGEoZSl7Yy5leHRyYWN0RGF0YShlKTt2YXIgdCxyPWUucmVxdWVzdCxuPXIuc2VydmljZS5hcGkub3BlcmF0aW9uc1tyLm9wZXJhdGlvbl0saT1yLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbci5vcGVyYXRpb25dLm91dHB1dHx8e307bi5oYXNFdmVudE91dHB1dDtpZihpLnBheWxvYWQpe3ZhciBvPWkubWVtYmVyc1tpLnBheWxvYWRdLHM9ZS5odHRwUmVzcG9uc2UuYm9keTtpZihvLmlzRXZlbnRTdHJlYW0pdD1uZXcgaCxlLmRhdGFbcGF5bG9hZF09dS5jcmVhdGVFdmVudFN0cmVhbSgyPT09QVdTLkh0dHBDbGllbnQuc3RyZWFtc0FwaVZlcnNpb24/ZS5odHRwUmVzcG9uc2Uuc3RyZWFtOnMsdCxvKTtlbHNlIGlmKFwic3RydWN0dXJlXCI9PT1vLnR5cGV8fFwibGlzdFwiPT09by50eXBlKXt2YXIgdD1uZXcgaDtlLmRhdGFbaS5wYXlsb2FkXT10LnBhcnNlKHMsbyl9ZWxzZVwiYmluYXJ5XCI9PT1vLnR5cGV8fG8uaXNTdHJlYW1pbmc/ZS5kYXRhW2kucGF5bG9hZF09czplLmRhdGFbaS5wYXlsb2FkXT1vLnRvVHlwZShzKX1lbHNle3ZhciBhPWUuZGF0YTtsLmV4dHJhY3REYXRhKGUpLGUuZGF0YT11Lm1lcmdlKGEsZS5kYXRhKX19dmFyIHU9ZShcIi4uL3V0aWxcIiksYz1lKFwiLi9yZXN0XCIpLGw9ZShcIi4vanNvblwiKSxwPWUoXCIuLi9qc29uL2J1aWxkZXJcIiksaD1lKFwiLi4vanNvbi9wYXJzZXJcIik7dC5leHBvcnRzPXtidWlsZFJlcXVlc3Q6byxleHRyYWN0RXJyb3I6cyxleHRyYWN0RGF0YTphfX0se1wiLi4vanNvbi9idWlsZGVyXCI6MzcsXCIuLi9qc29uL3BhcnNlclwiOjM4LFwiLi4vdXRpbFwiOjcyLFwiLi9qc29uXCI6NDcsXCIuL3Jlc3RcIjo0OX1dLDUxOltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlKXt2YXIgdD1lLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbZS5vcGVyYXRpb25dLmlucHV0LHI9bmV3IGEuWE1MLkJ1aWxkZXIsbj1lLnBhcmFtcyxpPXQucGF5bG9hZDtpZihpKXt2YXIgbz10Lm1lbWJlcnNbaV07aWYodm9pZCAwPT09KG49bltpXSkpcmV0dXJuO2lmKFwic3RydWN0dXJlXCI9PT1vLnR5cGUpe3ZhciBzPW8ubmFtZTtlLmh0dHBSZXF1ZXN0LmJvZHk9ci50b1hNTChuLG8scywhMCl9ZWxzZSBlLmh0dHBSZXF1ZXN0LmJvZHk9bn1lbHNlIGUuaHR0cFJlcXVlc3QuYm9keT1yLnRvWE1MKG4sdCx0Lm5hbWV8fHQuc2hhcGV8fHUuc3RyaW5nLnVwcGVyRmlyc3QoZS5vcGVyYXRpb24pK1wiUmVxdWVzdFwiKX1mdW5jdGlvbiBpKGUpe2MuYnVpbGRSZXF1ZXN0KGUpLFtcIkdFVFwiLFwiSEVBRFwiXS5pbmRleE9mKGUuaHR0cFJlcXVlc3QubWV0aG9kKTwwJiZuKGUpfWZ1bmN0aW9uIG8oZSl7Yy5leHRyYWN0RXJyb3IoZSk7dmFyIHQ7dHJ5e3Q9KG5ldyBhLlhNTC5QYXJzZXIpLnBhcnNlKGUuaHR0cFJlc3BvbnNlLmJvZHkudG9TdHJpbmcoKSl9Y2F0Y2gocil7dD17Q29kZTplLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlLE1lc3NhZ2U6ZS5odHRwUmVzcG9uc2Uuc3RhdHVzTWVzc2FnZX19dC5FcnJvcnMmJih0PXQuRXJyb3JzKSx0LkVycm9yJiYodD10LkVycm9yKSx0LkNvZGU/ZS5lcnJvcj11LmVycm9yKG5ldyBFcnJvcix7Y29kZTp0LkNvZGUsbWVzc2FnZTp0Lk1lc3NhZ2V9KTplLmVycm9yPXUuZXJyb3IobmV3IEVycm9yLHtjb2RlOmUuaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUsbWVzc2FnZTpudWxsfSl9ZnVuY3Rpb24gcyhlKXtjLmV4dHJhY3REYXRhKGUpO3ZhciB0LHI9ZS5yZXF1ZXN0LG49ZS5odHRwUmVzcG9uc2UuYm9keSxpPXIuc2VydmljZS5hcGkub3BlcmF0aW9uc1tyLm9wZXJhdGlvbl0sbz1pLm91dHB1dCxzPShpLmhhc0V2ZW50T3V0cHV0LG8ucGF5bG9hZCk7aWYocyl7dmFyIGw9by5tZW1iZXJzW3NdO2wuaXNFdmVudFN0cmVhbT8odD1uZXcgYS5YTUwuUGFyc2VyLGUuZGF0YVtzXT11LmNyZWF0ZUV2ZW50U3RyZWFtKDI9PT1hLkh0dHBDbGllbnQuc3RyZWFtc0FwaVZlcnNpb24/ZS5odHRwUmVzcG9uc2Uuc3RyZWFtOmUuaHR0cFJlc3BvbnNlLmJvZHksdCxsKSk6XCJzdHJ1Y3R1cmVcIj09PWwudHlwZT8odD1uZXcgYS5YTUwuUGFyc2VyLGUuZGF0YVtzXT10LnBhcnNlKG4udG9TdHJpbmcoKSxsKSk6XCJiaW5hcnlcIj09PWwudHlwZXx8bC5pc1N0cmVhbWluZz9lLmRhdGFbc109bjplLmRhdGFbc109bC50b1R5cGUobil9ZWxzZSBpZihuLmxlbmd0aD4wKXt0PW5ldyBhLlhNTC5QYXJzZXI7dmFyIHA9dC5wYXJzZShuLnRvU3RyaW5nKCksbyk7dS51cGRhdGUoZS5kYXRhLHApfX12YXIgYT1lKFwiLi4vY29yZVwiKSx1PWUoXCIuLi91dGlsXCIpLGM9ZShcIi4vcmVzdFwiKTt0LmV4cG9ydHM9e2J1aWxkUmVxdWVzdDppLGV4dHJhY3RFcnJvcjpvLGV4dHJhY3REYXRhOnN9fSx7XCIuLi9jb3JlXCI6MTksXCIuLi91dGlsXCI6NzIsXCIuL3Jlc3RcIjo0OX1dLDUyOltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbigpe31mdW5jdGlvbiBpKGUpe3JldHVybiBlLmlzUXVlcnlOYW1lfHxcImVjMlwiIT09ZS5hcGkucHJvdG9jb2w/ZS5uYW1lOmUubmFtZVswXS50b1VwcGVyQ2FzZSgpK2UubmFtZS5zdWJzdHIoMSl9ZnVuY3Rpb24gbyhlLHQscixuKXtjLmVhY2goci5tZW1iZXJzLGZ1bmN0aW9uKHIsbyl7dmFyIHM9dFtyXTtpZihudWxsIT09cyYmdm9pZCAwIT09cyl7dmFyIGE9aShvKTthPWU/ZStcIi5cIithOmEsdShhLHMsbyxuKX19KX1mdW5jdGlvbiBzKGUsdCxyLG4pe3ZhciBpPTE7Yy5lYWNoKHQsZnVuY3Rpb24odCxvKXt2YXIgcz1yLmZsYXR0ZW5lZD9cIi5cIjpcIi5lbnRyeS5cIixhPXMraSsrK1wiLlwiLGM9YSsoci5rZXkubmFtZXx8XCJrZXlcIiksbD1hKyhyLnZhbHVlLm5hbWV8fFwidmFsdWVcIik7dShlK2MsdCxyLmtleSxuKSx1KGUrbCxvLHIudmFsdWUsbil9KX1mdW5jdGlvbiBhKGUsdCxyLG4pe3ZhciBvPXIubWVtYmVyfHx7fTtpZigwPT09dC5sZW5ndGgpcmV0dXJuIHZvaWQgbi5jYWxsKHRoaXMsZSxudWxsKTtjLmFycmF5RWFjaCh0LGZ1bmN0aW9uKHQscyl7dmFyIGE9XCIuXCIrKHMrMSk7aWYoXCJlYzJcIj09PXIuYXBpLnByb3RvY29sKWErPVwiXCI7ZWxzZSBpZihyLmZsYXR0ZW5lZCl7aWYoby5uYW1lKXt2YXIgYz1lLnNwbGl0KFwiLlwiKTtjLnBvcCgpLGMucHVzaChpKG8pKSxlPWMuam9pbihcIi5cIil9fWVsc2UgYT1cIi5cIisoby5uYW1lP28ubmFtZTpcIm1lbWJlclwiKSthO3UoZSthLHQsbyxuKX0pfWZ1bmN0aW9uIHUoZSx0LHIsbil7bnVsbCE9PXQmJnZvaWQgMCE9PXQmJihcInN0cnVjdHVyZVwiPT09ci50eXBlP28oZSx0LHIsbik6XCJsaXN0XCI9PT1yLnR5cGU/YShlLHQscixuKTpcIm1hcFwiPT09ci50eXBlP3MoZSx0LHIsbik6bihlLHIudG9XaXJlRm9ybWF0KHQpLnRvU3RyaW5nKCkpKX12YXIgYz1lKFwiLi4vdXRpbFwiKTtuLnByb3RvdHlwZS5zZXJpYWxpemU9ZnVuY3Rpb24oZSx0LHIpe28oXCJcIixlLHQscil9LHQuZXhwb3J0cz1ufSx7XCIuLi91dGlsXCI6NzJ9XSw1MzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17bm93OmZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3c/cGVyZm9ybWFuY2Uubm93KCk6RGF0ZS5ub3coKX19fSx7fV0sNTQ6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKGUpe2lmKCFlKXJldHVybiBudWxsO3ZhciB0PWUuc3BsaXQoXCItXCIpO3JldHVybiB0Lmxlbmd0aDwzP251bGw6dC5zbGljZSgwLHQubGVuZ3RoLTIpLmpvaW4oXCItXCIpK1wiLSpcIn1mdW5jdGlvbiBpKGUpe3ZhciB0PWUuY29uZmlnLnJlZ2lvbixyPW4odCksaT1lLmFwaS5lbmRwb2ludFByZWZpeDtyZXR1cm5bW3QsaV0sW3IsaV0sW3QsXCIqXCJdLFtyLFwiKlwiXSxbXCIqXCIsaV0sW1wiKlwiLFwiKlwiXV0ubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlWzBdJiZlWzFdP2Uuam9pbihcIi9cIik6bnVsbH0pfWZ1bmN0aW9uIG8oZSx0KXthLmVhY2godCxmdW5jdGlvbih0LHIpe1wiZ2xvYmFsRW5kcG9pbnRcIiE9PXQmJih2b2lkIDAhPT1lLmNvbmZpZ1t0XSYmbnVsbCE9PWUuY29uZmlnW3RdfHwoZS5jb25maWdbdF09cikpfSl9ZnVuY3Rpb24gcyhlKXtmb3IodmFyIHQ9aShlKSxyPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07aWYobiYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHUucnVsZXMsbikpe3ZhciBzPXUucnVsZXNbbl07cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHMmJihzPXUucGF0dGVybnNbc10pLGUuY29uZmlnLnVzZUR1YWxzdGFjayYmYS5pc0R1YWxzdGFja0F2YWlsYWJsZShlKSYmKHM9YS5jb3B5KHMpLHMuZW5kcG9pbnQ9XCJ7c2VydmljZX0uZHVhbHN0YWNrLntyZWdpb259LmFtYXpvbmF3cy5jb21cIiksZS5pc0dsb2JhbEVuZHBvaW50PSEhcy5nbG9iYWxFbmRwb2ludCxzLnNpZ25hdHVyZVZlcnNpb258fChzLnNpZ25hdHVyZVZlcnNpb249XCJ2NFwiKSx2b2lkIG8oZSxzKX19fXZhciBhPWUoXCIuL3V0aWxcIiksdT1lKFwiLi9yZWdpb25fY29uZmlnX2RhdGEuanNvblwiKTt0LmV4cG9ydHM9c30se1wiLi9yZWdpb25fY29uZmlnX2RhdGEuanNvblwiOjU1LFwiLi91dGlsXCI6NzJ9XSw1NTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17cnVsZXM6e1wiKi8qXCI6e2VuZHBvaW50Olwie3NlcnZpY2V9LntyZWdpb259LmFtYXpvbmF3cy5jb21cIn0sXCJjbi0qLypcIjp7ZW5kcG9pbnQ6XCJ7c2VydmljZX0ue3JlZ2lvbn0uYW1hem9uYXdzLmNvbS5jblwifSxcIiovYnVkZ2V0c1wiOlwiZ2xvYmFsU1NMXCIsXCIqL2Nsb3VkZnJvbnRcIjpcImdsb2JhbFNTTFwiLFwiKi9pYW1cIjpcImdsb2JhbFNTTFwiLFwiKi9zdHNcIjpcImdsb2JhbFNTTFwiLFwiKi9pbXBvcnRleHBvcnRcIjp7ZW5kcG9pbnQ6XCJ7c2VydmljZX0uYW1hem9uYXdzLmNvbVwiLHNpZ25hdHVyZVZlcnNpb246XCJ2MlwiLGdsb2JhbEVuZHBvaW50OiEwfSxcIiovcm91dGU1M1wiOntlbmRwb2ludDpcImh0dHBzOi8ve3NlcnZpY2V9LmFtYXpvbmF3cy5jb21cIixzaWduYXR1cmVWZXJzaW9uOlwidjNodHRwc1wiLGdsb2JhbEVuZHBvaW50OiEwfSxcIiovd2FmXCI6XCJnbG9iYWxTU0xcIixcInVzLWdvdi0qL2lhbVwiOlwiZ2xvYmFsR292Q2xvdWRcIixcInVzLWdvdi0qL3N0c1wiOntlbmRwb2ludDpcIntzZXJ2aWNlfS57cmVnaW9ufS5hbWF6b25hd3MuY29tXCJ9LFwidXMtZ292LXdlc3QtMS9zM1wiOlwiczNzaWduYXR1cmVcIixcInVzLXdlc3QtMS9zM1wiOlwiczNzaWduYXR1cmVcIixcInVzLXdlc3QtMi9zM1wiOlwiczNzaWduYXR1cmVcIixcImV1LXdlc3QtMS9zM1wiOlwiczNzaWduYXR1cmVcIixcImFwLXNvdXRoZWFzdC0xL3MzXCI6XCJzM3NpZ25hdHVyZVwiLFwiYXAtc291dGhlYXN0LTIvczNcIjpcInMzc2lnbmF0dXJlXCIsXCJhcC1ub3J0aGVhc3QtMS9zM1wiOlwiczNzaWduYXR1cmVcIixcInNhLWVhc3QtMS9zM1wiOlwiczNzaWduYXR1cmVcIixcInVzLWVhc3QtMS9zM1wiOntlbmRwb2ludDpcIntzZXJ2aWNlfS5hbWF6b25hd3MuY29tXCIsc2lnbmF0dXJlVmVyc2lvbjpcInMzXCJ9LFwidXMtZWFzdC0xL3NkYlwiOntlbmRwb2ludDpcIntzZXJ2aWNlfS5hbWF6b25hd3MuY29tXCIsc2lnbmF0dXJlVmVyc2lvbjpcInYyXCJ9LFwiKi9zZGJcIjp7ZW5kcG9pbnQ6XCJ7c2VydmljZX0ue3JlZ2lvbn0uYW1hem9uYXdzLmNvbVwiLHNpZ25hdHVyZVZlcnNpb246XCJ2MlwifX0scGF0dGVybnM6e2dsb2JhbFNTTDp7ZW5kcG9pbnQ6XCJodHRwczovL3tzZXJ2aWNlfS5hbWF6b25hd3MuY29tXCIsZ2xvYmFsRW5kcG9pbnQ6ITB9LGdsb2JhbEdvdkNsb3VkOntlbmRwb2ludDpcIntzZXJ2aWNlfS51cy1nb3YuYW1hem9uYXdzLmNvbVwifSxzM3NpZ25hdHVyZTp7ZW5kcG9pbnQ6XCJ7c2VydmljZX0ue3JlZ2lvbn0uYW1hem9uYXdzLmNvbVwiLHNpZ25hdHVyZVZlcnNpb246XCJzM1wifX19fSx7fV0sNTY6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24odCl7ZnVuY3Rpb24gcihlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHUsZS5fYXNtLmN1cnJlbnRTdGF0ZSl9dmFyIG49ZShcIi4vY29yZVwiKSxpPWUoXCIuL3N0YXRlX21hY2hpbmVcIiksbz1uLnV0aWwuaW5oZXJpdCxzPW4udXRpbC5kb21haW4sYT1lKFwiam1lc3BhdGhcIiksdT17c3VjY2VzczoxLGVycm9yOjEsY29tcGxldGU6MX0sYz1uZXcgaTtjLnNldHVwU3RhdGVzPWZ1bmN0aW9uKCl7dmFyIGU9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO24uX2hhbHRIYW5kbGVyc09uRXJyb3I9ITEsbi5lbWl0KG4uX2FzbS5jdXJyZW50U3RhdGUsZnVuY3Rpb24oZSl7aWYoZSlpZihyKG4pKXtpZighKHMmJm4uZG9tYWluIGluc3RhbmNlb2Ygcy5Eb21haW4pKXRocm93IGU7ZS5kb21haW5FbWl0dGVyPW4sZS5kb21haW49bi5kb21haW4sZS5kb21haW5UaHJvd249ITEsbi5kb21haW4uZW1pdChcImVycm9yXCIsZSl9ZWxzZSBuLnJlc3BvbnNlLmVycm9yPWUsdChlKTtlbHNlIHQobi5yZXNwb25zZS5lcnJvcil9KX07dGhpcy5hZGRTdGF0ZShcInZhbGlkYXRlXCIsXCJidWlsZFwiLFwiZXJyb3JcIixlKSx0aGlzLmFkZFN0YXRlKFwiYnVpbGRcIixcImFmdGVyQnVpbGRcIixcInJlc3RhcnRcIixlKSx0aGlzLmFkZFN0YXRlKFwiYWZ0ZXJCdWlsZFwiLFwic2lnblwiLFwicmVzdGFydFwiLGUpLHRoaXMuYWRkU3RhdGUoXCJzaWduXCIsXCJzZW5kXCIsXCJyZXRyeVwiLGUpLHRoaXMuYWRkU3RhdGUoXCJyZXRyeVwiLFwiYWZ0ZXJSZXRyeVwiLFwiYWZ0ZXJSZXRyeVwiLGUpLHRoaXMuYWRkU3RhdGUoXCJhZnRlclJldHJ5XCIsXCJzaWduXCIsXCJlcnJvclwiLGUpLHRoaXMuYWRkU3RhdGUoXCJzZW5kXCIsXCJ2YWxpZGF0ZVJlc3BvbnNlXCIsXCJyZXRyeVwiLGUpLHRoaXMuYWRkU3RhdGUoXCJ2YWxpZGF0ZVJlc3BvbnNlXCIsXCJleHRyYWN0RGF0YVwiLFwiZXh0cmFjdEVycm9yXCIsZSksdGhpcy5hZGRTdGF0ZShcImV4dHJhY3RFcnJvclwiLFwiZXh0cmFjdERhdGFcIixcInJldHJ5XCIsZSksdGhpcy5hZGRTdGF0ZShcImV4dHJhY3REYXRhXCIsXCJzdWNjZXNzXCIsXCJyZXRyeVwiLGUpLHRoaXMuYWRkU3RhdGUoXCJyZXN0YXJ0XCIsXCJidWlsZFwiLFwiZXJyb3JcIixlKSx0aGlzLmFkZFN0YXRlKFwic3VjY2Vzc1wiLFwiY29tcGxldGVcIixcImNvbXBsZXRlXCIsZSksdGhpcy5hZGRTdGF0ZShcImVycm9yXCIsXCJjb21wbGV0ZVwiLFwiY29tcGxldGVcIixlKSx0aGlzLmFkZFN0YXRlKFwiY29tcGxldGVcIixudWxsLG51bGwsZSl9LGMuc2V0dXBTdGF0ZXMoKSxuLlJlcXVlc3Q9byh7Y29uc3RydWN0b3I6ZnVuY3Rpb24oZSx0LHIpe3ZhciBvPWUuZW5kcG9pbnQsYT1lLmNvbmZpZy5yZWdpb24sdT1lLmNvbmZpZy5jdXN0b21Vc2VyQWdlbnQ7ZS5pc0dsb2JhbEVuZHBvaW50JiYoYT1cInVzLWVhc3QtMVwiKSx0aGlzLmRvbWFpbj1zJiZzLmFjdGl2ZSx0aGlzLnNlcnZpY2U9ZSx0aGlzLm9wZXJhdGlvbj10LHRoaXMucGFyYW1zPXJ8fHt9LHRoaXMuaHR0cFJlcXVlc3Q9bmV3IG4uSHR0cFJlcXVlc3QobyxhKSx0aGlzLmh0dHBSZXF1ZXN0LmFwcGVuZFRvVXNlckFnZW50KHUpLHRoaXMuc3RhcnRUaW1lPWUuZ2V0U2tld0NvcnJlY3RlZERhdGUoKSx0aGlzLnJlc3BvbnNlPW5ldyBuLlJlc3BvbnNlKHRoaXMpLHRoaXMuX2FzbT1uZXcgaShjLnN0YXRlcyxcInZhbGlkYXRlXCIpLHRoaXMuX2hhbHRIYW5kbGVyc09uRXJyb3I9ITEsbi5TZXF1ZW50aWFsRXhlY3V0b3IuY2FsbCh0aGlzKSx0aGlzLmVtaXQ9dGhpcy5lbWl0RXZlbnR9LHNlbmQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJih0aGlzLmh0dHBSZXF1ZXN0LmFwcGVuZFRvVXNlckFnZW50KFwiY2FsbGJhY2tcIiksdGhpcy5vbihcImNvbXBsZXRlXCIsZnVuY3Rpb24odCl7ZS5jYWxsKHQsdC5lcnJvcix0LmRhdGEpfSkpLHRoaXMucnVuVG8oKSx0aGlzLnJlc3BvbnNlfSxidWlsZDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5ydW5UbyhcInNlbmRcIixlKX0scnVuVG86ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5fYXNtLnJ1blRvKGUsdCx0aGlzKSx0aGlzfSxhYm9ydDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhcInZhbGlkYXRlUmVzcG9uc2VcIiksdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJleHRyYWN0RXJyb3JcIiksdGhpcy5vbihcInZhbGlkYXRlUmVzcG9uc2VcIixmdW5jdGlvbihlKXtlLmVycm9yPW4udXRpbC5lcnJvcihuZXcgRXJyb3IoXCJSZXF1ZXN0IGFib3J0ZWQgYnkgdXNlclwiKSx7Y29kZTpcIlJlcXVlc3RBYm9ydGVkRXJyb3JcIixyZXRyeWFibGU6ITF9KX0pLHRoaXMuaHR0cFJlcXVlc3Quc3RyZWFtJiYhdGhpcy5odHRwUmVxdWVzdC5zdHJlYW0uZGlkQ2FsbGJhY2smJih0aGlzLmh0dHBSZXF1ZXN0LnN0cmVhbS5hYm9ydCgpLHRoaXMuaHR0cFJlcXVlc3QuX2Fib3J0Q2FsbGJhY2s/dGhpcy5odHRwUmVxdWVzdC5fYWJvcnRDYWxsYmFjaygpOnRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKFwic2VuZFwiKSksdGhpc30sZWFjaFBhZ2U6ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChyKXtlLmNhbGwocixyLmVycm9yLHIuZGF0YSxmdW5jdGlvbihpKXshMSE9PWkmJihyLmhhc05leHRQYWdlKCk/ci5uZXh0UGFnZSgpLm9uKFwiY29tcGxldGVcIix0KS5zZW5kKCk6ZS5jYWxsKHIsbnVsbCxudWxsLG4udXRpbC5mbi5ub29wKSl9KX1lPW4udXRpbC5mbi5tYWtlQXN5bmMoZSwzKSx0aGlzLm9uKFwiY29tcGxldGVcIix0KS5zZW5kKCl9LGVhY2hJdGVtOmZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxpKXtpZih0KXJldHVybiBlKHQsbnVsbCk7aWYobnVsbD09PWkpcmV0dXJuIGUobnVsbCxudWxsKTt2YXIgbz1yLnNlcnZpY2UucGFnaW5hdGlvbkNvbmZpZyhyLm9wZXJhdGlvbikscz1vLnJlc3VsdEtleTtBcnJheS5pc0FycmF5KHMpJiYocz1zWzBdKTt2YXIgdT1hLnNlYXJjaChpLHMpLGM9ITA7cmV0dXJuIG4udXRpbC5hcnJheUVhY2godSxmdW5jdGlvbih0KXtpZighMT09PShjPWUobnVsbCx0KSkpcmV0dXJuIG4udXRpbC5hYm9ydH0pLGN9dmFyIHI9dGhpczt0aGlzLmVhY2hQYWdlKHQpfSxpc1BhZ2VhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLnNlcnZpY2UucGFnaW5hdGlvbkNvbmZpZyh0aGlzLm9wZXJhdGlvbil9LGNyZWF0ZVJlYWRTdHJlYW06ZnVuY3Rpb24oKXt2YXIgZT1uLnV0aWwuc3RyZWFtLHI9dGhpcyxpPW51bGw7cmV0dXJuIDI9PT1uLkh0dHBDbGllbnQuc3RyZWFtc0FwaVZlcnNpb24/KGk9bmV3IGUuUGFzc1Rocm91Z2gsdC5uZXh0VGljayhmdW5jdGlvbigpe3Iuc2VuZCgpfSkpOihpPW5ldyBlLlN0cmVhbSxpLnJlYWRhYmxlPSEwLGkuc2VudD0hMSxpLm9uKFwibmV3TGlzdGVuZXJcIixmdW5jdGlvbihlKXtpLnNlbnR8fFwiZGF0YVwiIT09ZXx8KGkuc2VudD0hMCx0Lm5leHRUaWNrKGZ1bmN0aW9uKCl7ci5zZW5kKCl9KSl9KSksdGhpcy5vbihcImVycm9yXCIsZnVuY3Rpb24oZSl7aS5lbWl0KFwiZXJyb3JcIixlKX0pLHRoaXMub24oXCJodHRwSGVhZGVyc1wiLGZ1bmN0aW9uKHQsbyxzKXtpZih0PDMwMCl7ci5yZW1vdmVMaXN0ZW5lcihcImh0dHBEYXRhXCIsbi5FdmVudExpc3RlbmVycy5Db3JlLkhUVFBfREFUQSksci5yZW1vdmVMaXN0ZW5lcihcImh0dHBFcnJvclwiLG4uRXZlbnRMaXN0ZW5lcnMuQ29yZS5IVFRQX0VSUk9SKSxyLm9uKFwiaHR0cEVycm9yXCIsZnVuY3Rpb24oZSl7cy5lcnJvcj1lLHMuZXJyb3IucmV0cnlhYmxlPSExfSk7dmFyIGEsdT0hMTtpZihcIkhFQURcIiE9PXIuaHR0cFJlcXVlc3QubWV0aG9kJiYoYT1wYXJzZUludChvW1wiY29udGVudC1sZW5ndGhcIl0sMTApKSx2b2lkIDAhPT1hJiYhaXNOYU4oYSkmJmE+PTApe3U9ITA7dmFyIGM9MH12YXIgbD1mdW5jdGlvbigpe3UmJmMhPT1hP2kuZW1pdChcImVycm9yXCIsbi51dGlsLmVycm9yKG5ldyBFcnJvcihcIlN0cmVhbSBjb250ZW50IGxlbmd0aCBtaXNtYXRjaC4gUmVjZWl2ZWQgXCIrYytcIiBvZiBcIithK1wiIGJ5dGVzLlwiKSx7Y29kZTpcIlN0cmVhbUNvbnRlbnRMZW5ndGhNaXNtYXRjaFwifSkpOjI9PT1uLkh0dHBDbGllbnQuc3RyZWFtc0FwaVZlcnNpb24/aS5lbmQoKTppLmVtaXQoXCJlbmRcIil9LHA9cy5odHRwUmVzcG9uc2UuY3JlYXRlVW5idWZmZXJlZFN0cmVhbSgpO2lmKDI9PT1uLkh0dHBDbGllbnQuc3RyZWFtc0FwaVZlcnNpb24paWYodSl7dmFyIGg9bmV3IGUuUGFzc1Rocm91Z2g7aC5fd3JpdGU9ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQubGVuZ3RoJiYoYys9dC5sZW5ndGgpLGUuUGFzc1Rocm91Z2gucHJvdG90eXBlLl93cml0ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGgub24oXCJlbmRcIixsKSxpLm9uKFwiZXJyb3JcIixmdW5jdGlvbihlKXt1PSExLHAudW5waXBlKGgpLGguZW1pdChcImVuZFwiKSxoLmVuZCgpfSkscC5waXBlKGgpLnBpcGUoaSx7ZW5kOiExfSl9ZWxzZSBwLnBpcGUoaSk7ZWxzZSB1JiZwLm9uKFwiZGF0YVwiLGZ1bmN0aW9uKGUpe2UmJmUubGVuZ3RoJiYoYys9ZS5sZW5ndGgpfSkscC5vbihcImRhdGFcIixmdW5jdGlvbihlKXtpLmVtaXQoXCJkYXRhXCIsZSl9KSxwLm9uKFwiZW5kXCIsbCk7cC5vbihcImVycm9yXCIsZnVuY3Rpb24oZSl7dT0hMSxpLmVtaXQoXCJlcnJvclwiLGUpfSl9fSksaX0sZW1pdEV2ZW50OmZ1bmN0aW9uKGUsdCxyKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYocj10LHQ9bnVsbCkscnx8KHI9ZnVuY3Rpb24oKXt9KSx0fHwodD10aGlzLmV2ZW50UGFyYW1ldGVycyhlLHRoaXMucmVzcG9uc2UpKSxuLlNlcXVlbnRpYWxFeGVjdXRvci5wcm90b3R5cGUuZW1pdC5jYWxsKHRoaXMsZSx0LGZ1bmN0aW9uKGUpe2UmJih0aGlzLnJlc3BvbnNlLmVycm9yPWUpLHIuY2FsbCh0aGlzLGUpfSl9LGV2ZW50UGFyYW1ldGVyczpmdW5jdGlvbihlKXtzd2l0Y2goZSl7Y2FzZVwicmVzdGFydFwiOmNhc2VcInZhbGlkYXRlXCI6Y2FzZVwic2lnblwiOmNhc2VcImJ1aWxkXCI6Y2FzZVwiYWZ0ZXJWYWxpZGF0ZVwiOmNhc2VcImFmdGVyQnVpbGRcIjpyZXR1cm5bdGhpc107Y2FzZVwiZXJyb3JcIjpyZXR1cm5bdGhpcy5yZXNwb25zZS5lcnJvcix0aGlzLnJlc3BvbnNlXTtkZWZhdWx0OnJldHVyblt0aGlzLnJlc3BvbnNlXX19LHByZXNpZ246ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8XCJmdW5jdGlvblwiIT10eXBlb2YgZXx8KHQ9ZSxlPW51bGwpLChuZXcgbi5TaWduZXJzLlByZXNpZ24pLnNpZ24odGhpcy50b0dldCgpLGUsdCl9LGlzUHJlc2lnbmVkOmZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmh0dHBSZXF1ZXN0LmhlYWRlcnMsXCJwcmVzaWduZWQtZXhwaXJlc1wiKX0sdG9VbmF1dGhlbnRpY2F0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdW5BdXRoZW50aWNhdGVkPSEwLHRoaXMucmVtb3ZlTGlzdGVuZXIoXCJ2YWxpZGF0ZVwiLG4uRXZlbnRMaXN0ZW5lcnMuQ29yZS5WQUxJREFURV9DUkVERU5USUFMUyksdGhpcy5yZW1vdmVMaXN0ZW5lcihcInNpZ25cIixuLkV2ZW50TGlzdGVuZXJzLkNvcmUuU0lHTiksdGhpc30sdG9HZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cInF1ZXJ5XCIhPT10aGlzLnNlcnZpY2UuYXBpLnByb3RvY29sJiZcImVjMlwiIT09dGhpcy5zZXJ2aWNlLmFwaS5wcm90b2NvbHx8KHRoaXMucmVtb3ZlTGlzdGVuZXIoXCJidWlsZFwiLHRoaXMuYnVpbGRBc0dldCksdGhpcy5hZGRMaXN0ZW5lcihcImJ1aWxkXCIsdGhpcy5idWlsZEFzR2V0KSksdGhpc30sYnVpbGRBc0dldDpmdW5jdGlvbihlKXtlLmh0dHBSZXF1ZXN0Lm1ldGhvZD1cIkdFVFwiLGUuaHR0cFJlcXVlc3QucGF0aD1lLnNlcnZpY2UuZW5kcG9pbnQucGF0aCtcIj9cIitlLmh0dHBSZXF1ZXN0LmJvZHksZS5odHRwUmVxdWVzdC5ib2R5PVwiXCIsZGVsZXRlIGUuaHR0cFJlcXVlc3QuaGVhZGVyc1tcIkNvbnRlbnQtTGVuZ3RoXCJdLGRlbGV0ZSBlLmh0dHBSZXF1ZXN0LmhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl19LGhhbHRIYW5kbGVyc09uRXJyb3I6ZnVuY3Rpb24oKXt0aGlzLl9oYWx0SGFuZGxlcnNPbkVycm9yPSEwfX0pLG4uUmVxdWVzdC5hZGRQcm9taXNlc1RvQ2xhc3M9ZnVuY3Rpb24oZSl7dGhpcy5wcm90b3R5cGUucHJvbWlzZT1mdW5jdGlvbigpe3ZhciB0PXRoaXM7cmV0dXJuIHRoaXMuaHR0cFJlcXVlc3QuYXBwZW5kVG9Vc2VyQWdlbnQoXCJwcm9taXNlXCIpLG5ldyBlKGZ1bmN0aW9uKGUscil7dC5vbihcImNvbXBsZXRlXCIsZnVuY3Rpb24odCl7dC5lcnJvcj9yKHQuZXJyb3IpOmUoT2JqZWN0LmRlZmluZVByb3BlcnR5KHQuZGF0YXx8e30sXCIkcmVzcG9uc2VcIix7dmFsdWU6dH0pKX0pLHQucnVuVG8oKX0pfX0sbi5SZXF1ZXN0LmRlbGV0ZVByb21pc2VzRnJvbUNsYXNzPWZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXMucHJvdG90eXBlLnByb21pc2V9LG4udXRpbC5hZGRQcm9taXNlcyhuLlJlcXVlc3QpLG4udXRpbC5taXhpbihuLlJlcXVlc3Qsbi5TZXF1ZW50aWFsRXhlY3V0b3IpfSkuY2FsbCh0aGlzLGUoXCJfcHJvY2Vzc1wiKSl9LHtcIi4vY29yZVwiOjE5LFwiLi9zdGF0ZV9tYWNoaW5lXCI6NzEsX3Byb2Nlc3M6ODYsam1lc3BhdGg6ODV9XSw1NzpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oZSl7dmFyIHQ9ZS5yZXF1ZXN0Ll93YWl0ZXIscj10LmNvbmZpZy5hY2NlcHRvcnMsbj0hMSxpPVwicmV0cnlcIjtyLmZvckVhY2goZnVuY3Rpb24ocil7aWYoIW4pe3ZhciBvPXQubWF0Y2hlcnNbci5tYXRjaGVyXTtvJiZvKGUsci5leHBlY3RlZCxyLmFyZ3VtZW50KSYmKG49ITAsaT1yLnN0YXRlKX19KSwhbiYmZS5lcnJvciYmKGk9XCJmYWlsdXJlXCIpLFwic3VjY2Vzc1wiPT09aT90LnNldFN1Y2Nlc3MoZSk6dC5zZXRFcnJvcihlLFwicmV0cnlcIj09PWkpfXZhciBpPWUoXCIuL2NvcmVcIiksbz1pLnV0aWwuaW5oZXJpdCxzPWUoXCJqbWVzcGF0aFwiKTtpLlJlc291cmNlV2FpdGVyPW8oe2NvbnN0cnVjdG9yOmZ1bmN0aW9uKGUsdCl7dGhpcy5zZXJ2aWNlPWUsdGhpcy5zdGF0ZT10LHRoaXMubG9hZFdhaXRlckNvbmZpZyh0aGlzLnN0YXRlKX0sc2VydmljZTpudWxsLHN0YXRlOm51bGwsY29uZmlnOm51bGwsbWF0Y2hlcnM6e3BhdGg6ZnVuY3Rpb24oZSx0LHIpe3RyeXt2YXIgbj1zLnNlYXJjaChlLmRhdGEscil9Y2F0Y2goZSl7cmV0dXJuITF9cmV0dXJuIHMuc3RyaWN0RGVlcEVxdWFsKG4sdCl9LHBhdGhBbGw6ZnVuY3Rpb24oZSx0LHIpe3RyeXt2YXIgbj1zLnNlYXJjaChlLmRhdGEscil9Y2F0Y2goZSl7cmV0dXJuITF9QXJyYXkuaXNBcnJheShuKXx8KG49W25dKTt2YXIgaT1uLmxlbmd0aDtpZighaSlyZXR1cm4hMTtmb3IodmFyIG89MDtvPGk7bysrKWlmKCFzLnN0cmljdERlZXBFcXVhbChuW29dLHQpKXJldHVybiExO3JldHVybiEwfSxwYXRoQW55OmZ1bmN0aW9uKGUsdCxyKXt0cnl7dmFyIG49cy5zZWFyY2goZS5kYXRhLHIpfWNhdGNoKGUpe3JldHVybiExfUFycmF5LmlzQXJyYXkobil8fChuPVtuXSk7Zm9yKHZhciBpPW4ubGVuZ3RoLG89MDtvPGk7bysrKWlmKHMuc3RyaWN0RGVlcEVxdWFsKG5bb10sdCkpcmV0dXJuITA7cmV0dXJuITF9LHN0YXR1czpmdW5jdGlvbihlLHQpe3ZhciByPWUuaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGU7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIHImJnI9PT10fSxlcnJvcjpmdW5jdGlvbihlLHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0JiZlLmVycm9yP3Q9PT1lLmVycm9yLmNvZGU6dD09PSEhZS5lcnJvcn19LGxpc3RlbmVyczoobmV3IGkuU2VxdWVudGlhbEV4ZWN1dG9yKS5hZGROYW1lZExpc3RlbmVycyhmdW5jdGlvbihlKXtlKFwiUkVUUllfQ0hFQ0tcIixcInJldHJ5XCIsZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXF1ZXN0Ll93YWl0ZXI7ZS5lcnJvciYmXCJSZXNvdXJjZU5vdFJlYWR5XCI9PT1lLmVycm9yLmNvZGUmJihlLmVycm9yLnJldHJ5RGVsYXk9MWUzKih0LmNvbmZpZy5kZWxheXx8MCkpfSksZShcIkNIRUNLX09VVFBVVFwiLFwiZXh0cmFjdERhdGFcIixuKSxlKFwiQ0hFQ0tfRVJST1JcIixcImV4dHJhY3RFcnJvclwiLG4pfSksd2FpdDpmdW5jdGlvbihlLHQpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGUmJih0PWUsZT12b2lkIDApLGUmJmUuJHdhaXRlciYmKGU9aS51dGlsLmNvcHkoZSksXCJudW1iZXJcIj09dHlwZW9mIGUuJHdhaXRlci5kZWxheSYmKHRoaXMuY29uZmlnLmRlbGF5PWUuJHdhaXRlci5kZWxheSksXCJudW1iZXJcIj09dHlwZW9mIGUuJHdhaXRlci5tYXhBdHRlbXB0cyYmKHRoaXMuY29uZmlnLm1heEF0dGVtcHRzPWUuJHdhaXRlci5tYXhBdHRlbXB0cyksZGVsZXRlIGUuJHdhaXRlcik7dmFyIHI9dGhpcy5zZXJ2aWNlLm1ha2VSZXF1ZXN0KHRoaXMuY29uZmlnLm9wZXJhdGlvbixlKTtyZXR1cm4gci5fd2FpdGVyPXRoaXMsci5yZXNwb25zZS5tYXhSZXRyaWVzPXRoaXMuY29uZmlnLm1heEF0dGVtcHRzLHIuYWRkTGlzdGVuZXJzKHRoaXMubGlzdGVuZXJzKSx0JiZyLnNlbmQodCkscn0sc2V0U3VjY2VzczpmdW5jdGlvbihlKXtlLmVycm9yPW51bGwsZS5kYXRhPWUuZGF0YXx8e30sZS5yZXF1ZXN0LnJlbW92ZUFsbExpc3RlbmVycyhcImV4dHJhY3REYXRhXCIpfSxzZXRFcnJvcjpmdW5jdGlvbihlLHQpe2UuZGF0YT1udWxsLGUuZXJyb3I9aS51dGlsLmVycm9yKGUuZXJyb3J8fG5ldyBFcnJvcix7Y29kZTpcIlJlc291cmNlTm90UmVhZHlcIixtZXNzYWdlOlwiUmVzb3VyY2UgaXMgbm90IGluIHRoZSBzdGF0ZSBcIit0aGlzLnN0YXRlLHJldHJ5YWJsZTp0fSl9LGxvYWRXYWl0ZXJDb25maWc6ZnVuY3Rpb24oZSl7aWYoIXRoaXMuc2VydmljZS5hcGkud2FpdGVyc1tlXSl0aHJvdyBuZXcgaS51dGlsLmVycm9yKG5ldyBFcnJvcix7Y29kZTpcIlN0YXRlTm90Rm91bmRFcnJvclwiLG1lc3NhZ2U6XCJTdGF0ZSBcIitlK1wiIG5vdCBmb3VuZC5cIn0pO3RoaXMuY29uZmlnPWkudXRpbC5jb3B5KHRoaXMuc2VydmljZS5hcGkud2FpdGVyc1tlXSl9fSl9LHtcIi4vY29yZVwiOjE5LGptZXNwYXRoOjg1fV0sNTg6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9jb3JlXCIpLGk9bi51dGlsLmluaGVyaXQsbz1lKFwiam1lc3BhdGhcIik7bi5SZXNwb25zZT1pKHtjb25zdHJ1Y3RvcjpmdW5jdGlvbihlKXt0aGlzLnJlcXVlc3Q9ZSx0aGlzLmRhdGE9bnVsbCx0aGlzLmVycm9yPW51bGwsdGhpcy5yZXRyeUNvdW50PTAsdGhpcy5yZWRpcmVjdENvdW50PTAsdGhpcy5odHRwUmVzcG9uc2U9bmV3IG4uSHR0cFJlc3BvbnNlLGUmJih0aGlzLm1heFJldHJpZXM9ZS5zZXJ2aWNlLm51bVJldHJpZXMoKSx0aGlzLm1heFJlZGlyZWN0cz1lLnNlcnZpY2UuY29uZmlnLm1heFJlZGlyZWN0cyl9LG5leHRQYWdlOmZ1bmN0aW9uKGUpe3ZhciB0LHI9dGhpcy5yZXF1ZXN0LnNlcnZpY2UsaT10aGlzLnJlcXVlc3Qub3BlcmF0aW9uO3RyeXt0PXIucGFnaW5hdGlvbkNvbmZpZyhpLCEwKX1jYXRjaChlKXt0aGlzLmVycm9yPWV9aWYoIXRoaXMuaGFzTmV4dFBhZ2UoKSl7aWYoZSllKHRoaXMuZXJyb3IsbnVsbCk7ZWxzZSBpZih0aGlzLmVycm9yKXRocm93IHRoaXMuZXJyb3I7cmV0dXJuIG51bGx9dmFyIG89bi51dGlsLmNvcHkodGhpcy5yZXF1ZXN0LnBhcmFtcyk7aWYodGhpcy5uZXh0UGFnZVRva2Vucyl7dmFyIHM9dC5pbnB1dFRva2VuO1wic3RyaW5nXCI9PXR5cGVvZiBzJiYocz1bc10pO2Zvcih2YXIgYT0wO2E8cy5sZW5ndGg7YSsrKW9bc1thXV09dGhpcy5uZXh0UGFnZVRva2Vuc1thXTtyZXR1cm4gci5tYWtlUmVxdWVzdCh0aGlzLnJlcXVlc3Qub3BlcmF0aW9uLG8sZSl9cmV0dXJuIGU/ZShudWxsLG51bGwpOm51bGx9LGhhc05leHRQYWdlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2FjaGVOZXh0UGFnZVRva2VucygpLCEhdGhpcy5uZXh0UGFnZVRva2Vuc3x8dm9pZCAwPT09dGhpcy5uZXh0UGFnZVRva2VucyYmdm9pZCAwfSxjYWNoZU5leHRQYWdlVG9rZW5zOmZ1bmN0aW9uKCl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsXCJuZXh0UGFnZVRva2Vuc1wiKSlyZXR1cm4gdGhpcy5uZXh0UGFnZVRva2Vuczt0aGlzLm5leHRQYWdlVG9rZW5zPXZvaWQgMDt2YXIgZT10aGlzLnJlcXVlc3Quc2VydmljZS5wYWdpbmF0aW9uQ29uZmlnKHRoaXMucmVxdWVzdC5vcGVyYXRpb24pO2lmKCFlKXJldHVybiB0aGlzLm5leHRQYWdlVG9rZW5zO2lmKHRoaXMubmV4dFBhZ2VUb2tlbnM9bnVsbCxlLm1vcmVSZXN1bHRzJiYhby5zZWFyY2godGhpcy5kYXRhLGUubW9yZVJlc3VsdHMpKXJldHVybiB0aGlzLm5leHRQYWdlVG9rZW5zO3ZhciB0PWUub3V0cHV0VG9rZW47cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PVt0XSksbi51dGlsLmFycmF5RWFjaC5jYWxsKHRoaXMsdCxmdW5jdGlvbihlKXt2YXIgdD1vLnNlYXJjaCh0aGlzLmRhdGEsZSk7dCYmKHRoaXMubmV4dFBhZ2VUb2tlbnM9dGhpcy5uZXh0UGFnZVRva2Vuc3x8W10sdGhpcy5uZXh0UGFnZVRva2Vucy5wdXNoKHQpKX0pLHRoaXMubmV4dFBhZ2VUb2tlbnN9fSl9LHtcIi4vY29yZVwiOjE5LGptZXNwYXRoOjg1fV0sNTk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9jb3JlXCIpO24uU2VxdWVudGlhbEV4ZWN1dG9yPW4udXRpbC5pbmhlcml0KHtjb25zdHJ1Y3RvcjpmdW5jdGlvbigpe3RoaXMuX2V2ZW50cz17fX0sbGlzdGVuZXJzOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9ldmVudHNbZV0/dGhpcy5fZXZlbnRzW2VdLnNsaWNlKDApOltdfSxvbjpmdW5jdGlvbihlLHQscil7cmV0dXJuIHRoaXMuX2V2ZW50c1tlXT9yP3RoaXMuX2V2ZW50c1tlXS51bnNoaWZ0KHQpOnRoaXMuX2V2ZW50c1tlXS5wdXNoKHQpOnRoaXMuX2V2ZW50c1tlXT1bdF0sdGhpc30sb25Bc3luYzpmdW5jdGlvbihlLHQscil7cmV0dXJuIHQuX2lzQXN5bmM9ITAsdGhpcy5vbihlLHQscil9LHJlbW92ZUxpc3RlbmVyOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5fZXZlbnRzW2VdO2lmKHIpe2Zvcih2YXIgbj1yLmxlbmd0aCxpPS0xLG89MDtvPG47KytvKXJbb109PT10JiYoaT1vKTtpPi0xJiZyLnNwbGljZShpLDEpfXJldHVybiB0aGlzfSxyZW1vdmVBbGxMaXN0ZW5lcnM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/ZGVsZXRlIHRoaXMuX2V2ZW50c1tlXTp0aGlzLl9ldmVudHM9e30sdGhpc30sZW1pdDpmdW5jdGlvbihlLHQscil7cnx8KHI9ZnVuY3Rpb24oKXt9KTt2YXIgbj10aGlzLmxpc3RlbmVycyhlKSxpPW4ubGVuZ3RoO3JldHVybiB0aGlzLmNhbGxMaXN0ZW5lcnMobix0LHIpLGk+MH0sY2FsbExpc3RlbmVyczpmdW5jdGlvbihlLHQscixpKXtmdW5jdGlvbiBvKGkpe2lmKGkmJihhPW4udXRpbC5lcnJvcihhfHxuZXcgRXJyb3IsaSkscy5faGFsdEhhbmRsZXJzT25FcnJvcikpcmV0dXJuIHIuY2FsbChzLGEpO3MuY2FsbExpc3RlbmVycyhlLHQscixhKX1mb3IodmFyIHM9dGhpcyxhPWl8fG51bGw7ZS5sZW5ndGg+MDspe3ZhciB1PWUuc2hpZnQoKTtpZih1Ll9pc0FzeW5jKXJldHVybiB2b2lkIHUuYXBwbHkocyx0LmNvbmNhdChbb10pKTt0cnl7dS5hcHBseShzLHQpfWNhdGNoKGUpe2E9bi51dGlsLmVycm9yKGF8fG5ldyBFcnJvcixlKX1pZihhJiZzLl9oYWx0SGFuZGxlcnNPbkVycm9yKXJldHVybiB2b2lkIHIuY2FsbChzLGEpfXIuY2FsbChzLGEpfSxhZGRMaXN0ZW5lcnM6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gZS5fZXZlbnRzJiYoZT1lLl9ldmVudHMpLG4udXRpbC5lYWNoKGUsZnVuY3Rpb24oZSxyKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiYocj1bcl0pLG4udXRpbC5hcnJheUVhY2gocixmdW5jdGlvbihyKXt0Lm9uKGUscil9KX0pLHR9LGFkZE5hbWVkTGlzdGVuZXI6ZnVuY3Rpb24oZSx0LHIsbil7cmV0dXJuIHRoaXNbZV09cix0aGlzLmFkZExpc3RlbmVyKHQscixuKSx0aGlzfSxhZGROYW1lZEFzeW5jTGlzdGVuZXI6ZnVuY3Rpb24oZSx0LHIsbil7cmV0dXJuIHIuX2lzQXN5bmM9ITAsdGhpcy5hZGROYW1lZExpc3RlbmVyKGUsdCxyLG4pfSxhZGROYW1lZExpc3RlbmVyczpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBlKGZ1bmN0aW9uKCl7dC5hZGROYW1lZExpc3RlbmVyLmFwcGx5KHQsYXJndW1lbnRzKX0sZnVuY3Rpb24oKXt0LmFkZE5hbWVkQXN5bmNMaXN0ZW5lci5hcHBseSh0LGFyZ3VtZW50cyl9KSx0aGlzfX0pLG4uU2VxdWVudGlhbEV4ZWN1dG9yLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1uLlNlcXVlbnRpYWxFeGVjdXRvci5wcm90b3R5cGUub24sdC5leHBvcnRzPW4uU2VxdWVudGlhbEV4ZWN1dG9yfSx7XCIuL2NvcmVcIjoxOX1dLDYwOltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKHIpe3ZhciBuPWUoXCIuL2NvcmVcIiksaT1lKFwiLi9tb2RlbC9hcGlcIiksbz1lKFwiLi9yZWdpb25fY29uZmlnXCIpLHM9bi51dGlsLmluaGVyaXQsYT0wO24uU2VydmljZT1zKHtjb25zdHJ1Y3RvcjpmdW5jdGlvbihlKXtpZighdGhpcy5sb2FkU2VydmljZUNsYXNzKXRocm93IG4udXRpbC5lcnJvcihuZXcgRXJyb3IsXCJTZXJ2aWNlIG11c3QgYmUgY29uc3RydWN0ZWQgd2l0aCBgbmV3JyBvcGVyYXRvclwiKTt2YXIgdD10aGlzLmxvYWRTZXJ2aWNlQ2xhc3MoZXx8e30pO2lmKHQpe3ZhciByPW4udXRpbC5jb3B5KGUpLGk9bmV3IHQoZSk7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpLFwiX29yaWdpbmFsQ29uZmlnXCIse2dldDpmdW5jdGlvbigpe3JldHVybiByfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLGkuX2NsaWVudElkPSsrYSxpfXRoaXMuaW5pdGlhbGl6ZShlKX0saW5pdGlhbGl6ZTpmdW5jdGlvbihlKXt2YXIgdD1uLmNvbmZpZ1t0aGlzLnNlcnZpY2VJZGVudGlmaWVyXTtpZih0aGlzLmNvbmZpZz1uZXcgbi5Db25maWcobi5jb25maWcpLHQmJnRoaXMuY29uZmlnLnVwZGF0ZSh0LCEwKSxlJiZ0aGlzLmNvbmZpZy51cGRhdGUoZSwhMCksdGhpcy52YWxpZGF0ZVNlcnZpY2UoKSx0aGlzLmNvbmZpZy5lbmRwb2ludHx8byh0aGlzKSx0aGlzLmNvbmZpZy5lbmRwb2ludD10aGlzLmVuZHBvaW50RnJvbVRlbXBsYXRlKHRoaXMuY29uZmlnLmVuZHBvaW50KSx0aGlzLnNldEVuZHBvaW50KHRoaXMuY29uZmlnLmVuZHBvaW50KSxuLlNlcXVlbnRpYWxFeGVjdXRvci5jYWxsKHRoaXMpLG4uU2VydmljZS5hZGREZWZhdWx0TW9uaXRvcmluZ0xpc3RlbmVycyh0aGlzKSwodGhpcy5jb25maWcuY2xpZW50U2lkZU1vbml0b3Jpbmd8fG4uU2VydmljZS5fY2xpZW50U2lkZU1vbml0b3JpbmcpJiZ0aGlzLnB1Ymxpc2hlcil7dmFyIGk9dGhpcy5wdWJsaXNoZXI7dGhpcy5hZGROYW1lZExpc3RlbmVyKFwiUFVCTElTSF9BUElfQ0FMTFwiLFwiYXBpQ2FsbFwiLGZ1bmN0aW9uKGUpe3IubmV4dFRpY2soZnVuY3Rpb24oKXtpLmV2ZW50SGFuZGxlcihlKX0pfSksdGhpcy5hZGROYW1lZExpc3RlbmVyKFwiUFVCTElTSF9BUElfQVRURU1QVFwiLFwiYXBpQ2FsbEF0dGVtcHRcIixmdW5jdGlvbihlKXtyLm5leHRUaWNrKGZ1bmN0aW9uKCl7aS5ldmVudEhhbmRsZXIoZSl9KX0pfX0sdmFsaWRhdGVTZXJ2aWNlOmZ1bmN0aW9uKCl7fSxsb2FkU2VydmljZUNsYXNzOmZ1bmN0aW9uKGUpe3ZhciB0PWU7aWYobi51dGlsLmlzRW1wdHkodGhpcy5hcGkpKXtpZih0LmFwaUNvbmZpZylyZXR1cm4gbi5TZXJ2aWNlLmRlZmluZVNlcnZpY2VBcGkodGhpcy5jb25zdHJ1Y3Rvcix0LmFwaUNvbmZpZyk7aWYodGhpcy5jb25zdHJ1Y3Rvci5zZXJ2aWNlcyl7dD1uZXcgbi5Db25maWcobi5jb25maWcpLHQudXBkYXRlKGUsITApO3ZhciByPXQuYXBpVmVyc2lvbnNbdGhpcy5jb25zdHJ1Y3Rvci5zZXJ2aWNlSWRlbnRpZmllcl07cmV0dXJuIHI9cnx8dC5hcGlWZXJzaW9uLHRoaXMuZ2V0TGF0ZXN0U2VydmljZUNsYXNzKHIpfXJldHVybiBudWxsfXJldHVybiBudWxsfSxnZXRMYXRlc3RTZXJ2aWNlQ2xhc3M6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9dGhpcy5nZXRMYXRlc3RTZXJ2aWNlVmVyc2lvbihlKSxudWxsPT09dGhpcy5jb25zdHJ1Y3Rvci5zZXJ2aWNlc1tlXSYmbi5TZXJ2aWNlLmRlZmluZVNlcnZpY2VBcGkodGhpcy5jb25zdHJ1Y3RvcixlKSx0aGlzLmNvbnN0cnVjdG9yLnNlcnZpY2VzW2VdfSxnZXRMYXRlc3RTZXJ2aWNlVmVyc2lvbjpmdW5jdGlvbihlKXtpZighdGhpcy5jb25zdHJ1Y3Rvci5zZXJ2aWNlc3x8MD09PXRoaXMuY29uc3RydWN0b3Iuc2VydmljZXMubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIk5vIHNlcnZpY2VzIGRlZmluZWQgb24gXCIrdGhpcy5jb25zdHJ1Y3Rvci5zZXJ2aWNlSWRlbnRpZmllcik7aWYoZT9uLnV0aWwuaXNUeXBlKGUsRGF0ZSkmJihlPW4udXRpbC5kYXRlLmlzbzg2MDEoZSkuc3BsaXQoXCJUXCIpWzBdKTplPVwibGF0ZXN0XCIsT2JqZWN0Lmhhc093blByb3BlcnR5KHRoaXMuY29uc3RydWN0b3Iuc2VydmljZXMsZSkpcmV0dXJuIGU7Zm9yKHZhciB0PU9iamVjdC5rZXlzKHRoaXMuY29uc3RydWN0b3Iuc2VydmljZXMpLnNvcnQoKSxyPW51bGwsaT10Lmxlbmd0aC0xO2k+PTA7aS0tKWlmKFwiKlwiIT09dFtpXVt0W2ldLmxlbmd0aC0xXSYmKHI9dFtpXSksdFtpXS5zdWJzdHIoMCwxMCk8PWUpcmV0dXJuIHI7dGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgXCIrdGhpcy5jb25zdHJ1Y3Rvci5zZXJ2aWNlSWRlbnRpZmllcitcIiBBUEkgdG8gc2F0aXNmeSB2ZXJzaW9uIGNvbnN0cmFpbnQgYFwiK2UrXCInXCIpfSxhcGk6e30sZGVmYXVsdFJldHJ5Q291bnQ6MyxjdXN0b21pemVSZXF1ZXN0czpmdW5jdGlvbihlKXtpZihlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2FsbGJhY2sgdHlwZSAnXCIrdHlwZW9mIGUrXCInIHByb3ZpZGVkIGluIGN1c3RvbWl6ZVJlcXVlc3RzXCIpO3RoaXMuY3VzdG9tUmVxdWVzdEhhbmRsZXI9ZX1lbHNlIHRoaXMuY3VzdG9tUmVxdWVzdEhhbmRsZXI9bnVsbH0sbWFrZVJlcXVlc3Q6ZnVuY3Rpb24oZSx0LHIpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJihyPXQsdD1udWxsKSx0PXR8fHt9LHRoaXMuY29uZmlnLnBhcmFtcyl7dmFyIGk9dGhpcy5hcGkub3BlcmF0aW9uc1tlXTtpJiYodD1uLnV0aWwuY29weSh0KSxuLnV0aWwuZWFjaCh0aGlzLmNvbmZpZy5wYXJhbXMsZnVuY3Rpb24oZSxyKXtpLmlucHV0Lm1lbWJlcnNbZV0mJih2b2lkIDAhPT10W2VdJiZudWxsIT09dFtlXXx8KHRbZV09cikpfSkpfXZhciBvPW5ldyBuLlJlcXVlc3QodGhpcyxlLHQpO3JldHVybiB0aGlzLmFkZEFsbFJlcXVlc3RMaXN0ZW5lcnMobyksdGhpcy5hdHRhY2hNb25pdG9yaW5nRW1pdHRlcihvKSxyJiZvLnNlbmQociksb30sbWFrZVVuYXV0aGVudGljYXRlZFJlcXVlc3Q6ZnVuY3Rpb24oZSx0LHIpe1wiZnVuY3Rpb25cIj09dHlwZW9mIHQmJihyPXQsdD17fSk7dmFyIG49dGhpcy5tYWtlUmVxdWVzdChlLHQpLnRvVW5hdXRoZW50aWNhdGVkKCk7cmV0dXJuIHI/bi5zZW5kKHIpOm59LHdhaXRGb3I6ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBuZXcgbi5SZXNvdXJjZVdhaXRlcih0aGlzLGUpLndhaXQodCxyKX0sYWRkQWxsUmVxdWVzdExpc3RlbmVyczpmdW5jdGlvbihlKXtmb3IodmFyIHQ9W24uZXZlbnRzLG4uRXZlbnRMaXN0ZW5lcnMuQ29yZSx0aGlzLnNlcnZpY2VJbnRlcmZhY2UoKSxuLkV2ZW50TGlzdGVuZXJzLkNvcmVQb3N0XSxyPTA7cjx0Lmxlbmd0aDtyKyspdFtyXSYmZS5hZGRMaXN0ZW5lcnModFtyXSk7dGhpcy5jb25maWcucGFyYW1WYWxpZGF0aW9ufHxlLnJlbW92ZUxpc3RlbmVyKFwidmFsaWRhdGVcIixuLkV2ZW50TGlzdGVuZXJzLkNvcmUuVkFMSURBVEVfUEFSQU1FVEVSUyksdGhpcy5jb25maWcubG9nZ2VyJiZlLmFkZExpc3RlbmVycyhuLkV2ZW50TGlzdGVuZXJzLkxvZ2dlciksdGhpcy5zZXR1cFJlcXVlc3RMaXN0ZW5lcnMoZSksXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUuY3VzdG9tUmVxdWVzdEhhbmRsZXImJnRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLmN1c3RvbVJlcXVlc3RIYW5kbGVyKGUpLE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLFwiY3VzdG9tUmVxdWVzdEhhbmRsZXJcIikmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuY3VzdG9tUmVxdWVzdEhhbmRsZXImJnRoaXMuY3VzdG9tUmVxdWVzdEhhbmRsZXIoZSl9LGFwaUNhbGxFdmVudDpmdW5jdGlvbihlKXt2YXIgdD1lLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbZS5vcGVyYXRpb25dLHI9e1R5cGU6XCJBcGlDYWxsXCIsQXBpOnQ/dC5uYW1lOmUub3BlcmF0aW9uLFZlcnNpb246MSxTZXJ2aWNlOmUuc2VydmljZS5hcGkuc2VydmljZUlkfHxlLnNlcnZpY2UuYXBpLmVuZHBvaW50UHJlZml4LFJlZ2lvbjplLmh0dHBSZXF1ZXN0LnJlZ2lvbixNYXhSZXRyaWVzRXhjZWVkZWQ6MCxVc2VyQWdlbnQ6ZS5odHRwUmVxdWVzdC5nZXRVc2VyQWdlbnQoKX0sbj1lLnJlc3BvbnNlO2lmKG4uaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUmJihyLkZpbmFsSHR0cFN0YXR1c0NvZGU9bi5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSksbi5lcnJvcil7dmFyIGk9bi5lcnJvcjtuLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlPjI5OT8oaS5jb2RlJiYoci5GaW5hbEF3c0V4Y2VwdGlvbj1pLmNvZGUpLGkubWVzc2FnZSYmKHIuRmluYWxBd3NFeGNlcHRpb25NZXNzYWdlPWkubWVzc2FnZSkpOigoaS5jb2RlfHxpLm5hbWUpJiYoci5GaW5hbFNka0V4Y2VwdGlvbj1pLmNvZGV8fGkubmFtZSksaS5tZXNzYWdlJiYoci5GaW5hbFNka0V4Y2VwdGlvbk1lc3NhZ2U9aS5tZXNzYWdlKSl9cmV0dXJuIHJ9LGFwaUF0dGVtcHRFdmVudDpmdW5jdGlvbihlKXt2YXIgdD1lLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbZS5vcGVyYXRpb25dLHI9e1R5cGU6XCJBcGlDYWxsQXR0ZW1wdFwiLEFwaTp0P3QubmFtZTplLm9wZXJhdGlvbixWZXJzaW9uOjEsU2VydmljZTplLnNlcnZpY2UuYXBpLnNlcnZpY2VJZHx8ZS5zZXJ2aWNlLmFwaS5lbmRwb2ludFByZWZpeCxGcWRuOmUuaHR0cFJlcXVlc3QuZW5kcG9pbnQuaG9zdG5hbWUsVXNlckFnZW50OmUuaHR0cFJlcXVlc3QuZ2V0VXNlckFnZW50KCl9LG49ZS5yZXNwb25zZTtyZXR1cm4gbi5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSYmKHIuSHR0cFN0YXR1c0NvZGU9bi5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSksIWUuX3VuQXV0aGVudGljYXRlZCYmZS5zZXJ2aWNlLmNvbmZpZy5jcmVkZW50aWFscyYmZS5zZXJ2aWNlLmNvbmZpZy5jcmVkZW50aWFscy5hY2Nlc3NLZXlJZCYmKHIuQWNjZXNzS2V5PWUuc2VydmljZS5jb25maWcuY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQpLG4uaHR0cFJlc3BvbnNlLmhlYWRlcnM/KGUuaHR0cFJlcXVlc3QuaGVhZGVyc1tcIngtYW16LXNlY3VyaXR5LXRva2VuXCJdJiYoci5TZXNzaW9uVG9rZW49ZS5odHRwUmVxdWVzdC5oZWFkZXJzW1wieC1hbXotc2VjdXJpdHktdG9rZW5cIl0pLG4uaHR0cFJlc3BvbnNlLmhlYWRlcnNbXCJ4LWFtem4tcmVxdWVzdGlkXCJdJiYoci5YQW16blJlcXVlc3RJZD1uLmh0dHBSZXNwb25zZS5oZWFkZXJzW1wieC1hbXpuLXJlcXVlc3RpZFwiXSksbi5odHRwUmVzcG9uc2UuaGVhZGVyc1tcIngtYW16LXJlcXVlc3QtaWRcIl0mJihyLlhBbXpSZXF1ZXN0SWQ9bi5odHRwUmVzcG9uc2UuaGVhZGVyc1tcIngtYW16LXJlcXVlc3QtaWRcIl0pLG4uaHR0cFJlc3BvbnNlLmhlYWRlcnNbXCJ4LWFtei1pZC0yXCJdJiYoci5YQW16SWQyPW4uaHR0cFJlc3BvbnNlLmhlYWRlcnNbXCJ4LWFtei1pZC0yXCJdKSxyKTpyfSxhdHRlbXB0RmFpbEV2ZW50OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuYXBpQXR0ZW1wdEV2ZW50KGUpLHI9ZS5yZXNwb25zZSxuPXIuZXJyb3I7cmV0dXJuIHIuaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGU+Mjk5PyhuLmNvZGUmJih0LkF3c0V4Y2VwdGlvbj1uLmNvZGUpLG4ubWVzc2FnZSYmKHQuQXdzRXhjZXB0aW9uTWVzc2FnZT1uLm1lc3NhZ2UpKTooKG4uY29kZXx8bi5uYW1lKSYmKHQuU2RrRXhjZXB0aW9uPW4uY29kZXx8bi5uYW1lKSxuLm1lc3NhZ2UmJih0LlNka0V4Y2VwdGlvbk1lc3NhZ2U9bi5tZXNzYWdlKSksdH0sYXR0YWNoTW9uaXRvcmluZ0VtaXR0ZXI6ZnVuY3Rpb24oZSl7dmFyIHQscixpLG8scyxhLHU9MCxjPXRoaXM7ZS5vbihcInZhbGlkYXRlXCIsZnVuY3Rpb24oKXtvPW4udXRpbC5yZWFsQ2xvY2subm93KCksYT1EYXRlLm5vdygpfSwhMCksZS5vbihcInNpZ25cIixmdW5jdGlvbigpe3I9bi51dGlsLnJlYWxDbG9jay5ub3coKSx0PURhdGUubm93KCkscz1lLmh0dHBSZXF1ZXN0LnJlZ2lvbix1Kyt9LCEwKSxlLm9uKFwidmFsaWRhdGVSZXNwb25zZVwiLGZ1bmN0aW9uKCl7aT1NYXRoLnJvdW5kKG4udXRpbC5yZWFsQ2xvY2subm93KCktcil9KSxlLmFkZE5hbWVkTGlzdGVuZXIoXCJBUElfQ0FMTF9BVFRFTVBUXCIsXCJzdWNjZXNzXCIsZnVuY3Rpb24oKXt2YXIgcj1jLmFwaUF0dGVtcHRFdmVudChlKTtyLlRpbWVzdGFtcD10LHIuQXR0ZW1wdExhdGVuY3k9aT49MD9pOjAsci5SZWdpb249cyxjLmVtaXQoXCJhcGlDYWxsQXR0ZW1wdFwiLFtyXSl9KSxlLmFkZE5hbWVkTGlzdGVuZXIoXCJBUElfQ0FMTF9BVFRFTVBUX1JFVFJZXCIsXCJyZXRyeVwiLGZ1bmN0aW9uKCl7dmFyIG89Yy5hdHRlbXB0RmFpbEV2ZW50KGUpO28uVGltZXN0YW1wPXQsaT1pfHxNYXRoLnJvdW5kKG4udXRpbC5yZWFsQ2xvY2subm93KCktciksby5BdHRlbXB0TGF0ZW5jeT1pPj0wP2k6MCxvLlJlZ2lvbj1zLGMuZW1pdChcImFwaUNhbGxBdHRlbXB0XCIsW29dKX0pLGUuYWRkTmFtZWRMaXN0ZW5lcihcIkFQSV9DQUxMXCIsXCJjb21wbGV0ZVwiLGZ1bmN0aW9uKCl7dmFyIHQ9Yy5hcGlDYWxsRXZlbnQoZSk7aWYodC5BdHRlbXB0Q291bnQ9dSwhKHQuQXR0ZW1wdENvdW50PD0wKSl7dC5UaW1lc3RhbXA9YTt2YXIgcj1NYXRoLnJvdW5kKG4udXRpbC5yZWFsQ2xvY2subm93KCktbyk7dC5MYXRlbmN5PXI+PTA/cjowO3ZhciBpPWUucmVzcG9uc2U7XCJudW1iZXJcIj09dHlwZW9mIGkucmV0cnlDb3VudCYmXCJudW1iZXJcIj09dHlwZW9mIGkubWF4UmV0cmllcyYmaS5yZXRyeUNvdW50Pj1pLm1heFJldHJpZXMmJih0Lk1heFJldHJpZXNFeGNlZWRlZD0xKSxjLmVtaXQoXCJhcGlDYWxsXCIsW3RdKX19KX0sc2V0dXBSZXF1ZXN0TGlzdGVuZXJzOmZ1bmN0aW9uKGUpe30sZ2V0U2lnbmVyQ2xhc3M6ZnVuY3Rpb24oZSl7dmFyIHQscj1udWxsLGk9XCJcIjtpZihlKXtyPShlLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnN8fHt9KVtlLm9wZXJhdGlvbl18fG51bGwsaT1yP3IuYXV0aHR5cGU6XCJcIn1yZXR1cm4gdD10aGlzLmNvbmZpZy5zaWduYXR1cmVWZXJzaW9uP3RoaXMuY29uZmlnLnNpZ25hdHVyZVZlcnNpb246XCJ2NFwiPT09aXx8XCJ2NC11bnNpZ25lZC1ib2R5XCI9PT1pP1widjRcIjp0aGlzLmFwaS5zaWduYXR1cmVWZXJzaW9uLG4uU2lnbmVycy5SZXF1ZXN0U2lnbmVyLmdldFZlcnNpb24odCl9LHNlcnZpY2VJbnRlcmZhY2U6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5hcGkucHJvdG9jb2wpe2Nhc2VcImVjMlwiOmNhc2VcInF1ZXJ5XCI6cmV0dXJuIG4uRXZlbnRMaXN0ZW5lcnMuUXVlcnk7Y2FzZVwianNvblwiOnJldHVybiBuLkV2ZW50TGlzdGVuZXJzLkpzb247Y2FzZVwicmVzdC1qc29uXCI6cmV0dXJuIG4uRXZlbnRMaXN0ZW5lcnMuUmVzdEpzb247Y2FzZVwicmVzdC14bWxcIjpyZXR1cm4gbi5FdmVudExpc3RlbmVycy5SZXN0WG1sfWlmKHRoaXMuYXBpLnByb3RvY29sKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc2VydmljZSBgcHJvdG9jb2wnIFwiK3RoaXMuYXBpLnByb3RvY29sK1wiIGluIEFQSSBjb25maWdcIil9LHN1Y2Nlc3NmdWxSZXNwb25zZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZTwzMDB9LG51bVJldHJpZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5jb25maWcubWF4UmV0cmllcz90aGlzLmNvbmZpZy5tYXhSZXRyaWVzOnRoaXMuZGVmYXVsdFJldHJ5Q291bnR9LHJldHJ5RGVsYXlzOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4udXRpbC5jYWxjdWxhdGVSZXRyeURlbGF5KGUsdGhpcy5jb25maWcucmV0cnlEZWxheU9wdGlvbnMsdCl9LHJldHJ5YWJsZUVycm9yOmZ1bmN0aW9uKGUpe3JldHVybiEhdGhpcy50aW1lb3V0RXJyb3IoZSl8fCghIXRoaXMubmV0d29ya2luZ0Vycm9yKGUpfHwoISF0aGlzLmV4cGlyZWRDcmVkZW50aWFsc0Vycm9yKGUpfHwoISF0aGlzLnRocm90dGxlZEVycm9yKGUpfHxlLnN0YXR1c0NvZGU+PTUwMCkpKX0sbmV0d29ya2luZ0Vycm9yOmZ1bmN0aW9uKGUpe3JldHVyblwiTmV0d29ya2luZ0Vycm9yXCI9PT1lLmNvZGV9LHRpbWVvdXRFcnJvcjpmdW5jdGlvbihlKXtyZXR1cm5cIlRpbWVvdXRFcnJvclwiPT09ZS5jb2RlfSxleHBpcmVkQ3JlZGVudGlhbHNFcnJvcjpmdW5jdGlvbihlKXtyZXR1cm5cIkV4cGlyZWRUb2tlbkV4Y2VwdGlvblwiPT09ZS5jb2RlfSxjbG9ja1NrZXdFcnJvcjpmdW5jdGlvbihlKXtzd2l0Y2goZS5jb2RlKXtjYXNlXCJSZXF1ZXN0VGltZVRvb1NrZXdlZFwiOmNhc2VcIlJlcXVlc3RFeHBpcmVkXCI6Y2FzZVwiSW52YWxpZFNpZ25hdHVyZUV4Y2VwdGlvblwiOmNhc2VcIlNpZ25hdHVyZURvZXNOb3RNYXRjaFwiOmNhc2VcIkF1dGhGYWlsdXJlXCI6Y2FzZVwiUmVxdWVzdEluVGhlRnV0dXJlXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19LGdldFNrZXdDb3JyZWN0ZWREYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBEYXRlKERhdGUubm93KCkrdGhpcy5jb25maWcuc3lzdGVtQ2xvY2tPZmZzZXQpfSxhcHBseUNsb2NrT2Zmc2V0OmZ1bmN0aW9uKGUpe2UmJih0aGlzLmNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldD1lLURhdGUubm93KCkpfSxpc0Nsb2NrU2tld2VkOmZ1bmN0aW9uKGUpe2lmKGUpcmV0dXJuIE1hdGguYWJzKHRoaXMuZ2V0U2tld0NvcnJlY3RlZERhdGUoKS5nZXRUaW1lKCktZSk+PTNlNH0sdGhyb3R0bGVkRXJyb3I6ZnVuY3Rpb24oZSl7aWYoNDI5PT09ZS5zdGF0dXNDb2RlKXJldHVybiEwO3N3aXRjaChlLmNvZGUpe2Nhc2VcIlByb3Zpc2lvbmVkVGhyb3VnaHB1dEV4Y2VlZGVkRXhjZXB0aW9uXCI6Y2FzZVwiVGhyb3R0bGluZ1wiOmNhc2VcIlRocm90dGxpbmdFeGNlcHRpb25cIjpjYXNlXCJSZXF1ZXN0TGltaXRFeGNlZWRlZFwiOmNhc2VcIlJlcXVlc3RUaHJvdHRsZWRcIjpjYXNlXCJSZXF1ZXN0VGhyb3R0bGVkRXhjZXB0aW9uXCI6Y2FzZVwiVG9vTWFueVJlcXVlc3RzRXhjZXB0aW9uXCI6Y2FzZVwiVHJhbnNhY3Rpb25JblByb2dyZXNzRXhjZXB0aW9uXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19LGVuZHBvaW50RnJvbVRlbXBsYXRlOmZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiBlO3ZhciB0PWU7cmV0dXJuIHQ9dC5yZXBsYWNlKC9cXHtzZXJ2aWNlXFx9L2csdGhpcy5hcGkuZW5kcG9pbnRQcmVmaXgpLHQ9dC5yZXBsYWNlKC9cXHtyZWdpb25cXH0vZyx0aGlzLmNvbmZpZy5yZWdpb24pLHQ9dC5yZXBsYWNlKC9cXHtzY2hlbWVcXH0vZyx0aGlzLmNvbmZpZy5zc2xFbmFibGVkP1wiaHR0cHNcIjpcImh0dHBcIil9LHNldEVuZHBvaW50OmZ1bmN0aW9uKGUpe3RoaXMuZW5kcG9pbnQ9bmV3IG4uRW5kcG9pbnQoZSx0aGlzLmNvbmZpZyl9LHBhZ2luYXRpb25Db25maWc6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLmFwaS5vcGVyYXRpb25zW2VdLnBhZ2luYXRvcjtpZighcil7aWYodCl7dmFyIGk9bmV3IEVycm9yO3Rocm93IG4udXRpbC5lcnJvcihpLFwiTm8gcGFnaW5hdGlvbiBjb25maWd1cmF0aW9uIGZvciBcIitlKX1yZXR1cm4gbnVsbH1yZXR1cm4gcn19KSxuLnV0aWwudXBkYXRlKG4uU2VydmljZSx7ZGVmaW5lTWV0aG9kczpmdW5jdGlvbihlKXtuLnV0aWwuZWFjaChlLnByb3RvdHlwZS5hcGkub3BlcmF0aW9ucyxmdW5jdGlvbih0KXtpZighZS5wcm90b3R5cGVbdF0pe1wibm9uZVwiPT09ZS5wcm90b3R5cGUuYXBpLm9wZXJhdGlvbnNbdF0uYXV0aHR5cGU/ZS5wcm90b3R5cGVbdF09ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdGhpcy5tYWtlVW5hdXRoZW50aWNhdGVkUmVxdWVzdCh0LGUscil9OmUucHJvdG90eXBlW3RdPWZ1bmN0aW9uKGUscil7cmV0dXJuIHRoaXMubWFrZVJlcXVlc3QodCxlLHIpfX19KX0sZGVmaW5lU2VydmljZTpmdW5jdGlvbihlLHQscil7bi5TZXJ2aWNlLl9zZXJ2aWNlTWFwW2VdPSEwLEFycmF5LmlzQXJyYXkodCl8fChyPXQsdD1bXSk7dmFyIGk9cyhuLlNlcnZpY2Uscnx8e30pO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXtuLlNlcnZpY2UuYWRkVmVyc2lvbnMoaSx0KTt2YXIgbz1pLnNlcnZpY2VJZGVudGlmaWVyfHxlO2kuc2VydmljZUlkZW50aWZpZXI9b31lbHNlIGkucHJvdG90eXBlLmFwaT1lLG4uU2VydmljZS5kZWZpbmVNZXRob2RzKGkpO2lmKG4uU2VxdWVudGlhbEV4ZWN1dG9yLmNhbGwodGhpcy5wcm90b3R5cGUpLCF0aGlzLnByb3RvdHlwZS5wdWJsaXNoZXImJm4udXRpbC5jbGllbnRTaWRlTW9uaXRvcmluZyl7dmFyIGE9bi51dGlsLmNsaWVudFNpZGVNb25pdG9yaW5nLlB1Ymxpc2hlcix1PW4udXRpbC5jbGllbnRTaWRlTW9uaXRvcmluZy5jb25maWdQcm92aWRlcixjPXUoKTt0aGlzLnByb3RvdHlwZS5wdWJsaXNoZXI9bmV3IGEoYyksYy5lbmFibGVkJiYobi5TZXJ2aWNlLl9jbGllbnRTaWRlTW9uaXRvcmluZz0hMCl9cmV0dXJuIG4uU2VxdWVudGlhbEV4ZWN1dG9yLmNhbGwoaS5wcm90b3R5cGUpLG4uU2VydmljZS5hZGREZWZhdWx0TW9uaXRvcmluZ0xpc3RlbmVycyhpLnByb3RvdHlwZSksaX0sYWRkVmVyc2lvbnM6ZnVuY3Rpb24oZSx0KXtBcnJheS5pc0FycmF5KHQpfHwodD1bdF0pLGUuc2VydmljZXM9ZS5zZXJ2aWNlc3x8e307Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdm9pZCAwPT09ZS5zZXJ2aWNlc1t0W3JdXSYmKGUuc2VydmljZXNbdFtyXV09bnVsbCk7ZS5hcGlWZXJzaW9ucz1PYmplY3Qua2V5cyhlLnNlcnZpY2VzKS5zb3J0KCl9LGRlZmluZVNlcnZpY2VBcGk6ZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG8oZSl7ZS5pc0FwaT9hLnByb3RvdHlwZS5hcGk9ZTphLnByb3RvdHlwZS5hcGk9bmV3IGkoZSl9dmFyIGE9cyhlLHtzZXJ2aWNlSWRlbnRpZmllcjplLnNlcnZpY2VJZGVudGlmaWVyfSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHIpbyhyKTtlbHNlIHRyeXtvKG4uYXBpTG9hZGVyKGUuc2VydmljZUlkZW50aWZpZXIsdCkpfWNhdGNoKHIpe3Rocm93IG4udXRpbC5lcnJvcihyLHttZXNzYWdlOlwiQ291bGQgbm90IGZpbmQgQVBJIGNvbmZpZ3VyYXRpb24gXCIrZS5zZXJ2aWNlSWRlbnRpZmllcitcIi1cIit0fSl9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUuc2VydmljZXMsdCl8fChlLmFwaVZlcnNpb25zPWUuYXBpVmVyc2lvbnMuY29uY2F0KHQpLnNvcnQoKSksZS5zZXJ2aWNlc1t0XT1hfWVsc2Ugbyh0KTtyZXR1cm4gbi5TZXJ2aWNlLmRlZmluZU1ldGhvZHMoYSksYX0saGFzU2VydmljZTpmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4uU2VydmljZS5fc2VydmljZU1hcCxlKX0sYWRkRGVmYXVsdE1vbml0b3JpbmdMaXN0ZW5lcnM6ZnVuY3Rpb24oZSl7ZS5hZGROYW1lZExpc3RlbmVyKFwiTU9OSVRPUl9FVkVOVFNfQlVCQkxFXCIsXCJhcGlDYWxsQXR0ZW1wdFwiLGZ1bmN0aW9uKHQpe3ZhciByPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyLl9ldmVudHMmJnIuZW1pdChcImFwaUNhbGxBdHRlbXB0XCIsW3RdKX0pLGUuYWRkTmFtZWRMaXN0ZW5lcihcIkNBTExfRVZFTlRTX0JVQkJMRVwiLFwiYXBpQ2FsbFwiLGZ1bmN0aW9uKHQpe3ZhciByPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyLl9ldmVudHMmJnIuZW1pdChcImFwaUNhbGxcIixbdF0pfSl9LF9zZXJ2aWNlTWFwOnt9fSksbi51dGlsLm1peGluKG4uU2VydmljZSxuLlNlcXVlbnRpYWxFeGVjdXRvciksdC5leHBvcnRzPW4uU2VydmljZX0pLmNhbGwodGhpcyxlKFwiX3Byb2Nlc3NcIikpfSx7XCIuL2NvcmVcIjoxOSxcIi4vbW9kZWwvYXBpXCI6MzksXCIuL3JlZ2lvbl9jb25maWdcIjo1NCxfcHJvY2Vzczo4Nn1dLDYxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4uL2NvcmVcIik7bi51dGlsLnVwZGF0ZShuLkNvZ25pdG9JZGVudGl0eS5wcm90b3R5cGUse2dldE9wZW5JZFRva2VuOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMubWFrZVVuYXV0aGVudGljYXRlZFJlcXVlc3QoXCJnZXRPcGVuSWRUb2tlblwiLGUsdCl9LGdldElkOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMubWFrZVVuYXV0aGVudGljYXRlZFJlcXVlc3QoXCJnZXRJZFwiLGUsdCl9LGdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHk6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5tYWtlVW5hdXRoZW50aWNhdGVkUmVxdWVzdChcImdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHlcIixlLHQpfX0pfSx7XCIuLi9jb3JlXCI6MTl9XSw2MjpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbih0KXt2YXIgcj1lKFwiLi4vY29yZVwiKSxuPWUoXCIuLi9yZWdpb25fY29uZmlnXCIpO3IudXRpbC51cGRhdGUoci5TVFMucHJvdG90eXBlLHtjcmVkZW50aWFsc0Zyb206ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT8odHx8KHQ9bmV3IHIuVGVtcG9yYXJ5Q3JlZGVudGlhbHMpLHQuZXhwaXJlZD0hMSx0LmFjY2Vzc0tleUlkPWUuQ3JlZGVudGlhbHMuQWNjZXNzS2V5SWQsdC5zZWNyZXRBY2Nlc3NLZXk9ZS5DcmVkZW50aWFscy5TZWNyZXRBY2Nlc3NLZXksdC5zZXNzaW9uVG9rZW49ZS5DcmVkZW50aWFscy5TZXNzaW9uVG9rZW4sdC5leHBpcmVUaW1lPWUuQ3JlZGVudGlhbHMuRXhwaXJhdGlvbix0KTpudWxsfSxhc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMubWFrZVVuYXV0aGVudGljYXRlZFJlcXVlc3QoXCJhc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5XCIsZSx0KX0sYXNzdW1lUm9sZVdpdGhTQU1MOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMubWFrZVVuYXV0aGVudGljYXRlZFJlcXVlc3QoXCJhc3N1bWVSb2xlV2l0aFNBTUxcIixlLHQpfSx2YWxpZGF0ZVJlZ2lvbmFsRW5kcG9pbnRzRmxhZ1ZhbHVlOmZ1bmN0aW9uKGUsdCl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJltcImxlZ2FjeVwiLFwicmVnaW9uYWxcIl0uaW5kZXhPZihlLnRvTG93ZXJDYXNlKCkpPj0wKXJldHVybiB2b2lkKHRoaXMuY29uZmlnLnN0c1JlZ2lvbmFsRW5kcG9pbnRzPWUudG9Mb3dlckNhc2UoKSk7dGhyb3cgci51dGlsLmVycm9yKG5ldyBFcnJvcix0KX0sdmFsaWRhdGVSZWdpb25hbEVuZHBvaW50c0ZsYWc6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNvbmZpZztpZihlLnN0c1JlZ2lvbmFsRW5kcG9pbnRzJiZ0aGlzLnZhbGlkYXRlUmVnaW9uYWxFbmRwb2ludHNGbGFnVmFsdWUoZS5zdHNSZWdpb25hbEVuZHBvaW50cyx7XG5jb2RlOlwiSW52YWxpZENvbmZpZ3VyYXRpb25cIixtZXNzYWdlOidpbnZhbGlkIFwic3RzUmVnaW9uYWxFbmRwb2ludHNcIiBjb25maWd1cmF0aW9uLiBFeHBlY3QgXCJsZWdhY3lcIiAgb3IgXCJyZWdpb25hbFwiLiBHb3QgXCInK2Uuc3RzUmVnaW9uYWxFbmRwb2ludHMrJ1wiLid9KSxyLnV0aWwuaXNOb2RlKCkpe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LmVudixcIkFXU19TVFNfUkVHSU9OQUxfRU5EUE9JTlRTXCIpKXt2YXIgbj10LmVudi5BV1NfU1RTX1JFR0lPTkFMX0VORFBPSU5UUzt0aGlzLnZhbGlkYXRlUmVnaW9uYWxFbmRwb2ludHNGbGFnVmFsdWUobix7Y29kZTpcIkludmFsaWRFbnZpcm9ubWVudGFsVmFyaWFibGVcIixtZXNzYWdlOidpbnZhbGlkIEFXU19TVFNfUkVHSU9OQUxfRU5EUE9JTlRTIGVudmlyb25tZW50YWwgdmFyaWFibGUuIEV4cGVjdCBcImxlZ2FjeVwiICBvciBcInJlZ2lvbmFsXCIuIEdvdCBcIicrdC5lbnYuQVdTX1NUU19SRUdJT05BTF9FTkRQT0lOVFMrJ1wiLid9KX12YXIgaT17fTt0cnl7aT1yLnV0aWwuZ2V0UHJvZmlsZXNGcm9tU2hhcmVkQ29uZmlnKHIudXRpbC5pbmlMb2FkZXIpW3QuZW52LkFXU19QUk9GSUxFfHxyLnV0aWwuZGVmYXVsdFByb2ZpbGVdfWNhdGNoKGUpe31pZihpJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaSxcInN0c19yZWdpb25hbF9lbmRwb2ludHNcIikpe3ZhciBvPWkuc3RzX3JlZ2lvbmFsX2VuZHBvaW50czt0aGlzLnZhbGlkYXRlUmVnaW9uYWxFbmRwb2ludHNGbGFnVmFsdWUobyx7Y29kZTpcIkludmFsaWRDb25maWd1cmF0aW9uXCIsbWVzc2FnZTonaW52YWxpZCBzdHNfcmVnaW9uYWxfZW5kcG9pbnRzIHByb2ZpbGUgY29uZmlnLiBFeHBlY3QgXCJsZWdhY3lcIiAgb3IgXCJyZWdpb25hbFwiLiBHb3QgXCInK2kuc3RzX3JlZ2lvbmFsX2VuZHBvaW50cysnXCIuJ30pfX19LG9wdEluUmVnaW9uYWxFbmRwb2ludDpmdW5jdGlvbigpe3RoaXMudmFsaWRhdGVSZWdpb25hbEVuZHBvaW50c0ZsYWcoKTt2YXIgZT10aGlzLmNvbmZpZztpZihcInJlZ2lvbmFsXCI9PT1lLnN0c1JlZ2lvbmFsRW5kcG9pbnRzKXtpZihuKHRoaXMpLCF0aGlzLmlzR2xvYmFsRW5kcG9pbnQpcmV0dXJuO2lmKHRoaXMuaXNHbG9iYWxFbmRwb2ludD0hMSwhZS5yZWdpb24pdGhyb3cgci51dGlsLmVycm9yKG5ldyBFcnJvcix7Y29kZTpcIkNvbmZpZ0Vycm9yXCIsbWVzc2FnZTpcIk1pc3NpbmcgcmVnaW9uIGluIGNvbmZpZ1wifSk7dmFyIHQ9ZS5lbmRwb2ludC5pbmRleE9mKFwiLmFtYXpvbmF3cy5jb21cIik7ZS5lbmRwb2ludD1lLmVuZHBvaW50LnN1YnN0cmluZygwLHQpK1wiLlwiK2UucmVnaW9uK2UuZW5kcG9pbnQuc3Vic3RyaW5nKHQpfX0sdmFsaWRhdGVTZXJ2aWNlOmZ1bmN0aW9uKCl7dGhpcy5vcHRJblJlZ2lvbmFsRW5kcG9pbnQoKX19KX0pLmNhbGwodGhpcyxlKFwiX3Byb2Nlc3NcIikpfSx7XCIuLi9jb3JlXCI6MTksXCIuLi9yZWdpb25fY29uZmlnXCI6NTQsX3Byb2Nlc3M6ODZ9XSw2MzpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oZSl7dmFyIHQ9ZS5odHRwUmVxdWVzdC5oZWFkZXJzW2FdLHI9ZS5zZXJ2aWNlLmdldFNpZ25lckNsYXNzKGUpO2lmKGRlbGV0ZSBlLmh0dHBSZXF1ZXN0LmhlYWRlcnNbXCJVc2VyLUFnZW50XCJdLGRlbGV0ZSBlLmh0dHBSZXF1ZXN0LmhlYWRlcnNbXCJYLUFtei1Vc2VyLUFnZW50XCJdLHI9PT1vLlNpZ25lcnMuVjQpe2lmKHQ+NjA0ODAwKXt0aHJvdyBvLnV0aWwuZXJyb3IobmV3IEVycm9yLHtjb2RlOlwiSW52YWxpZEV4cGlyeVRpbWVcIixtZXNzYWdlOlwiUHJlc2lnbmluZyBkb2VzIG5vdCBzdXBwb3J0IGV4cGlyeSB0aW1lIGdyZWF0ZXIgdGhhbiBhIHdlZWsgd2l0aCBTaWdWNCBzaWduaW5nLlwiLHJldHJ5YWJsZTohMX0pfWUuaHR0cFJlcXVlc3QuaGVhZGVyc1thXT10fWVsc2V7aWYociE9PW8uU2lnbmVycy5TMyl0aHJvdyBvLnV0aWwuZXJyb3IobmV3IEVycm9yLHttZXNzYWdlOlwiUHJlc2lnbmluZyBvbmx5IHN1cHBvcnRzIFMzIG9yIFNpZ1Y0IHNpZ25pbmcuXCIsY29kZTpcIlVuc3VwcG9ydGVkU2lnbmVyXCIscmV0cnlhYmxlOiExfSk7dmFyIG49ZS5zZXJ2aWNlP2Uuc2VydmljZS5nZXRTa2V3Q29ycmVjdGVkRGF0ZSgpOm8udXRpbC5kYXRlLmdldERhdGUoKTtlLmh0dHBSZXF1ZXN0LmhlYWRlcnNbYV09cGFyc2VJbnQoby51dGlsLmRhdGUudW5peFRpbWVzdGFtcChuKSt0LDEwKS50b1N0cmluZygpfX1mdW5jdGlvbiBpKGUpe3ZhciB0PWUuaHR0cFJlcXVlc3QuZW5kcG9pbnQscj1vLnV0aWwudXJsUGFyc2UoZS5odHRwUmVxdWVzdC5wYXRoKSxuPXt9O3Iuc2VhcmNoJiYobj1vLnV0aWwucXVlcnlTdHJpbmdQYXJzZShyLnNlYXJjaC5zdWJzdHIoMSkpKTt2YXIgaT1lLmh0dHBSZXF1ZXN0LmhlYWRlcnMuQXV0aG9yaXphdGlvbi5zcGxpdChcIiBcIik7aWYoXCJBV1NcIj09PWlbMF0paT1pWzFdLnNwbGl0KFwiOlwiKSxuLkFXU0FjY2Vzc0tleUlkPWlbMF0sbi5TaWduYXR1cmU9aVsxXSxvLnV0aWwuZWFjaChlLmh0dHBSZXF1ZXN0LmhlYWRlcnMsZnVuY3Rpb24oZSx0KXtlPT09YSYmKGU9XCJFeHBpcmVzXCIpLDA9PT1lLmluZGV4T2YoXCJ4LWFtei1tZXRhLVwiKSYmKGRlbGV0ZSBuW2VdLGU9ZS50b0xvd2VyQ2FzZSgpKSxuW2VdPXR9KSxkZWxldGUgZS5odHRwUmVxdWVzdC5oZWFkZXJzW2FdLGRlbGV0ZSBuLkF1dGhvcml6YXRpb24sZGVsZXRlIG4uSG9zdDtlbHNlIGlmKFwiQVdTNC1ITUFDLVNIQTI1NlwiPT09aVswXSl7aS5zaGlmdCgpO3ZhciBzPWkuam9pbihcIiBcIiksdT1zLm1hdGNoKC9TaWduYXR1cmU9KC4qPykoPzosfFxcc3xcXHI/XFxufCQpLylbMV07bltcIlgtQW16LVNpZ25hdHVyZVwiXT11LGRlbGV0ZSBuLkV4cGlyZXN9dC5wYXRobmFtZT1yLnBhdGhuYW1lLHQuc2VhcmNoPW8udXRpbC5xdWVyeVBhcmFtc1RvU3RyaW5nKG4pfXZhciBvPWUoXCIuLi9jb3JlXCIpLHM9by51dGlsLmluaGVyaXQsYT1cInByZXNpZ25lZC1leHBpcmVzXCI7by5TaWduZXJzLlByZXNpZ249cyh7c2lnbjpmdW5jdGlvbihlLHQscil7aWYoZS5odHRwUmVxdWVzdC5oZWFkZXJzW2FdPXR8fDM2MDAsZS5vbihcImJ1aWxkXCIsbiksZS5vbihcInNpZ25cIixpKSxlLnJlbW92ZUxpc3RlbmVyKFwiYWZ0ZXJCdWlsZFwiLG8uRXZlbnRMaXN0ZW5lcnMuQ29yZS5TRVRfQ09OVEVOVF9MRU5HVEgpLGUucmVtb3ZlTGlzdGVuZXIoXCJhZnRlckJ1aWxkXCIsby5FdmVudExpc3RlbmVycy5Db3JlLkNPTVBVVEVfU0hBMjU2KSxlLmVtaXQoXCJiZWZvcmVQcmVzaWduXCIsW2VdKSwhcil7aWYoZS5idWlsZCgpLGUucmVzcG9uc2UuZXJyb3IpdGhyb3cgZS5yZXNwb25zZS5lcnJvcjtyZXR1cm4gby51dGlsLnVybEZvcm1hdChlLmh0dHBSZXF1ZXN0LmVuZHBvaW50KX1lLmJ1aWxkKGZ1bmN0aW9uKCl7dGhpcy5yZXNwb25zZS5lcnJvcj9yKHRoaXMucmVzcG9uc2UuZXJyb3IpOnIobnVsbCxvLnV0aWwudXJsRm9ybWF0KGUuaHR0cFJlcXVlc3QuZW5kcG9pbnQpKX0pfX0pLHQuZXhwb3J0cz1vLlNpZ25lcnMuUHJlc2lnbn0se1wiLi4vY29yZVwiOjE5fV0sNjQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi4vY29yZVwiKSxpPW4udXRpbC5pbmhlcml0O24uU2lnbmVycy5SZXF1ZXN0U2lnbmVyPWkoe2NvbnN0cnVjdG9yOmZ1bmN0aW9uKGUpe3RoaXMucmVxdWVzdD1lfSxzZXRTZXJ2aWNlQ2xpZW50SWQ6ZnVuY3Rpb24oZSl7dGhpcy5zZXJ2aWNlQ2xpZW50SWQ9ZX0sZ2V0U2VydmljZUNsaWVudElkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VydmljZUNsaWVudElkfX0pLG4uU2lnbmVycy5SZXF1ZXN0U2lnbmVyLmdldFZlcnNpb249ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2VcInYyXCI6cmV0dXJuIG4uU2lnbmVycy5WMjtjYXNlXCJ2M1wiOnJldHVybiBuLlNpZ25lcnMuVjM7Y2FzZVwiczN2NFwiOmNhc2VcInY0XCI6cmV0dXJuIG4uU2lnbmVycy5WNDtjYXNlXCJzM1wiOnJldHVybiBuLlNpZ25lcnMuUzM7Y2FzZVwidjNodHRwc1wiOnJldHVybiBuLlNpZ25lcnMuVjNIdHRwc310aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHNpZ25pbmcgdmVyc2lvbiBcIitlKX0sZShcIi4vdjJcIiksZShcIi4vdjNcIiksZShcIi4vdjNodHRwc1wiKSxlKFwiLi92NFwiKSxlKFwiLi9zM1wiKSxlKFwiLi9wcmVzaWduXCIpfSx7XCIuLi9jb3JlXCI6MTksXCIuL3ByZXNpZ25cIjo2MyxcIi4vczNcIjo2NSxcIi4vdjJcIjo2NixcIi4vdjNcIjo2NyxcIi4vdjNodHRwc1wiOjY4LFwiLi92NFwiOjY5fV0sNjU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi4vY29yZVwiKSxpPW4udXRpbC5pbmhlcml0O24uU2lnbmVycy5TMz1pKG4uU2lnbmVycy5SZXF1ZXN0U2lnbmVyLHtzdWJSZXNvdXJjZXM6e2FjbDoxLGFjY2VsZXJhdGU6MSxhbmFseXRpY3M6MSxjb3JzOjEsbGlmZWN5Y2xlOjEsZGVsZXRlOjEsaW52ZW50b3J5OjEsbG9jYXRpb246MSxsb2dnaW5nOjEsbWV0cmljczoxLG5vdGlmaWNhdGlvbjoxLHBhcnROdW1iZXI6MSxwb2xpY3k6MSxyZXF1ZXN0UGF5bWVudDoxLHJlcGxpY2F0aW9uOjEscmVzdG9yZToxLHRhZ2dpbmc6MSx0b3JyZW50OjEsdXBsb2FkSWQ6MSx1cGxvYWRzOjEsdmVyc2lvbklkOjEsdmVyc2lvbmluZzoxLHZlcnNpb25zOjEsd2Vic2l0ZToxfSxyZXNwb25zZUhlYWRlcnM6e1wicmVzcG9uc2UtY29udGVudC10eXBlXCI6MSxcInJlc3BvbnNlLWNvbnRlbnQtbGFuZ3VhZ2VcIjoxLFwicmVzcG9uc2UtZXhwaXJlc1wiOjEsXCJyZXNwb25zZS1jYWNoZS1jb250cm9sXCI6MSxcInJlc3BvbnNlLWNvbnRlbnQtZGlzcG9zaXRpb25cIjoxLFwicmVzcG9uc2UtY29udGVudC1lbmNvZGluZ1wiOjF9LGFkZEF1dGhvcml6YXRpb246ZnVuY3Rpb24oZSx0KXt0aGlzLnJlcXVlc3QuaGVhZGVyc1tcInByZXNpZ25lZC1leHBpcmVzXCJdfHwodGhpcy5yZXF1ZXN0LmhlYWRlcnNbXCJYLUFtei1EYXRlXCJdPW4udXRpbC5kYXRlLnJmYzgyMih0KSksZS5zZXNzaW9uVG9rZW4mJih0aGlzLnJlcXVlc3QuaGVhZGVyc1tcIngtYW16LXNlY3VyaXR5LXRva2VuXCJdPWUuc2Vzc2lvblRva2VuKTt2YXIgcj10aGlzLnNpZ24oZS5zZWNyZXRBY2Nlc3NLZXksdGhpcy5zdHJpbmdUb1NpZ24oKSksaT1cIkFXUyBcIitlLmFjY2Vzc0tleUlkK1wiOlwiK3I7dGhpcy5yZXF1ZXN0LmhlYWRlcnMuQXV0aG9yaXphdGlvbj1pfSxzdHJpbmdUb1NpZ246ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnJlcXVlc3QsdD1bXTt0LnB1c2goZS5tZXRob2QpLHQucHVzaChlLmhlYWRlcnNbXCJDb250ZW50LU1ENVwiXXx8XCJcIiksdC5wdXNoKGUuaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXXx8XCJcIiksdC5wdXNoKGUuaGVhZGVyc1tcInByZXNpZ25lZC1leHBpcmVzXCJdfHxcIlwiKTt2YXIgcj10aGlzLmNhbm9uaWNhbGl6ZWRBbXpIZWFkZXJzKCk7cmV0dXJuIHImJnQucHVzaChyKSx0LnB1c2godGhpcy5jYW5vbmljYWxpemVkUmVzb3VyY2UoKSksdC5qb2luKFwiXFxuXCIpfSxjYW5vbmljYWxpemVkQW16SGVhZGVyczpmdW5jdGlvbigpe3ZhciBlPVtdO24udXRpbC5lYWNoKHRoaXMucmVxdWVzdC5oZWFkZXJzLGZ1bmN0aW9uKHQpe3QubWF0Y2goL154LWFtei0vaSkmJmUucHVzaCh0KX0pLGUuc29ydChmdW5jdGlvbihlLHQpe3JldHVybiBlLnRvTG93ZXJDYXNlKCk8dC50b0xvd2VyQ2FzZSgpPy0xOjF9KTt2YXIgdD1bXTtyZXR1cm4gbi51dGlsLmFycmF5RWFjaC5jYWxsKHRoaXMsZSxmdW5jdGlvbihlKXt0LnB1c2goZS50b0xvd2VyQ2FzZSgpK1wiOlwiK1N0cmluZyh0aGlzLnJlcXVlc3QuaGVhZGVyc1tlXSkpfSksdC5qb2luKFwiXFxuXCIpfSxjYW5vbmljYWxpemVkUmVzb3VyY2U6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnJlcXVlc3QsdD1lLnBhdGguc3BsaXQoXCI/XCIpLHI9dFswXSxpPXRbMV0sbz1cIlwiO2lmKGUudmlydHVhbEhvc3RlZEJ1Y2tldCYmKG8rPVwiL1wiK2UudmlydHVhbEhvc3RlZEJ1Y2tldCksbys9cixpKXt2YXIgcz1bXTtuLnV0aWwuYXJyYXlFYWNoLmNhbGwodGhpcyxpLnNwbGl0KFwiJlwiKSxmdW5jdGlvbihlKXt2YXIgdD1lLnNwbGl0KFwiPVwiKVswXSxyPWUuc3BsaXQoXCI9XCIpWzFdO2lmKHRoaXMuc3ViUmVzb3VyY2VzW3RdfHx0aGlzLnJlc3BvbnNlSGVhZGVyc1t0XSl7dmFyIG49e25hbWU6dH07dm9pZCAwIT09ciYmKHRoaXMuc3ViUmVzb3VyY2VzW3RdP24udmFsdWU9cjpuLnZhbHVlPWRlY29kZVVSSUNvbXBvbmVudChyKSkscy5wdXNoKG4pfX0pLHMuc29ydChmdW5jdGlvbihlLHQpe3JldHVybiBlLm5hbWU8dC5uYW1lPy0xOjF9KSxzLmxlbmd0aCYmKGk9W10sbi51dGlsLmFycmF5RWFjaChzLGZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUudmFsdWU/aS5wdXNoKGUubmFtZSk6aS5wdXNoKGUubmFtZStcIj1cIitlLnZhbHVlKX0pLG8rPVwiP1wiK2kuam9pbihcIiZcIikpfXJldHVybiBvfSxzaWduOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4udXRpbC5jcnlwdG8uaG1hYyhlLHQsXCJiYXNlNjRcIixcInNoYTFcIil9fSksdC5leHBvcnRzPW4uU2lnbmVycy5TM30se1wiLi4vY29yZVwiOjE5fV0sNjY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi4vY29yZVwiKSxpPW4udXRpbC5pbmhlcml0O24uU2lnbmVycy5WMj1pKG4uU2lnbmVycy5SZXF1ZXN0U2lnbmVyLHthZGRBdXRob3JpemF0aW9uOmZ1bmN0aW9uKGUsdCl7dHx8KHQ9bi51dGlsLmRhdGUuZ2V0RGF0ZSgpKTt2YXIgcj10aGlzLnJlcXVlc3Q7ci5wYXJhbXMuVGltZXN0YW1wPW4udXRpbC5kYXRlLmlzbzg2MDEodCksci5wYXJhbXMuU2lnbmF0dXJlVmVyc2lvbj1cIjJcIixyLnBhcmFtcy5TaWduYXR1cmVNZXRob2Q9XCJIbWFjU0hBMjU2XCIsci5wYXJhbXMuQVdTQWNjZXNzS2V5SWQ9ZS5hY2Nlc3NLZXlJZCxlLnNlc3Npb25Ub2tlbiYmKHIucGFyYW1zLlNlY3VyaXR5VG9rZW49ZS5zZXNzaW9uVG9rZW4pLGRlbGV0ZSByLnBhcmFtcy5TaWduYXR1cmUsci5wYXJhbXMuU2lnbmF0dXJlPXRoaXMuc2lnbmF0dXJlKGUpLHIuYm9keT1uLnV0aWwucXVlcnlQYXJhbXNUb1N0cmluZyhyLnBhcmFtcyksci5oZWFkZXJzW1wiQ29udGVudC1MZW5ndGhcIl09ci5ib2R5Lmxlbmd0aH0sc2lnbmF0dXJlOmZ1bmN0aW9uKGUpe3JldHVybiBuLnV0aWwuY3J5cHRvLmhtYWMoZS5zZWNyZXRBY2Nlc3NLZXksdGhpcy5zdHJpbmdUb1NpZ24oKSxcImJhc2U2NFwiKX0sc3RyaW5nVG9TaWduOmZ1bmN0aW9uKCl7dmFyIGU9W107cmV0dXJuIGUucHVzaCh0aGlzLnJlcXVlc3QubWV0aG9kKSxlLnB1c2godGhpcy5yZXF1ZXN0LmVuZHBvaW50Lmhvc3QudG9Mb3dlckNhc2UoKSksZS5wdXNoKHRoaXMucmVxdWVzdC5wYXRobmFtZSgpKSxlLnB1c2gobi51dGlsLnF1ZXJ5UGFyYW1zVG9TdHJpbmcodGhpcy5yZXF1ZXN0LnBhcmFtcykpLGUuam9pbihcIlxcblwiKX19KSx0LmV4cG9ydHM9bi5TaWduZXJzLlYyfSx7XCIuLi9jb3JlXCI6MTl9XSw2NzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuLi9jb3JlXCIpLGk9bi51dGlsLmluaGVyaXQ7bi5TaWduZXJzLlYzPWkobi5TaWduZXJzLlJlcXVlc3RTaWduZXIse2FkZEF1dGhvcml6YXRpb246ZnVuY3Rpb24oZSx0KXt2YXIgcj1uLnV0aWwuZGF0ZS5yZmM4MjIodCk7dGhpcy5yZXF1ZXN0LmhlYWRlcnNbXCJYLUFtei1EYXRlXCJdPXIsZS5zZXNzaW9uVG9rZW4mJih0aGlzLnJlcXVlc3QuaGVhZGVyc1tcIngtYW16LXNlY3VyaXR5LXRva2VuXCJdPWUuc2Vzc2lvblRva2VuKSx0aGlzLnJlcXVlc3QuaGVhZGVyc1tcIlgtQW16bi1BdXRob3JpemF0aW9uXCJdPXRoaXMuYXV0aG9yaXphdGlvbihlLHIpfSxhdXRob3JpemF0aW9uOmZ1bmN0aW9uKGUpe3JldHVyblwiQVdTMyBBV1NBY2Nlc3NLZXlJZD1cIitlLmFjY2Vzc0tleUlkK1wiLEFsZ29yaXRobT1IbWFjU0hBMjU2LFNpZ25lZEhlYWRlcnM9XCIrdGhpcy5zaWduZWRIZWFkZXJzKCkrXCIsU2lnbmF0dXJlPVwiK3RoaXMuc2lnbmF0dXJlKGUpfSxzaWduZWRIZWFkZXJzOmZ1bmN0aW9uKCl7dmFyIGU9W107cmV0dXJuIG4udXRpbC5hcnJheUVhY2godGhpcy5oZWFkZXJzVG9TaWduKCksZnVuY3Rpb24odCl7ZS5wdXNoKHQudG9Mb3dlckNhc2UoKSl9KSxlLnNvcnQoKS5qb2luKFwiO1wiKX0sY2Fub25pY2FsSGVhZGVyczpmdW5jdGlvbigpe3ZhciBlPXRoaXMucmVxdWVzdC5oZWFkZXJzLHQ9W107cmV0dXJuIG4udXRpbC5hcnJheUVhY2godGhpcy5oZWFkZXJzVG9TaWduKCksZnVuY3Rpb24ocil7dC5wdXNoKHIudG9Mb3dlckNhc2UoKS50cmltKCkrXCI6XCIrU3RyaW5nKGVbcl0pLnRyaW0oKSl9KSx0LnNvcnQoKS5qb2luKFwiXFxuXCIpK1wiXFxuXCJ9LGhlYWRlcnNUb1NpZ246ZnVuY3Rpb24oKXt2YXIgZT1bXTtyZXR1cm4gbi51dGlsLmVhY2godGhpcy5yZXF1ZXN0LmhlYWRlcnMsZnVuY3Rpb24odCl7KFwiSG9zdFwiPT09dHx8XCJDb250ZW50LUVuY29kaW5nXCI9PT10fHx0Lm1hdGNoKC9eWC1BbXovaSkpJiZlLnB1c2godCl9KSxlfSxzaWduYXR1cmU6ZnVuY3Rpb24oZSl7cmV0dXJuIG4udXRpbC5jcnlwdG8uaG1hYyhlLnNlY3JldEFjY2Vzc0tleSx0aGlzLnN0cmluZ1RvU2lnbigpLFwiYmFzZTY0XCIpfSxzdHJpbmdUb1NpZ246ZnVuY3Rpb24oKXt2YXIgZT1bXTtyZXR1cm4gZS5wdXNoKHRoaXMucmVxdWVzdC5tZXRob2QpLGUucHVzaChcIi9cIiksZS5wdXNoKFwiXCIpLGUucHVzaCh0aGlzLmNhbm9uaWNhbEhlYWRlcnMoKSksZS5wdXNoKHRoaXMucmVxdWVzdC5ib2R5KSxuLnV0aWwuY3J5cHRvLnNoYTI1NihlLmpvaW4oXCJcXG5cIikpfX0pLHQuZXhwb3J0cz1uLlNpZ25lcnMuVjN9LHtcIi4uL2NvcmVcIjoxOX1dLDY4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4uL2NvcmVcIiksaT1uLnV0aWwuaW5oZXJpdDtlKFwiLi92M1wiKSxuLlNpZ25lcnMuVjNIdHRwcz1pKG4uU2lnbmVycy5WMyx7YXV0aG9yaXphdGlvbjpmdW5jdGlvbihlKXtyZXR1cm5cIkFXUzMtSFRUUFMgQVdTQWNjZXNzS2V5SWQ9XCIrZS5hY2Nlc3NLZXlJZCtcIixBbGdvcml0aG09SG1hY1NIQTI1NixTaWduYXR1cmU9XCIrdGhpcy5zaWduYXR1cmUoZSl9LHN0cmluZ1RvU2lnbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJlcXVlc3QuaGVhZGVyc1tcIlgtQW16LURhdGVcIl19fSksdC5leHBvcnRzPW4uU2lnbmVycy5WM0h0dHBzfSx7XCIuLi9jb3JlXCI6MTksXCIuL3YzXCI6Njd9XSw2OTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuLi9jb3JlXCIpLGk9ZShcIi4vdjRfY3JlZGVudGlhbHNcIiksbz1uLnV0aWwuaW5oZXJpdDtuLlNpZ25lcnMuVjQ9byhuLlNpZ25lcnMuUmVxdWVzdFNpZ25lcix7Y29uc3RydWN0b3I6ZnVuY3Rpb24oZSx0LHIpe24uU2lnbmVycy5SZXF1ZXN0U2lnbmVyLmNhbGwodGhpcyxlKSx0aGlzLnNlcnZpY2VOYW1lPXQscj1yfHx7fSx0aGlzLnNpZ25hdHVyZUNhY2hlPVwiYm9vbGVhblwiIT10eXBlb2Ygci5zaWduYXR1cmVDYWNoZXx8ci5zaWduYXR1cmVDYWNoZSx0aGlzLm9wZXJhdGlvbj1yLm9wZXJhdGlvbix0aGlzLnNpZ25hdHVyZVZlcnNpb249ci5zaWduYXR1cmVWZXJzaW9ufSxhbGdvcml0aG06XCJBV1M0LUhNQUMtU0hBMjU2XCIsYWRkQXV0aG9yaXphdGlvbjpmdW5jdGlvbihlLHQpe3ZhciByPW4udXRpbC5kYXRlLmlzbzg2MDEodCkucmVwbGFjZSgvWzpcXC1dfFxcLlxcZHszfS9nLFwiXCIpO3RoaXMuaXNQcmVzaWduZWQoKT90aGlzLnVwZGF0ZUZvclByZXNpZ25lZChlLHIpOnRoaXMuYWRkSGVhZGVycyhlLHIpLHRoaXMucmVxdWVzdC5oZWFkZXJzLkF1dGhvcml6YXRpb249dGhpcy5hdXRob3JpemF0aW9uKGUscil9LGFkZEhlYWRlcnM6ZnVuY3Rpb24oZSx0KXt0aGlzLnJlcXVlc3QuaGVhZGVyc1tcIlgtQW16LURhdGVcIl09dCxlLnNlc3Npb25Ub2tlbiYmKHRoaXMucmVxdWVzdC5oZWFkZXJzW1wieC1hbXotc2VjdXJpdHktdG9rZW5cIl09ZS5zZXNzaW9uVG9rZW4pfSx1cGRhdGVGb3JQcmVzaWduZWQ6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLmNyZWRlbnRpYWxTdHJpbmcodCksaT17XCJYLUFtei1EYXRlXCI6dCxcIlgtQW16LUFsZ29yaXRobVwiOnRoaXMuYWxnb3JpdGhtLFwiWC1BbXotQ3JlZGVudGlhbFwiOmUuYWNjZXNzS2V5SWQrXCIvXCIrcixcIlgtQW16LUV4cGlyZXNcIjp0aGlzLnJlcXVlc3QuaGVhZGVyc1tcInByZXNpZ25lZC1leHBpcmVzXCJdLFwiWC1BbXotU2lnbmVkSGVhZGVyc1wiOnRoaXMuc2lnbmVkSGVhZGVycygpfTtlLnNlc3Npb25Ub2tlbiYmKGlbXCJYLUFtei1TZWN1cml0eS1Ub2tlblwiXT1lLnNlc3Npb25Ub2tlbiksdGhpcy5yZXF1ZXN0LmhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0mJihpW1wiQ29udGVudC1UeXBlXCJdPXRoaXMucmVxdWVzdC5oZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdKSx0aGlzLnJlcXVlc3QuaGVhZGVyc1tcIkNvbnRlbnQtTUQ1XCJdJiYoaVtcIkNvbnRlbnQtTUQ1XCJdPXRoaXMucmVxdWVzdC5oZWFkZXJzW1wiQ29udGVudC1NRDVcIl0pLHRoaXMucmVxdWVzdC5oZWFkZXJzW1wiQ2FjaGUtQ29udHJvbFwiXSYmKGlbXCJDYWNoZS1Db250cm9sXCJdPXRoaXMucmVxdWVzdC5oZWFkZXJzW1wiQ2FjaGUtQ29udHJvbFwiXSksbi51dGlsLmVhY2guY2FsbCh0aGlzLHRoaXMucmVxdWVzdC5oZWFkZXJzLGZ1bmN0aW9uKGUsdCl7aWYoXCJwcmVzaWduZWQtZXhwaXJlc1wiIT09ZSYmdGhpcy5pc1NpZ25hYmxlSGVhZGVyKGUpKXt2YXIgcj1lLnRvTG93ZXJDYXNlKCk7MD09PXIuaW5kZXhPZihcIngtYW16LW1ldGEtXCIpP2lbcl09dDowPT09ci5pbmRleE9mKFwieC1hbXotXCIpJiYoaVtlXT10KX19KTt2YXIgbz10aGlzLnJlcXVlc3QucGF0aC5pbmRleE9mKFwiP1wiKT49MD9cIiZcIjpcIj9cIjt0aGlzLnJlcXVlc3QucGF0aCs9bytuLnV0aWwucXVlcnlQYXJhbXNUb1N0cmluZyhpKX0sYXV0aG9yaXphdGlvbjpmdW5jdGlvbihlLHQpe3ZhciByPVtdLG49dGhpcy5jcmVkZW50aWFsU3RyaW5nKHQpO3JldHVybiByLnB1c2godGhpcy5hbGdvcml0aG0rXCIgQ3JlZGVudGlhbD1cIitlLmFjY2Vzc0tleUlkK1wiL1wiK24pLHIucHVzaChcIlNpZ25lZEhlYWRlcnM9XCIrdGhpcy5zaWduZWRIZWFkZXJzKCkpLHIucHVzaChcIlNpZ25hdHVyZT1cIit0aGlzLnNpZ25hdHVyZShlLHQpKSxyLmpvaW4oXCIsIFwiKX0sc2lnbmF0dXJlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9aS5nZXRTaWduaW5nS2V5KGUsdC5zdWJzdHIoMCw4KSx0aGlzLnJlcXVlc3QucmVnaW9uLHRoaXMuc2VydmljZU5hbWUsdGhpcy5zaWduYXR1cmVDYWNoZSk7cmV0dXJuIG4udXRpbC5jcnlwdG8uaG1hYyhyLHRoaXMuc3RyaW5nVG9TaWduKHQpLFwiaGV4XCIpfSxzdHJpbmdUb1NpZ246ZnVuY3Rpb24oZSl7dmFyIHQ9W107cmV0dXJuIHQucHVzaChcIkFXUzQtSE1BQy1TSEEyNTZcIiksdC5wdXNoKGUpLHQucHVzaCh0aGlzLmNyZWRlbnRpYWxTdHJpbmcoZSkpLHQucHVzaCh0aGlzLmhleEVuY29kZWRIYXNoKHRoaXMuY2Fub25pY2FsU3RyaW5nKCkpKSx0LmpvaW4oXCJcXG5cIil9LGNhbm9uaWNhbFN0cmluZzpmdW5jdGlvbigpe3ZhciBlPVtdLHQ9dGhpcy5yZXF1ZXN0LnBhdGhuYW1lKCk7cmV0dXJuXCJzM1wiIT09dGhpcy5zZXJ2aWNlTmFtZSYmXCJzM3Y0XCIhPT10aGlzLnNpZ25hdHVyZVZlcnNpb24mJih0PW4udXRpbC51cmlFc2NhcGVQYXRoKHQpKSxlLnB1c2godGhpcy5yZXF1ZXN0Lm1ldGhvZCksZS5wdXNoKHQpLGUucHVzaCh0aGlzLnJlcXVlc3Quc2VhcmNoKCkpLGUucHVzaCh0aGlzLmNhbm9uaWNhbEhlYWRlcnMoKStcIlxcblwiKSxlLnB1c2godGhpcy5zaWduZWRIZWFkZXJzKCkpLGUucHVzaCh0aGlzLmhleEVuY29kZWRCb2R5SGFzaCgpKSxlLmpvaW4oXCJcXG5cIil9LGNhbm9uaWNhbEhlYWRlcnM6ZnVuY3Rpb24oKXt2YXIgZT1bXTtuLnV0aWwuZWFjaC5jYWxsKHRoaXMsdGhpcy5yZXF1ZXN0LmhlYWRlcnMsZnVuY3Rpb24odCxyKXtlLnB1c2goW3Qscl0pfSksZS5zb3J0KGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGVbMF0udG9Mb3dlckNhc2UoKTx0WzBdLnRvTG93ZXJDYXNlKCk/LTE6MX0pO3ZhciB0PVtdO3JldHVybiBuLnV0aWwuYXJyYXlFYWNoLmNhbGwodGhpcyxlLGZ1bmN0aW9uKGUpe3ZhciByPWVbMF0udG9Mb3dlckNhc2UoKTtpZih0aGlzLmlzU2lnbmFibGVIZWFkZXIocikpe3ZhciBpPWVbMV07aWYodm9pZCAwPT09aXx8bnVsbD09PWl8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGkudG9TdHJpbmcpdGhyb3cgbi51dGlsLmVycm9yKG5ldyBFcnJvcihcIkhlYWRlciBcIityK1wiIGNvbnRhaW5zIGludmFsaWQgdmFsdWVcIikse2NvZGU6XCJJbnZhbGlkSGVhZGVyXCJ9KTt0LnB1c2gocitcIjpcIit0aGlzLmNhbm9uaWNhbEhlYWRlclZhbHVlcyhpLnRvU3RyaW5nKCkpKX19KSx0LmpvaW4oXCJcXG5cIil9LGNhbm9uaWNhbEhlYWRlclZhbHVlczpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXHMrL2csXCIgXCIpLnJlcGxhY2UoL15cXHMrfFxccyskL2csXCJcIil9LHNpZ25lZEhlYWRlcnM6ZnVuY3Rpb24oKXt2YXIgZT1bXTtyZXR1cm4gbi51dGlsLmVhY2guY2FsbCh0aGlzLHRoaXMucmVxdWVzdC5oZWFkZXJzLGZ1bmN0aW9uKHQpe3Q9dC50b0xvd2VyQ2FzZSgpLHRoaXMuaXNTaWduYWJsZUhlYWRlcih0KSYmZS5wdXNoKHQpfSksZS5zb3J0KCkuam9pbihcIjtcIil9LGNyZWRlbnRpYWxTdHJpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuIGkuY3JlYXRlU2NvcGUoZS5zdWJzdHIoMCw4KSx0aGlzLnJlcXVlc3QucmVnaW9uLHRoaXMuc2VydmljZU5hbWUpfSxoZXhFbmNvZGVkSGFzaDpmdW5jdGlvbihlKXtyZXR1cm4gbi51dGlsLmNyeXB0by5zaGEyNTYoZSxcImhleFwiKX0saGV4RW5jb2RlZEJvZHlIYXNoOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yZXF1ZXN0O3JldHVybiB0aGlzLmlzUHJlc2lnbmVkKCkmJlwiczNcIj09PXRoaXMuc2VydmljZU5hbWUmJiFlLmJvZHk/XCJVTlNJR05FRC1QQVlMT0FEXCI6ZS5oZWFkZXJzW1wiWC1BbXotQ29udGVudC1TaGEyNTZcIl0/ZS5oZWFkZXJzW1wiWC1BbXotQ29udGVudC1TaGEyNTZcIl06dGhpcy5oZXhFbmNvZGVkSGFzaCh0aGlzLnJlcXVlc3QuYm9keXx8XCJcIil9LHVuc2lnbmFibGVIZWFkZXJzOltcImF1dGhvcml6YXRpb25cIixcImNvbnRlbnQtdHlwZVwiLFwiY29udGVudC1sZW5ndGhcIixcInVzZXItYWdlbnRcIixcInByZXNpZ25lZC1leHBpcmVzXCIsXCJleHBlY3RcIixcIngtYW16bi10cmFjZS1pZFwiXSxpc1NpZ25hYmxlSGVhZGVyOmZ1bmN0aW9uKGUpe3JldHVybiAwPT09ZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJ4LWFtei1cIil8fHRoaXMudW5zaWduYWJsZUhlYWRlcnMuaW5kZXhPZihlKTwwfSxpc1ByZXNpZ25lZDpmdW5jdGlvbigpe3JldHVybiEhdGhpcy5yZXF1ZXN0LmhlYWRlcnNbXCJwcmVzaWduZWQtZXhwaXJlc1wiXX19KSx0LmV4cG9ydHM9bi5TaWduZXJzLlY0fSx7XCIuLi9jb3JlXCI6MTksXCIuL3Y0X2NyZWRlbnRpYWxzXCI6NzB9XSw3MDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuLi9jb3JlXCIpLGk9e30sbz1bXTt0LmV4cG9ydHM9e2NyZWF0ZVNjb3BlOmZ1bmN0aW9uKGUsdCxyKXtyZXR1cm5bZS5zdWJzdHIoMCw4KSx0LHIsXCJhd3M0X3JlcXVlc3RcIl0uam9pbihcIi9cIil9LGdldFNpZ25pbmdLZXk6ZnVuY3Rpb24oZSx0LHIscyxhKXt2YXIgdT1uLnV0aWwuY3J5cHRvLmhtYWMoZS5zZWNyZXRBY2Nlc3NLZXksZS5hY2Nlc3NLZXlJZCxcImJhc2U2NFwiKSxjPVt1LHQscixzXS5qb2luKFwiX1wiKTtpZigoYT0hMSE9PWEpJiZjIGluIGkpcmV0dXJuIGlbY107dmFyIGw9bi51dGlsLmNyeXB0by5obWFjKFwiQVdTNFwiK2Uuc2VjcmV0QWNjZXNzS2V5LHQsXCJidWZmZXJcIikscD1uLnV0aWwuY3J5cHRvLmhtYWMobCxyLFwiYnVmZmVyXCIpLGg9bi51dGlsLmNyeXB0by5obWFjKHAscyxcImJ1ZmZlclwiKSxmPW4udXRpbC5jcnlwdG8uaG1hYyhoLFwiYXdzNF9yZXF1ZXN0XCIsXCJidWZmZXJcIik7cmV0dXJuIGEmJihpW2NdPWYsby5wdXNoKGMpLG8ubGVuZ3RoPjUwJiZkZWxldGUgaVtvLnNoaWZ0KCldKSxmfSxlbXB0eUNhY2hlOmZ1bmN0aW9uKCl7aT17fSxvPVtdfX19LHtcIi4uL2NvcmVcIjoxOX1dLDcxOltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlLHQpe3RoaXMuY3VycmVudFN0YXRlPXR8fG51bGwsdGhpcy5zdGF0ZXM9ZXx8e319bi5wcm90b3R5cGUucnVuVG89ZnVuY3Rpb24oZSx0LHIsbil7XCJmdW5jdGlvblwiPT10eXBlb2YgZSYmKG49cixyPXQsdD1lLGU9bnVsbCk7dmFyIGk9dGhpcyxvPWkuc3RhdGVzW2kuY3VycmVudFN0YXRlXTtvLmZuLmNhbGwocnx8aSxuLGZ1bmN0aW9uKG4pe2lmKG4pe2lmKCFvLmZhaWwpcmV0dXJuIHQ/dC5jYWxsKHIsbik6bnVsbDtpLmN1cnJlbnRTdGF0ZT1vLmZhaWx9ZWxzZXtpZighby5hY2NlcHQpcmV0dXJuIHQ/dC5jYWxsKHIpOm51bGw7aS5jdXJyZW50U3RhdGU9by5hY2NlcHR9aWYoaS5jdXJyZW50U3RhdGU9PT1lKXJldHVybiB0P3QuY2FsbChyLG4pOm51bGw7aS5ydW5UbyhlLHQscixuKX0pfSxuLnByb3RvdHlwZS5hZGRTdGF0ZT1mdW5jdGlvbihlLHQscixuKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0PyhuPXQsdD1udWxsLHI9bnVsbCk6XCJmdW5jdGlvblwiPT10eXBlb2YgciYmKG49cixyPW51bGwpLHRoaXMuY3VycmVudFN0YXRlfHwodGhpcy5jdXJyZW50U3RhdGU9ZSksdGhpcy5zdGF0ZXNbZV09e2FjY2VwdDp0LGZhaWw6cixmbjpufSx0aGlzfSx0LmV4cG9ydHM9bn0se31dLDcyOltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKHIsbil7dmFyIGksbz17ZW52aXJvbm1lbnQ6XCJub2RlanNcIixlbmdpbmU6ZnVuY3Rpb24oKXtpZihvLmlzQnJvd3NlcigpJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yKXJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50O3ZhciBlPXIucGxhdGZvcm0rXCIvXCIrci52ZXJzaW9uO3JldHVybiByLmVudi5BV1NfRVhFQ1VUSU9OX0VOViYmKGUrPVwiIGV4ZWMtZW52L1wiK3IuZW52LkFXU19FWEVDVVRJT05fRU5WKSxlfSx1c2VyQWdlbnQ6ZnVuY3Rpb24oKXt2YXIgdD1vLmVudmlyb25tZW50LHI9XCJhd3Mtc2RrLVwiK3QrXCIvXCIrZShcIi4vY29yZVwiKS5WRVJTSU9OO3JldHVyblwibm9kZWpzXCI9PT10JiYocis9XCIgXCIrby5lbmdpbmUoKSkscn0sdXJpRXNjYXBlOmZ1bmN0aW9uKGUpe3ZhciB0PWVuY29kZVVSSUNvbXBvbmVudChlKTtyZXR1cm4gdD10LnJlcGxhY2UoL1teQS1aYS16MC05Xy5+XFwtJV0rL2csZXNjYXBlKSx0PXQucmVwbGFjZSgvWypdL2csZnVuY3Rpb24oZSl7cmV0dXJuXCIlXCIrZS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfSl9LHVyaUVzY2FwZVBhdGg6ZnVuY3Rpb24oZSl7dmFyIHQ9W107cmV0dXJuIG8uYXJyYXlFYWNoKGUuc3BsaXQoXCIvXCIpLGZ1bmN0aW9uKGUpe3QucHVzaChvLnVyaUVzY2FwZShlKSl9KSx0LmpvaW4oXCIvXCIpfSx1cmxQYXJzZTpmdW5jdGlvbihlKXtyZXR1cm4gby51cmwucGFyc2UoZSl9LHVybEZvcm1hdDpmdW5jdGlvbihlKXtyZXR1cm4gby51cmwuZm9ybWF0KGUpfSxxdWVyeVN0cmluZ1BhcnNlOmZ1bmN0aW9uKGUpe3JldHVybiBvLnF1ZXJ5c3RyaW5nLnBhcnNlKGUpfSxxdWVyeVBhcmFtc1RvU3RyaW5nOmZ1bmN0aW9uKGUpe3ZhciB0PVtdLHI9by51cmlFc2NhcGUsbj1PYmplY3Qua2V5cyhlKS5zb3J0KCk7cmV0dXJuIG8uYXJyYXlFYWNoKG4sZnVuY3Rpb24obil7dmFyIGk9ZVtuXSxzPXIobiksYT1zK1wiPVwiO2lmKEFycmF5LmlzQXJyYXkoaSkpe3ZhciB1PVtdO28uYXJyYXlFYWNoKGksZnVuY3Rpb24oZSl7dS5wdXNoKHIoZSkpfSksYT1zK1wiPVwiK3Uuc29ydCgpLmpvaW4oXCImXCIrcytcIj1cIil9ZWxzZSB2b2lkIDAhPT1pJiZudWxsIT09aSYmKGE9cytcIj1cIityKGkpKTt0LnB1c2goYSl9KSx0LmpvaW4oXCImXCIpfSxyZWFkRmlsZVN5bmM6ZnVuY3Rpb24odCl7cmV0dXJuIG8uaXNCcm93c2VyKCk/bnVsbDplKFwiZnNcIikucmVhZEZpbGVTeW5jKHQsXCJ1dGYtOFwiKX0sYmFzZTY0OntlbmNvZGU6ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpdGhyb3cgby5lcnJvcihuZXcgRXJyb3IoXCJDYW5ub3QgYmFzZTY0IGVuY29kZSBudW1iZXIgXCIrZSkpO3JldHVybiBudWxsPT09ZXx8dm9pZCAwPT09ZT9lOm8uYnVmZmVyLnRvQnVmZmVyKGUpLnRvU3RyaW5nKFwiYmFzZTY0XCIpfSxkZWNvZGU6ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpdGhyb3cgby5lcnJvcihuZXcgRXJyb3IoXCJDYW5ub3QgYmFzZTY0IGRlY29kZSBudW1iZXIgXCIrZSkpO3JldHVybiBudWxsPT09ZXx8dm9pZCAwPT09ZT9lOm8uYnVmZmVyLnRvQnVmZmVyKGUsXCJiYXNlNjRcIil9fSxidWZmZXI6e3RvQnVmZmVyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2Ygby5CdWZmZXIuZnJvbSYmby5CdWZmZXIuZnJvbSE9PVVpbnQ4QXJyYXkuZnJvbT9vLkJ1ZmZlci5mcm9tKGUsdCk6bmV3IG8uQnVmZmVyKGUsdCl9LGFsbG9jOmZ1bmN0aW9uKGUsdCxyKXtpZihcIm51bWJlclwiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJzaXplIHBhc3NlZCB0byBhbGxvYyBtdXN0IGJlIGEgbnVtYmVyLlwiKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBvLkJ1ZmZlci5hbGxvYylyZXR1cm4gby5CdWZmZXIuYWxsb2MoZSx0LHIpO3ZhciBuPW5ldyBvLkJ1ZmZlcihlKTtyZXR1cm4gdm9pZCAwIT09dCYmXCJmdW5jdGlvblwiPT10eXBlb2Ygbi5maWxsJiZuLmZpbGwodCx2b2lkIDAsdm9pZCAwLHIpLG59LHRvU3RyZWFtOmZ1bmN0aW9uKGUpe28uQnVmZmVyLmlzQnVmZmVyKGUpfHwoZT1vLmJ1ZmZlci50b0J1ZmZlcihlKSk7dmFyIHQ9bmV3IG8uc3RyZWFtLlJlYWRhYmxlLHI9MDtyZXR1cm4gdC5fcmVhZD1mdW5jdGlvbihuKXtpZihyPj1lLmxlbmd0aClyZXR1cm4gdC5wdXNoKG51bGwpO3ZhciBpPXIrbjtpPmUubGVuZ3RoJiYoaT1lLmxlbmd0aCksdC5wdXNoKGUuc2xpY2UocixpKSkscj1pfSx0fSxjb25jYXQ6ZnVuY3Rpb24oZSl7dmFyIHQscj0wLG49MCxpPW51bGw7Zm9yKHQ9MDt0PGUubGVuZ3RoO3QrKylyKz1lW3RdLmxlbmd0aDtmb3IoaT1vLmJ1ZmZlci5hbGxvYyhyKSx0PTA7dDxlLmxlbmd0aDt0KyspZVt0XS5jb3B5KGksbiksbis9ZVt0XS5sZW5ndGg7cmV0dXJuIGl9fSxzdHJpbmc6e2J5dGVMZW5ndGg6ZnVuY3Rpb24odCl7aWYobnVsbD09PXR8fHZvaWQgMD09PXQpcmV0dXJuIDA7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PW8uYnVmZmVyLnRvQnVmZmVyKHQpKSxcIm51bWJlclwiPT10eXBlb2YgdC5ieXRlTGVuZ3RoKXJldHVybiB0LmJ5dGVMZW5ndGg7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQubGVuZ3RoKXJldHVybiB0Lmxlbmd0aDtpZihcIm51bWJlclwiPT10eXBlb2YgdC5zaXplKXJldHVybiB0LnNpemU7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQucGF0aClyZXR1cm4gZShcImZzXCIpLmxzdGF0U3luYyh0LnBhdGgpLnNpemU7dGhyb3cgby5lcnJvcihuZXcgRXJyb3IoXCJDYW5ub3QgZGV0ZXJtaW5lIGxlbmd0aCBvZiBcIit0KSx7b2JqZWN0OnR9KX0sdXBwZXJGaXJzdDpmdW5jdGlvbihlKXtyZXR1cm4gZVswXS50b1VwcGVyQ2FzZSgpK2Uuc3Vic3RyKDEpfSxsb3dlckZpcnN0OmZ1bmN0aW9uKGUpe3JldHVybiBlWzBdLnRvTG93ZXJDYXNlKCkrZS5zdWJzdHIoMSl9fSxpbmk6e3BhcnNlOmZ1bmN0aW9uKGUpe3ZhciB0LHI9e307cmV0dXJuIG8uYXJyYXlFYWNoKGUuc3BsaXQoL1xccj9cXG4vKSxmdW5jdGlvbihlKXtlPWUuc3BsaXQoLyhefFxccylbOyNdLylbMF07dmFyIG49ZS5tYXRjaCgvXlxccypcXFsoW15cXFtcXF1dKylcXF1cXHMqJC8pO2lmKG4pdD1uWzFdO2Vsc2UgaWYodCl7dmFyIGk9ZS5tYXRjaCgvXlxccyooLis/KVxccyo9XFxzKiguKz8pXFxzKiQvKTtpJiYoclt0XT1yW3RdfHx7fSxyW3RdW2lbMV1dPWlbMl0pfX0pLHJ9fSxmbjp7bm9vcDpmdW5jdGlvbigpe30sY2FsbGJhY2s6ZnVuY3Rpb24oZSl7aWYoZSl0aHJvdyBlfSxtYWtlQXN5bmM6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdCYmdDw9ZS5sZW5ndGg/ZTpmdW5jdGlvbigpe3ZhciB0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTt0LnBvcCgpKGUuYXBwbHkobnVsbCx0KSl9fX0sZGF0ZTp7Z2V0RGF0ZTpmdW5jdGlvbigpe3JldHVybiBpfHwoaT1lKFwiLi9jb3JlXCIpKSxpLmNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldD9uZXcgRGF0ZSgobmV3IERhdGUpLmdldFRpbWUoKStpLmNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldCk6bmV3IERhdGV9LGlzbzg2MDE6ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPW8uZGF0ZS5nZXREYXRlKCkpLGUudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9cXC5cXGR7M31aJC8sXCJaXCIpfSxyZmM4MjI6ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPW8uZGF0ZS5nZXREYXRlKCkpLGUudG9VVENTdHJpbmcoKX0sdW5peFRpbWVzdGFtcDpmdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9by5kYXRlLmdldERhdGUoKSksZS5nZXRUaW1lKCkvMWUzfSxmcm9tOmZ1bmN0aW9uKGUpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBlP25ldyBEYXRlKDFlMyplKTpuZXcgRGF0ZShlKX0sZm9ybWF0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR8fCh0PVwiaXNvODYwMVwiKSxvLmRhdGVbdF0oby5kYXRlLmZyb20oZSkpfSxwYXJzZVRpbWVzdGFtcDpmdW5jdGlvbihlKXtpZihcIm51bWJlclwiPT10eXBlb2YgZSlyZXR1cm4gbmV3IERhdGUoMWUzKmUpO2lmKGUubWF0Y2goL15cXGQrJC8pKXJldHVybiBuZXcgRGF0ZSgxZTMqZSk7aWYoZS5tYXRjaCgvXlxcZHs0fS8pKXJldHVybiBuZXcgRGF0ZShlKTtpZihlLm1hdGNoKC9eXFx3ezN9LC8pKXJldHVybiBuZXcgRGF0ZShlKTt0aHJvdyBvLmVycm9yKG5ldyBFcnJvcihcInVuaGFuZGxlZCB0aW1lc3RhbXAgZm9ybWF0OiBcIitlKSx7Y29kZTpcIlRpbWVzdGFtcFBhcnNlckVycm9yXCJ9KX19LGNyeXB0bzp7Y3JjMzJUYWJsZTpbMCwxOTk2OTU5ODk0LDM5OTM5MTk3ODgsMjU2NzUyNDc5NCwxMjQ2MzQxMzcsMTg4NjA1NzYxNSwzOTE1NjIxNjg1LDI2NTczOTIwMzUsMjQ5MjY4Mjc0LDIwNDQ1MDgzMjQsMzc3MjExNTIzMCwyNTQ3MTc3ODY0LDE2Mjk0MTk5NSwyMTI1NTYxMDIxLDM4ODc2MDcwNDcsMjQyODQ0NDA0OSw0OTg1MzY1NDgsMTc4OTkyNzY2Niw0MDg5MDE2NjQ4LDIyMjcwNjEyMTQsNDUwNTQ4ODYxLDE4NDMyNTg2MDMsNDEwNzU4MDc1MywyMjExNjc3NjM5LDMyNTg4Mzk5MCwxNjg0Nzc3MTUyLDQyNTExMjIwNDIsMjMyMTkyNjYzNiwzMzU2MzM0ODcsMTY2MTM2NTQ2NSw0MTk1MzAyNzU1LDIzNjYxMTUzMTcsOTk3MDczMDk2LDEyODE5NTM4ODYsMzU3OTg1NTMzMiwyNzI0Njg4MjQyLDEwMDY4ODgxNDUsMTI1ODYwNzY4NywzNTI0MTAxNjI5LDI3Njg5NDI0NDMsOTAxMDk3NzIyLDExMTkwMDA2ODQsMzY4NjUxNzIwNiwyODk4MDY1NzI4LDg1MzA0NDQ1MSwxMTcyMjY2MTAxLDM3MDUwMTU3NTksMjg4MjYxNjY2NSw2NTE3Njc5ODAsMTM3MzUwMzU0NiwzMzY5NTU0MzA0LDMyMTgxMDQ1OTgsNTY1NTA3MjUzLDE0NTQ2MjE3MzEsMzQ4NTExMTcwNSwzMDk5NDM2MzAzLDY3MTI2Njk3NCwxNTk0MTk4MDI0LDMzMjI3MzA5MzAsMjk3MDM0NzgxMiw3OTU4MzU1MjcsMTQ4MzIzMDIyNSwzMjQ0MzY3Mjc1LDMwNjAxNDk1NjUsMTk5NDE0NjE5MiwzMTE1ODUzNCwyNTYzOTA3NzcyLDQwMjM3MTc5MzAsMTkwNzQ1OTQ2NSwxMTI2MzcyMTUsMjY4MDE1MzI1MywzOTA0NDI3MDU5LDIwMTM3NzYyOTAsMjUxNzIyMDM2LDI1MTcyMTUzNzQsMzc3NTgzMDA0MCwyMTM3NjU2NzYzLDE0MTM3NjgxMywyNDM5Mjc3NzE5LDM4NjUyNzEyOTcsMTgwMjE5NTQ0NCw0NzY4NjQ4NjYsMjIzODAwMTM2OCw0MDY2NTA4ODc4LDE4MTIzNzA5MjUsNDUzMDkyNzMxLDIxODE2MjUwMjUsNDExMTQ1MTIyMywxNzA2MDg4OTAyLDMxNDA0MjcwNCwyMzQ0NTMyMjAyLDQyNDAwMTc1MzIsMTY1ODY1ODI3MSwzNjY2MTk5NzcsMjM2MjY3MDMyMyw0MjI0OTk0NDA1LDEzMDM1MzU5NjAsOTg0OTYxNDg2LDI3NDcwMDcwOTIsMzU2OTAzNzUzOCwxMjU2MTcwODE3LDEwMzc2MDQzMTEsMjc2NTIxMDczMywzNTU0MDc5OTk1LDExMzEwMTQ1MDYsODc5Njc5OTk2LDI5MDkyNDM0NjIsMzY2Mzc3MTg1NiwxMTQxMTI0NDY3LDg1NTg0MjI3NywyODUyODAxNjMxLDM3MDg2NDg2NDksMTM0MjUzMzk0OCw2NTQ0NTkzMDYsMzE4ODM5NjA0OCwzMzczMDE1MTc0LDE0NjY0Nzk5MDksNTQ0MTc5NjM1LDMxMTA1MjM5MTMsMzQ2MjUyMjAxNSwxNTkxNjcxMDU0LDcwMjEzODc3NiwyOTY2NDYwNDUwLDMzNTI3OTk0MTIsMTUwNDkxODgwNyw3ODM1NTE4NzMsMzA4MjY0MDQ0MywzMjMzNDQyOTg5LDM5ODgyOTIzODQsMjU5NjI1NDY0Niw2MjMxNzA2OCwxOTU3ODEwODQyLDM5Mzk4NDU5NDUsMjY0NzgxNjExMSw4MTQ3MDk5NywxOTQzODAzNTIzLDM4MTQ5MTg5MzAsMjQ4OTU5NjgwNCwyMjUyNzQ0MzAsMjA1Mzc5MDM3NiwzODI2MTc1NzU1LDI0NjY5MDYwMTMsMTY3ODE2NzQzLDIwOTc2NTEzNzcsNDAyNzU1MjU4MCwyMjY1NDkwMzg2LDUwMzQ0NDA3MiwxNzYyMDUwODE0LDQxNTA0MTcyNDUsMjE1NDEyOTM1NSw0MjY1MjIyMjUsMTg1MjUwNzg3OSw0Mjc1MzEzNTI2LDIzMTIzMTc5MjAsMjgyNzUzNjI2LDE3NDI1NTU4NTIsNDE4OTcwODE0MywyMzk0ODc3OTQ1LDM5NzkxNzc2MywxNjIyMTgzNjM3LDM2MDQzOTA4ODgsMjcxNDg2NjU1OCw5NTM3Mjk3MzIsMTM0MDA3NjYyNiwzNTE4NzE5OTg1LDI3OTczNjA5OTksMTA2ODgyODM4MSwxMjE5NjM4ODU5LDM2MjQ3NDE4NTAsMjkzNjY3NTE0OCw5MDYxODU0NjIsMTA5MDgxMjUxMiwzNzQ3NjcyMDAzLDI4MjUzNzk2NjksODI5MzI5MTM1LDExODEzMzUxNjEsMzQxMjE3NzgwNCwzMTYwODM0ODQyLDYyODA4NTQwOCwxMzgyNjA1MzY2LDM0MjMzNjkxMDksMzEzODA3ODQ2Nyw1NzA1NjIyMzMsMTQyNjQwMDgxNSwzMzE3MzE2NTQyLDI5OTg3MzM2MDgsNzMzMjM5OTU0LDE1NTUyNjE5NTYsMzI2ODkzNTU5MSwzMDUwMzYwNjI1LDc1MjQ1OTQwMywxNTQxMzIwMjIxLDI2MDcwNzE5MjAsMzk2NTk3MzAzMCwxOTY5OTIyOTcyLDQwNzM1NDk4LDI2MTc4MzcyMjUsMzk0MzU3NzE1MSwxOTEzMDg3ODc3LDgzOTA4MzcxLDI1MTIzNDE2MzQsMzgwMzc0MDY5MiwyMDc1MjA4NjIyLDIxMzI2MTExMiwyNDYzMjcyNjAzLDM4NTU5OTAyODUsMjA5NDg1NDA3MSwxOTg5NTg4ODEsMjI2MjAyOTAxMiw0MDU3MjYwNjEwLDE3NTkzNTk5OTIsNTM0NDE0MTkwLDIxNzY3MTg1NDEsNDEzOTMyOTExNSwxODczODM2MDAxLDQxNDY2NDU2NywyMjgyMjQ4OTM0LDQyNzkyMDAzNjgsMTcxMTY4NDU1NCwyODUyODExMTYsMjQwNTgwMTcyNyw0MTY3MjE2NzQ1LDE2MzQ0Njc3OTUsMzc2MjI5NzAxLDI2ODUwNjc4OTYsMzYwODAwNzQwNiwxMzA4OTE4NjEyLDk1NjU0MzkzOCwyODA4NTU1MTA1LDM0OTU5NTgyNjMsMTIzMTYzNjMwMSwxMDQ3NDI3MDM1LDI5MzI5NTk4MTgsMzY1NDcwMzgzNiwxMDg4MzU5MjcwLDkzNjkxOGUzLDI4NDc3MTQ4OTksMzczNjgzNzgyOSwxMjAyOTAwODYzLDgxNzIzMzg5NywzMTgzMzQyMTA4LDM0MDEyMzcxMzAsMTQwNDI3NzU1Miw2MTU4MTgxNTAsMzEzNDIwNzQ5MywzNDUzNDIxMjAzLDE0MjM4NTc0NDksNjAxNDUwNDMxLDMwMDk4Mzc2MTQsMzI5NDcxMDQ1NiwxNTY3MTAzNzQ2LDcxMTkyODcyNCwzMDIwNjY4NDcxLDMyNzIzODAwNjUsMTUxMDMzNDIzNSw3NTUxNjcxMTddLGNyYzMyOmZ1bmN0aW9uKGUpe3ZhciB0PW8uY3J5cHRvLmNyYzMyVGFibGUscj0tMTtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9by5idWZmZXIudG9CdWZmZXIoZSkpO2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXtyPXI+Pj44XnRbMjU1JihyXmUucmVhZFVJbnQ4KG4pKV19cmV0dXJuKC0xXnIpPj4+MH0saG1hYzpmdW5jdGlvbihlLHQscixuKXtyZXR1cm4gcnx8KHI9XCJiaW5hcnlcIiksXCJidWZmZXJcIj09PXImJihyPXZvaWQgMCksbnx8KG49XCJzaGEyNTZcIiksXCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PW8uYnVmZmVyLnRvQnVmZmVyKHQpKSxvLmNyeXB0by5saWIuY3JlYXRlSG1hYyhuLGUpLnVwZGF0ZSh0KS5kaWdlc3Qocil9LG1kNTpmdW5jdGlvbihlLHQscil7cmV0dXJuIG8uY3J5cHRvLmhhc2goXCJtZDVcIixlLHQscil9LHNoYTI1NjpmdW5jdGlvbihlLHQscil7cmV0dXJuIG8uY3J5cHRvLmhhc2goXCJzaGEyNTZcIixlLHQscil9LGhhc2g6ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk9by5jcnlwdG8uY3JlYXRlSGFzaChlKTtyfHwocj1cImJpbmFyeVwiKSxcImJ1ZmZlclwiPT09ciYmKHI9dm9pZCAwKSxcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9by5idWZmZXIudG9CdWZmZXIodCkpO3ZhciBzPW8uYXJyYXlTbGljZUZuKHQpLGE9by5CdWZmZXIuaXNCdWZmZXIodCk7aWYoby5pc0Jyb3dzZXIoKSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyJiZ0JiZ0LmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyJiYoYT0hMCksbiYmXCJvYmplY3RcIj09dHlwZW9mIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQub24mJiFhKXQub24oXCJkYXRhXCIsZnVuY3Rpb24oZSl7aS51cGRhdGUoZSl9KSx0Lm9uKFwiZXJyb3JcIixmdW5jdGlvbihlKXtuKGUpfSksdC5vbihcImVuZFwiLGZ1bmN0aW9uKCl7bihudWxsLGkuZGlnZXN0KHIpKX0pO2Vsc2V7aWYoIW58fCFzfHxhfHxcInVuZGVmaW5lZFwiPT10eXBlb2YgRmlsZVJlYWRlcil7by5pc0Jyb3dzZXIoKSYmXCJvYmplY3RcIj09dHlwZW9mIHQmJiFhJiYodD1uZXcgby5CdWZmZXIobmV3IFVpbnQ4QXJyYXkodCkpKTt2YXIgdT1pLnVwZGF0ZSh0KS5kaWdlc3Qocik7cmV0dXJuIG4mJm4obnVsbCx1KSx1fXZhciBjPTAsbD1uZXcgRmlsZVJlYWRlcjtsLm9uZXJyb3I9ZnVuY3Rpb24oKXtuKG5ldyBFcnJvcihcIkZhaWxlZCB0byByZWFkIGRhdGEuXCIpKX0sbC5vbmxvYWQ9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgby5CdWZmZXIobmV3IFVpbnQ4QXJyYXkobC5yZXN1bHQpKTtpLnVwZGF0ZShlKSxjKz1lLmxlbmd0aCxsLl9jb250aW51ZVJlYWRpbmcoKX0sbC5fY29udGludWVSZWFkaW5nPWZ1bmN0aW9uKCl7aWYoYz49dC5zaXplKXJldHVybiB2b2lkIG4obnVsbCxpLmRpZ2VzdChyKSk7dmFyIGU9Yys1MjQyODg7ZT50LnNpemUmJihlPXQuc2l6ZSksbC5yZWFkQXNBcnJheUJ1ZmZlcihzLmNhbGwodCxjLGUpKX0sbC5fY29udGludWVSZWFkaW5nKCl9fSx0b0hleDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9W10scj0wO3I8ZS5sZW5ndGg7cisrKXQucHVzaCgoXCIwXCIrZS5jaGFyQ29kZUF0KHIpLnRvU3RyaW5nKDE2KSkuc3Vic3RyKC0yLDIpKTtyZXR1cm4gdC5qb2luKFwiXCIpfSxjcmVhdGVIYXNoOmZ1bmN0aW9uKGUpe3JldHVybiBvLmNyeXB0by5saWIuY3JlYXRlSGFzaChlKX19LGFib3J0Ont9LGVhY2g6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gZSlpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSl7dmFyIG49dC5jYWxsKHRoaXMscixlW3JdKTtpZihuPT09by5hYm9ydClicmVha319LGFycmF5RWFjaDpmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiBlKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHIpKXt2YXIgbj10LmNhbGwodGhpcyxlW3JdLHBhcnNlSW50KHIsMTApKTtpZihuPT09by5hYm9ydClicmVha319LHVwZGF0ZTpmdW5jdGlvbihlLHQpe3JldHVybiBvLmVhY2godCxmdW5jdGlvbih0LHIpe2VbdF09cn0pLGV9LG1lcmdlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG8udXBkYXRlKG8uY29weShlKSx0KX0sY29weTpmdW5jdGlvbihlKXtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSlyZXR1cm4gZTt2YXIgdD17fTtmb3IodmFyIHIgaW4gZSl0W3JdPWVbcl07cmV0dXJuIHR9LGlzRW1wdHk6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0IGluIGUpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCkpcmV0dXJuITE7cmV0dXJuITB9LGFycmF5U2xpY2VGbjpmdW5jdGlvbihlKXt2YXIgdD1lLnNsaWNlfHxlLndlYmtpdFNsaWNlfHxlLm1velNsaWNlO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dDpudWxsfSxpc1R5cGU6ZnVuY3Rpb24oZSx0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYodD1vLnR5cGVOYW1lKHQpKSxPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSk9PT1cIltvYmplY3QgXCIrdCtcIl1cIn0sdHlwZU5hbWU6ZnVuY3Rpb24oZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuYW1lXCIpKXJldHVybiBlLm5hbWU7dmFyIHQ9ZS50b1N0cmluZygpLHI9dC5tYXRjaCgvXlxccypmdW5jdGlvbiAoLispXFwoLyk7cmV0dXJuIHI/clsxXTp0fSxlcnJvcjpmdW5jdGlvbihlLHQpe3ZhciByPW51bGw7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUubWVzc2FnZSYmXCJcIiE9PWUubWVzc2FnZSYmKFwic3RyaW5nXCI9PXR5cGVvZiB0fHx0JiZ0Lm1lc3NhZ2UpJiYocj1vLmNvcHkoZSksci5tZXNzYWdlPWUubWVzc2FnZSksZS5tZXNzYWdlPWUubWVzc2FnZXx8bnVsbCxcInN0cmluZ1wiPT10eXBlb2YgdD9lLm1lc3NhZ2U9dDpcIm9iamVjdFwiPT10eXBlb2YgdCYmbnVsbCE9PXQmJihvLnVwZGF0ZShlLHQpLHQubWVzc2FnZSYmKGUubWVzc2FnZT10Lm1lc3NhZ2UpLCh0LmNvZGV8fHQubmFtZSkmJihlLmNvZGU9dC5jb2RlfHx0Lm5hbWUpLHQuc3RhY2smJihlLnN0YWNrPXQuc3RhY2spKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHkmJihPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIm5hbWVcIix7d3JpdGFibGU6ITAsZW51bWVyYWJsZTohMX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwibWVzc2FnZVwiLHtlbnVtZXJhYmxlOiEwfSkpLGUubmFtZT10JiZ0Lm5hbWV8fGUubmFtZXx8ZS5jb2RlfHxcIkVycm9yXCIsZS50aW1lPW5ldyBEYXRlLHImJihlLm9yaWdpbmFsRXJyb3I9ciksZX0saW5oZXJpdDpmdW5jdGlvbihlLHQpe3ZhciByPW51bGw7aWYodm9pZCAwPT09dCl0PWUsZT1PYmplY3Qscj17fTtlbHNle3ZhciBuPWZ1bmN0aW9uKCl7fTtuLnByb3RvdHlwZT1lLnByb3RvdHlwZSxyPW5ldyBufXJldHVybiB0LmNvbnN0cnVjdG9yPT09T2JqZWN0JiYodC5jb25zdHJ1Y3Rvcj1mdW5jdGlvbigpe2lmKGUhPT1PYmplY3QpcmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfSksdC5jb25zdHJ1Y3Rvci5wcm90b3R5cGU9cixvLnVwZGF0ZSh0LmNvbnN0cnVjdG9yLnByb3RvdHlwZSx0KSx0LmNvbnN0cnVjdG9yLl9fc3VwZXJfXz1lLHQuY29uc3RydWN0b3J9LG1peGluOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50c1swXSx0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKylmb3IodmFyIHIgaW4gYXJndW1lbnRzW3RdLnByb3RvdHlwZSl7dmFyIG49YXJndW1lbnRzW3RdLnByb3RvdHlwZVtyXTtcImNvbnN0cnVjdG9yXCIhPT1yJiYoZS5wcm90b3R5cGVbcl09bil9cmV0dXJuIGV9LGhpZGVQcm9wZXJ0aWVzOmZ1bmN0aW9uKGUsdCl7XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5JiZvLmFycmF5RWFjaCh0LGZ1bmN0aW9uKHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2VudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfSl9KX0scHJvcGVydHk6ZnVuY3Rpb24oZSx0LHIsbixpKXt2YXIgbz17Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6dm9pZCAwPT09bnx8bn07XCJmdW5jdGlvblwiIT10eXBlb2Ygcnx8aT8oby52YWx1ZT1yLG8ud3JpdGFibGU9ITApOm8uZ2V0PXIsT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCxvKX0sbWVtb2l6ZWRQcm9wZXJ0eTpmdW5jdGlvbihlLHQscixuKXt2YXIgaT1udWxsO28ucHJvcGVydHkoZSx0LGZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PT1pJiYoaT1yKCkpLGl9LG4pfSxob2lzdFBheWxvYWRNZW1iZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXF1ZXN0LHI9dC5vcGVyYXRpb24sbj10LnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcl0saT1uLm91dHB1dDtpZihpLnBheWxvYWQmJiFuLmhhc0V2ZW50T3V0cHV0KXt2YXIgcz1pLm1lbWJlcnNbaS5wYXlsb2FkXSxhPWUuZGF0YVtpLnBheWxvYWRdO1wic3RydWN0dXJlXCI9PT1zLnR5cGUmJm8uZWFjaChhLGZ1bmN0aW9uKHQscil7by5wcm9wZXJ0eShlLmRhdGEsdCxyLCExKX0pfX0sY29tcHV0ZVNoYTI1NjpmdW5jdGlvbih0LHIpe2lmKG8uaXNOb2RlKCkpe3ZhciBuPW8uc3RyZWFtLlN0cmVhbSxpPWUoXCJmc1wiKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiZ0IGluc3RhbmNlb2Ygbil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHQucGF0aClyZXR1cm4gcihuZXcgRXJyb3IoXCJOb24tZmlsZSBzdHJlYW0gb2JqZWN0cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIFNpZ1Y0XCIpKTt2YXIgcz17fTtcIm51bWJlclwiPT10eXBlb2YgdC5zdGFydCYmKHMuc3RhcnQ9dC5zdGFydCksXCJudW1iZXJcIj09dHlwZW9mIHQuZW5kJiYocy5lbmQ9dC5lbmQpLHQ9aS5jcmVhdGVSZWFkU3RyZWFtKHQucGF0aCxzKX19by5jcnlwdG8uc2hhMjU2KHQsXCJoZXhcIixmdW5jdGlvbihlLHQpe2U/cihlKTpyKG51bGwsdCl9KX0saXNDbG9ja1NrZXdlZDpmdW5jdGlvbihlKXtpZihlKXJldHVybiBvLnByb3BlcnR5KGkuY29uZmlnLFwiaXNDbG9ja1NrZXdlZFwiLE1hdGguYWJzKChuZXcgRGF0ZSkuZ2V0VGltZSgpLWUpPj0zZTUsITEpLGkuY29uZmlnLmlzQ2xvY2tTa2V3ZWR9LGFwcGx5Q2xvY2tPZmZzZXQ6ZnVuY3Rpb24oZSl7ZSYmKGkuY29uZmlnLnN5c3RlbUNsb2NrT2Zmc2V0PWUtKG5ldyBEYXRlKS5nZXRUaW1lKCkpfSxleHRyYWN0UmVxdWVzdElkOmZ1bmN0aW9uKGUpe3ZhciB0PWUuaHR0cFJlc3BvbnNlLmhlYWRlcnNbXCJ4LWFtei1yZXF1ZXN0LWlkXCJdfHxlLmh0dHBSZXNwb25zZS5oZWFkZXJzW1wieC1hbXpuLXJlcXVlc3RpZFwiXTshdCYmZS5kYXRhJiZlLmRhdGEuUmVzcG9uc2VNZXRhZGF0YSYmKHQ9ZS5kYXRhLlJlc3BvbnNlTWV0YWRhdGEuUmVxdWVzdElkKSx0JiYoZS5yZXF1ZXN0SWQ9dCksZS5lcnJvciYmKGUuZXJyb3IucmVxdWVzdElkPXQpfSxhZGRQcm9taXNlczpmdW5jdGlvbihlLHQpe3ZhciByPSExO3ZvaWQgMD09PXQmJmkmJmkuY29uZmlnJiYodD1pLmNvbmZpZy5nZXRQcm9taXNlc0RlcGVuZGVuY3koKSksdm9pZCAwPT09dCYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb21pc2UmJih0PVByb21pc2UpLFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJihyPSEwKSxBcnJheS5pc0FycmF5KGUpfHwoZT1bZV0pO2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgbz1lW25dO3I/by5kZWxldGVQcm9taXNlc0Zyb21DbGFzcyYmby5kZWxldGVQcm9taXNlc0Zyb21DbGFzcygpOm8uYWRkUHJvbWlzZXNUb0NsYXNzJiZvLmFkZFByb21pc2VzVG9DbGFzcyh0KX19LHByb21pc2lmeU1ldGhvZDpmdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbigpe3ZhciByPXRoaXMsbj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO3JldHVybiBuZXcgdChmdW5jdGlvbih0LGkpe24ucHVzaChmdW5jdGlvbihlLHIpe2U/aShlKTp0KHIpfSkscltlXS5hcHBseShyLG4pfSl9fSxpc0R1YWxzdGFja0F2YWlsYWJsZTpmdW5jdGlvbih0KXtpZighdClyZXR1cm4hMTt2YXIgcj1lKFwiLi4vYXBpcy9tZXRhZGF0YS5qc29uXCIpO3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiB0JiYodD10LnNlcnZpY2VJZGVudGlmaWVyKSwhKFwic3RyaW5nXCIhPXR5cGVvZiB0fHwhci5oYXNPd25Qcm9wZXJ0eSh0KSkmJiEhclt0XS5kdWFsc3RhY2tBdmFpbGFibGV9LGNhbGN1bGF0ZVJldHJ5RGVsYXk6ZnVuY3Rpb24oZSx0LHIpe3R8fCh0PXt9KTt2YXIgbj10LmN1c3RvbUJhY2tvZmZ8fG51bGw7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbilyZXR1cm4gbihlLHIpO3ZhciBpPVwibnVtYmVyXCI9PXR5cGVvZiB0LmJhc2U/dC5iYXNlOjEwMDtyZXR1cm4gTWF0aC5yYW5kb20oKSooTWF0aC5wb3coMixlKSppKX0saGFuZGxlUmVxdWVzdFdpdGhSZXRyaWVzOmZ1bmN0aW9uKGUsdCxyKXt0fHwodD17fSk7dmFyIG49aS5IdHRwQ2xpZW50LmdldEluc3RhbmNlKCkscz10Lmh0dHBPcHRpb25zfHx7fSxhPTAsdT1mdW5jdGlvbihlKXt2YXIgbj10Lm1heFJldHJpZXN8fDA7ZSYmXCJUaW1lb3V0RXJyb3JcIj09PWUuY29kZSYmKGUucmV0cnlhYmxlPSEwKTt2YXIgaT1vLmNhbGN1bGF0ZVJldHJ5RGVsYXkoYSx0LnJldHJ5RGVsYXlPcHRpb25zLGUpO2UmJmUucmV0cnlhYmxlJiZhPG4mJmk+PTA/KGErKyxzZXRUaW1lb3V0KGMsaSsoZS5yZXRyeUFmdGVyfHwwKSkpOnIoZSl9LGM9ZnVuY3Rpb24oKXt2YXIgdD1cIlwiO24uaGFuZGxlUmVxdWVzdChlLHMsZnVuY3Rpb24oZSl7ZS5vbihcImRhdGFcIixmdW5jdGlvbihlKXt0Kz1lLnRvU3RyaW5nKCl9KSxlLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXt2YXIgbj1lLnN0YXR1c0NvZGU7aWYobjwzMDApcihudWxsLHQpO2Vsc2V7dmFyIGk9MWUzKnBhcnNlSW50KGUuaGVhZGVyc1tcInJldHJ5LWFmdGVyXCJdLDEwKXx8MCxzPW8uZXJyb3IobmV3IEVycm9yLHtyZXRyeWFibGU6bj49NTAwfHw0Mjk9PT1ufSk7aSYmcy5yZXRyeWFibGUmJihzLnJldHJ5QWZ0ZXI9aSksdShzKX19KX0sdSl9O2kudXRpbC5kZWZlcihjKX0sdXVpZDp7djQ6ZnVuY3Rpb24oKXtyZXR1cm4gZShcInV1aWRcIikudjQoKX19LGNvbnZlcnRQYXlsb2FkVG9TdHJpbmc6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXF1ZXN0LHI9dC5vcGVyYXRpb24sbj10LnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcl0ub3V0cHV0fHx7fTtuLnBheWxvYWQmJmUuZGF0YVtuLnBheWxvYWRdJiYoZS5kYXRhW24ucGF5bG9hZF09ZS5kYXRhW24ucGF5bG9hZF0udG9TdHJpbmcoKSl9LGRlZmVyOmZ1bmN0aW9uKGUpe1wib2JqZWN0XCI9PXR5cGVvZiByJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiByLm5leHRUaWNrP3IubmV4dFRpY2soZSk6XCJmdW5jdGlvblwiPT10eXBlb2Ygbj9uKGUpOnNldFRpbWVvdXQoZSwwKX0sZ2V0UmVxdWVzdFBheWxvYWRTaGFwZTpmdW5jdGlvbihlKXt2YXIgdD1lLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnM7aWYodCl7dmFyIHI9KHR8fHt9KVtlLm9wZXJhdGlvbl07aWYociYmci5pbnB1dCYmci5pbnB1dC5wYXlsb2FkKXJldHVybiByLmlucHV0Lm1lbWJlcnNbci5pbnB1dC5wYXlsb2FkXX19LGdldFByb2ZpbGVzRnJvbVNoYXJlZENvbmZpZzpmdW5jdGlvbihlLHQpe3ZhciBuPXt9LGk9e307aWYoci5lbnZbby5jb25maWdPcHRJbkVudl0pdmFyIGk9ZS5sb2FkRnJvbSh7aXNDb25maWc6ITAsZmlsZW5hbWU6ci5lbnZbby5zaGFyZWRDb25maWdGaWxlRW52XX0pO2Zvcih2YXIgcz1lLmxvYWRGcm9tKHtmaWxlbmFtZTp0fHxyLmVudltvLmNvbmZpZ09wdEluRW52XSYmci5lbnZbby5zaGFyZWRDcmVkZW50aWFsc0ZpbGVFbnZdfSksYT0wLHU9T2JqZWN0LmtleXMoaSk7YTx1Lmxlbmd0aDthKyspblt1W2FdXT1pW3VbYV1dO2Zvcih2YXIgYT0wLHU9T2JqZWN0LmtleXMocyk7YTx1Lmxlbmd0aDthKyspblt1W2FdXT1zW3VbYV1dO3JldHVybiBufSxkZWZhdWx0UHJvZmlsZTpcImRlZmF1bHRcIixjb25maWdPcHRJbkVudjpcIkFXU19TREtfTE9BRF9DT05GSUdcIixzaGFyZWRDcmVkZW50aWFsc0ZpbGVFbnY6XCJBV1NfU0hBUkVEX0NSRURFTlRJQUxTX0ZJTEVcIixzaGFyZWRDb25maWdGaWxlRW52OlwiQVdTX0NPTkZJR19GSUxFXCIsaW1kc0Rpc2FibGVkRW52OlwiQVdTX0VDMl9NRVRBREFUQV9ESVNBQkxFRFwifTt0LmV4cG9ydHM9b30pLmNhbGwodGhpcyxlKFwiX3Byb2Nlc3NcIiksZShcInRpbWVyc1wiKS5zZXRJbW1lZGlhdGUpfSx7XCIuLi9hcGlzL21ldGFkYXRhLmpzb25cIjo1LFwiLi9jb3JlXCI6MTksX3Byb2Nlc3M6ODYsZnM6ODAsdGltZXJzOjk0LHV1aWQ6OTl9XSw3MzpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oKXt9ZnVuY3Rpb24gaShlLHQpe2Zvcih2YXIgcj1lLmdldEVsZW1lbnRzQnlUYWdOYW1lKHQpLG49MCxpPXIubGVuZ3RoO248aTtuKyspaWYocltuXS5wYXJlbnROb2RlPT09ZSlyZXR1cm4gcltuXX1mdW5jdGlvbiBvKGUsdCl7c3dpdGNoKHR8fCh0PXt9KSx0LnR5cGUpe2Nhc2VcInN0cnVjdHVyZVwiOnJldHVybiBzKGUsdCk7Y2FzZVwibWFwXCI6cmV0dXJuIGEoZSx0KTtjYXNlXCJsaXN0XCI6cmV0dXJuIHUoZSx0KTtjYXNlIHZvaWQgMDpjYXNlIG51bGw6cmV0dXJuIGwoZSk7ZGVmYXVsdDpyZXR1cm4gYyhlLHQpfX1mdW5jdGlvbiBzKGUsdCl7dmFyIHI9e307cmV0dXJuIG51bGw9PT1lP3I6KHAuZWFjaCh0Lm1lbWJlcnMsZnVuY3Rpb24odCxuKXtpZihuLmlzWG1sQXR0cmlidXRlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZS5hdHRyaWJ1dGVzLG4ubmFtZSkpe3ZhciBzPWUuYXR0cmlidXRlc1tuLm5hbWVdLnZhbHVlO3JbdF09byh7dGV4dENvbnRlbnQ6c30sbil9fWVsc2V7dmFyIGE9bi5mbGF0dGVuZWQ/ZTppKGUsbi5uYW1lKTthP3JbdF09byhhLG4pOm4uZmxhdHRlbmVkfHxcImxpc3RcIiE9PW4udHlwZXx8KHJbdF09bi5kZWZhdWx0VmFsdWUpfX0pLHIpfWZ1bmN0aW9uIGEoZSx0KXtmb3IodmFyIHI9e30sbj10LmtleS5uYW1lfHxcImtleVwiLHM9dC52YWx1ZS5uYW1lfHxcInZhbHVlXCIsYT10LmZsYXR0ZW5lZD90Lm5hbWU6XCJlbnRyeVwiLHU9ZS5maXJzdEVsZW1lbnRDaGlsZDt1Oyl7aWYodS5ub2RlTmFtZT09PWEpe3ZhciBjPWkodSxuKS50ZXh0Q29udGVudCxsPWkodSxzKTtyW2NdPW8obCx0LnZhbHVlKX11PXUubmV4dEVsZW1lbnRTaWJsaW5nfXJldHVybiByfWZ1bmN0aW9uIHUoZSx0KXtmb3IodmFyIHI9W10sbj10LmZsYXR0ZW5lZD90Lm5hbWU6dC5tZW1iZXIubmFtZXx8XCJtZW1iZXJcIixpPWUuZmlyc3RFbGVtZW50Q2hpbGQ7aTspaS5ub2RlTmFtZT09PW4mJnIucHVzaChvKGksdC5tZW1iZXIpKSxpPWkubmV4dEVsZW1lbnRTaWJsaW5nO3JldHVybiByfWZ1bmN0aW9uIGMoZSx0KXtpZihlLmdldEF0dHJpYnV0ZSl7dmFyIHI9ZS5nZXRBdHRyaWJ1dGUoXCJlbmNvZGluZ1wiKTtcImJhc2U2NFwiPT09ciYmKHQ9bmV3IGguY3JlYXRlKHt0eXBlOnJ9KSl9dmFyIG49ZS50ZXh0Q29udGVudDtyZXR1cm5cIlwiPT09biYmKG49bnVsbCksXCJmdW5jdGlvblwiPT10eXBlb2YgdC50b1R5cGU/dC50b1R5cGUobik6bn1mdW5jdGlvbiBsKGUpe2lmKHZvaWQgMD09PWV8fG51bGw9PT1lKXJldHVyblwiXCI7aWYoIWUuZmlyc3RFbGVtZW50Q2hpbGQpcmV0dXJuIG51bGw9PT1lLnBhcmVudE5vZGUucGFyZW50Tm9kZT97fTowPT09ZS5jaGlsZE5vZGVzLmxlbmd0aD9cIlwiOmUudGV4dENvbnRlbnQ7Zm9yKHZhciB0PXt0eXBlOlwic3RydWN0dXJlXCIsbWVtYmVyczp7fX0scj1lLmZpcnN0RWxlbWVudENoaWxkO3I7KXt2YXIgbj1yLm5vZGVOYW1lO09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0Lm1lbWJlcnMsbik/dC5tZW1iZXJzW25dLnR5cGU9XCJsaXN0XCI6dC5tZW1iZXJzW25dPXtuYW1lOm59LHI9ci5uZXh0RWxlbWVudFNpYmxpbmd9cmV0dXJuIHMoZSx0KX12YXIgcD1lKFwiLi4vdXRpbFwiKSxoPWUoXCIuLi9tb2RlbC9zaGFwZVwiKTtuLnByb3RvdHlwZS5wYXJzZT1mdW5jdGlvbihlLHQpe2lmKFwiXCI9PT1lLnJlcGxhY2UoL15cXHMrLyxcIlwiKSlyZXR1cm57fTt2YXIgcixuO3RyeXtpZih3aW5kb3cuRE9NUGFyc2VyKXt0cnl7cj0obmV3IERPTVBhcnNlcikucGFyc2VGcm9tU3RyaW5nKGUsXCJ0ZXh0L3htbFwiKX1jYXRjaChlKXt0aHJvdyBwLmVycm9yKG5ldyBFcnJvcihcIlBhcnNlIGVycm9yIGluIGRvY3VtZW50XCIpLHtvcmlnaW5hbEVycm9yOmUsY29kZTpcIlhNTFBhcnNlckVycm9yXCIscmV0cnlhYmxlOiEwfSl9aWYobnVsbD09PXIuZG9jdW1lbnRFbGVtZW50KXRocm93IHAuZXJyb3IobmV3IEVycm9yKFwiQ2Fubm90IHBhcnNlIGVtcHR5IGRvY3VtZW50LlwiKSx7Y29kZTpcIlhNTFBhcnNlckVycm9yXCIscmV0cnlhYmxlOiEwfSk7dmFyIHM9ci5nZXRFbGVtZW50c0J5VGFnTmFtZShcInBhcnNlcmVycm9yXCIpWzBdO2lmKHMmJihzLnBhcmVudE5vZGU9PT1yfHxcImJvZHlcIj09PXMucGFyZW50Tm9kZS5ub2RlTmFtZXx8cy5wYXJlbnROb2RlLnBhcmVudE5vZGU9PT1yfHxcImJvZHlcIj09PXMucGFyZW50Tm9kZS5wYXJlbnROb2RlLm5vZGVOYW1lKSl7dmFyIGE9cy5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKVswXXx8czt0aHJvdyBwLmVycm9yKG5ldyBFcnJvcihhLnRleHRDb250ZW50fHxcIlBhcnNlciBlcnJvciBpbiBkb2N1bWVudFwiKSx7Y29kZTpcIlhNTFBhcnNlckVycm9yXCIscmV0cnlhYmxlOiEwfSl9fWVsc2V7aWYoIXdpbmRvdy5BY3RpdmVYT2JqZWN0KXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBsb2FkIFhNTCBwYXJzZXJcIik7aWYocj1uZXcgd2luZG93LkFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MRE9NXCIpLHIuYXN5bmM9ITEsIXIubG9hZFhNTChlKSl0aHJvdyBwLmVycm9yKG5ldyBFcnJvcihcIlBhcnNlIGVycm9yIGluIGRvY3VtZW50XCIpLHtjb2RlOlwiWE1MUGFyc2VyRXJyb3JcIixyZXRyeWFibGU6ITB9KX19Y2F0Y2goZSl7bj1lfWlmKHImJnIuZG9jdW1lbnRFbGVtZW50JiYhbil7XG52YXIgdT1vKHIuZG9jdW1lbnRFbGVtZW50LHQpLGM9aShyLmRvY3VtZW50RWxlbWVudCxcIlJlc3BvbnNlTWV0YWRhdGFcIik7cmV0dXJuIGMmJih1LlJlc3BvbnNlTWV0YWRhdGE9byhjLHt9KSksdX1pZihuKXRocm93IHAuZXJyb3Iobnx8bmV3IEVycm9yLHtjb2RlOlwiWE1MUGFyc2VyRXJyb3JcIixyZXRyeWFibGU6ITB9KTtyZXR1cm57fX0sdC5leHBvcnRzPW59LHtcIi4uL21vZGVsL3NoYXBlXCI6NDQsXCIuLi91dGlsXCI6NzJ9XSw3NDpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oKXt9ZnVuY3Rpb24gaShlLHQscil7c3dpdGNoKHIudHlwZSl7Y2FzZVwic3RydWN0dXJlXCI6cmV0dXJuIG8oZSx0LHIpO2Nhc2VcIm1hcFwiOnJldHVybiBzKGUsdCxyKTtjYXNlXCJsaXN0XCI6cmV0dXJuIGEoZSx0LHIpO2RlZmF1bHQ6cmV0dXJuIHUoZSx0LHIpfX1mdW5jdGlvbiBvKGUsdCxyKXtsLmFycmF5RWFjaChyLm1lbWJlck5hbWVzLGZ1bmN0aW9uKG4pe3ZhciBvPXIubWVtYmVyc1tuXTtpZihcImJvZHlcIj09PW8ubG9jYXRpb24pe3ZhciBzPXRbbl0sYT1vLm5hbWU7aWYodm9pZCAwIT09cyYmbnVsbCE9PXMpaWYoby5pc1htbEF0dHJpYnV0ZSllLmFkZEF0dHJpYnV0ZShhLHMpO2Vsc2UgaWYoby5mbGF0dGVuZWQpaShlLHMsbyk7ZWxzZXt2YXIgdT1uZXcgcChhKTtlLmFkZENoaWxkTm9kZSh1KSxjKHUsbyksaSh1LHMsbyl9fX0pfWZ1bmN0aW9uIHMoZSx0LHIpe3ZhciBuPXIua2V5Lm5hbWV8fFwia2V5XCIsbz1yLnZhbHVlLm5hbWV8fFwidmFsdWVcIjtsLmVhY2godCxmdW5jdGlvbih0LHMpe3ZhciBhPW5ldyBwKHIuZmxhdHRlbmVkP3IubmFtZTpcImVudHJ5XCIpO2UuYWRkQ2hpbGROb2RlKGEpO3ZhciB1PW5ldyBwKG4pLGM9bmV3IHAobyk7YS5hZGRDaGlsZE5vZGUodSksYS5hZGRDaGlsZE5vZGUoYyksaSh1LHQsci5rZXkpLGkoYyxzLHIudmFsdWUpfSl9ZnVuY3Rpb24gYShlLHQscil7ci5mbGF0dGVuZWQ/bC5hcnJheUVhY2godCxmdW5jdGlvbih0KXt2YXIgbj1yLm1lbWJlci5uYW1lfHxyLm5hbWUsbz1uZXcgcChuKTtlLmFkZENoaWxkTm9kZShvKSxpKG8sdCxyLm1lbWJlcil9KTpsLmFycmF5RWFjaCh0LGZ1bmN0aW9uKHQpe3ZhciBuPXIubWVtYmVyLm5hbWV8fFwibWVtYmVyXCIsbz1uZXcgcChuKTtlLmFkZENoaWxkTm9kZShvKSxpKG8sdCxyLm1lbWJlcil9KX1mdW5jdGlvbiB1KGUsdCxyKXtlLmFkZENoaWxkTm9kZShuZXcgaChyLnRvV2lyZUZvcm1hdCh0KSkpfWZ1bmN0aW9uIGMoZSx0LHIpe3ZhciBuLGk9XCJ4bWxuc1wiO3QueG1sTmFtZXNwYWNlVXJpPyhuPXQueG1sTmFtZXNwYWNlVXJpLHQueG1sTmFtZXNwYWNlUHJlZml4JiYoaSs9XCI6XCIrdC54bWxOYW1lc3BhY2VQcmVmaXgpKTpyJiZ0LmFwaS54bWxOYW1lc3BhY2VVcmkmJihuPXQuYXBpLnhtbE5hbWVzcGFjZVVyaSksbiYmZS5hZGRBdHRyaWJ1dGUoaSxuKX12YXIgbD1lKFwiLi4vdXRpbFwiKSxwPWUoXCIuL3htbC1ub2RlXCIpLlhtbE5vZGUsaD1lKFwiLi94bWwtdGV4dFwiKS5YbWxUZXh0O24ucHJvdG90eXBlLnRvWE1MPWZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBvPW5ldyBwKHIpO3JldHVybiBjKG8sdCwhMCksaShvLGUsdCksby5jaGlsZHJlbi5sZW5ndGg+MHx8bj9vLnRvU3RyaW5nKCk6XCJcIn0sdC5leHBvcnRzPW59LHtcIi4uL3V0aWxcIjo3MixcIi4veG1sLW5vZGVcIjo3NyxcIi4veG1sLXRleHRcIjo3OH1dLDc1OltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZS5yZXBsYWNlKC8mL2csXCImYW1wO1wiKS5yZXBsYWNlKC8nL2csXCImYXBvcztcIikucmVwbGFjZSgvPC9nLFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csXCImZ3Q7XCIpLnJlcGxhY2UoL1wiL2csXCImcXVvdDtcIil9dC5leHBvcnRzPXtlc2NhcGVBdHRyaWJ1dGU6bn19LHt9XSw3NjpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUucmVwbGFjZSgvJi9nLFwiJmFtcDtcIikucmVwbGFjZSgvPC9nLFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csXCImZ3Q7XCIpfXQuZXhwb3J0cz17ZXNjYXBlRWxlbWVudDpufX0se31dLDc3OltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlLHQpe3ZvaWQgMD09PXQmJih0PVtdKSx0aGlzLm5hbWU9ZSx0aGlzLmNoaWxkcmVuPXQsdGhpcy5hdHRyaWJ1dGVzPXt9fXZhciBpPWUoXCIuL2VzY2FwZS1hdHRyaWJ1dGVcIikuZXNjYXBlQXR0cmlidXRlO24ucHJvdG90eXBlLmFkZEF0dHJpYnV0ZT1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmF0dHJpYnV0ZXNbZV09dCx0aGlzfSxuLnByb3RvdHlwZS5hZGRDaGlsZE5vZGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY2hpbGRyZW4ucHVzaChlKSx0aGlzfSxuLnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNbZV0sdGhpc30sbi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtmb3IodmFyIGU9Qm9vbGVhbih0aGlzLmNoaWxkcmVuLmxlbmd0aCksdD1cIjxcIit0aGlzLm5hbWUscj10aGlzLmF0dHJpYnV0ZXMsbj0wLG89T2JqZWN0LmtleXMocik7bjxvLmxlbmd0aDtuKyspe3ZhciBzPW9bbl0sYT1yW3NdO3ZvaWQgMCE9PWEmJm51bGwhPT1hJiYodCs9XCIgXCIrcysnPVwiJytpKFwiXCIrYSkrJ1wiJyl9cmV0dXJuIHQrPWU/XCI+XCIrdGhpcy5jaGlsZHJlbi5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUudG9TdHJpbmcoKX0pLmpvaW4oXCJcIikrXCI8L1wiK3RoaXMubmFtZStcIj5cIjpcIi8+XCJ9LHQuZXhwb3J0cz17WG1sTm9kZTpufX0se1wiLi9lc2NhcGUtYXR0cmlidXRlXCI6NzV9XSw3ODpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oZSl7dGhpcy52YWx1ZT1lfXZhciBpPWUoXCIuL2VzY2FwZS1lbGVtZW50XCIpLmVzY2FwZUVsZW1lbnQ7bi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gaShcIlwiK3RoaXMudmFsdWUpfSx0LmV4cG9ydHM9e1htbFRleHQ6bn19LHtcIi4vZXNjYXBlLWVsZW1lbnRcIjo3Nn1dLDc5OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXt2YXIgdD1lLmxlbmd0aDtpZih0JTQ+MCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0XCIpO3ZhciByPWUuaW5kZXhPZihcIj1cIik7cmV0dXJuLTE9PT1yJiYocj10KSxbcixyPT09dD8wOjQtciU0XX1mdW5jdGlvbiBpKGUpe3ZhciB0PW4oZSkscj10WzBdLGk9dFsxXTtyZXR1cm4gMyoocitpKS80LWl9ZnVuY3Rpb24gbyhlLHQscil7cmV0dXJuIDMqKHQrcikvNC1yfWZ1bmN0aW9uIHMoZSl7dmFyIHQscixpPW4oZSkscz1pWzBdLGE9aVsxXSx1PW5ldyBoKG8oZSxzLGEpKSxjPTAsbD1hPjA/cy00OnM7Zm9yKHI9MDtyPGw7cis9NCl0PXBbZS5jaGFyQ29kZUF0KHIpXTw8MTh8cFtlLmNoYXJDb2RlQXQocisxKV08PDEyfHBbZS5jaGFyQ29kZUF0KHIrMildPDw2fHBbZS5jaGFyQ29kZUF0KHIrMyldLHVbYysrXT10Pj4xNiYyNTUsdVtjKytdPXQ+PjgmMjU1LHVbYysrXT0yNTUmdDtyZXR1cm4gMj09PWEmJih0PXBbZS5jaGFyQ29kZUF0KHIpXTw8MnxwW2UuY2hhckNvZGVBdChyKzEpXT4+NCx1W2MrK109MjU1JnQpLDE9PT1hJiYodD1wW2UuY2hhckNvZGVBdChyKV08PDEwfHBbZS5jaGFyQ29kZUF0KHIrMSldPDw0fHBbZS5jaGFyQ29kZUF0KHIrMildPj4yLHVbYysrXT10Pj44JjI1NSx1W2MrK109MjU1JnQpLHV9ZnVuY3Rpb24gYShlKXtyZXR1cm4gbFtlPj4xOCY2M10rbFtlPj4xMiY2M10rbFtlPj42JjYzXStsWzYzJmVdfWZ1bmN0aW9uIHUoZSx0LHIpe2Zvcih2YXIgbixpPVtdLG89dDtvPHI7bys9MyluPShlW29dPDwxNiYxNjcxMTY4MCkrKGVbbysxXTw8OCY2NTI4MCkrKDI1NSZlW28rMl0pLGkucHVzaChhKG4pKTtyZXR1cm4gaS5qb2luKFwiXCIpfWZ1bmN0aW9uIGMoZSl7Zm9yKHZhciB0LHI9ZS5sZW5ndGgsbj1yJTMsaT1bXSxvPTAscz1yLW47bzxzO28rPTE2MzgzKWkucHVzaCh1KGUsbyxvKzE2MzgzPnM/czpvKzE2MzgzKSk7cmV0dXJuIDE9PT1uPyh0PWVbci0xXSxpLnB1c2gobFt0Pj4yXStsW3Q8PDQmNjNdK1wiPT1cIikpOjI9PT1uJiYodD0oZVtyLTJdPDw4KStlW3ItMV0saS5wdXNoKGxbdD4+MTBdK2xbdD4+NCY2M10rbFt0PDwyJjYzXStcIj1cIikpLGkuam9pbihcIlwiKX1yLmJ5dGVMZW5ndGg9aSxyLnRvQnl0ZUFycmF5PXMsci5mcm9tQnl0ZUFycmF5PWM7Zm9yKHZhciBsPVtdLHA9W10saD1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheT9VaW50OEFycmF5OkFycmF5LGY9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCIsZD0wLG09Zi5sZW5ndGg7ZDxtOysrZClsW2RdPWZbZF0scFtmLmNoYXJDb2RlQXQoZCldPWQ7cFtcIi1cIi5jaGFyQ29kZUF0KDApXT02MixwW1wiX1wiLmNoYXJDb2RlQXQoMCldPTYzfSx7fV0sODA6W2Z1bmN0aW9uKGUsdCxyKXt9LHt9XSw4MTpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbih0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkoKXtyZXR1cm4gbi5UWVBFRF9BUlJBWV9TVVBQT1JUPzIxNDc0ODM2NDc6MTA3Mzc0MTgyM31mdW5jdGlvbiBvKGUsdCl7aWYoaSgpPHQpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aFwiKTtyZXR1cm4gbi5UWVBFRF9BUlJBWV9TVVBQT1JUPyhlPW5ldyBVaW50OEFycmF5KHQpLGUuX19wcm90b19fPW4ucHJvdG90eXBlKToobnVsbD09PWUmJihlPW5ldyBuKHQpKSxlLmxlbmd0aD10KSxlfWZ1bmN0aW9uIG4oZSx0LHIpe2lmKCEobi5UWVBFRF9BUlJBWV9TVVBQT1JUfHx0aGlzIGluc3RhbmNlb2YgbikpcmV0dXJuIG5ldyBuKGUsdCxyKTtpZihcIm51bWJlclwiPT10eXBlb2YgZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwiSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7cmV0dXJuIGModGhpcyxlKX1yZXR1cm4gcyh0aGlzLGUsdCxyKX1mdW5jdGlvbiBzKGUsdCxyLG4pe2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpO3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyP2goZSx0LHIsbik6XCJzdHJpbmdcIj09dHlwZW9mIHQ/bChlLHQscik6ZihlLHQpfWZ1bmN0aW9uIGEoZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpO2lmKGU8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKX1mdW5jdGlvbiB1KGUsdCxyLG4pe3JldHVybiBhKHQpLHQ8PTA/byhlLHQpOnZvaWQgMCE9PXI/XCJzdHJpbmdcIj09dHlwZW9mIG4/byhlLHQpLmZpbGwocixuKTpvKGUsdCkuZmlsbChyKTpvKGUsdCl9ZnVuY3Rpb24gYyhlLHQpe2lmKGEodCksZT1vKGUsdDwwPzA6MHxkKHQpKSwhbi5UWVBFRF9BUlJBWV9TVVBQT1JUKWZvcih2YXIgcj0wO3I8dDsrK3IpZVtyXT0wO3JldHVybiBlfWZ1bmN0aW9uIGwoZSx0LHIpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiByJiZcIlwiIT09cnx8KHI9XCJ1dGY4XCIpLCFuLmlzRW5jb2RpbmcocikpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKTt2YXIgaT0wfHYodCxyKTtlPW8oZSxpKTt2YXIgcz1lLndyaXRlKHQscik7cmV0dXJuIHMhPT1pJiYoZT1lLnNsaWNlKDAscykpLGV9ZnVuY3Rpb24gcChlLHQpe3ZhciByPXQubGVuZ3RoPDA/MDowfGQodC5sZW5ndGgpO2U9byhlLHIpO2Zvcih2YXIgbj0wO248cjtuKz0xKWVbbl09MjU1JnRbbl07cmV0dXJuIGV9ZnVuY3Rpb24gaChlLHQscixpKXtpZih0LmJ5dGVMZW5ndGgscjwwfHx0LmJ5dGVMZW5ndGg8cil0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIidvZmZzZXQnIGlzIG91dCBvZiBib3VuZHNcIik7aWYodC5ieXRlTGVuZ3RoPHIrKGl8fDApKXRocm93IG5ldyBSYW5nZUVycm9yKFwiJ2xlbmd0aCcgaXMgb3V0IG9mIGJvdW5kc1wiKTtyZXR1cm4gdD12b2lkIDA9PT1yJiZ2b2lkIDA9PT1pP25ldyBVaW50OEFycmF5KHQpOnZvaWQgMD09PWk/bmV3IFVpbnQ4QXJyYXkodCxyKTpuZXcgVWludDhBcnJheSh0LHIsaSksbi5UWVBFRF9BUlJBWV9TVVBQT1JUPyhlPXQsZS5fX3Byb3RvX189bi5wcm90b3R5cGUpOmU9cChlLHQpLGV9ZnVuY3Rpb24gZihlLHQpe2lmKG4uaXNCdWZmZXIodCkpe3ZhciByPTB8ZCh0Lmxlbmd0aCk7cmV0dXJuIGU9byhlLHIpLDA9PT1lLmxlbmd0aD9lOih0LmNvcHkoZSwwLDAsciksZSl9aWYodCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyJiZ0LmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyfHxcImxlbmd0aFwiaW4gdClyZXR1cm5cIm51bWJlclwiIT10eXBlb2YgdC5sZW5ndGh8fFkodC5sZW5ndGgpP28oZSwwKTpwKGUsdCk7aWYoXCJCdWZmZXJcIj09PXQudHlwZSYmWih0LmRhdGEpKXJldHVybiBwKGUsdC5kYXRhKX10aHJvdyBuZXcgVHlwZUVycm9yKFwiRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LlwiKX1mdW5jdGlvbiBkKGUpe2lmKGU+PWkoKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gc2l6ZTogMHhcIitpKCkudG9TdHJpbmcoMTYpK1wiIGJ5dGVzXCIpO3JldHVybiAwfGV9ZnVuY3Rpb24gbShlKXtyZXR1cm4rZSE9ZSYmKGU9MCksbi5hbGxvYygrZSl9ZnVuY3Rpb24gdihlLHQpe2lmKG4uaXNCdWZmZXIoZSkpcmV0dXJuIGUubGVuZ3RoO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmXCJmdW5jdGlvblwiPT10eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3JiYoQXJyYXlCdWZmZXIuaXNWaWV3KGUpfHxlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKXJldHVybiBlLmJ5dGVMZW5ndGg7XCJzdHJpbmdcIiE9dHlwZW9mIGUmJihlPVwiXCIrZSk7dmFyIHI9ZS5sZW5ndGg7aWYoMD09PXIpcmV0dXJuIDA7Zm9yKHZhciBpPSExOzspc3dpdGNoKHQpe2Nhc2VcImFzY2lpXCI6Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6cmV0dXJuIHI7Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6Y2FzZSB2b2lkIDA6cmV0dXJuIFYoZSkubGVuZ3RoO2Nhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiAyKnI7Y2FzZVwiaGV4XCI6cmV0dXJuIHI+Pj4xO2Nhc2VcImJhc2U2NFwiOnJldHVybiBYKGUpLmxlbmd0aDtkZWZhdWx0OmlmKGkpcmV0dXJuIFYoZSkubGVuZ3RoO3Q9KFwiXCIrdCkudG9Mb3dlckNhc2UoKSxpPSEwfX1mdW5jdGlvbiB5KGUsdCxyKXt2YXIgbj0hMTtpZigodm9pZCAwPT09dHx8dDwwKSYmKHQ9MCksdD50aGlzLmxlbmd0aClyZXR1cm5cIlwiO2lmKCh2b2lkIDA9PT1yfHxyPnRoaXMubGVuZ3RoKSYmKHI9dGhpcy5sZW5ndGgpLHI8PTApcmV0dXJuXCJcIjtpZihyPj4+PTAsdD4+Pj0wLHI8PXQpcmV0dXJuXCJcIjtmb3IoZXx8KGU9XCJ1dGY4XCIpOzspc3dpdGNoKGUpe2Nhc2VcImhleFwiOnJldHVybiBMKHRoaXMsdCxyKTtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpyZXR1cm4gVCh0aGlzLHQscik7Y2FzZVwiYXNjaWlcIjpyZXR1cm4gayh0aGlzLHQscik7Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6cmV0dXJuIFAodGhpcyx0LHIpO2Nhc2VcImJhc2U2NFwiOnJldHVybiB4KHRoaXMsdCxyKTtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4gcSh0aGlzLHQscik7ZGVmYXVsdDppZihuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitlKTtlPShlK1wiXCIpLnRvTG93ZXJDYXNlKCksbj0hMH19ZnVuY3Rpb24gZyhlLHQscil7dmFyIG49ZVt0XTtlW3RdPWVbcl0sZVtyXT1ufWZ1bmN0aW9uIGIoZSx0LHIsaSxvKXtpZigwPT09ZS5sZW5ndGgpcmV0dXJuLTE7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHI/KGk9cixyPTApOnI+MjE0NzQ4MzY0Nz9yPTIxNDc0ODM2NDc6cjwtMjE0NzQ4MzY0OCYmKHI9LTIxNDc0ODM2NDgpLHI9K3IsaXNOYU4ocikmJihyPW8/MDplLmxlbmd0aC0xKSxyPDAmJihyPWUubGVuZ3RoK3IpLHI+PWUubGVuZ3RoKXtpZihvKXJldHVybi0xO3I9ZS5sZW5ndGgtMX1lbHNlIGlmKHI8MCl7aWYoIW8pcmV0dXJuLTE7cj0wfWlmKFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1uLmZyb20odCxpKSksbi5pc0J1ZmZlcih0KSlyZXR1cm4gMD09PXQubGVuZ3RoPy0xOncoZSx0LHIsaSxvKTtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdCY9MjU1LG4uVFlQRURfQVJSQVlfU1VQUE9SVCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZj9vP1VpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChlLHQscik6VWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChlLHQscik6dyhlLFt0XSxyLGksbyk7dGhyb3cgbmV3IFR5cGVFcnJvcihcInZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlclwiKX1mdW5jdGlvbiB3KGUsdCxyLG4saSl7ZnVuY3Rpb24gbyhlLHQpe3JldHVybiAxPT09cz9lW3RdOmUucmVhZFVJbnQxNkJFKHQqcyl9dmFyIHM9MSxhPWUubGVuZ3RoLHU9dC5sZW5ndGg7aWYodm9pZCAwIT09biYmKFwidWNzMlwiPT09KG49U3RyaW5nKG4pLnRvTG93ZXJDYXNlKCkpfHxcInVjcy0yXCI9PT1ufHxcInV0ZjE2bGVcIj09PW58fFwidXRmLTE2bGVcIj09PW4pKXtpZihlLmxlbmd0aDwyfHx0Lmxlbmd0aDwyKXJldHVybi0xO3M9MixhLz0yLHUvPTIsci89Mn12YXIgYztpZihpKXt2YXIgbD0tMTtmb3IoYz1yO2M8YTtjKyspaWYobyhlLGMpPT09byh0LC0xPT09bD8wOmMtbCkpe2lmKC0xPT09bCYmKGw9YyksYy1sKzE9PT11KXJldHVybiBsKnN9ZWxzZS0xIT09bCYmKGMtPWMtbCksbD0tMX1lbHNlIGZvcihyK3U+YSYmKHI9YS11KSxjPXI7Yz49MDtjLS0pe2Zvcih2YXIgcD0hMCxoPTA7aDx1O2grKylpZihvKGUsYytoKSE9PW8odCxoKSl7cD0hMTticmVha31pZihwKXJldHVybiBjfXJldHVybi0xfWZ1bmN0aW9uIEUoZSx0LHIsbil7cj1OdW1iZXIocil8fDA7dmFyIGk9ZS5sZW5ndGgtcjtuPyhuPU51bWJlcihuKSk+aSYmKG49aSk6bj1pO3ZhciBvPXQubGVuZ3RoO2lmKG8lMiE9MCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBoZXggc3RyaW5nXCIpO24+by8yJiYobj1vLzIpO2Zvcih2YXIgcz0wO3M8bjsrK3Mpe3ZhciBhPXBhcnNlSW50KHQuc3Vic3RyKDIqcywyKSwxNik7aWYoaXNOYU4oYSkpcmV0dXJuIHM7ZVtyK3NdPWF9cmV0dXJuIHN9ZnVuY3Rpb24gUyhlLHQscixuKXtyZXR1cm4gRyhWKHQsZS5sZW5ndGgtciksZSxyLG4pfWZ1bmN0aW9uIF8oZSx0LHIsbil7cmV0dXJuIEcoVyh0KSxlLHIsbil9ZnVuY3Rpb24gQyhlLHQscixuKXtyZXR1cm4gXyhlLHQscixuKX1mdW5jdGlvbiBSKGUsdCxyLG4pe3JldHVybiBHKFgodCksZSxyLG4pfWZ1bmN0aW9uIEEoZSx0LHIsbil7cmV0dXJuIEcoSyh0LGUubGVuZ3RoLXIpLGUscixuKX1mdW5jdGlvbiB4KGUsdCxyKXtyZXR1cm4gMD09PXQmJnI9PT1lLmxlbmd0aD9KLmZyb21CeXRlQXJyYXkoZSk6Si5mcm9tQnl0ZUFycmF5KGUuc2xpY2UodCxyKSl9ZnVuY3Rpb24gVChlLHQscil7cj1NYXRoLm1pbihlLmxlbmd0aCxyKTtmb3IodmFyIG49W10saT10O2k8cjspe3ZhciBvPWVbaV0scz1udWxsLGE9bz4yMzk/NDpvPjIyMz8zOm8+MTkxPzI6MTtpZihpK2E8PXIpe3ZhciB1LGMsbCxwO3N3aXRjaChhKXtjYXNlIDE6bzwxMjgmJihzPW8pO2JyZWFrO2Nhc2UgMjp1PWVbaSsxXSwxMjg9PSgxOTImdSkmJihwPSgzMSZvKTw8Nnw2MyZ1KT4xMjcmJihzPXApO2JyZWFrO2Nhc2UgMzp1PWVbaSsxXSxjPWVbaSsyXSwxMjg9PSgxOTImdSkmJjEyOD09KDE5MiZjKSYmKHA9KDE1Jm8pPDwxMnwoNjMmdSk8PDZ8NjMmYyk+MjA0NyYmKHA8NTUyOTZ8fHA+NTczNDMpJiYocz1wKTticmVhaztjYXNlIDQ6dT1lW2krMV0sYz1lW2krMl0sbD1lW2krM10sMTI4PT0oMTkyJnUpJiYxMjg9PSgxOTImYykmJjEyOD09KDE5MiZsKSYmKHA9KDE1Jm8pPDwxOHwoNjMmdSk8PDEyfCg2MyZjKTw8Nnw2MyZsKT42NTUzNSYmcDwxMTE0MTEyJiYocz1wKX19bnVsbD09PXM/KHM9NjU1MzMsYT0xKTpzPjY1NTM1JiYocy09NjU1MzYsbi5wdXNoKHM+Pj4xMCYxMDIzfDU1Mjk2KSxzPTU2MzIwfDEwMjMmcyksbi5wdXNoKHMpLGkrPWF9cmV0dXJuIEkobil9ZnVuY3Rpb24gSShlKXt2YXIgdD1lLmxlbmd0aDtpZih0PD0kKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxlKTtmb3IodmFyIHI9XCJcIixuPTA7bjx0OylyKz1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxlLnNsaWNlKG4sbis9JCkpO3JldHVybiByfWZ1bmN0aW9uIGsoZSx0LHIpe3ZhciBuPVwiXCI7cj1NYXRoLm1pbihlLmxlbmd0aCxyKTtmb3IodmFyIGk9dDtpPHI7KytpKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUoMTI3JmVbaV0pO3JldHVybiBufWZ1bmN0aW9uIFAoZSx0LHIpe3ZhciBuPVwiXCI7cj1NYXRoLm1pbihlLmxlbmd0aCxyKTtmb3IodmFyIGk9dDtpPHI7KytpKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUoZVtpXSk7cmV0dXJuIG59ZnVuY3Rpb24gTChlLHQscil7dmFyIG49ZS5sZW5ndGg7KCF0fHx0PDApJiYodD0wKSwoIXJ8fHI8MHx8cj5uKSYmKHI9bik7Zm9yKHZhciBpPVwiXCIsbz10O288cjsrK28paSs9SChlW29dKTtyZXR1cm4gaX1mdW5jdGlvbiBxKGUsdCxyKXtmb3IodmFyIG49ZS5zbGljZSh0LHIpLGk9XCJcIixvPTA7bzxuLmxlbmd0aDtvKz0yKWkrPVN0cmluZy5mcm9tQ2hhckNvZGUobltvXSsyNTYqbltvKzFdKTtyZXR1cm4gaX1mdW5jdGlvbiBPKGUsdCxyKXtpZihlJTEhPTB8fGU8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm9mZnNldCBpcyBub3QgdWludFwiKTtpZihlK3Q+cil0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGhcIil9ZnVuY3Rpb24gTihlLHQscixpLG8scyl7aWYoIW4uaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJyk7aWYodD5vfHx0PHMpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJyk7aWYocitpPmUubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpfWZ1bmN0aW9uIFUoZSx0LHIsbil7dDwwJiYodD02NTUzNSt0KzEpO2Zvcih2YXIgaT0wLG89TWF0aC5taW4oZS5sZW5ndGgtciwyKTtpPG87KytpKWVbcitpXT0odCYyNTU8PDgqKG4/aToxLWkpKT4+PjgqKG4/aToxLWkpfWZ1bmN0aW9uIEQoZSx0LHIsbil7dDwwJiYodD00Mjk0OTY3Mjk1K3QrMSk7Zm9yKHZhciBpPTAsbz1NYXRoLm1pbihlLmxlbmd0aC1yLDQpO2k8bzsrK2kpZVtyK2ldPXQ+Pj44KihuP2k6My1pKSYyNTV9ZnVuY3Rpb24gTShlLHQscixuLGksbyl7aWYocituPmUubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpO2lmKHI8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKX1mdW5jdGlvbiBqKGUsdCxyLG4saSl7cmV0dXJuIGl8fE0oZSx0LHIsNCwzLjQwMjgyMzQ2NjM4NTI4ODZlMzgsLTMuNDAyODIzNDY2Mzg1Mjg4NmUzOCksUS53cml0ZShlLHQscixuLDIzLDQpLHIrNH1mdW5jdGlvbiBCKGUsdCxyLG4saSl7cmV0dXJuIGl8fE0oZSx0LHIsOCwxLjc5NzY5MzEzNDg2MjMxNTdlMzA4LC0xLjc5NzY5MzEzNDg2MjMxNTdlMzA4KSxRLndyaXRlKGUsdCxyLG4sNTIsOCkscis4fWZ1bmN0aW9uIEYoZSl7aWYoZT16KGUpLnJlcGxhY2UoZWUsXCJcIiksZS5sZW5ndGg8MilyZXR1cm5cIlwiO2Zvcig7ZS5sZW5ndGglNCE9MDspZSs9XCI9XCI7cmV0dXJuIGV9ZnVuY3Rpb24geihlKXtyZXR1cm4gZS50cmltP2UudHJpbSgpOmUucmVwbGFjZSgvXlxccyt8XFxzKyQvZyxcIlwiKX1mdW5jdGlvbiBIKGUpe3JldHVybiBlPDE2P1wiMFwiK2UudG9TdHJpbmcoMTYpOmUudG9TdHJpbmcoMTYpfWZ1bmN0aW9uIFYoZSx0KXt0PXR8fDEvMDtmb3IodmFyIHIsbj1lLmxlbmd0aCxpPW51bGwsbz1bXSxzPTA7czxuOysrcyl7aWYoKHI9ZS5jaGFyQ29kZUF0KHMpKT41NTI5NSYmcjw1NzM0NCl7aWYoIWkpe2lmKHI+NTYzMTkpeyh0LT0zKT4tMSYmby5wdXNoKDIzOSwxOTEsMTg5KTtjb250aW51ZX1pZihzKzE9PT1uKXsodC09Myk+LTEmJm8ucHVzaCgyMzksMTkxLDE4OSk7Y29udGludWV9aT1yO2NvbnRpbnVlfWlmKHI8NTYzMjApeyh0LT0zKT4tMSYmby5wdXNoKDIzOSwxOTEsMTg5KSxpPXI7Y29udGludWV9cj02NTUzNisoaS01NTI5Njw8MTB8ci01NjMyMCl9ZWxzZSBpJiYodC09Myk+LTEmJm8ucHVzaCgyMzksMTkxLDE4OSk7aWYoaT1udWxsLHI8MTI4KXtpZigodC09MSk8MClicmVhaztvLnB1c2gocil9ZWxzZSBpZihyPDIwNDgpe2lmKCh0LT0yKTwwKWJyZWFrO28ucHVzaChyPj42fDE5Miw2MyZyfDEyOCl9ZWxzZSBpZihyPDY1NTM2KXtpZigodC09Myk8MClicmVhaztvLnB1c2gocj4+MTJ8MjI0LHI+PjYmNjN8MTI4LDYzJnJ8MTI4KX1lbHNle2lmKCEocjwxMTE0MTEyKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvZGUgcG9pbnRcIik7aWYoKHQtPTQpPDApYnJlYWs7by5wdXNoKHI+PjE4fDI0MCxyPj4xMiY2M3wxMjgscj4+NiY2M3wxMjgsNjMmcnwxMjgpfX1yZXR1cm4gb31mdW5jdGlvbiBXKGUpe2Zvcih2YXIgdD1bXSxyPTA7cjxlLmxlbmd0aDsrK3IpdC5wdXNoKDI1NSZlLmNoYXJDb2RlQXQocikpO3JldHVybiB0fWZ1bmN0aW9uIEsoZSx0KXtmb3IodmFyIHIsbixpLG89W10scz0wO3M8ZS5sZW5ndGgmJiEoKHQtPTIpPDApOysrcylyPWUuY2hhckNvZGVBdChzKSxuPXI+PjgsaT1yJTI1NixvLnB1c2goaSksby5wdXNoKG4pO3JldHVybiBvfWZ1bmN0aW9uIFgoZSl7cmV0dXJuIEoudG9CeXRlQXJyYXkoRihlKSl9ZnVuY3Rpb24gRyhlLHQscixuKXtmb3IodmFyIGk9MDtpPG4mJiEoaStyPj10Lmxlbmd0aHx8aT49ZS5sZW5ndGgpOysraSl0W2krcl09ZVtpXTtyZXR1cm4gaX1mdW5jdGlvbiBZKGUpe3JldHVybiBlIT09ZX12YXIgSj1lKFwiYmFzZTY0LWpzXCIpLFE9ZShcImllZWU3NTRcIiksWj1lKFwiaXNhcnJheVwiKTtyLkJ1ZmZlcj1uLHIuU2xvd0J1ZmZlcj1tLHIuSU5TUEVDVF9NQVhfQllURVM9NTAsbi5UWVBFRF9BUlJBWV9TVVBQT1JUPXZvaWQgMCE9PXQuVFlQRURfQVJSQVlfU1VQUE9SVD90LlRZUEVEX0FSUkFZX1NVUFBPUlQ6ZnVuY3Rpb24oKXt0cnl7dmFyIGU9bmV3IFVpbnQ4QXJyYXkoMSk7cmV0dXJuIGUuX19wcm90b19fPXtfX3Byb3RvX186VWludDhBcnJheS5wcm90b3R5cGUsZm9vOmZ1bmN0aW9uKCl7cmV0dXJuIDQyfX0sNDI9PT1lLmZvbygpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnN1YmFycmF5JiYwPT09ZS5zdWJhcnJheSgxLDEpLmJ5dGVMZW5ndGh9Y2F0Y2goZSl7cmV0dXJuITF9fSgpLHIua01heExlbmd0aD1pKCksbi5wb29sU2l6ZT04MTkyLG4uX2F1Z21lbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX19wcm90b19fPW4ucHJvdG90eXBlLGV9LG4uZnJvbT1mdW5jdGlvbihlLHQscil7cmV0dXJuIHMobnVsbCxlLHQscil9LG4uVFlQRURfQVJSQVlfU1VQUE9SVCYmKG4ucHJvdG90eXBlLl9fcHJvdG9fXz1VaW50OEFycmF5LnByb3RvdHlwZSxuLl9fcHJvdG9fXz1VaW50OEFycmF5LFwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5zcGVjaWVzJiZuW1N5bWJvbC5zcGVjaWVzXT09PW4mJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFN5bWJvbC5zcGVjaWVzLHt2YWx1ZTpudWxsLGNvbmZpZ3VyYWJsZTohMH0pKSxuLmFsbG9jPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdShudWxsLGUsdCxyKX0sbi5hbGxvY1Vuc2FmZT1mdW5jdGlvbihlKXtyZXR1cm4gYyhudWxsLGUpfSxuLmFsbG9jVW5zYWZlU2xvdz1mdW5jdGlvbihlKXtyZXR1cm4gYyhudWxsLGUpfSxuLmlzQnVmZmVyPWZ1bmN0aW9uKGUpe3JldHVybiEobnVsbD09ZXx8IWUuX2lzQnVmZmVyKX0sbi5jb21wYXJlPWZ1bmN0aW9uKGUsdCl7aWYoIW4uaXNCdWZmZXIoZSl8fCFuLmlzQnVmZmVyKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzXCIpO2lmKGU9PT10KXJldHVybiAwO2Zvcih2YXIgcj1lLmxlbmd0aCxpPXQubGVuZ3RoLG89MCxzPU1hdGgubWluKHIsaSk7bzxzOysrbylpZihlW29dIT09dFtvXSl7cj1lW29dLGk9dFtvXTticmVha31yZXR1cm4gcjxpPy0xOmk8cj8xOjB9LG4uaXNFbmNvZGluZz1mdW5jdGlvbihlKXtzd2l0Y2goU3RyaW5nKGUpLnRvTG93ZXJDYXNlKCkpe2Nhc2VcImhleFwiOmNhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOmNhc2VcImFzY2lpXCI6Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6Y2FzZVwiYmFzZTY0XCI6Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19LG4uY29uY2F0PWZ1bmN0aW9uKGUsdCl7aWYoIVooZSkpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJyk7aWYoMD09PWUubGVuZ3RoKXJldHVybiBuLmFsbG9jKDApO3ZhciByO2lmKHZvaWQgMD09PXQpZm9yKHQ9MCxyPTA7cjxlLmxlbmd0aDsrK3IpdCs9ZVtyXS5sZW5ndGg7dmFyIGk9bi5hbGxvY1Vuc2FmZSh0KSxvPTA7Zm9yKHI9MDtyPGUubGVuZ3RoOysrcil7dmFyIHM9ZVtyXTtpZighbi5pc0J1ZmZlcihzKSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKTtzLmNvcHkoaSxvKSxvKz1zLmxlbmd0aH1yZXR1cm4gaX0sbi5ieXRlTGVuZ3RoPXYsbi5wcm90b3R5cGUuX2lzQnVmZmVyPSEwLG4ucHJvdG90eXBlLnN3YXAxNj1mdW5jdGlvbigpe3ZhciBlPXRoaXMubGVuZ3RoO2lmKGUlMiE9MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzXCIpO2Zvcih2YXIgdD0wO3Q8ZTt0Kz0yKWcodGhpcyx0LHQrMSk7cmV0dXJuIHRoaXN9LG4ucHJvdG90eXBlLnN3YXAzMj1mdW5jdGlvbigpe3ZhciBlPXRoaXMubGVuZ3RoO2lmKGUlNCE9MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzXCIpO2Zvcih2YXIgdD0wO3Q8ZTt0Kz00KWcodGhpcyx0LHQrMyksZyh0aGlzLHQrMSx0KzIpO3JldHVybiB0aGlzfSxuLnByb3RvdHlwZS5zd2FwNjQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxlbmd0aDtpZihlJTghPTApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0c1wiKTtmb3IodmFyIHQ9MDt0PGU7dCs9OClnKHRoaXMsdCx0KzcpLGcodGhpcyx0KzEsdCs2KSxnKHRoaXMsdCsyLHQrNSksZyh0aGlzLHQrMyx0KzQpO3JldHVybiB0aGlzfSxuLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBlPTB8dGhpcy5sZW5ndGg7cmV0dXJuIDA9PT1lP1wiXCI6MD09PWFyZ3VtZW50cy5sZW5ndGg/VCh0aGlzLDAsZSk6eS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LG4ucHJvdG90eXBlLmVxdWFscz1mdW5jdGlvbihlKXtpZighbi5pc0J1ZmZlcihlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlclwiKTtyZXR1cm4gdGhpcz09PWV8fDA9PT1uLmNvbXBhcmUodGhpcyxlKX0sbi5wcm90b3R5cGUuaW5zcGVjdD1mdW5jdGlvbigpe3ZhciBlPVwiXCIsdD1yLklOU1BFQ1RfTUFYX0JZVEVTO3JldHVybiB0aGlzLmxlbmd0aD4wJiYoZT10aGlzLnRvU3RyaW5nKFwiaGV4XCIsMCx0KS5tYXRjaCgvLnsyfS9nKS5qb2luKFwiIFwiKSx0aGlzLmxlbmd0aD50JiYoZSs9XCIgLi4uIFwiKSksXCI8QnVmZmVyIFwiK2UrXCI+XCJ9LG4ucHJvdG90eXBlLmNvbXBhcmU9ZnVuY3Rpb24oZSx0LHIsaSxvKXtpZighbi5pc0J1ZmZlcihlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlclwiKTtpZih2b2lkIDA9PT10JiYodD0wKSx2b2lkIDA9PT1yJiYocj1lP2UubGVuZ3RoOjApLHZvaWQgMD09PWkmJihpPTApLHZvaWQgMD09PW8mJihvPXRoaXMubGVuZ3RoKSx0PDB8fHI+ZS5sZW5ndGh8fGk8MHx8bz50aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm91dCBvZiByYW5nZSBpbmRleFwiKTtpZihpPj1vJiZ0Pj1yKXJldHVybiAwO2lmKGk+PW8pcmV0dXJuLTE7aWYodD49cilyZXR1cm4gMTtpZih0Pj4+PTAscj4+Pj0wLGk+Pj49MCxvPj4+PTAsdGhpcz09PWUpcmV0dXJuIDA7Zm9yKHZhciBzPW8taSxhPXItdCx1PU1hdGgubWluKHMsYSksYz10aGlzLnNsaWNlKGksbyksbD1lLnNsaWNlKHQscikscD0wO3A8dTsrK3ApaWYoY1twXSE9PWxbcF0pe3M9Y1twXSxhPWxbcF07YnJlYWt9cmV0dXJuIHM8YT8tMTphPHM/MTowfSxuLnByb3RvdHlwZS5pbmNsdWRlcz1mdW5jdGlvbihlLHQscil7cmV0dXJuLTEhPT10aGlzLmluZGV4T2YoZSx0LHIpfSxuLnByb3RvdHlwZS5pbmRleE9mPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gYih0aGlzLGUsdCxyLCEwKX0sbi5wcm90b3R5cGUubGFzdEluZGV4T2Y9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBiKHRoaXMsZSx0LHIsITEpfSxuLnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbihlLHQscixuKXtpZih2b2lkIDA9PT10KW49XCJ1dGY4XCIscj10aGlzLmxlbmd0aCx0PTA7ZWxzZSBpZih2b2lkIDA9PT1yJiZcInN0cmluZ1wiPT10eXBlb2YgdCluPXQscj10aGlzLmxlbmd0aCx0PTA7ZWxzZXtpZighaXNGaW5pdGUodCkpdGhyb3cgbmV3IEVycm9yKFwiQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWRcIik7dHw9MCxpc0Zpbml0ZShyKT8ocnw9MCx2b2lkIDA9PT1uJiYobj1cInV0ZjhcIikpOihuPXIscj12b2lkIDApfXZhciBpPXRoaXMubGVuZ3RoLXQ7aWYoKHZvaWQgMD09PXJ8fHI+aSkmJihyPWkpLGUubGVuZ3RoPjAmJihyPDB8fHQ8MCl8fHQ+dGhpcy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kc1wiKTtufHwobj1cInV0ZjhcIik7Zm9yKHZhciBvPSExOzspc3dpdGNoKG4pe2Nhc2VcImhleFwiOnJldHVybiBFKHRoaXMsZSx0LHIpO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBTKHRoaXMsZSx0LHIpO2Nhc2VcImFzY2lpXCI6cmV0dXJuIF8odGhpcyxlLHQscik7Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6cmV0dXJuIEModGhpcyxlLHQscik7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIFIodGhpcyxlLHQscik7Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuIEEodGhpcyxlLHQscik7ZGVmYXVsdDppZihvKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIituKTtuPShcIlwiK24pLnRvTG93ZXJDYXNlKCksbz0hMH19LG4ucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybnt0eXBlOlwiQnVmZmVyXCIsZGF0YTpBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnJ8fHRoaXMsMCl9fTt2YXIgJD00MDk2O24ucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5sZW5ndGg7ZT1+fmUsdD12b2lkIDA9PT10P3I6fn50LGU8MD8oZSs9cik8MCYmKGU9MCk6ZT5yJiYoZT1yKSx0PDA/KHQrPXIpPDAmJih0PTApOnQ+ciYmKHQ9ciksdDxlJiYodD1lKTt2YXIgaTtpZihuLlRZUEVEX0FSUkFZX1NVUFBPUlQpaT10aGlzLnN1YmFycmF5KGUsdCksaS5fX3Byb3RvX189bi5wcm90b3R5cGU7ZWxzZXt2YXIgbz10LWU7aT1uZXcgbihvLHZvaWQgMCk7Zm9yKHZhciBzPTA7czxvOysrcylpW3NdPXRoaXNbcytlXX1yZXR1cm4gaX0sbi5wcm90b3R5cGUucmVhZFVJbnRMRT1mdW5jdGlvbihlLHQscil7ZXw9MCx0fD0wLHJ8fE8oZSx0LHRoaXMubGVuZ3RoKTtmb3IodmFyIG49dGhpc1tlXSxpPTEsbz0wOysrbzx0JiYoaSo9MjU2KTspbis9dGhpc1tlK29dKmk7cmV0dXJuIG59LG4ucHJvdG90eXBlLnJlYWRVSW50QkU9ZnVuY3Rpb24oZSx0LHIpe2V8PTAsdHw9MCxyfHxPKGUsdCx0aGlzLmxlbmd0aCk7Zm9yKHZhciBuPXRoaXNbZSstLXRdLGk9MTt0PjAmJihpKj0yNTYpOyluKz10aGlzW2UrLS10XSppO3JldHVybiBufSxuLnByb3RvdHlwZS5yZWFkVUludDg9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8TyhlLDEsdGhpcy5sZW5ndGgpLHRoaXNbZV19LG4ucHJvdG90eXBlLnJlYWRVSW50MTZMRT1mdW5jdGlvbihlLHQpe3JldHVybiB0fHxPKGUsMix0aGlzLmxlbmd0aCksdGhpc1tlXXx0aGlzW2UrMV08PDh9LG4ucHJvdG90eXBlLnJlYWRVSW50MTZCRT1mdW5jdGlvbihlLHQpe3JldHVybiB0fHxPKGUsMix0aGlzLmxlbmd0aCksdGhpc1tlXTw8OHx0aGlzW2UrMV19LG4ucHJvdG90eXBlLnJlYWRVSW50MzJMRT1mdW5jdGlvbihlLHQpe3JldHVybiB0fHxPKGUsNCx0aGlzLmxlbmd0aCksKHRoaXNbZV18dGhpc1tlKzFdPDw4fHRoaXNbZSsyXTw8MTYpKzE2Nzc3MjE2KnRoaXNbZSszXX0sbi5wcm90b3R5cGUucmVhZFVJbnQzMkJFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR8fE8oZSw0LHRoaXMubGVuZ3RoKSwxNjc3NzIxNip0aGlzW2VdKyh0aGlzW2UrMV08PDE2fHRoaXNbZSsyXTw8OHx0aGlzW2UrM10pfSxuLnByb3RvdHlwZS5yZWFkSW50TEU9ZnVuY3Rpb24oZSx0LHIpe2V8PTAsdHw9MCxyfHxPKGUsdCx0aGlzLmxlbmd0aCk7Zm9yKHZhciBuPXRoaXNbZV0saT0xLG89MDsrK288dCYmKGkqPTI1Nik7KW4rPXRoaXNbZStvXSppO3JldHVybiBpKj0xMjgsbj49aSYmKG4tPU1hdGgucG93KDIsOCp0KSksbn0sbi5wcm90b3R5cGUucmVhZEludEJFPWZ1bmN0aW9uKGUsdCxyKXtlfD0wLHR8PTAscnx8TyhlLHQsdGhpcy5sZW5ndGgpO2Zvcih2YXIgbj10LGk9MSxvPXRoaXNbZSstLW5dO24+MCYmKGkqPTI1Nik7KW8rPXRoaXNbZSstLW5dKmk7cmV0dXJuIGkqPTEyOCxvPj1pJiYoby09TWF0aC5wb3coMiw4KnQpKSxvfSxuLnByb3RvdHlwZS5yZWFkSW50OD1mdW5jdGlvbihlLHQpe3JldHVybiB0fHxPKGUsMSx0aGlzLmxlbmd0aCksMTI4JnRoaXNbZV0/LTEqKDI1NS10aGlzW2VdKzEpOnRoaXNbZV19LG4ucHJvdG90eXBlLnJlYWRJbnQxNkxFPWZ1bmN0aW9uKGUsdCl7dHx8TyhlLDIsdGhpcy5sZW5ndGgpO3ZhciByPXRoaXNbZV18dGhpc1tlKzFdPDw4O3JldHVybiAzMjc2OCZyPzQyOTQ5MDE3NjB8cjpyfSxuLnByb3RvdHlwZS5yZWFkSW50MTZCRT1mdW5jdGlvbihlLHQpe3R8fE8oZSwyLHRoaXMubGVuZ3RoKTt2YXIgcj10aGlzW2UrMV18dGhpc1tlXTw8ODtyZXR1cm4gMzI3Njgmcj80Mjk0OTAxNzYwfHI6cn0sbi5wcm90b3R5cGUucmVhZEludDMyTEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8TyhlLDQsdGhpcy5sZW5ndGgpLHRoaXNbZV18dGhpc1tlKzFdPDw4fHRoaXNbZSsyXTw8MTZ8dGhpc1tlKzNdPDwyNH0sbi5wcm90b3R5cGUucmVhZEludDMyQkU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8TyhlLDQsdGhpcy5sZW5ndGgpLHRoaXNbZV08PDI0fHRoaXNbZSsxXTw8MTZ8dGhpc1tlKzJdPDw4fHRoaXNbZSszXX0sbi5wcm90b3R5cGUucmVhZEZsb2F0TEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8TyhlLDQsdGhpcy5sZW5ndGgpLFEucmVhZCh0aGlzLGUsITAsMjMsNCl9LG4ucHJvdG90eXBlLnJlYWRGbG9hdEJFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR8fE8oZSw0LHRoaXMubGVuZ3RoKSxRLnJlYWQodGhpcyxlLCExLDIzLDQpfSxuLnByb3RvdHlwZS5yZWFkRG91YmxlTEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8TyhlLDgsdGhpcy5sZW5ndGgpLFEucmVhZCh0aGlzLGUsITAsNTIsOCl9LG4ucHJvdG90eXBlLnJlYWREb3VibGVCRT1mdW5jdGlvbihlLHQpe3JldHVybiB0fHxPKGUsOCx0aGlzLmxlbmd0aCksUS5yZWFkKHRoaXMsZSwhMSw1Miw4KX0sbi5wcm90b3R5cGUud3JpdGVVSW50TEU9ZnVuY3Rpb24oZSx0LHIsbil7aWYoZT0rZSx0fD0wLHJ8PTAsIW4pe04odGhpcyxlLHQscixNYXRoLnBvdygyLDgqciktMSwwKX12YXIgaT0xLG89MDtmb3IodGhpc1t0XT0yNTUmZTsrK288ciYmKGkqPTI1Nik7KXRoaXNbdCtvXT1lL2kmMjU1O3JldHVybiB0K3J9LG4ucHJvdG90eXBlLndyaXRlVUludEJFPWZ1bmN0aW9uKGUsdCxyLG4pe2lmKGU9K2UsdHw9MCxyfD0wLCFuKXtOKHRoaXMsZSx0LHIsTWF0aC5wb3coMiw4KnIpLTEsMCl9dmFyIGk9ci0xLG89MTtmb3IodGhpc1t0K2ldPTI1NSZlOy0taT49MCYmKG8qPTI1Nik7KXRoaXNbdCtpXT1lL28mMjU1O3JldHVybiB0K3J9LG4ucHJvdG90eXBlLndyaXRlVUludDg9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHR8PTAscnx8Tih0aGlzLGUsdCwxLDI1NSwwKSxuLlRZUEVEX0FSUkFZX1NVUFBPUlR8fChlPU1hdGguZmxvb3IoZSkpLHRoaXNbdF09MjU1JmUsdCsxfSxuLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0fD0wLHJ8fE4odGhpcyxlLHQsMiw2NTUzNSwwKSxuLlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbdF09MjU1JmUsdGhpc1t0KzFdPWU+Pj44KTpVKHRoaXMsZSx0LCEwKSx0KzJ9LG4ucHJvdG90eXBlLndyaXRlVUludDE2QkU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHR8PTAscnx8Tih0aGlzLGUsdCwyLDY1NTM1LDApLG4uVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1t0XT1lPj4+OCx0aGlzW3QrMV09MjU1JmUpOlUodGhpcyxlLHQsITEpLHQrMn0sbi5wcm90b3R5cGUud3JpdGVVSW50MzJMRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdHw9MCxyfHxOKHRoaXMsZSx0LDQsNDI5NDk2NzI5NSwwKSxuLlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbdCszXT1lPj4+MjQsdGhpc1t0KzJdPWU+Pj4xNix0aGlzW3QrMV09ZT4+PjgsdGhpc1t0XT0yNTUmZSk6RCh0aGlzLGUsdCwhMCksdCs0fSxuLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0fD0wLHJ8fE4odGhpcyxlLHQsNCw0Mjk0OTY3Mjk1LDApLG4uVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1t0XT1lPj4+MjQsdGhpc1t0KzFdPWU+Pj4xNix0aGlzW3QrMl09ZT4+PjgsdGhpc1t0KzNdPTI1NSZlKTpEKHRoaXMsZSx0LCExKSx0KzR9LG4ucHJvdG90eXBlLndyaXRlSW50TEU9ZnVuY3Rpb24oZSx0LHIsbil7aWYoZT0rZSx0fD0wLCFuKXt2YXIgaT1NYXRoLnBvdygyLDgqci0xKTtOKHRoaXMsZSx0LHIsaS0xLC1pKX12YXIgbz0wLHM9MSxhPTA7Zm9yKHRoaXNbdF09MjU1JmU7KytvPHImJihzKj0yNTYpOyllPDAmJjA9PT1hJiYwIT09dGhpc1t0K28tMV0mJihhPTEpLHRoaXNbdCtvXT0oZS9zPj4wKS1hJjI1NTtyZXR1cm4gdCtyfSxuLnByb3RvdHlwZS53cml0ZUludEJFPWZ1bmN0aW9uKGUsdCxyLG4pe2lmKGU9K2UsdHw9MCwhbil7dmFyIGk9TWF0aC5wb3coMiw4KnItMSk7Tih0aGlzLGUsdCxyLGktMSwtaSl9dmFyIG89ci0xLHM9MSxhPTA7Zm9yKHRoaXNbdCtvXT0yNTUmZTstLW8+PTAmJihzKj0yNTYpOyllPDAmJjA9PT1hJiYwIT09dGhpc1t0K28rMV0mJihhPTEpLHRoaXNbdCtvXT0oZS9zPj4wKS1hJjI1NTtyZXR1cm4gdCtyfSxuLnByb3RvdHlwZS53cml0ZUludDg9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHR8PTAscnx8Tih0aGlzLGUsdCwxLDEyNywtMTI4KSxuLlRZUEVEX0FSUkFZX1NVUFBPUlR8fChlPU1hdGguZmxvb3IoZSkpLGU8MCYmKGU9MjU1K2UrMSksdGhpc1t0XT0yNTUmZSx0KzF9LG4ucHJvdG90eXBlLndyaXRlSW50MTZMRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdHw9MCxyfHxOKHRoaXMsZSx0LDIsMzI3NjcsLTMyNzY4KSxuLlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbdF09MjU1JmUsdGhpc1t0KzFdPWU+Pj44KTpVKHRoaXMsZSx0LCEwKSx0KzJ9LG4ucHJvdG90eXBlLndyaXRlSW50MTZCRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdHw9MCxyfHxOKHRoaXMsZSx0LDIsMzI3NjcsLTMyNzY4KSxuLlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbdF09ZT4+PjgsdGhpc1t0KzFdPTI1NSZlKTpVKHRoaXMsZSx0LCExKSx0KzJ9LG4ucHJvdG90eXBlLndyaXRlSW50MzJMRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdHw9MCxyfHxOKHRoaXMsZSx0LDQsMjE0NzQ4MzY0NywtMjE0NzQ4MzY0OCksbi5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW3RdPTI1NSZlLHRoaXNbdCsxXT1lPj4+OCx0aGlzW3QrMl09ZT4+PjE2LHRoaXNbdCszXT1lPj4+MjQpOkQodGhpcyxlLHQsITApLHQrNH0sbi5wcm90b3R5cGUud3JpdGVJbnQzMkJFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0fD0wLHJ8fE4odGhpcyxlLHQsNCwyMTQ3NDgzNjQ3LC0yMTQ3NDgzNjQ4KSxlPDAmJihlPTQyOTQ5NjcyOTUrZSsxKSxuLlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbdF09ZT4+PjI0LHRoaXNbdCsxXT1lPj4+MTYsdGhpc1t0KzJdPWU+Pj44LHRoaXNbdCszXT0yNTUmZSk6RCh0aGlzLGUsdCwhMSksdCs0fSxuLnByb3RvdHlwZS53cml0ZUZsb2F0TEU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBqKHRoaXMsZSx0LCEwLHIpfSxuLnByb3RvdHlwZS53cml0ZUZsb2F0QkU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBqKHRoaXMsZSx0LCExLHIpfSxuLnByb3RvdHlwZS53cml0ZURvdWJsZUxFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gQih0aGlzLGUsdCwhMCxyKX0sbi5wcm90b3R5cGUud3JpdGVEb3VibGVCRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIEIodGhpcyxlLHQsITEscil9LG4ucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oZSx0LHIsaSl7aWYocnx8KHI9MCksaXx8MD09PWl8fChpPXRoaXMubGVuZ3RoKSx0Pj1lLmxlbmd0aCYmKHQ9ZS5sZW5ndGgpLHR8fCh0PTApLGk+MCYmaTxyJiYoaT1yKSxpPT09cilyZXR1cm4gMDtpZigwPT09ZS5sZW5ndGh8fDA9PT10aGlzLmxlbmd0aClyZXR1cm4gMDtpZih0PDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJ0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzXCIpO2lmKHI8MHx8cj49dGhpcy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzXCIpO2lmKGk8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInNvdXJjZUVuZCBvdXQgb2YgYm91bmRzXCIpO2k+dGhpcy5sZW5ndGgmJihpPXRoaXMubGVuZ3RoKSxlLmxlbmd0aC10PGktciYmKGk9ZS5sZW5ndGgtdCtyKTt2YXIgbyxzPWktcjtpZih0aGlzPT09ZSYmcjx0JiZ0PGkpZm9yKG89cy0xO28+PTA7LS1vKWVbbyt0XT10aGlzW28rcl07ZWxzZSBpZihzPDFlM3x8IW4uVFlQRURfQVJSQVlfU1VQUE9SVClmb3Iobz0wO288czsrK28pZVtvK3RdPXRoaXNbbytyXTtlbHNlIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKGUsdGhpcy5zdWJhcnJheShyLHIrcyksdCk7cmV0dXJuIHN9LG4ucHJvdG90eXBlLmZpbGw9ZnVuY3Rpb24oZSx0LHIsaSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0PyhpPXQsdD0wLHI9dGhpcy5sZW5ndGgpOlwic3RyaW5nXCI9PXR5cGVvZiByJiYoaT1yLHI9dGhpcy5sZW5ndGgpLDE9PT1lLmxlbmd0aCl7dmFyIG89ZS5jaGFyQ29kZUF0KDApO288MjU2JiYoZT1vKX1pZih2b2lkIDAhPT1pJiZcInN0cmluZ1wiIT10eXBlb2YgaSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZ1wiKTtpZihcInN0cmluZ1wiPT10eXBlb2YgaSYmIW4uaXNFbmNvZGluZyhpKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIraSl9ZWxzZVwibnVtYmVyXCI9PXR5cGVvZiBlJiYoZSY9MjU1KTtpZih0PDB8fHRoaXMubGVuZ3RoPHR8fHRoaXMubGVuZ3RoPHIpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJPdXQgb2YgcmFuZ2UgaW5kZXhcIik7aWYocjw9dClyZXR1cm4gdGhpczt0Pj4+PTAscj12b2lkIDA9PT1yP3RoaXMubGVuZ3RoOnI+Pj4wLGV8fChlPTApO3ZhciBzO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKWZvcihzPXQ7czxyOysrcyl0aGlzW3NdPWU7ZWxzZXt2YXIgYT1uLmlzQnVmZmVyKGUpP2U6VihuZXcgbihlLGkpLnRvU3RyaW5nKCkpLHU9YS5sZW5ndGg7Zm9yKHM9MDtzPHItdDsrK3MpdGhpc1tzK3RdPWFbcyV1XX1yZXR1cm4gdGhpc307dmFyIGVlPS9bXitcXC8wLTlBLVphLXotX10vZ30pLmNhbGwodGhpcyxcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9LGUoXCJidWZmZXJcIikuQnVmZmVyKX0se1wiYmFzZTY0LWpzXCI6NzksYnVmZmVyOjgxLGllZWU3NTQ6ODMsaXNhcnJheTo4NH1dLDgyOltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbigpe3RoaXMuX2V2ZW50cz10aGlzLl9ldmVudHN8fHt9LHRoaXMuX21heExpc3RlbmVycz10aGlzLl9tYXhMaXN0ZW5lcnN8fHZvaWQgMH1mdW5jdGlvbiBpKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV9ZnVuY3Rpb24gbyhlKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgZX1mdW5jdGlvbiBzKGUpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZX1mdW5jdGlvbiBhKGUpe3JldHVybiB2b2lkIDA9PT1lfXQuZXhwb3J0cz1uLG4uRXZlbnRFbWl0dGVyPW4sbi5wcm90b3R5cGUuX2V2ZW50cz12b2lkIDAsbi5wcm90b3R5cGUuX21heExpc3RlbmVycz12b2lkIDAsbi5kZWZhdWx0TWF4TGlzdGVuZXJzPTEwLG4ucHJvdG90eXBlLnNldE1heExpc3RlbmVycz1mdW5jdGlvbihlKXtpZighbyhlKXx8ZTwwfHxpc05hTihlKSl0aHJvdyBUeXBlRXJyb3IoXCJuIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXJcIik7cmV0dXJuIHRoaXMuX21heExpc3RlbmVycz1lLHRoaXN9LG4ucHJvdG90eXBlLmVtaXQ9ZnVuY3Rpb24oZSl7dmFyIHQscixuLG8sdSxjO2lmKHRoaXMuX2V2ZW50c3x8KHRoaXMuX2V2ZW50cz17fSksXCJlcnJvclwiPT09ZSYmKCF0aGlzLl9ldmVudHMuZXJyb3J8fHModGhpcy5fZXZlbnRzLmVycm9yKSYmIXRoaXMuX2V2ZW50cy5lcnJvci5sZW5ndGgpKXtpZigodD1hcmd1bWVudHNbMV0paW5zdGFuY2VvZiBFcnJvcil0aHJvdyB0O3ZhciBsPW5ldyBFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4gKCcrdCtcIilcIik7dGhyb3cgbC5jb250ZXh0PXQsbH1pZihyPXRoaXMuX2V2ZW50c1tlXSxhKHIpKXJldHVybiExO2lmKGkocikpc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMTpyLmNhbGwodGhpcyk7YnJlYWs7Y2FzZSAyOnIuY2FsbCh0aGlzLGFyZ3VtZW50c1sxXSk7YnJlYWs7Y2FzZSAzOnIuY2FsbCh0aGlzLGFyZ3VtZW50c1sxXSxhcmd1bWVudHNbMl0pO2JyZWFrO2RlZmF1bHQ6bz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSksci5hcHBseSh0aGlzLG8pfWVsc2UgaWYocyhyKSlmb3Iobz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSksYz1yLnNsaWNlKCksbj1jLmxlbmd0aCx1PTA7dTxuO3UrKyljW3VdLmFwcGx5KHRoaXMsbyk7cmV0dXJuITB9LG4ucHJvdG90eXBlLmFkZExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI7aWYoIWkodCkpdGhyb3cgVHlwZUVycm9yKFwibGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO3JldHVybiB0aGlzLl9ldmVudHN8fCh0aGlzLl9ldmVudHM9e30pLHRoaXMuX2V2ZW50cy5uZXdMaXN0ZW5lciYmdGhpcy5lbWl0KFwibmV3TGlzdGVuZXJcIixlLGkodC5saXN0ZW5lcik/dC5saXN0ZW5lcjp0KSx0aGlzLl9ldmVudHNbZV0/cyh0aGlzLl9ldmVudHNbZV0pP3RoaXMuX2V2ZW50c1tlXS5wdXNoKHQpOnRoaXMuX2V2ZW50c1tlXT1bdGhpcy5fZXZlbnRzW2VdLHRdOnRoaXMuX2V2ZW50c1tlXT10LHModGhpcy5fZXZlbnRzW2VdKSYmIXRoaXMuX2V2ZW50c1tlXS53YXJuZWQmJihyPWEodGhpcy5fbWF4TGlzdGVuZXJzKT9uLmRlZmF1bHRNYXhMaXN0ZW5lcnM6dGhpcy5fbWF4TGlzdGVuZXJzKSYmcj4wJiZ0aGlzLl9ldmVudHNbZV0ubGVuZ3RoPnImJih0aGlzLl9ldmVudHNbZV0ud2FybmVkPSEwLGNvbnNvbGUuZXJyb3IoXCIobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LlwiLHRoaXMuX2V2ZW50c1tlXS5sZW5ndGgpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGNvbnNvbGUudHJhY2UmJmNvbnNvbGUudHJhY2UoKSksdGhpc30sbi5wcm90b3R5cGUub249bi5wcm90b3R5cGUuYWRkTGlzdGVuZXIsbi5wcm90b3R5cGUub25jZT1mdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLnJlbW92ZUxpc3RlbmVyKGUsciksbnx8KG49ITAsdC5hcHBseSh0aGlzLGFyZ3VtZW50cykpfWlmKCFpKHQpKXRocm93IFR5cGVFcnJvcihcImxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvblwiKTt2YXIgbj0hMTtyZXR1cm4gci5saXN0ZW5lcj10LHRoaXMub24oZSxyKSx0aGlzfSxuLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3ZhciByLG4sbyxhO2lmKCFpKHQpKXRocm93IFR5cGVFcnJvcihcImxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvblwiKTtpZighdGhpcy5fZXZlbnRzfHwhdGhpcy5fZXZlbnRzW2VdKXJldHVybiB0aGlzO2lmKHI9dGhpcy5fZXZlbnRzW2VdLG89ci5sZW5ndGgsbj0tMSxyPT09dHx8aShyLmxpc3RlbmVyKSYmci5saXN0ZW5lcj09PXQpZGVsZXRlIHRoaXMuX2V2ZW50c1tlXSx0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXImJnRoaXMuZW1pdChcInJlbW92ZUxpc3RlbmVyXCIsZSx0KTtlbHNlIGlmKHMocikpe2ZvcihhPW87YS0tID4wOylpZihyW2FdPT09dHx8clthXS5saXN0ZW5lciYmclthXS5saXN0ZW5lcj09PXQpe249YTticmVha31pZihuPDApcmV0dXJuIHRoaXM7MT09PXIubGVuZ3RoPyhyLmxlbmd0aD0wLGRlbGV0ZSB0aGlzLl9ldmVudHNbZV0pOnIuc3BsaWNlKG4sMSksdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLGUsdCl9cmV0dXJuIHRoaXN9LG4ucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycz1mdW5jdGlvbihlKXt2YXIgdCxyO2lmKCF0aGlzLl9ldmVudHMpcmV0dXJuIHRoaXM7aWYoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilyZXR1cm4gMD09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5fZXZlbnRzPXt9OnRoaXMuX2V2ZW50c1tlXSYmZGVsZXRlIHRoaXMuX2V2ZW50c1tlXSx0aGlzO2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXtmb3IodCBpbiB0aGlzLl9ldmVudHMpXCJyZW1vdmVMaXN0ZW5lclwiIT09dCYmdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnModCk7cmV0dXJuIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKFwicmVtb3ZlTGlzdGVuZXJcIiksdGhpcy5fZXZlbnRzPXt9LHRoaXN9aWYocj10aGlzLl9ldmVudHNbZV0saShyKSl0aGlzLnJlbW92ZUxpc3RlbmVyKGUscik7ZWxzZSBpZihyKWZvcig7ci5sZW5ndGg7KXRoaXMucmVtb3ZlTGlzdGVuZXIoZSxyW3IubGVuZ3RoLTFdKTtyZXR1cm4gZGVsZXRlIHRoaXMuX2V2ZW50c1tlXSx0aGlzfSxuLnByb3RvdHlwZS5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2V2ZW50cyYmdGhpcy5fZXZlbnRzW2VdP2kodGhpcy5fZXZlbnRzW2VdKT9bdGhpcy5fZXZlbnRzW2VdXTp0aGlzLl9ldmVudHNbZV0uc2xpY2UoKTpbXX0sbi5wcm90b3R5cGUubGlzdGVuZXJDb3VudD1mdW5jdGlvbihlKXtpZih0aGlzLl9ldmVudHMpe3ZhciB0PXRoaXMuX2V2ZW50c1tlXTtpZihpKHQpKXJldHVybiAxO2lmKHQpcmV0dXJuIHQubGVuZ3RofXJldHVybiAwfSxuLmxpc3RlbmVyQ291bnQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5saXN0ZW5lckNvdW50KHQpfX0se31dLDgzOltmdW5jdGlvbihlLHQscil7ci5yZWFkPWZ1bmN0aW9uKGUsdCxyLG4saSl7dmFyIG8scyxhPTgqaS1uLTEsdT0oMTw8YSktMSxjPXU+PjEsbD0tNyxwPXI/aS0xOjAsaD1yPy0xOjEsZj1lW3QrcF07Zm9yKHArPWgsbz1mJigxPDwtbCktMSxmPj49LWwsbCs9YTtsPjA7bz0yNTYqbytlW3QrcF0scCs9aCxsLT04KTtmb3Iocz1vJigxPDwtbCktMSxvPj49LWwsbCs9bjtsPjA7cz0yNTYqcytlW3QrcF0scCs9aCxsLT04KTtpZigwPT09bylvPTEtYztlbHNle2lmKG89PT11KXJldHVybiBzP05hTjoxLzAqKGY/LTE6MSk7cys9TWF0aC5wb3coMixuKSxvLT1jfXJldHVybihmPy0xOjEpKnMqTWF0aC5wb3coMixvLW4pfSxyLndyaXRlPWZ1bmN0aW9uKGUsdCxyLG4saSxvKXt2YXIgcyxhLHUsYz04Km8taS0xLGw9KDE8PGMpLTEscD1sPj4xLGg9MjM9PT1pP01hdGgucG93KDIsLTI0KS1NYXRoLnBvdygyLC03Nyk6MCxmPW4/MDpvLTEsZD1uPzE6LTEsbT10PDB8fDA9PT10JiYxL3Q8MD8xOjA7Zm9yKHQ9TWF0aC5hYnModCksaXNOYU4odCl8fHQ9PT0xLzA/KGE9aXNOYU4odCk/MTowLHM9bCk6KHM9TWF0aC5mbG9vcihNYXRoLmxvZyh0KS9NYXRoLkxOMiksdCoodT1NYXRoLnBvdygyLC1zKSk8MSYmKHMtLSx1Kj0yKSx0Kz1zK3A+PTE/aC91OmgqTWF0aC5wb3coMiwxLXApLHQqdT49MiYmKHMrKyx1Lz0yKSxzK3A+PWw/KGE9MCxzPWwpOnMrcD49MT8oYT0odCp1LTEpKk1hdGgucG93KDIsaSkscys9cCk6KGE9dCpNYXRoLnBvdygyLHAtMSkqTWF0aC5wb3coMixpKSxzPTApKTtpPj04O2VbcitmXT0yNTUmYSxmKz1kLGEvPTI1NixpLT04KTtmb3Iocz1zPDxpfGEsYys9aTtjPjA7ZVtyK2ZdPTI1NSZzLGYrPWQscy89MjU2LGMtPTgpO2VbcitmLWRdfD0xMjgqbX19LHt9XSw4NDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXt9LnRvU3RyaW5nO3QuZXhwb3J0cz1BcnJheS5pc0FycmF5fHxmdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PW4uY2FsbChlKX19LHt9XSw4NTpbZnVuY3Rpb24oZSx0LHIpeyFmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe3JldHVybiBudWxsIT09ZSYmXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfWZ1bmN0aW9uIHIoZSl7cmV0dXJuIG51bGwhPT1lJiZcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfWZ1bmN0aW9uIG4oZSxpKXtpZihlPT09aSlyZXR1cm4hMDtpZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkhPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaSkpcmV0dXJuITE7aWYoITA9PT10KGUpKXtpZihlLmxlbmd0aCE9PWkubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKWlmKCExPT09bihlW29dLGlbb10pKXJldHVybiExO3JldHVybiEwfWlmKCEwPT09cihlKSl7dmFyIHM9e307Zm9yKHZhciBhIGluIGUpaWYoaGFzT3duUHJvcGVydHkuY2FsbChlLGEpKXtpZighMT09PW4oZVthXSxpW2FdKSlyZXR1cm4hMTtzW2FdPSEwfWZvcih2YXIgdSBpbiBpKWlmKGhhc093blByb3BlcnR5LmNhbGwoaSx1KSYmITAhPT1zW3VdKXJldHVybiExO3JldHVybiEwfXJldHVybiExfWZ1bmN0aW9uIGkoZSl7aWYoXCJcIj09PWV8fCExPT09ZXx8bnVsbD09PWUpcmV0dXJuITA7aWYodChlKSYmMD09PWUubGVuZ3RoKXJldHVybiEwO2lmKHIoZSkpe2Zvcih2YXIgbiBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkobikpcmV0dXJuITE7cmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gbyhlKXtmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSkscj1bXSxuPTA7bjx0Lmxlbmd0aDtuKyspci5wdXNoKGVbdFtuXV0pO3JldHVybiByfWZ1bmN0aW9uIHMoZSl7cmV0dXJuIGU+PVwiYVwiJiZlPD1cInpcInx8ZT49XCJBXCImJmU8PVwiWlwifHxcIl9cIj09PWV9ZnVuY3Rpb24gYShlKXtyZXR1cm4gZT49XCIwXCImJmU8PVwiOVwifHxcIi1cIj09PWV9ZnVuY3Rpb24gdShlKXtyZXR1cm4gZT49XCJhXCImJmU8PVwielwifHxlPj1cIkFcIiYmZTw9XCJaXCJ8fGU+PVwiMFwiJiZlPD1cIjlcInx8XCJfXCI9PT1lfWZ1bmN0aW9uIGMoKXt9ZnVuY3Rpb24gbCgpe31mdW5jdGlvbiBwKGUpe3RoaXMucnVudGltZT1lfWZ1bmN0aW9uIGgoZSl7dGhpcy5faW50ZXJwcmV0ZXI9ZSx0aGlzLmZ1bmN0aW9uVGFibGU9e2Ficzp7X2Z1bmM6dGhpcy5fZnVuY3Rpb25BYnMsX3NpZ25hdHVyZTpbe3R5cGVzOlt5XX1dfSxhdmc6e19mdW5jOnRoaXMuX2Z1bmN0aW9uQXZnLF9zaWduYXR1cmU6W3t0eXBlczpbX119XX0sY2VpbDp7X2Z1bmM6dGhpcy5fZnVuY3Rpb25DZWlsLF9zaWduYXR1cmU6W3t0eXBlczpbeV19XX0sY29udGFpbnM6e19mdW5jOnRoaXMuX2Z1bmN0aW9uQ29udGFpbnMsX3NpZ25hdHVyZTpbe3R5cGVzOltiLHddfSx7dHlwZXM6W2ddfV19LGVuZHNfd2l0aDp7X2Z1bmM6dGhpcy5fZnVuY3Rpb25FbmRzV2l0aCxfc2lnbmF0dXJlOlt7dHlwZXM6W2JdfSx7dHlwZXM6W2JdfV19LGZsb29yOntfZnVuYzp0aGlzLl9mdW5jdGlvbkZsb29yLF9zaWduYXR1cmU6W3t0eXBlczpbeV19XX0sbGVuZ3RoOntfZnVuYzp0aGlzLl9mdW5jdGlvbkxlbmd0aCxfc2lnbmF0dXJlOlt7dHlwZXM6W2IsdyxFXX1dfSxtYXA6e19mdW5jOnRoaXMuX2Z1bmN0aW9uTWFwLF9zaWduYXR1cmU6W3t0eXBlczpbU119LHt0eXBlczpbd119XX0sbWF4OntfZnVuYzp0aGlzLl9mdW5jdGlvbk1heCxfc2lnbmF0dXJlOlt7dHlwZXM6W18sQ119XX0sbWVyZ2U6e19mdW5jOnRoaXMuX2Z1bmN0aW9uTWVyZ2UsX3NpZ25hdHVyZTpbe3R5cGVzOltFXSx2YXJpYWRpYzohMH1dfSxtYXhfYnk6e19mdW5jOnRoaXMuX2Z1bmN0aW9uTWF4QnksX3NpZ25hdHVyZTpbe3R5cGVzOlt3XX0se3R5cGVzOltTXX1dfSxzdW06e19mdW5jOnRoaXMuX2Z1bmN0aW9uU3VtLF9zaWduYXR1cmU6W3t0eXBlczpbX119XX0sc3RhcnRzX3dpdGg6e19mdW5jOnRoaXMuX2Z1bmN0aW9uU3RhcnRzV2l0aCxfc2lnbmF0dXJlOlt7dHlwZXM6W2JdfSx7dHlwZXM6W2JdfV19LG1pbjp7X2Z1bmM6dGhpcy5fZnVuY3Rpb25NaW4sX3NpZ25hdHVyZTpbe3R5cGVzOltfLENdfV19LG1pbl9ieTp7X2Z1bmM6dGhpcy5fZnVuY3Rpb25NaW5CeSxfc2lnbmF0dXJlOlt7dHlwZXM6W3ddfSx7dHlwZXM6W1NdfV19LHR5cGU6e19mdW5jOnRoaXMuX2Z1bmN0aW9uVHlwZSxfc2lnbmF0dXJlOlt7dHlwZXM6W2ddfV19LGtleXM6e19mdW5jOnRoaXMuX2Z1bmN0aW9uS2V5cyxfc2lnbmF0dXJlOlt7dHlwZXM6W0VdfV19LHZhbHVlczp7X2Z1bmM6dGhpcy5fZnVuY3Rpb25WYWx1ZXMsX3NpZ25hdHVyZTpbe3R5cGVzOltFXX1dfSxzb3J0OntfZnVuYzp0aGlzLl9mdW5jdGlvblNvcnQsX3NpZ25hdHVyZTpbe3R5cGVzOltDLF9dfV19LHNvcnRfYnk6e19mdW5jOnRoaXMuX2Z1bmN0aW9uU29ydEJ5LF9zaWduYXR1cmU6W3t0eXBlczpbd119LHt0eXBlczpbU119XX0sam9pbjp7X2Z1bmM6dGhpcy5fZnVuY3Rpb25Kb2luLF9zaWduYXR1cmU6W3t0eXBlczpbYl19LHt0eXBlczpbQ119XX0scmV2ZXJzZTp7X2Z1bmM6dGhpcy5fZnVuY3Rpb25SZXZlcnNlLF9zaWduYXR1cmU6W3t0eXBlczpbYix3XX1dfSx0b19hcnJheTp7X2Z1bmM6dGhpcy5fZnVuY3Rpb25Ub0FycmF5LF9zaWduYXR1cmU6W3t0eXBlczpbZ119XX0sdG9fc3RyaW5nOntfZnVuYzp0aGlzLl9mdW5jdGlvblRvU3RyaW5nLF9zaWduYXR1cmU6W3t0eXBlczpbZ119XX0sdG9fbnVtYmVyOntfZnVuYzp0aGlzLl9mdW5jdGlvblRvTnVtYmVyLF9zaWduYXR1cmU6W3t0eXBlczpbZ119XX0sbm90X251bGw6e19mdW5jOnRoaXMuX2Z1bmN0aW9uTm90TnVsbCxfc2lnbmF0dXJlOlt7dHlwZXM6W2ddLHZhcmlhZGljOiEwfV19fX1mdW5jdGlvbiBmKGUpe3JldHVybihuZXcgbCkucGFyc2UoZSl9ZnVuY3Rpb24gZChlKXtyZXR1cm4obmV3IGMpLnRva2VuaXplKGUpfWZ1bmN0aW9uIG0oZSx0KXtcbnZhciByPW5ldyBsLG49bmV3IGgsaT1uZXcgcChuKTtuLl9pbnRlcnByZXRlcj1pO3ZhciBvPXIucGFyc2UodCk7cmV0dXJuIGkuc2VhcmNoKG8sZSl9dmFyIHY7dj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTdHJpbmcucHJvdG90eXBlLnRyaW1MZWZ0P2Z1bmN0aW9uKGUpe3JldHVybiBlLnRyaW1MZWZ0KCl9OmZ1bmN0aW9uKGUpe3JldHVybiBlLm1hdGNoKC9eXFxzKiguKikvKVsxXX07dmFyIHk9MCxnPTEsYj0yLHc9MyxFPTQsUz02LF89OCxDPTksUj17XCIuXCI6XCJEb3RcIixcIipcIjpcIlN0YXJcIixcIixcIjpcIkNvbW1hXCIsXCI6XCI6XCJDb2xvblwiLFwie1wiOlwiTGJyYWNlXCIsXCJ9XCI6XCJSYnJhY2VcIixcIl1cIjpcIlJicmFja2V0XCIsXCIoXCI6XCJMcGFyZW5cIixcIilcIjpcIlJwYXJlblwiLFwiQFwiOlwiQ3VycmVudFwifSxBPXtcIjxcIjohMCxcIj5cIjohMCxcIj1cIjohMCxcIiFcIjohMH0seD17XCIgXCI6ITAsXCJcXHRcIjohMCxcIlxcblwiOiEwfTtjLnByb3RvdHlwZT17dG9rZW5pemU6ZnVuY3Rpb24oZSl7dmFyIHQ9W107dGhpcy5fY3VycmVudD0wO2Zvcih2YXIgcixuLGk7dGhpcy5fY3VycmVudDxlLmxlbmd0aDspaWYocyhlW3RoaXMuX2N1cnJlbnRdKSlyPXRoaXMuX2N1cnJlbnQsbj10aGlzLl9jb25zdW1lVW5xdW90ZWRJZGVudGlmaWVyKGUpLHQucHVzaCh7dHlwZTpcIlVucXVvdGVkSWRlbnRpZmllclwiLHZhbHVlOm4sc3RhcnQ6cn0pO2Vsc2UgaWYodm9pZCAwIT09UltlW3RoaXMuX2N1cnJlbnRdXSl0LnB1c2goe3R5cGU6UltlW3RoaXMuX2N1cnJlbnRdXSx2YWx1ZTplW3RoaXMuX2N1cnJlbnRdLHN0YXJ0OnRoaXMuX2N1cnJlbnR9KSx0aGlzLl9jdXJyZW50Kys7ZWxzZSBpZihhKGVbdGhpcy5fY3VycmVudF0pKWk9dGhpcy5fY29uc3VtZU51bWJlcihlKSx0LnB1c2goaSk7ZWxzZSBpZihcIltcIj09PWVbdGhpcy5fY3VycmVudF0paT10aGlzLl9jb25zdW1lTEJyYWNrZXQoZSksdC5wdXNoKGkpO2Vsc2UgaWYoJ1wiJz09PWVbdGhpcy5fY3VycmVudF0pcj10aGlzLl9jdXJyZW50LG49dGhpcy5fY29uc3VtZVF1b3RlZElkZW50aWZpZXIoZSksdC5wdXNoKHt0eXBlOlwiUXVvdGVkSWRlbnRpZmllclwiLHZhbHVlOm4sc3RhcnQ6cn0pO2Vsc2UgaWYoXCInXCI9PT1lW3RoaXMuX2N1cnJlbnRdKXI9dGhpcy5fY3VycmVudCxuPXRoaXMuX2NvbnN1bWVSYXdTdHJpbmdMaXRlcmFsKGUpLHQucHVzaCh7dHlwZTpcIkxpdGVyYWxcIix2YWx1ZTpuLHN0YXJ0OnJ9KTtlbHNlIGlmKFwiYFwiPT09ZVt0aGlzLl9jdXJyZW50XSl7cj10aGlzLl9jdXJyZW50O3ZhciBvPXRoaXMuX2NvbnN1bWVMaXRlcmFsKGUpO3QucHVzaCh7dHlwZTpcIkxpdGVyYWxcIix2YWx1ZTpvLHN0YXJ0OnJ9KX1lbHNlIGlmKHZvaWQgMCE9PUFbZVt0aGlzLl9jdXJyZW50XV0pdC5wdXNoKHRoaXMuX2NvbnN1bWVPcGVyYXRvcihlKSk7ZWxzZSBpZih2b2lkIDAhPT14W2VbdGhpcy5fY3VycmVudF1dKXRoaXMuX2N1cnJlbnQrKztlbHNlIGlmKFwiJlwiPT09ZVt0aGlzLl9jdXJyZW50XSlyPXRoaXMuX2N1cnJlbnQsdGhpcy5fY3VycmVudCsrLFwiJlwiPT09ZVt0aGlzLl9jdXJyZW50XT8odGhpcy5fY3VycmVudCsrLHQucHVzaCh7dHlwZTpcIkFuZFwiLHZhbHVlOlwiJiZcIixzdGFydDpyfSkpOnQucHVzaCh7dHlwZTpcIkV4cHJlZlwiLHZhbHVlOlwiJlwiLHN0YXJ0OnJ9KTtlbHNle2lmKFwifFwiIT09ZVt0aGlzLl9jdXJyZW50XSl7dmFyIHU9bmV3IEVycm9yKFwiVW5rbm93biBjaGFyYWN0ZXI6XCIrZVt0aGlzLl9jdXJyZW50XSk7dGhyb3cgdS5uYW1lPVwiTGV4ZXJFcnJvclwiLHV9cj10aGlzLl9jdXJyZW50LHRoaXMuX2N1cnJlbnQrKyxcInxcIj09PWVbdGhpcy5fY3VycmVudF0/KHRoaXMuX2N1cnJlbnQrKyx0LnB1c2goe3R5cGU6XCJPclwiLHZhbHVlOlwifHxcIixzdGFydDpyfSkpOnQucHVzaCh7dHlwZTpcIlBpcGVcIix2YWx1ZTpcInxcIixzdGFydDpyfSl9cmV0dXJuIHR9LF9jb25zdW1lVW5xdW90ZWRJZGVudGlmaWVyOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2N1cnJlbnQ7Zm9yKHRoaXMuX2N1cnJlbnQrKzt0aGlzLl9jdXJyZW50PGUubGVuZ3RoJiZ1KGVbdGhpcy5fY3VycmVudF0pOyl0aGlzLl9jdXJyZW50Kys7cmV0dXJuIGUuc2xpY2UodCx0aGlzLl9jdXJyZW50KX0sX2NvbnN1bWVRdW90ZWRJZGVudGlmaWVyOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2N1cnJlbnQ7dGhpcy5fY3VycmVudCsrO2Zvcih2YXIgcj1lLmxlbmd0aDsnXCInIT09ZVt0aGlzLl9jdXJyZW50XSYmdGhpcy5fY3VycmVudDxyOyl7dmFyIG49dGhpcy5fY3VycmVudDtcIlxcXFxcIiE9PWVbbl18fFwiXFxcXFwiIT09ZVtuKzFdJiYnXCInIT09ZVtuKzFdP24rKzpuKz0yLHRoaXMuX2N1cnJlbnQ9bn1yZXR1cm4gdGhpcy5fY3VycmVudCsrLEpTT04ucGFyc2UoZS5zbGljZSh0LHRoaXMuX2N1cnJlbnQpKX0sX2NvbnN1bWVSYXdTdHJpbmdMaXRlcmFsOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2N1cnJlbnQ7dGhpcy5fY3VycmVudCsrO2Zvcih2YXIgcj1lLmxlbmd0aDtcIidcIiE9PWVbdGhpcy5fY3VycmVudF0mJnRoaXMuX2N1cnJlbnQ8cjspe3ZhciBuPXRoaXMuX2N1cnJlbnQ7XCJcXFxcXCIhPT1lW25dfHxcIlxcXFxcIiE9PWVbbisxXSYmXCInXCIhPT1lW24rMV0/bisrOm4rPTIsdGhpcy5fY3VycmVudD1ufXJldHVybiB0aGlzLl9jdXJyZW50KyssZS5zbGljZSh0KzEsdGhpcy5fY3VycmVudC0xKS5yZXBsYWNlKFwiXFxcXCdcIixcIidcIil9LF9jb25zdW1lTnVtYmVyOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2N1cnJlbnQ7dGhpcy5fY3VycmVudCsrO2Zvcih2YXIgcj1lLmxlbmd0aDthKGVbdGhpcy5fY3VycmVudF0pJiZ0aGlzLl9jdXJyZW50PHI7KXRoaXMuX2N1cnJlbnQrKztyZXR1cm57dHlwZTpcIk51bWJlclwiLHZhbHVlOnBhcnNlSW50KGUuc2xpY2UodCx0aGlzLl9jdXJyZW50KSksc3RhcnQ6dH19LF9jb25zdW1lTEJyYWNrZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fY3VycmVudDtyZXR1cm4gdGhpcy5fY3VycmVudCsrLFwiP1wiPT09ZVt0aGlzLl9jdXJyZW50XT8odGhpcy5fY3VycmVudCsrLHt0eXBlOlwiRmlsdGVyXCIsdmFsdWU6XCJbP1wiLHN0YXJ0OnR9KTpcIl1cIj09PWVbdGhpcy5fY3VycmVudF0/KHRoaXMuX2N1cnJlbnQrKyx7dHlwZTpcIkZsYXR0ZW5cIix2YWx1ZTpcIltdXCIsc3RhcnQ6dH0pOnt0eXBlOlwiTGJyYWNrZXRcIix2YWx1ZTpcIltcIixzdGFydDp0fX0sX2NvbnN1bWVPcGVyYXRvcjpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl9jdXJyZW50LHI9ZVt0XTtyZXR1cm4gdGhpcy5fY3VycmVudCsrLFwiIVwiPT09cj9cIj1cIj09PWVbdGhpcy5fY3VycmVudF0/KHRoaXMuX2N1cnJlbnQrKyx7dHlwZTpcIk5FXCIsdmFsdWU6XCIhPVwiLHN0YXJ0OnR9KTp7dHlwZTpcIk5vdFwiLHZhbHVlOlwiIVwiLHN0YXJ0OnR9OlwiPFwiPT09cj9cIj1cIj09PWVbdGhpcy5fY3VycmVudF0/KHRoaXMuX2N1cnJlbnQrKyx7dHlwZTpcIkxURVwiLHZhbHVlOlwiPD1cIixzdGFydDp0fSk6e3R5cGU6XCJMVFwiLHZhbHVlOlwiPFwiLHN0YXJ0OnR9OlwiPlwiPT09cj9cIj1cIj09PWVbdGhpcy5fY3VycmVudF0/KHRoaXMuX2N1cnJlbnQrKyx7dHlwZTpcIkdURVwiLHZhbHVlOlwiPj1cIixzdGFydDp0fSk6e3R5cGU6XCJHVFwiLHZhbHVlOlwiPlwiLHN0YXJ0OnR9OlwiPVwiPT09ciYmXCI9XCI9PT1lW3RoaXMuX2N1cnJlbnRdPyh0aGlzLl9jdXJyZW50Kysse3R5cGU6XCJFUVwiLHZhbHVlOlwiPT1cIixzdGFydDp0fSk6dm9pZCAwfSxfY29uc3VtZUxpdGVyYWw6ZnVuY3Rpb24oZSl7dGhpcy5fY3VycmVudCsrO2Zvcih2YXIgdCxyPXRoaXMuX2N1cnJlbnQsbj1lLmxlbmd0aDtcImBcIiE9PWVbdGhpcy5fY3VycmVudF0mJnRoaXMuX2N1cnJlbnQ8bjspe3ZhciBpPXRoaXMuX2N1cnJlbnQ7XCJcXFxcXCIhPT1lW2ldfHxcIlxcXFxcIiE9PWVbaSsxXSYmXCJgXCIhPT1lW2krMV0/aSsrOmkrPTIsdGhpcy5fY3VycmVudD1pfXZhciBvPXYoZS5zbGljZShyLHRoaXMuX2N1cnJlbnQpKTtyZXR1cm4gbz1vLnJlcGxhY2UoXCJcXFxcYFwiLFwiYFwiKSx0PXRoaXMuX2xvb2tzTGlrZUpTT04obyk/SlNPTi5wYXJzZShvKTpKU09OLnBhcnNlKCdcIicrbysnXCInKSx0aGlzLl9jdXJyZW50KyssdH0sX2xvb2tzTGlrZUpTT046ZnVuY3Rpb24oZSl7dmFyIHQ9J1t7XCInLHI9W1widHJ1ZVwiLFwiZmFsc2VcIixcIm51bGxcIl0sbj1cIi0wMTIzNDU2Nzg5XCI7aWYoXCJcIj09PWUpcmV0dXJuITE7aWYodC5pbmRleE9mKGVbMF0pPj0wKXJldHVybiEwO2lmKHIuaW5kZXhPZihlKT49MClyZXR1cm4hMDtpZighKG4uaW5kZXhPZihlWzBdKT49MCkpcmV0dXJuITE7dHJ5e3JldHVybiBKU09OLnBhcnNlKGUpLCEwfWNhdGNoKGUpe3JldHVybiExfX19O3ZhciBUPXt9O1QuRU9GPTAsVC5VbnF1b3RlZElkZW50aWZpZXI9MCxULlF1b3RlZElkZW50aWZpZXI9MCxULlJicmFja2V0PTAsVC5ScGFyZW49MCxULkNvbW1hPTAsVC5SYnJhY2U9MCxULk51bWJlcj0wLFQuQ3VycmVudD0wLFQuRXhwcmVmPTAsVC5QaXBlPTEsVC5Pcj0yLFQuQW5kPTMsVC5FUT01LFQuR1Q9NSxULkxUPTUsVC5HVEU9NSxULkxURT01LFQuTkU9NSxULkZsYXR0ZW49OSxULlN0YXI9MjAsVC5GaWx0ZXI9MjEsVC5Eb3Q9NDAsVC5Ob3Q9NDUsVC5MYnJhY2U9NTAsVC5MYnJhY2tldD01NSxULkxwYXJlbj02MCxsLnByb3RvdHlwZT17cGFyc2U6ZnVuY3Rpb24oZSl7dGhpcy5fbG9hZFRva2VucyhlKSx0aGlzLmluZGV4PTA7dmFyIHQ9dGhpcy5leHByZXNzaW9uKDApO2lmKFwiRU9GXCIhPT10aGlzLl9sb29rYWhlYWQoMCkpe3ZhciByPXRoaXMuX2xvb2thaGVhZFRva2VuKDApLG49bmV3IEVycm9yKFwiVW5leHBlY3RlZCB0b2tlbiB0eXBlOiBcIityLnR5cGUrXCIsIHZhbHVlOiBcIityLnZhbHVlKTt0aHJvdyBuLm5hbWU9XCJQYXJzZXJFcnJvclwiLG59cmV0dXJuIHR9LF9sb2FkVG9rZW5zOmZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBjLHI9dC50b2tlbml6ZShlKTtyLnB1c2goe3R5cGU6XCJFT0ZcIix2YWx1ZTpcIlwiLHN0YXJ0OmUubGVuZ3RofSksdGhpcy50b2tlbnM9cn0sZXhwcmVzc2lvbjpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl9sb29rYWhlYWRUb2tlbigwKTt0aGlzLl9hZHZhbmNlKCk7Zm9yKHZhciByPXRoaXMubnVkKHQpLG49dGhpcy5fbG9va2FoZWFkKDApO2U8VFtuXTspdGhpcy5fYWR2YW5jZSgpLHI9dGhpcy5sZWQobixyKSxuPXRoaXMuX2xvb2thaGVhZCgwKTtyZXR1cm4gcn0sX2xvb2thaGVhZDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy50b2tlbnNbdGhpcy5pbmRleCtlXS50eXBlfSxfbG9va2FoZWFkVG9rZW46ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMudG9rZW5zW3RoaXMuaW5kZXgrZV19LF9hZHZhbmNlOmZ1bmN0aW9uKCl7dGhpcy5pbmRleCsrfSxudWQ6ZnVuY3Rpb24oZSl7dmFyIHQscixuO3N3aXRjaChlLnR5cGUpe2Nhc2VcIkxpdGVyYWxcIjpyZXR1cm57dHlwZTpcIkxpdGVyYWxcIix2YWx1ZTplLnZhbHVlfTtjYXNlXCJVbnF1b3RlZElkZW50aWZpZXJcIjpyZXR1cm57dHlwZTpcIkZpZWxkXCIsbmFtZTplLnZhbHVlfTtjYXNlXCJRdW90ZWRJZGVudGlmaWVyXCI6dmFyIGk9e3R5cGU6XCJGaWVsZFwiLG5hbWU6ZS52YWx1ZX07aWYoXCJMcGFyZW5cIj09PXRoaXMuX2xvb2thaGVhZCgwKSl0aHJvdyBuZXcgRXJyb3IoXCJRdW90ZWQgaWRlbnRpZmllciBub3QgYWxsb3dlZCBmb3IgZnVuY3Rpb24gbmFtZXMuXCIpO3JldHVybiBpO2Nhc2VcIk5vdFwiOnJldHVybiByPXRoaXMuZXhwcmVzc2lvbihULk5vdCkse3R5cGU6XCJOb3RFeHByZXNzaW9uXCIsY2hpbGRyZW46W3JdfTtjYXNlXCJTdGFyXCI6cmV0dXJuIHQ9e3R5cGU6XCJJZGVudGl0eVwifSxyPW51bGwscj1cIlJicmFja2V0XCI9PT10aGlzLl9sb29rYWhlYWQoMCk/e3R5cGU6XCJJZGVudGl0eVwifTp0aGlzLl9wYXJzZVByb2plY3Rpb25SSFMoVC5TdGFyKSx7dHlwZTpcIlZhbHVlUHJvamVjdGlvblwiLGNoaWxkcmVuOlt0LHJdfTtjYXNlXCJGaWx0ZXJcIjpyZXR1cm4gdGhpcy5sZWQoZS50eXBlLHt0eXBlOlwiSWRlbnRpdHlcIn0pO2Nhc2VcIkxicmFjZVwiOnJldHVybiB0aGlzLl9wYXJzZU11bHRpc2VsZWN0SGFzaCgpO2Nhc2VcIkZsYXR0ZW5cIjpyZXR1cm4gdD17dHlwZTpcIkZsYXR0ZW5cIixjaGlsZHJlbjpbe3R5cGU6XCJJZGVudGl0eVwifV19LHI9dGhpcy5fcGFyc2VQcm9qZWN0aW9uUkhTKFQuRmxhdHRlbikse3R5cGU6XCJQcm9qZWN0aW9uXCIsY2hpbGRyZW46W3Qscl19O2Nhc2VcIkxicmFja2V0XCI6cmV0dXJuXCJOdW1iZXJcIj09PXRoaXMuX2xvb2thaGVhZCgwKXx8XCJDb2xvblwiPT09dGhpcy5fbG9va2FoZWFkKDApPyhyPXRoaXMuX3BhcnNlSW5kZXhFeHByZXNzaW9uKCksdGhpcy5fcHJvamVjdElmU2xpY2Uoe3R5cGU6XCJJZGVudGl0eVwifSxyKSk6XCJTdGFyXCI9PT10aGlzLl9sb29rYWhlYWQoMCkmJlwiUmJyYWNrZXRcIj09PXRoaXMuX2xvb2thaGVhZCgxKT8odGhpcy5fYWR2YW5jZSgpLHRoaXMuX2FkdmFuY2UoKSxyPXRoaXMuX3BhcnNlUHJvamVjdGlvblJIUyhULlN0YXIpLHt0eXBlOlwiUHJvamVjdGlvblwiLGNoaWxkcmVuOlt7dHlwZTpcIklkZW50aXR5XCJ9LHJdfSk6dGhpcy5fcGFyc2VNdWx0aXNlbGVjdExpc3QoKTtjYXNlXCJDdXJyZW50XCI6cmV0dXJue3R5cGU6XCJDdXJyZW50XCJ9O2Nhc2VcIkV4cHJlZlwiOnJldHVybiBuPXRoaXMuZXhwcmVzc2lvbihULkV4cHJlZikse3R5cGU6XCJFeHByZXNzaW9uUmVmZXJlbmNlXCIsY2hpbGRyZW46W25dfTtjYXNlXCJMcGFyZW5cIjpmb3IodmFyIG89W107XCJScGFyZW5cIiE9PXRoaXMuX2xvb2thaGVhZCgwKTspXCJDdXJyZW50XCI9PT10aGlzLl9sb29rYWhlYWQoMCk/KG49e3R5cGU6XCJDdXJyZW50XCJ9LHRoaXMuX2FkdmFuY2UoKSk6bj10aGlzLmV4cHJlc3Npb24oMCksby5wdXNoKG4pO3JldHVybiB0aGlzLl9tYXRjaChcIlJwYXJlblwiKSxvWzBdO2RlZmF1bHQ6dGhpcy5fZXJyb3JUb2tlbihlKX19LGxlZDpmdW5jdGlvbihlLHQpe3ZhciByO3N3aXRjaChlKXtjYXNlXCJEb3RcIjp2YXIgbj1ULkRvdDtyZXR1cm5cIlN0YXJcIiE9PXRoaXMuX2xvb2thaGVhZCgwKT8ocj10aGlzLl9wYXJzZURvdFJIUyhuKSx7dHlwZTpcIlN1YmV4cHJlc3Npb25cIixjaGlsZHJlbjpbdCxyXX0pOih0aGlzLl9hZHZhbmNlKCkscj10aGlzLl9wYXJzZVByb2plY3Rpb25SSFMobikse3R5cGU6XCJWYWx1ZVByb2plY3Rpb25cIixjaGlsZHJlbjpbdCxyXX0pO2Nhc2VcIlBpcGVcIjpyZXR1cm4gcj10aGlzLmV4cHJlc3Npb24oVC5QaXBlKSx7dHlwZTpcIlBpcGVcIixjaGlsZHJlbjpbdCxyXX07Y2FzZVwiT3JcIjpyZXR1cm4gcj10aGlzLmV4cHJlc3Npb24oVC5Pcikse3R5cGU6XCJPckV4cHJlc3Npb25cIixjaGlsZHJlbjpbdCxyXX07Y2FzZVwiQW5kXCI6cmV0dXJuIHI9dGhpcy5leHByZXNzaW9uKFQuQW5kKSx7dHlwZTpcIkFuZEV4cHJlc3Npb25cIixjaGlsZHJlbjpbdCxyXX07Y2FzZVwiTHBhcmVuXCI6Zm9yKHZhciBpLG89dC5uYW1lLHM9W107XCJScGFyZW5cIiE9PXRoaXMuX2xvb2thaGVhZCgwKTspXCJDdXJyZW50XCI9PT10aGlzLl9sb29rYWhlYWQoMCk/KGk9e3R5cGU6XCJDdXJyZW50XCJ9LHRoaXMuX2FkdmFuY2UoKSk6aT10aGlzLmV4cHJlc3Npb24oMCksXCJDb21tYVwiPT09dGhpcy5fbG9va2FoZWFkKDApJiZ0aGlzLl9tYXRjaChcIkNvbW1hXCIpLHMucHVzaChpKTtyZXR1cm4gdGhpcy5fbWF0Y2goXCJScGFyZW5cIikse3R5cGU6XCJGdW5jdGlvblwiLG5hbWU6byxjaGlsZHJlbjpzfTtjYXNlXCJGaWx0ZXJcIjp2YXIgYT10aGlzLmV4cHJlc3Npb24oMCk7cmV0dXJuIHRoaXMuX21hdGNoKFwiUmJyYWNrZXRcIikscj1cIkZsYXR0ZW5cIj09PXRoaXMuX2xvb2thaGVhZCgwKT97dHlwZTpcIklkZW50aXR5XCJ9OnRoaXMuX3BhcnNlUHJvamVjdGlvblJIUyhULkZpbHRlcikse3R5cGU6XCJGaWx0ZXJQcm9qZWN0aW9uXCIsY2hpbGRyZW46W3QscixhXX07Y2FzZVwiRmxhdHRlblwiOnJldHVybnt0eXBlOlwiUHJvamVjdGlvblwiLGNoaWxkcmVuOlt7dHlwZTpcIkZsYXR0ZW5cIixjaGlsZHJlbjpbdF19LHRoaXMuX3BhcnNlUHJvamVjdGlvblJIUyhULkZsYXR0ZW4pXX07Y2FzZVwiRVFcIjpjYXNlXCJORVwiOmNhc2VcIkdUXCI6Y2FzZVwiR1RFXCI6Y2FzZVwiTFRcIjpjYXNlXCJMVEVcIjpyZXR1cm4gdGhpcy5fcGFyc2VDb21wYXJhdG9yKHQsZSk7Y2FzZVwiTGJyYWNrZXRcIjp2YXIgdT10aGlzLl9sb29rYWhlYWRUb2tlbigwKTtyZXR1cm5cIk51bWJlclwiPT09dS50eXBlfHxcIkNvbG9uXCI9PT11LnR5cGU/KHI9dGhpcy5fcGFyc2VJbmRleEV4cHJlc3Npb24oKSx0aGlzLl9wcm9qZWN0SWZTbGljZSh0LHIpKToodGhpcy5fbWF0Y2goXCJTdGFyXCIpLHRoaXMuX21hdGNoKFwiUmJyYWNrZXRcIikscj10aGlzLl9wYXJzZVByb2plY3Rpb25SSFMoVC5TdGFyKSx7dHlwZTpcIlByb2plY3Rpb25cIixjaGlsZHJlbjpbdCxyXX0pO2RlZmF1bHQ6dGhpcy5fZXJyb3JUb2tlbih0aGlzLl9sb29rYWhlYWRUb2tlbigwKSl9fSxfbWF0Y2g6ZnVuY3Rpb24oZSl7aWYodGhpcy5fbG9va2FoZWFkKDApIT09ZSl7dmFyIHQ9dGhpcy5fbG9va2FoZWFkVG9rZW4oMCkscj1uZXcgRXJyb3IoXCJFeHBlY3RlZCBcIitlK1wiLCBnb3Q6IFwiK3QudHlwZSk7dGhyb3cgci5uYW1lPVwiUGFyc2VyRXJyb3JcIixyfXRoaXMuX2FkdmFuY2UoKX0sX2Vycm9yVG9rZW46ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IEVycm9yKFwiSW52YWxpZCB0b2tlbiAoXCIrZS50eXBlKycpOiBcIicrZS52YWx1ZSsnXCInKTt0aHJvdyB0Lm5hbWU9XCJQYXJzZXJFcnJvclwiLHR9LF9wYXJzZUluZGV4RXhwcmVzc2lvbjpmdW5jdGlvbigpe2lmKFwiQ29sb25cIj09PXRoaXMuX2xvb2thaGVhZCgwKXx8XCJDb2xvblwiPT09dGhpcy5fbG9va2FoZWFkKDEpKXJldHVybiB0aGlzLl9wYXJzZVNsaWNlRXhwcmVzc2lvbigpO3ZhciBlPXt0eXBlOlwiSW5kZXhcIix2YWx1ZTp0aGlzLl9sb29rYWhlYWRUb2tlbigwKS52YWx1ZX07cmV0dXJuIHRoaXMuX2FkdmFuY2UoKSx0aGlzLl9tYXRjaChcIlJicmFja2V0XCIpLGV9LF9wcm9qZWN0SWZTbGljZTpmdW5jdGlvbihlLHQpe3ZhciByPXt0eXBlOlwiSW5kZXhFeHByZXNzaW9uXCIsY2hpbGRyZW46W2UsdF19O3JldHVyblwiU2xpY2VcIj09PXQudHlwZT97dHlwZTpcIlByb2plY3Rpb25cIixjaGlsZHJlbjpbcix0aGlzLl9wYXJzZVByb2plY3Rpb25SSFMoVC5TdGFyKV19OnJ9LF9wYXJzZVNsaWNlRXhwcmVzc2lvbjpmdW5jdGlvbigpe2Zvcih2YXIgZT1bbnVsbCxudWxsLG51bGxdLHQ9MCxyPXRoaXMuX2xvb2thaGVhZCgwKTtcIlJicmFja2V0XCIhPT1yJiZ0PDM7KXtpZihcIkNvbG9uXCI9PT1yKXQrKyx0aGlzLl9hZHZhbmNlKCk7ZWxzZXtpZihcIk51bWJlclwiIT09cil7dmFyIG49dGhpcy5fbG9va2FoZWFkKDApLGk9bmV3IEVycm9yKFwiU3ludGF4IGVycm9yLCB1bmV4cGVjdGVkIHRva2VuOiBcIituLnZhbHVlK1wiKFwiK24udHlwZStcIilcIik7dGhyb3cgaS5uYW1lPVwiUGFyc2VyZXJyb3JcIixpfWVbdF09dGhpcy5fbG9va2FoZWFkVG9rZW4oMCkudmFsdWUsdGhpcy5fYWR2YW5jZSgpfXI9dGhpcy5fbG9va2FoZWFkKDApfXJldHVybiB0aGlzLl9tYXRjaChcIlJicmFja2V0XCIpLHt0eXBlOlwiU2xpY2VcIixjaGlsZHJlbjplfX0sX3BhcnNlQ29tcGFyYXRvcjpmdW5jdGlvbihlLHQpe3JldHVybnt0eXBlOlwiQ29tcGFyYXRvclwiLG5hbWU6dCxjaGlsZHJlbjpbZSx0aGlzLmV4cHJlc3Npb24oVFt0XSldfX0sX3BhcnNlRG90UkhTOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2xvb2thaGVhZCgwKTtyZXR1cm5bXCJVbnF1b3RlZElkZW50aWZpZXJcIixcIlF1b3RlZElkZW50aWZpZXJcIixcIlN0YXJcIl0uaW5kZXhPZih0KT49MD90aGlzLmV4cHJlc3Npb24oZSk6XCJMYnJhY2tldFwiPT09dD8odGhpcy5fbWF0Y2goXCJMYnJhY2tldFwiKSx0aGlzLl9wYXJzZU11bHRpc2VsZWN0TGlzdCgpKTpcIkxicmFjZVwiPT09dD8odGhpcy5fbWF0Y2goXCJMYnJhY2VcIiksdGhpcy5fcGFyc2VNdWx0aXNlbGVjdEhhc2goKSk6dm9pZCAwfSxfcGFyc2VQcm9qZWN0aW9uUkhTOmZ1bmN0aW9uKGUpe3ZhciB0O2lmKFRbdGhpcy5fbG9va2FoZWFkKDApXTwxMCl0PXt0eXBlOlwiSWRlbnRpdHlcIn07ZWxzZSBpZihcIkxicmFja2V0XCI9PT10aGlzLl9sb29rYWhlYWQoMCkpdD10aGlzLmV4cHJlc3Npb24oZSk7ZWxzZSBpZihcIkZpbHRlclwiPT09dGhpcy5fbG9va2FoZWFkKDApKXQ9dGhpcy5leHByZXNzaW9uKGUpO2Vsc2V7aWYoXCJEb3RcIiE9PXRoaXMuX2xvb2thaGVhZCgwKSl7dmFyIHI9dGhpcy5fbG9va2FoZWFkVG9rZW4oMCksbj1uZXcgRXJyb3IoXCJTeXRhbnggZXJyb3IsIHVuZXhwZWN0ZWQgdG9rZW46IFwiK3IudmFsdWUrXCIoXCIrci50eXBlK1wiKVwiKTt0aHJvdyBuLm5hbWU9XCJQYXJzZXJFcnJvclwiLG59dGhpcy5fbWF0Y2goXCJEb3RcIiksdD10aGlzLl9wYXJzZURvdFJIUyhlKX1yZXR1cm4gdH0sX3BhcnNlTXVsdGlzZWxlY3RMaXN0OmZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdO1wiUmJyYWNrZXRcIiE9PXRoaXMuX2xvb2thaGVhZCgwKTspe3ZhciB0PXRoaXMuZXhwcmVzc2lvbigwKTtpZihlLnB1c2godCksXCJDb21tYVwiPT09dGhpcy5fbG9va2FoZWFkKDApJiYodGhpcy5fbWF0Y2goXCJDb21tYVwiKSxcIlJicmFja2V0XCI9PT10aGlzLl9sb29rYWhlYWQoMCkpKXRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgdG9rZW4gUmJyYWNrZXRcIil9cmV0dXJuIHRoaXMuX21hdGNoKFwiUmJyYWNrZXRcIikse3R5cGU6XCJNdWx0aVNlbGVjdExpc3RcIixjaGlsZHJlbjplfX0sX3BhcnNlTXVsdGlzZWxlY3RIYXNoOmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQscixuLGk9W10sbz1bXCJVbnF1b3RlZElkZW50aWZpZXJcIixcIlF1b3RlZElkZW50aWZpZXJcIl07Oyl7aWYoZT10aGlzLl9sb29rYWhlYWRUb2tlbigwKSxvLmluZGV4T2YoZS50eXBlKTwwKXRocm93IG5ldyBFcnJvcihcIkV4cGVjdGluZyBhbiBpZGVudGlmaWVyIHRva2VuLCBnb3Q6IFwiK2UudHlwZSk7aWYodD1lLnZhbHVlLHRoaXMuX2FkdmFuY2UoKSx0aGlzLl9tYXRjaChcIkNvbG9uXCIpLHI9dGhpcy5leHByZXNzaW9uKDApLG49e3R5cGU6XCJLZXlWYWx1ZVBhaXJcIixuYW1lOnQsdmFsdWU6cn0saS5wdXNoKG4pLFwiQ29tbWFcIj09PXRoaXMuX2xvb2thaGVhZCgwKSl0aGlzLl9tYXRjaChcIkNvbW1hXCIpO2Vsc2UgaWYoXCJSYnJhY2VcIj09PXRoaXMuX2xvb2thaGVhZCgwKSl7dGhpcy5fbWF0Y2goXCJSYnJhY2VcIik7YnJlYWt9fXJldHVybnt0eXBlOlwiTXVsdGlTZWxlY3RIYXNoXCIsY2hpbGRyZW46aX19fSxwLnByb3RvdHlwZT17c2VhcmNoOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMudmlzaXQoZSx0KX0sdmlzaXQ6ZnVuY3Rpb24oZSxzKXt2YXIgYSx1LGMsbCxwLGgsZixkLG07c3dpdGNoKGUudHlwZSl7Y2FzZVwiRmllbGRcIjpyZXR1cm4gbnVsbD09PXM/bnVsbDpyKHMpPyhoPXNbZS5uYW1lXSx2b2lkIDA9PT1oP251bGw6aCk6bnVsbDtjYXNlXCJTdWJleHByZXNzaW9uXCI6Zm9yKGM9dGhpcy52aXNpdChlLmNoaWxkcmVuWzBdLHMpLG09MTttPGUuY2hpbGRyZW4ubGVuZ3RoO20rKylpZihudWxsPT09KGM9dGhpcy52aXNpdChlLmNoaWxkcmVuWzFdLGMpKSlyZXR1cm4gbnVsbDtyZXR1cm4gYztjYXNlXCJJbmRleEV4cHJlc3Npb25cIjpyZXR1cm4gZj10aGlzLnZpc2l0KGUuY2hpbGRyZW5bMF0scyksdGhpcy52aXNpdChlLmNoaWxkcmVuWzFdLGYpO2Nhc2VcIkluZGV4XCI6aWYoIXQocykpcmV0dXJuIG51bGw7dmFyIHY9ZS52YWx1ZTtyZXR1cm4gdjwwJiYodj1zLmxlbmd0aCt2KSxjPXNbdl0sdm9pZCAwPT09YyYmKGM9bnVsbCksYztjYXNlXCJTbGljZVwiOmlmKCF0KHMpKXJldHVybiBudWxsO3ZhciB5PWUuY2hpbGRyZW4uc2xpY2UoMCksZz10aGlzLmNvbXB1dGVTbGljZVBhcmFtcyhzLmxlbmd0aCx5KSxiPWdbMF0sdz1nWzFdLEU9Z1syXTtpZihjPVtdLEU+MClmb3IobT1iO208dzttKz1FKWMucHVzaChzW21dKTtlbHNlIGZvcihtPWI7bT53O20rPUUpYy5wdXNoKHNbbV0pO3JldHVybiBjO2Nhc2VcIlByb2plY3Rpb25cIjp2YXIgUz10aGlzLnZpc2l0KGUuY2hpbGRyZW5bMF0scyk7aWYoIXQoUykpcmV0dXJuIG51bGw7Zm9yKGQ9W10sbT0wO208Uy5sZW5ndGg7bSsrKW51bGwhPT0odT10aGlzLnZpc2l0KGUuY2hpbGRyZW5bMV0sU1ttXSkpJiZkLnB1c2godSk7cmV0dXJuIGQ7Y2FzZVwiVmFsdWVQcm9qZWN0aW9uXCI6aWYoUz10aGlzLnZpc2l0KGUuY2hpbGRyZW5bMF0scyksIXIoUykpcmV0dXJuIG51bGw7ZD1bXTt2YXIgXz1vKFMpO2ZvcihtPTA7bTxfLmxlbmd0aDttKyspbnVsbCE9PSh1PXRoaXMudmlzaXQoZS5jaGlsZHJlblsxXSxfW21dKSkmJmQucHVzaCh1KTtyZXR1cm4gZDtjYXNlXCJGaWx0ZXJQcm9qZWN0aW9uXCI6aWYoUz10aGlzLnZpc2l0KGUuY2hpbGRyZW5bMF0scyksIXQoUykpcmV0dXJuIG51bGw7dmFyIEM9W10sUj1bXTtmb3IobT0wO208Uy5sZW5ndGg7bSsrKWE9dGhpcy52aXNpdChlLmNoaWxkcmVuWzJdLFNbbV0pLGkoYSl8fEMucHVzaChTW21dKTtmb3IodmFyIEE9MDtBPEMubGVuZ3RoO0ErKyludWxsIT09KHU9dGhpcy52aXNpdChlLmNoaWxkcmVuWzFdLENbQV0pKSYmUi5wdXNoKHUpO3JldHVybiBSO2Nhc2VcIkNvbXBhcmF0b3JcIjpzd2l0Y2gobD10aGlzLnZpc2l0KGUuY2hpbGRyZW5bMF0scykscD10aGlzLnZpc2l0KGUuY2hpbGRyZW5bMV0scyksZS5uYW1lKXtjYXNlXCJFUVwiOmM9bihsLHApO2JyZWFrO2Nhc2VcIk5FXCI6Yz0hbihsLHApO2JyZWFrO2Nhc2VcIkdUXCI6Yz1sPnA7YnJlYWs7Y2FzZVwiR1RFXCI6Yz1sPj1wO2JyZWFrO2Nhc2VcIkxUXCI6Yz1sPHA7YnJlYWs7Y2FzZVwiTFRFXCI6Yz1sPD1wO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBjb21wYXJhdG9yOiBcIitlLm5hbWUpfXJldHVybiBjO2Nhc2VcIkZsYXR0ZW5cIjp2YXIgeD10aGlzLnZpc2l0KGUuY2hpbGRyZW5bMF0scyk7aWYoIXQoeCkpcmV0dXJuIG51bGw7dmFyIFQ9W107Zm9yKG09MDttPHgubGVuZ3RoO20rKyl1PXhbbV0sdCh1KT9ULnB1c2guYXBwbHkoVCx1KTpULnB1c2godSk7cmV0dXJuIFQ7Y2FzZVwiSWRlbnRpdHlcIjpyZXR1cm4gcztjYXNlXCJNdWx0aVNlbGVjdExpc3RcIjppZihudWxsPT09cylyZXR1cm4gbnVsbDtmb3IoZD1bXSxtPTA7bTxlLmNoaWxkcmVuLmxlbmd0aDttKyspZC5wdXNoKHRoaXMudmlzaXQoZS5jaGlsZHJlblttXSxzKSk7cmV0dXJuIGQ7Y2FzZVwiTXVsdGlTZWxlY3RIYXNoXCI6aWYobnVsbD09PXMpcmV0dXJuIG51bGw7ZD17fTt2YXIgSTtmb3IobT0wO208ZS5jaGlsZHJlbi5sZW5ndGg7bSsrKUk9ZS5jaGlsZHJlblttXSxkW0kubmFtZV09dGhpcy52aXNpdChJLnZhbHVlLHMpO3JldHVybiBkO2Nhc2VcIk9yRXhwcmVzc2lvblwiOnJldHVybiBhPXRoaXMudmlzaXQoZS5jaGlsZHJlblswXSxzKSxpKGEpJiYoYT10aGlzLnZpc2l0KGUuY2hpbGRyZW5bMV0scykpLGE7Y2FzZVwiQW5kRXhwcmVzc2lvblwiOnJldHVybiBsPXRoaXMudmlzaXQoZS5jaGlsZHJlblswXSxzKSwhMD09PWkobCk/bDp0aGlzLnZpc2l0KGUuY2hpbGRyZW5bMV0scyk7Y2FzZVwiTm90RXhwcmVzc2lvblwiOnJldHVybiBsPXRoaXMudmlzaXQoZS5jaGlsZHJlblswXSxzKSxpKGwpO2Nhc2VcIkxpdGVyYWxcIjpyZXR1cm4gZS52YWx1ZTtjYXNlXCJQaXBlXCI6cmV0dXJuIGY9dGhpcy52aXNpdChlLmNoaWxkcmVuWzBdLHMpLHRoaXMudmlzaXQoZS5jaGlsZHJlblsxXSxmKTtjYXNlXCJDdXJyZW50XCI6cmV0dXJuIHM7Y2FzZVwiRnVuY3Rpb25cIjp2YXIgaz1bXTtmb3IobT0wO208ZS5jaGlsZHJlbi5sZW5ndGg7bSsrKWsucHVzaCh0aGlzLnZpc2l0KGUuY2hpbGRyZW5bbV0scykpO3JldHVybiB0aGlzLnJ1bnRpbWUuY2FsbEZ1bmN0aW9uKGUubmFtZSxrKTtjYXNlXCJFeHByZXNzaW9uUmVmZXJlbmNlXCI6dmFyIFA9ZS5jaGlsZHJlblswXTtyZXR1cm4gUC5qbWVzcGF0aFR5cGU9XCJFeHByZWZcIixQO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBub2RlIHR5cGU6IFwiK2UudHlwZSl9fSxjb21wdXRlU2xpY2VQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgcj10WzBdLG49dFsxXSxpPXRbMl0sbz1bbnVsbCxudWxsLG51bGxdO2lmKG51bGw9PT1pKWk9MTtlbHNlIGlmKDA9PT1pKXt2YXIgcz1uZXcgRXJyb3IoXCJJbnZhbGlkIHNsaWNlLCBzdGVwIGNhbm5vdCBiZSAwXCIpO3Rocm93IHMubmFtZT1cIlJ1bnRpbWVFcnJvclwiLHN9dmFyIGE9aTwwO3JldHVybiByPW51bGw9PT1yP2E/ZS0xOjA6dGhpcy5jYXBTbGljZVJhbmdlKGUscixpKSxuPW51bGw9PT1uP2E/LTE6ZTp0aGlzLmNhcFNsaWNlUmFuZ2UoZSxuLGkpLG9bMF09cixvWzFdPW4sb1syXT1pLG99LGNhcFNsaWNlUmFuZ2U6ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0PDA/KHQrPWUpPDAmJih0PXI8MD8tMTowKTp0Pj1lJiYodD1yPDA/ZS0xOmUpLHR9fSxoLnByb3RvdHlwZT17Y2FsbEZ1bmN0aW9uOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5mdW5jdGlvblRhYmxlW2VdO2lmKHZvaWQgMD09PXIpdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBmdW5jdGlvbjogXCIrZStcIigpXCIpO3JldHVybiB0aGlzLl92YWxpZGF0ZUFyZ3MoZSx0LHIuX3NpZ25hdHVyZSksci5fZnVuYy5jYWxsKHRoaXMsdCl9LF92YWxpZGF0ZUFyZ3M6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO2lmKHJbci5sZW5ndGgtMV0udmFyaWFkaWMpe2lmKHQubGVuZ3RoPHIubGVuZ3RoKXRocm93IG49MT09PXIubGVuZ3RoP1wiIGFyZ3VtZW50XCI6XCIgYXJndW1lbnRzXCIsbmV3IEVycm9yKFwiQXJndW1lbnRFcnJvcjogXCIrZStcIigpIHRha2VzIGF0IGxlYXN0XCIrci5sZW5ndGgrbitcIiBidXQgcmVjZWl2ZWQgXCIrdC5sZW5ndGgpfWVsc2UgaWYodC5sZW5ndGghPT1yLmxlbmd0aCl0aHJvdyBuPTE9PT1yLmxlbmd0aD9cIiBhcmd1bWVudFwiOlwiIGFyZ3VtZW50c1wiLG5ldyBFcnJvcihcIkFyZ3VtZW50RXJyb3I6IFwiK2UrXCIoKSB0YWtlcyBcIityLmxlbmd0aCtuK1wiIGJ1dCByZWNlaXZlZCBcIit0Lmxlbmd0aCk7Zm9yKHZhciBpLG8scyxhPTA7YTxyLmxlbmd0aDthKyspe3M9ITEsaT1yW2FdLnR5cGVzLG89dGhpcy5fZ2V0VHlwZU5hbWUodFthXSk7Zm9yKHZhciB1PTA7dTxpLmxlbmd0aDt1KyspaWYodGhpcy5fdHlwZU1hdGNoZXMobyxpW3VdLHRbYV0pKXtzPSEwO2JyZWFrfWlmKCFzKXRocm93IG5ldyBFcnJvcihcIlR5cGVFcnJvcjogXCIrZStcIigpIGV4cGVjdGVkIGFyZ3VtZW50IFwiKyhhKzEpK1wiIHRvIGJlIHR5cGUgXCIraStcIiBidXQgcmVjZWl2ZWQgdHlwZSBcIitvK1wiIGluc3RlYWQuXCIpfX0sX3R5cGVNYXRjaGVzOmZ1bmN0aW9uKGUsdCxyKXtpZih0PT09ZylyZXR1cm4hMDtpZih0IT09QyYmdCE9PV8mJnQhPT13KXJldHVybiBlPT09dDtpZih0PT09dylyZXR1cm4gZT09PXc7aWYoZT09PXcpe3ZhciBuO3Q9PT1fP249eTp0PT09QyYmKG49Yik7Zm9yKHZhciBpPTA7aTxyLmxlbmd0aDtpKyspaWYoIXRoaXMuX3R5cGVNYXRjaGVzKHRoaXMuX2dldFR5cGVOYW1lKHJbaV0pLG4scltpXSkpcmV0dXJuITE7cmV0dXJuITB9fSxfZ2V0VHlwZU5hbWU6ZnVuY3Rpb24oZSl7c3dpdGNoKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSl7Y2FzZVwiW29iamVjdCBTdHJpbmddXCI6cmV0dXJuIGI7Y2FzZVwiW29iamVjdCBOdW1iZXJdXCI6cmV0dXJuIHk7Y2FzZVwiW29iamVjdCBBcnJheV1cIjpyZXR1cm4gdztjYXNlXCJbb2JqZWN0IEJvb2xlYW5dXCI6cmV0dXJuIDU7Y2FzZVwiW29iamVjdCBOdWxsXVwiOnJldHVybiA3O2Nhc2VcIltvYmplY3QgT2JqZWN0XVwiOnJldHVyblwiRXhwcmVmXCI9PT1lLmptZXNwYXRoVHlwZT9TOkV9fSxfZnVuY3Rpb25TdGFydHNXaXRoOmZ1bmN0aW9uKGUpe3JldHVybiAwPT09ZVswXS5sYXN0SW5kZXhPZihlWzFdKX0sX2Z1bmN0aW9uRW5kc1dpdGg6ZnVuY3Rpb24oZSl7dmFyIHQ9ZVswXSxyPWVbMV07cmV0dXJuLTEhPT10LmluZGV4T2Yocix0Lmxlbmd0aC1yLmxlbmd0aCl9LF9mdW5jdGlvblJldmVyc2U6ZnVuY3Rpb24oZSl7aWYodGhpcy5fZ2V0VHlwZU5hbWUoZVswXSk9PT1iKXtmb3IodmFyIHQ9ZVswXSxyPVwiXCIsbj10Lmxlbmd0aC0xO24+PTA7bi0tKXIrPXRbbl07cmV0dXJuIHJ9dmFyIGk9ZVswXS5zbGljZSgwKTtyZXR1cm4gaS5yZXZlcnNlKCksaX0sX2Z1bmN0aW9uQWJzOmZ1bmN0aW9uKGUpe3JldHVybiBNYXRoLmFicyhlWzBdKX0sX2Z1bmN0aW9uQ2VpbDpmdW5jdGlvbihlKXtyZXR1cm4gTWF0aC5jZWlsKGVbMF0pfSxfZnVuY3Rpb25Bdmc6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAscj1lWzBdLG49MDtuPHIubGVuZ3RoO24rKyl0Kz1yW25dO3JldHVybiB0L3IubGVuZ3RofSxfZnVuY3Rpb25Db250YWluczpmdW5jdGlvbihlKXtyZXR1cm4gZVswXS5pbmRleE9mKGVbMV0pPj0wfSxfZnVuY3Rpb25GbG9vcjpmdW5jdGlvbihlKXtyZXR1cm4gTWF0aC5mbG9vcihlWzBdKX0sX2Z1bmN0aW9uTGVuZ3RoOmZ1bmN0aW9uKGUpe3JldHVybiByKGVbMF0pP09iamVjdC5rZXlzKGVbMF0pLmxlbmd0aDplWzBdLmxlbmd0aH0sX2Z1bmN0aW9uTWFwOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxyPXRoaXMuX2ludGVycHJldGVyLG49ZVswXSxpPWVbMV0sbz0wO288aS5sZW5ndGg7bysrKXQucHVzaChyLnZpc2l0KG4saVtvXSkpO3JldHVybiB0fSxfZnVuY3Rpb25NZXJnZTpmdW5jdGlvbihlKXtmb3IodmFyIHQ9e30scj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgbj1lW3JdO2Zvcih2YXIgaSBpbiBuKXRbaV09bltpXX1yZXR1cm4gdH0sX2Z1bmN0aW9uTWF4OmZ1bmN0aW9uKGUpe2lmKGVbMF0ubGVuZ3RoPjApe2lmKHRoaXMuX2dldFR5cGVOYW1lKGVbMF1bMF0pPT09eSlyZXR1cm4gTWF0aC5tYXguYXBwbHkoTWF0aCxlWzBdKTtmb3IodmFyIHQ9ZVswXSxyPXRbMF0sbj0xO248dC5sZW5ndGg7bisrKXIubG9jYWxlQ29tcGFyZSh0W25dKTwwJiYocj10W25dKTtyZXR1cm4gcn1yZXR1cm4gbnVsbH0sX2Z1bmN0aW9uTWluOmZ1bmN0aW9uKGUpe2lmKGVbMF0ubGVuZ3RoPjApe2lmKHRoaXMuX2dldFR5cGVOYW1lKGVbMF1bMF0pPT09eSlyZXR1cm4gTWF0aC5taW4uYXBwbHkoTWF0aCxlWzBdKTtmb3IodmFyIHQ9ZVswXSxyPXRbMF0sbj0xO248dC5sZW5ndGg7bisrKXRbbl0ubG9jYWxlQ29tcGFyZShyKTwwJiYocj10W25dKTtyZXR1cm4gcn1yZXR1cm4gbnVsbH0sX2Z1bmN0aW9uU3VtOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLHI9ZVswXSxuPTA7bjxyLmxlbmd0aDtuKyspdCs9cltuXTtyZXR1cm4gdH0sX2Z1bmN0aW9uVHlwZTpmdW5jdGlvbihlKXtzd2l0Y2godGhpcy5fZ2V0VHlwZU5hbWUoZVswXSkpe2Nhc2UgeTpyZXR1cm5cIm51bWJlclwiO2Nhc2UgYjpyZXR1cm5cInN0cmluZ1wiO2Nhc2UgdzpyZXR1cm5cImFycmF5XCI7Y2FzZSBFOnJldHVyblwib2JqZWN0XCI7Y2FzZSA1OnJldHVyblwiYm9vbGVhblwiO2Nhc2UgUzpyZXR1cm5cImV4cHJlZlwiO2Nhc2UgNzpyZXR1cm5cIm51bGxcIn19LF9mdW5jdGlvbktleXM6ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5rZXlzKGVbMF0pfSxfZnVuY3Rpb25WYWx1ZXM6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWVbMF0scj1PYmplY3Qua2V5cyh0KSxuPVtdLGk9MDtpPHIubGVuZ3RoO2krKyluLnB1c2godFtyW2ldXSk7cmV0dXJuIG59LF9mdW5jdGlvbkpvaW46ZnVuY3Rpb24oZSl7dmFyIHQ9ZVswXTtyZXR1cm4gZVsxXS5qb2luKHQpfSxfZnVuY3Rpb25Ub0FycmF5OmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9nZXRUeXBlTmFtZShlWzBdKT09PXc/ZVswXTpbZVswXV19LF9mdW5jdGlvblRvU3RyaW5nOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9nZXRUeXBlTmFtZShlWzBdKT09PWI/ZVswXTpKU09OLnN0cmluZ2lmeShlWzBdKX0sX2Z1bmN0aW9uVG9OdW1iZXI6ZnVuY3Rpb24oZSl7dmFyIHQscj10aGlzLl9nZXRUeXBlTmFtZShlWzBdKTtyZXR1cm4gcj09PXk/ZVswXTpyIT09Ynx8KHQ9K2VbMF0saXNOYU4odCkpP251bGw6dH0sX2Z1bmN0aW9uTm90TnVsbDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKylpZig3IT09dGhpcy5fZ2V0VHlwZU5hbWUoZVt0XSkpcmV0dXJuIGVbdF07cmV0dXJuIG51bGx9LF9mdW5jdGlvblNvcnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZVswXS5zbGljZSgwKTtyZXR1cm4gdC5zb3J0KCksdH0sX2Z1bmN0aW9uU29ydEJ5OmZ1bmN0aW9uKGUpe3ZhciB0PWVbMF0uc2xpY2UoMCk7aWYoMD09PXQubGVuZ3RoKXJldHVybiB0O3ZhciByPXRoaXMuX2ludGVycHJldGVyLG49ZVsxXSxpPXRoaXMuX2dldFR5cGVOYW1lKHIudmlzaXQobix0WzBdKSk7aWYoW3ksYl0uaW5kZXhPZihpKTwwKXRocm93IG5ldyBFcnJvcihcIlR5cGVFcnJvclwiKTtmb3IodmFyIG89dGhpcyxzPVtdLGE9MDthPHQubGVuZ3RoO2ErKylzLnB1c2goW2EsdFthXV0pO3Muc29ydChmdW5jdGlvbihlLHQpe3ZhciBzPXIudmlzaXQobixlWzFdKSxhPXIudmlzaXQobix0WzFdKTtpZihvLl9nZXRUeXBlTmFtZShzKSE9PWkpdGhyb3cgbmV3IEVycm9yKFwiVHlwZUVycm9yOiBleHBlY3RlZCBcIitpK1wiLCByZWNlaXZlZCBcIitvLl9nZXRUeXBlTmFtZShzKSk7aWYoby5fZ2V0VHlwZU5hbWUoYSkhPT1pKXRocm93IG5ldyBFcnJvcihcIlR5cGVFcnJvcjogZXhwZWN0ZWQgXCIraStcIiwgcmVjZWl2ZWQgXCIrby5fZ2V0VHlwZU5hbWUoYSkpO3JldHVybiBzPmE/MTpzPGE/LTE6ZVswXS10WzBdfSk7Zm9yKHZhciB1PTA7dTxzLmxlbmd0aDt1KyspdFt1XT1zW3VdWzFdO3JldHVybiB0fSxfZnVuY3Rpb25NYXhCeTpmdW5jdGlvbihlKXtmb3IodmFyIHQscixuPWVbMV0saT1lWzBdLG89dGhpcy5jcmVhdGVLZXlGdW5jdGlvbihuLFt5LGJdKSxzPS0xLzAsYT0wO2E8aS5sZW5ndGg7YSsrKShyPW8oaVthXSkpPnMmJihzPXIsdD1pW2FdKTtyZXR1cm4gdH0sX2Z1bmN0aW9uTWluQnk6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHIsbj1lWzFdLGk9ZVswXSxvPXRoaXMuY3JlYXRlS2V5RnVuY3Rpb24obixbeSxiXSkscz0xLzAsYT0wO2E8aS5sZW5ndGg7YSsrKShyPW8oaVthXSkpPHMmJihzPXIsdD1pW2FdKTtyZXR1cm4gdH0sY3JlYXRlS2V5RnVuY3Rpb246ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLG49dGhpcy5faW50ZXJwcmV0ZXI7cmV0dXJuIGZ1bmN0aW9uKGkpe3ZhciBvPW4udmlzaXQoZSxpKTtpZih0LmluZGV4T2Yoci5fZ2V0VHlwZU5hbWUobykpPDApe3ZhciBzPVwiVHlwZUVycm9yOiBleHBlY3RlZCBvbmUgb2YgXCIrdCtcIiwgcmVjZWl2ZWQgXCIrci5fZ2V0VHlwZU5hbWUobyk7dGhyb3cgbmV3IEVycm9yKHMpfXJldHVybiBvfX19LGUudG9rZW5pemU9ZCxlLmNvbXBpbGU9ZixlLnNlYXJjaD1tLGUuc3RyaWN0RGVlcEVxdWFsPW59KHZvaWQgMD09PXI/dGhpcy5qbWVzcGF0aD17fTpyKX0se31dLDg2OltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbigpe3Rocm93IG5ldyBFcnJvcihcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gaSgpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBvKGUpe2lmKHA9PT1zZXRUaW1lb3V0KXJldHVybiBzZXRUaW1lb3V0KGUsMCk7aWYoKHA9PT1ufHwhcCkmJnNldFRpbWVvdXQpcmV0dXJuIHA9c2V0VGltZW91dCxzZXRUaW1lb3V0KGUsMCk7dHJ5e3JldHVybiBwKGUsMCl9Y2F0Y2godCl7dHJ5e3JldHVybiBwLmNhbGwobnVsbCxlLDApfWNhdGNoKHQpe3JldHVybiBwLmNhbGwodGhpcyxlLDApfX19ZnVuY3Rpb24gcyhlKXtpZihoPT09Y2xlYXJUaW1lb3V0KXJldHVybiBjbGVhclRpbWVvdXQoZSk7aWYoKGg9PT1pfHwhaCkmJmNsZWFyVGltZW91dClyZXR1cm4gaD1jbGVhclRpbWVvdXQsY2xlYXJUaW1lb3V0KGUpO3RyeXtyZXR1cm4gaChlKX1jYXRjaCh0KXt0cnl7cmV0dXJuIGguY2FsbChudWxsLGUpfWNhdGNoKHQpe3JldHVybiBoLmNhbGwodGhpcyxlKX19fWZ1bmN0aW9uIGEoKXt2JiZkJiYodj0hMSxkLmxlbmd0aD9tPWQuY29uY2F0KG0pOnk9LTEsbS5sZW5ndGgmJnUoKSl9ZnVuY3Rpb24gdSgpe2lmKCF2KXt2YXIgZT1vKGEpO3Y9ITA7Zm9yKHZhciB0PW0ubGVuZ3RoO3Q7KXtmb3IoZD1tLG09W107Kyt5PHQ7KWQmJmRbeV0ucnVuKCk7eT0tMSx0PW0ubGVuZ3RofWQ9bnVsbCx2PSExLHMoZSl9fWZ1bmN0aW9uIGMoZSx0KXt0aGlzLmZ1bj1lLHRoaXMuYXJyYXk9dH1mdW5jdGlvbiBsKCl7fXZhciBwLGgsZj10LmV4cG9ydHM9e307IWZ1bmN0aW9uKCl7dHJ5e3A9XCJmdW5jdGlvblwiPT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om59Y2F0Y2goZSl7cD1ufXRyeXtoPVwiZnVuY3Rpb25cIj09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6aX1jYXRjaChlKXtoPWl9fSgpO3ZhciBkLG09W10sdj0hMSx5PS0xO2YubmV4dFRpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKWZvcih2YXIgcj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspdFtyLTFdPWFyZ3VtZW50c1tyXTttLnB1c2gobmV3IGMoZSx0KSksMSE9PW0ubGVuZ3RofHx2fHxvKHUpfSxjLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfSxmLnRpdGxlPVwiYnJvd3NlclwiLGYuYnJvd3Nlcj0hMCxmLmVudj17fSxmLmFyZ3Y9W10sZi52ZXJzaW9uPVwiXCIsZi52ZXJzaW9ucz17fSxmLm9uPWwsZi5hZGRMaXN0ZW5lcj1sLGYub25jZT1sLGYub2ZmPWwsZi5yZW1vdmVMaXN0ZW5lcj1sLGYucmVtb3ZlQWxsTGlzdGVuZXJzPWwsZi5lbWl0PWwsZi5wcmVwZW5kTGlzdGVuZXI9bCxmLnByZXBlbmRPbmNlTGlzdGVuZXI9bCxmLmxpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm5bXX0sZi5iaW5kaW5nPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpfSxmLmN3ZD1mdW5jdGlvbigpe3JldHVyblwiL1wifSxmLmNoZGlyPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX0sZi51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX0se31dLDg3OltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKGUpeyFmdW5jdGlvbihuKXtmdW5jdGlvbiBpKGUpe3Rocm93IFJhbmdlRXJyb3IocVtlXSl9ZnVuY3Rpb24gbyhlLHQpe2Zvcih2YXIgcj1lLmxlbmd0aCxuPVtdO3ItLTspbltyXT10KGVbcl0pO3JldHVybiBufWZ1bmN0aW9uIHMoZSx0KXt2YXIgcj1lLnNwbGl0KFwiQFwiKSxuPVwiXCI7cmV0dXJuIHIubGVuZ3RoPjEmJihuPXJbMF0rXCJAXCIsZT1yWzFdKSxlPWUucmVwbGFjZShMLFwiLlwiKSxuK28oZS5zcGxpdChcIi5cIiksdCkuam9pbihcIi5cIil9ZnVuY3Rpb24gYShlKXtmb3IodmFyIHQscixuPVtdLGk9MCxvPWUubGVuZ3RoO2k8bzspdD1lLmNoYXJDb2RlQXQoaSsrKSx0Pj01NTI5NiYmdDw9NTYzMTkmJmk8bz8ocj1lLmNoYXJDb2RlQXQoaSsrKSw1NjMyMD09KDY0NTEyJnIpP24ucHVzaCgoKDEwMjMmdCk8PDEwKSsoMTAyMyZyKSs2NTUzNik6KG4ucHVzaCh0KSxpLS0pKTpuLnB1c2godCk7cmV0dXJuIG59ZnVuY3Rpb24gdShlKXtyZXR1cm4gbyhlLGZ1bmN0aW9uKGUpe3ZhciB0PVwiXCI7cmV0dXJuIGU+NjU1MzUmJihlLT02NTUzNix0Kz1VKGU+Pj4xMCYxMDIzfDU1Mjk2KSxlPTU2MzIwfDEwMjMmZSksdCs9VShlKX0pLmpvaW4oXCJcIil9ZnVuY3Rpb24gYyhlKXtyZXR1cm4gZS00ODwxMD9lLTIyOmUtNjU8MjY/ZS02NTplLTk3PDI2P2UtOTc6U31mdW5jdGlvbiBsKGUsdCl7cmV0dXJuIGUrMjIrNzUqKGU8MjYpLSgoMCE9dCk8PDUpfWZ1bmN0aW9uIHAoZSx0LHIpe3ZhciBuPTA7Zm9yKGU9cj9OKGUvQSk6ZT4+MSxlKz1OKGUvdCk7ZT5PKkM+PjE7bis9UyllPU4oZS9PKTtyZXR1cm4gTihuKyhPKzEpKmUvKGUrUikpfWZ1bmN0aW9uIGgoZSl7dmFyIHQscixuLG8scyxhLGwsaCxmLGQsbT1bXSx2PWUubGVuZ3RoLHk9MCxnPVQsYj14O2ZvcihyPWUubGFzdEluZGV4T2YoSSkscjwwJiYocj0wKSxuPTA7bjxyOysrbillLmNoYXJDb2RlQXQobik+PTEyOCYmaShcIm5vdC1iYXNpY1wiKSxtLnB1c2goZS5jaGFyQ29kZUF0KG4pKTtmb3Iobz1yPjA/cisxOjA7bzx2Oyl7Zm9yKHM9eSxhPTEsbD1TO28+PXYmJmkoXCJpbnZhbGlkLWlucHV0XCIpLGg9YyhlLmNoYXJDb2RlQXQobysrKSksKGg+PVN8fGg+TigoRS15KS9hKSkmJmkoXCJvdmVyZmxvd1wiKSx5Kz1oKmEsZj1sPD1iP186bD49YitDP0M6bC1iLCEoaDxmKTtsKz1TKWQ9Uy1mLGE+TihFL2QpJiZpKFwib3ZlcmZsb3dcIiksYSo9ZDt0PW0ubGVuZ3RoKzEsYj1wKHktcyx0LDA9PXMpLE4oeS90KT5FLWcmJmkoXCJvdmVyZmxvd1wiKSxnKz1OKHkvdCkseSU9dCxtLnNwbGljZSh5KyssMCxnKX1yZXR1cm4gdShtKX1mdW5jdGlvbiBmKGUpe3ZhciB0LHIsbixvLHMsdSxjLGgsZixkLG0sdix5LGcsYix3PVtdO2ZvcihlPWEoZSksdj1lLmxlbmd0aCx0PVQscj0wLHM9eCx1PTA7dTx2OysrdSkobT1lW3VdKTwxMjgmJncucHVzaChVKG0pKTtmb3Iobj1vPXcubGVuZ3RoLG8mJncucHVzaChJKTtuPHY7KXtmb3IoYz1FLHU9MDt1PHY7Kyt1KShtPWVbdV0pPj10JiZtPGMmJihjPW0pO2Zvcih5PW4rMSxjLXQ+TigoRS1yKS95KSYmaShcIm92ZXJmbG93XCIpLHIrPShjLXQpKnksdD1jLHU9MDt1PHY7Kyt1KWlmKG09ZVt1XSxtPHQmJisrcj5FJiZpKFwib3ZlcmZsb3dcIiksbT09dCl7Zm9yKGg9cixmPVM7ZD1mPD1zP186Zj49cytDP0M6Zi1zLCEoaDxkKTtmKz1TKWI9aC1kLGc9Uy1kLHcucHVzaChVKGwoZCtiJWcsMCkpKSxoPU4oYi9nKTt3LnB1c2goVShsKGgsMCkpKSxzPXAocix5LG49PW8pLHI9MCwrK259KytyLCsrdH1yZXR1cm4gdy5qb2luKFwiXCIpfWZ1bmN0aW9uIGQoZSl7cmV0dXJuIHMoZSxmdW5jdGlvbihlKXtyZXR1cm4gay50ZXN0KGUpP2goZS5zbGljZSg0KS50b0xvd2VyQ2FzZSgpKTplfSl9ZnVuY3Rpb24gbShlKXtyZXR1cm4gcyhlLGZ1bmN0aW9uKGUpe3JldHVybiBQLnRlc3QoZSk/XCJ4bi0tXCIrZihlKTplfSl9dmFyIHY9XCJvYmplY3RcIj09dHlwZW9mIHImJnImJiFyLm5vZGVUeXBlJiZyLHk9XCJvYmplY3RcIj09dHlwZW9mIHQmJnQmJiF0Lm5vZGVUeXBlJiZ0LGc9XCJvYmplY3RcIj09dHlwZW9mIGUmJmU7Zy5nbG9iYWwhPT1nJiZnLndpbmRvdyE9PWcmJmcuc2VsZiE9PWd8fChuPWcpO3ZhciBiLHcsRT0yMTQ3NDgzNjQ3LFM9MzYsXz0xLEM9MjYsUj0zOCxBPTcwMCx4PTcyLFQ9MTI4LEk9XCItXCIsaz0vXnhuLS0vLFA9L1teXFx4MjAtXFx4N0VdLyxMPS9bXFx4MkVcXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2cscT17b3ZlcmZsb3c6XCJPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2Vzc1wiLFwibm90LWJhc2ljXCI6XCJJbGxlZ2FsIGlucHV0ID49IDB4ODAgKG5vdCBhIGJhc2ljIGNvZGUgcG9pbnQpXCIsXCJpbnZhbGlkLWlucHV0XCI6XCJJbnZhbGlkIGlucHV0XCJ9LE89Uy1fLE49TWF0aC5mbG9vcixVPVN0cmluZy5mcm9tQ2hhckNvZGU7aWYoYj17dmVyc2lvbjpcIjEuMy4yXCIsdWNzMjp7ZGVjb2RlOmEsZW5jb2RlOnV9LGRlY29kZTpoLGVuY29kZTpmLHRvQVNDSUk6bSx0b1VuaWNvZGU6ZH0sXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZcIm9iamVjdFwiPT10eXBlb2YgZGVmaW5lLmFtZCYmZGVmaW5lLmFtZClkZWZpbmUoXCJwdW55Y29kZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGJ9KTtlbHNlIGlmKHYmJnkpaWYodC5leHBvcnRzPT12KXkuZXhwb3J0cz1iO2Vsc2UgZm9yKHcgaW4gYiliLmhhc093blByb3BlcnR5KHcpJiYodlt3XT1iW3ddKTtlbHNlIG4ucHVueWNvZGU9Yn0odGhpcyl9KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XSw4ODpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLG8pe3Q9dHx8XCImXCIscj1yfHxcIj1cIjt2YXIgcz17fTtpZihcInN0cmluZ1wiIT10eXBlb2YgZXx8MD09PWUubGVuZ3RoKXJldHVybiBzO3ZhciBhPS9cXCsvZztlPWUuc3BsaXQodCk7dmFyIHU9MWUzO28mJlwibnVtYmVyXCI9PXR5cGVvZiBvLm1heEtleXMmJih1PW8ubWF4S2V5cyk7dmFyIGM9ZS5sZW5ndGg7dT4wJiZjPnUmJihjPXUpO2Zvcih2YXIgbD0wO2w8YzsrK2wpe3ZhciBwLGgsZixkLG09ZVtsXS5yZXBsYWNlKGEsXCIlMjBcIiksdj1tLmluZGV4T2Yocik7dj49MD8ocD1tLnN1YnN0cigwLHYpLGg9bS5zdWJzdHIodisxKSk6KHA9bSxoPVwiXCIpLGY9ZGVjb2RlVVJJQ29tcG9uZW50KHApLGQ9ZGVjb2RlVVJJQ29tcG9uZW50KGgpLG4ocyxmKT9pKHNbZl0pP3NbZl0ucHVzaChkKTpzW2ZdPVtzW2ZdLGRdOnNbZl09ZH1yZXR1cm4gc307dmFyIGk9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfX0se31dLDg5OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlLHQpe2lmKGUubWFwKXJldHVybiBlLm1hcCh0KTtmb3IodmFyIHI9W10sbj0wO248ZS5sZW5ndGg7bisrKXIucHVzaCh0KGVbbl0sbikpO3JldHVybiByfXZhciBpPWZ1bmN0aW9uKGUpe3N3aXRjaCh0eXBlb2YgZSl7Y2FzZVwic3RyaW5nXCI6cmV0dXJuIGU7Y2FzZVwiYm9vbGVhblwiOnJldHVybiBlP1widHJ1ZVwiOlwiZmFsc2VcIjtjYXNlXCJudW1iZXJcIjpyZXR1cm4gaXNGaW5pdGUoZSk/ZTpcIlwiO2RlZmF1bHQ6cmV0dXJuXCJcIn19O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscixhKXtyZXR1cm4gdD10fHxcIiZcIixyPXJ8fFwiPVwiLG51bGw9PT1lJiYoZT12b2lkIDApLFwib2JqZWN0XCI9PXR5cGVvZiBlP24ocyhlKSxmdW5jdGlvbihzKXt2YXIgYT1lbmNvZGVVUklDb21wb25lbnQoaShzKSkrcjtyZXR1cm4gbyhlW3NdKT9uKGVbc10sZnVuY3Rpb24oZSl7cmV0dXJuIGErZW5jb2RlVVJJQ29tcG9uZW50KGkoZSkpfSkuam9pbih0KTphK2VuY29kZVVSSUNvbXBvbmVudChpKGVbc10pKX0pLmpvaW4odCk6YT9lbmNvZGVVUklDb21wb25lbnQoaShhKSkrcitlbmNvZGVVUklDb21wb25lbnQoaShlKSk6XCJcIn07dmFyIG89QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSxzPU9iamVjdC5rZXlzfHxmdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmdC5wdXNoKHIpO3JldHVybiB0fX0se31dLDkwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ci5kZWNvZGU9ci5wYXJzZT1lKFwiLi9kZWNvZGVcIiksci5lbmNvZGU9ci5zdHJpbmdpZnk9ZShcIi4vZW5jb2RlXCIpfSx7XCIuL2RlY29kZVwiOjg4LFwiLi9lbmNvZGVcIjo4OX1dLDkxOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX10LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsaSl7dD10fHxcIiZcIixyPXJ8fFwiPVwiO3ZhciBvPXt9O2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlfHwwPT09ZS5sZW5ndGgpcmV0dXJuIG87dmFyIHM9L1xcKy9nO2U9ZS5zcGxpdCh0KTt2YXIgYT0xZTM7aSYmXCJudW1iZXJcIj09dHlwZW9mIGkubWF4S2V5cyYmKGE9aS5tYXhLZXlzKTt2YXIgdT1lLmxlbmd0aDthPjAmJnU+YSYmKHU9YSk7Zm9yKHZhciBjPTA7Yzx1OysrYyl7dmFyIGwscCxoLGYsZD1lW2NdLnJlcGxhY2UocyxcIiUyMFwiKSxtPWQuaW5kZXhPZihyKTttPj0wPyhsPWQuc3Vic3RyKDAsbSkscD1kLnN1YnN0cihtKzEpKToobD1kLHA9XCJcIiksaD1kZWNvZGVVUklDb21wb25lbnQobCksZj1kZWNvZGVVUklDb21wb25lbnQocCksbihvLGgpP0FycmF5LmlzQXJyYXkob1toXSk/b1toXS5wdXNoKGYpOm9baF09W29baF0sZl06b1toXT1mfXJldHVybiBvfX0se31dLDkyOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZnVuY3Rpb24oZSl7c3dpdGNoKHR5cGVvZiBlKXtjYXNlXCJzdHJpbmdcIjpyZXR1cm4gZTtjYXNlXCJib29sZWFuXCI6cmV0dXJuIGU/XCJ0cnVlXCI6XCJmYWxzZVwiO2Nhc2VcIm51bWJlclwiOnJldHVybiBpc0Zpbml0ZShlKT9lOlwiXCI7ZGVmYXVsdDpyZXR1cm5cIlwifX07dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLGkpe3JldHVybiB0PXR8fFwiJlwiLHI9cnx8XCI9XCIsbnVsbD09PWUmJihlPXZvaWQgMCksXCJvYmplY3RcIj09dHlwZW9mIGU/T2JqZWN0LmtleXMoZSkubWFwKGZ1bmN0aW9uKGkpe3ZhciBvPWVuY29kZVVSSUNvbXBvbmVudChuKGkpKStyO3JldHVybiBBcnJheS5pc0FycmF5KGVbaV0pP2VbaV0ubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBvK2VuY29kZVVSSUNvbXBvbmVudChuKGUpKX0pLmpvaW4odCk6bytlbmNvZGVVUklDb21wb25lbnQobihlW2ldKSl9KS5qb2luKHQpOmk/ZW5jb2RlVVJJQ29tcG9uZW50KG4oaSkpK3IrZW5jb2RlVVJJQ29tcG9uZW50KG4oZSkpOlwiXCJ9fSx7fV0sOTM6W2Z1bmN0aW9uKGUsdCxyKXthcmd1bWVudHNbNF1bOTBdWzBdLmFwcGx5KHIsYXJndW1lbnRzKX0se1wiLi9kZWNvZGVcIjo5MSxcIi4vZW5jb2RlXCI6OTIsZHVwOjkwfV0sOTQ6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24odCxuKXtmdW5jdGlvbiBpKGUsdCl7dGhpcy5faWQ9ZSx0aGlzLl9jbGVhckZuPXR9dmFyIG89ZShcInByb2Nlc3MvYnJvd3Nlci5qc1wiKS5uZXh0VGljayxzPUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSxhPUFycmF5LnByb3RvdHlwZS5zbGljZSx1PXt9LGM9MDtyLnNldFRpbWVvdXQ9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGkocy5jYWxsKHNldFRpbWVvdXQsd2luZG93LGFyZ3VtZW50cyksY2xlYXJUaW1lb3V0KX0sci5zZXRJbnRlcnZhbD1mdW5jdGlvbigpe3JldHVybiBuZXcgaShzLmNhbGwoc2V0SW50ZXJ2YWwsd2luZG93LGFyZ3VtZW50cyksY2xlYXJJbnRlcnZhbCl9LHIuY2xlYXJUaW1lb3V0PXIuY2xlYXJJbnRlcnZhbD1mdW5jdGlvbihlKXtlLmNsb3NlKCl9LGkucHJvdG90eXBlLnVucmVmPWkucHJvdG90eXBlLnJlZj1mdW5jdGlvbigpe30saS5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oKXt0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LHRoaXMuX2lkKX0sci5lbnJvbGw9ZnVuY3Rpb24oZSx0KXtjbGVhclRpbWVvdXQoZS5faWRsZVRpbWVvdXRJZCksZS5faWRsZVRpbWVvdXQ9dH0sci51bmVucm9sbD1mdW5jdGlvbihlKXtjbGVhclRpbWVvdXQoZS5faWRsZVRpbWVvdXRJZCksZS5faWRsZVRpbWVvdXQ9LTF9LHIuX3VucmVmQWN0aXZlPXIuYWN0aXZlPWZ1bmN0aW9uKGUpe2NsZWFyVGltZW91dChlLl9pZGxlVGltZW91dElkKTt2YXIgdD1lLl9pZGxlVGltZW91dDt0Pj0wJiYoZS5faWRsZVRpbWVvdXRJZD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5fb25UaW1lb3V0JiZlLl9vblRpbWVvdXQoKX0sdCkpfSxyLnNldEltbWVkaWF0ZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3Q6ZnVuY3Rpb24oZSl7dmFyIHQ9YysrLG49IShhcmd1bWVudHMubGVuZ3RoPDIpJiZhLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiB1W3RdPSEwLG8oZnVuY3Rpb24oKXt1W3RdJiYobj9lLmFwcGx5KG51bGwsbik6ZS5jYWxsKG51bGwpLHIuY2xlYXJJbW1lZGlhdGUodCkpfSksdH0sci5jbGVhckltbWVkaWF0ZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBuP246ZnVuY3Rpb24oZSl7ZGVsZXRlIHVbZV19fSkuY2FsbCh0aGlzLGUoXCJ0aW1lcnNcIikuc2V0SW1tZWRpYXRlLGUoXCJ0aW1lcnNcIikuY2xlYXJJbW1lZGlhdGUpfSx7XCJwcm9jZXNzL2Jyb3dzZXIuanNcIjo4Nix0aW1lcnM6OTR9XSw5NTpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oKXt0aGlzLnByb3RvY29sPW51bGwsdGhpcy5zbGFzaGVzPW51bGwsdGhpcy5hdXRoPW51bGwsdGhpcy5ob3N0PW51bGwsdGhpcy5wb3J0PW51bGwsdGhpcy5ob3N0bmFtZT1udWxsLHRoaXMuaGFzaD1udWxsLHRoaXMuc2VhcmNoPW51bGwsdGhpcy5xdWVyeT1udWxsLHRoaXMucGF0aG5hbWU9bnVsbCx0aGlzLnBhdGg9bnVsbCx0aGlzLmhyZWY9bnVsbH1mdW5jdGlvbiBpKGUsdCxyKXtpZihlJiZjKGUpJiZlIGluc3RhbmNlb2YgbilyZXR1cm4gZTt2YXIgaT1uZXcgbjtyZXR1cm4gaS5wYXJzZShlLHQsciksaX1mdW5jdGlvbiBvKGUpe3JldHVybiB1KGUpJiYoZT1pKGUpKSxlIGluc3RhbmNlb2Ygbj9lLmZvcm1hdCgpOm4ucHJvdG90eXBlLmZvcm1hdC5jYWxsKGUpfWZ1bmN0aW9uIHMoZSx0KXtyZXR1cm4gaShlLCExLCEwKS5yZXNvbHZlKHQpfWZ1bmN0aW9uIGEoZSx0KXtyZXR1cm4gZT9pKGUsITEsITApLnJlc29sdmVPYmplY3QodCk6dH1mdW5jdGlvbiB1KGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlfWZ1bmN0aW9uIGMoZSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lfWZ1bmN0aW9uIGwoZSl7cmV0dXJuIG51bGw9PT1lfWZ1bmN0aW9uIHAoZSl7cmV0dXJuIG51bGw9PWV9dmFyIGg9ZShcInB1bnljb2RlXCIpO3IucGFyc2U9aSxyLnJlc29sdmU9cyxyLnJlc29sdmVPYmplY3Q9YSxyLmZvcm1hdD1vLHIuVXJsPW47dmFyIGY9L14oW2EtejAtOS4rLV0rOikvaSxkPS86WzAtOV0qJC8sbT1bXCI8XCIsXCI+XCIsJ1wiJyxcImBcIixcIiBcIixcIlxcclwiLFwiXFxuXCIsXCJcXHRcIl0sdj1bXCJ7XCIsXCJ9XCIsXCJ8XCIsXCJcXFxcXCIsXCJeXCIsXCJgXCJdLmNvbmNhdChtKSx5PVtcIidcIl0uY29uY2F0KHYpLGc9W1wiJVwiLFwiL1wiLFwiP1wiLFwiO1wiLFwiI1wiXS5jb25jYXQoeSksYj1bXCIvXCIsXCI/XCIsXCIjXCJdLHc9L15bYS16MC05QS1aXy1dezAsNjN9JC8sRT0vXihbYS16MC05QS1aXy1dezAsNjN9KSguKikkLyxTPXtqYXZhc2NyaXB0OiEwLFwiamF2YXNjcmlwdDpcIjohMH0sXz17amF2YXNjcmlwdDohMCxcImphdmFzY3JpcHQ6XCI6ITB9LEM9e2h0dHA6ITAsaHR0cHM6ITAsZnRwOiEwLGdvcGhlcjohMCxmaWxlOiEwLFwiaHR0cDpcIjohMCxcImh0dHBzOlwiOiEwLFwiZnRwOlwiOiEwLFwiZ29waGVyOlwiOiEwLFwiZmlsZTpcIjohMH0sUj1lKFwicXVlcnlzdHJpbmdcIik7bi5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24oZSx0LHIpe2lmKCF1KGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXJhbWV0ZXIgJ3VybCcgbXVzdCBiZSBhIHN0cmluZywgbm90IFwiK3R5cGVvZiBlKTt2YXIgbj1lO249bi50cmltKCk7dmFyIGk9Zi5leGVjKG4pO2lmKGkpe2k9aVswXTt2YXIgbz1pLnRvTG93ZXJDYXNlKCk7dGhpcy5wcm90b2NvbD1vLG49bi5zdWJzdHIoaS5sZW5ndGgpfWlmKHJ8fGl8fG4ubWF0Y2goL15cXC9cXC9bXkBcXC9dK0BbXkBcXC9dKy8pKXt2YXIgcz1cIi8vXCI9PT1uLnN1YnN0cigwLDIpOyFzfHxpJiZfW2ldfHwobj1uLnN1YnN0cigyKSx0aGlzLnNsYXNoZXM9ITApfWlmKCFfW2ldJiYoc3x8aSYmIUNbaV0pKXtmb3IodmFyIGE9LTEsYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgbD1uLmluZGV4T2YoYltjXSk7LTEhPT1sJiYoLTE9PT1hfHxsPGEpJiYoYT1sKX12YXIgcCxkO2Q9LTE9PT1hP24ubGFzdEluZGV4T2YoXCJAXCIpOm4ubGFzdEluZGV4T2YoXCJAXCIsYSksLTEhPT1kJiYocD1uLnNsaWNlKDAsZCksbj1uLnNsaWNlKGQrMSksdGhpcy5hdXRoPWRlY29kZVVSSUNvbXBvbmVudChwKSksYT0tMTtmb3IodmFyIGM9MDtjPGcubGVuZ3RoO2MrKyl7dmFyIGw9bi5pbmRleE9mKGdbY10pOy0xIT09bCYmKC0xPT09YXx8bDxhKSYmKGE9bCl9LTE9PT1hJiYoYT1uLmxlbmd0aCksdGhpcy5ob3N0PW4uc2xpY2UoMCxhKSxuPW4uc2xpY2UoYSksdGhpcy5wYXJzZUhvc3QoKSx0aGlzLmhvc3RuYW1lPXRoaXMuaG9zdG5hbWV8fFwiXCI7dmFyIG09XCJbXCI9PT10aGlzLmhvc3RuYW1lWzBdJiZcIl1cIj09PXRoaXMuaG9zdG5hbWVbdGhpcy5ob3N0bmFtZS5sZW5ndGgtMV07aWYoIW0pZm9yKHZhciB2PXRoaXMuaG9zdG5hbWUuc3BsaXQoL1xcLi8pLGM9MCxBPXYubGVuZ3RoO2M8QTtjKyspe3ZhciB4PXZbY107aWYoeCYmIXgubWF0Y2godykpe2Zvcih2YXIgVD1cIlwiLEk9MCxrPXgubGVuZ3RoO0k8aztJKyspeC5jaGFyQ29kZUF0KEkpPjEyNz9UKz1cInhcIjpUKz14W0ldO2lmKCFULm1hdGNoKHcpKXt2YXIgUD12LnNsaWNlKDAsYyksTD12LnNsaWNlKGMrMSkscT14Lm1hdGNoKEUpO3EmJihQLnB1c2gocVsxXSksTC51bnNoaWZ0KHFbMl0pKSxMLmxlbmd0aCYmKG49XCIvXCIrTC5qb2luKFwiLlwiKStuKSx0aGlzLmhvc3RuYW1lPVAuam9pbihcIi5cIik7YnJlYWt9fX1pZih0aGlzLmhvc3RuYW1lLmxlbmd0aD4yNTU/dGhpcy5ob3N0bmFtZT1cIlwiOnRoaXMuaG9zdG5hbWU9dGhpcy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpLCFtKXtmb3IodmFyIE89dGhpcy5ob3N0bmFtZS5zcGxpdChcIi5cIiksTj1bXSxjPTA7YzxPLmxlbmd0aDsrK2Mpe3ZhciBVPU9bY107Ti5wdXNoKFUubWF0Y2goL1teQS1aYS16MC05Xy1dLyk/XCJ4bi0tXCIraC5lbmNvZGUoVSk6VSl9dGhpcy5ob3N0bmFtZT1OLmpvaW4oXCIuXCIpfXZhciBEPXRoaXMucG9ydD9cIjpcIit0aGlzLnBvcnQ6XCJcIixNPXRoaXMuaG9zdG5hbWV8fFwiXCI7dGhpcy5ob3N0PU0rRCx0aGlzLmhyZWYrPXRoaXMuaG9zdCxtJiYodGhpcy5ob3N0bmFtZT10aGlzLmhvc3RuYW1lLnN1YnN0cigxLHRoaXMuaG9zdG5hbWUubGVuZ3RoLTIpLFwiL1wiIT09blswXSYmKG49XCIvXCIrbikpfWlmKCFTW29dKWZvcih2YXIgYz0wLEE9eS5sZW5ndGg7YzxBO2MrKyl7dmFyIGo9eVtjXSxCPWVuY29kZVVSSUNvbXBvbmVudChqKTtCPT09aiYmKEI9ZXNjYXBlKGopKSxuPW4uc3BsaXQoaikuam9pbihCKX12YXIgRj1uLmluZGV4T2YoXCIjXCIpOy0xIT09RiYmKHRoaXMuaGFzaD1uLnN1YnN0cihGKSxuPW4uc2xpY2UoMCxGKSk7dmFyIHo9bi5pbmRleE9mKFwiP1wiKTtpZigtMSE9PXo/KHRoaXMuc2VhcmNoPW4uc3Vic3RyKHopLHRoaXMucXVlcnk9bi5zdWJzdHIoeisxKSx0JiYodGhpcy5xdWVyeT1SLnBhcnNlKHRoaXMucXVlcnkpKSxuPW4uc2xpY2UoMCx6KSk6dCYmKHRoaXMuc2VhcmNoPVwiXCIsdGhpcy5xdWVyeT17fSksbiYmKHRoaXMucGF0aG5hbWU9biksQ1tvXSYmdGhpcy5ob3N0bmFtZSYmIXRoaXMucGF0aG5hbWUmJih0aGlzLnBhdGhuYW1lPVwiL1wiKSx0aGlzLnBhdGhuYW1lfHx0aGlzLnNlYXJjaCl7dmFyIEQ9dGhpcy5wYXRobmFtZXx8XCJcIixVPXRoaXMuc2VhcmNofHxcIlwiO3RoaXMucGF0aD1EK1V9cmV0dXJuIHRoaXMuaHJlZj10aGlzLmZvcm1hdCgpLHRoaXN9LG4ucHJvdG90eXBlLmZvcm1hdD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuYXV0aHx8XCJcIjtlJiYoZT1lbmNvZGVVUklDb21wb25lbnQoZSksZT1lLnJlcGxhY2UoLyUzQS9pLFwiOlwiKSxlKz1cIkBcIik7dmFyIHQ9dGhpcy5wcm90b2NvbHx8XCJcIixyPXRoaXMucGF0aG5hbWV8fFwiXCIsbj10aGlzLmhhc2h8fFwiXCIsaT0hMSxvPVwiXCI7dGhpcy5ob3N0P2k9ZSt0aGlzLmhvc3Q6dGhpcy5ob3N0bmFtZSYmKGk9ZSsoLTE9PT10aGlzLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpP3RoaXMuaG9zdG5hbWU6XCJbXCIrdGhpcy5ob3N0bmFtZStcIl1cIiksdGhpcy5wb3J0JiYoaSs9XCI6XCIrdGhpcy5wb3J0KSksdGhpcy5xdWVyeSYmYyh0aGlzLnF1ZXJ5KSYmT2JqZWN0LmtleXModGhpcy5xdWVyeSkubGVuZ3RoJiYobz1SLnN0cmluZ2lmeSh0aGlzLnF1ZXJ5KSk7dmFyIHM9dGhpcy5zZWFyY2h8fG8mJlwiP1wiK298fFwiXCI7cmV0dXJuIHQmJlwiOlwiIT09dC5zdWJzdHIoLTEpJiYodCs9XCI6XCIpLHRoaXMuc2xhc2hlc3x8KCF0fHxDW3RdKSYmITEhPT1pPyhpPVwiLy9cIisoaXx8XCJcIiksciYmXCIvXCIhPT1yLmNoYXJBdCgwKSYmKHI9XCIvXCIrcikpOml8fChpPVwiXCIpLG4mJlwiI1wiIT09bi5jaGFyQXQoMCkmJihuPVwiI1wiK24pLHMmJlwiP1wiIT09cy5jaGFyQXQoMCkmJihzPVwiP1wiK3MpLHI9ci5yZXBsYWNlKC9bPyNdL2csZnVuY3Rpb24oZSl7cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChlKX0pLHM9cy5yZXBsYWNlKFwiI1wiLFwiJTIzXCIpLHQraStyK3Mrbn0sbi5wcm90b3R5cGUucmVzb2x2ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXNvbHZlT2JqZWN0KGkoZSwhMSwhMCkpLmZvcm1hdCgpfSxuLnByb3RvdHlwZS5yZXNvbHZlT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKHUoZSkpe3ZhciB0PW5ldyBuO3QucGFyc2UoZSwhMSwhMCksZT10fXZhciByPW5ldyBuO2lmKE9iamVjdC5rZXlzKHRoaXMpLmZvckVhY2goZnVuY3Rpb24oZSl7cltlXT10aGlzW2VdfSx0aGlzKSxyLmhhc2g9ZS5oYXNoLFwiXCI9PT1lLmhyZWYpcmV0dXJuIHIuaHJlZj1yLmZvcm1hdCgpLHI7aWYoZS5zbGFzaGVzJiYhZS5wcm90b2NvbClyZXR1cm4gT2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbih0KXtcInByb3RvY29sXCIhPT10JiYoclt0XT1lW3RdKX0pLENbci5wcm90b2NvbF0mJnIuaG9zdG5hbWUmJiFyLnBhdGhuYW1lJiYoci5wYXRoPXIucGF0aG5hbWU9XCIvXCIpLHIuaHJlZj1yLmZvcm1hdCgpLHJcbjtpZihlLnByb3RvY29sJiZlLnByb3RvY29sIT09ci5wcm90b2NvbCl7aWYoIUNbZS5wcm90b2NvbF0pcmV0dXJuIE9iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24odCl7clt0XT1lW3RdfSksci5ocmVmPXIuZm9ybWF0KCkscjtpZihyLnByb3RvY29sPWUucHJvdG9jb2wsZS5ob3N0fHxfW2UucHJvdG9jb2xdKXIucGF0aG5hbWU9ZS5wYXRobmFtZTtlbHNle2Zvcih2YXIgaT0oZS5wYXRobmFtZXx8XCJcIikuc3BsaXQoXCIvXCIpO2kubGVuZ3RoJiYhKGUuaG9zdD1pLnNoaWZ0KCkpOyk7ZS5ob3N0fHwoZS5ob3N0PVwiXCIpLGUuaG9zdG5hbWV8fChlLmhvc3RuYW1lPVwiXCIpLFwiXCIhPT1pWzBdJiZpLnVuc2hpZnQoXCJcIiksaS5sZW5ndGg8MiYmaS51bnNoaWZ0KFwiXCIpLHIucGF0aG5hbWU9aS5qb2luKFwiL1wiKX1pZihyLnNlYXJjaD1lLnNlYXJjaCxyLnF1ZXJ5PWUucXVlcnksci5ob3N0PWUuaG9zdHx8XCJcIixyLmF1dGg9ZS5hdXRoLHIuaG9zdG5hbWU9ZS5ob3N0bmFtZXx8ZS5ob3N0LHIucG9ydD1lLnBvcnQsci5wYXRobmFtZXx8ci5zZWFyY2gpe3ZhciBvPXIucGF0aG5hbWV8fFwiXCIscz1yLnNlYXJjaHx8XCJcIjtyLnBhdGg9bytzfXJldHVybiByLnNsYXNoZXM9ci5zbGFzaGVzfHxlLnNsYXNoZXMsci5ocmVmPXIuZm9ybWF0KCkscn12YXIgYT1yLnBhdGhuYW1lJiZcIi9cIj09PXIucGF0aG5hbWUuY2hhckF0KDApLGM9ZS5ob3N0fHxlLnBhdGhuYW1lJiZcIi9cIj09PWUucGF0aG5hbWUuY2hhckF0KDApLGg9Y3x8YXx8ci5ob3N0JiZlLnBhdGhuYW1lLGY9aCxkPXIucGF0aG5hbWUmJnIucGF0aG5hbWUuc3BsaXQoXCIvXCIpfHxbXSxpPWUucGF0aG5hbWUmJmUucGF0aG5hbWUuc3BsaXQoXCIvXCIpfHxbXSxtPXIucHJvdG9jb2wmJiFDW3IucHJvdG9jb2xdO2lmKG0mJihyLmhvc3RuYW1lPVwiXCIsci5wb3J0PW51bGwsci5ob3N0JiYoXCJcIj09PWRbMF0/ZFswXT1yLmhvc3Q6ZC51bnNoaWZ0KHIuaG9zdCkpLHIuaG9zdD1cIlwiLGUucHJvdG9jb2wmJihlLmhvc3RuYW1lPW51bGwsZS5wb3J0PW51bGwsZS5ob3N0JiYoXCJcIj09PWlbMF0/aVswXT1lLmhvc3Q6aS51bnNoaWZ0KGUuaG9zdCkpLGUuaG9zdD1udWxsKSxoPWgmJihcIlwiPT09aVswXXx8XCJcIj09PWRbMF0pKSxjKXIuaG9zdD1lLmhvc3R8fFwiXCI9PT1lLmhvc3Q/ZS5ob3N0OnIuaG9zdCxyLmhvc3RuYW1lPWUuaG9zdG5hbWV8fFwiXCI9PT1lLmhvc3RuYW1lP2UuaG9zdG5hbWU6ci5ob3N0bmFtZSxyLnNlYXJjaD1lLnNlYXJjaCxyLnF1ZXJ5PWUucXVlcnksZD1pO2Vsc2UgaWYoaS5sZW5ndGgpZHx8KGQ9W10pLGQucG9wKCksZD1kLmNvbmNhdChpKSxyLnNlYXJjaD1lLnNlYXJjaCxyLnF1ZXJ5PWUucXVlcnk7ZWxzZSBpZighcChlLnNlYXJjaCkpe2lmKG0pe3IuaG9zdG5hbWU9ci5ob3N0PWQuc2hpZnQoKTt2YXIgdj0hIShyLmhvc3QmJnIuaG9zdC5pbmRleE9mKFwiQFwiKT4wKSYmci5ob3N0LnNwbGl0KFwiQFwiKTt2JiYoci5hdXRoPXYuc2hpZnQoKSxyLmhvc3Q9ci5ob3N0bmFtZT12LnNoaWZ0KCkpfXJldHVybiByLnNlYXJjaD1lLnNlYXJjaCxyLnF1ZXJ5PWUucXVlcnksbChyLnBhdGhuYW1lKSYmbChyLnNlYXJjaCl8fChyLnBhdGg9KHIucGF0aG5hbWU/ci5wYXRobmFtZTpcIlwiKSsoci5zZWFyY2g/ci5zZWFyY2g6XCJcIikpLHIuaHJlZj1yLmZvcm1hdCgpLHJ9aWYoIWQubGVuZ3RoKXJldHVybiByLnBhdGhuYW1lPW51bGwsci5zZWFyY2g/ci5wYXRoPVwiL1wiK3Iuc2VhcmNoOnIucGF0aD1udWxsLHIuaHJlZj1yLmZvcm1hdCgpLHI7Zm9yKHZhciB5PWQuc2xpY2UoLTEpWzBdLGc9KHIuaG9zdHx8ZS5ob3N0KSYmKFwiLlwiPT09eXx8XCIuLlwiPT09eSl8fFwiXCI9PT15LGI9MCx3PWQubGVuZ3RoO3c+PTA7dy0tKXk9ZFt3XSxcIi5cIj09eT9kLnNwbGljZSh3LDEpOlwiLi5cIj09PXk/KGQuc3BsaWNlKHcsMSksYisrKTpiJiYoZC5zcGxpY2UodywxKSxiLS0pO2lmKCFoJiYhZilmb3IoO2ItLTtiKWQudW5zaGlmdChcIi4uXCIpOyFofHxcIlwiPT09ZFswXXx8ZFswXSYmXCIvXCI9PT1kWzBdLmNoYXJBdCgwKXx8ZC51bnNoaWZ0KFwiXCIpLGcmJlwiL1wiIT09ZC5qb2luKFwiL1wiKS5zdWJzdHIoLTEpJiZkLnB1c2goXCJcIik7dmFyIEU9XCJcIj09PWRbMF18fGRbMF0mJlwiL1wiPT09ZFswXS5jaGFyQXQoMCk7aWYobSl7ci5ob3N0bmFtZT1yLmhvc3Q9RT9cIlwiOmQubGVuZ3RoP2Quc2hpZnQoKTpcIlwiO3ZhciB2PSEhKHIuaG9zdCYmci5ob3N0LmluZGV4T2YoXCJAXCIpPjApJiZyLmhvc3Quc3BsaXQoXCJAXCIpO3YmJihyLmF1dGg9di5zaGlmdCgpLHIuaG9zdD1yLmhvc3RuYW1lPXYuc2hpZnQoKSl9cmV0dXJuIGg9aHx8ci5ob3N0JiZkLmxlbmd0aCxoJiYhRSYmZC51bnNoaWZ0KFwiXCIpLGQubGVuZ3RoP3IucGF0aG5hbWU9ZC5qb2luKFwiL1wiKTooci5wYXRobmFtZT1udWxsLHIucGF0aD1udWxsKSxsKHIucGF0aG5hbWUpJiZsKHIuc2VhcmNoKXx8KHIucGF0aD0oci5wYXRobmFtZT9yLnBhdGhuYW1lOlwiXCIpKyhyLnNlYXJjaD9yLnNlYXJjaDpcIlwiKSksci5hdXRoPWUuYXV0aHx8ci5hdXRoLHIuc2xhc2hlcz1yLnNsYXNoZXN8fGUuc2xhc2hlcyxyLmhyZWY9ci5mb3JtYXQoKSxyfSxuLnByb3RvdHlwZS5wYXJzZUhvc3Q9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmhvc3QsdD1kLmV4ZWMoZSk7dCYmKHQ9dFswXSxcIjpcIiE9PXQmJih0aGlzLnBvcnQ9dC5zdWJzdHIoMSkpLGU9ZS5zdWJzdHIoMCxlLmxlbmd0aC10Lmxlbmd0aCkpLGUmJih0aGlzLmhvc3RuYW1lPWUpfX0se3B1bnljb2RlOjg3LHF1ZXJ5c3RyaW5nOjkwfV0sOTY6W2Z1bmN0aW9uKGUsdCxyKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3QuY3JlYXRlP3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2Uuc3VwZXJfPXQsZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSl9OnQuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2Uuc3VwZXJfPXQ7dmFyIHI9ZnVuY3Rpb24oKXt9O3IucHJvdG90eXBlPXQucHJvdG90eXBlLGUucHJvdG90eXBlPW5ldyByLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWV9fSx7fV0sOTc6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmNvcHkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZmlsbCYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5yZWFkVUludDh9fSx7fV0sOTg6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24odCxuKXtmdW5jdGlvbiBpKGUsdCl7dmFyIG49e3NlZW46W10sc3R5bGl6ZTpzfTtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD49MyYmKG4uZGVwdGg9YXJndW1lbnRzWzJdKSxhcmd1bWVudHMubGVuZ3RoPj00JiYobi5jb2xvcnM9YXJndW1lbnRzWzNdKSxtKHQpP24uc2hvd0hpZGRlbj10OnQmJnIuX2V4dGVuZChuLHQpLEUobi5zaG93SGlkZGVuKSYmKG4uc2hvd0hpZGRlbj0hMSksRShuLmRlcHRoKSYmKG4uZGVwdGg9MiksRShuLmNvbG9ycykmJihuLmNvbG9ycz0hMSksRShuLmN1c3RvbUluc3BlY3QpJiYobi5jdXN0b21JbnNwZWN0PSEwKSxuLmNvbG9ycyYmKG4uc3R5bGl6ZT1vKSx1KG4sZSxuLmRlcHRoKX1mdW5jdGlvbiBvKGUsdCl7dmFyIHI9aS5zdHlsZXNbdF07cmV0dXJuIHI/XCJcdTAwMWJbXCIraS5jb2xvcnNbcl1bMF0rXCJtXCIrZStcIlx1MDAxYltcIitpLmNvbG9yc1tyXVsxXStcIm1cIjplfWZ1bmN0aW9uIHMoZSx0KXtyZXR1cm4gZX1mdW5jdGlvbiBhKGUpe3ZhciB0PXt9O3JldHVybiBlLmZvckVhY2goZnVuY3Rpb24oZSxyKXt0W2VdPSEwfSksdH1mdW5jdGlvbiB1KGUsdCxuKXtpZihlLmN1c3RvbUluc3BlY3QmJnQmJkEodC5pbnNwZWN0KSYmdC5pbnNwZWN0IT09ci5pbnNwZWN0JiYoIXQuY29uc3RydWN0b3J8fHQuY29uc3RydWN0b3IucHJvdG90eXBlIT09dCkpe3ZhciBpPXQuaW5zcGVjdChuLGUpO3JldHVybiBiKGkpfHwoaT11KGUsaSxuKSksaX12YXIgbz1jKGUsdCk7aWYobylyZXR1cm4gbzt2YXIgcz1PYmplY3Qua2V5cyh0KSxtPWEocyk7aWYoZS5zaG93SGlkZGVuJiYocz1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KSksUih0KSYmKHMuaW5kZXhPZihcIm1lc3NhZ2VcIik+PTB8fHMuaW5kZXhPZihcImRlc2NyaXB0aW9uXCIpPj0wKSlyZXR1cm4gbCh0KTtpZigwPT09cy5sZW5ndGgpe2lmKEEodCkpe3ZhciB2PXQubmFtZT9cIjogXCIrdC5uYW1lOlwiXCI7cmV0dXJuIGUuc3R5bGl6ZShcIltGdW5jdGlvblwiK3YrXCJdXCIsXCJzcGVjaWFsXCIpfWlmKFModCkpcmV0dXJuIGUuc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCksXCJyZWdleHBcIik7aWYoQyh0KSlyZXR1cm4gZS5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCksXCJkYXRlXCIpO2lmKFIodCkpcmV0dXJuIGwodCl9dmFyIHk9XCJcIixnPSExLHc9W1wie1wiLFwifVwiXTtpZihkKHQpJiYoZz0hMCx3PVtcIltcIixcIl1cIl0pLEEodCkpe3k9XCIgW0Z1bmN0aW9uXCIrKHQubmFtZT9cIjogXCIrdC5uYW1lOlwiXCIpK1wiXVwifWlmKFModCkmJih5PVwiIFwiK1JlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSksQyh0KSYmKHk9XCIgXCIrRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh0KSksUih0KSYmKHk9XCIgXCIrbCh0KSksMD09PXMubGVuZ3RoJiYoIWd8fDA9PXQubGVuZ3RoKSlyZXR1cm4gd1swXSt5K3dbMV07aWYobjwwKXJldHVybiBTKHQpP2Uuc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCksXCJyZWdleHBcIik6ZS5zdHlsaXplKFwiW09iamVjdF1cIixcInNwZWNpYWxcIik7ZS5zZWVuLnB1c2godCk7dmFyIEU7cmV0dXJuIEU9Zz9wKGUsdCxuLG0scyk6cy5tYXAoZnVuY3Rpb24ocil7cmV0dXJuIGgoZSx0LG4sbSxyLGcpfSksZS5zZWVuLnBvcCgpLGYoRSx5LHcpfWZ1bmN0aW9uIGMoZSx0KXtpZihFKHQpKXJldHVybiBlLnN0eWxpemUoXCJ1bmRlZmluZWRcIixcInVuZGVmaW5lZFwiKTtpZihiKHQpKXt2YXIgcj1cIidcIitKU09OLnN0cmluZ2lmeSh0KS5yZXBsYWNlKC9eXCJ8XCIkL2csXCJcIikucmVwbGFjZSgvJy9nLFwiXFxcXCdcIikucmVwbGFjZSgvXFxcXFwiL2csJ1wiJykrXCInXCI7cmV0dXJuIGUuc3R5bGl6ZShyLFwic3RyaW5nXCIpfXJldHVybiBnKHQpP2Uuc3R5bGl6ZShcIlwiK3QsXCJudW1iZXJcIik6bSh0KT9lLnN0eWxpemUoXCJcIit0LFwiYm9vbGVhblwiKTp2KHQpP2Uuc3R5bGl6ZShcIm51bGxcIixcIm51bGxcIik6dm9pZCAwfWZ1bmN0aW9uIGwoZSl7cmV0dXJuXCJbXCIrRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkrXCJdXCJ9ZnVuY3Rpb24gcChlLHQscixuLGkpe2Zvcih2YXIgbz1bXSxzPTAsYT10Lmxlbmd0aDtzPGE7KytzKVAodCxTdHJpbmcocykpP28ucHVzaChoKGUsdCxyLG4sU3RyaW5nKHMpLCEwKSk6by5wdXNoKFwiXCIpO3JldHVybiBpLmZvckVhY2goZnVuY3Rpb24oaSl7aS5tYXRjaCgvXlxcZCskLyl8fG8ucHVzaChoKGUsdCxyLG4saSwhMCkpfSksb31mdW5jdGlvbiBoKGUsdCxyLG4saSxvKXt2YXIgcyxhLGM7aWYoYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsaSl8fHt2YWx1ZTp0W2ldfSxjLmdldD9hPWMuc2V0P2Uuc3R5bGl6ZShcIltHZXR0ZXIvU2V0dGVyXVwiLFwic3BlY2lhbFwiKTplLnN0eWxpemUoXCJbR2V0dGVyXVwiLFwic3BlY2lhbFwiKTpjLnNldCYmKGE9ZS5zdHlsaXplKFwiW1NldHRlcl1cIixcInNwZWNpYWxcIikpLFAobixpKXx8KHM9XCJbXCIraStcIl1cIiksYXx8KGUuc2Vlbi5pbmRleE9mKGMudmFsdWUpPDA/KGE9dihyKT91KGUsYy52YWx1ZSxudWxsKTp1KGUsYy52YWx1ZSxyLTEpLGEuaW5kZXhPZihcIlxcblwiKT4tMSYmKGE9bz9hLnNwbGl0KFwiXFxuXCIpLm1hcChmdW5jdGlvbihlKXtyZXR1cm5cIiAgXCIrZX0pLmpvaW4oXCJcXG5cIikuc3Vic3RyKDIpOlwiXFxuXCIrYS5zcGxpdChcIlxcblwiKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuXCIgICBcIitlfSkuam9pbihcIlxcblwiKSkpOmE9ZS5zdHlsaXplKFwiW0NpcmN1bGFyXVwiLFwic3BlY2lhbFwiKSksRShzKSl7aWYobyYmaS5tYXRjaCgvXlxcZCskLykpcmV0dXJuIGE7cz1KU09OLnN0cmluZ2lmeShcIlwiK2kpLHMubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pPyhzPXMuc3Vic3RyKDEscy5sZW5ndGgtMikscz1lLnN0eWxpemUocyxcIm5hbWVcIikpOihzPXMucmVwbGFjZSgvJy9nLFwiXFxcXCdcIikucmVwbGFjZSgvXFxcXFwiL2csJ1wiJykucmVwbGFjZSgvKF5cInxcIiQpL2csXCInXCIpLHM9ZS5zdHlsaXplKHMsXCJzdHJpbmdcIikpfXJldHVybiBzK1wiOiBcIithfWZ1bmN0aW9uIGYoZSx0LHIpe3ZhciBuPTA7cmV0dXJuIGUucmVkdWNlKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4rKyx0LmluZGV4T2YoXCJcXG5cIik+PTAmJm4rKyxlK3QucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csXCJcIikubGVuZ3RoKzF9LDApPjYwP3JbMF0rKFwiXCI9PT10P1wiXCI6dCtcIlxcbiBcIikrXCIgXCIrZS5qb2luKFwiLFxcbiAgXCIpK1wiIFwiK3JbMV06clswXSt0K1wiIFwiK2Uuam9pbihcIiwgXCIpK1wiIFwiK3JbMV19ZnVuY3Rpb24gZChlKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKX1mdW5jdGlvbiBtKGUpe3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgZX1mdW5jdGlvbiB2KGUpe3JldHVybiBudWxsPT09ZX1mdW5jdGlvbiB5KGUpe3JldHVybiBudWxsPT1lfWZ1bmN0aW9uIGcoZSl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGV9ZnVuY3Rpb24gYihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZX1mdW5jdGlvbiB3KGUpe3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiBlfWZ1bmN0aW9uIEUoZSl7cmV0dXJuIHZvaWQgMD09PWV9ZnVuY3Rpb24gUyhlKXtyZXR1cm4gXyhlKSYmXCJbb2JqZWN0IFJlZ0V4cF1cIj09PVQoZSl9ZnVuY3Rpb24gXyhlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWV9ZnVuY3Rpb24gQyhlKXtyZXR1cm4gXyhlKSYmXCJbb2JqZWN0IERhdGVdXCI9PT1UKGUpfWZ1bmN0aW9uIFIoZSl7cmV0dXJuIF8oZSkmJihcIltvYmplY3QgRXJyb3JdXCI9PT1UKGUpfHxlIGluc3RhbmNlb2YgRXJyb3IpfWZ1bmN0aW9uIEEoZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZX1mdW5jdGlvbiB4KGUpe3JldHVybiBudWxsPT09ZXx8XCJib29sZWFuXCI9PXR5cGVvZiBlfHxcIm51bWJlclwiPT10eXBlb2YgZXx8XCJzdHJpbmdcIj09dHlwZW9mIGV8fFwic3ltYm9sXCI9PXR5cGVvZiBlfHx2b2lkIDA9PT1lfWZ1bmN0aW9uIFQoZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX1mdW5jdGlvbiBJKGUpe3JldHVybiBlPDEwP1wiMFwiK2UudG9TdHJpbmcoMTApOmUudG9TdHJpbmcoMTApfWZ1bmN0aW9uIGsoKXt2YXIgZT1uZXcgRGF0ZSx0PVtJKGUuZ2V0SG91cnMoKSksSShlLmdldE1pbnV0ZXMoKSksSShlLmdldFNlY29uZHMoKSldLmpvaW4oXCI6XCIpO3JldHVybltlLmdldERhdGUoKSxOW2UuZ2V0TW9udGgoKV0sdF0uam9pbihcIiBcIil9ZnVuY3Rpb24gUChlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX12YXIgTD0vJVtzZGolXS9nO3IuZm9ybWF0PWZ1bmN0aW9uKGUpe2lmKCFiKGUpKXtmb3IodmFyIHQ9W10scj0wO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspdC5wdXNoKGkoYXJndW1lbnRzW3JdKSk7cmV0dXJuIHQuam9pbihcIiBcIil9Zm9yKHZhciByPTEsbj1hcmd1bWVudHMsbz1uLmxlbmd0aCxzPVN0cmluZyhlKS5yZXBsYWNlKEwsZnVuY3Rpb24oZSl7aWYoXCIlJVwiPT09ZSlyZXR1cm5cIiVcIjtpZihyPj1vKXJldHVybiBlO3N3aXRjaChlKXtjYXNlXCIlc1wiOnJldHVybiBTdHJpbmcobltyKytdKTtjYXNlXCIlZFwiOnJldHVybiBOdW1iZXIobltyKytdKTtjYXNlXCIlalwiOnRyeXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkobltyKytdKX1jYXRjaChlKXtyZXR1cm5cIltDaXJjdWxhcl1cIn1kZWZhdWx0OnJldHVybiBlfX0pLGE9bltyXTtyPG87YT1uWysrcl0pdihhKXx8IV8oYSk/cys9XCIgXCIrYTpzKz1cIiBcIitpKGEpO3JldHVybiBzfSxyLmRlcHJlY2F0ZT1mdW5jdGlvbihlLGkpe2Z1bmN0aW9uIG8oKXtpZighcyl7aWYodC50aHJvd0RlcHJlY2F0aW9uKXRocm93IG5ldyBFcnJvcihpKTt0LnRyYWNlRGVwcmVjYXRpb24/Y29uc29sZS50cmFjZShpKTpjb25zb2xlLmVycm9yKGkpLHM9ITB9cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfWlmKEUobi5wcm9jZXNzKSlyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gci5kZXByZWNhdGUoZSxpKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O2lmKCEwPT09dC5ub0RlcHJlY2F0aW9uKXJldHVybiBlO3ZhciBzPSExO3JldHVybiBvfTt2YXIgcSxPPXt9O3IuZGVidWdsb2c9ZnVuY3Rpb24oZSl7aWYoRShxKSYmKHE9dC5lbnYuTk9ERV9ERUJVR3x8XCJcIiksZT1lLnRvVXBwZXJDYXNlKCksIU9bZV0paWYobmV3IFJlZ0V4cChcIlxcXFxiXCIrZStcIlxcXFxiXCIsXCJpXCIpLnRlc3QocSkpe3ZhciBuPXQucGlkO09bZV09ZnVuY3Rpb24oKXt2YXIgdD1yLmZvcm1hdC5hcHBseShyLGFyZ3VtZW50cyk7Y29uc29sZS5lcnJvcihcIiVzICVkOiAlc1wiLGUsbix0KX19ZWxzZSBPW2VdPWZ1bmN0aW9uKCl7fTtyZXR1cm4gT1tlXX0sci5pbnNwZWN0PWksaS5jb2xvcnM9e2JvbGQ6WzEsMjJdLGl0YWxpYzpbMywyM10sdW5kZXJsaW5lOls0LDI0XSxpbnZlcnNlOls3LDI3XSx3aGl0ZTpbMzcsMzldLGdyZXk6WzkwLDM5XSxibGFjazpbMzAsMzldLGJsdWU6WzM0LDM5XSxjeWFuOlszNiwzOV0sZ3JlZW46WzMyLDM5XSxtYWdlbnRhOlszNSwzOV0scmVkOlszMSwzOV0seWVsbG93OlszMywzOV19LGkuc3R5bGVzPXtzcGVjaWFsOlwiY3lhblwiLG51bWJlcjpcInllbGxvd1wiLGJvb2xlYW46XCJ5ZWxsb3dcIix1bmRlZmluZWQ6XCJncmV5XCIsbnVsbDpcImJvbGRcIixzdHJpbmc6XCJncmVlblwiLGRhdGU6XCJtYWdlbnRhXCIscmVnZXhwOlwicmVkXCJ9LHIuaXNBcnJheT1kLHIuaXNCb29sZWFuPW0sci5pc051bGw9dixyLmlzTnVsbE9yVW5kZWZpbmVkPXksci5pc051bWJlcj1nLHIuaXNTdHJpbmc9YixyLmlzU3ltYm9sPXcsci5pc1VuZGVmaW5lZD1FLHIuaXNSZWdFeHA9UyxyLmlzT2JqZWN0PV8sci5pc0RhdGU9QyxyLmlzRXJyb3I9UixyLmlzRnVuY3Rpb249QSxyLmlzUHJpbWl0aXZlPXgsci5pc0J1ZmZlcj1lKFwiLi9zdXBwb3J0L2lzQnVmZmVyXCIpO3ZhciBOPVtcIkphblwiLFwiRmViXCIsXCJNYXJcIixcIkFwclwiLFwiTWF5XCIsXCJKdW5cIixcIkp1bFwiLFwiQXVnXCIsXCJTZXBcIixcIk9jdFwiLFwiTm92XCIsXCJEZWNcIl07ci5sb2c9ZnVuY3Rpb24oKXtjb25zb2xlLmxvZyhcIiVzIC0gJXNcIixrKCksci5mb3JtYXQuYXBwbHkocixhcmd1bWVudHMpKX0sci5pbmhlcml0cz1lKFwiaW5oZXJpdHNcIiksci5fZXh0ZW5kPWZ1bmN0aW9uKGUsdCl7aWYoIXR8fCFfKHQpKXJldHVybiBlO2Zvcih2YXIgcj1PYmplY3Qua2V5cyh0KSxuPXIubGVuZ3RoO24tLTspZVtyW25dXT10W3Jbbl1dO3JldHVybiBlfX0pLmNhbGwodGhpcyxlKFwiX3Byb2Nlc3NcIiksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHtcIi4vc3VwcG9ydC9pc0J1ZmZlclwiOjk3LF9wcm9jZXNzOjg2LGluaGVyaXRzOjk2fV0sOTk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi92MVwiKSxpPWUoXCIuL3Y0XCIpLG89aTtvLnYxPW4sby52ND1pLHQuZXhwb3J0cz1vfSx7XCIuL3YxXCI6MTAyLFwiLi92NFwiOjEwM31dLDEwMDpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oZSx0KXt2YXIgcj10fHwwLG49aTtyZXR1cm5bbltlW3IrK11dLG5bZVtyKytdXSxuW2VbcisrXV0sbltlW3IrK11dLFwiLVwiLG5bZVtyKytdXSxuW2VbcisrXV0sXCItXCIsbltlW3IrK11dLG5bZVtyKytdXSxcIi1cIixuW2VbcisrXV0sbltlW3IrK11dLFwiLVwiLG5bZVtyKytdXSxuW2VbcisrXV0sbltlW3IrK11dLG5bZVtyKytdXSxuW2VbcisrXV0sbltlW3IrK11dXS5qb2luKFwiXCIpfWZvcih2YXIgaT1bXSxvPTA7bzwyNTY7KytvKWlbb109KG8rMjU2KS50b1N0cmluZygxNikuc3Vic3RyKDEpO3QuZXhwb3J0cz1ufSx7fV0sMTAxOltmdW5jdGlvbihlLHQscil7dmFyIG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNyeXB0byYmY3J5cHRvLmdldFJhbmRvbVZhbHVlcyYmY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0byl8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtc0NyeXB0byYmXCJmdW5jdGlvblwiPT10eXBlb2Ygd2luZG93Lm1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyYmbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pO2lmKG4pe3ZhciBpPW5ldyBVaW50OEFycmF5KDE2KTt0LmV4cG9ydHM9ZnVuY3Rpb24oKXtyZXR1cm4gbihpKSxpfX1lbHNle3ZhciBvPW5ldyBBcnJheSgxNik7dC5leHBvcnRzPWZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9MDt0PDE2O3QrKykwPT0oMyZ0KSYmKGU9NDI5NDk2NzI5NipNYXRoLnJhbmRvbSgpKSxvW3RdPWU+Pj4oKDMmdCk8PDMpJjI1NTtyZXR1cm4gb319fSx7fV0sMTAyOltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlLHQscil7dmFyIG49dCYmcnx8MCxsPXR8fFtdO2U9ZXx8e307dmFyIHA9ZS5ub2RlfHxpLGg9dm9pZCAwIT09ZS5jbG9ja3NlcT9lLmNsb2Nrc2VxOm87aWYobnVsbD09cHx8bnVsbD09aCl7dmFyIGY9cygpO251bGw9PXAmJihwPWk9WzF8ZlswXSxmWzFdLGZbMl0sZlszXSxmWzRdLGZbNV1dKSxudWxsPT1oJiYoaD1vPTE2MzgzJihmWzZdPDw4fGZbN10pKX12YXIgZD12b2lkIDAhPT1lLm1zZWNzP2UubXNlY3M6KG5ldyBEYXRlKS5nZXRUaW1lKCksbT12b2lkIDAhPT1lLm5zZWNzP2UubnNlY3M6YysxLHY9ZC11KyhtLWMpLzFlNDtpZih2PDAmJnZvaWQgMD09PWUuY2xvY2tzZXEmJihoPWgrMSYxNjM4MyksKHY8MHx8ZD51KSYmdm9pZCAwPT09ZS5uc2VjcyYmKG09MCksbT49MWU0KXRocm93IG5ldyBFcnJvcihcInV1aWQudjEoKTogQ2FuJ3QgY3JlYXRlIG1vcmUgdGhhbiAxME0gdXVpZHMvc2VjXCIpO3U9ZCxjPW0sbz1oLGQrPTEyMjE5MjkyOGU1O3ZhciB5PSgxZTQqKDI2ODQzNTQ1NSZkKSttKSU0Mjk0OTY3Mjk2O2xbbisrXT15Pj4+MjQmMjU1LGxbbisrXT15Pj4+MTYmMjU1LGxbbisrXT15Pj4+OCYyNTUsbFtuKytdPTI1NSZ5O3ZhciBnPWQvNDI5NDk2NzI5NioxZTQmMjY4NDM1NDU1O2xbbisrXT1nPj4+OCYyNTUsbFtuKytdPTI1NSZnLGxbbisrXT1nPj4+MjQmMTV8MTYsbFtuKytdPWc+Pj4xNiYyNTUsbFtuKytdPWg+Pj44fDEyOCxsW24rK109MjU1Jmg7Zm9yKHZhciBiPTA7Yjw2OysrYilsW24rYl09cFtiXTtyZXR1cm4gdHx8YShsKX12YXIgaSxvLHM9ZShcIi4vbGliL3JuZ1wiKSxhPWUoXCIuL2xpYi9ieXRlc1RvVXVpZFwiKSx1PTAsYz0wO3QuZXhwb3J0cz1ufSx7XCIuL2xpYi9ieXRlc1RvVXVpZFwiOjEwMCxcIi4vbGliL3JuZ1wiOjEwMX1dLDEwMzpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oZSx0LHIpe3ZhciBuPXQmJnJ8fDA7XCJzdHJpbmdcIj09dHlwZW9mIGUmJih0PVwiYmluYXJ5XCI9PT1lP25ldyBBcnJheSgxNik6bnVsbCxlPW51bGwpLGU9ZXx8e307dmFyIHM9ZS5yYW5kb218fChlLnJuZ3x8aSkoKTtpZihzWzZdPTE1JnNbNl18NjQsc1s4XT02MyZzWzhdfDEyOCx0KWZvcih2YXIgYT0wO2E8MTY7KythKXRbbithXT1zW2FdO3JldHVybiB0fHxvKHMpfXZhciBpPWUoXCIuL2xpYi9ybmdcIiksbz1lKFwiLi9saWIvYnl0ZXNUb1V1aWRcIik7dC5leHBvcnRzPW59LHtcIi4vbGliL2J5dGVzVG9VdWlkXCI6MTAwLFwiLi9saWIvcm5nXCI6MTAxfV0sMTA0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZShcIi4vdXRpbHMvTFJVXCIpLGk9MWUzLG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZvaWQgMD09PWUmJihlPWkpLHRoaXMubWF4U2l6ZT1lLHRoaXMuY2FjaGU9bmV3IG4uTFJVQ2FjaGUoZSl9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2FjaGUubGVuZ3RofSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLnB1dD1mdW5jdGlvbih0LHIpe3ZhciBuPVwic3RyaW5nXCIhPXR5cGVvZiB0P2UuZ2V0S2V5U3RyaW5nKHQpOnQsaT10aGlzLnBvcHVsYXRlVmFsdWUocik7dGhpcy5jYWNoZS5wdXQobixpKX0sZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKHQpe3ZhciByPVwic3RyaW5nXCIhPXR5cGVvZiB0P2UuZ2V0S2V5U3RyaW5nKHQpOnQsbj1EYXRlLm5vdygpLGk9dGhpcy5jYWNoZS5nZXQocik7aWYoaSlmb3IodmFyIG89MDtvPGkubGVuZ3RoO28rKyl7dmFyIHM9aVtvXTtpZihzLkV4cGlyZTxuKXJldHVybiB2b2lkIHRoaXMuY2FjaGUucmVtb3ZlKHIpfXJldHVybiBpfSxlLmdldEtleVN0cmluZz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10scj1PYmplY3Qua2V5cyhlKS5zb3J0KCksbj0wO248ci5sZW5ndGg7bisrKXt2YXIgaT1yW25dO3ZvaWQgMCE9PWVbaV0mJnQucHVzaChlW2ldKX1yZXR1cm4gdC5qb2luKFwiIFwiKX0sZS5wcm90b3R5cGUucG9wdWxhdGVWYWx1ZT1mdW5jdGlvbihlKXt2YXIgdD1EYXRlLm5vdygpO3JldHVybiBlLm1hcChmdW5jdGlvbihlKXtyZXR1cm57QWRkcmVzczplLkFkZHJlc3N8fFwiXCIsRXhwaXJlOnQrNjAqKGUuQ2FjaGVQZXJpb2RJbk1pbnV0ZXN8fDEpKjFlM319KX0sZS5wcm90b3R5cGUuZW1wdHk9ZnVuY3Rpb24oKXt0aGlzLmNhY2hlLmVtcHR5KCl9LGUucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbih0KXt2YXIgcj1cInN0cmluZ1wiIT10eXBlb2YgdD9lLmdldEtleVN0cmluZyh0KTp0O3RoaXMuY2FjaGUucmVtb3ZlKHIpfSxlfSgpO3IuRW5kcG9pbnRDYWNoZT1vfSx7XCIuL3V0aWxzL0xSVVwiOjEwNX1dLDEwNTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3RoaXMua2V5PWUsdGhpcy52YWx1ZT10fXJldHVybiBlfSgpLGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe2lmKHRoaXMubm9kZU1hcD17fSx0aGlzLnNpemU9MCxcIm51bWJlclwiIT10eXBlb2YgZXx8ZTwxKXRocm93IG5ldyBFcnJvcihcIkNhY2hlIHNpemUgY2FuIG9ubHkgYmUgcG9zaXRpdmUgbnVtYmVyXCIpO3RoaXMuc2l6ZUxpbWl0PWV9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImxlbmd0aFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaXplfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLnByZXBlbmRUb0xpc3Q9ZnVuY3Rpb24oZSl7dGhpcy5oZWFkZXJOb2RlPyh0aGlzLmhlYWRlck5vZGUucHJldj1lLGUubmV4dD10aGlzLmhlYWRlck5vZGUpOnRoaXMudGFpbE5vZGU9ZSx0aGlzLmhlYWRlck5vZGU9ZSx0aGlzLnNpemUrK30sZS5wcm90b3R5cGUucmVtb3ZlRnJvbVRhaWw9ZnVuY3Rpb24oKXtpZih0aGlzLnRhaWxOb2RlKXt2YXIgZT10aGlzLnRhaWxOb2RlLHQ9ZS5wcmV2O3JldHVybiB0JiYodC5uZXh0PXZvaWQgMCksZS5wcmV2PXZvaWQgMCx0aGlzLnRhaWxOb2RlPXQsdGhpcy5zaXplLS0sZX19LGUucHJvdG90eXBlLmRldGFjaEZyb21MaXN0PWZ1bmN0aW9uKGUpe3RoaXMuaGVhZGVyTm9kZT09PWUmJih0aGlzLmhlYWRlck5vZGU9ZS5uZXh0KSx0aGlzLnRhaWxOb2RlPT09ZSYmKHRoaXMudGFpbE5vZGU9ZS5wcmV2KSxlLnByZXYmJihlLnByZXYubmV4dD1lLm5leHQpLGUubmV4dCYmKGUubmV4dC5wcmV2PWUucHJldiksZS5uZXh0PXZvaWQgMCxlLnByZXY9dm9pZCAwLHRoaXMuc2l6ZS0tfSxlLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oZSl7aWYodGhpcy5ub2RlTWFwW2VdKXt2YXIgdD10aGlzLm5vZGVNYXBbZV07cmV0dXJuIHRoaXMuZGV0YWNoRnJvbUxpc3QodCksdGhpcy5wcmVwZW5kVG9MaXN0KHQpLHQudmFsdWV9fSxlLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oZSl7aWYodGhpcy5ub2RlTWFwW2VdKXt2YXIgdD10aGlzLm5vZGVNYXBbZV07dGhpcy5kZXRhY2hGcm9tTGlzdCh0KSxkZWxldGUgdGhpcy5ub2RlTWFwW2VdfX0sZS5wcm90b3R5cGUucHV0PWZ1bmN0aW9uKGUsdCl7aWYodGhpcy5ub2RlTWFwW2VdKXRoaXMucmVtb3ZlKGUpO2Vsc2UgaWYodGhpcy5zaXplPT09dGhpcy5zaXplTGltaXQpe3ZhciByPXRoaXMucmVtb3ZlRnJvbVRhaWwoKSxpPXIua2V5O2RlbGV0ZSB0aGlzLm5vZGVNYXBbaV19dmFyIG89bmV3IG4oZSx0KTt0aGlzLm5vZGVNYXBbZV09byx0aGlzLnByZXBlbmRUb0xpc3Qobyl9LGUucHJvdG90eXBlLmVtcHR5PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPU9iamVjdC5rZXlzKHRoaXMubm9kZU1hcCksdD0wO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgcj1lW3RdLG49dGhpcy5ub2RlTWFwW3JdO3RoaXMuZGV0YWNoRnJvbUxpc3QobiksZGVsZXRlIHRoaXMubm9kZU1hcFtyXX19LGV9KCk7ci5MUlVDYWNoZT1pfSx7fV0sMTA2OltmdW5jdGlvbihlLHQscil7ZShcIi4vYnJvd3Nlcl9sb2FkZXJcIik7dmFyIG49ZShcIi4vY29yZVwiKTtcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYod2luZG93LkFXUz1uKSx2b2lkIDAhPT10JiYodC5leHBvcnRzPW4pLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiYoc2VsZi5BV1M9biksT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sXCJDb25uZWN0UGFydGljaXBhbnRcIil8fChuLmFwaUxvYWRlci5zZXJ2aWNlcy5jb25uZWN0cGFydGljaXBhbnQ9e30sbi5Db25uZWN0UGFydGljaXBhbnQ9bi5TZXJ2aWNlLmRlZmluZVNlcnZpY2UoXCJjb25uZWN0cGFydGljaXBhbnRcIixbXCIyMDE4LTA5LTA3XCJdKSksbi5hcGlMb2FkZXIuc2VydmljZXMuY29ubmVjdHBhcnRpY2lwYW50W1wiMjAxOC0wOS0wN1wiXT1lKFwiLi4vYXBpcy9jb25uZWN0cGFydGljaXBhbnQtMjAxOC0wOS0wNy5taW5cIiksbi5hcGlMb2FkZXIuc2VydmljZXMuY29ubmVjdHBhcnRpY2lwYW50W1wiMjAxOC0wOS0wN1wiXS5wYWdpbmF0b3JzPWUoXCIuLi9hcGlzL2Nvbm5lY3RwYXJ0aWNpcGFudC0yMDE4LTA5LTA3LnBhZ2luYXRvcnNcIikucGFnaW5hdGlvbixPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixcIlNUU1wiKXx8KG4uYXBpTG9hZGVyLnNlcnZpY2VzLnN0cz17fSxuLlNUUz1uLlNlcnZpY2UuZGVmaW5lU2VydmljZShcInN0c1wiLFtcIjIwMTEtMDYtMTVcIl0pLGUoXCIuL3NlcnZpY2VzL3N0c1wiKSksbi5hcGlMb2FkZXIuc2VydmljZXMuc3RzPWUoXCIuLi9hcGlzL3N0cy0yMDExLTA2LTE1Lm1pblwiKX0se1wiLi4vYXBpcy9jb25uZWN0cGFydGljaXBhbnQtMjAxOC0wOS0wNy5taW5cIjozLFwiLi4vYXBpcy9jb25uZWN0cGFydGljaXBhbnQtMjAxOC0wOS0wNy5wYWdpbmF0b3JzXCI6NCxcIi4uL2FwaXMvc3RzLTIwMTEtMDYtMTUubWluXCI6NixcIi4vYnJvd3Nlcl9sb2FkZXJcIjoxNyxcIi4vY29yZVwiOjE5LFwiLi9zZXJ2aWNlcy9zdHNcIjo2Mn1dfSx7fSxbMTA2XSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9