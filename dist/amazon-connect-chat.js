!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){var o;!function(){"use strict";var r={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function i(e){return function(e,t){var n,o,s,c,a,u,l,f,h,p=1,d=e.length,g="";for(o=0;o<d;o++)if("string"==typeof e[o])g+=e[o];else if("object"==typeof e[o]){if((c=e[o]).keys)for(n=t[p],s=0;s<c.keys.length;s++){if(null==n)throw new Error(i('[sprintf] Cannot access property "%s" of undefined value "%s"',c.keys[s],c.keys[s-1]));n=n[c.keys[s]]}else n=c.param_no?t[c.param_no]:t[p++];if(r.not_type.test(c.type)&&r.not_primitive.test(c.type)&&n instanceof Function&&(n=n()),r.numeric_arg.test(c.type)&&"number"!=typeof n&&isNaN(n))throw new TypeError(i("[sprintf] expecting number but found %T",n));switch(r.number.test(c.type)&&(f=n>=0),c.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,c.width?parseInt(c.width):0);break;case"e":n=c.precision?parseFloat(n).toExponential(c.precision):parseFloat(n).toExponential();break;case"f":n=c.precision?parseFloat(n).toFixed(c.precision):parseFloat(n);break;case"g":n=c.precision?String(Number(n.toPrecision(c.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=c.precision?n.substring(0,c.precision):n;break;case"t":n=String(!!n),n=c.precision?n.substring(0,c.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=c.precision?n.substring(0,c.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=c.precision?n.substring(0,c.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}r.json.test(c.type)?g+=n:(!r.number.test(c.type)||f&&!c.sign?h="":(h=f?"+":"-",n=n.toString().replace(r.sign,"")),u=c.pad_char?"0"===c.pad_char?"0":c.pad_char.charAt(1):" ",l=c.width-(h+n).length,a=c.width&&l>0?u.repeat(l):"",g+=c.align?h+n+a:"0"===u?h+a+n:a+h+n)}return g}(function(e){if(c[e])return c[e];var t,n=e,o=[],i=0;for(;n;){if(null!==(t=r.text.exec(n)))o.push(t[0]);else if(null!==(t=r.modulo.exec(n)))o.push("%");else{if(null===(t=r.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){i|=1;var s=[],a=t[2],u=[];if(null===(u=r.key.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(s.push(u[1]);""!==(a=a.substring(u[0].length));)if(null!==(u=r.key_access.exec(a)))s.push(u[1]);else{if(null===(u=r.index_access.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");s.push(u[1])}t[2]=s}else i|=2;if(3===i)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");o.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return c[e]=o}(e),arguments)}function s(e,t){return i.apply(null,[e].concat(t||[]))}var c=Object.create(null);t.sprintf=i,t.vsprintf=s,"undefined"!=typeof window&&(window.sprintf=i,window.vsprintf=s,void 0===(o=function(){return{sprintf:i,vsprintf:s}}.call(t,n,t,e))||(e.exports=o))}()},function(e,t,n){"use strict";function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}function c(e){var t="function"==typeof Map?new Map:void 0;return(c=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,o)}function o(){return a(e,arguments,l(this).constructor)}return o.prototype=Object.create(e.prototype,{constructor:{value:o,enumerable:!1,writable:!0,configurable:!0}}),u(o,e)})(e)}function a(e,t,n){return(a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()?Reflect.construct:function(e,t,n){var o=[null];o.push.apply(o,t);var r=new(Function.bind.apply(e,o));return n&&u(r,n.prototype),r}).apply(null,arguments)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var f=function(e){function t(e){var n;return r(this,t),(n=i(this,l(t).call(this,e))).name="ValueError",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,c(Error)),t}(),h=function(e){function t(e){var n;return r(this,t),(n=i(this,l(t).call(this,e))).name="UnImplementedMethod",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,c(Error)),t}(),p=function(e){function t(e,n){var o;return r(this,t),(o=i(this,l(t).call(this,e))).name="IllegalArgument",o.argument=n,console.log("EXCEPTION: "+o.name+" MESSAGE: "+o.message),o}return s(t,c(Error)),t}(),d=function(e){function t(e){var n;return r(this,t),(n=i(this,l(t).call(this,e))).name="IllegalState",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,c(Error)),t}(),g=function(e,t,n){var o=new XMLHttpRequest;o.open(e.method||"GET",e.url),e.headers&&Object.keys(e.headers).forEach(function(t){o.setRequestHeader(t,e.headers[t])}),o.onload=function(){o.status>=200&&o.status<300?t(o):n(o)},o.onerror=function(){return n(o)},o.send(e.body)};function y(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var v=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,o;return t=e,(n=[{key:"update",value:function(e){var t=e||{};this.region=t.region||this.region,this.endpointOverride=t.endpoint||this.endpointOverride,this.reconnect=t.reconnect||!1,this.reconnectInterval=t.reconnectInterval||1e3,this.maxReconnectAttempts=t.maxReconnectAttempts||30}},{key:"getRegion",value:function(){return this.region}},{key:"getEndpointOverride",value:function(){return this.endpointOverride}}])&&y(t.prototype,n),o&&y(t,o),e}()),b=n(0);function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var C={assertTrue:function(e,t){if(!e)throw new f(t)},assertNotNull:function(e,t){return C.assertTrue(null!==e&&void 0!==_(e),Object(b.sprintf)("%s must be provided",t||"A value")),e},now:function(){return(new Date).getTime()},isString:function(e){return"string"==typeof e},randomId:function(){return Object(b.sprintf)("%s-%s",C.now(),Math.random().toString(36).slice(2))},assertIsNonEmptyString:function(e,t){if(!e||"string"!=typeof e)throw new p(t+" is not a non-empty string!")},assertIsList:function(e,t){if(!Array.isArray(e))throw new p(t+" is not an array")},assertIsEnum:function(e,t,n){var o;for(o=0;o<t.length;o++)if(t[o]===e)return;throw new p(n+" passed is not valid. Allowed values are: "+t)},makeEnum:function(e){var t={};return e.forEach(function(e){var n=e.replace(/\.?([a-z]+)_?/g,function(e,t){return t.toUpperCase()+"_"}).replace(/_$/,"");t[n]=e}),t},contains:function(e,t){return e instanceof Array?null!==C.find(e,function(e){return e===t}):t in e},find:function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return e[n];return null},containsValue:function(e,t){return e instanceof Array?null!==C.find(e,function(e){return e===t}):null!==C.find(C.values(e),function(e){return e===t})},isFunction:function(e){return!!(e&&e.constructor&&e.call&&e.apply)},values:function(e){var t=[];for(var n in C.assertNotNull(e,"map"),e)t.push(e[n]);return t},isObject:function(e){return!("object"!==_(e)||null===e)},assertIsObject:function(e,t){if(!C.isObject(e))throw new p(t+" is not an object!")},delay:function(e){return new Promise(function(t){return setTimeout(t,e)})},asyncWhileInterval:function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,r=new Date;return t(o)?e(o).catch(function(){var i=Math.max(0,n-(new Date).valueOf()+r.valueOf());return C.delay(i).then(function(){return C.asyncWhileInterval(e,t,n,o+1)})}):Promise.reject(new Error("async while aborted"))}},w=C,m="/contact/chat/participant/message",E="/contact/chat/participant/transcript",S="/contact/chat/participant/event",I="/contact/chat/participant/disconnect",k="/contact/chat/participant/connection-details",O="post",T="PERSISTED",N={textPlain:"text/plain"},A=w.makeEnum(["ALL","MANAGER","AGENT","CUSTOMER","THIRDPARTY"]),M=w.makeEnum(["PERSISTED","NON_PERSISTED"]),P={"us-west-2":{invokeUrl:"https://eap1w93j0k.execute-api.us-west-2.amazonaws.com/prod"},"us-east-1":{invokeUrl:"https://4agcjusx3k.execute-api.us-east-1.amazonaws.com/prod"},"ap-southeast-2":{invokeUrl:"https://v4u8oq0cve.execute-api.ap-southeast-2.amazonaws.com/prod"},"ap-northeast-1":{invokeUrl:"https://3fidunfyz7.execute-api.ap-northeast-1.amazonaws.com/prod"},"eu-central-1":{invokeUrl:"https://1gynaarm3e.execute-api.eu-central-1.amazonaws.com/prod"}},D=30,U=60,R={AGENT:"AGENT",CUSTOMER:"CUSTOMER"},L="INCOMING_MESSAGE",x="INCOMING_TYPING",j="CONNECTION_ESTABLISHED",B="CONNECTION_BROKEN",q=15,F="ASCENDING",V="BACKWARD",G="NULL",H="CLIENT_LOGGER",K="DEBUG",Q="us-west-2";function J(e){return(J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function z(e,t){return!t||"object"!==J(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Y(e){return(Y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function W(e,t){return(W=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function X(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function $(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Z(e,t,n){return t&&$(e.prototype,t),n&&$(e,n),e}var ee=function(){function e(){X(this,e)}return Z(e,[{key:"debug",value:function(e){}},{key:"info",value:function(e){}},{key:"warn",value:function(e){}},{key:"error",value:function(e){}}]),e}(),te={DEBUG:10,INFO:20,WARN:30,ERROR:40},ne=function(){function e(){X(this,e),this.updateLoggerConfig(),this.consoleLoggerWrapper=ie()}return Z(e,[{key:"writeToClientLogger",value:function(e,t){if(this.hasClientLogger())switch(e){case te.DEBUG:return this._clientLogger.debug(t);case te.INFO:return this._clientLogger.info(t);case te.WARN:return this._clientLogger.warn(t);case te.ERROR:return this._clientLogger.error(t)}}},{key:"isLevelEnabled",value:function(e){return e>=this._level}},{key:"hasClientLogger",value:function(){return null!==this._clientLogger}},{key:"getLogger",value:function(e){var t=e.prefix||"";return this._logsDestination===K?this.consoleLoggerWrapper:new re(t)}},{key:"updateLoggerConfig",value:function(e){var t=e||{};this._level=t.level||te.INFO,this._clientLogger=t.logger||null,this._logsDestination=G,t.debug&&(this._logsDestination=K),t.logger&&(this._logsDestination=H)}}]),e}(),oe=function(){function e(){X(this,e)}return Z(e,[{key:"debug",value:function(){}},{key:"info",value:function(){}},{key:"warn",value:function(){}},{key:"error",value:function(){}}]),e}(),re=function(e){function t(e){var n;return X(this,t),(n=z(this,Y(t).call(this))).prefix=e||"",n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&W(e,t)}(t,oe),Z(t,[{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(te.DEBUG,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(te.INFO,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(te.WARN,t)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(te.ERROR,t)}},{key:"_shouldLog",value:function(e){return se.hasClientLogger()&&se.isLevelEnabled(e)}},{key:"_writeToClientLogger",value:function(e,t){se.writeToClientLogger(e,t)}},{key:"_log",value:function(e,t){if(this._shouldLog(e)){var n=this._convertToSingleStatement(t);this._writeToClientLogger(e,n)}}},{key:"_convertToSingleStatement",value:function(e){var t="";this.prefix&&(t+=this.prefix+" ");for(var n=0;n<e.length;n++){var o=e[n];t+=this._convertToString(o)+" "}return t}},{key:"_convertToString",value:function(e){try{if(!e)return"";if(w.isString(e))return e;if(w.isObject(e)&&w.isFunction(e.toString)){var t=e.toString();if("[object Object]"!==t)return t}return JSON.stringify(e)}catch(t){return console.error("Error while converting argument to string",e,t),""}}}]),t}(),ie=function(){var e=new oe;return e.debug=console.debug.bind(window.console),e.info=console.info.bind(window.console),e.warn=console.warn.bind(window.console),e.error=console.error.bind(window.console),e},se=new ne;function ce(e){return(ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ae(e,t){return!t||"object"!==ce(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ue(e){return(ue=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function le(e,t){return(le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function fe(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function he(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function pe(e,t,n){return t&&he(e.prototype,t),n&&he(e,n),e}var de=function(){function e(){fe(this,e),this.clientCache={}}return pe(e,[{key:"getCachedClient",value:function(e){var t=Object.assign({},e),n=e.region||v.getRegion()||Q;if(t.region=n,this.clientCache[n])return this.clientCache[n];var o=this._createClient(t);return this.clientCache[n]=o,o}},{key:"_createClient",value:function(e){var t=e.region,n=v.getEndpointOverride(),o=P[t];return n&&(o.invokeUrl=n),new ye({stageConfig:o})}}]),e}(),ge=function(){function e(){fe(this,e)}return pe(e,[{key:"sendMessage",value:function(e,t,n){throw new h("sendTextMessage in ChatClient")}},{key:"disconnectChat",value:function(e){throw new h("disconnectChat in ChatClient")}},{key:"sendEvent",value:function(e,t,n,o){throw new h("sendEvent in ChatClient")}},{key:"createConnectionDetails",value:function(e){throw new h("reconnectChat in ChatClient")}}]),e}(),ye=function(e){function t(e){var n;return fe(this,t),(n=ae(this,ue(t).call(this))).invokeUrl=e.stageConfig.invokeUrl,n.callHttpClient=g,n.logger=se.getLogger({prefix:"ChatClient"}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&le(e,t)}(t,ge),pe(t,[{key:"sendMessage",value:function(e,t,n){console.log(n);var o={Message:{ContentType:N.textPlain,Content:t,Persistence:T}},r={method:O,headers:{},url:this.invokeUrl+m,body:o};return r.headers["x-amzn-connect-connection-token"]=e,this._callHttpClient(r)}},{key:"getTranscript",value:function(e,t){var n={method:O,headers:{},url:this.invokeUrl+E,body:t};return n.headers["x-amzn-connect-connection-token"]=e,this._callHttpClient(n)}},{key:"sendEvent",value:function(e,t,n,o,r){console.log(n),console.log(r);var i={ParticipantEvent:{Visibility:o,ParticipantEventType:t}},s={method:O,headers:{},url:this.invokeUrl+S,body:i};return s.headers["x-amzn-connect-connection-token"]=e,this._callHttpClient(s)}},{key:"disconnectChat",value:function(e){var t={method:O,headers:{},url:this.invokeUrl+I,body:{}};return t.headers["x-amzn-connect-connection-token"]=e,this._callHttpClient(t)}},{key:"createConnectionDetails",value:function(e){var t={method:O,headers:{},url:this.invokeUrl+k,body:{}};return t.headers["x-amzn-connect-participant-token"]=e,this._callHttpClient(t)}},{key:"_callHttpClient",value:function(e){var t=this;return e.headers=Object.assign({"Content-Type":"application/json",Accept:"application/json"},e.headers),e.body=JSON.stringify(e.body),new Promise(function(n,o){t.callHttpClient(e,function(e){var t={};t.data=JSON.parse(e.responseText),n(t)},function(e){var n={};n.statusText=e.statusText;try{n.error=JSON.parse(e.responseText)}catch(e){t.logger.warn("invalid json error from server"),n.error=null}o(n)})})}}]),t}(),ve=new de;function be(e){return(be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _e(e,t){return!t||"object"!==be(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ce(e){return(Ce=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function we(e,t){return(we=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function me(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ee(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Se(e,t,n){return t&&Ee(e.prototype,t),n&&Ee(e,n),e}var Ie=function(){function e(){me(this,e)}return Se(e,[{key:"validateNewControllerDetails",value:function(e){return!0}},{key:"validateSendMessage",value:function(e,t){w.isString(e)||w.assertIsObject(e,"message"),w.assertIsEnum(t,Object.values(N),"type")}},{key:"validateConnectChat",value:function(e){return!0}},{key:"validateLogger",value:function(e){w.assertIsObject(e,"logger"),["debug","info","warn","error"].forEach(function(t){if(!w.isFunction(e[t]))throw new p(t+" should be a valid function on the passed logger object!")})}},{key:"validateSendEvent",value:function(e){w.assertIsNonEmptyString(e.eventType,"eventType"),void 0!==e.messageIds&&w.assertIsList(e.messageIds),void 0!==e.visibility&&w.assertIsEnum(e.visibility,Object.values(A),"visibility"),void 0!==e.persistence&&w.assertIsEnum(e.persistence,Object.values(M),"persistence")}},{key:"validateGetMessages",value:function(e){return!0}}]),e}(),ke=function(e){function t(){return me(this,t),_e(this,Ce(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&we(e,t)}(t,Ie),Se(t,[{key:"validateChatDetails",value:function(e){w.assertIsObject(e,"chatDetails"),w.assertIsNonEmptyString(e.initialContactId,"chatDetails.initialContactId"),w.assertIsNonEmptyString(e.contactId,"chatDetails.contactId"),w.assertIsNonEmptyString(e.participantId,"chatDetails.participantId"),e.connectionDetails?(w.assertIsObject(e.connectionDetails,"chatDetails.connectionDetails"),w.assertIsNonEmptyString(e.connectionDetails.PreSignedConnectionUrl,"chatDetails.connectionDetails.PreSignedConnectionUrl"),w.assertIsNonEmptyString(e.connectionDetails.ConnectionId,"chatDetails.connectionDetails.ConnectionId"),w.assertIsNonEmptyString(e.connectionDetails.connectionToken,"chatDetails.connectionDetails.connectionToken")):w.assertIsNonEmptyString(e.participantToken,"chatDetails.participantToken")}},{key:"validateInitiateChatResponse",value:function(){return!0}}]),t}(),Oe=n(3),Te=n.n(Oe);function Ne(e){return(Ne="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ae(e){return(Ae=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Me(e,t){return(Me=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Pe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function De(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ue(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Re(e,t,n){return t&&Ue(e.prototype,t),n&&Ue(e,n),e}var Le=function(){function e(){De(this,e)}return Re(e,[{key:"createNewMqttConnectionProvider",value:function(e,t){switch(t){case"PahoMqttConnection":return function(t){return e.callback=t,new qe(e)}}throw new p("type in ChatConnectionManager.createNewMqttConnectionProvider",t)}}]),e}(),xe=function(){function e(){De(this,e)}return Re(e,[{key:"connect",value:function(e){throw new h("connect in IotClient")}},{key:"disconnect",value:function(){throw new h("connect in IotClient")}},{key:"subscribe",value:function(e,t){throw new h("connect in IotClient")}},{key:"unsubscribe",value:function(e,t){throw new h("connect in IotClient")}}]),e}(),je=Object.freeze({NeverConnected:"NeverConnected",Connecting:"Connecting",Connected:"Connected",Disconnected:"Disconnected"}),Be=Object.freeze({MESSAGE:"Message",DISCONNECTED:"Disconnected"}),qe=function(e){function t(e){var n;De(this,t),(n=function(e,t){return!t||"object"!==Ne(t)&&"function"!=typeof t?Pe(e):t}(this,Ae(t).call(this))).preSignedUrl=e.preSignedUrl,n.connectionId=e.connectionId,n.status=je.NeverConnected,n.pahoClient=new Te.a.Client(n.preSignedUrl,n.connectionId);var o=Pe(Pe(n));return n.pahoClient.onMessageArrived=function(e){o._messageArrivedCallback(e)},n.pahoClient.onConnectionLost=function(e){o._connectionLostCallBack(e)},n.pahoClient.onMessageArrived=function(e){o._messageArrivedCallback(e)},n.callback=e.callback,n.neverConnected=!0,n._subscribedTopics=[],n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Me(e,t)}(t,xe),Re(t,[{key:"connect",value:function(e){var t=this;return new Promise(function(n,o){e.onSuccess=function(e){t.neverConnected=!1,t._onConnectSuccess(e),n({})},e.onFailure=function(e){var n={reason:e};t._onConnectFailure(n),o(n)},t.status=je.Connecting,t.pahoClient.connect(e)})}},{key:"_connectionLostCallBack",value:function(e){var t={reason:e};this._subscribedTopics=[],this.status!==je.Disconnected&&(this.status=je.Disconnected,this.callback(Be.DISCONNECTED,t))}},{key:"_messageArrivedCallback",value:function(e){var t={topic:e.topic,qos:e.qos,payloadString:e.payloadString};this.callback(Be.MESSAGE,t)}},{key:"_onConnectSuccess",value:function(e){this.status=je.Connected}},{key:"_onConnectFailure",value:function(e){this.neverConnected?this.status=je.NeverConnected:this.status=je.Disconnected}},{key:"disconnect",value:function(){this._subscribedTopics=[],this.status=je.Disconnected,this.pahoClient.disconnect()}},{key:"subscribe",value:function(e,t){var n=this;return new Promise(function(o,r){t.onSuccess=function(t){n._subscribeSuccess(e,t);var r={topic:e,qos:t.grantedQos};o(r)},t.onFailure=function(t){r({topic:e,error:t})},n.pahoClient.subscribe(e,t)})}},{key:"_addToTopics",value:function(e){this._subscribedTopics.indexOf(e)>=0||this._subscribedTopics.push(e)}},{key:"_subscribeSuccess",value:function(e,t){this._addToTopics(e)}},{key:"getSubscribedTopics",value:function(){return this._subscribedTopics.slice(0)}},{key:"unsubscribe",value:function(e,t){var n=this;return new Promise(function(o,r){t.onSuccess=function(t){var r={topic:e,response:t};n._unsubscribeSuccess(e,r),o(r)},t.onFailure=function(t){r({topic:e,error:t})},n.pahoClient.unsubscribe(e,t)})}},{key:"_unsubscribeSuccess",value:function(e,t){this._subscribedTopics=this._subscribedTopics.filter(function(t){return t!==e})}},{key:"getStatus",value:function(){return this.status}}]),t}();function Fe(e){return(Fe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ve(e,t){return!t||"object"!==Fe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ge(e){return(Ge=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function He(e,t){return(He=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ke(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Qe(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Je(e,t,n){return t&&Qe(e.prototype,t),n&&Qe(e,n),e}var ze=function(){function e(){Ke(this,e)}return Je(e,[{key:"start",value:function(e){throw new h("start in ConnectionHelper")}},{key:"end",value:function(){throw new h("end in ConnectionHelper")}}]),e}(),Ye={NeverStarted:"NeverStarted",Starting:"Starting",Connected:"Connected",Ended:"Ended"},We="Ended",Xe="IncomingMessage",$e=function(e){function t(e){var n;Ke(this,t),n=Ve(this,Ge(t).call(this));var o="ContactId-"+e.contactId+": ";if(n.logger=se.getLogger({prefix:o}),n.preSignedUrl=e.connectionDetails.preSignedUrl,n.topic=e.connectionDetails.connectionId,n.considerParticipantAsDisconnected=!1,n.iotConnection=e.mqttConnectionProvider(function(e,t){return n._handleIotEvent(e,t)}),n.iotConnection.getStatus()!==je.NeverConnected)throw new p("iotConnection is expected to be in NeverConnected state but is not")();return n.chatControllerCallback=e.callback,n.status=Ye.NeverStarted,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&He(e,t)}(t,ze),Je(t,[{key:"cleanUpOnParticipantDisconnect",value:function(){this.considerParticipantAsDisconnected=!0}},{key:"start",value:function(){if(this.status!==Ye.NeverStarted)throw new d("Connection helper started twice!!");return this.status=Ye.Starting,new Promise(this._createStartPromise())}},{key:"_createStartPromise",value:function(){var e=this;return function(t,n){e._connect(t,n)}}},{key:"_connect",value:function(e,t){var n=this,o={useSSL:!0,keepAliveInterval:D,reconnect:!1,mqttVersion:4,timeout:U};n.iotConnection.connect(o).then(function(o){n._postConnect(e,t,o)}).catch(function(e){n._connectFailed(t,e)})}},{key:"_postConnect",value:function(e,t,n){this._subscribe(e,t,n)}},{key:"_connectFailed",value:function(e,t){var n={connectSuccess:!1,reason:"ConnectionToBrokerFailed",details:t};this.status=Ye.Ended,e(n)}},{key:"_subscribe",value:function(e,t,n){var o=this;o.iotConnection.subscribe(o.topic,{qos:1}).then(function(t){o._postSubscribe(e,t)}).catch(function(e){o._subscribeFailed(t,e)})}},{key:"_postSubscribe",value:function(e,t){var n={details:t,connectSuccess:!0};this.status=Ye.Connected,e(n)}},{key:"_subscribeFailed",value:function(e,t){var n={connectSuccess:!1,details:t,reason:"SubscribtionToTopicFailed"};this.status=Ye.Ended,this.iotConnection.disconnect(),e(n)}},{key:"_handleIotEvent",value:function(e,t){switch(e){case Be.MESSAGE:this.logger.debug("Received incoming data",t.payloadString),this.chatControllerCallback(Xe,t);break;case Be.DISCONNECTED:this.status=Ye.Ended,this.chatControllerCallback(We,t)}}},{key:"end",value:function(){this.status=Ye.Ended,this.iotConnection.disconnect()}},{key:"getStatus",value:function(){return this.status}}]),t}();function Ze(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var et=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,o;return t=e,(n=[{key:"fromConnectionHelperEvent",value:function(e,t,n){var o={type:null,data:{data:t,chatDetails:n}};switch(e){case We:return o.type=B,o;case Xe:return this._fromIncomingData(t,n)}}},{key:"_fromIncomingData",value:function(e,t){var n=JSON.parse(e.payloadString),o={type:null,data:{data:n,chatDetails:t}};switch(n.Data.Type){case"TYPING":return o.type=x,o}return o.type=L,o}}])&&Ze(t.prototype,n),o&&Ze(t,o),e}(),tt=function(e,t,n){this.subMap=e,this.id=w.randomId(),this.eventName=t,this.f=n};tt.prototype.unsubscribe=function(){this.subMap.unsubscribe(this.eventName,this.id)};var nt=function(){this.subIdMap={},this.subEventNameMap={}};nt.prototype.subscribe=function(e,t){var n=new tt(this,e,t);this.subIdMap[n.id]=n;var o=this.subEventNameMap[e]||[];o.push(n),this.subEventNameMap[e]=o},nt.prototype.unsubscribe=function(e,t){w.contains(this.subEventNameMap,e)&&(this.subEventNameMap[e]=this.subEventNameMap[e].filter(function(e){return e.id!==t}),this.subEventNameMap[e].length<1&&delete this.subEventNameMap[e]),w.contains(this.subIdMap,t)&&delete this.subIdMap[t]},nt.prototype.getAllSubscriptions=function(){return w.values(this.subEventNameMap).reduce(function(e,t){return e.concat(t)},[])},nt.prototype.getSubscriptions=function(e){return this.subEventNameMap[e]||[]};var ot=function(e){var t=e||{};this.subMap=new nt,this.logEvents=t.logEvents||!1};function rt(e){return(rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function it(e,t){return!t||"object"!==rt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function st(e){return(st=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ct(e,t){return(ct=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function at(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ut(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function lt(e,t,n){return t&&ut(e.prototype,t),n&&ut(e,n),e}ot.prototype.subscribe=function(e,t){return w.assertNotNull(e,"eventName"),w.assertNotNull(t,"f"),w.assertTrue(w.isFunction(t),"f must be a function"),this.subMap.subscribe(e,t)},ot.prototype.subscribeAll=function(e){return w.assertNotNull(e,"f"),w.assertTrue(w.isFunction(e),"f must be a function"),this.subMap.subscribe("<<all>>",e)},ot.prototype.getSubscriptions=function(e){return this.subMap.getSubscriptions(e)},ot.prototype.trigger=function(e,t){w.assertNotNull(e,"eventName");var n=this,o=this.subMap.getSubscriptions("<<all>>"),r=this.subMap.getSubscriptions(e);o.concat(r).forEach(function(o){try{o.f(t||null,e,n)}catch(e){}})},ot.prototype.triggerAsync=function(e,t){var n=this;setTimeout(function(){return n.trigger(e,t)},0)},ot.prototype.bridge=function(){var e=this;return function(t,n){e.trigger(n,t)}},ot.prototype.unsubscribeAll=function(){this.subMap.getAllSubscriptions().forEach(function(e){e.unsubscribe()})};var ft="NeverEstablished",ht="Establishing",pt="Established",dt="Broken",gt=function(){function e(){at(this,e)}return lt(e,[{key:"sendTextMessage",value:function(e){throw new h("sendTextMessage in ChatController")}},{key:"establishNetworkLink",value:function(e){throw new h("connectChat in ChatController")}},{key:"disconnectParticipant",value:function(){throw new h("endChat in ChatController")}},{key:"sendEvent",value:function(e){throw new h("sendEvent in ChatController")}},{key:"getTranscript",value:function(e){throw new h("getTranscript in ChatController")}},{key:"getConnectionStatus",value:function(){throw new h("getStatus in ChatController")}}]),e}(),yt=function(e){function t(e){var n;return at(this,t),(n=it(this,st(t).call(this))).setArguments(e),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ct(e,t)}(t,gt),lt(t,[{key:"setArguments",value:function(e){var t=this,n="ContactId-"+e.chatDetails.contactId+": ";this.logger=se.getLogger({prefix:n}),this.argsValidator=e.argsValidator,this.chatEventConstructor=e.chatEventConstructor,this.connectionDetails=e.chatDetails.connectionDetails,this.intialContactId=e.chatDetails.initialContactId,this.contactId=e.chatDetails.contactId,this.participantId=e.chatDetails.participantId,this.chatClient=e.chatClient,this.participantToken=e.chatDetails.participantToken,this.connectionHelperCallback=function(e,n){return t._handleConnectionHelperEvents(e,n)},this._hasConnectionDetails=e.hasConnectionDetails,this.chatControllerFactory=e.chatControllerFactory,e.hasConnectionDetails&&this._setConnectionHelper(e.chatDetails.connectionDetails,e.chatDetails.contactId),this._connectCalledAtleastOnce=!1,this._everConnected=!1,this.pubsub=e.pubsub,this._participantDisconnected=!1,this.sessionMetadata={}}},{key:"_setConnectionHelper",value:function(e,t){var n=this.chatControllerFactory.createConnectionHelperProvider(e,t);this.connectionHelper=n(this.connectionHelperCallback)}},{key:"cleanUpOnParticipantDisconnect",value:function(){this.pubsub.unsubscribeAll(),this.connectionHelper&&this.connectionHelper.cleanUpOnParticipantDisconnect()}},{key:"subscribe",value:function(e,t){this.pubsub.subscribe(e,t),this.logger.info("Subscribed successfully to eventName: ",e)}},{key:"sendMessage",value:function(e){var t=this,n=e.message,o=e.type||N.textPlain,r=e.metadata||null;t.argsValidator.validateSendMessage(n,o);var i=t.connectionDetails.connectionToken;return t.chatClient.sendMessage(i,n,o).then(function(n){return n.metadata=r,t.logger.debug("Successfully sent message, response: ",n," request: ",e),n},function(n){return n.metadata=r,t.logger.debug("Failed to send message, error: ",n," request: ",e),Promise.reject(n)})}},{key:"sendEvent",value:function(e){var t=this,n=e.metadata||null;t.argsValidator.validateSendEvent(e);var o=t.connectionDetails.connectionToken,r=e.persistence||M.PERSISTED,i=e.visibility||A.ALL;return t.chatClient.sendEvent(o,e.eventType,e.messageIds,i,r).then(function(o){return o.metadata=n,t.logger.debug("Successfully sent event, response: ",o," request: ",e),o},function(o){return o.metadata=n,t.logger.debug("Failed to send event, error: ",o," request: ",e),Promise.reject(o)})}},{key:"getTranscript",value:function(e){var t=this,n=e.metadata||null,o={};o.IntialContactId=this.intialContactId,o.StartKey=e.StartKey||{},o.ScanDirection=e.ScanDirection||V,o.SortKey=e.SortKey||F,o.MaxResults=e.MaxResults||q,e.NextToken&&(o.NextToken=e.NextToken);var r=this.connectionDetails.connectionToken;return this.chatClient.getTranscript(r,o).then(function(e){return e.metadata=n,t.logger.debug("Successfully retrieved transcript, response: ",e," request: ",o),e},function(e){return e.metadata=n,t.logger.debug("Failed to retrieve transcript, error: ",e," request: ",o),Promise.reject(e)})}},{key:"_mapConnectionHelperEventToChatEvent",value:function(e,t){try{return this.chatEventConstructor.fromConnectionHelperEvent(e,t,this.getChatDetails(),this.logger)}catch(n){return this.logger.error("Error occured while handling event from Connection. eventType and eventData: ",e,t," Causing exception: ",n),null}}},{key:"_forwardChatEvent",value:function(e){this.logger.debug("Triggering event for subscribers:",e),this.pubsub.triggerAsync(e.type,e.data)}},{key:"_handleConnectionHelperEvents",value:function(e,t){var n=this._mapConnectionHelperEventToChatEvent(e,t);n&&(this._handleChatEvent(n),this._forwardChatEvent(n))}},{key:"_handleChatEvent",value:function(e){e.type===B&&v.reconnect&&this._initiateReconnect()}},{key:"connect",value:function(e){var t=e||{};return this.sessionMetadata=t.metadata||null,this.argsValidator.validateConnectChat(t),this._connect()}},{key:"_connect",value:function(){var e=this;if(!this._canConnect())throw new d("Can call establishNetworkLink only when getConnectionStatus is Broken or NeverEstablished");var t=function(t){return e._onConnectSuccess(t,e.sessionMetadata)},n=function(t){return e._onConnectFailure(t,e.sessionMetadata)};return this._connectCalledAtleastOnce=!0,this._hasConnectionDetails?this.connectionHelper.start().then(t,n):this._fetchConnectionDetails().then(function(t){return e._setConnectionHelper(t,e.contactId),e.connectionDetails=t,e._hasConnectionDetails=!0,e.connectionHelper.start()}).then(t,n)}},{key:"_initiateReconnect",value:function(){var e=this;w.asyncWhileInterval(function(t){return e.logger.info("Reconnect - ".concat(t,". try")),e._hasConnectionDetails=!1,e.connectionDetails=null,e._connect()},function(t){return t<v.maxReconnectAttempts&&e._canReconnect()},v.reconnectInterval).then(function(){e.logger.info("Reconnect - Success")}).catch(function(){e.logger.info("Reconnect - Failed")})}},{key:"_canConnect",value:function(){return this.getConnectionStatus()===dt||this.getConnectionStatus()===ft}},{key:"_canReconnect",value:function(){return this.getConnectionStatus()===dt}},{key:"_onConnectSuccess",value:function(e,t){this.logger.info("Connect successful!");var n={_debug:e,connectSuccess:!0,connectCalled:!0,metadata:t},o=Object.assign({chatDetails:this.getChatDetails()},n);return this.pubsub.triggerAsync(j,o),n}},{key:"_onConnectFailure",value:function(e,t){var n={_debug:e,connectSuccess:!1,connectCalled:!0,metadata:t};return this.logger.error("Connect Failed with data: ",n),Promise.reject(n)}},{key:"_fetchConnectionDetails",value:function(){return this.chatClient.createConnectionDetails(this.participantToken).then(function(e){var t={};return t.ConnectionId=e.data.ConnectionId,t.PreSignedConnectionUrl=e.data.PreSignedConnectionUrl,t.connectionToken=e.data.ParticipantCredentials.ConnectionAuthenticationToken,t},function(e){return Promise.reject({reason:"Failed to fetch connectionDetails",_debug:e})})}},{key:"breakConnection",value:function(){return this.connectionHelper.end()}},{key:"disconnectParticipant",value:function(){var e=this,t=e.connectionDetails.connectionToken;return e.chatClient.disconnectChat(t).then(function(t){return e.logger.info("disconnect participant successful"),e._participantDisconnected=!0,t},function(t){return e.logger.error("disconnect participant failed with error: ",t),Promise.reject(t)})}},{key:"getChatDetails",value:function(){return{intialContactId:this.intialContactId,contactId:this.contactId,participantId:this.participantId,participantToken:this.participantToken,connectionDetails:this.connectionDetails}}},{key:"_convertConnectionHelperStatus",value:function(e){switch(e){case Ye.NeverStarted:return ft;case Ye.Starting:return ht;case Ye.Ended:return dt;case Ye.Connected:return pt}self.logger.error("Reached invalid state. Unknown connectionHelperStatus: ",e)}},{key:"getConnectionStatus",value:function(){return this._convertConnectionHelperStatus(this.connectionHelper.getStatus())}}]),t}();function vt(e){return(vt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function bt(e,t){return!t||"object"!==vt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _t(e){return(_t=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ct(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&wt(e,t)}function wt(e,t){return(wt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function mt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Et(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function St(e,t,n){return t&&Et(e.prototype,t),n&&Et(e,n),e}n.d(t,"a",function(){return Mt});var It=function(){function e(){mt(this,e)}return St(e,[{key:"createAgentChatController",value:function(e,t){throw new h("createAgentChatController in ChatControllerFactory.")}},{key:"createCustomerChatController",value:function(e,t){throw new h("createCustomerChatController in ChatControllerFactory.")}},{key:"createConnectionHelperProvider",value:function(e){throw new h("createIncomingChatController in ChatControllerFactory")}}]),e}(),kt=function(e){function t(){var e;return mt(this,t),(e=bt(this,_t(t).call(this))).argsValidator=new ke,e.chatConnectionManager=new Le,e.chatEventConstructor=new et,e}return Ct(t,It),St(t,[{key:"createAgentChatSession",value:function(e,t){var n=this._createChatSession(e,t);return new Tt(n)}},{key:"createCustomerChatSession",value:function(e,t){var n=this._createChatSession(e,t);return new Nt(n)}},{key:"_createChatSession",value:function(e,t){var n=this._normalizeChatDetails(e),o=!1;n.connectionDetails&&(o=!0);var r={chatDetails:n,chatControllerFactory:this,chatEventConstructor:this.chatEventConstructor,pubsub:new ot,chatClient:ve.getCachedClient(t),argsValidator:this.argsValidator,hasConnectionDetails:o};return new yt(r)}},{key:"_normalizeChatDetails",value:function(e){if(e.ChatConnectionAttributes&&e.ChatConnectionAttributes.ParticipantCredentials){this.argsValidator.validateInitiateChatResponse(e);var t={},n={};return n.connectionToken=e.ChatConnectionAttributes.ParticipantCredentials.ConnectionAuthenticationToken,n.ConnectionId=e.ChatConnectionAttributes.ConnectionId,n.PreSignedConnectionUrl=e.ChatConnectionAttributes.PreSignedConnectionUrl,t.connectionDetails=n,t.participantId=e.ParticipantId,t.contactId=e.ContactId,t.initialContactId=e.ContactId,t}return this.argsValidator.validateChatDetails(e),e}},{key:"createConnectionHelperProvider",value:function(e,t){var n={preSignedUrl:e.PreSignedConnectionUrl,connectionId:e.ConnectionId},o={mqttConnectionProvider:this.chatConnectionManager.createNewMqttConnectionProvider(n,"PahoMqttConnection"),connectionDetails:{preSignedUrl:e.PreSignedConnectionUrl,connectionId:e.ConnectionId},contactId:t};return function(e){return o.callback=e,new $e(o)}}}]),t}(),Ot=function(){function e(t){mt(this,e),this.controller=t}return St(e,[{key:"onMessage",value:function(e){this.controller.subscribe(L,e)}},{key:"onTyping",value:function(e){this.controller.subscribe(x,e)}},{key:"onConnectionBroken",value:function(e){this.controller.subscribe(B,e)}},{key:"onConnectionEstablished",value:function(e){this.controller.subscribe(j,e)}},{key:"sendMessage",value:function(e){return this.controller.sendMessage(e)}},{key:"connect",value:function(e){return this.controller.connect(e)}},{key:"sendEvent",value:function(e){return this.controller.sendEvent(e)}},{key:"getTranscript",value:function(e){return this.controller.getTranscript(e)}},{key:"getChatDetails",value:function(){return this.controller.getChatDetails()}}]),e}(),Tt=function(e){function t(e){return mt(this,t),bt(this,_t(t).call(this,e))}return Ct(t,Ot),St(t,[{key:"cleanUpOnParticipantDisconnect",value:function(){return this.controller.cleanUpOnParticipantDisconnect()}}]),t}(),Nt=function(e){function t(e){return mt(this,t),bt(this,_t(t).call(this,e))}return Ct(t,Ot),St(t,[{key:"disconnectParticipant",value:function(){var e=this;return this.controller.disconnectParticipant().then(function(t){return e.controller.cleanUpOnParticipantDisconnect(),e.controller.breakConnection(),t})}}]),t}(),At=new kt,Mt={create:function(e){var t=e.options||{},n=e.type||R.AGENT;if(n===R.AGENT)return At.createAgentChatSession(e.chatDetails,t);if(n===R.CUSTOMER)return At.createCustomerChatSession(e.chatDetails,t);throw new p("Unkown value for session type, Allowed values are: "+Object.values(R),n)},setGlobalConfig:function(e){var t=e.loggerConfig;v.update(e),se.updateLoggerConfig(t)},LogLevel:te,Logger:ee,SessionTypes:R}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(e,o){var r,i,s;function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}s=function(){return function(e){var t,n=e.localStorage||(t={},{setItem:function(e,n){t[e]=n},getItem:function(e){return t[e]},removeItem:function(e){delete t[e]}}),o={CONNECT:1,CONNACK:2,PUBLISH:3,PUBACK:4,PUBREC:5,PUBREL:6,PUBCOMP:7,SUBSCRIBE:8,SUBACK:9,UNSUBSCRIBE:10,UNSUBACK:11,PINGREQ:12,PINGRESP:13,DISCONNECT:14},r=function(e,t){for(var n in e)if(e.hasOwnProperty(n)){if(!t.hasOwnProperty(n)){var o="Unknown property, "+n+". Valid properties are:";for(var r in t)t.hasOwnProperty(r)&&(o=o+" "+r);throw new Error(o)}if(c(e[n])!==t[n])throw new Error(u(s.INVALID_TYPE,[c(e[n]),n]))}},i=function(e,t){return function(){return e.apply(t,arguments)}},s={OK:{code:0,text:"AMQJSC0000I OK."},CONNECT_TIMEOUT:{code:1,text:"AMQJSC0001E Connect timed out."},SUBSCRIBE_TIMEOUT:{code:2,text:"AMQJS0002E Subscribe timed out."},UNSUBSCRIBE_TIMEOUT:{code:3,text:"AMQJS0003E Unsubscribe timed out."},PING_TIMEOUT:{code:4,text:"AMQJS0004E Ping timed out."},INTERNAL_ERROR:{code:5,text:"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}"},CONNACK_RETURNCODE:{code:6,text:"AMQJS0006E Bad Connack return code:{0} {1}."},SOCKET_ERROR:{code:7,text:"AMQJS0007E Socket error:{0}."},SOCKET_CLOSE:{code:8,text:"AMQJS0008I Socket closed."},MALFORMED_UTF:{code:9,text:"AMQJS0009E Malformed UTF data:{0} {1} {2}."},UNSUPPORTED:{code:10,text:"AMQJS0010E {0} is not supported by this browser."},INVALID_STATE:{code:11,text:"AMQJS0011E Invalid state {0}."},INVALID_TYPE:{code:12,text:"AMQJS0012E Invalid type {0} for {1}."},INVALID_ARGUMENT:{code:13,text:"AMQJS0013E Invalid argument {0} for {1}."},UNSUPPORTED_OPERATION:{code:14,text:"AMQJS0014E Unsupported operation."},INVALID_STORED_DATA:{code:15,text:"AMQJS0015E Invalid data in local storage key={0} value={1}."},INVALID_MQTT_MESSAGE_TYPE:{code:16,text:"AMQJS0016E Invalid MQTT message type {0}."},MALFORMED_UNICODE:{code:17,text:"AMQJS0017E Malformed Unicode string:{0} {1}."},BUFFER_FULL:{code:18,text:"AMQJS0018E Message buffer is full, maximum buffer size: {0}."}},a={0:"Connection Accepted",1:"Connection Refused: unacceptable protocol version",2:"Connection Refused: identifier rejected",3:"Connection Refused: server unavailable",4:"Connection Refused: bad user name or password",5:"Connection Refused: not authorized"},u=function(e,t){var n=e.text;if(t)for(var o,r,i=0;i<t.length;i++)if(o="{"+i+"}",(r=n.indexOf(o))>0){var s=n.substring(0,r),c=n.substring(r+o.length);n=s+t[i]+c}return n},l=[0,6,77,81,73,115,100,112,3],f=[0,4,77,81,84,84,4],h=function(e,t){for(var n in this.type=e,t)t.hasOwnProperty(n)&&(this[n]=t[n])};function p(e,t){var n,r=t,i=e[t],s=i>>4,c=i&=15;t+=1;var a=0,u=1;do{if(t==e.length)return[null,r];a+=(127&(n=e[t++]))*u,u*=128}while(0!=(128&n));var l=t+a;if(l>e.length)return[null,r];var f=new h(s);switch(s){case o.CONNACK:1&e[t++]&&(f.sessionPresent=!0),f.returnCode=e[t++];break;case o.PUBLISH:var p=c>>1&3,d=y(e,t),g=_(e,t+=2,d);t+=d,p>0&&(f.messageIdentifier=y(e,t),t+=2);var v=new E(e.subarray(t,l));1==(1&c)&&(v.retained=!0),8==(8&c)&&(v.duplicate=!0),v.qos=p,v.destinationName=g,f.payloadMessage=v;break;case o.PUBACK:case o.PUBREC:case o.PUBREL:case o.PUBCOMP:case o.UNSUBACK:f.messageIdentifier=y(e,t);break;case o.SUBACK:f.messageIdentifier=y(e,t),t+=2,f.returnCode=e.subarray(t,l)}return[f,l]}function d(e,t,n){return t[n++]=e>>8,t[n++]=e%256,n}function g(e,t,n,o){return b(e,n,o=d(t,n,o)),o+t}function y(e,t){return 256*e[t]+e[t+1]}function v(e){for(var t=0,n=0;n<e.length;n++){var o=e.charCodeAt(n);o>2047?(55296<=o&&o<=56319&&(n++,t++),t+=3):o>127?t+=2:t++}return t}function b(e,t,n){for(var o=n,r=0;r<e.length;r++){var i=e.charCodeAt(r);if(55296<=i&&i<=56319){var c=e.charCodeAt(++r);if(isNaN(c))throw new Error(u(s.MALFORMED_UNICODE,[i,c]));i=c-56320+(i-55296<<10)+65536}i<=127?t[o++]=i:i<=2047?(t[o++]=i>>6&31|192,t[o++]=63&i|128):i<=65535?(t[o++]=i>>12&15|224,t[o++]=i>>6&63|128,t[o++]=63&i|128):(t[o++]=i>>18&7|240,t[o++]=i>>12&63|128,t[o++]=i>>6&63|128,t[o++]=63&i|128)}return t}function _(e,t,n){for(var o,r="",i=t;i<t+n;){var c=e[i++];if(c<128)o=c;else{var a=e[i++]-128;if(a<0)throw new Error(u(s.MALFORMED_UTF,[c.toString(16),a.toString(16),""]));if(c<224)o=64*(c-192)+a;else{var l=e[i++]-128;if(l<0)throw new Error(u(s.MALFORMED_UTF,[c.toString(16),a.toString(16),l.toString(16)]));if(c<240)o=4096*(c-224)+64*a+l;else{var f=e[i++]-128;if(f<0)throw new Error(u(s.MALFORMED_UTF,[c.toString(16),a.toString(16),l.toString(16),f.toString(16)]));if(!(c<248))throw new Error(u(s.MALFORMED_UTF,[c.toString(16),a.toString(16),l.toString(16),f.toString(16)]));o=262144*(c-240)+4096*a+64*l+f}}}o>65535&&(o-=65536,r+=String.fromCharCode(55296+(o>>10)),o=56320+(1023&o)),r+=String.fromCharCode(o)}return r}h.prototype.encode=function(){var e,t=(15&this.type)<<4,n=0,r=[],i=0;switch(void 0!==this.messageIdentifier&&(n+=2),this.type){case o.CONNECT:switch(this.mqttVersion){case 3:n+=l.length+3;break;case 4:n+=f.length+3}n+=v(this.clientId)+2,void 0!==this.willMessage&&(n+=v(this.willMessage.destinationName)+2,(e=this.willMessage.payloadBytes)instanceof Uint8Array||(e=new Uint8Array(c)),n+=e.byteLength+2),void 0!==this.userName&&(n+=v(this.userName)+2),void 0!==this.password&&(n+=v(this.password)+2);break;case o.SUBSCRIBE:t|=2;for(var s=0;s<this.topics.length;s++)r[s]=v(this.topics[s]),n+=r[s]+2;n+=this.requestedQos.length;break;case o.UNSUBSCRIBE:t|=2;for(s=0;s<this.topics.length;s++)r[s]=v(this.topics[s]),n+=r[s]+2;break;case o.PUBREL:t|=2;break;case o.PUBLISH:this.payloadMessage.duplicate&&(t|=8),t=t|=this.payloadMessage.qos<<1,this.payloadMessage.retained&&(t|=1),n+=(i=v(this.payloadMessage.destinationName))+2;var c=this.payloadMessage.payloadBytes;n+=c.byteLength,c instanceof ArrayBuffer?c=new Uint8Array(c):c instanceof Uint8Array||(c=new Uint8Array(c.buffer));break;case o.DISCONNECT:}var a=function(e){var t=new Array(1),n=0;do{var o=e%128;(e>>=7)>0&&(o|=128),t[n++]=o}while(e>0&&n<4);return t}(n),u=a.length+1,h=new ArrayBuffer(n+u),p=new Uint8Array(h);if(p[0]=t,p.set(a,1),this.type==o.PUBLISH)u=g(this.payloadMessage.destinationName,i,p,u);else if(this.type==o.CONNECT){switch(this.mqttVersion){case 3:p.set(l,u),u+=l.length;break;case 4:p.set(f,u),u+=f.length}var y=0;this.cleanSession&&(y=2),void 0!==this.willMessage&&(y|=4,y|=this.willMessage.qos<<3,this.willMessage.retained&&(y|=32)),void 0!==this.userName&&(y|=128),void 0!==this.password&&(y|=64),p[u++]=y,u=d(this.keepAliveInterval,p,u)}switch(void 0!==this.messageIdentifier&&(u=d(this.messageIdentifier,p,u)),this.type){case o.CONNECT:u=g(this.clientId,v(this.clientId),p,u),void 0!==this.willMessage&&(u=g(this.willMessage.destinationName,v(this.willMessage.destinationName),p,u),u=d(e.byteLength,p,u),p.set(e,u),u+=e.byteLength),void 0!==this.userName&&(u=g(this.userName,v(this.userName),p,u)),void 0!==this.password&&(u=g(this.password,v(this.password),p,u));break;case o.PUBLISH:p.set(c,u);break;case o.SUBSCRIBE:for(s=0;s<this.topics.length;s++)u=g(this.topics[s],r[s],p,u),p[u++]=this.requestedQos[s];break;case o.UNSUBSCRIBE:for(s=0;s<this.topics.length;s++)u=g(this.topics[s],r[s],p,u)}return h};var C=function(e,t){this._client=e,this._keepAliveInterval=1e3*t,this.isReset=!1;var n=new h(o.PINGREQ).encode(),r=function(e){return function(){return i.apply(e)}},i=function(){this.isReset?(this.isReset=!1,this._client._trace("Pinger.doPing","send PINGREQ"),this._client.socket.send(n),this.timeout=setTimeout(r(this),this._keepAliveInterval)):(this._client._trace("Pinger.doPing","Timed out"),this._client._disconnected(s.PING_TIMEOUT.code,u(s.PING_TIMEOUT)))};this.reset=function(){this.isReset=!0,clearTimeout(this.timeout),this._keepAliveInterval>0&&(this.timeout=setTimeout(r(this),this._keepAliveInterval))},this.cancel=function(){clearTimeout(this.timeout)}},w=function(e,t,n,o){t||(t=30);this.timeout=setTimeout(function(e,t,n){return function(){return e.apply(t,n)}}(n,e,o),1e3*t),this.cancel=function(){clearTimeout(this.timeout)}},m=function(t,o,r,i,c){if(!("WebSocket"in e&&null!==e.WebSocket))throw new Error(u(s.UNSUPPORTED,["WebSocket"]));if(!("ArrayBuffer"in e&&null!==e.ArrayBuffer))throw new Error(u(s.UNSUPPORTED,["ArrayBuffer"]));for(var a in this._trace("Paho.Client",t,o,r,i,c),this.host=o,this.port=r,this.path=i,this.uri=t,this.clientId=c,this._wsuri=null,this._localKey=o+":"+r+("/mqtt"!=i?":"+i:"")+":"+c+":",this._msg_queue=[],this._buffered_msg_queue=[],this._sentMessages={},this._receivedMessages={},this._notify_msg_sent={},this._message_identifier=1,this._sequence=0,n)0!==a.indexOf("Sent:"+this._localKey)&&0!==a.indexOf("Received:"+this._localKey)||this.restore(a)};m.prototype.host=null,m.prototype.port=null,m.prototype.path=null,m.prototype.uri=null,m.prototype.clientId=null,m.prototype.socket=null,m.prototype.connected=!1,m.prototype.maxMessageIdentifier=65536,m.prototype.connectOptions=null,m.prototype.hostIndex=null,m.prototype.onConnected=null,m.prototype.onConnectionLost=null,m.prototype.onMessageDelivered=null,m.prototype.onMessageArrived=null,m.prototype.traceFunction=null,m.prototype._msg_queue=null,m.prototype._buffered_msg_queue=null,m.prototype._connectTimeout=null,m.prototype.sendPinger=null,m.prototype.receivePinger=null,m.prototype._reconnectInterval=1,m.prototype._reconnecting=!1,m.prototype._reconnectTimeout=null,m.prototype.disconnectedPublishing=!1,m.prototype.disconnectedBufferSize=5e3,m.prototype.receiveBuffer=null,m.prototype._traceBuffer=null,m.prototype._MAX_TRACE_ENTRIES=100,m.prototype.connect=function(e){var t=this._traceMask(e,"password");if(this._trace("Client.connect",t,this.socket,this.connected),this.connected)throw new Error(u(s.INVALID_STATE,["already connected"]));if(this.socket)throw new Error(u(s.INVALID_STATE,["already connected"]));this._reconnecting&&(this._reconnectTimeout.cancel(),this._reconnectTimeout=null,this._reconnecting=!1),this.connectOptions=e,this._reconnectInterval=1,this._reconnecting=!1,e.uris?(this.hostIndex=0,this._doConnect(e.uris[0])):this._doConnect(this.uri)},m.prototype.subscribe=function(e,t){if(this._trace("Client.subscribe",e,t),!this.connected)throw new Error(u(s.INVALID_STATE,["not connected"]));var n=new h(o.SUBSCRIBE);n.topics=e.constructor===Array?e:[e],void 0===t.qos&&(t.qos=0),n.requestedQos=[];for(var r=0;r<n.topics.length;r++)n.requestedQos[r]=t.qos;t.onSuccess&&(n.onSuccess=function(e){t.onSuccess({invocationContext:t.invocationContext,grantedQos:e})}),t.onFailure&&(n.onFailure=function(e){t.onFailure({invocationContext:t.invocationContext,errorCode:e,errorMessage:u(e)})}),t.timeout&&(n.timeOut=new w(this,t.timeout,t.onFailure,[{invocationContext:t.invocationContext,errorCode:s.SUBSCRIBE_TIMEOUT.code,errorMessage:u(s.SUBSCRIBE_TIMEOUT)}])),this._requires_ack(n),this._schedule_message(n)},m.prototype.unsubscribe=function(e,t){if(this._trace("Client.unsubscribe",e,t),!this.connected)throw new Error(u(s.INVALID_STATE,["not connected"]));var n=new h(o.UNSUBSCRIBE);n.topics=e.constructor===Array?e:[e],t.onSuccess&&(n.callback=function(){t.onSuccess({invocationContext:t.invocationContext})}),t.timeout&&(n.timeOut=new w(this,t.timeout,t.onFailure,[{invocationContext:t.invocationContext,errorCode:s.UNSUBSCRIBE_TIMEOUT.code,errorMessage:u(s.UNSUBSCRIBE_TIMEOUT)}])),this._requires_ack(n),this._schedule_message(n)},m.prototype.send=function(e){this._trace("Client.send",e);var t=new h(o.PUBLISH);if(t.payloadMessage=e,this.connected)e.qos>0?this._requires_ack(t):this.onMessageDelivered&&(this._notify_msg_sent[t]=this.onMessageDelivered(t.payloadMessage)),this._schedule_message(t);else{if(!this._reconnecting||!this.disconnectedPublishing)throw new Error(u(s.INVALID_STATE,["not connected"]));if(Object.keys(this._sentMessages).length+this._buffered_msg_queue.length>this.disconnectedBufferSize)throw new Error(u(s.BUFFER_FULL,[this.disconnectedBufferSize]));e.qos>0?this._requires_ack(t):(t.sequence=++this._sequence,this._buffered_msg_queue.unshift(t))}},m.prototype.disconnect=function(){if(this._trace("Client.disconnect"),this._reconnecting&&(this._reconnectTimeout.cancel(),this._reconnectTimeout=null,this._reconnecting=!1),!this.socket)throw new Error(u(s.INVALID_STATE,["not connecting or connected"]));var e=new h(o.DISCONNECT);this._notify_msg_sent[e]=i(this._disconnected,this),this._schedule_message(e)},m.prototype.getTraceLog=function(){if(null!==this._traceBuffer){for(var e in this._trace("Client.getTraceLog",new Date),this._trace("Client.getTraceLog in flight messages",this._sentMessages.length),this._sentMessages)this._trace("_sentMessages ",e,this._sentMessages[e]);for(var e in this._receivedMessages)this._trace("_receivedMessages ",e,this._receivedMessages[e]);return this._traceBuffer}},m.prototype.startTrace=function(){null===this._traceBuffer&&(this._traceBuffer=[]),this._trace("Client.startTrace",new Date,"@VERSION@-@BUILDLEVEL@")},m.prototype.stopTrace=function(){delete this._traceBuffer},m.prototype._doConnect=function(e){if(this.connectOptions.useSSL){var t=e.split(":");t[0]="wss",e=t.join(":")}this._wsuri=e,this.connected=!1,this.connectOptions.mqttVersion<4?this.socket=new WebSocket(e,["mqttv3.1"]):this.socket=new WebSocket(e,["mqtt"]),this.socket.binaryType="arraybuffer",this.socket.onopen=i(this._on_socket_open,this),this.socket.onmessage=i(this._on_socket_message,this),this.socket.onerror=i(this._on_socket_error,this),this.socket.onclose=i(this._on_socket_close,this),this.sendPinger=new C(this,this.connectOptions.keepAliveInterval),this.receivePinger=new C(this,this.connectOptions.keepAliveInterval),this._connectTimeout&&(this._connectTimeout.cancel(),this._connectTimeout=null),this._connectTimeout=new w(this,this.connectOptions.timeout,this._disconnected,[s.CONNECT_TIMEOUT.code,u(s.CONNECT_TIMEOUT)])},m.prototype._schedule_message=function(e){this._msg_queue.unshift(e),this.connected&&this._process_queue()},m.prototype.store=function(e,t){var r={type:t.type,messageIdentifier:t.messageIdentifier,version:1};switch(t.type){case o.PUBLISH:t.pubRecReceived&&(r.pubRecReceived=!0),r.payloadMessage={};for(var i="",c=t.payloadMessage.payloadBytes,a=0;a<c.length;a++)c[a]<=15?i=i+"0"+c[a].toString(16):i+=c[a].toString(16);r.payloadMessage.payloadHex=i,r.payloadMessage.qos=t.payloadMessage.qos,r.payloadMessage.destinationName=t.payloadMessage.destinationName,t.payloadMessage.duplicate&&(r.payloadMessage.duplicate=!0),t.payloadMessage.retained&&(r.payloadMessage.retained=!0),0===e.indexOf("Sent:")&&(void 0===t.sequence&&(t.sequence=++this._sequence),r.sequence=t.sequence);break;default:throw Error(u(s.INVALID_STORED_DATA,[e+this._localKey+t.messageIdentifier,r]))}n.setItem(e+this._localKey+t.messageIdentifier,JSON.stringify(r))},m.prototype.restore=function(e){var t=n.getItem(e),r=JSON.parse(t),i=new h(r.type,r);switch(r.type){case o.PUBLISH:for(var c=r.payloadMessage.payloadHex,a=new ArrayBuffer(c.length/2),l=new Uint8Array(a),f=0;c.length>=2;){var p=parseInt(c.substring(0,2),16);c=c.substring(2,c.length),l[f++]=p}var d=new E(l);d.qos=r.payloadMessage.qos,d.destinationName=r.payloadMessage.destinationName,r.payloadMessage.duplicate&&(d.duplicate=!0),r.payloadMessage.retained&&(d.retained=!0),i.payloadMessage=d;break;default:throw Error(u(s.INVALID_STORED_DATA,[e,t]))}0===e.indexOf("Sent:"+this._localKey)?(i.payloadMessage.duplicate=!0,this._sentMessages[i.messageIdentifier]=i):0===e.indexOf("Received:"+this._localKey)&&(this._receivedMessages[i.messageIdentifier]=i)},m.prototype._process_queue=function(){for(var e=null;e=this._msg_queue.pop();)this._socket_send(e),this._notify_msg_sent[e]&&(this._notify_msg_sent[e](),delete this._notify_msg_sent[e])},m.prototype._requires_ack=function(e){var t=Object.keys(this._sentMessages).length;if(t>this.maxMessageIdentifier)throw Error("Too many messages:"+t);for(;void 0!==this._sentMessages[this._message_identifier];)this._message_identifier++;e.messageIdentifier=this._message_identifier,this._sentMessages[e.messageIdentifier]=e,e.type===o.PUBLISH&&this.store("Sent:",e),this._message_identifier===this.maxMessageIdentifier&&(this._message_identifier=1)},m.prototype._on_socket_open=function(){var e=new h(o.CONNECT,this.connectOptions);e.clientId=this.clientId,this._socket_send(e)},m.prototype._on_socket_message=function(e){this._trace("Client._on_socket_message",e.data);for(var t=this._deframeMessages(e.data),n=0;n<t.length;n+=1)this._handleMessage(t[n])},m.prototype._deframeMessages=function(e){var t=new Uint8Array(e),n=[];if(this.receiveBuffer){var o=new Uint8Array(this.receiveBuffer.length+t.length);o.set(this.receiveBuffer),o.set(t,this.receiveBuffer.length),t=o,delete this.receiveBuffer}try{for(var r=0;r<t.length;){var i=p(t,r),c=i[0];if(r=i[1],null===c)break;n.push(c)}r<t.length&&(this.receiveBuffer=t.subarray(r))}catch(e){var a="undefined"==e.hasOwnProperty("stack")?e.stack.toString():"No Error Stack Available";return void this._disconnected(s.INTERNAL_ERROR.code,u(s.INTERNAL_ERROR,[e.message,a]))}return n},m.prototype._handleMessage=function(e){this._trace("Client._handleMessage",e);try{switch(e.type){case o.CONNACK:if(this._connectTimeout.cancel(),this._reconnectTimeout&&this._reconnectTimeout.cancel(),this.connectOptions.cleanSession){for(var t in this._sentMessages){var r=this._sentMessages[t];n.removeItem("Sent:"+this._localKey+r.messageIdentifier)}for(var t in this._sentMessages={},this._receivedMessages){var i=this._receivedMessages[t];n.removeItem("Received:"+this._localKey+i.messageIdentifier)}this._receivedMessages={}}if(0!==e.returnCode){this._disconnected(s.CONNACK_RETURNCODE.code,u(s.CONNACK_RETURNCODE,[e.returnCode,a[e.returnCode]]));break}this.connected=!0,this.connectOptions.uris&&(this.hostIndex=this.connectOptions.uris.length);var c=[];for(var l in this._sentMessages)this._sentMessages.hasOwnProperty(l)&&c.push(this._sentMessages[l]);if(this._buffered_msg_queue.length>0)for(var f=null;f=this._buffered_msg_queue.pop();)c.push(f),this.onMessageDelivered&&(this._notify_msg_sent[f]=this.onMessageDelivered(f.payloadMessage));c=c.sort(function(e,t){return e.sequence-t.sequence});for(var p=0,d=c.length;p<d;p++){if((r=c[p]).type==o.PUBLISH&&r.pubRecReceived){var g=new h(o.PUBREL,{messageIdentifier:r.messageIdentifier});this._schedule_message(g)}else this._schedule_message(r)}this.connectOptions.onSuccess&&this.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});var y=!1;this._reconnecting&&(y=!0,this._reconnectInterval=1,this._reconnecting=!1),this._connected(y,this._wsuri),this._process_queue();break;case o.PUBLISH:this._receivePublish(e);break;case o.PUBACK:(r=this._sentMessages[e.messageIdentifier])&&(delete this._sentMessages[e.messageIdentifier],n.removeItem("Sent:"+this._localKey+e.messageIdentifier),this.onMessageDelivered&&this.onMessageDelivered(r.payloadMessage));break;case o.PUBREC:if(r=this._sentMessages[e.messageIdentifier]){r.pubRecReceived=!0;g=new h(o.PUBREL,{messageIdentifier:e.messageIdentifier});this.store("Sent:",r),this._schedule_message(g)}break;case o.PUBREL:i=this._receivedMessages[e.messageIdentifier];n.removeItem("Received:"+this._localKey+e.messageIdentifier),i&&(this._receiveMessage(i),delete this._receivedMessages[e.messageIdentifier]);var v=new h(o.PUBCOMP,{messageIdentifier:e.messageIdentifier});this._schedule_message(v);break;case o.PUBCOMP:r=this._sentMessages[e.messageIdentifier];delete this._sentMessages[e.messageIdentifier],n.removeItem("Sent:"+this._localKey+e.messageIdentifier),this.onMessageDelivered&&this.onMessageDelivered(r.payloadMessage);break;case o.SUBACK:(r=this._sentMessages[e.messageIdentifier])&&(r.timeOut&&r.timeOut.cancel(),128===e.returnCode[0]?r.onFailure&&r.onFailure(e.returnCode):r.onSuccess&&r.onSuccess(e.returnCode),delete this._sentMessages[e.messageIdentifier]);break;case o.UNSUBACK:(r=this._sentMessages[e.messageIdentifier])&&(r.timeOut&&r.timeOut.cancel(),r.callback&&r.callback(),delete this._sentMessages[e.messageIdentifier]);break;case o.PINGRESP:this.sendPinger.reset();break;case o.DISCONNECT:this._disconnected(s.INVALID_MQTT_MESSAGE_TYPE.code,u(s.INVALID_MQTT_MESSAGE_TYPE,[e.type]));break;default:this._disconnected(s.INVALID_MQTT_MESSAGE_TYPE.code,u(s.INVALID_MQTT_MESSAGE_TYPE,[e.type]))}}catch(e){var b="undefined"==e.hasOwnProperty("stack")?e.stack.toString():"No Error Stack Available";return void this._disconnected(s.INTERNAL_ERROR.code,u(s.INTERNAL_ERROR,[e.message,b]))}},m.prototype._on_socket_error=function(e){this._reconnecting||this._disconnected(s.SOCKET_ERROR.code,u(s.SOCKET_ERROR,[e.data]))},m.prototype._on_socket_close=function(){this._reconnecting||this._disconnected(s.SOCKET_CLOSE.code,u(s.SOCKET_CLOSE))},m.prototype._socket_send=function(e){if(1==e.type){var t=this._traceMask(e,"password");this._trace("Client._socket_send",t)}else this._trace("Client._socket_send",e);this.socket.send(e.encode()),this.sendPinger.reset()},m.prototype._receivePublish=function(e){switch(e.payloadMessage.qos){case"undefined":case 0:this._receiveMessage(e);break;case 1:var t=new h(o.PUBACK,{messageIdentifier:e.messageIdentifier});this._schedule_message(t),this._receiveMessage(e);break;case 2:this._receivedMessages[e.messageIdentifier]=e,this.store("Received:",e);var n=new h(o.PUBREC,{messageIdentifier:e.messageIdentifier});this._schedule_message(n);break;default:throw Error("Invaild qos="+e.payloadMessage.qos)}},m.prototype._receiveMessage=function(e){this.onMessageArrived&&this.onMessageArrived(e.payloadMessage)},m.prototype._connected=function(e,t){this.onConnected&&this.onConnected(e,t)},m.prototype._reconnect=function(){this._trace("Client._reconnect"),this.connected||(this._reconnecting=!0,this.sendPinger.cancel(),this.receivePinger.cancel(),this._reconnectInterval<128&&(this._reconnectInterval=2*this._reconnectInterval),this.connectOptions.uris?(this.hostIndex=0,this._doConnect(this.connectOptions.uris[0])):this._doConnect(this.uri))},m.prototype._disconnected=function(e,t){if(this._trace("Client._disconnected",e,t),void 0!==e&&this._reconnecting)this._reconnectTimeout=new w(this,this._reconnectInterval,this._reconnect);else if(this.sendPinger.cancel(),this.receivePinger.cancel(),this._connectTimeout&&(this._connectTimeout.cancel(),this._connectTimeout=null),this._msg_queue=[],this._buffered_msg_queue=[],this._notify_msg_sent={},this.socket&&(this.socket.onopen=null,this.socket.onmessage=null,this.socket.onerror=null,this.socket.onclose=null,1===this.socket.readyState&&this.socket.close(),delete this.socket),this.connectOptions.uris&&this.hostIndex<this.connectOptions.uris.length-1)this.hostIndex++,this._doConnect(this.connectOptions.uris[this.hostIndex]);else if(void 0===e&&(e=s.OK.code,t=u(s.OK)),this.connected){if(this.connected=!1,this.onConnectionLost&&this.onConnectionLost({errorCode:e,errorMessage:t,reconnect:this.connectOptions.reconnect,uri:this._wsuri}),e!==s.OK.code&&this.connectOptions.reconnect)return this._reconnectInterval=1,void this._reconnect()}else 4===this.connectOptions.mqttVersion&&!1===this.connectOptions.mqttVersionExplicit?(this._trace("Failed to connect V4, dropping back to V3"),this.connectOptions.mqttVersion=3,this.connectOptions.uris?(this.hostIndex=0,this._doConnect(this.connectOptions.uris[0])):this._doConnect(this.uri)):this.connectOptions.onFailure&&this.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext,errorCode:e,errorMessage:t})},m.prototype._trace=function(){if(this.traceFunction){var e=Array.prototype.slice.call(arguments);for(var t in e)void 0!==e[t]&&e.splice(t,1,JSON.stringify(e[t]));var n=e.join("");this.traceFunction({severity:"Debug",message:n})}if(null!==this._traceBuffer){t=0;for(var o=arguments.length;t<o;t++)this._traceBuffer.length==this._MAX_TRACE_ENTRIES&&this._traceBuffer.shift(),0===t?this._traceBuffer.push(arguments[t]):void 0===arguments[t]?this._traceBuffer.push(arguments[t]):this._traceBuffer.push("  "+JSON.stringify(arguments[t]))}},m.prototype._traceMask=function(e,t){var n={};for(var o in e)e.hasOwnProperty(o)&&(n[o]=o==t?"******":e[o]);return n};var E=function(e){var t,n;if(!("string"==typeof e||e instanceof ArrayBuffer||ArrayBuffer.isView(e)&&!(e instanceof DataView)))throw u(s.INVALID_ARGUMENT,[e,"newPayload"]);t=e;var o=0,r=!1,i=!1;Object.defineProperties(this,{payloadString:{enumerable:!0,get:function(){return"string"==typeof t?t:_(t,0,t.length)}},payloadBytes:{enumerable:!0,get:function(){if("string"==typeof t){var e=new ArrayBuffer(v(t)),n=new Uint8Array(e);return b(t,n,0),n}return t}},destinationName:{enumerable:!0,get:function(){return n},set:function(e){if("string"!=typeof e)throw new Error(u(s.INVALID_ARGUMENT,[e,"newDestinationName"]));n=e}},qos:{enumerable:!0,get:function(){return o},set:function(e){if(0!==e&&1!==e&&2!==e)throw new Error("Invalid argument:"+e);o=e}},retained:{enumerable:!0,get:function(){return r},set:function(e){if("boolean"!=typeof e)throw new Error(u(s.INVALID_ARGUMENT,[e,"newRetained"]));r=e}},topic:{enumerable:!0,get:function(){return n},set:function(e){n=e}},duplicate:{enumerable:!0,get:function(){return i},set:function(e){i=e}}})};return{Client:function(e,t,n,o){var i;if("string"!=typeof e)throw new Error(u(s.INVALID_TYPE,[c(e),"host"]));if(2==arguments.length){o=t;var a=(i=e).match(/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/);if(!a)throw new Error(u(s.INVALID_ARGUMENT,[e,"host"]));e=a[4]||a[2],t=parseInt(a[7]),n=a[8]}else{if(3==arguments.length&&(o=n,n="/mqtt"),"number"!=typeof t||t<0)throw new Error(u(s.INVALID_TYPE,[c(t),"port"]));if("string"!=typeof n)throw new Error(u(s.INVALID_TYPE,[c(n),"path"]));var l=-1!==e.indexOf(":")&&"["!==e.slice(0,1)&&"]"!==e.slice(-1);i="ws://"+(l?"["+e+"]":e)+":"+t+n}for(var f=0,h=0;h<o.length;h++){var p=o.charCodeAt(h);55296<=p&&p<=56319&&h++,f++}if("string"!=typeof o||f>65535)throw new Error(u(s.INVALID_ARGUMENT,[o,"clientId"]));var d=new m(i,e,t,n,o);Object.defineProperties(this,{host:{get:function(){return e},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},port:{get:function(){return t},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},path:{get:function(){return n},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},uri:{get:function(){return i},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},clientId:{get:function(){return d.clientId},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},onConnected:{get:function(){return d.onConnected},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[c(e),"onConnected"]));d.onConnected=e}},disconnectedPublishing:{get:function(){return d.disconnectedPublishing},set:function(e){d.disconnectedPublishing=e}},disconnectedBufferSize:{get:function(){return d.disconnectedBufferSize},set:function(e){d.disconnectedBufferSize=e}},onConnectionLost:{get:function(){return d.onConnectionLost},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[c(e),"onConnectionLost"]));d.onConnectionLost=e}},onMessageDelivered:{get:function(){return d.onMessageDelivered},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[c(e),"onMessageDelivered"]));d.onMessageDelivered=e}},onMessageArrived:{get:function(){return d.onMessageArrived},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[c(e),"onMessageArrived"]));d.onMessageArrived=e}},trace:{get:function(){return d.traceFunction},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[c(e),"onTrace"]));d.traceFunction=e}}}),this.connect=function(e){if(r(e=e||{},{timeout:"number",userName:"string",password:"string",willMessage:"object",keepAliveInterval:"number",cleanSession:"boolean",useSSL:"boolean",invocationContext:"object",onSuccess:"function",onFailure:"function",hosts:"object",ports:"object",reconnect:"boolean",mqttVersion:"number",mqttVersionExplicit:"boolean",uris:"object"}),void 0===e.keepAliveInterval&&(e.keepAliveInterval=60),e.mqttVersion>4||e.mqttVersion<3)throw new Error(u(s.INVALID_ARGUMENT,[e.mqttVersion,"connectOptions.mqttVersion"]));if(void 0===e.mqttVersion?(e.mqttVersionExplicit=!1,e.mqttVersion=4):e.mqttVersionExplicit=!0,void 0!==e.password&&void 0===e.userName)throw new Error(u(s.INVALID_ARGUMENT,[e.password,"connectOptions.password"]));if(e.willMessage){if(!(e.willMessage instanceof E))throw new Error(u(s.INVALID_TYPE,[e.willMessage,"connectOptions.willMessage"]));if(e.willMessage.stringPayload=null,void 0===e.willMessage.destinationName)throw new Error(u(s.INVALID_TYPE,[c(e.willMessage.destinationName),"connectOptions.willMessage.destinationName"]))}if(void 0===e.cleanSession&&(e.cleanSession=!0),e.hosts){if(!(e.hosts instanceof Array))throw new Error(u(s.INVALID_ARGUMENT,[e.hosts,"connectOptions.hosts"]));if(e.hosts.length<1)throw new Error(u(s.INVALID_ARGUMENT,[e.hosts,"connectOptions.hosts"]));for(var t=!1,o=0;o<e.hosts.length;o++){if("string"!=typeof e.hosts[o])throw new Error(u(s.INVALID_TYPE,[c(e.hosts[o]),"connectOptions.hosts["+o+"]"]));if(/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/.test(e.hosts[o])){if(0===o)t=!0;else if(!t)throw new Error(u(s.INVALID_ARGUMENT,[e.hosts[o],"connectOptions.hosts["+o+"]"]))}else if(t)throw new Error(u(s.INVALID_ARGUMENT,[e.hosts[o],"connectOptions.hosts["+o+"]"]))}if(t)e.uris=e.hosts;else{if(!e.ports)throw new Error(u(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));if(!(e.ports instanceof Array))throw new Error(u(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));if(e.hosts.length!==e.ports.length)throw new Error(u(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));for(e.uris=[],o=0;o<e.hosts.length;o++){if("number"!=typeof e.ports[o]||e.ports[o]<0)throw new Error(u(s.INVALID_TYPE,[c(e.ports[o]),"connectOptions.ports["+o+"]"]));var a=e.hosts[o],l=e.ports[o],f=-1!==a.indexOf(":");i="ws://"+(f?"["+a+"]":a)+":"+l+n,e.uris.push(i)}}}d.connect(e)},this.subscribe=function(e,t){if("string"!=typeof e&&e.constructor!==Array)throw new Error("Invalid argument:"+e);if(r(t=t||{},{qos:"number",invocationContext:"object",onSuccess:"function",onFailure:"function",timeout:"number"}),t.timeout&&!t.onFailure)throw new Error("subscribeOptions.timeout specified with no onFailure callback.");if(void 0!==t.qos&&0!==t.qos&&1!==t.qos&&2!==t.qos)throw new Error(u(s.INVALID_ARGUMENT,[t.qos,"subscribeOptions.qos"]));d.subscribe(e,t)},this.unsubscribe=function(e,t){if("string"!=typeof e&&e.constructor!==Array)throw new Error("Invalid argument:"+e);if(r(t=t||{},{invocationContext:"object",onSuccess:"function",onFailure:"function",timeout:"number"}),t.timeout&&!t.onFailure)throw new Error("unsubscribeOptions.timeout specified with no onFailure callback.");d.unsubscribe(e,t)},this.send=function(e,t,n,o){var r;if(0===arguments.length)throw new Error("Invalid argument.length");if(1==arguments.length){if(!(e instanceof E)&&"string"!=typeof e)throw new Error("Invalid argument:"+c(e));if(void 0===(r=e).destinationName)throw new Error(u(s.INVALID_ARGUMENT,[r.destinationName,"Message.destinationName"]));d.send(r)}else(r=new E(t)).destinationName=e,arguments.length>=3&&(r.qos=n),arguments.length>=4&&(r.retained=o),d.send(r)},this.publish=function(e,t,n,o){var r;if(0===arguments.length)throw new Error("Invalid argument.length");if(1==arguments.length){if(!(e instanceof E)&&"string"!=typeof e)throw new Error("Invalid argument:"+c(e));if(void 0===(r=e).destinationName)throw new Error(u(s.INVALID_ARGUMENT,[r.destinationName,"Message.destinationName"]));d.send(r)}else(r=new E(t)).destinationName=e,arguments.length>=3&&(r.qos=n),arguments.length>=4&&(r.retained=o),d.send(r)},this.disconnect=function(){d.disconnect()},this.getTraceLog=function(){return d.getTraceLog()},this.startTrace=function(){d.startTrace()},this.stopTrace=function(){d.stopTrace()},this.isConnected=function(){return d.connected}},Message:E}}(void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},"object"===c(t)&&"object"===c(o)?o.exports=s():void 0===(i="function"==typeof(r=s)?r.call(t,n,t,o):r)||(o.exports=i)}).call(this,n(2),n(5)(e))},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"ChatSession",function(){return r});var o=n(1);e.connect=e.connect||{},connect.ChatSession=o.a;var r=o.a}.call(this,n(2))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,