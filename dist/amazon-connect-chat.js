!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r;!function(){"use strict";var i={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function o(e){return function(e,t){var n,r,s,a,c,u,l,h,p,f=1,d=e.length,g="";for(r=0;r<d;r++)if("string"==typeof e[r])g+=e[r];else if("object"==typeof e[r]){if((a=e[r]).keys)for(n=t[f],s=0;s<a.keys.length;s++){if(null==n)throw new Error(o('[sprintf] Cannot access property "%s" of undefined value "%s"',a.keys[s],a.keys[s-1]));n=n[a.keys[s]]}else n=a.param_no?t[a.param_no]:t[f++];if(i.not_type.test(a.type)&&i.not_primitive.test(a.type)&&n instanceof Function&&(n=n()),i.numeric_arg.test(a.type)&&"number"!=typeof n&&isNaN(n))throw new TypeError(o("[sprintf] expecting number but found %T",n));switch(i.number.test(a.type)&&(h=n>=0),a.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,a.width?parseInt(a.width):0);break;case"e":n=a.precision?parseFloat(n).toExponential(a.precision):parseFloat(n).toExponential();break;case"f":n=a.precision?parseFloat(n).toFixed(a.precision):parseFloat(n);break;case"g":n=a.precision?String(Number(n.toPrecision(a.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=a.precision?n.substring(0,a.precision):n;break;case"t":n=String(!!n),n=a.precision?n.substring(0,a.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=a.precision?n.substring(0,a.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=a.precision?n.substring(0,a.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}i.json.test(a.type)?g+=n:(!i.number.test(a.type)||h&&!a.sign?p="":(p=h?"+":"-",n=n.toString().replace(i.sign,"")),u=a.pad_char?"0"===a.pad_char?"0":a.pad_char.charAt(1):" ",l=a.width-(p+n).length,c=a.width&&l>0?u.repeat(l):"",g+=a.align?p+n+c:"0"===u?p+c+n:c+p+n)}return g}(function(e){if(a[e])return a[e];var t,n=e,r=[],o=0;for(;n;){if(null!==(t=i.text.exec(n)))r.push(t[0]);else if(null!==(t=i.modulo.exec(n)))r.push("%");else{if(null===(t=i.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){o|=1;var s=[],c=t[2],u=[];if(null===(u=i.key.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(s.push(u[1]);""!==(c=c.substring(u[0].length));)if(null!==(u=i.key_access.exec(c)))s.push(u[1]);else{if(null===(u=i.index_access.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");s.push(u[1])}t[2]=s}else o|=2;if(3===o)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");r.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return a[e]=r}(e),arguments)}function s(e,t){return o.apply(null,[e].concat(t||[]))}var a=Object.create(null);t.sprintf=o,t.vsprintf=s,"undefined"!=typeof window&&(window.sprintf=o,window.vsprintf=s,void 0===(r=function(){return{sprintf:o,vsprintf:s}}.call(t,n,t,e))||(e.exports=r))}()},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}function a(e){var t="function"==typeof Map?new Map:void 0;return(a=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return c(e,arguments,l(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),u(r,e)})(e)}function c(e,t,n){return(c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&u(i,n.prototype),i}).apply(null,arguments)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var h=function(e){function t(e){var n;return i(this,t),(n=o(this,l(t).call(this,e))).name="ValueError",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,e),t}(a(Error)),p=function(e){function t(e){var n;return i(this,t),(n=o(this,l(t).call(this,e))).name="UnImplementedMethod",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,e),t}(a(Error)),f=function(e){function t(e,n){var r;return i(this,t),(r=o(this,l(t).call(this,e))).name="IllegalArgument",r.argument=n,console.log("EXCEPTION: "+r.name+" MESSAGE: "+r.message),r}return s(t,e),t}(a(Error)),d=function(e){function t(e){var n;return i(this,t),(n=o(this,l(t).call(this,e))).name="IllegalState",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,e),t}(a(Error)),g=(a(Error),function(e,t,n){var r=new XMLHttpRequest;r.open(e.method||"GET",e.url),e.headers&&Object.keys(e.headers).forEach((function(t){r.setRequestHeader(t,e.headers[t])})),r.onload=function(){r.status>=200&&r.status<300?t(r):n(r)},r.onerror=function(){return n(r)},r.send(e.body)});function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var v=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"update",value:function(e){var t=e||{};this.region=t.region||this.region,this.endpointOverride=t.endpoint||this.endpointOverride,this.reconnect=!1!==t.reconnect}},{key:"getRegion",value:function(){return this.region}},{key:"getEndpointOverride",value:function(){return this.endpointOverride}}])&&m(t.prototype,n),r&&m(t,r),e}()),y="/contact/chat/participant/connection-details",b="post",w={"us-west-2":{invokeUrl:"https://eap1w93j0k.execute-api.us-west-2.amazonaws.com/prod"},"us-east-1":{invokeUrl:"https://4agcjusx3k.execute-api.us-east-1.amazonaws.com/prod"},"ap-southeast-2":{invokeUrl:"https://v4u8oq0cve.execute-api.ap-southeast-2.amazonaws.com/prod"},"ap-northeast-1":{invokeUrl:"https://3fidunfyz7.execute-api.ap-northeast-1.amazonaws.com/prod"},"eu-central-1":{invokeUrl:"https://1gynaarm3e.execute-api.eu-central-1.amazonaws.com/prod"}},_=30,S=60,E={AGENT:"AGENT",CUSTOMER:"CUSTOMER"},C="INCOMING_MESSAGE",k="INCOMING_TYPING",I="CONNECTION_ESTABLISHED",T="CONNECTION_LOST",A="CONNECTION_BROKEN",R="CHAT_ENDED",x={textPlain:"text/plain",connectionAcknowledged:"application/vnd.amazon.connect.event.connection.acknowledged",typing:"application/vnd.amazonaws.connect.event.typing",participantJoined:"application/vnd.amazonaws.connect.event.participant.joined",participantLeft:"application/vnd.amazonaws.connect.event.participant.left",transferSucceeded:"application/vnd.amazonaws.connect.event.transfer.succeeded",transferFailed:"application/vnd.amazonaws.connect.event.transfer.failed",chatEnded:"application/vnd.amazonaws.connect.event.chat.ended"},P=15,O="ASCENDING",N="BACKWARD",L="NULL",M="CLIENT_LOGGER",D="DEBUG",q="us-west-2",U={interval:3e3,maxRetries:5},j={interval:3e3,maxRetries:5},B=n(1);function F(e){return(F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var H={assertTrue:function(e,t){if(!e)throw new h(t)},assertNotNull:function(e,t){return H.assertTrue(null!==e&&void 0!==F(e),Object(B.sprintf)("%s must be provided",t||"A value")),e},now:function(){return(new Date).getTime()},isString:function(e){return"string"==typeof e},randomId:function(){return Object(B.sprintf)("%s-%s",H.now(),Math.random().toString(36).slice(2))},assertIsNonEmptyString:function(e,t){if(!e||"string"!=typeof e)throw new f(t+" is not a non-empty string!")},assertIsList:function(e,t){if(!Array.isArray(e))throw new f(t+" is not an array")},assertIsEnum:function(e,t,n){var r;for(r=0;r<t.length;r++)if(t[r]===e)return;throw new f(n+" passed is not valid. Allowed values are: "+t)},makeEnum:function(e){var t={};return e.forEach((function(e){var n=e.replace(/\.?([a-z]+)_?/g,(function(e,t){return t.toUpperCase()+"_"})).replace(/_$/,"");t[n]=e})),t},contains:function(e,t){return e instanceof Array?null!==H.find(e,(function(e){return e===t})):t in e},find:function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return e[n];return null},containsValue:function(e,t){return e instanceof Array?null!==H.find(e,(function(e){return e===t})):null!==H.find(H.values(e),(function(e){return e===t}))},isFunction:function(e){return!!(e&&e.constructor&&e.call&&e.apply)},values:function(e){var t=[];for(var n in H.assertNotNull(e,"map"),e)t.push(e[n]);return t},isObject:function(e){return!("object"!==F(e)||null===e)},assertIsObject:function(e,t){if(!H.isObject(e))throw new f(t+" is not an object!")},delay:function(e){return new Promise((function(t){return setTimeout(t,e)}))},asyncWhileInterval:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,o=new Date;return t(r)?e(r).catch((function(i){var s=Math.max(0,n-(new Date).valueOf()+o.valueOf());return H.delay(s).then((function(){return H.asyncWhileInterval(e,t,n,r+1,i)}))})):Promise.reject(i||new Error("async while aborted"))}},z=H;function V(e){return(V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function W(e,t){return!t||"object"!==V(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function G(e){return(G=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function K(e,t){return(K=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function X(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function J(e,t,n){return t&&Y(e.prototype,t),n&&Y(e,n),e}var Q=function(){function e(){X(this,e)}return J(e,[{key:"debug",value:function(e){}},{key:"info",value:function(e){}},{key:"warn",value:function(e){}},{key:"error",value:function(e){}}]),e}(),$={DEBUG:10,INFO:20,WARN:30,ERROR:40},Z=function(){function e(){X(this,e),this.updateLoggerConfig(),this.consoleLoggerWrapper=ne()}return J(e,[{key:"writeToClientLogger",value:function(e,t){if(this.hasClientLogger())switch(e){case $.DEBUG:return this._clientLogger.debug(t);case $.INFO:return this._clientLogger.info(t);case $.WARN:return this._clientLogger.warn(t);case $.ERROR:return this._clientLogger.error(t)}}},{key:"isLevelEnabled",value:function(e){return e>=this._level}},{key:"hasClientLogger",value:function(){return null!==this._clientLogger}},{key:"getLogger",value:function(e){var t=e.prefix||"";return this._logsDestination===D?this.consoleLoggerWrapper:new te(t)}},{key:"updateLoggerConfig",value:function(e){var t=e||{};this._level=t.level||$.INFO,this._clientLogger=t.logger||null,this._logsDestination=L,t.debug&&(this._logsDestination=D),t.logger&&(this._logsDestination=M)}}]),e}(),ee=function(){function e(){X(this,e)}return J(e,[{key:"debug",value:function(){}},{key:"info",value:function(){}},{key:"warn",value:function(){}},{key:"error",value:function(){}}]),e}(),te=function(e){function t(e){var n;return X(this,t),(n=W(this,G(t).call(this))).prefix=e||"",n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&K(e,t)}(t,e),J(t,[{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log($.DEBUG,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log($.INFO,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log($.WARN,t)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log($.ERROR,t)}},{key:"_shouldLog",value:function(e){return re.hasClientLogger()&&re.isLevelEnabled(e)}},{key:"_writeToClientLogger",value:function(e,t){re.writeToClientLogger(e,t)}},{key:"_log",value:function(e,t){if(this._shouldLog(e)){var n=this._convertToSingleStatement(t);this._writeToClientLogger(e,n)}}},{key:"_convertToSingleStatement",value:function(e){var t="";this.prefix&&(t+=this.prefix+" ");for(var n=0;n<e.length;n++){var r=e[n];t+=this._convertToString(r)+" "}return t}},{key:"_convertToString",value:function(e){try{if(!e)return"";if(z.isString(e))return e;if(z.isObject(e)&&z.isFunction(e.toString)){var t=e.toString();if("[object Object]"!==t)return t}return JSON.stringify(e)}catch(t){return console.error("Error while converting argument to string",e,t),""}}}]),t}(ee),ne=function(){var e=new ee;return e.debug=console.debug.bind(window.console),e.info=console.info.bind(window.console),e.warn=console.warn.bind(window.console),e.error=console.error.bind(window.console),e},re=new Z;n(7);function ie(e){return(ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function oe(e,t){return!t||"object"!==ie(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function se(e){return(se=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ae(e,t){return(ae=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ce(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ue(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function le(e,t,n){return t&&ue(e.prototype,t),n&&ue(e,n),e}var he=function(){function e(){ce(this,e),this.clientCache={}}return le(e,[{key:"getCachedClient",value:function(e){var t=Object.assign({},e),n=e.region||v.getRegion()||q;if(t.region=n,this.clientCache[n])return this.clientCache[n];var r=this._createAwsClient(t);return this.clientCache[n]=r,r}},{key:"_createAwsClient",value:function(e){var t=e.region,n=v.getEndpointOverride(),r=w[t];return n&&(r.invokeUrl=n),new pe({endpoint:r.invokeUrl,region:t})}}]),e}(),pe=function(e){function t(e){var n;ce(this,t),n=oe(this,se(t).call(this));var r=new AWS.Credentials("",""),i=new AWS.Config({region:e.region,endpoint:e.endpoint,credentials:r});return n.chatClient=new AWS.ConnectParticipant(i),n.callHttpClient=g,n.invokeUrl=e.endpoint,n.logger=re.getLogger({prefix:"ChatClient"}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ae(e,t)}(t,e),le(t,[{key:"createParticipantConnection",value:function(e,t){var n=this,r={Type:t,ParticipantToken:e},i=n.chatClient.createParticipantConnection(r);return n._sendRequest(i).then((function(e){return n.logger.info("successfully create connection request"),e})).catch((function(e){return n.logger.error("error when creating connection request"),Promise.reject(e)}))}},{key:"disconnectParticipant",value:function(e){var t=this,n={ConnectionToken:e},r=t.chatClient.disconnectParticipant(n);return t._sendRequest(r).then((function(e){return t.logger.info("successfully disconnect participant"),e})).catch((function(e){return t.logger.error("error when disconnecting participant"),Promise.reject(e)}))}},{key:"getTranscript",value:function(e,t){var n=this,r={MaxResults:t.maxResults,NextToken:t.nextToken,ScanDirection:t.scanDirection,SortOrder:t.sortOrder,StartPosition:{Id:t.startPosition.id,AbsoluteTime:t.startPosition.absoluteTime,MostRecent:t.startPosition.mostRecent},ConnectionToken:e};t.contactId&&(r.ContactId=t.contactId);var i=n.chatClient.getTranscript(r);return n._sendRequest(i).then((function(e){return n.logger.info("successfully get transcript"),e})).catch((function(e){return n.logger.error("error when getting transcript"),Promise.reject(e)}))}},{key:"sendMessage",value:function(e,t,n){var r=this,i={Content:t,ContentType:n,ConnectionToken:e},o=r.chatClient.sendMessage(i);return r._sendRequest(o).then((function(e){return r.logger.info("successfully send message"),e})).catch((function(e){return r.logger.error("error when sending message"),Promise.reject(e)}))}},{key:"sendEvent",value:function(e,t,n){var r=this,i={ConnectionToken:e,ContentType:t,Content:n},o=r.chatClient.sendEvent(i);return r._sendRequest(o).then((function(e){return r.logger.info("successfully send event"),e})).catch((function(e){return r.logger.error("error when sending event"),Promise.reject(e)}))}},{key:"_sendRequest",value:function(e){return new Promise((function(t,n){e.on("success",(function(e){t(e)})).on("error",(function(e){n(e)})).send()}))}},{key:"createConnectionDetails",value:function(e){var t={method:b,headers:{},url:this.invokeUrl+y,body:{}};return t.headers["x-amzn-connect-participant-token"]=e,this._callHttpClient(t)}},{key:"_callHttpClient",value:function(e){var t=this;return e.headers=Object.assign({"Content-Type":"application/json",Accept:"application/json"},e.headers),e.body=JSON.stringify(e.body),new Promise((function(n,r){t.callHttpClient(e,(function(e){var t={};t.data=JSON.parse(e.responseText),n(t)}),(function(e){var n={};n.statusText=e.statusText;try{n.error=JSON.parse(e.responseText)}catch(e){t.logger.warn("invalid json error from server"),n.error=null}r(n)}))}))}}]),t}(function(){function e(){ce(this,e)}return le(e,[{key:"sendMessage",value:function(e,t,n){throw new p("sendTextMessage in ChatClient")}},{key:"disconnectParticipant",value:function(e){throw new p("disconnectParticipant in ChatClient")}},{key:"sendEvent",value:function(e,t,n){throw new p("sendEvent in ChatClient")}},{key:"createConnectionDetails",value:function(e){throw new p("reconnectChat in ChatClient")}},{key:"createParticipantConnection",value:function(e,t){throw new p("createConnection in ChatClient")}}]),e}()),fe=new he;function de(e){return(de="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ge(e,t){return!t||"object"!==de(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function me(e){return(me=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ve(e,t){return(ve=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ye(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function be(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function we(e,t,n){return t&&be(e.prototype,t),n&&be(e,n),e}var _e=function(e){function t(){return ye(this,t),ge(this,me(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ve(e,t)}(t,e),we(t,[{key:"validateChatDetails",value:function(e){z.assertIsObject(e,"chatDetails"),z.assertIsNonEmptyString(e.contactId,"chatDetails.contactId"),z.assertIsNonEmptyString(e.participantId,"chatDetails.participantId"),e.connectionDetails?(z.assertIsObject(e.connectionDetails,"chatDetails.connectionDetails"),z.assertIsNonEmptyString(e.connectionDetails.PreSignedConnectionUrl,"chatDetails.connectionDetails.PreSignedConnectionUrl"),z.assertIsNonEmptyString(e.connectionDetails.ConnectionId,"chatDetails.connectionDetails.ConnectionId"),z.assertIsNonEmptyString(e.connectionDetails.connectionToken,"chatDetails.connectionDetails.connectionToken")):z.assertIsNonEmptyString(e.participantToken,"chatDetails.participantToken")}},{key:"validateInitiateChatResponse",value:function(){return!0}}]),t}(function(){function e(){ye(this,e)}return we(e,[{key:"validateNewControllerDetails",value:function(e){return!0}},{key:"validateSendMessage",value:function(e){if(!z.isString(e.message))throw new f(e.message+"is not a valid message");this.validateContentType(e.contentType)}},{key:"validateContentType",value:function(e){z.assertIsEnum(e,Object.values(x),"contentType")}},{key:"validateConnectChat",value:function(e){return!0}},{key:"validateLogger",value:function(e){z.assertIsObject(e,"logger"),["debug","info","warn","error"].forEach((function(t){if(!z.isFunction(e[t]))throw new f(t+" should be a valid function on the passed logger object!")}))}},{key:"validateSendEvent",value:function(e){this.validateContentType(e.contentType)}},{key:"validateGetMessages",value:function(e){return!0}}]),e}());function Se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Ee={NeverStarted:"NeverStarted",Starting:"Starting",Connected:"Connected",ConnectionLost:"ConnectionLost",Ended:"Ended"},Ce="ConnectionLost",ke="ConnectionGained",Ie="Ended",Te="IncomingMessage",Ae="IOT",Re="LPC",xe="WEBSOCKET",Pe="CONNECTION_CREDENTIALS",Oe=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.connectionDetailsProvider=t,this.isStarted=!1}var t,n,r;return t=e,(n=[{key:"startConnectionTokenPolling",value:function(){var e=this;this.interval=setInterval((function(){e.connectionDetailsProvider.fetchConnectionToken()}),432e5)}},{key:"start",value:function(){this.isStarted||(this.isStarted=!0,this.startConnectionTokenPolling())}},{key:"end",value:function(){clearInterval(this.interval)}},{key:"getConnectionToken",value:function(){return this.connectionDetailsProvider.connectionToken}}])&&Se(t.prototype,n),r&&Se(t,r),e}(),Ne=function(e,t,n){this.subMap=e,this.id=z.randomId(),this.eventName=t,this.f=n};Ne.prototype.unsubscribe=function(){this.subMap.unsubscribe(this.eventName,this.id)};var Le=function(){this.subIdMap={},this.subEventNameMap={}};Le.prototype.subscribe=function(e,t){var n=new Ne(this,e,t);this.subIdMap[n.id]=n;var r=this.subEventNameMap[e]||[];return r.push(n),this.subEventNameMap[e]=r,function(){return n.unsubscribe()}},Le.prototype.unsubscribe=function(e,t){z.contains(this.subEventNameMap,e)&&(this.subEventNameMap[e]=this.subEventNameMap[e].filter((function(e){return e.id!==t})),this.subEventNameMap[e].length<1&&delete this.subEventNameMap[e]),z.contains(this.subIdMap,t)&&delete this.subIdMap[t]},Le.prototype.getAllSubscriptions=function(){return z.values(this.subEventNameMap).reduce((function(e,t){return e.concat(t)}),[])},Le.prototype.getSubscriptions=function(e){return this.subEventNameMap[e]||[]};var Me=function(e){var t=e||{};this.subMap=new Le,this.logEvents=t.logEvents||!1};function De(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Me.prototype.subscribe=function(e,t){return z.assertNotNull(e,"eventName"),z.assertNotNull(t,"f"),z.assertTrue(z.isFunction(t),"f must be a function"),this.subMap.subscribe(e,t)},Me.prototype.subscribeAll=function(e){return z.assertNotNull(e,"f"),z.assertTrue(z.isFunction(e),"f must be a function"),this.subMap.subscribe("<<all>>",e)},Me.prototype.getSubscriptions=function(e){return this.subMap.getSubscriptions(e)},Me.prototype.trigger=function(e,t){z.assertNotNull(e,"eventName");var n=this,r=this.subMap.getSubscriptions("<<all>>"),i=this.subMap.getSubscriptions(e);r.concat(i).forEach((function(r){try{r.f(t||null,e,n)}catch(e){}}))},Me.prototype.triggerAsync=function(e,t){var n=this;setTimeout((function(){return n.trigger(e,t)}),0)},Me.prototype.bridge=function(){var e=this;return function(t,n){e.trigger(n,t)}},Me.prototype.unsubscribeAll=function(){this.subMap.getAllSubscriptions().forEach((function(e){e.unsubscribe()}))};var qe=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.chatClient=r,this.participantToken=n||null,this.connectionDetails=t||null,this.connectionToken=null,this.connectionType=null,this.firstCall=!0}var t,n,r;return t=e,(n=[{key:"init",value:function(){var e=this;return this.participantToken?this._fetchConnectionDetails().then((function(){return e.connectionDetails})):this.connectionDetails?Promise.resolve().then((function(){return e._handlePresetConnectionDetails(),e.connectionDetails})):Promise.reject("Fatal: Cannot get connection details.")}},{key:"fetchConnectionDetails",value:function(){var e=this;return this.firstCall?(this.firstCall=!1,Promise.resolve(this.connectionDetails)):this.participantToken?this._fetchConnectionDetails().then((function(){return e.connectionDetails})):Promise.reject("Fatal: Cannot use static connection details more than once.")}},{key:"fetchConnectionToken",value:function(){var e=this;return this.firstCall?(this.firstCall=!1,Promise.resolve(this.connectionToken)):this.participantToken?this._fetchConnectionDetails().then((function(){return e.connectionToken})):Promise.reject("Fatal: Cannot use static connection details more than once.")}},{key:"_handlePresetConnectionDetails",value:function(){this.connectionType=Ae,this.connectionToken=this.connectionDetails.connectionToken,this.connectionDetails={connectionId:this.connectionDetails.ConnectionId,preSignedConnectionUrl:this.connectionDetails.PreSignedConnectionUrl}}},{key:"_handleCreateParticipantConnectionResponse",value:function(e){this.connectionType=Re,this.connectionToken=e.ConnectionCredentials.ConnectionToken,this.connectionDetails={connectionId:null,preSignedConnectionUrl:e.Websocket.Url}}},{key:"_handleCreateConnectionDetailsResponse",value:function(e){e.PreSignedConnectionUrl?this.connectionType=e.PreSignedConnectionUrl.includes(".iot.")?Ae:Re:this.connectionType=e.connectionId?Ae:Re,this.connectionToken=e.ParticipantCredentials.ConnectionAuthenticationToken,this.connectionDetails={connectionId:e.ConnectionId,preSignedConnectionUrl:e.PreSignedConnectionUrl}}},{key:"_fetchConnectionDetails",value:function(){var e=this;return this.chatClient.createParticipantConnection(this.participantToken,[xe,Pe]).then((function(t){return null!==t.data.Websocket.Url&&t.data.Websocket.Url.includes(".iot.")?e.chatClient.createConnectionDetails(e.participantToken).then((function(t){return e._handleCreateConnectionDetailsResponse(t.data)})).catch((function(e){return Promise.reject({reason:"Failed to fetch connectionDetails with createConnectionDetails",_debug:e})})):e._handleCreateParticipantConnectionResponse(t.data)})).catch((function(e){return Promise.reject({reason:"Failed to fetch connectionDetails with createParticipantConnection",_debug:e})}))}}])&&De(t.prototype,n),r&&De(t,r),e}(),Ue=n(4),je=n.n(Ue);function Be(e){return(Be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Fe(e){return(Fe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function He(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ze(e,t){return(ze=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ve(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function We(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ge(e,t,n){return t&&We(e.prototype,t),n&&We(e,n),e}var Ke=function(){function e(){Ve(this,e)}return Ge(e,[{key:"connect",value:function(e){throw new p("connect in IotClient")}},{key:"disconnect",value:function(){throw new p("connect in IotClient")}},{key:"subscribe",value:function(e,t){throw new p("connect in IotClient")}},{key:"unsubscribe",value:function(e,t){throw new p("connect in IotClient")}}]),e}(),Xe=Object.freeze({NeverConnected:"NeverConnected",Connecting:"Connecting",Connected:"Connected",Disconnected:"Disconnected"}),Ye=Object.freeze({MESSAGE:"Message",DISCONNECTED:"Disconnected"}),Je=function(e){function t(e){var n;Ve(this,t),(n=function(e,t){return!t||"object"!==Be(t)&&"function"!=typeof t?He(e):t}(this,Fe(t).call(this))).preSignedUrl=e.preSignedUrl,n.connectionId=e.connectionId,n.status=Xe.NeverConnected,n.pahoClient=new je.a.Client(n.preSignedUrl,n.connectionId);var r=He(n);return n.pahoClient.onMessageArrived=function(e){r._messageArrivedCallback(e)},n.pahoClient.onConnectionLost=function(e){r._connectionLostCallBack(e)},n.pahoClient.onMessageArrived=function(e){r._messageArrivedCallback(e)},n.callback=e.callback,n.neverConnected=!0,n._subscribedTopics=[],n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ze(e,t)}(t,e),Ge(t,[{key:"connect",value:function(e){var t=this;return new Promise((function(n,r){e.onSuccess=function(e){t.neverConnected=!1,t._onConnectSuccess(e),n({})},e.onFailure=function(e){var n={reason:e};t._onConnectFailure(n),r(n)},t.status=Xe.Connecting,t.pahoClient.connect(e)}))}},{key:"_connectionLostCallBack",value:function(e){console.warn("Connection lost: ",e);var t={reason:e};this._subscribedTopics=[],this.status!==Xe.Disconnected&&(this.status=Xe.Disconnected,this.callback(Ye.DISCONNECTED,t))}},{key:"_messageArrivedCallback",value:function(e){var t={topic:e.topic,qos:e.qos,payloadString:e.payloadString};this.callback(Ye.MESSAGE,t)}},{key:"_onConnectSuccess",value:function(e){this.status=Xe.Connected}},{key:"_onConnectFailure",value:function(e){this.neverConnected?this.status=Xe.NeverConnected:this.status=Xe.Disconnected}},{key:"disconnect",value:function(){this._subscribedTopics=[],this.status=Xe.Disconnected,this.pahoClient.disconnect()}},{key:"subscribe",value:function(e,t){var n=this;return new Promise((function(r,i){t.onSuccess=function(t){n._subscribeSuccess(e,t);var i={topic:e,qos:t.grantedQos};r(i)},t.onFailure=function(t){i({topic:e,error:t})},n.pahoClient.subscribe(e,t)}))}},{key:"_addToTopics",value:function(e){this._subscribedTopics.indexOf(e)>=0||this._subscribedTopics.push(e)}},{key:"_subscribeSuccess",value:function(e,t){this._addToTopics(e)}},{key:"getSubscribedTopics",value:function(){return this._subscribedTopics.slice(0)}},{key:"unsubscribe",value:function(e,t){var n=this;return new Promise((function(r,i){t.onSuccess=function(t){var i={topic:e,response:t};n._unsubscribeSuccess(e,i),r(i)},t.onFailure=function(t){i({topic:e,error:t})},n.pahoClient.unsubscribe(e,t)}))}},{key:"_unsubscribeSuccess",value:function(e,t){this._subscribedTopics=this._subscribedTopics.filter((function(t){return t!==e}))}},{key:"getStatus",value:function(){return this.status}}]),t}(Ke);function Qe(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function $e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ze(e,t,n){return t&&$e(e.prototype,t),n&&$e(e,n),e}function et(e){return(et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var tt=function(){function e(){Qe(this,e)}return Ze(e,[{key:"onOnline",value:function(){}},{key:"onOffline",value:function(){}},{key:"isOnline",value:function(){return!0}},{key:"whenOnline",value:function(){return Promise.resolve()}}]),e}(),nt=function(){function e(){var t=this;Qe(this,e),this.eventBus=new Me,this.onlinePromise=null,window.addEventListener("online",(function(){t.eventBus.trigger("online")})),window.addEventListener("offline",(function(){t.eventBus.trigger("offline")}))}return Ze(e,[{key:"onOnline",value:function(e){return this.eventBus.subscribe("online",e)}},{key:"onOffline",value:function(e){return this.eventBus.subscribe("offline",e)}},{key:"isOnline",value:function(){return window.navigator.onLine}},{key:"whenOnline",value:function(){var e=this;return this.isOnline()?Promise.resolve():(this.onlinePromise||(this.onlinePromise=new Promise((function(t){var n=e.onOnline((function(){e.onlinePromise=null,n(),t()}))}))),this.onlinePromise)}}]),e}(),rt="object"===("undefined"==typeof window?"undefined":et(window))&&window.navigator&&window.addEventListener?new nt:new tt;function it(e){return(it="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ot(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function st(e,t){return!t||"object"!==it(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function at(e,t,n){return(at="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=ct(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function ct(e){return(ct=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ut(e,t){return(ut=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var lt=function(e){function t(e,n,r){var i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(i=st(this,ct(t).call(this,n))).logger=re.getLogger({prefix:"ContactId-"+e+": "}),i.status=Ee.NeverStarted,i.eventBus=new Me,i._unsubscribeFunctions=[],i.reconnectConfig=r,i._connectCalledAtleastOnce=!1,i._setNetworkEventHandlers(),i}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ut(e,t)}(t,e),n=t,(r=[{key:"start",value:function(){if(at(ct(t.prototype),"start",this).call(this),this.status!==Ee.NeverStarted)throw new d("Connection helper started twice!!");return this.status=Ee.Starting,this._initiateConnectWithRetry()}},{key:"end",value:function(){at(ct(t.prototype),"end",this).call(this),this._handleBrokenConnection({reason:"user action"}),this.iotConnection&&this.iotConnection.disconnect()}},{key:"getStatus",value:function(){return this.status}},{key:"_initIotConnection",value:function(e){this.iotConnection=new Je({preSignedUrl:e.preSignedConnectionUrl,connectionId:e.connectionId,callback:this._handleIotEvent.bind(this)})}},{key:"_connect",value:function(){var e=this;return this._connectCalledAtleastOnce=!0,this.connectionDetailsProvider.fetchConnectionDetails().then(this._initIotConnection.bind(this)).then((function(){var t={useSSL:!0,keepAliveInterval:_,reconnect:!1,mqttVersion:4,timeout:S};return new Promise((function(n,r){e.iotConnection.connect(t).then((function(t){e._subscribe(n,r,t)})).catch((function(t){e._connectFailed(r,t)}))}))}))}},{key:"_connectFailed",value:function(e,t){e({connectSuccess:!1,reason:"ConnectionToBrokerFailed",details:t})}},{key:"_subscribe",value:function(e,t){var n=this;this.iotConnection.subscribe(this.connectionDetailsProvider.connectionDetails.connectionId,{qos:1}).then((function(t){n._postSubscribe(e,t)})).catch((function(e){n._subscribeFailed(t,e)}))}},{key:"_postSubscribe",value:function(e,t){e({details:t,connectSuccess:!0})}},{key:"_subscribeFailed",value:function(e,t){var n={connectSuccess:!1,details:t,reason:"SubscribtionToTopicFailed"};this.iotConnection.disconnect(),e(n)}},{key:"_handleIotEvent",value:function(e,t){switch(e){case Ye.MESSAGE:this.logger.debug("Received incoming data",t.payloadString);try{var n=JSON.parse(t.payloadString);this.eventBus.trigger(Te,n)}catch(e){this.logger.error("Wrong message format: ",t.payloadString)}break;case Ye.DISCONNECTED:v.reconnect&&0!==t.reason.errorCode?this._handleLostConnection(t):this._handleBrokenConnection(t)}}},{key:"_initiateConnectWithRetry",value:function(){var e=this;return this._initiateConnectPromise||(this._initiateConnectPromise=z.asyncWhileInterval((function(t){return e.logger.info("Connect - ".concat(t,". try")),e._connect()}),(function(t){return t<e.reconnectConfig.maxRetries&&e._canConnect()}),this.reconnectConfig.interval).then((function(){e.logger.info("Connect - Success"),e._handleGainedConnection()})).catch((function(t){return e.logger.info("Connect - Failed"),rt.isOnline()?(e._handleBrokenConnection(t),e.iotConnection&&e.iotConnection.disconnect()):e.state!==Ee.ConnectionLost&&e._handleLostConnection(t),Promise.reject(t)})).finally((function(){e._initiateConnectPromise=null}))),this._initiateConnectPromise}},{key:"_canConnect",value:function(){return rt.isOnline()&&(this.status===Ee.ConnectionLost||this.status===Ee.Starting)}},{key:"_handleBrokenConnection",value:function(e){this.status!==Ee.Ended&&(this.status=Ee.Ended,this._unsubscribeFunctions.forEach((function(e){return e()})),this.eventBus.trigger(Ie,e))}},{key:"_handleLostConnection",value:function(e){this.status=Ee.ConnectionLost,this.eventBus.trigger(Ce,e),rt.isOnline()&&this._initiateConnectWithRetry().catch((function(){}))}},{key:"_handleGainedConnection",value:function(){this.status=Ee.Connected,this.eventBus.trigger(ke,{})}},{key:"_setNetworkEventHandlers",value:function(){var e=this,t=rt.onOnline((function(){e._connectCalledAtleastOnce&&e._canConnect()&&e._initiateConnectWithRetry().catch((function(){}))}));this._unsubscribeFunctions.push(t)}},{key:"onEnded",value:function(e){return this.eventBus.subscribe(Ie,e)}},{key:"onConnectionLost",value:function(e){return this.eventBus.subscribe(Ce,e)}},{key:"onConnectionGain",value:function(e){return this.eventBus.subscribe(ke,e)}},{key:"onMessage",value:function(e){return this.eventBus.subscribe(Te,e)}}])&&ot(n.prototype,r),i&&ot(n,i),t}(Oe);function ht(e){return(ht="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function pt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ft(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function dt(e,t,n){return t&&ft(e.prototype,t),n&&ft(e,n),e}function gt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function mt(e,t,n){return(mt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=vt(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function vt(e){return(vt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function yt(e,t){return(yt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var bt=function(e){function t(e,n,r){var i;return pt(this,t),(i=function(e,t){return!t||"object"!==ht(t)&&"function"!=typeof t?gt(e):t}(this,vt(t).call(this,n))).cleanUpBaseInstance=!r,t.baseInstance||(t.baseInstance=new wt(n,r)),i.initialContactId=e,i.status=null,i.eventBus=new Me,i.subscriptions=[t.baseInstance.onEnded(i.handleEnded.bind(gt(i))),t.baseInstance.onConnectionGain(i.handleConnectionGain.bind(gt(i))),t.baseInstance.onConnectionLost(i.handleConnectionLost.bind(gt(i))),t.baseInstance.onMessage(i.handleMessage.bind(gt(i)))],i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&yt(e,t)}(t,e),dt(t,[{key:"start",value:function(){return mt(vt(t.prototype),"start",this).call(this),t.baseInstance.start()}},{key:"end",value:function(){mt(vt(t.prototype),"end",this).call(this),this.eventBus.unsubscribeAll(),this.subscriptions.forEach((function(e){return e()})),this.status=Ee.Ended,t.baseInstance&&this.cleanUpBaseInstance&&(t.baseInstance.end(),t.baseInstance=null)}},{key:"getStatus",value:function(){return this.status||t.baseInstance.getStatus()}},{key:"onEnded",value:function(e){return this.eventBus.subscribe(Ie,e)}},{key:"handleEnded",value:function(){this.eventBus.trigger(Ie,{})}},{key:"onConnectionGain",value:function(e){return this.eventBus.subscribe(ke,e)}},{key:"handleConnectionGain",value:function(){this.eventBus.trigger(ke,{})}},{key:"onConnectionLost",value:function(e){return this.eventBus.subscribe(Ce,e)}},{key:"handleConnectionLost",value:function(){this.eventBus.trigger(Ce,{})}},{key:"onMessage",value:function(e){return this.eventBus.subscribe(Te,e)}},{key:"handleMessage",value:function(e){e.InitialContactId===this.initialContactId&&this.eventBus.trigger(Te,e)}}]),t}(Oe);bt.baseInstance=null;var wt=function(){function e(t,n){pt(this,e),this.status=Ee.NeverStarted,this.eventBus=new Me,this.logger=re.getLogger({prefix:"LPC WebSockets: "}),this.initWebsocketManager(n,t)}return dt(e,[{key:"initWebsocketManager",value:function(e,t){this.websocketManager=e||connect.WebSocketManager.create(),this.websocketManager.subscribeTopics(["aws/chat"]),this.subscriptions=[this.websocketManager.onMessage("aws/chat",this.handleMessage.bind(this)),this.websocketManager.onConnectionGain(this.handleConnectionGain.bind(this)),this.websocketManager.onConnectionLost(this.handleConnectionLost.bind(this)),this.websocketManager.onInitFailure(this.handleEnded.bind(this))],e||this.websocketManager.init((function(){return t.fetchConnectionDetails().then((function(e){return{webSocketTransport:{url:e.preSignedConnectionUrl,transportLifeTimeInSeconds:7140}}}))}))}},{key:"end",value:function(){this.websocketManager.closeWebSocket(),this.eventBus.unsubscribeAll(),this.subscriptions.forEach((function(e){return e()}))}},{key:"start",value:function(){return this.status===Ee.NeverStarted&&(this.status=Ee.Starting),Promise.resolve()}},{key:"onEnded",value:function(e){return this.eventBus.subscribe(Ie,e)}},{key:"handleEnded",value:function(){this.status=Ee.Ended,this.eventBus.trigger(Ie,{})}},{key:"onConnectionGain",value:function(e){return this.eventBus.subscribe(ke,e)}},{key:"handleConnectionGain",value:function(){this.status=Ee.Connected,this.eventBus.trigger(ke,{})}},{key:"onConnectionLost",value:function(e){return this.eventBus.subscribe(Ce,e)}},{key:"handleConnectionLost",value:function(){this.status=Ee.ConnectionLost,this.eventBus.trigger(Ce,{})}},{key:"onMessage",value:function(e){return this.eventBus.subscribe(Te,e)}},{key:"handleMessage",value:function(e){var t;try{t=JSON.parse(e.content),this.eventBus.trigger(Te,t)}catch(t){this.logger.error("Wrong message format: ",e)}}}]),e}(),_t=bt;function St(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Et=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"get",value:function(e){var t=e.contactId,n=e.initialContactId,r=e.connectionDetails,i=e.participantToken,o=e.chatClient,s=e.websocketManager,a=e.reconnectConfig,c=new qe(r,i,o);return c.init().then((function(){return c.connectionType===Re?new _t(n,c,s):c.connectionType===Ae?new lt(t,c,a):void 0}))}}])&&St(t.prototype,n),r&&St(t,r),e}());function Ct(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var kt="NeverEstablished",It="Establishing",Tt="Established",At="Broken",Rt=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.logger=re.getLogger({prefix:"ContactId-"+t.chatDetails.contactId+": "}),this.argsValidator=new _e,this.pubsub=new Me,this.sessionType=t.sessionType,this.connectionDetails=t.chatDetails.connectionDetails,this.initialContactId=t.chatDetails.initialContactId,this.contactId=t.chatDetails.contactId,this.participantId=t.chatDetails.participantId,this.chatClient=t.chatClient,this.participantToken=t.chatDetails.participantToken,this.websocketManager=t.websocketManager,this._participantDisconnected=!1,this.sessionMetadata={}}var t,n,r;return t=e,(n=[{key:"subscribe",value:function(e,t){this.pubsub.subscribe(e,t),this.logger.info("Subscribed successfully to eventName: ",e)}},{key:"handleRequestSuccess",value:function(e,t,n){var r=this;return function(i){return i.metadata=e,r.logger.debug("".concat(n," successful! Response: "),i," / Request: ",t),i}}},{key:"handleRequestFailure",value:function(e,t,n){var r=this;return function(i){return i.metadata=e,r.logger.debug("".concat(n," failed! Error: "),i," / Request: ",t),Promise.reject(i)}}},{key:"sendMessage",value:function(e){var t=e.metadata||null;this.argsValidator.validateSendMessage(e);var n=this.connectionHelper.getConnectionToken();return this.chatClient.sendMessage(n,e.message,e.contentType).then(this.handleRequestSuccess(t,e,"sendMessage")).catch(this.handleRequestFailure(t,e,"sendMessage"))}},{key:"sendEvent",value:function(e){var t=e.metadata||null;this.argsValidator.validateSendEvent(e);var n=this.connectionHelper.getConnectionToken(),r=e.content||null;return this.chatClient.sendEvent(n,e.contentType,r).then(this.handleRequestSuccess(t,e,"sendEvent")).catch(this.handleRequestFailure(t,e,"sendEvent"))}},{key:"getTranscript",value:function(e){var t=e.metadata||null,n={startPosition:e.startPosition||{},scanDirection:e.scanDirection||N,sortOrder:e.sortOrder||O,maxResults:e.maxResults||P};e.nextToken&&(n.nextToken=e.nextToken),e.contactId&&(n.contactId=e.contactId);var r=this.connectionHelper.getConnectionToken();return this.chatClient.getTranscript(r,n).then(this.handleRequestSuccess(t,n,"getTranscript")).catch(this.handleRequestFailure(t,n,"getTranscript"))}},{key:"connect",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.sessionMetadata=e.metadata||null,this.argsValidator.validateConnectChat(e),Et.get({contactId:this.contactId,initialContactId:this.initialContactId,connectionDetails:this.connectionDetails,participantToken:this.participantToken,chatClient:this.chatClient,websocketManager:this.websocketManager,reconnectConfig:this.sessionType===E.AGENT?U:j}).then(this._initConnectionHelper.bind(this)).then(this._onConnectSuccess.bind(this),this._onConnectFailure.bind(this))}},{key:"_initConnectionHelper",value:function(e){return this.connectionHelper=e,this.connectionHelper.onEnded(this._handleEndedConnection.bind(this)),this.connectionHelper.onConnectionLost(this._handleLostConnection.bind(this)),this.connectionHelper.onConnectionGain(this._handleGainedConnection.bind(this)),this.connectionHelper.onMessage(this._handleIncomingMessage.bind(this)),this.connectionHelper.start()}},{key:"_handleEndedConnection",value:function(e){this._forwardChatEvent(A,{data:e,chatDetails:this.getChatDetails()})}},{key:"_handleLostConnection",value:function(e){this._forwardChatEvent(T,{data:e,chatDetails:this.getChatDetails()})}},{key:"_handleGainedConnection",value:function(e){this._forwardChatEvent(I,{data:e,chatDetails:this.getChatDetails()})}},{key:"_handleIncomingMessage",value:function(e){try{var t=e.ContentType===x.typing?k:C;this._forwardChatEvent(t,{data:e,chatDetails:this.getChatDetails()}),e.ContentType===x.chatEnded&&(this._forwardChatEvent(R,{data:null,chatDetails:this.getChatDetails()}),this.breakConnection())}catch(t){this.logger.error("Error occured while handling message from Connection. eventData: ",e," Causing exception: ",t)}}},{key:"_forwardChatEvent",value:function(e,t){this.logger.debug("Triggering event for subscribers:",e,t),this.pubsub.triggerAsync(e,t)}},{key:"_onConnectSuccess",value:function(e){this.logger.info("Connect successful!");var t={_debug:e,connectSuccess:!0,connectCalled:!0,metadata:this.sessionMetadata},n=Object.assign({chatDetails:this.getChatDetails()},t);return this.pubsub.triggerAsync(I,n),this._shouldAcknowledgeContact()&&this.sendEvent({contentType:x.connectionAcknowledged}),t}},{key:"_onConnectFailure",value:function(e){var t={_debug:e,connectSuccess:!1,connectCalled:!0,metadata:this.sessionMetadata};return this.logger.error("Connect Failed with data: ",t),Promise.reject(t)}},{key:"_shouldAcknowledgeContact",value:function(){return this.sessionType===E.AGENT}},{key:"breakConnection",value:function(){return this.connectionHelper?this.connectionHelper.end():Promise.resolve()}},{key:"cleanUpOnParticipantDisconnect",value:function(){this.pubsub.unsubscribeAll()}},{key:"disconnectParticipant",value:function(){var e=this,t=this.connectionHelper.getConnectionToken();return this.chatClient.disconnectParticipant(t).then((function(t){return e.logger.info("disconnect participant successful"),e._participantDisconnected=!0,e.cleanUpOnParticipantDisconnect(),e.breakConnection(),t}),(function(t){return e.logger.error("disconnect participant failed with error: ",t),Promise.reject(t)}))}},{key:"getChatDetails",value:function(){return{initialContactId:this.initialContactId,contactId:this.contactId,participantId:this.participantId,participantToken:this.participantToken,connectionDetails:this.connectionDetails}}},{key:"_convertConnectionHelperStatus",value:function(e){switch(e){case Ee.NeverStarted:return kt;case Ee.Starting:return It;case Ee.Ended:case Ee.ConnectionLost:return At;case Ee.Connected:return Tt}this.logger.error("Reached invalid state. Unknown connectionHelperStatus: ",e)}},{key:"getConnectionStatus",value:function(){return this._convertConnectionHelperStatus(this.connectionHelper.getStatus())}}])&&Ct(t.prototype,n),r&&Ct(t,r),e}();function xt(e){return(xt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Pt(e,t){return!t||"object"!==xt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ot(e){return(Ot=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Nt(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Lt(e,t)}function Lt(e,t){return(Lt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Mt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Dt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qt(e,t,n){return t&&Dt(e.prototype,t),n&&Dt(e,n),e}n.d(t,"a",(function(){return zt}));var Ut=function(e){function t(){var e;return Mt(this,t),(e=Pt(this,Ot(t).call(this))).argsValidator=new _e,e}return Nt(t,e),qt(t,[{key:"createChatSession",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,i=this._createChatController(e,t,n,r);if(e===E.AGENT)return new Bt(i);if(e===E.CUSTOMER)return new Ft(i);throw new f("Unkown value for session type, Allowed values are: "+Object.values(E),e)}},{key:"_createChatController",value:function(e,t,n,r){var i={sessionType:e,chatDetails:this._normalizeChatDetails(t),chatClient:fe.getCachedClient(n),websocketManager:r};return new Rt(i)}},{key:"_normalizeChatDetails",value:function(e){var t={};if(e.participantToken||e.ParticipantToken)return t.participantId=e.ParticipantId||e.participantId,t.contactId=e.ContactId||e.contactId,t.initialContactId=e.InitialContactId||e.initialContactId||t.contactId,t.participantToken=e.ParticipantToken||e.participantToken,this.argsValidator.validateChatDetails(t),t;if(e.ChatConnectionAttributes&&e.ChatConnectionAttributes.ParticipantCredentials){this.argsValidator.validateInitiateChatResponse(e);var n={};return n.connectionToken=e.ChatConnectionAttributes.ParticipantCredentials.ConnectionAuthenticationToken,n.ConnectionId=e.ChatConnectionAttributes.ConnectionId,n.PreSignedConnectionUrl=e.ChatConnectionAttributes.PreSignedConnectionUrl,t.connectionDetails=n,t.participantId=e.ParticipantId,t.contactId=e.ContactId,t.initialContactId=e.ContactId,t}return this.argsValidator.validateChatDetails(e),e}}]),t}(function(){function e(){Mt(this,e)}return qt(e,[{key:"createAgentChatController",value:function(e,t){throw new p("createAgentChatController in ChatControllerFactory.")}},{key:"createCustomerChatController",value:function(e,t){throw new p("createCustomerChatController in ChatControllerFactory.")}}]),e}()),jt=function(){function e(t){Mt(this,e),this.controller=t}return qt(e,[{key:"onMessage",value:function(e){this.controller.subscribe(C,e)}},{key:"onTyping",value:function(e){this.controller.subscribe(k,e)}},{key:"onConnectionBroken",value:function(e){this.controller.subscribe(A,e)}},{key:"onConnectionEstablished",value:function(e){this.controller.subscribe(I,e)}},{key:"onEnded",value:function(e){this.controller.subscribe(R,e)}},{key:"sendMessage",value:function(e){return this.controller.sendMessage(e)}},{key:"connect",value:function(e){return this.controller.connect(e)}},{key:"sendEvent",value:function(e){return this.controller.sendEvent(e)}},{key:"getTranscript",value:function(e){return this.controller.getTranscript(e)}},{key:"getChatDetails",value:function(){return this.controller.getChatDetails()}}]),e}(),Bt=function(e){function t(e){return Mt(this,t),Pt(this,Ot(t).call(this,e))}return Nt(t,e),qt(t,[{key:"cleanUpOnParticipantDisconnect",value:function(){return this.controller.cleanUpOnParticipantDisconnect()}}]),t}(jt),Ft=function(e){function t(e){return Mt(this,t),Pt(this,Ot(t).call(this,e))}return Nt(t,e),qt(t,[{key:"disconnectParticipant",value:function(){return this.controller.disconnectParticipant()}}]),t}(jt),Ht=new Ut,zt={create:function(e){var t=e.options||{},n=e.type||E.AGENT;return Ht.createChatSession(n,e.chatDetails,t,e.websocketManager)},setGlobalConfig:function(e){var t=e.loggerConfig;v.update(e),re.updateLoggerConfig(t)},LogLevel:$,Logger:Q,SessionTypes:E}},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){(function(e,r){var i,o,s;function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}s=function(){return function(e){var t,n=e.localStorage||(t={},{setItem:function(e,n){t[e]=n},getItem:function(e){return t[e]},removeItem:function(e){delete t[e]}}),r={CONNECT:1,CONNACK:2,PUBLISH:3,PUBACK:4,PUBREC:5,PUBREL:6,PUBCOMP:7,SUBSCRIBE:8,SUBACK:9,UNSUBSCRIBE:10,UNSUBACK:11,PINGREQ:12,PINGRESP:13,DISCONNECT:14},i=function(e,t){for(var n in e)if(e.hasOwnProperty(n)){if(!t.hasOwnProperty(n)){var r="Unknown property, "+n+". Valid properties are:";for(var i in t)t.hasOwnProperty(i)&&(r=r+" "+i);throw new Error(r)}if(a(e[n])!==t[n])throw new Error(u(s.INVALID_TYPE,[a(e[n]),n]))}},o=function(e,t){return function(){return e.apply(t,arguments)}},s={OK:{code:0,text:"AMQJSC0000I OK."},CONNECT_TIMEOUT:{code:1,text:"AMQJSC0001E Connect timed out."},SUBSCRIBE_TIMEOUT:{code:2,text:"AMQJS0002E Subscribe timed out."},UNSUBSCRIBE_TIMEOUT:{code:3,text:"AMQJS0003E Unsubscribe timed out."},PING_TIMEOUT:{code:4,text:"AMQJS0004E Ping timed out."},INTERNAL_ERROR:{code:5,text:"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}"},CONNACK_RETURNCODE:{code:6,text:"AMQJS0006E Bad Connack return code:{0} {1}."},SOCKET_ERROR:{code:7,text:"AMQJS0007E Socket error:{0}."},SOCKET_CLOSE:{code:8,text:"AMQJS0008I Socket closed."},MALFORMED_UTF:{code:9,text:"AMQJS0009E Malformed UTF data:{0} {1} {2}."},UNSUPPORTED:{code:10,text:"AMQJS0010E {0} is not supported by this browser."},INVALID_STATE:{code:11,text:"AMQJS0011E Invalid state {0}."},INVALID_TYPE:{code:12,text:"AMQJS0012E Invalid type {0} for {1}."},INVALID_ARGUMENT:{code:13,text:"AMQJS0013E Invalid argument {0} for {1}."},UNSUPPORTED_OPERATION:{code:14,text:"AMQJS0014E Unsupported operation."},INVALID_STORED_DATA:{code:15,text:"AMQJS0015E Invalid data in local storage key={0} value={1}."},INVALID_MQTT_MESSAGE_TYPE:{code:16,text:"AMQJS0016E Invalid MQTT message type {0}."},MALFORMED_UNICODE:{code:17,text:"AMQJS0017E Malformed Unicode string:{0} {1}."},BUFFER_FULL:{code:18,text:"AMQJS0018E Message buffer is full, maximum buffer size: {0}."}},c={0:"Connection Accepted",1:"Connection Refused: unacceptable protocol version",2:"Connection Refused: identifier rejected",3:"Connection Refused: server unavailable",4:"Connection Refused: bad user name or password",5:"Connection Refused: not authorized"},u=function(e,t){var n=e.text;if(t)for(var r,i,o=0;o<t.length;o++)if(r="{"+o+"}",(i=n.indexOf(r))>0){var s=n.substring(0,i),a=n.substring(i+r.length);n=s+t[o]+a}return n},l=[0,6,77,81,73,115,100,112,3],h=[0,4,77,81,84,84,4],p=function(e,t){for(var n in this.type=e,t)t.hasOwnProperty(n)&&(this[n]=t[n])};function f(e,t){var n,i=t,o=e[t],s=o>>4,a=o&=15;t+=1;var c=0,u=1;do{if(t==e.length)return[null,i];c+=(127&(n=e[t++]))*u,u*=128}while(0!=(128&n));var l=t+c;if(l>e.length)return[null,i];var h=new p(s);switch(s){case r.CONNACK:1&e[t++]&&(h.sessionPresent=!0),h.returnCode=e[t++];break;case r.PUBLISH:var f=a>>1&3,d=m(e,t),g=b(e,t+=2,d);t+=d,f>0&&(h.messageIdentifier=m(e,t),t+=2);var v=new E(e.subarray(t,l));1==(1&a)&&(v.retained=!0),8==(8&a)&&(v.duplicate=!0),v.qos=f,v.destinationName=g,h.payloadMessage=v;break;case r.PUBACK:case r.PUBREC:case r.PUBREL:case r.PUBCOMP:case r.UNSUBACK:h.messageIdentifier=m(e,t);break;case r.SUBACK:h.messageIdentifier=m(e,t),t+=2,h.returnCode=e.subarray(t,l)}return[h,l]}function d(e,t,n){return t[n++]=e>>8,t[n++]=e%256,n}function g(e,t,n,r){return y(e,n,r=d(t,n,r)),r+t}function m(e,t){return 256*e[t]+e[t+1]}function v(e){for(var t=0,n=0;n<e.length;n++){var r=e.charCodeAt(n);r>2047?(55296<=r&&r<=56319&&(n++,t++),t+=3):r>127?t+=2:t++}return t}function y(e,t,n){for(var r=n,i=0;i<e.length;i++){var o=e.charCodeAt(i);if(55296<=o&&o<=56319){var a=e.charCodeAt(++i);if(isNaN(a))throw new Error(u(s.MALFORMED_UNICODE,[o,a]));o=a-56320+(o-55296<<10)+65536}o<=127?t[r++]=o:o<=2047?(t[r++]=o>>6&31|192,t[r++]=63&o|128):o<=65535?(t[r++]=o>>12&15|224,t[r++]=o>>6&63|128,t[r++]=63&o|128):(t[r++]=o>>18&7|240,t[r++]=o>>12&63|128,t[r++]=o>>6&63|128,t[r++]=63&o|128)}return t}function b(e,t,n){for(var r,i="",o=t;o<t+n;){var a=e[o++];if(a<128)r=a;else{var c=e[o++]-128;if(c<0)throw new Error(u(s.MALFORMED_UTF,[a.toString(16),c.toString(16),""]));if(a<224)r=64*(a-192)+c;else{var l=e[o++]-128;if(l<0)throw new Error(u(s.MALFORMED_UTF,[a.toString(16),c.toString(16),l.toString(16)]));if(a<240)r=4096*(a-224)+64*c+l;else{var h=e[o++]-128;if(h<0)throw new Error(u(s.MALFORMED_UTF,[a.toString(16),c.toString(16),l.toString(16),h.toString(16)]));if(!(a<248))throw new Error(u(s.MALFORMED_UTF,[a.toString(16),c.toString(16),l.toString(16),h.toString(16)]));r=262144*(a-240)+4096*c+64*l+h}}}r>65535&&(r-=65536,i+=String.fromCharCode(55296+(r>>10)),r=56320+(1023&r)),i+=String.fromCharCode(r)}return i}p.prototype.encode=function(){var e,t=(15&this.type)<<4,n=0,i=[],o=0;switch(void 0!==this.messageIdentifier&&(n+=2),this.type){case r.CONNECT:switch(this.mqttVersion){case 3:n+=l.length+3;break;case 4:n+=h.length+3}n+=v(this.clientId)+2,void 0!==this.willMessage&&(n+=v(this.willMessage.destinationName)+2,(e=this.willMessage.payloadBytes)instanceof Uint8Array||(e=new Uint8Array(a)),n+=e.byteLength+2),void 0!==this.userName&&(n+=v(this.userName)+2),void 0!==this.password&&(n+=v(this.password)+2);break;case r.SUBSCRIBE:t|=2;for(var s=0;s<this.topics.length;s++)i[s]=v(this.topics[s]),n+=i[s]+2;n+=this.requestedQos.length;break;case r.UNSUBSCRIBE:for(t|=2,s=0;s<this.topics.length;s++)i[s]=v(this.topics[s]),n+=i[s]+2;break;case r.PUBREL:t|=2;break;case r.PUBLISH:this.payloadMessage.duplicate&&(t|=8),t=t|=this.payloadMessage.qos<<1,this.payloadMessage.retained&&(t|=1),n+=(o=v(this.payloadMessage.destinationName))+2;var a=this.payloadMessage.payloadBytes;n+=a.byteLength,a instanceof ArrayBuffer?a=new Uint8Array(a):a instanceof Uint8Array||(a=new Uint8Array(a.buffer));break;case r.DISCONNECT:}var c=function(e){var t=new Array(1),n=0;do{var r=e%128;(e>>=7)>0&&(r|=128),t[n++]=r}while(e>0&&n<4);return t}(n),u=c.length+1,p=new ArrayBuffer(n+u),f=new Uint8Array(p);if(f[0]=t,f.set(c,1),this.type==r.PUBLISH)u=g(this.payloadMessage.destinationName,o,f,u);else if(this.type==r.CONNECT){switch(this.mqttVersion){case 3:f.set(l,u),u+=l.length;break;case 4:f.set(h,u),u+=h.length}var m=0;this.cleanSession&&(m=2),void 0!==this.willMessage&&(m|=4,m|=this.willMessage.qos<<3,this.willMessage.retained&&(m|=32)),void 0!==this.userName&&(m|=128),void 0!==this.password&&(m|=64),f[u++]=m,u=d(this.keepAliveInterval,f,u)}switch(void 0!==this.messageIdentifier&&(u=d(this.messageIdentifier,f,u)),this.type){case r.CONNECT:u=g(this.clientId,v(this.clientId),f,u),void 0!==this.willMessage&&(u=g(this.willMessage.destinationName,v(this.willMessage.destinationName),f,u),u=d(e.byteLength,f,u),f.set(e,u),u+=e.byteLength),void 0!==this.userName&&(u=g(this.userName,v(this.userName),f,u)),void 0!==this.password&&(u=g(this.password,v(this.password),f,u));break;case r.PUBLISH:f.set(a,u);break;case r.SUBSCRIBE:for(s=0;s<this.topics.length;s++)u=g(this.topics[s],i[s],f,u),f[u++]=this.requestedQos[s];break;case r.UNSUBSCRIBE:for(s=0;s<this.topics.length;s++)u=g(this.topics[s],i[s],f,u)}return p};var w=function(e,t){this._client=e,this._keepAliveInterval=1e3*t,this.isReset=!1;var n=new p(r.PINGREQ).encode(),i=function(e){return function(){return o.apply(e)}},o=function(){this.isReset?(this.isReset=!1,this._client._trace("Pinger.doPing","send PINGREQ"),this._client.socket.send(n),this.timeout=setTimeout(i(this),this._keepAliveInterval)):(this._client._trace("Pinger.doPing","Timed out"),this._client._disconnected(s.PING_TIMEOUT.code,u(s.PING_TIMEOUT)))};this.reset=function(){this.isReset=!0,clearTimeout(this.timeout),this._keepAliveInterval>0&&(this.timeout=setTimeout(i(this),this._keepAliveInterval))},this.cancel=function(){clearTimeout(this.timeout)}},_=function(e,t,n,r){t||(t=30),this.timeout=setTimeout(function(e,t,n){return function(){return e.apply(t,n)}}(n,e,r),1e3*t),this.cancel=function(){clearTimeout(this.timeout)}},S=function(t,r,i,o,a){if(!("WebSocket"in e&&null!==e.WebSocket))throw new Error(u(s.UNSUPPORTED,["WebSocket"]));if(!("ArrayBuffer"in e&&null!==e.ArrayBuffer))throw new Error(u(s.UNSUPPORTED,["ArrayBuffer"]));for(var c in this._trace("Paho.Client",t,r,i,o,a),this.host=r,this.port=i,this.path=o,this.uri=t,this.clientId=a,this._wsuri=null,this._localKey=r+":"+i+("/mqtt"!=o?":"+o:"")+":"+a+":",this._msg_queue=[],this._buffered_msg_queue=[],this._sentMessages={},this._receivedMessages={},this._notify_msg_sent={},this._message_identifier=1,this._sequence=0,n)0!==c.indexOf("Sent:"+this._localKey)&&0!==c.indexOf("Received:"+this._localKey)||this.restore(c)};S.prototype.host=null,S.prototype.port=null,S.prototype.path=null,S.prototype.uri=null,S.prototype.clientId=null,S.prototype.socket=null,S.prototype.connected=!1,S.prototype.maxMessageIdentifier=65536,S.prototype.connectOptions=null,S.prototype.hostIndex=null,S.prototype.onConnected=null,S.prototype.onConnectionLost=null,S.prototype.onMessageDelivered=null,S.prototype.onMessageArrived=null,S.prototype.traceFunction=null,S.prototype._msg_queue=null,S.prototype._buffered_msg_queue=null,S.prototype._connectTimeout=null,S.prototype.sendPinger=null,S.prototype.receivePinger=null,S.prototype._reconnectInterval=1,S.prototype._reconnecting=!1,S.prototype._reconnectTimeout=null,S.prototype.disconnectedPublishing=!1,S.prototype.disconnectedBufferSize=5e3,S.prototype.receiveBuffer=null,S.prototype._traceBuffer=null,S.prototype._MAX_TRACE_ENTRIES=100,S.prototype.connect=function(e){var t=this._traceMask(e,"password");if(this._trace("Client.connect",t,this.socket,this.connected),this.connected)throw new Error(u(s.INVALID_STATE,["already connected"]));if(this.socket)throw new Error(u(s.INVALID_STATE,["already connected"]));this._reconnecting&&(this._reconnectTimeout.cancel(),this._reconnectTimeout=null,this._reconnecting=!1),this.connectOptions=e,this._reconnectInterval=1,this._reconnecting=!1,e.uris?(this.hostIndex=0,this._doConnect(e.uris[0])):this._doConnect(this.uri)},S.prototype.subscribe=function(e,t){if(this._trace("Client.subscribe",e,t),!this.connected)throw new Error(u(s.INVALID_STATE,["not connected"]));var n=new p(r.SUBSCRIBE);n.topics=e.constructor===Array?e:[e],void 0===t.qos&&(t.qos=0),n.requestedQos=[];for(var i=0;i<n.topics.length;i++)n.requestedQos[i]=t.qos;t.onSuccess&&(n.onSuccess=function(e){t.onSuccess({invocationContext:t.invocationContext,grantedQos:e})}),t.onFailure&&(n.onFailure=function(e){t.onFailure({invocationContext:t.invocationContext,errorCode:e,errorMessage:u(e)})}),t.timeout&&(n.timeOut=new _(this,t.timeout,t.onFailure,[{invocationContext:t.invocationContext,errorCode:s.SUBSCRIBE_TIMEOUT.code,errorMessage:u(s.SUBSCRIBE_TIMEOUT)}])),this._requires_ack(n),this._schedule_message(n)},S.prototype.unsubscribe=function(e,t){if(this._trace("Client.unsubscribe",e,t),!this.connected)throw new Error(u(s.INVALID_STATE,["not connected"]));var n=new p(r.UNSUBSCRIBE);n.topics=e.constructor===Array?e:[e],t.onSuccess&&(n.callback=function(){t.onSuccess({invocationContext:t.invocationContext})}),t.timeout&&(n.timeOut=new _(this,t.timeout,t.onFailure,[{invocationContext:t.invocationContext,errorCode:s.UNSUBSCRIBE_TIMEOUT.code,errorMessage:u(s.UNSUBSCRIBE_TIMEOUT)}])),this._requires_ack(n),this._schedule_message(n)},S.prototype.send=function(e){this._trace("Client.send",e);var t=new p(r.PUBLISH);if(t.payloadMessage=e,this.connected)e.qos>0?this._requires_ack(t):this.onMessageDelivered&&(this._notify_msg_sent[t]=this.onMessageDelivered(t.payloadMessage)),this._schedule_message(t);else{if(!this._reconnecting||!this.disconnectedPublishing)throw new Error(u(s.INVALID_STATE,["not connected"]));if(Object.keys(this._sentMessages).length+this._buffered_msg_queue.length>this.disconnectedBufferSize)throw new Error(u(s.BUFFER_FULL,[this.disconnectedBufferSize]));e.qos>0?this._requires_ack(t):(t.sequence=++this._sequence,this._buffered_msg_queue.unshift(t))}},S.prototype.disconnect=function(){if(this._trace("Client.disconnect"),this._reconnecting&&(this._reconnectTimeout.cancel(),this._reconnectTimeout=null,this._reconnecting=!1),!this.socket)throw new Error(u(s.INVALID_STATE,["not connecting or connected"]));var e=new p(r.DISCONNECT);this._notify_msg_sent[e]=o(this._disconnected,this),this._schedule_message(e)},S.prototype.getTraceLog=function(){if(null!==this._traceBuffer){for(var e in this._trace("Client.getTraceLog",new Date),this._trace("Client.getTraceLog in flight messages",this._sentMessages.length),this._sentMessages)this._trace("_sentMessages ",e,this._sentMessages[e]);for(var e in this._receivedMessages)this._trace("_receivedMessages ",e,this._receivedMessages[e]);return this._traceBuffer}},S.prototype.startTrace=function(){null===this._traceBuffer&&(this._traceBuffer=[]),this._trace("Client.startTrace",new Date,"@VERSION@-@BUILDLEVEL@")},S.prototype.stopTrace=function(){delete this._traceBuffer},S.prototype._doConnect=function(e){if(this.connectOptions.useSSL){var t=e.split(":");t[0]="wss",e=t.join(":")}this._wsuri=e,this.connected=!1,this.connectOptions.mqttVersion<4?this.socket=new WebSocket(e,["mqttv3.1"]):this.socket=new WebSocket(e,["mqtt"]),this.socket.binaryType="arraybuffer",this.socket.onopen=o(this._on_socket_open,this),this.socket.onmessage=o(this._on_socket_message,this),this.socket.onerror=o(this._on_socket_error,this),this.socket.onclose=o(this._on_socket_close,this),this.sendPinger=new w(this,this.connectOptions.keepAliveInterval),this.receivePinger=new w(this,this.connectOptions.keepAliveInterval),this._connectTimeout&&(this._connectTimeout.cancel(),this._connectTimeout=null),this._connectTimeout=new _(this,this.connectOptions.timeout,this._disconnected,[s.CONNECT_TIMEOUT.code,u(s.CONNECT_TIMEOUT)])},S.prototype._schedule_message=function(e){this._msg_queue.unshift(e),this.connected&&this._process_queue()},S.prototype.store=function(e,t){var i={type:t.type,messageIdentifier:t.messageIdentifier,version:1};switch(t.type){case r.PUBLISH:t.pubRecReceived&&(i.pubRecReceived=!0),i.payloadMessage={};for(var o="",a=t.payloadMessage.payloadBytes,c=0;c<a.length;c++)a[c]<=15?o=o+"0"+a[c].toString(16):o+=a[c].toString(16);i.payloadMessage.payloadHex=o,i.payloadMessage.qos=t.payloadMessage.qos,i.payloadMessage.destinationName=t.payloadMessage.destinationName,t.payloadMessage.duplicate&&(i.payloadMessage.duplicate=!0),t.payloadMessage.retained&&(i.payloadMessage.retained=!0),0===e.indexOf("Sent:")&&(void 0===t.sequence&&(t.sequence=++this._sequence),i.sequence=t.sequence);break;default:throw Error(u(s.INVALID_STORED_DATA,[e+this._localKey+t.messageIdentifier,i]))}n.setItem(e+this._localKey+t.messageIdentifier,JSON.stringify(i))},S.prototype.restore=function(e){var t=n.getItem(e),i=JSON.parse(t),o=new p(i.type,i);switch(i.type){case r.PUBLISH:for(var a=i.payloadMessage.payloadHex,c=new ArrayBuffer(a.length/2),l=new Uint8Array(c),h=0;a.length>=2;){var f=parseInt(a.substring(0,2),16);a=a.substring(2,a.length),l[h++]=f}var d=new E(l);d.qos=i.payloadMessage.qos,d.destinationName=i.payloadMessage.destinationName,i.payloadMessage.duplicate&&(d.duplicate=!0),i.payloadMessage.retained&&(d.retained=!0),o.payloadMessage=d;break;default:throw Error(u(s.INVALID_STORED_DATA,[e,t]))}0===e.indexOf("Sent:"+this._localKey)?(o.payloadMessage.duplicate=!0,this._sentMessages[o.messageIdentifier]=o):0===e.indexOf("Received:"+this._localKey)&&(this._receivedMessages[o.messageIdentifier]=o)},S.prototype._process_queue=function(){for(var e=null;e=this._msg_queue.pop();)this._socket_send(e),this._notify_msg_sent[e]&&(this._notify_msg_sent[e](),delete this._notify_msg_sent[e])},S.prototype._requires_ack=function(e){var t=Object.keys(this._sentMessages).length;if(t>this.maxMessageIdentifier)throw Error("Too many messages:"+t);for(;void 0!==this._sentMessages[this._message_identifier];)this._message_identifier++;e.messageIdentifier=this._message_identifier,this._sentMessages[e.messageIdentifier]=e,e.type===r.PUBLISH&&this.store("Sent:",e),this._message_identifier===this.maxMessageIdentifier&&(this._message_identifier=1)},S.prototype._on_socket_open=function(){var e=new p(r.CONNECT,this.connectOptions);e.clientId=this.clientId,this._socket_send(e)},S.prototype._on_socket_message=function(e){this._trace("Client._on_socket_message",e.data);for(var t=this._deframeMessages(e.data),n=0;n<t.length;n+=1)this._handleMessage(t[n])},S.prototype._deframeMessages=function(e){var t=new Uint8Array(e),n=[];if(this.receiveBuffer){var r=new Uint8Array(this.receiveBuffer.length+t.length);r.set(this.receiveBuffer),r.set(t,this.receiveBuffer.length),t=r,delete this.receiveBuffer}try{for(var i=0;i<t.length;){var o=f(t,i),a=o[0];if(i=o[1],null===a)break;n.push(a)}i<t.length&&(this.receiveBuffer=t.subarray(i))}catch(e){var c="undefined"==e.hasOwnProperty("stack")?e.stack.toString():"No Error Stack Available";return void this._disconnected(s.INTERNAL_ERROR.code,u(s.INTERNAL_ERROR,[e.message,c]))}return n},S.prototype._handleMessage=function(e){this._trace("Client._handleMessage",e);try{switch(e.type){case r.CONNACK:if(this._connectTimeout.cancel(),this._reconnectTimeout&&this._reconnectTimeout.cancel(),this.connectOptions.cleanSession){for(var t in this._sentMessages){var i=this._sentMessages[t];n.removeItem("Sent:"+this._localKey+i.messageIdentifier)}for(var t in this._sentMessages={},this._receivedMessages){var o=this._receivedMessages[t];n.removeItem("Received:"+this._localKey+o.messageIdentifier)}this._receivedMessages={}}if(0!==e.returnCode){this._disconnected(s.CONNACK_RETURNCODE.code,u(s.CONNACK_RETURNCODE,[e.returnCode,c[e.returnCode]]));break}this.connected=!0,this.connectOptions.uris&&(this.hostIndex=this.connectOptions.uris.length);var a=[];for(var l in this._sentMessages)this._sentMessages.hasOwnProperty(l)&&a.push(this._sentMessages[l]);if(this._buffered_msg_queue.length>0)for(var h=null;h=this._buffered_msg_queue.pop();)a.push(h),this.onMessageDelivered&&(this._notify_msg_sent[h]=this.onMessageDelivered(h.payloadMessage));a=a.sort((function(e,t){return e.sequence-t.sequence}));for(var f=0,d=a.length;f<d;f++)if((i=a[f]).type==r.PUBLISH&&i.pubRecReceived){var g=new p(r.PUBREL,{messageIdentifier:i.messageIdentifier});this._schedule_message(g)}else this._schedule_message(i);this.connectOptions.onSuccess&&this.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});var m=!1;this._reconnecting&&(m=!0,this._reconnectInterval=1,this._reconnecting=!1),this._connected(m,this._wsuri),this._process_queue();break;case r.PUBLISH:this._receivePublish(e);break;case r.PUBACK:(i=this._sentMessages[e.messageIdentifier])&&(delete this._sentMessages[e.messageIdentifier],n.removeItem("Sent:"+this._localKey+e.messageIdentifier),this.onMessageDelivered&&this.onMessageDelivered(i.payloadMessage));break;case r.PUBREC:(i=this._sentMessages[e.messageIdentifier])&&(i.pubRecReceived=!0,g=new p(r.PUBREL,{messageIdentifier:e.messageIdentifier}),this.store("Sent:",i),this._schedule_message(g));break;case r.PUBREL:o=this._receivedMessages[e.messageIdentifier],n.removeItem("Received:"+this._localKey+e.messageIdentifier),o&&(this._receiveMessage(o),delete this._receivedMessages[e.messageIdentifier]);var v=new p(r.PUBCOMP,{messageIdentifier:e.messageIdentifier});this._schedule_message(v);break;case r.PUBCOMP:i=this._sentMessages[e.messageIdentifier],delete this._sentMessages[e.messageIdentifier],n.removeItem("Sent:"+this._localKey+e.messageIdentifier),this.onMessageDelivered&&this.onMessageDelivered(i.payloadMessage);break;case r.SUBACK:(i=this._sentMessages[e.messageIdentifier])&&(i.timeOut&&i.timeOut.cancel(),128===e.returnCode[0]?i.onFailure&&i.onFailure(e.returnCode):i.onSuccess&&i.onSuccess(e.returnCode),delete this._sentMessages[e.messageIdentifier]);break;case r.UNSUBACK:(i=this._sentMessages[e.messageIdentifier])&&(i.timeOut&&i.timeOut.cancel(),i.callback&&i.callback(),delete this._sentMessages[e.messageIdentifier]);break;case r.PINGRESP:this.sendPinger.reset();break;case r.DISCONNECT:this._disconnected(s.INVALID_MQTT_MESSAGE_TYPE.code,u(s.INVALID_MQTT_MESSAGE_TYPE,[e.type]));break;default:this._disconnected(s.INVALID_MQTT_MESSAGE_TYPE.code,u(s.INVALID_MQTT_MESSAGE_TYPE,[e.type]))}}catch(e){var y="undefined"==e.hasOwnProperty("stack")?e.stack.toString():"No Error Stack Available";return void this._disconnected(s.INTERNAL_ERROR.code,u(s.INTERNAL_ERROR,[e.message,y]))}},S.prototype._on_socket_error=function(e){this._reconnecting||this._disconnected(s.SOCKET_ERROR.code,u(s.SOCKET_ERROR,[e.data]))},S.prototype._on_socket_close=function(){this._reconnecting||this._disconnected(s.SOCKET_CLOSE.code,u(s.SOCKET_CLOSE))},S.prototype._socket_send=function(e){if(1==e.type){var t=this._traceMask(e,"password");this._trace("Client._socket_send",t)}else this._trace("Client._socket_send",e);this.socket.send(e.encode()),this.sendPinger.reset()},S.prototype._receivePublish=function(e){switch(e.payloadMessage.qos){case"undefined":case 0:this._receiveMessage(e);break;case 1:var t=new p(r.PUBACK,{messageIdentifier:e.messageIdentifier});this._schedule_message(t),this._receiveMessage(e);break;case 2:this._receivedMessages[e.messageIdentifier]=e,this.store("Received:",e);var n=new p(r.PUBREC,{messageIdentifier:e.messageIdentifier});this._schedule_message(n);break;default:throw Error("Invaild qos="+e.payloadMessage.qos)}},S.prototype._receiveMessage=function(e){this.onMessageArrived&&this.onMessageArrived(e.payloadMessage)},S.prototype._connected=function(e,t){this.onConnected&&this.onConnected(e,t)},S.prototype._reconnect=function(){this._trace("Client._reconnect"),this.connected||(this._reconnecting=!0,this.sendPinger.cancel(),this.receivePinger.cancel(),this._reconnectInterval<128&&(this._reconnectInterval=2*this._reconnectInterval),this.connectOptions.uris?(this.hostIndex=0,this._doConnect(this.connectOptions.uris[0])):this._doConnect(this.uri))},S.prototype._disconnected=function(e,t){if(this._trace("Client._disconnected",e,t),void 0!==e&&this._reconnecting)this._reconnectTimeout=new _(this,this._reconnectInterval,this._reconnect);else if(this.sendPinger.cancel(),this.receivePinger.cancel(),this._connectTimeout&&(this._connectTimeout.cancel(),this._connectTimeout=null),this._msg_queue=[],this._buffered_msg_queue=[],this._notify_msg_sent={},this.socket&&(this.socket.onopen=null,this.socket.onmessage=null,this.socket.onerror=null,this.socket.onclose=null,1===this.socket.readyState&&this.socket.close(),delete this.socket),this.connectOptions.uris&&this.hostIndex<this.connectOptions.uris.length-1)this.hostIndex++,this._doConnect(this.connectOptions.uris[this.hostIndex]);else if(void 0===e&&(e=s.OK.code,t=u(s.OK)),this.connected){if(this.connected=!1,this.onConnectionLost&&this.onConnectionLost({errorCode:e,errorMessage:t,reconnect:this.connectOptions.reconnect,uri:this._wsuri}),e!==s.OK.code&&this.connectOptions.reconnect)return this._reconnectInterval=1,void this._reconnect()}else 4===this.connectOptions.mqttVersion&&!1===this.connectOptions.mqttVersionExplicit?(this._trace("Failed to connect V4, dropping back to V3"),this.connectOptions.mqttVersion=3,this.connectOptions.uris?(this.hostIndex=0,this._doConnect(this.connectOptions.uris[0])):this._doConnect(this.uri)):this.connectOptions.onFailure&&this.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext,errorCode:e,errorMessage:t})},S.prototype._trace=function(){if(this.traceFunction){var e=Array.prototype.slice.call(arguments);for(var t in e)void 0!==e[t]&&e.splice(t,1,JSON.stringify(e[t]));var n=e.join("");this.traceFunction({severity:"Debug",message:n})}if(null!==this._traceBuffer){t=0;for(var r=arguments.length;t<r;t++)this._traceBuffer.length==this._MAX_TRACE_ENTRIES&&this._traceBuffer.shift(),0===t?this._traceBuffer.push(arguments[t]):void 0===arguments[t]?this._traceBuffer.push(arguments[t]):this._traceBuffer.push("  "+JSON.stringify(arguments[t]))}},S.prototype._traceMask=function(e,t){var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=r==t?"******":e[r]);return n};var E=function(e){var t,n;if(!("string"==typeof e||e instanceof ArrayBuffer||ArrayBuffer.isView(e)&&!(e instanceof DataView)))throw u(s.INVALID_ARGUMENT,[e,"newPayload"]);t=e;var r=0,i=!1,o=!1;Object.defineProperties(this,{payloadString:{enumerable:!0,get:function(){return"string"==typeof t?t:b(t,0,t.length)}},payloadBytes:{enumerable:!0,get:function(){if("string"==typeof t){var e=new ArrayBuffer(v(t)),n=new Uint8Array(e);return y(t,n,0),n}return t}},destinationName:{enumerable:!0,get:function(){return n},set:function(e){if("string"!=typeof e)throw new Error(u(s.INVALID_ARGUMENT,[e,"newDestinationName"]));n=e}},qos:{enumerable:!0,get:function(){return r},set:function(e){if(0!==e&&1!==e&&2!==e)throw new Error("Invalid argument:"+e);r=e}},retained:{enumerable:!0,get:function(){return i},set:function(e){if("boolean"!=typeof e)throw new Error(u(s.INVALID_ARGUMENT,[e,"newRetained"]));i=e}},topic:{enumerable:!0,get:function(){return n},set:function(e){n=e}},duplicate:{enumerable:!0,get:function(){return o},set:function(e){o=e}}})};return{Client:function(e,t,n,r){var o;if("string"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"host"]));if(2==arguments.length){r=t;var c=(o=e).match(/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/);if(!c)throw new Error(u(s.INVALID_ARGUMENT,[e,"host"]));e=c[4]||c[2],t=parseInt(c[7]),n=c[8]}else{if(3==arguments.length&&(r=n,n="/mqtt"),"number"!=typeof t||t<0)throw new Error(u(s.INVALID_TYPE,[a(t),"port"]));if("string"!=typeof n)throw new Error(u(s.INVALID_TYPE,[a(n),"path"]));var l=-1!==e.indexOf(":")&&"["!==e.slice(0,1)&&"]"!==e.slice(-1);o="ws://"+(l?"["+e+"]":e)+":"+t+n}for(var h=0,p=0;p<r.length;p++){var f=r.charCodeAt(p);55296<=f&&f<=56319&&p++,h++}if("string"!=typeof r||h>65535)throw new Error(u(s.INVALID_ARGUMENT,[r,"clientId"]));var d=new S(o,e,t,n,r);Object.defineProperties(this,{host:{get:function(){return e},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},port:{get:function(){return t},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},path:{get:function(){return n},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},uri:{get:function(){return o},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},clientId:{get:function(){return d.clientId},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},onConnected:{get:function(){return d.onConnected},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"onConnected"]));d.onConnected=e}},disconnectedPublishing:{get:function(){return d.disconnectedPublishing},set:function(e){d.disconnectedPublishing=e}},disconnectedBufferSize:{get:function(){return d.disconnectedBufferSize},set:function(e){d.disconnectedBufferSize=e}},onConnectionLost:{get:function(){return d.onConnectionLost},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"onConnectionLost"]));d.onConnectionLost=e}},onMessageDelivered:{get:function(){return d.onMessageDelivered},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"onMessageDelivered"]));d.onMessageDelivered=e}},onMessageArrived:{get:function(){return d.onMessageArrived},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"onMessageArrived"]));d.onMessageArrived=e}},trace:{get:function(){return d.traceFunction},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"onTrace"]));d.traceFunction=e}}}),this.connect=function(e){if(i(e=e||{},{timeout:"number",userName:"string",password:"string",willMessage:"object",keepAliveInterval:"number",cleanSession:"boolean",useSSL:"boolean",invocationContext:"object",onSuccess:"function",onFailure:"function",hosts:"object",ports:"object",reconnect:"boolean",mqttVersion:"number",mqttVersionExplicit:"boolean",uris:"object"}),void 0===e.keepAliveInterval&&(e.keepAliveInterval=60),e.mqttVersion>4||e.mqttVersion<3)throw new Error(u(s.INVALID_ARGUMENT,[e.mqttVersion,"connectOptions.mqttVersion"]));if(void 0===e.mqttVersion?(e.mqttVersionExplicit=!1,e.mqttVersion=4):e.mqttVersionExplicit=!0,void 0!==e.password&&void 0===e.userName)throw new Error(u(s.INVALID_ARGUMENT,[e.password,"connectOptions.password"]));if(e.willMessage){if(!(e.willMessage instanceof E))throw new Error(u(s.INVALID_TYPE,[e.willMessage,"connectOptions.willMessage"]));if(e.willMessage.stringPayload=null,void 0===e.willMessage.destinationName)throw new Error(u(s.INVALID_TYPE,[a(e.willMessage.destinationName),"connectOptions.willMessage.destinationName"]))}if(void 0===e.cleanSession&&(e.cleanSession=!0),e.hosts){if(!(e.hosts instanceof Array))throw new Error(u(s.INVALID_ARGUMENT,[e.hosts,"connectOptions.hosts"]));if(e.hosts.length<1)throw new Error(u(s.INVALID_ARGUMENT,[e.hosts,"connectOptions.hosts"]));for(var t=!1,r=0;r<e.hosts.length;r++){if("string"!=typeof e.hosts[r])throw new Error(u(s.INVALID_TYPE,[a(e.hosts[r]),"connectOptions.hosts["+r+"]"]));if(/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/.test(e.hosts[r])){if(0===r)t=!0;else if(!t)throw new Error(u(s.INVALID_ARGUMENT,[e.hosts[r],"connectOptions.hosts["+r+"]"]))}else if(t)throw new Error(u(s.INVALID_ARGUMENT,[e.hosts[r],"connectOptions.hosts["+r+"]"]))}if(t)e.uris=e.hosts;else{if(!e.ports)throw new Error(u(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));if(!(e.ports instanceof Array))throw new Error(u(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));if(e.hosts.length!==e.ports.length)throw new Error(u(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));for(e.uris=[],r=0;r<e.hosts.length;r++){if("number"!=typeof e.ports[r]||e.ports[r]<0)throw new Error(u(s.INVALID_TYPE,[a(e.ports[r]),"connectOptions.ports["+r+"]"]));var c=e.hosts[r],l=e.ports[r],h=-1!==c.indexOf(":");o="ws://"+(h?"["+c+"]":c)+":"+l+n,e.uris.push(o)}}}d.connect(e)},this.subscribe=function(e,t){if("string"!=typeof e&&e.constructor!==Array)throw new Error("Invalid argument:"+e);if(i(t=t||{},{qos:"number",invocationContext:"object",onSuccess:"function",onFailure:"function",timeout:"number"}),t.timeout&&!t.onFailure)throw new Error("subscribeOptions.timeout specified with no onFailure callback.");if(void 0!==t.qos&&0!==t.qos&&1!==t.qos&&2!==t.qos)throw new Error(u(s.INVALID_ARGUMENT,[t.qos,"subscribeOptions.qos"]));d.subscribe(e,t)},this.unsubscribe=function(e,t){if("string"!=typeof e&&e.constructor!==Array)throw new Error("Invalid argument:"+e);if(i(t=t||{},{invocationContext:"object",onSuccess:"function",onFailure:"function",timeout:"number"}),t.timeout&&!t.onFailure)throw new Error("unsubscribeOptions.timeout specified with no onFailure callback.");d.unsubscribe(e,t)},this.send=function(e,t,n,r){var i;if(0===arguments.length)throw new Error("Invalid argument.length");if(1==arguments.length){if(!(e instanceof E)&&"string"!=typeof e)throw new Error("Invalid argument:"+a(e));if(void 0===(i=e).destinationName)throw new Error(u(s.INVALID_ARGUMENT,[i.destinationName,"Message.destinationName"]));d.send(i)}else(i=new E(t)).destinationName=e,arguments.length>=3&&(i.qos=n),arguments.length>=4&&(i.retained=r),d.send(i)},this.publish=function(e,t,n,r){var i;if(0===arguments.length)throw new Error("Invalid argument.length");if(1==arguments.length){if(!(e instanceof E)&&"string"!=typeof e)throw new Error("Invalid argument:"+a(e));if(void 0===(i=e).destinationName)throw new Error(u(s.INVALID_ARGUMENT,[i.destinationName,"Message.destinationName"]));d.send(i)}else(i=new E(t)).destinationName=e,arguments.length>=3&&(i.qos=n),arguments.length>=4&&(i.retained=r),d.send(i)},this.disconnect=function(){d.disconnect()},this.getTraceLog=function(){return d.getTraceLog()},this.startTrace=function(){d.startTrace()},this.stopTrace=function(){d.stopTrace()},this.isConnected=function(){return d.connected}},Message:E}}(void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},"object"===a(t)&&"object"===a(r)?r.exports=s():void 0===(o="function"==typeof(i=s)?i.call(t,n,t,r):i)||(r.exports=o)}).call(this,n(0),n(8)(e))},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"ChatSession",(function(){return i}));n(6);var r=n(2);e.connect=e.connect||{},connect.ChatSession=r.a;var i=r.a}.call(this,n(0))},function(e,t){!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";var r=n(1);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o={assertTrue:function(e,t){if(!e)throw new Error(t)},assertNotNull:function(e,t){return o.assertTrue(null!==e&&void 0!==i(e),Object(r.sprintf)("%s must be provided",t||"A value")),e},isString:function(e){return"string"==typeof e},assertIsNonEmptyString:function(e,t){if(!e||"string"!=typeof e)throw new Error(t+" is not a non-empty string!")},assertIsList:function(e,t){if(!Array.isArray(e))throw new Error(t+" is not an array")},assertIsEnum:function(e,t,n){var r;for(r=0;r<t.length;r++)if(t[r]===e)return;throw new Error(n+" passed is not valid. Allowed values are: "+t)},makeEnum:function(e){var t={};return e.forEach((function(e){var n=e.replace(/\.?([a-z]+)_?/g,(function(e,t){return t.toUpperCase()+"_"})).replace(/_$/,"");t[n]=e})),t},isFunction:function(e){return!!(e&&e.constructor&&e.call&&e.apply)},isObject:function(e){return!("object"!==i(e)||null===e)}};o.isString=function(e){return"string"==typeof e},o.isNumber=function(e){return"number"==typeof e};var s=new RegExp("^(wss://)\\w*");o.validWSUrl=function(e){return s.test(e)},o.assertIsObject=function(e,t){if(!o.isObject(e))throw new Error(t+" is not an object!")};var a=o,c="DEBUG",u="aws/subscribe",l="aws/heartbeat";function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t,n){return t&&g(e.prototype,t),n&&g(e,n),e}var v=function(){function e(){d(this,e)}return m(e,[{key:"debug",value:function(e){}},{key:"info",value:function(e){}},{key:"warn",value:function(e){}},{key:"error",value:function(e){}}]),e}(),y={DEBUG:10,INFO:20,WARN:30,ERROR:40},b=function(){function e(){d(this,e),this.updateLoggerConfig(),this.consoleLoggerWrapper=S()}return m(e,[{key:"writeToClientLogger",value:function(e,t){if(this.hasClientLogger())switch(e){case y.DEBUG:return this._clientLogger.debug(t);case y.INFO:return this._clientLogger.info(t);case y.WARN:return this._clientLogger.warn(t);case y.ERROR:return this._clientLogger.error(t)}}},{key:"isLevelEnabled",value:function(e){return e>=this._level}},{key:"hasClientLogger",value:function(){return null!==this._clientLogger}},{key:"getLogger",value:function(e){var t=e.prefix||"";return this._logsDestination===c?this.consoleLoggerWrapper:new _(t)}},{key:"updateLoggerConfig",value:function(e){var t=e||{};this._level=t.level||y.INFO,this._clientLogger=t.logger||null,this._logsDestination="NULL",t.debug&&(this._logsDestination=c),t.logger&&(this._logsDestination="CLIENT_LOGGER")}}]),e}(),w=function(){function e(){d(this,e)}return m(e,[{key:"debug",value:function(){}},{key:"info",value:function(){}},{key:"warn",value:function(){}},{key:"error",value:function(){}}]),e}(),_=function(e){function t(e){var n;return d(this,t),(n=function(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}(this,p(t).call(this))).prefix=e||"",n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,w),m(t,[{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(y.DEBUG,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(y.INFO,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(y.WARN,t)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(y.ERROR,t)}},{key:"_shouldLog",value:function(e){return E.hasClientLogger()&&E.isLevelEnabled(e)}},{key:"_writeToClientLogger",value:function(e,t){E.writeToClientLogger(e,t)}},{key:"_log",value:function(e,t){if(this._shouldLog(e)){var n=this._convertToSingleStatement(t);this._writeToClientLogger(e,n)}}},{key:"_convertToSingleStatement",value:function(e){var t="";this.prefix&&(t+=this.prefix+" ");for(var n=0;n<e.length;n++){var r=e[n];t+=this._convertToString(r)+" "}return t}},{key:"_convertToString",value:function(e){try{if(!e)return"";if(a.isString(e))return e;if(a.isObject(e)&&a.isFunction(e.toString)){var t=e.toString();if("[object Object]"!==t)return t}return JSON.stringify(e)}catch(t){return console.error("Error while converting argument to string",e,t),""}}}]),t}(),S=function(){var e=new w;return e.debug=console.debug,e.info=console.info,e.warn=console.warn,e.error=console.error,e},E=new b;n.d(t,"a",(function(){return k}));var C=function(){var e=E.getLogger({}),t=null,n={reconnectWebSocket:!1,websocketInitFailed:!1,linearConnectAttempt:0,exponentialConnectAttempt:0,exponentialBackOffTime:1,exponentialTimeoutHandle:null,lifeTimeTimeoutHandle:null},r={pendingResponse:!1,intervalHandle:null},i={initFailure:new Set,getWebSocketTransport:null,subscriptionUpdate:new Set,subscriptionFailure:new Set,topic:new Map,allMessage:new Set,connectionGain:new Set,connectionLost:new Set},o={connConfig:null,promiseHandle:null,promiseCompleted:!1},s={subscribed:new Set,pending:new Set},c=new Set([u,"aws/unsubscribe",l]),h=navigator.onLine,p=setInterval((function(){h!==navigator.onLine&&(h=navigator.onLine)&&(!t||t.readyState>1)&&(e.info("Network online, Connecting to websocket"),I())}),250),f=function(e,t){e.forEach((function(e){e(t)}))},d=function(){if(r.pendingResponse)return e.warn("Heartbeat response not received"),clearInterval(r.intervalHandle),r.pendingResponse=!1,void _();e.debug("Sending heartbeat"),t.send(C(l)),r.pendingResponse=!0},g=function(){n.linearConnectAttempt=0,n.exponentialConnectAttempt=0,n.exponentialBackOffTime=1,r.pendingResponse=!1,n.reconnectWebSocket=!1,clearTimeout(n.lifeTimeTimeoutHandle),clearInterval(r.intervalHandle),clearTimeout(n.exponentialTimeoutHandle)},m=function(){try{if(e.info("WebSocket connection established!"),f(i.connectionGain),g(),s.subscribed.size>0||s.pending.size>0){var a=Array.from(s.subscribed.values());a=a.concat(Array.from(s.pending.values())),s.subscribed.clear(),t.send(C(u,{topics:a}))}d(),r.intervalHandle=setInterval(d,1e4),n.lifeTimeTimeoutHandle=setTimeout((function(){e.debug("Starting scheduled WebSocket manager reconnect"),_()}),1e3*o.connConfig.webSocketTransport.transportLifeTimeInSeconds)}catch(t){e.error("Error after establishing web socket connection, error: ",t)}},v=function(t){n.linearConnectAttempt<=1&&f(i.connectionLost),e.info("Socket connection is closed. event: ",t),n.reconnectWebSocket&&T()},y=function(t){e.error("WebSocketManager Error, error_event: ",t),_()},b=function(t){e.debug("Message received from webSocket server",t.data);var n=JSON.parse(t.data);switch(n.topic){case u:"success"===n.content.status?(n.content.topics.forEach((function(e){s.subscribed.add(e),s.pending.delete(e)})),f(i.subscriptionUpdate,n)):f(i.subscriptionFailure,n);break;case l:e.debug("Heartbeat response received"),r.pendingResponse=!1;break;default:if(n.topic){if(0===i.allMessage.size&&0===i.topic.size)return void e.warn("No registered callback listener for Topic: ",n);f(i.allMessage,n),i.topic.has(n.topic)&&f(i.topic.get(n.topic),n)}else n.message?e.warn("WebSocketManager Message Error, error: ",n):e.warn("Invalid incoming message, error: ",n)}},w=function(e){return!(!t||t.readyState===WebSocket.CLOSED||(t.close(1e3,e),0))},_=function(){h?(clearTimeout(n.lifeTimeTimeoutHandle),clearInterval(r.intervalHandle),n.linearConnectAttempt<3?(n.linearConnectAttempt++,e.debug("Starting Consecutive WebSocket reconnect, Attempt : "+n.linearConnectAttempt),n.reconnectWebSocket=!0,I()):n.exponentialConnectAttempt<5?(n.exponentialConnectAttempt++,n.exponentialBackOffTime*=2,e.debug("Starting Exponential WebSocket reconnect, Attempt : "+n.exponentialConnectAttempt+" with delay "+n.exponentialBackOffTime+" sec."),o.promiseCompleted=!1,o.connConfig=null,n.exponentialTimeoutHandle=setTimeout((function(){n.reconnectWebSocket=!0,I()}),1e3*n.exponentialBackOffTime)):o.promiseCompleted&&(e.error("Could not connect to WebSocket after several attempts"),S())):w("Network Offline, Closing WebSocket Manager")},S=function(){g(),w("Terminating WebSocket Manager"),e.error("WebSocket Initialization failed"),n.websocketInitFailed=!0,clearInterval(p),f(i.initFailure)},C=function(e,t){return JSON.stringify({topic:e,content:t})},k=function(t){return!!(a.isObject(t)&&a.isObject(t.webSocketTransport)&&a.isString(t.webSocketTransport.url)&&a.validWSUrl(t.webSocketTransport.url)&&a.isNumber(t.webSocketTransport.transportLifeTimeInSeconds)&&t.webSocketTransport.transportLifeTimeInSeconds>=3600)||(e.error("Invalid WebSocket Connection Configuration",t),!1)},I=function(){n.websocketInitFailed||(o.connConfig=null,o.promiseCompleted=!1,o.promiseHandle=i.getWebSocketTransport(),o.promiseHandle.then((function(t){o.promiseCompleted=!0,e.debug("Successfully fetched webSocket connection configuration"),k(t)?(o.connConfig=t,h&&(w("Restarting WebSocket Manager")||T())):S()}),(function(t){o.promiseCompleted=!0,e.error("Failed to fetch webSocket connection configuration",t),_()})))},T=function(){if(!n.websocketInitFailed){e.debug("Initializing Websocket Manager");try{k(o.connConfig)?((t=new WebSocket(o.connConfig.webSocketTransport.url)).addEventListener("open",m),t.addEventListener("message",b),t.addEventListener("error",y),t.addEventListener("close",v)):o.promiseCompleted&&S()}catch(t){e.error("Error Initializing web-socket-manager",t),S()}}};this.init=function(t){a.assertTrue(a.isFunction(t),"transportHandle must be a function"),null===i.getWebSocketTransport?(i.getWebSocketTransport=t,I()):e.warn("Web Socket Manager was already initialized")},this.onInitFailure=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.initFailure.add(e),n.websocketInitFailed&&e(),function(){return i.initFailure.delete(e)}},this.onConnectionGain=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.connectionGain.add(e),t&&t.readyState===WebSocket.OPEN&&e(),function(){return i.connectionGain.delete(e)}},this.onConnectionLost=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.connectionLost.add(e),t&&t.readyState===WebSocket.CLOSED&&e(),function(){return i.connectionLost.delete(e)}},this.onSubscriptionUpdate=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.subscriptionUpdate.add(e),function(){return i.subscriptionUpdate.delete(e)}},this.onSubscriptionFailure=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.subscriptionFailure.add(e),function(){return i.subscriptionFailure.delete(e)}},this.onMessage=function(e,t){return a.assertNotNull(e,"topicName"),a.assertTrue(a.isFunction(t),"cb must be a function"),i.topic.has(e)?i.topic.get(e).add(t):i.topic.set(e,new Set([t])),function(){return i.topic.get(e).delete(t)}},this.onAllMessage=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.allMessage.add(e),function(){return i.allMessage.delete(e)}},this.subscribeTopics=function(e){a.assertNotNull(e,"topics"),a.assertIsList(e),e.forEach((function(e){s.pending.add(e)})),t&&t.readyState===WebSocket.OPEN&&t.send(C(u,{topics:e}))},this.sendMessage=function(n){if(a.assertIsObject(n,"payload"),void 0===n.topic||c.has(n.topic))e.warn("Cannot send message, Invalid topic",n);else{try{n=JSON.stringify(n)}catch(t){return void e.warn("Error stringify message",n)}t&&t.readyState===WebSocket.OPEN?(e.debug("WebSocketManager sending message",n),t.send(n)):e.warn("Cannot send message, web socket connection is not open")}},this.closeWebSocket=function(){g(),clearInterval(p),w("User request to close WebSocket")}},k={create:function(){return new C},setGlobalConfig:function(e){var t=e.loggerConfig;E.updateLoggerConfig(t)},LogLevel:y,Logger:v}},function(e,t,n){var r;!function(){"use strict";var i={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function o(e){return function(e,t){var n,r,s,a,c,u,l,h,p,f=1,d=e.length,g="";for(r=0;r<d;r++)if("string"==typeof e[r])g+=e[r];else if("object"==typeof e[r]){if((a=e[r]).keys)for(n=t[f],s=0;s<a.keys.length;s++){if(null==n)throw new Error(o('[sprintf] Cannot access property "%s" of undefined value "%s"',a.keys[s],a.keys[s-1]));n=n[a.keys[s]]}else n=a.param_no?t[a.param_no]:t[f++];if(i.not_type.test(a.type)&&i.not_primitive.test(a.type)&&n instanceof Function&&(n=n()),i.numeric_arg.test(a.type)&&"number"!=typeof n&&isNaN(n))throw new TypeError(o("[sprintf] expecting number but found %T",n));switch(i.number.test(a.type)&&(h=n>=0),a.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,a.width?parseInt(a.width):0);break;case"e":n=a.precision?parseFloat(n).toExponential(a.precision):parseFloat(n).toExponential();break;case"f":n=a.precision?parseFloat(n).toFixed(a.precision):parseFloat(n);break;case"g":n=a.precision?String(Number(n.toPrecision(a.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=a.precision?n.substring(0,a.precision):n;break;case"t":n=String(!!n),n=a.precision?n.substring(0,a.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=a.precision?n.substring(0,a.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=a.precision?n.substring(0,a.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}i.json.test(a.type)?g+=n:(!i.number.test(a.type)||h&&!a.sign?p="":(p=h?"+":"-",n=n.toString().replace(i.sign,"")),u=a.pad_char?"0"===a.pad_char?"0":a.pad_char.charAt(1):" ",l=a.width-(p+n).length,c=a.width&&l>0?u.repeat(l):"",g+=a.align?p+n+c:"0"===u?p+c+n:c+p+n)}return g}(function(e){if(a[e])return a[e];for(var t,n=e,r=[],o=0;n;){if(null!==(t=i.text.exec(n)))r.push(t[0]);else if(null!==(t=i.modulo.exec(n)))r.push("%");else{if(null===(t=i.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){o|=1;var s=[],c=t[2],u=[];if(null===(u=i.key.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(s.push(u[1]);""!==(c=c.substring(u[0].length));)if(null!==(u=i.key_access.exec(c)))s.push(u[1]);else{if(null===(u=i.index_access.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");s.push(u[1])}t[2]=s}else o|=2;if(3===o)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");r.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return a[e]=r}(e),arguments)}function s(e,t){return o.apply(null,[e].concat(t||[]))}var a=Object.create(null);t.sprintf=o,t.vsprintf=s,"undefined"!=typeof window&&(window.sprintf=o,window.vsprintf=s,void 0===(r=function(){return{sprintf:o,vsprintf:s}}.call(t,n,t,e))||(e.exports=r))}()},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"WebSocketManager",(function(){return i}));var r=n(0);e.connect=e.connect||{},connect.WebSocketManager=r.a;var i=r.a}.call(this,n(3))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n}])},function(e,t,n){(function(e){var t,r;function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function e(n,r,i){function o(a,c){if(!r[a]){if(!n[a]){if(!c&&"function"==typeof t&&t)return t(a,!0);if(s)return s(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var l=r[a]={exports:{}};n[a][0].call(l.exports,(function(e){return o(n[a][1][e]||e)}),l,l.exports,e,n,r,i)}return r[a].exports}for(var s="function"==typeof t&&t,a=0;a<i.length;a++)o(i[a]);return o}({1:[function(e,t,n){t.exports={version:"2.0",metadata:{apiVersion:"2014-06-30",endpointPrefix:"cognito-identity",jsonVersion:"1.1",protocol:"json",serviceFullName:"Amazon Cognito Identity",serviceId:"Cognito Identity",signatureVersion:"v4",targetPrefix:"AWSCognitoIdentityService",uid:"cognito-identity-2014-06-30"},operations:{CreateIdentityPool:{input:{type:"structure",required:["IdentityPoolName","AllowUnauthenticatedIdentities"],members:{IdentityPoolName:{},AllowUnauthenticatedIdentities:{type:"boolean"},SupportedLoginProviders:{shape:"S4"},DeveloperProviderName:{},OpenIdConnectProviderARNs:{shape:"S8"},CognitoIdentityProviders:{shape:"Sa"},SamlProviderARNs:{shape:"Sf"},IdentityPoolTags:{shape:"Sg"}}},output:{shape:"Sj"}},DeleteIdentities:{input:{type:"structure",required:["IdentityIdsToDelete"],members:{IdentityIdsToDelete:{type:"list",member:{}}}},output:{type:"structure",members:{UnprocessedIdentityIds:{type:"list",member:{type:"structure",members:{IdentityId:{},ErrorCode:{}}}}}}},DeleteIdentityPool:{input:{type:"structure",required:["IdentityPoolId"],members:{IdentityPoolId:{}}}},DescribeIdentity:{input:{type:"structure",required:["IdentityId"],members:{IdentityId:{}}},output:{shape:"Su"}},DescribeIdentityPool:{input:{type:"structure",required:["IdentityPoolId"],members:{IdentityPoolId:{}}},output:{shape:"Sj"}},GetCredentialsForIdentity:{input:{type:"structure",required:["IdentityId"],members:{IdentityId:{},Logins:{shape:"Sz"},CustomRoleArn:{}}},output:{type:"structure",members:{IdentityId:{},Credentials:{type:"structure",members:{AccessKeyId:{},SecretKey:{},SessionToken:{},Expiration:{type:"timestamp"}}}}}},GetId:{input:{type:"structure",required:["IdentityPoolId"],members:{AccountId:{},IdentityPoolId:{},Logins:{shape:"Sz"}}},output:{type:"structure",members:{IdentityId:{}}}},GetIdentityPoolRoles:{input:{type:"structure",required:["IdentityPoolId"],members:{IdentityPoolId:{}}},output:{type:"structure",members:{IdentityPoolId:{},Roles:{shape:"S1b"},RoleMappings:{shape:"S1d"}}}},GetOpenIdToken:{input:{type:"structure",required:["IdentityId"],members:{IdentityId:{},Logins:{shape:"Sz"}}},output:{type:"structure",members:{IdentityId:{},Token:{}}}},GetOpenIdTokenForDeveloperIdentity:{input:{type:"structure",required:["IdentityPoolId","Logins"],members:{IdentityPoolId:{},IdentityId:{},Logins:{shape:"Sz"},TokenDuration:{type:"long"}}},output:{type:"structure",members:{IdentityId:{},Token:{}}}},ListIdentities:{input:{type:"structure",required:["IdentityPoolId","MaxResults"],members:{IdentityPoolId:{},MaxResults:{type:"integer"},NextToken:{},HideDisabled:{type:"boolean"}}},output:{type:"structure",members:{IdentityPoolId:{},Identities:{type:"list",member:{shape:"Su"}},NextToken:{}}}},ListIdentityPools:{input:{type:"structure",required:["MaxResults"],members:{MaxResults:{type:"integer"},NextToken:{}}},output:{type:"structure",members:{IdentityPools:{type:"list",member:{type:"structure",members:{IdentityPoolId:{},IdentityPoolName:{}}}},NextToken:{}}}},ListTagsForResource:{input:{type:"structure",required:["ResourceArn"],members:{ResourceArn:{}}},output:{type:"structure",members:{Tags:{shape:"Sg"}}}},LookupDeveloperIdentity:{input:{type:"structure",required:["IdentityPoolId"],members:{IdentityPoolId:{},IdentityId:{},DeveloperUserIdentifier:{},MaxResults:{type:"integer"},NextToken:{}}},output:{type:"structure",members:{IdentityId:{},DeveloperUserIdentifierList:{type:"list",member:{}},NextToken:{}}}},MergeDeveloperIdentities:{input:{type:"structure",required:["SourceUserIdentifier","DestinationUserIdentifier","DeveloperProviderName","IdentityPoolId"],members:{SourceUserIdentifier:{},DestinationUserIdentifier:{},DeveloperProviderName:{},IdentityPoolId:{}}},output:{type:"structure",members:{IdentityId:{}}}},SetIdentityPoolRoles:{input:{type:"structure",required:["IdentityPoolId","Roles"],members:{IdentityPoolId:{},Roles:{shape:"S1b"},RoleMappings:{shape:"S1d"}}}},TagResource:{input:{type:"structure",required:["ResourceArn"],members:{ResourceArn:{},Tags:{shape:"Sg"}}},output:{type:"structure",members:{}}},UnlinkDeveloperIdentity:{input:{type:"structure",required:["IdentityId","IdentityPoolId","DeveloperProviderName","DeveloperUserIdentifier"],members:{IdentityId:{},IdentityPoolId:{},DeveloperProviderName:{},DeveloperUserIdentifier:{}}}},UnlinkIdentity:{input:{type:"structure",required:["IdentityId","Logins","LoginsToRemove"],members:{IdentityId:{},Logins:{shape:"Sz"},LoginsToRemove:{shape:"Sv"}}}},UntagResource:{input:{type:"structure",required:["ResourceArn"],members:{ResourceArn:{},TagKeys:{type:"list",member:{}}}},output:{type:"structure",members:{}}},UpdateIdentityPool:{input:{shape:"Sj"},output:{shape:"Sj"}}},shapes:{S4:{type:"map",key:{},value:{}},S8:{type:"list",member:{}},Sa:{type:"list",member:{type:"structure",members:{ProviderName:{},ClientId:{},ServerSideTokenCheck:{type:"boolean"}}}},Sf:{type:"list",member:{}},Sg:{type:"map",key:{},value:{}},Sj:{type:"structure",required:["IdentityPoolId","IdentityPoolName","AllowUnauthenticatedIdentities"],members:{IdentityPoolId:{},IdentityPoolName:{},AllowUnauthenticatedIdentities:{type:"boolean"},SupportedLoginProviders:{shape:"S4"},DeveloperProviderName:{},OpenIdConnectProviderARNs:{shape:"S8"},CognitoIdentityProviders:{shape:"Sa"},SamlProviderARNs:{shape:"Sf"},IdentityPoolTags:{shape:"Sg"}}},Su:{type:"structure",members:{IdentityId:{},Logins:{shape:"Sv"},CreationDate:{type:"timestamp"},LastModifiedDate:{type:"timestamp"}}},Sv:{type:"list",member:{}},Sz:{type:"map",key:{},value:{}},S1b:{type:"map",key:{},value:{}},S1d:{type:"map",key:{},value:{type:"structure",required:["Type"],members:{Type:{},AmbiguousRoleResolution:{},RulesConfiguration:{type:"structure",required:["Rules"],members:{Rules:{type:"list",member:{type:"structure",required:["Claim","MatchType","Value","RoleARN"],members:{Claim:{},MatchType:{},Value:{},RoleARN:{}}}}}}}}}}}},{}],2:[function(e,t,n){t.exports={pagination:{}}},{}],3:[function(e,t,n){t.exports={version:"2.0",metadata:{apiVersion:"2018-09-07",endpointPrefix:"participant.connect",jsonVersion:"1.1",protocol:"rest-json",serviceAbbreviation:"Amazon Connect Participant",serviceFullName:"Amazon Connect Participant Service",serviceId:"ConnectParticipant",signatureVersion:"v4",signingName:"execute-api",uid:"connectparticipant-2018-09-07"},operations:{CreateParticipantConnection:{http:{requestUri:"/participant/connection"},input:{type:"structure",required:["Type","ParticipantToken"],members:{Type:{type:"list",member:{}},ParticipantToken:{location:"header",locationName:"X-Amz-Bearer"}}},output:{type:"structure",members:{Websocket:{type:"structure",members:{Url:{},ConnectionExpiry:{}}},ConnectionCredentials:{type:"structure",members:{ConnectionToken:{},Expiry:{}}}}}},DisconnectParticipant:{http:{requestUri:"/participant/disconnect"},input:{type:"structure",required:["ConnectionToken"],members:{ClientToken:{idempotencyToken:!0},ConnectionToken:{location:"header",locationName:"X-Amz-Bearer"}}},output:{type:"structure",members:{}}},GetTranscript:{http:{requestUri:"/participant/transcript"},input:{type:"structure",required:["ConnectionToken"],members:{ContactId:{},MaxResults:{type:"integer"},NextToken:{},ScanDirection:{},SortOrder:{},StartPosition:{type:"structure",members:{Id:{},AbsoluteTime:{},MostRecent:{type:"integer"}}},ConnectionToken:{location:"header",locationName:"X-Amz-Bearer"}}},output:{type:"structure",members:{InitialContactId:{},Transcript:{type:"list",member:{type:"structure",members:{AbsoluteTime:{},Content:{},ContentType:{},Id:{},Type:{},ParticipantId:{},DisplayName:{},ParticipantRole:{}}}},NextToken:{}}}},SendEvent:{http:{requestUri:"/participant/event"},input:{type:"structure",required:["ContentType","ConnectionToken"],members:{ContentType:{},Content:{},ClientToken:{idempotencyToken:!0},ConnectionToken:{location:"header",locationName:"X-Amz-Bearer"}}},output:{type:"structure",members:{Id:{},AbsoluteTime:{}}}},SendMessage:{http:{requestUri:"/participant/message"},input:{type:"structure",required:["ContentType","Content","ConnectionToken"],members:{ContentType:{},Content:{},ClientToken:{idempotencyToken:!0},ConnectionToken:{location:"header",locationName:"X-Amz-Bearer"}}},output:{type:"structure",members:{Id:{},AbsoluteTime:{}}}}},shapes:{}}},{}],4:[function(e,t,n){t.exports={pagination:{GetTranscript:{input_token:"NextToken",output_token:"NextToken",limit_key:"MaxResults"}}}},{}],5:[function(e,t,n){t.exports={acm:{name:"ACM",cors:!0},apigateway:{name:"APIGateway",cors:!0},applicationautoscaling:{prefix:"application-autoscaling",name:"ApplicationAutoScaling",cors:!0},appstream:{name:"AppStream"},autoscaling:{name:"AutoScaling",cors:!0},batch:{name:"Batch"},budgets:{name:"Budgets"},clouddirectory:{name:"CloudDirectory",versions:["2016-05-10*"]},cloudformation:{name:"CloudFormation",cors:!0},cloudfront:{name:"CloudFront",versions:["2013-05-12*","2013-11-11*","2014-05-31*","2014-10-21*","2014-11-06*","2015-04-17*","2015-07-27*","2015-09-17*","2016-01-13*","2016-01-28*","2016-08-01*","2016-08-20*","2016-09-07*","2016-09-29*","2016-11-25*","2017-03-25*","2017-10-30*","2018-06-18*","2018-11-05*"],cors:!0},cloudhsm:{name:"CloudHSM",cors:!0},cloudsearch:{name:"CloudSearch"},cloudsearchdomain:{name:"CloudSearchDomain"},cloudtrail:{name:"CloudTrail",cors:!0},cloudwatch:{prefix:"monitoring",name:"CloudWatch",cors:!0},cloudwatchevents:{prefix:"events",name:"CloudWatchEvents",versions:["2014-02-03*"],cors:!0},cloudwatchlogs:{prefix:"logs",name:"CloudWatchLogs",cors:!0},codebuild:{name:"CodeBuild",cors:!0},codecommit:{name:"CodeCommit",cors:!0},codedeploy:{name:"CodeDeploy",cors:!0},codepipeline:{name:"CodePipeline",cors:!0},cognitoidentity:{prefix:"cognito-identity",name:"CognitoIdentity",cors:!0},cognitoidentityserviceprovider:{prefix:"cognito-idp",name:"CognitoIdentityServiceProvider",cors:!0},cognitosync:{prefix:"cognito-sync",name:"CognitoSync",cors:!0},configservice:{prefix:"config",name:"ConfigService",cors:!0},cur:{name:"CUR",cors:!0},datapipeline:{name:"DataPipeline"},devicefarm:{name:"DeviceFarm",cors:!0},directconnect:{name:"DirectConnect",cors:!0},directoryservice:{prefix:"ds",name:"DirectoryService"},discovery:{name:"Discovery"},dms:{name:"DMS"},dynamodb:{name:"DynamoDB",cors:!0},dynamodbstreams:{prefix:"streams.dynamodb",name:"DynamoDBStreams",cors:!0},ec2:{name:"EC2",versions:["2013-06-15*","2013-10-15*","2014-02-01*","2014-05-01*","2014-06-15*","2014-09-01*","2014-10-01*","2015-03-01*","2015-04-15*","2015-10-01*","2016-04-01*","2016-09-15*"],cors:!0},ecr:{name:"ECR",cors:!0},ecs:{name:"ECS",cors:!0},efs:{prefix:"elasticfilesystem",name:"EFS",cors:!0},elasticache:{name:"ElastiCache",versions:["2012-11-15*","2014-03-24*","2014-07-15*","2014-09-30*"],cors:!0},elasticbeanstalk:{name:"ElasticBeanstalk",cors:!0},elb:{prefix:"elasticloadbalancing",name:"ELB",cors:!0},elbv2:{prefix:"elasticloadbalancingv2",name:"ELBv2",cors:!0},emr:{prefix:"elasticmapreduce",name:"EMR",cors:!0},es:{name:"ES"},elastictranscoder:{name:"ElasticTranscoder",cors:!0},firehose:{name:"Firehose",cors:!0},gamelift:{name:"GameLift",cors:!0},glacier:{name:"Glacier"},health:{name:"Health"},iam:{name:"IAM",cors:!0},importexport:{name:"ImportExport"},inspector:{name:"Inspector",versions:["2015-08-18*"],cors:!0},iot:{name:"Iot",cors:!0},iotdata:{prefix:"iot-data",name:"IotData",cors:!0},kinesis:{name:"Kinesis",cors:!0},kinesisanalytics:{name:"KinesisAnalytics"},kms:{name:"KMS",cors:!0},lambda:{name:"Lambda",cors:!0},lexruntime:{prefix:"runtime.lex",name:"LexRuntime",cors:!0},lightsail:{name:"Lightsail"},machinelearning:{name:"MachineLearning",cors:!0},marketplacecommerceanalytics:{name:"MarketplaceCommerceAnalytics",cors:!0},marketplacemetering:{prefix:"meteringmarketplace",name:"MarketplaceMetering"},mturk:{prefix:"mturk-requester",name:"MTurk",cors:!0},mobileanalytics:{name:"MobileAnalytics",cors:!0},opsworks:{name:"OpsWorks",cors:!0},opsworkscm:{name:"OpsWorksCM"},organizations:{name:"Organizations"},pinpoint:{name:"Pinpoint"},polly:{name:"Polly",cors:!0},rds:{name:"RDS",versions:["2014-09-01*"],cors:!0},redshift:{name:"Redshift",cors:!0},rekognition:{name:"Rekognition",cors:!0},resourcegroupstaggingapi:{name:"ResourceGroupsTaggingAPI"},route53:{name:"Route53",cors:!0},route53domains:{name:"Route53Domains",cors:!0},s3:{name:"S3",dualstackAvailable:!0,cors:!0},s3control:{name:"S3Control",dualstackAvailable:!0},servicecatalog:{name:"ServiceCatalog",cors:!0},ses:{prefix:"email",name:"SES",cors:!0},shield:{name:"Shield"},simpledb:{prefix:"sdb",name:"SimpleDB"},sms:{name:"SMS"},snowball:{name:"Snowball"},sns:{name:"SNS",cors:!0},sqs:{name:"SQS",cors:!0},ssm:{name:"SSM",cors:!0},storagegateway:{name:"StorageGateway",cors:!0},stepfunctions:{prefix:"states",name:"StepFunctions"},sts:{name:"STS",cors:!0},support:{name:"Support"},swf:{name:"SWF"},xray:{name:"XRay",cors:!0},waf:{name:"WAF",cors:!0},wafregional:{prefix:"waf-regional",name:"WAFRegional"},workdocs:{name:"WorkDocs",cors:!0},workspaces:{name:"WorkSpaces"},codestar:{name:"CodeStar"},lexmodelbuildingservice:{prefix:"lex-models",name:"LexModelBuildingService",cors:!0},marketplaceentitlementservice:{prefix:"entitlement.marketplace",name:"MarketplaceEntitlementService"},athena:{name:"Athena"},greengrass:{name:"Greengrass"},dax:{name:"DAX"},migrationhub:{prefix:"AWSMigrationHub",name:"MigrationHub"},cloudhsmv2:{name:"CloudHSMV2"},glue:{name:"Glue"},mobile:{name:"Mobile"},pricing:{name:"Pricing",cors:!0},costexplorer:{prefix:"ce",name:"CostExplorer",cors:!0},mediaconvert:{name:"MediaConvert"},medialive:{name:"MediaLive"},mediapackage:{name:"MediaPackage"},mediastore:{name:"MediaStore"},mediastoredata:{prefix:"mediastore-data",name:"MediaStoreData",cors:!0},appsync:{name:"AppSync"},guardduty:{name:"GuardDuty"},mq:{name:"MQ"},comprehend:{name:"Comprehend",cors:!0},iotjobsdataplane:{prefix:"iot-jobs-data",name:"IoTJobsDataPlane"},kinesisvideoarchivedmedia:{prefix:"kinesis-video-archived-media",name:"KinesisVideoArchivedMedia",cors:!0},kinesisvideomedia:{prefix:"kinesis-video-media",name:"KinesisVideoMedia",cors:!0},kinesisvideo:{name:"KinesisVideo",cors:!0},sagemakerruntime:{prefix:"runtime.sagemaker",name:"SageMakerRuntime"},sagemaker:{name:"SageMaker"},translate:{name:"Translate",cors:!0},resourcegroups:{prefix:"resource-groups",name:"ResourceGroups",cors:!0},alexaforbusiness:{name:"AlexaForBusiness"},cloud9:{name:"Cloud9"},serverlessapplicationrepository:{prefix:"serverlessrepo",name:"ServerlessApplicationRepository"},servicediscovery:{name:"ServiceDiscovery"},workmail:{name:"WorkMail"},autoscalingplans:{prefix:"autoscaling-plans",name:"AutoScalingPlans"},transcribeservice:{prefix:"transcribe",name:"TranscribeService"},connect:{name:"Connect"},acmpca:{prefix:"acm-pca",name:"ACMPCA"},fms:{name:"FMS"},secretsmanager:{name:"SecretsManager",cors:!0},iotanalytics:{name:"IoTAnalytics",cors:!0},iot1clickdevicesservice:{prefix:"iot1click-devices",name:"IoT1ClickDevicesService"},iot1clickprojects:{prefix:"iot1click-projects",name:"IoT1ClickProjects"},pi:{name:"PI"},neptune:{name:"Neptune"},mediatailor:{name:"MediaTailor"},eks:{name:"EKS"},macie:{name:"Macie"},dlm:{name:"DLM"},signer:{name:"Signer"},chime:{name:"Chime"},pinpointemail:{prefix:"pinpoint-email",name:"PinpointEmail"},ram:{name:"RAM"},route53resolver:{name:"Route53Resolver"},pinpointsmsvoice:{prefix:"sms-voice",name:"PinpointSMSVoice"},quicksight:{name:"QuickSight"},rdsdataservice:{prefix:"rds-data",name:"RDSDataService"},amplify:{name:"Amplify"},datasync:{name:"DataSync"},robomaker:{name:"RoboMaker"},transfer:{name:"Transfer"},globalaccelerator:{name:"GlobalAccelerator"},comprehendmedical:{name:"ComprehendMedical",cors:!0},kinesisanalyticsv2:{name:"KinesisAnalyticsV2"},mediaconnect:{name:"MediaConnect"},fsx:{name:"FSx"},securityhub:{name:"SecurityHub"},appmesh:{name:"AppMesh",versions:["2018-10-01*"]},licensemanager:{prefix:"license-manager",name:"LicenseManager"},kafka:{name:"Kafka"},apigatewaymanagementapi:{name:"ApiGatewayManagementApi"},apigatewayv2:{name:"ApiGatewayV2"},docdb:{name:"DocDB"},backup:{name:"Backup"},worklink:{name:"WorkLink"},textract:{name:"Textract"},managedblockchain:{name:"ManagedBlockchain"},mediapackagevod:{prefix:"mediapackage-vod",name:"MediaPackageVod"},groundstation:{name:"GroundStation"},iotthingsgraph:{name:"IoTThingsGraph"},iotevents:{name:"IoTEvents"},ioteventsdata:{prefix:"iotevents-data",name:"IoTEventsData"},personalize:{name:"Personalize",cors:!0},personalizeevents:{prefix:"personalize-events",name:"PersonalizeEvents",cors:!0},personalizeruntime:{prefix:"personalize-runtime",name:"PersonalizeRuntime",cors:!0},applicationinsights:{prefix:"application-insights",name:"ApplicationInsights"},servicequotas:{prefix:"service-quotas",name:"ServiceQuotas"},ec2instanceconnect:{prefix:"ec2-instance-connect",name:"EC2InstanceConnect"},eventbridge:{name:"EventBridge"},lakeformation:{name:"LakeFormation"},forecastservice:{prefix:"forecast",name:"ForecastService",cors:!0},forecastqueryservice:{prefix:"forecastquery",name:"ForecastQueryService",cors:!0},qldb:{name:"QLDB"},qldbsession:{prefix:"qldb-session",name:"QLDBSession"},workmailmessageflow:{name:"WorkMailMessageFlow"},connectparticipant:{name:"ConnectParticipant"}}},{}],6:[function(e,t,n){t.exports={version:"2.0",metadata:{apiVersion:"2011-06-15",endpointPrefix:"sts",globalEndpoint:"sts.amazonaws.com",protocol:"query",serviceAbbreviation:"AWS STS",serviceFullName:"AWS Security Token Service",serviceId:"STS",signatureVersion:"v4",uid:"sts-2011-06-15",xmlNamespace:"https://sts.amazonaws.com/doc/2011-06-15/"},operations:{AssumeRole:{input:{type:"structure",required:["RoleArn","RoleSessionName"],members:{RoleArn:{},RoleSessionName:{},PolicyArns:{shape:"S4"},Policy:{},DurationSeconds:{type:"integer"},ExternalId:{},SerialNumber:{},TokenCode:{}}},output:{resultWrapper:"AssumeRoleResult",type:"structure",members:{Credentials:{shape:"Sc"},AssumedRoleUser:{shape:"Sh"},PackedPolicySize:{type:"integer"}}}},AssumeRoleWithSAML:{input:{type:"structure",required:["RoleArn","PrincipalArn","SAMLAssertion"],members:{RoleArn:{},PrincipalArn:{},SAMLAssertion:{},PolicyArns:{shape:"S4"},Policy:{},DurationSeconds:{type:"integer"}}},output:{resultWrapper:"AssumeRoleWithSAMLResult",type:"structure",members:{Credentials:{shape:"Sc"},AssumedRoleUser:{shape:"Sh"},PackedPolicySize:{type:"integer"},Subject:{},SubjectType:{},Issuer:{},Audience:{},NameQualifier:{}}}},AssumeRoleWithWebIdentity:{input:{type:"structure",required:["RoleArn","RoleSessionName","WebIdentityToken"],members:{RoleArn:{},RoleSessionName:{},WebIdentityToken:{},ProviderId:{},PolicyArns:{shape:"S4"},Policy:{},DurationSeconds:{type:"integer"}}},output:{resultWrapper:"AssumeRoleWithWebIdentityResult",type:"structure",members:{Credentials:{shape:"Sc"},SubjectFromWebIdentityToken:{},AssumedRoleUser:{shape:"Sh"},PackedPolicySize:{type:"integer"},Provider:{},Audience:{}}}},DecodeAuthorizationMessage:{input:{type:"structure",required:["EncodedMessage"],members:{EncodedMessage:{}}},output:{resultWrapper:"DecodeAuthorizationMessageResult",type:"structure",members:{DecodedMessage:{}}}},GetAccessKeyInfo:{input:{type:"structure",required:["AccessKeyId"],members:{AccessKeyId:{}}},output:{resultWrapper:"GetAccessKeyInfoResult",type:"structure",members:{Account:{}}}},GetCallerIdentity:{input:{type:"structure",members:{}},output:{resultWrapper:"GetCallerIdentityResult",type:"structure",members:{UserId:{},Account:{},Arn:{}}}},GetFederationToken:{input:{type:"structure",required:["Name"],members:{Name:{},Policy:{},PolicyArns:{shape:"S4"},DurationSeconds:{type:"integer"}}},output:{resultWrapper:"GetFederationTokenResult",type:"structure",members:{Credentials:{shape:"Sc"},FederatedUser:{type:"structure",required:["FederatedUserId","Arn"],members:{FederatedUserId:{},Arn:{}}},PackedPolicySize:{type:"integer"}}}},GetSessionToken:{input:{type:"structure",members:{DurationSeconds:{type:"integer"},SerialNumber:{},TokenCode:{}}},output:{resultWrapper:"GetSessionTokenResult",type:"structure",members:{Credentials:{shape:"Sc"}}}}},shapes:{S4:{type:"list",member:{type:"structure",members:{arn:{}}}},Sc:{type:"structure",required:["AccessKeyId","SecretAccessKey","SessionToken","Expiration"],members:{AccessKeyId:{},SecretAccessKey:{},SessionToken:{},Expiration:{type:"timestamp"}}},Sh:{type:"structure",required:["AssumedRoleId","Arn"],members:{AssumedRoleId:{},Arn:{}}}}}},{}],7:[function(e,t,n){arguments[4][2][0].apply(n,arguments)},{dup:2}],8:[function(e,t,n){e("../lib/node_loader");var r=e("../lib/core"),i=r.Service,o=r.apiLoader;o.services.cognitoidentity={},r.CognitoIdentity=i.defineService("cognitoidentity",["2014-06-30"]),e("../lib/services/cognitoidentity"),Object.defineProperty(o.services.cognitoidentity,"2014-06-30",{get:function(){var t=e("../apis/cognito-identity-2014-06-30.min.json");return t.paginators=e("../apis/cognito-identity-2014-06-30.paginators.json").pagination,t},enumerable:!0,configurable:!0}),t.exports=r.CognitoIdentity},{"../apis/cognito-identity-2014-06-30.min.json":1,"../apis/cognito-identity-2014-06-30.paginators.json":2,"../lib/core":19,"../lib/node_loader":17,"../lib/services/cognitoidentity":61}],9:[function(e,t,n){e("../lib/node_loader");var r=e("../lib/core"),i=r.Service,o=r.apiLoader;o.services.sts={},r.STS=i.defineService("sts",["2011-06-15"]),e("../lib/services/sts"),Object.defineProperty(o.services.sts,"2011-06-15",{get:function(){var t=e("../apis/sts-2011-06-15.min.json");return t.paginators=e("../apis/sts-2011-06-15.paginators.json").pagination,t},enumerable:!0,configurable:!0}),t.exports=r.STS},{"../apis/sts-2011-06-15.min.json":6,"../apis/sts-2011-06-15.paginators.json":7,"../lib/core":19,"../lib/node_loader":17,"../lib/services/sts":62}],10:[function(e,t,n){function r(e,t){if(!r.services.hasOwnProperty(e))throw new Error("InvalidService: Failed to load api for "+e);return r.services[e][t]}r.services={},t.exports=r},{}],11:[function(e,t,n){var r=e("./browserHmac"),i=e("./browserMd5"),o=e("./browserSha1"),s=e("./browserSha256");t.exports={createHash:function(e){if("md5"===(e=e.toLowerCase()))return new i;if("sha256"===e)return new s;if("sha1"===e)return new o;throw new Error("Hash algorithm "+e+" is not supported in the browser SDK")},createHmac:function(e,t){if("md5"===(e=e.toLowerCase()))return new r(i,t);if("sha256"===e)return new r(s,t);if("sha1"===e)return new r(o,t);throw new Error("HMAC algorithm "+e+" is not supported in the browser SDK")},createSign:function(){throw new Error("createSign is not implemented in the browser")}}},{"./browserHmac":13,"./browserMd5":14,"./browserSha1":15,"./browserSha256":16}],12:[function(e,t,n){var r=e("buffer/").Buffer;"undefined"!=typeof ArrayBuffer&&void 0===ArrayBuffer.isView&&(ArrayBuffer.isView=function(e){return i.indexOf(Object.prototype.toString.call(e))>-1});var i=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]","[object DataView]"];t.exports={isEmptyData:function(e){return"string"==typeof e?0===e.length:0===e.byteLength},convertToBuffer:function(e){return"string"==typeof e&&(e=new r(e,"utf8")),ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e)}}},{"buffer/":81}],13:[function(e,t,n){var r=e("./browserHashUtils");function i(e,t){this.hash=new e,this.outer=new e;var n=function(e,t){var n=r.convertToBuffer(t);if(n.byteLength>e.BLOCK_SIZE){var i=new e;i.update(n),n=i.digest()}var o=new Uint8Array(e.BLOCK_SIZE);return o.set(n),o}(e,t),i=new Uint8Array(e.BLOCK_SIZE);i.set(n);for(var o=0;o<e.BLOCK_SIZE;o++)n[o]^=54,i[o]^=92;this.hash.update(n),this.outer.update(i);for(o=0;o<n.byteLength;o++)n[o]=0}t.exports=i,i.prototype.update=function(e){if(r.isEmptyData(e)||this.error)return this;try{this.hash.update(r.convertToBuffer(e))}catch(e){this.error=e}return this},i.prototype.digest=function(e){return this.outer.finished||this.outer.update(this.hash.digest()),this.outer.digest(e)}},{"./browserHashUtils":12}],14:[function(e,t,n){var r=e("./browserHashUtils"),i=e("buffer/").Buffer,o=64;function s(){this.state=[1732584193,4023233417,2562383102,271733878],this.buffer=new DataView(new ArrayBuffer(o)),this.bufferLength=0,this.bytesHashed=0,this.finished=!1}function a(e,t,n,r,i,o){return((t=(t+e&4294967295)+(r+o&4294967295)&4294967295)<<i|t>>>32-i)+n&4294967295}function c(e,t,n,r,i,o,s){return a(t&n|~t&r,e,t,i,o,s)}function u(e,t,n,r,i,o,s){return a(t&r|n&~r,e,t,i,o,s)}function l(e,t,n,r,i,o,s){return a(t^n^r,e,t,i,o,s)}function h(e,t,n,r,i,o,s){return a(n^(t|~r),e,t,i,o,s)}t.exports=s,s.BLOCK_SIZE=o,s.prototype.update=function(e){if(r.isEmptyData(e))return this;if(this.finished)throw new Error("Attempted to update an already finished hash.");var t=r.convertToBuffer(e),n=0,i=t.byteLength;for(this.bytesHashed+=i;i>0;)this.buffer.setUint8(this.bufferLength++,t[n++]),i--,this.bufferLength===o&&(this.hashBuffer(),this.bufferLength=0);return this},s.prototype.digest=function(e){if(!this.finished){var t=this.buffer,n=this.bufferLength,r=8*this.bytesHashed;if(t.setUint8(this.bufferLength++,128),n%o>=o-8){for(var s=this.bufferLength;s<o;s++)t.setUint8(s,0);this.hashBuffer(),this.bufferLength=0}for(s=this.bufferLength;s<o-8;s++)t.setUint8(s,0);t.setUint32(o-8,r>>>0,!0),t.setUint32(o-4,Math.floor(r/4294967296),!0),this.hashBuffer(),this.finished=!0}var a=new DataView(new ArrayBuffer(16));for(s=0;s<4;s++)a.setUint32(4*s,this.state[s],!0);var c=new i(a.buffer,a.byteOffset,a.byteLength);return e?c.toString(e):c},s.prototype.hashBuffer=function(){var e=this.buffer,t=this.state,n=t[0],r=t[1],i=t[2],o=t[3];n=c(n,r,i,o,e.getUint32(0,!0),7,3614090360),o=c(o,n,r,i,e.getUint32(4,!0),12,3905402710),i=c(i,o,n,r,e.getUint32(8,!0),17,606105819),r=c(r,i,o,n,e.getUint32(12,!0),22,3250441966),n=c(n,r,i,o,e.getUint32(16,!0),7,4118548399),o=c(o,n,r,i,e.getUint32(20,!0),12,1200080426),i=c(i,o,n,r,e.getUint32(24,!0),17,2821735955),r=c(r,i,o,n,e.getUint32(28,!0),22,4249261313),n=c(n,r,i,o,e.getUint32(32,!0),7,1770035416),o=c(o,n,r,i,e.getUint32(36,!0),12,2336552879),i=c(i,o,n,r,e.getUint32(40,!0),17,4294925233),r=c(r,i,o,n,e.getUint32(44,!0),22,2304563134),n=c(n,r,i,o,e.getUint32(48,!0),7,1804603682),o=c(o,n,r,i,e.getUint32(52,!0),12,4254626195),i=c(i,o,n,r,e.getUint32(56,!0),17,2792965006),n=u(n,r=c(r,i,o,n,e.getUint32(60,!0),22,1236535329),i,o,e.getUint32(4,!0),5,4129170786),o=u(o,n,r,i,e.getUint32(24,!0),9,3225465664),i=u(i,o,n,r,e.getUint32(44,!0),14,643717713),r=u(r,i,o,n,e.getUint32(0,!0),20,3921069994),n=u(n,r,i,o,e.getUint32(20,!0),5,3593408605),o=u(o,n,r,i,e.getUint32(40,!0),9,38016083),i=u(i,o,n,r,e.getUint32(60,!0),14,3634488961),r=u(r,i,o,n,e.getUint32(16,!0),20,3889429448),n=u(n,r,i,o,e.getUint32(36,!0),5,568446438),o=u(o,n,r,i,e.getUint32(56,!0),9,3275163606),i=u(i,o,n,r,e.getUint32(12,!0),14,4107603335),r=u(r,i,o,n,e.getUint32(32,!0),20,1163531501),n=u(n,r,i,o,e.getUint32(52,!0),5,2850285829),o=u(o,n,r,i,e.getUint32(8,!0),9,4243563512),i=u(i,o,n,r,e.getUint32(28,!0),14,1735328473),n=l(n,r=u(r,i,o,n,e.getUint32(48,!0),20,2368359562),i,o,e.getUint32(20,!0),4,4294588738),o=l(o,n,r,i,e.getUint32(32,!0),11,2272392833),i=l(i,o,n,r,e.getUint32(44,!0),16,1839030562),r=l(r,i,o,n,e.getUint32(56,!0),23,4259657740),n=l(n,r,i,o,e.getUint32(4,!0),4,2763975236),o=l(o,n,r,i,e.getUint32(16,!0),11,1272893353),i=l(i,o,n,r,e.getUint32(28,!0),16,4139469664),r=l(r,i,o,n,e.getUint32(40,!0),23,3200236656),n=l(n,r,i,o,e.getUint32(52,!0),4,681279174),o=l(o,n,r,i,e.getUint32(0,!0),11,3936430074),i=l(i,o,n,r,e.getUint32(12,!0),16,3572445317),r=l(r,i,o,n,e.getUint32(24,!0),23,76029189),n=l(n,r,i,o,e.getUint32(36,!0),4,3654602809),o=l(o,n,r,i,e.getUint32(48,!0),11,3873151461),i=l(i,o,n,r,e.getUint32(60,!0),16,530742520),n=h(n,r=l(r,i,o,n,e.getUint32(8,!0),23,3299628645),i,o,e.getUint32(0,!0),6,4096336452),o=h(o,n,r,i,e.getUint32(28,!0),10,1126891415),i=h(i,o,n,r,e.getUint32(56,!0),15,2878612391),r=h(r,i,o,n,e.getUint32(20,!0),21,4237533241),n=h(n,r,i,o,e.getUint32(48,!0),6,1700485571),o=h(o,n,r,i,e.getUint32(12,!0),10,2399980690),i=h(i,o,n,r,e.getUint32(40,!0),15,4293915773),r=h(r,i,o,n,e.getUint32(4,!0),21,2240044497),n=h(n,r,i,o,e.getUint32(32,!0),6,1873313359),o=h(o,n,r,i,e.getUint32(60,!0),10,4264355552),i=h(i,o,n,r,e.getUint32(24,!0),15,2734768916),r=h(r,i,o,n,e.getUint32(52,!0),21,1309151649),n=h(n,r,i,o,e.getUint32(16,!0),6,4149444226),o=h(o,n,r,i,e.getUint32(44,!0),10,3174756917),i=h(i,o,n,r,e.getUint32(8,!0),15,718787259),r=h(r,i,o,n,e.getUint32(36,!0),21,3951481745),t[0]=n+t[0]&4294967295,t[1]=r+t[1]&4294967295,t[2]=i+t[2]&4294967295,t[3]=o+t[3]&4294967295}},{"./browserHashUtils":12,"buffer/":81}],15:[function(e,t,n){var r=e("buffer/").Buffer,i=e("./browserHashUtils");new Uint32Array([1518500249,1859775393,-1894007588,-899497514]),Math.pow(2,53);function o(){this.h0=1732584193,this.h1=4023233417,this.h2=2562383102,this.h3=271733878,this.h4=3285377520,this.block=new Uint32Array(80),this.offset=0,this.shift=24,this.totalLength=0}t.exports=o,o.BLOCK_SIZE=64,o.prototype.update=function(e){if(this.finished)throw new Error("Attempted to update an already finished hash.");if(i.isEmptyData(e))return this;var t=(e=i.convertToBuffer(e)).length;this.totalLength+=8*t;for(var n=0;n<t;n++)this.write(e[n]);return this},o.prototype.write=function(e){this.block[this.offset]|=(255&e)<<this.shift,this.shift?this.shift-=8:(this.offset++,this.shift=24),16===this.offset&&this.processBlock()},o.prototype.digest=function(e){this.write(128),(this.offset>14||14===this.offset&&this.shift<24)&&this.processBlock(),this.offset=14,this.shift=24,this.write(0),this.write(0),this.write(this.totalLength>0xffffffffff?this.totalLength/1099511627776:0),this.write(this.totalLength>4294967295?this.totalLength/4294967296:0);for(var t=24;t>=0;t-=8)this.write(this.totalLength>>t);var n=new r(20),i=new DataView(n.buffer);return i.setUint32(0,this.h0,!1),i.setUint32(4,this.h1,!1),i.setUint32(8,this.h2,!1),i.setUint32(12,this.h3,!1),i.setUint32(16,this.h4,!1),e?n.toString(e):n},o.prototype.processBlock=function(){for(var e=16;e<80;e++){var t=this.block[e-3]^this.block[e-8]^this.block[e-14]^this.block[e-16];this.block[e]=t<<1|t>>>31}var n,r,i=this.h0,o=this.h1,s=this.h2,a=this.h3,c=this.h4;for(e=0;e<80;e++){e<20?(n=a^o&(s^a),r=1518500249):e<40?(n=o^s^a,r=1859775393):e<60?(n=o&s|a&(o|s),r=2400959708):(n=o^s^a,r=3395469782);var u=(i<<5|i>>>27)+n+c+r+(0|this.block[e]);c=a,a=s,s=o<<30|o>>>2,o=i,i=u}for(this.h0=this.h0+i|0,this.h1=this.h1+o|0,this.h2=this.h2+s|0,this.h3=this.h3+a|0,this.h4=this.h4+c|0,this.offset=0,e=0;e<16;e++)this.block[e]=0}},{"./browserHashUtils":12,"buffer/":81}],16:[function(e,t,n){var r=e("buffer/").Buffer,i=e("./browserHashUtils"),o=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),s=Math.pow(2,53)-1;function a(){this.state=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.temp=new Int32Array(64),this.buffer=new Uint8Array(64),this.bufferLength=0,this.bytesHashed=0,this.finished=!1}t.exports=a,a.BLOCK_SIZE=64,a.prototype.update=function(e){if(this.finished)throw new Error("Attempted to update an already finished hash.");if(i.isEmptyData(e))return this;var t=0,n=(e=i.convertToBuffer(e)).byteLength;if(this.bytesHashed+=n,8*this.bytesHashed>s)throw new Error("Cannot hash more than 2^53 - 1 bits");for(;n>0;)this.buffer[this.bufferLength++]=e[t++],n--,64===this.bufferLength&&(this.hashBuffer(),this.bufferLength=0);return this},a.prototype.digest=function(e){if(!this.finished){var t=8*this.bytesHashed,n=new DataView(this.buffer.buffer,this.buffer.byteOffset,this.buffer.byteLength),i=this.bufferLength;if(n.setUint8(this.bufferLength++,128),i%64>=56){for(var o=this.bufferLength;o<64;o++)n.setUint8(o,0);this.hashBuffer(),this.bufferLength=0}for(o=this.bufferLength;o<56;o++)n.setUint8(o,0);n.setUint32(56,Math.floor(t/4294967296),!0),n.setUint32(60,t),this.hashBuffer(),this.finished=!0}var s=new r(32);for(o=0;o<8;o++)s[4*o]=this.state[o]>>>24&255,s[4*o+1]=this.state[o]>>>16&255,s[4*o+2]=this.state[o]>>>8&255,s[4*o+3]=this.state[o]>>>0&255;return e?s.toString(e):s},a.prototype.hashBuffer=function(){for(var e=this.buffer,t=this.state,n=t[0],r=t[1],i=t[2],s=t[3],a=t[4],c=t[5],u=t[6],l=t[7],h=0;h<64;h++){if(h<16)this.temp[h]=(255&e[4*h])<<24|(255&e[4*h+1])<<16|(255&e[4*h+2])<<8|255&e[4*h+3];else{var p=this.temp[h-2],f=(p>>>17|p<<15)^(p>>>19|p<<13)^p>>>10,d=((p=this.temp[h-15])>>>7|p<<25)^(p>>>18|p<<14)^p>>>3;this.temp[h]=(f+this.temp[h-7]|0)+(d+this.temp[h-16]|0)}var g=(((a>>>6|a<<26)^(a>>>11|a<<21)^(a>>>25|a<<7))+(a&c^~a&u)|0)+(l+(o[h]+this.temp[h]|0)|0)|0,m=((n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10))+(n&r^n&i^r&i)|0;l=u,u=c,c=a,a=s+g|0,s=i,i=r,r=n,n=g+m|0}t[0]+=n,t[1]+=r,t[2]+=i,t[3]+=s,t[4]+=a,t[5]+=c,t[6]+=u,t[7]+=l}},{"./browserHashUtils":12,"buffer/":81}],17:[function(e,t,n){(function(n){var r=e("./util");r.crypto.lib=e("./browserCryptoLib"),r.Buffer=e("buffer/").Buffer,r.url=e("url/"),r.querystring=e("querystring/"),r.realClock=e("./realclock/browserClock"),r.environment="js",r.createEventStream=e("./event-stream/buffered-create-event-stream").createEventStream,r.isBrowser=function(){return!0},r.isNode=function(){return!1};var i=e("./core");if(t.exports=i,e("./credentials"),e("./credentials/credential_provider_chain"),e("./credentials/temporary_credentials"),e("./credentials/chainable_temporary_credentials"),e("./credentials/web_identity_credentials"),e("./credentials/cognito_identity_credentials"),e("./credentials/saml_credentials"),i.XML.Parser=e("./xml/browser_parser"),e("./http/xhr"),void 0===n)n={browser:!0}}).call(this,e("_process"))},{"./browserCryptoLib":11,"./core":19,"./credentials":20,"./credentials/chainable_temporary_credentials":21,"./credentials/cognito_identity_credentials":22,"./credentials/credential_provider_chain":23,"./credentials/saml_credentials":24,"./credentials/temporary_credentials":25,"./credentials/web_identity_credentials":26,"./event-stream/buffered-create-event-stream":28,"./http/xhr":36,"./realclock/browserClock":53,"./util":72,"./xml/browser_parser":73,_process:86,"buffer/":81,"querystring/":93,"url/":95}],18:[function(e,t,n){var r,i=e("./core");e("./credentials"),e("./credentials/credential_provider_chain"),i.Config=i.util.inherit({constructor:function(e){void 0===e&&(e={}),e=this.extractCredentials(e),i.util.each.call(this,this.keys,(function(t,n){this.set(t,e[t],n)}))},getCredentials:function(e){var t,n=this;function r(t){e(t,t?null:n.credentials)}function o(e,t){return new i.util.error(t||new Error,{code:"CredentialsError",message:e,name:"CredentialsError"})}n.credentials?"function"==typeof n.credentials.get?n.credentials.get((function(e){e&&(e=o("Could not load credentials from "+n.credentials.constructor.name,e)),r(e)})):(t=null,n.credentials.accessKeyId&&n.credentials.secretAccessKey||(t=o("Missing credentials")),r(t)):n.credentialProvider?n.credentialProvider.resolve((function(e,t){e&&(e=o("Could not load credentials from any providers",e)),n.credentials=t,r(e)})):r(o("No credentials to load"))},update:function(e,t){t=t||!1,e=this.extractCredentials(e),i.util.each.call(this,e,(function(e,n){(t||Object.prototype.hasOwnProperty.call(this.keys,e)||i.Service.hasService(e))&&this.set(e,n)}))},loadFromPath:function(e){this.clear();var t=JSON.parse(i.util.readFileSync(e)),n=new i.FileSystemCredentials(e),r=new i.CredentialProviderChain;return r.providers.unshift(n),r.resolve((function(e,n){if(e)throw e;t.credentials=n})),this.constructor(t),this},clear:function(){i.util.each.call(this,this.keys,(function(e){delete this[e]})),this.set("credentials",void 0),this.set("credentialProvider",void 0)},set:function(e,t,n){void 0===t?(void 0===n&&(n=this.keys[e]),this[e]="function"==typeof n?n.call(this):n):"httpOptions"===e&&this[e]?this[e]=i.util.merge(this[e],t):this[e]=t},keys:{credentials:null,credentialProvider:null,region:null,logger:null,apiVersions:{},apiVersion:null,endpoint:void 0,httpOptions:{timeout:12e4},maxRetries:void 0,maxRedirects:10,paramValidation:!0,sslEnabled:!0,s3ForcePathStyle:!1,s3BucketEndpoint:!1,s3DisableBodySigning:!0,computeChecksums:!0,convertResponseTypes:!0,correctClockSkew:!1,customUserAgent:null,dynamoDbCrc32:!0,systemClockOffset:0,signatureVersion:null,signatureCache:!0,retryDelayOptions:{},useAccelerateEndpoint:!1,clientSideMonitoring:!1,endpointDiscoveryEnabled:!1,endpointCacheSize:1e3,hostPrefixEnabled:!0,stsRegionalEndpoints:null},extractCredentials:function(e){return e.accessKeyId&&e.secretAccessKey&&((e=i.util.copy(e)).credentials=new i.Credentials(e)),e},setPromisesDependency:function(e){r=e,null===e&&"function"==typeof Promise&&(r=Promise);var t=[i.Request,i.Credentials,i.CredentialProviderChain];i.S3&&(t.push(i.S3),i.S3.ManagedUpload&&t.push(i.S3.ManagedUpload)),i.util.addPromises(t,r)},getPromisesDependency:function(){return r}}),i.config=new i.Config},{"./core":19,"./credentials":20,"./credentials/credential_provider_chain":23}],19:[function(e,t,n){var r={util:e("./util")};({}).toString(),t.exports=r,r.util.update(r,{VERSION:"2.556.0",Signers:{},Protocol:{Json:e("./protocol/json"),Query:e("./protocol/query"),Rest:e("./protocol/rest"),RestJson:e("./protocol/rest_json"),RestXml:e("./protocol/rest_xml")},XML:{Builder:e("./xml/builder"),Parser:null},JSON:{Builder:e("./json/builder"),Parser:e("./json/parser")},Model:{Api:e("./model/api"),Operation:e("./model/operation"),Shape:e("./model/shape"),Paginator:e("./model/paginator"),ResourceWaiter:e("./model/resource_waiter")},apiLoader:e("./api_loader"),EndpointCache:e("../vendor/endpoint-cache").EndpointCache}),e("./sequential_executor"),e("./service"),e("./config"),e("./http"),e("./event_listeners"),e("./request"),e("./response"),e("./resource_waiter"),e("./signers/request_signer"),e("./param_validator"),r.events=new r.SequentialExecutor,r.util.memoizedProperty(r,"endpointCache",(function(){return new r.EndpointCache(r.config.endpointCacheSize)}),!0)},{"../vendor/endpoint-cache":104,"./api_loader":10,"./config":18,"./event_listeners":34,"./http":35,"./json/builder":37,"./json/parser":38,"./model/api":39,"./model/operation":41,"./model/paginator":42,"./model/resource_waiter":43,"./model/shape":44,"./param_validator":45,"./protocol/json":47,"./protocol/query":48,"./protocol/rest":49,"./protocol/rest_json":50,"./protocol/rest_xml":51,"./request":56,"./resource_waiter":57,"./response":58,"./sequential_executor":59,"./service":60,"./signers/request_signer":64,"./util":72,"./xml/builder":74}],20:[function(e,t,n){var r=e("./core");r.Credentials=r.util.inherit({constructor:function(){if(r.util.hideProperties(this,["secretAccessKey"]),this.expired=!1,this.expireTime=null,this.refreshCallbacks=[],1===arguments.length&&"object"===i(arguments[0])){var e=arguments[0].credentials||arguments[0];this.accessKeyId=e.accessKeyId,this.secretAccessKey=e.secretAccessKey,this.sessionToken=e.sessionToken}else this.accessKeyId=arguments[0],this.secretAccessKey=arguments[1],this.sessionToken=arguments[2]},expiryWindow:15,needsRefresh:function(){var e=r.util.date.getDate().getTime(),t=new Date(e+1e3*this.expiryWindow);return!!(this.expireTime&&t>this.expireTime)||(this.expired||!this.accessKeyId||!this.secretAccessKey)},get:function(e){var t=this;this.needsRefresh()?this.refresh((function(n){n||(t.expired=!1),e&&e(n)})):e&&e()},refresh:function(e){this.expired=!1,e()},coalesceRefresh:function(e,t){var n=this;1===n.refreshCallbacks.push(e)&&n.load((function(e){r.util.arrayEach(n.refreshCallbacks,(function(n){t?n(e):r.util.defer((function(){n(e)}))})),n.refreshCallbacks.length=0}))},load:function(e){e()}}),r.Credentials.addPromisesToClass=function(e){this.prototype.getPromise=r.util.promisifyMethod("get",e),this.prototype.refreshPromise=r.util.promisifyMethod("refresh",e)},r.Credentials.deletePromisesFromClass=function(){delete this.prototype.getPromise,delete this.prototype.refreshPromise},r.util.addPromises(r.Credentials)},{"./core":19}],21:[function(e,t,n){var r=e("../core"),i=e("../../clients/sts");r.ChainableTemporaryCredentials=r.util.inherit(r.Credentials,{constructor:function(e){r.Credentials.call(this),e=e||{},this.errorCode="ChainableTemporaryCredentialsProviderFailure",this.expired=!0,this.tokenCodeFn=null;var t=r.util.copy(e.params)||{};if(t.RoleArn&&(t.RoleSessionName=t.RoleSessionName||"temporary-credentials"),t.SerialNumber){if(!e.tokenCodeFn||"function"!=typeof e.tokenCodeFn)throw new r.util.error(new Error("tokenCodeFn must be a function when params.SerialNumber is given"),{code:this.errorCode});this.tokenCodeFn=e.tokenCodeFn}var n=r.util.merge({params:t,credentials:e.masterCredentials||r.config.credentials},e.stsConfig||{});this.service=new i(n)},refresh:function(e){this.coalesceRefresh(e||r.util.fn.callback)},load:function(e){var t=this,n=t.service.config.params.RoleArn?"assumeRole":"getSessionToken";this.getTokenCode((function(r,i){var o={};r?e(r):(i&&(o.TokenCode=i),t.service[n](o,(function(n,r){n||t.service.credentialsFrom(r,t),e(n)})))}))},getTokenCode:function(e){var t=this;this.tokenCodeFn?this.tokenCodeFn(this.service.config.params.SerialNumber,(function(n,i){if(n){var o=n;return n instanceof Error&&(o=n.message),void e(r.util.error(new Error("Error fetching MFA token: "+o),{code:t.errorCode}))}e(null,i)})):e(null)}})},{"../../clients/sts":9,"../core":19}],22:[function(e,t,n){var r=e("../core"),o=e("../../clients/cognitoidentity"),s=e("../../clients/sts");r.CognitoIdentityCredentials=r.util.inherit(r.Credentials,{localStorageKey:{id:"aws.cognito.identity-id.",providers:"aws.cognito.identity-providers."},constructor:function(e,t){r.Credentials.call(this),this.expired=!0,this.params=e,this.data=null,this._identityId=null,this._clientConfig=r.util.copy(t||{}),this.loadCachedId();var n=this;Object.defineProperty(this,"identityId",{get:function(){return n.loadCachedId(),n._identityId||n.params.IdentityId},set:function(e){n._identityId=e}})},refresh:function(e){this.coalesceRefresh(e||r.util.fn.callback)},load:function(e){var t=this;t.createClients(),t.data=null,t._identityId=null,t.getId((function(n){n?(t.clearIdOnNotAuthorized(n),e(n)):t.params.RoleArn?t.getCredentialsFromSTS(e):t.getCredentialsForIdentity(e)}))},clearCachedId:function(){this._identityId=null,delete this.params.IdentityId;var e=this.params.IdentityPoolId,t=this.params.LoginId||"";delete this.storage[this.localStorageKey.id+e+t],delete this.storage[this.localStorageKey.providers+e+t]},clearIdOnNotAuthorized:function(e){"NotAuthorizedException"==e.code&&this.clearCachedId()},getId:function(e){var t=this;if("string"==typeof t.params.IdentityId)return e(null,t.params.IdentityId);t.cognito.getId((function(n,r){!n&&r.IdentityId?(t.params.IdentityId=r.IdentityId,e(null,r.IdentityId)):e(n)}))},loadCredentials:function(e,t){e&&t&&(t.expired=!1,t.accessKeyId=e.Credentials.AccessKeyId,t.secretAccessKey=e.Credentials.SecretKey,t.sessionToken=e.Credentials.SessionToken,t.expireTime=e.Credentials.Expiration)},getCredentialsForIdentity:function(e){var t=this;t.cognito.getCredentialsForIdentity((function(n,r){n?t.clearIdOnNotAuthorized(n):(t.cacheId(r),t.data=r,t.loadCredentials(t.data,t)),e(n)}))},getCredentialsFromSTS:function(e){var t=this;t.cognito.getOpenIdToken((function(n,r){n?(t.clearIdOnNotAuthorized(n),e(n)):(t.cacheId(r),t.params.WebIdentityToken=r.Token,t.webIdentityCredentials.refresh((function(n){n||(t.data=t.webIdentityCredentials.data,t.sts.credentialsFrom(t.data,t)),e(n)})))}))},loadCachedId:function(){if(r.util.isBrowser()&&!this.params.IdentityId){var e=this.getStorage("id");if(e&&this.params.Logins){var t=Object.keys(this.params.Logins);0!==(this.getStorage("providers")||"").split(",").filter((function(e){return-1!==t.indexOf(e)})).length&&(this.params.IdentityId=e)}else e&&(this.params.IdentityId=e)}},createClients:function(){var e=this._clientConfig;if(this.webIdentityCredentials=this.webIdentityCredentials||new r.WebIdentityCredentials(this.params,e),!this.cognito){var t=r.util.merge({},e);t.params=this.params,this.cognito=new o(t)}this.sts=this.sts||new s(e)},cacheId:function(e){this._identityId=e.IdentityId,this.params.IdentityId=this._identityId,r.util.isBrowser()&&(this.setStorage("id",e.IdentityId),this.params.Logins&&this.setStorage("providers",Object.keys(this.params.Logins).join(",")))},getStorage:function(e){return this.storage[this.localStorageKey[e]+this.params.IdentityPoolId+(this.params.LoginId||"")]},setStorage:function(e,t){try{this.storage[this.localStorageKey[e]+this.params.IdentityPoolId+(this.params.LoginId||"")]=t}catch(e){}},storage:function(){try{var e=r.util.isBrowser()&&null!==window.localStorage&&"object"===i(window.localStorage)?window.localStorage:{};return e["aws.test-storage"]="foobar",delete e["aws.test-storage"],e}catch(e){return{}}}()})},{"../../clients/cognitoidentity":8,"../../clients/sts":9,"../core":19}],23:[function(e,t,n){var r=e("../core");r.CredentialProviderChain=r.util.inherit(r.Credentials,{constructor:function(e){this.providers=e||r.CredentialProviderChain.defaultProviders.slice(0),this.resolveCallbacks=[]},resolve:function(e){var t=this;if(0===t.providers.length)return e(new Error("No providers")),t;if(1===t.resolveCallbacks.push(e)){var n=0,i=t.providers.slice(0);!function e(o,s){if(!o&&s||n===i.length)return r.util.arrayEach(t.resolveCallbacks,(function(e){e(o,s)})),void(t.resolveCallbacks.length=0);var a=i[n++];(s="function"==typeof a?a.call():a).get?s.get((function(t){e(t,t?null:s)})):e(null,s)}()}return t}}),r.CredentialProviderChain.defaultProviders=[],r.CredentialProviderChain.addPromisesToClass=function(e){this.prototype.resolvePromise=r.util.promisifyMethod("resolve",e)},r.CredentialProviderChain.deletePromisesFromClass=function(){delete this.prototype.resolvePromise},r.util.addPromises(r.CredentialProviderChain)},{"../core":19}],24:[function(e,t,n){var r=e("../core"),i=e("../../clients/sts");r.SAMLCredentials=r.util.inherit(r.Credentials,{constructor:function(e){r.Credentials.call(this),this.expired=!0,this.params=e},refresh:function(e){this.coalesceRefresh(e||r.util.fn.callback)},load:function(e){var t=this;t.createClients(),t.service.assumeRoleWithSAML((function(n,r){n||t.service.credentialsFrom(r,t),e(n)}))},createClients:function(){this.service=this.service||new i({params:this.params})}})},{"../../clients/sts":9,"../core":19}],25:[function(e,t,n){var r=e("../core"),i=e("../../clients/sts");r.TemporaryCredentials=r.util.inherit(r.Credentials,{constructor:function(e,t){r.Credentials.call(this),this.loadMasterCredentials(t),this.expired=!0,this.params=e||{},this.params.RoleArn&&(this.params.RoleSessionName=this.params.RoleSessionName||"temporary-credentials")},refresh:function(e){this.coalesceRefresh(e||r.util.fn.callback)},load:function(e){var t=this;t.createClients(),t.masterCredentials.get((function(){t.service.config.credentials=t.masterCredentials,(t.params.RoleArn?t.service.assumeRole:t.service.getSessionToken).call(t.service,(function(n,r){n||t.service.credentialsFrom(r,t),e(n)}))}))},loadMasterCredentials:function(e){for(this.masterCredentials=e||r.config.credentials;this.masterCredentials.masterCredentials;)this.masterCredentials=this.masterCredentials.masterCredentials;"function"!=typeof this.masterCredentials.get&&(this.masterCredentials=new r.Credentials(this.masterCredentials))},createClients:function(){this.service=this.service||new i({params:this.params})}})},{"../../clients/sts":9,"../core":19}],26:[function(e,t,n){var r=e("../core"),i=e("../../clients/sts");r.WebIdentityCredentials=r.util.inherit(r.Credentials,{constructor:function(e,t){r.Credentials.call(this),this.expired=!0,this.params=e,this.params.RoleSessionName=this.params.RoleSessionName||"web-identity",this.data=null,this._clientConfig=r.util.copy(t||{})},refresh:function(e){this.coalesceRefresh(e||r.util.fn.callback)},load:function(e){var t=this;t.createClients(),t.service.assumeRoleWithWebIdentity((function(n,r){t.data=null,n||(t.data=r,t.service.credentialsFrom(r,t)),e(n)}))},createClients:function(){if(!this.service){var e=r.util.merge({},this._clientConfig);e.params=this.params,this.service=new i(e)}}})},{"../../clients/sts":9,"../core":19}],27:[function(e,t,n){(function(n){var r=e("./core"),i=e("./util"),o=["AWS_ENABLE_ENDPOINT_DISCOVERY","AWS_ENDPOINT_DISCOVERY_ENABLED"];function s(e){var t=e.service,n=t.api||{},r=(n.operations,{});return t.config.region&&(r.region=t.config.region),n.serviceId&&(r.serviceId=n.serviceId),t.config.credentials.accessKeyId&&(r.accessKeyId=t.config.credentials.accessKeyId),r}function a(e,t){var n={};return function e(t,n,r){r&&null!=n&&"structure"===r.type&&r.required&&r.required.length>0&&i.arrayEach(r.required,(function(i){var o=r.members[i];if(!0===o.endpointDiscoveryId){var s=o.isLocationName?o.name:i;t[s]=String(n[i])}else e(t,n[i],o)}))}(n,e.params,t),n}function c(e){var t=e.service,n=t.api,o=n.operations?n.operations[e.operation]:void 0,c=a(e,o?o.input:void 0),u=s(e);Object.keys(c).length>0&&(u=i.update(u,c),o&&(u.operation=o.name));var l=r.endpointCache.get(u);if(!l||1!==l.length||""!==l[0].Address)if(l&&l.length>0)e.httpRequest.updateEndpoint(l[0].Address);else{var p=t.makeRequest(n.endpointOperation,{Operation:o.name,Identifiers:c});h(p),p.removeListener("validate",r.EventListeners.Core.VALIDATE_PARAMETERS),p.removeListener("retry",r.EventListeners.Core.RETRY_CHECK),r.endpointCache.put(u,[{Address:"",CachePeriodInMinutes:1}]),p.send((function(e,t){t&&t.Endpoints?r.endpointCache.put(u,t.Endpoints):e&&r.endpointCache.put(u,[{Address:"",CachePeriodInMinutes:1}])}))}}var u={};function l(e,t){var n=e.service,o=n.api,c=o.operations?o.operations[e.operation]:void 0,l=c?c.input:void 0,p=a(e,l),f=s(e);Object.keys(p).length>0&&(f=i.update(f,p),c&&(f.operation=c.name));var d=r.EndpointCache.getKeyString(f),g=r.endpointCache.get(d);if(g&&1===g.length&&""===g[0].Address)return u[d]||(u[d]=[]),void u[d].push({request:e,callback:t});if(g&&g.length>0)e.httpRequest.updateEndpoint(g[0].Address),t();else{var m=n.makeRequest(o.endpointOperation,{Operation:c.name,Identifiers:p});m.removeListener("validate",r.EventListeners.Core.VALIDATE_PARAMETERS),h(m),r.endpointCache.put(d,[{Address:"",CachePeriodInMinutes:60}]),m.send((function(n,o){if(n){var s={code:"EndpointDiscoveryException",message:"Request cannot be fulfilled without specifying an endpoint",retryable:!1};if(e.response.error=i.error(n,s),r.endpointCache.remove(f),u[d]){var a=u[d];i.arrayEach(a,(function(e){e.request.response.error=i.error(n,s),e.callback()})),delete u[d]}}else if(o&&(r.endpointCache.put(d,o.Endpoints),e.httpRequest.updateEndpoint(o.Endpoints[0].Address),u[d])){a=u[d];i.arrayEach(a,(function(e){e.request.httpRequest.updateEndpoint(o.Endpoints[0].Address),e.callback()})),delete u[d]}t()}))}}function h(e){var t=e.service.api.apiVersion;t&&!e.httpRequest.headers["x-amz-api-version"]&&(e.httpRequest.headers["x-amz-api-version"]=t)}function p(e){var t=e.error,n=e.httpResponse;if(t&&("InvalidEndpointException"===t.code||421===n.statusCode)){var o=e.request,c=o.service.api.operations||{},u=a(o,c[o.operation]?c[o.operation].input:void 0),l=s(o);Object.keys(u).length>0&&(l=i.update(l,u),c[o.operation]&&(l.operation=c[o.operation].name)),r.endpointCache.remove(l)}}function f(e){return["false","0"].indexOf(e)>=0}t.exports={discoverEndpoint:function(e,t){var s=e.service||{};if(function(e){if(e._originalConfig&&e._originalConfig.endpoint&&!0===e._originalConfig.endpointDiscoveryEnabled)throw i.error(new Error,{code:"ConfigurationException",message:"Custom endpoint is supplied; endpointDiscoveryEnabled must not be true."});var t=r.config[e.serviceIdentifier]||{};return Boolean(r.config.endpoint||t.endpoint||e._originalConfig&&e._originalConfig.endpoint)}(s)||e.isPresigned())return t();if(!function(e){if(!0===(e.service||{}).config.endpointDiscoveryEnabled)return!0;if(i.isBrowser())return!1;for(var t=0;t<o.length;t++){var s=o[t];if(Object.prototype.hasOwnProperty.call(n.env,s)){if(""===n.env[s]||void 0===n.env[s])throw i.error(new Error,{code:"ConfigurationException",message:"environmental variable "+s+" cannot be set to nothing"});if(!f(n.env[s]))return!0}}var a={};try{a=r.util.iniLoader?r.util.iniLoader.loadFrom({isConfig:!0,filename:n.env[r.util.sharedConfigFileEnv]}):{}}catch(e){}var c=a[n.env.AWS_PROFILE||r.util.defaultProfile]||{};if(Object.prototype.hasOwnProperty.call(c,"endpoint_discovery_enabled")){if(void 0===c.endpoint_discovery_enabled)throw i.error(new Error,{code:"ConfigurationException",message:"config file entry 'endpoint_discovery_enabled' cannot be set to nothing"});if(!f(c.endpoint_discovery_enabled))return!0}return!1}(e))return t();e.httpRequest.appendToUserAgent("endpoint-discovery");var a=(s.api.operations||{})[e.operation];switch(a?a.endpointDiscoveryRequired:"NULL"){case"OPTIONAL":c(e),e.addNamedListener("INVALIDATE_CACHED_ENDPOINTS","extractError",p),t();break;case"REQUIRED":e.addNamedListener("INVALIDATE_CACHED_ENDPOINTS","extractError",p),l(e,t);break;case"NULL":default:t()}},requiredDiscoverEndpoint:l,optionalDiscoverEndpoint:c,marshallCustomIdentifiers:a,getCacheKey:s,invalidateCachedEndpoint:p}}).call(this,e("_process"))},{"./core":19,"./util":72,_process:86}],28:[function(e,t,n){var r=e("../event-stream/event-message-chunker").eventMessageChunker,i=e("./parse-event").parseEvent;t.exports={createEventStream:function(e,t,n){for(var o=r(e),s=[],a=0;a<o.length;a++)s.push(i(t,o[a],n));return s}}},{"../event-stream/event-message-chunker":29,"./parse-event":31}],29:[function(e,t,n){t.exports={eventMessageChunker:function(e){for(var t=[],n=0;n<e.length;){var r=e.readInt32BE(n),i=e.slice(n,r+n);n+=r,t.push(i)}return t}}},{}],30:[function(e,t,n){var r=e("../core").util,i=r.buffer.toBuffer;function o(e){if(8!==e.length)throw new Error("Int64 buffers must be exactly 8 bytes");r.Buffer.isBuffer(e)||(e=i(e)),this.bytes=e}function s(e){for(var t=0;t<8;t++)e[t]^=255;for(t=7;t>-1&&(e[t]++,0===e[t]);t--);}o.fromNumber=function(e){if(e>0x8000000000000000||e<-0x8000000000000000)throw new Error(e+" is too large (or, if negative, too small) to represent as an Int64");for(var t=new Uint8Array(8),n=7,r=Math.abs(Math.round(e));n>-1&&r>0;n--,r/=256)t[n]=r;return e<0&&s(t),new o(t)},o.prototype.valueOf=function(){var e=this.bytes.slice(0),t=128&e[0];return t&&s(e),parseInt(e.toString("hex"),16)*(t?-1:1)},o.prototype.toString=function(){return String(this.valueOf())},t.exports={Int64:o}},{"../core":19}],31:[function(e,t,n){var r=e("./parse-message").parseMessage;t.exports={parseEvent:function(e,t,n){var i=r(t),o=i.headers[":message-type"];if(o){if("error"===o.value)throw function(e){var t=e.headers[":error-code"],n=e.headers[":error-message"],r=new Error(n.value||n);return r.code=r.name=t.value||t,r}(i);if("event"!==o.value)return}var s=i.headers[":event-type"],a=n.members[s.value];if(a){var c={},u=a.eventPayloadMemberName;if(u){var l=a.members[u];"binary"===l.type?c[u]=i.body:c[u]=e.parse(i.body.toString(),l)}for(var h=a.eventHeaderMemberNames,p=0;p<h.length;p++){var f=h[p];i.headers[f]&&(c[f]=a.members[f].toType(i.headers[f].value))}var d={};return d[s.value]=c,d}}}},{"./parse-message":32}],32:[function(e,t,n){var r=e("./int64").Int64,i=e("./split-message").splitMessage,o="boolean",s="byte",a="short",c="integer",u="long",l="binary",h="string",p="timestamp",f="uuid";function d(e){for(var t={},n=0;n<e.length;){var i=e.readUInt8(n++),d=e.slice(n,n+i).toString();switch(n+=i,e.readUInt8(n++)){case 0:t[d]={type:o,value:!0};break;case 1:t[d]={type:o,value:!1};break;case 2:t[d]={type:s,value:e.readInt8(n++)};break;case 3:t[d]={type:a,value:e.readInt16BE(n)},n+=2;break;case 4:t[d]={type:c,value:e.readInt32BE(n)},n+=4;break;case 5:t[d]={type:u,value:new r(e.slice(n,n+8))},n+=8;break;case 6:var g=e.readUInt16BE(n);n+=2,t[d]={type:l,value:e.slice(n,n+g)},n+=g;break;case 7:var m=e.readUInt16BE(n);n+=2,t[d]={type:h,value:e.slice(n,n+m).toString()},n+=m;break;case 8:t[d]={type:p,value:new Date(new r(e.slice(n,n+8)).valueOf())},n+=8;break;case 9:var v=e.slice(n,n+16).toString("hex");n+=16,t[d]={type:f,value:v.substr(0,8)+"-"+v.substr(8,4)+"-"+v.substr(12,4)+"-"+v.substr(16,4)+"-"+v.substr(20)};break;default:throw new Error("Unrecognized header type tag")}}return t}t.exports={parseMessage:function(e){var t=i(e);return{headers:d(t.headers),body:t.body}}}},{"./int64":30,"./split-message":33}],33:[function(e,t,n){var r=e("../core").util,i=r.buffer.toBuffer,o=4,s=2*o,a=4,c=s+2*a;t.exports={splitMessage:function(e){if(r.Buffer.isBuffer(e)||(e=i(e)),e.length<c)throw new Error("Provided message too short to accommodate event stream message overhead");if(e.length!==e.readUInt32BE(0))throw new Error("Reported message length does not match received message length");var t=e.readUInt32BE(s);if(t!==r.crypto.crc32(e.slice(0,s)))throw new Error("The prelude checksum specified in the message ("+t+") does not match the calculated CRC32 checksum.");var n=e.readUInt32BE(e.length-a);if(n!==r.crypto.crc32(e.slice(0,e.length-a)))throw new Error("The message checksum did not match the expected value of "+n);var u=s+a,l=u+e.readUInt32BE(o);return{headers:e.slice(u,l),body:e.slice(l,e.length-a)}}}},{"../core":19}],34:[function(e,t,n){var r=e("./core"),i=e("./sequential_executor"),o=e("./discover_endpoint").discoverEndpoint;r.EventListeners={Core:{}},r.EventListeners={Core:(new i).addNamedListeners((function(e,t){t("VALIDATE_CREDENTIALS","validate",(function(e,t){if(!e.service.api.signatureVersion&&!e.service.config.signatureVersion)return t();e.service.config.getCredentials((function(n){n&&(e.response.error=r.util.error(n,{code:"CredentialsError",message:"Missing credentials in config"})),t()}))})),e("VALIDATE_REGION","validate",(function(e){e.service.config.region||e.service.isGlobalEndpoint||(e.response.error=r.util.error(new Error,{code:"ConfigError",message:"Missing region in config"}))})),e("BUILD_IDEMPOTENCY_TOKENS","validate",(function(e){if(e.service.api.operations){var t=e.service.api.operations[e.operation];if(t){var n=t.idempotentMembers;if(n.length){for(var i=r.util.copy(e.params),o=0,s=n.length;o<s;o++)i[n[o]]||(i[n[o]]=r.util.uuid.v4());e.params=i}}}})),e("VALIDATE_PARAMETERS","validate",(function(e){if(e.service.api.operations){var t=e.service.api.operations[e.operation].input,n=e.service.config.paramValidation;new r.ParamValidator(n).validate(t,e.params)}})),t("COMPUTE_SHA256","afterBuild",(function(e,t){if(e.haltHandlersOnError(),e.service.api.operations){var n=e.service.api.operations[e.operation],i=n?n.authtype:"";if(!e.service.api.signatureVersion&&!i&&!e.service.config.signatureVersion)return t();if(e.service.getSignerClass(e)===r.Signers.V4){var o=e.httpRequest.body||"";if(i.indexOf("unsigned-body")>=0)return e.httpRequest.headers["X-Amz-Content-Sha256"]="UNSIGNED-PAYLOAD",t();r.util.computeSha256(o,(function(n,r){n?t(n):(e.httpRequest.headers["X-Amz-Content-Sha256"]=r,t())}))}else t()}})),e("SET_CONTENT_LENGTH","afterBuild",(function(e){var t=function(e){if(!e.service.api.operations)return"";var t=e.service.api.operations[e.operation];return t?t.authtype:""}(e),n=r.util.getRequestPayloadShape(e);if(void 0===e.httpRequest.headers["Content-Length"])try{var i=r.util.string.byteLength(e.httpRequest.body);e.httpRequest.headers["Content-Length"]=i}catch(r){if(n&&n.isStreaming){if(n.requiresLength)throw r;if(t.indexOf("unsigned-body")>=0)return void(e.httpRequest.headers["Transfer-Encoding"]="chunked");throw r}throw r}})),e("SET_HTTP_HOST","afterBuild",(function(e){e.httpRequest.headers.Host=e.httpRequest.endpoint.host})),e("RESTART","restart",(function(){var e=this.response.error;e&&e.retryable&&(this.httpRequest=new r.HttpRequest(this.service.endpoint,this.service.region),this.response.retryCount<this.service.config.maxRetries?this.response.retryCount++:this.response.error=null)}));t("DISCOVER_ENDPOINT","sign",o,!0),t("SIGN","sign",(function(e,t){var n=e.service,r=(e.service.api.operations||{})[e.operation],i=r?r.authtype:"";if(!n.api.signatureVersion&&!i&&!n.config.signatureVersion)return t();n.config.getCredentials((function(i,o){if(i)return e.response.error=i,t();try{var s=n.getSkewCorrectedDate(),a=new(n.getSignerClass(e))(e.httpRequest,n.api.signingName||n.api.endpointPrefix,{signatureCache:n.config.signatureCache,operation:r,signatureVersion:n.api.signatureVersion});a.setServiceClientId(n._clientId),delete e.httpRequest.headers.Authorization,delete e.httpRequest.headers.Date,delete e.httpRequest.headers["X-Amz-Date"],a.addAuthorization(o,s),e.signedAt=s}catch(t){e.response.error=t}t()}))})),e("VALIDATE_RESPONSE","validateResponse",(function(e){this.service.successfulResponse(e,this)?(e.data={},e.error=null):(e.data=null,e.error=r.util.error(new Error,{code:"UnknownError",message:"An unknown error occurred."}))})),t("SEND","send",(function(e,t){function n(n){e.httpResponse.stream=n;var i=e.request.httpRequest.stream,o=e.request.service,s=o.api,a=e.request.operation,c=s.operations[a]||{};n.on("headers",(function(i,s,a){if(e.request.emit("httpHeaders",[i,s,e,a]),!e.httpResponse.streaming)if(2===r.HttpClient.streamsApiVersion){if(c.hasEventOutput&&o.successfulResponse(e))return e.request.emit("httpDone"),void t();n.on("readable",(function(){var t=n.read();null!==t&&e.request.emit("httpData",[t,e])}))}else n.on("data",(function(t){e.request.emit("httpData",[t,e])}))})),n.on("end",(function(){if(!i||!i.didCallback){if(2===r.HttpClient.streamsApiVersion&&c.hasEventOutput&&o.successfulResponse(e))return;e.request.emit("httpDone"),t()}}))}function i(n){if("RequestAbortedError"!==n.code){var i="TimeoutError"===n.code?n.code:"NetworkingError";n=r.util.error(n,{code:i,region:e.request.httpRequest.region,hostname:e.request.httpRequest.endpoint.hostname,retryable:!0})}e.error=n,e.request.emit("httpError",[e.error,e],(function(){t()}))}function o(){var t,o=r.HttpClient.getInstance(),s=e.request.service.config.httpOptions||{};try{var a=o.handleRequest(e.request.httpRequest,s,n,i);(t=a).on("sendProgress",(function(t){e.request.emit("httpUploadProgress",[t,e])})),t.on("receiveProgress",(function(t){e.request.emit("httpDownloadProgress",[t,e])}))}catch(e){i(e)}}e.httpResponse._abortCallback=t,e.error=null,e.data=null,(e.request.service.getSkewCorrectedDate()-this.signedAt)/1e3>=600?this.emit("sign",[this],(function(e){e?t(e):o()})):o()})),e("HTTP_HEADERS","httpHeaders",(function(e,t,n,i){n.httpResponse.statusCode=e,n.httpResponse.statusMessage=i,n.httpResponse.headers=t,n.httpResponse.body=r.util.buffer.toBuffer(""),n.httpResponse.buffers=[],n.httpResponse.numBytes=0;var o=t.date||t.Date,s=n.request.service;if(o){var a=Date.parse(o);s.config.correctClockSkew&&s.isClockSkewed(a)&&s.applyClockOffset(a)}})),e("HTTP_DATA","httpData",(function(e,t){if(e){if(r.util.isNode()){t.httpResponse.numBytes+=e.length;var n=t.httpResponse.headers["content-length"],i={loaded:t.httpResponse.numBytes,total:n};t.request.emit("httpDownloadProgress",[i,t])}t.httpResponse.buffers.push(r.util.buffer.toBuffer(e))}})),e("HTTP_DONE","httpDone",(function(e){if(e.httpResponse.buffers&&e.httpResponse.buffers.length>0){var t=r.util.buffer.concat(e.httpResponse.buffers);e.httpResponse.body=t}delete e.httpResponse.numBytes,delete e.httpResponse.buffers})),e("FINALIZE_ERROR","retry",(function(e){e.httpResponse.statusCode&&(e.error.statusCode=e.httpResponse.statusCode,void 0===e.error.retryable&&(e.error.retryable=this.service.retryableError(e.error,this)))})),e("INVALIDATE_CREDENTIALS","retry",(function(e){if(e.error)switch(e.error.code){case"RequestExpired":case"ExpiredTokenException":case"ExpiredToken":e.error.retryable=!0,e.request.service.config.credentials.expired=!0}})),e("EXPIRED_SIGNATURE","retry",(function(e){var t=e.error;t&&"string"==typeof t.code&&"string"==typeof t.message&&t.code.match(/Signature/)&&t.message.match(/expired/)&&(e.error.retryable=!0)})),e("CLOCK_SKEWED","retry",(function(e){e.error&&this.service.clockSkewError(e.error)&&this.service.config.correctClockSkew&&(e.error.retryable=!0)})),e("REDIRECT","retry",(function(e){e.error&&e.error.statusCode>=300&&e.error.statusCode<400&&e.httpResponse.headers.location&&(this.httpRequest.endpoint=new r.Endpoint(e.httpResponse.headers.location),this.httpRequest.headers.Host=this.httpRequest.endpoint.host,e.error.redirect=!0,e.error.retryable=!0)})),e("RETRY_CHECK","retry",(function(e){e.error&&(e.error.redirect&&e.redirectCount<e.maxRedirects?e.error.retryDelay=0:e.retryCount<e.maxRetries&&(e.error.retryDelay=this.service.retryDelays(e.retryCount)||0))})),t("RESET_RETRY_STATE","afterRetry",(function(e,t){var n,r=!1;e.error&&(n=e.error.retryDelay||0,e.error.retryable&&e.retryCount<e.maxRetries?(e.retryCount++,r=!0):e.error.redirect&&e.redirectCount<e.maxRedirects&&(e.redirectCount++,r=!0)),r?(e.error=null,setTimeout(t,n)):t()}))})),CorePost:(new i).addNamedListeners((function(e){e("EXTRACT_REQUEST_ID","extractData",r.util.extractRequestId),e("EXTRACT_REQUEST_ID","extractError",r.util.extractRequestId),e("ENOTFOUND_ERROR","httpError",(function(e){if("NetworkingError"===e.code&&"ENOTFOUND"===e.errno){var t="Inaccessible host: `"+e.hostname+"'. This service may not be available in the `"+e.region+"' region.";this.response.error=r.util.error(new Error(t),{code:"UnknownEndpoint",region:e.region,hostname:e.hostname,retryable:!0,originalError:e})}}))})),Logger:(new i).addNamedListeners((function(t){t("LOG_REQUEST","complete",(function(t){var n=t.request,i=n.service.config.logger;if(i){var o=function(){var o=(t.request.service.getSkewCorrectedDate().getTime()-n.startTime.getTime())/1e3,s=!!i.isTTY,a=t.httpResponse.statusCode,c=n.params;n.service.api.operations&&n.service.api.operations[n.operation]&&n.service.api.operations[n.operation].input&&(c=function e(t,n){if(!n)return n;switch(t.type){case"structure":var i={};return r.util.each(n,(function(n,r){Object.prototype.hasOwnProperty.call(t.members,n)?i[n]=e(t.members[n],r):i[n]=r})),i;case"list":var o=[];return r.util.arrayEach(n,(function(n,r){o.push(e(t.member,n))})),o;case"map":var s={};return r.util.each(n,(function(n,r){s[n]=e(t.value,r)})),s;default:return t.isSensitive?"***SensitiveInformation***":n}}(n.service.api.operations[n.operation].input,n.params));var u=e("util").inspect(c,!0,null),l="";return s&&(l+="[33m"),l+="[AWS "+n.service.serviceIdentifier+" "+a,l+=" "+o.toString()+"s "+t.retryCount+" retries]",s&&(l+="[0;1m"),l+=" "+r.util.string.lowerFirst(n.operation),l+="("+u+")",s&&(l+="[0m"),l}();"function"==typeof i.log?i.log(o):"function"==typeof i.write&&i.write(o+"\n")}}))})),Json:(new i).addNamedListeners((function(t){var n=e("./protocol/json");t("BUILD","build",n.buildRequest),t("EXTRACT_DATA","extractData",n.extractData),t("EXTRACT_ERROR","extractError",n.extractError)})),Rest:(new i).addNamedListeners((function(t){var n=e("./protocol/rest");t("BUILD","build",n.buildRequest),t("EXTRACT_DATA","extractData",n.extractData),t("EXTRACT_ERROR","extractError",n.extractError)})),RestJson:(new i).addNamedListeners((function(t){var n=e("./protocol/rest_json");t("BUILD","build",n.buildRequest),t("EXTRACT_DATA","extractData",n.extractData),t("EXTRACT_ERROR","extractError",n.extractError)})),RestXml:(new i).addNamedListeners((function(t){var n=e("./protocol/rest_xml");t("BUILD","build",n.buildRequest),t("EXTRACT_DATA","extractData",n.extractData),t("EXTRACT_ERROR","extractError",n.extractError)})),Query:(new i).addNamedListeners((function(t){var n=e("./protocol/query");t("BUILD","build",n.buildRequest),t("EXTRACT_DATA","extractData",n.extractData),t("EXTRACT_ERROR","extractError",n.extractError)}))}},{"./core":19,"./discover_endpoint":27,"./protocol/json":47,"./protocol/query":48,"./protocol/rest":49,"./protocol/rest_json":50,"./protocol/rest_xml":51,"./sequential_executor":59,util:98}],35:[function(e,t,n){var r=e("./core"),i=r.util.inherit;r.Endpoint=i({constructor:function(e,t){if(r.util.hideProperties(this,["slashes","auth","hash","search","query"]),null==e)throw new Error("Invalid endpoint: "+e);if("string"!=typeof e)return r.util.copy(e);e.match(/^http/)||(e=((t&&void 0!==t.sslEnabled?t.sslEnabled:r.config.sslEnabled)?"https":"http")+"://"+e);r.util.update(this,r.util.urlParse(e)),this.port?this.port=parseInt(this.port,10):this.port="https:"===this.protocol?443:80}}),r.HttpRequest=i({constructor:function(e,t){e=new r.Endpoint(e),this.method="POST",this.path=e.path||"/",this.headers={},this.body="",this.endpoint=e,this.region=t,this._userAgent="",this.setUserAgent()},setUserAgent:function(){this._userAgent=this.headers[this.getUserAgentHeaderName()]=r.util.userAgent()},getUserAgentHeaderName:function(){return(r.util.isBrowser()?"X-Amz-":"")+"User-Agent"},appendToUserAgent:function(e){"string"==typeof e&&e&&(this._userAgent+=" "+e),this.headers[this.getUserAgentHeaderName()]=this._userAgent},getUserAgent:function(){return this._userAgent},pathname:function(){return this.path.split("?",1)[0]},search:function(){var e=this.path.split("?",2)[1];return e?(e=r.util.queryStringParse(e),r.util.queryParamsToString(e)):""},updateEndpoint:function(e){var t=new r.Endpoint(e);this.endpoint=t,this.path=t.path||"/"}}),r.HttpResponse=i({constructor:function(){this.statusCode=void 0,this.headers={},this.body=void 0,this.streaming=!1,this.stream=null},createUnbufferedStream:function(){return this.streaming=!0,this.stream}}),r.HttpClient=i({}),r.HttpClient.getInstance=function(){return void 0===this.singleton&&(this.singleton=new this),this.singleton}},{"./core":19}],36:[function(e,t,n){var r=e("../core"),o=e("events").EventEmitter;e("../http"),r.XHRClient=r.util.inherit({handleRequest:function(e,t,n,s){var a=this,c=e.endpoint,u=new o,l=c.protocol+"//"+c.hostname;80!==c.port&&443!==c.port&&(l+=":"+c.port),l+=e.path;var h=new XMLHttpRequest,p=!1;e.stream=h,h.addEventListener("readystatechange",(function(){try{if(0===h.status)return}catch(e){return}this.readyState>=this.HEADERS_RECEIVED&&!p&&(u.statusCode=h.status,u.headers=a.parseHeaders(h.getAllResponseHeaders()),u.emit("headers",u.statusCode,u.headers,h.statusText),p=!0),this.readyState===this.DONE&&a.finishRequest(h,u)}),!1),h.upload.addEventListener("progress",(function(e){u.emit("sendProgress",e)})),h.addEventListener("progress",(function(e){u.emit("receiveProgress",e)}),!1),h.addEventListener("timeout",(function(){s(r.util.error(new Error("Timeout"),{code:"TimeoutError"}))}),!1),h.addEventListener("error",(function(){s(r.util.error(new Error("Network Failure"),{code:"NetworkingError"}))}),!1),h.addEventListener("abort",(function(){s(r.util.error(new Error("Request aborted"),{code:"RequestAbortedError"}))}),!1),n(u),h.open(e.method,l,!1!==t.xhrAsync),r.util.each(e.headers,(function(e,t){"Content-Length"!==e&&"User-Agent"!==e&&"Host"!==e&&h.setRequestHeader(e,t)})),t.timeout&&!1!==t.xhrAsync&&(h.timeout=t.timeout),t.xhrWithCredentials&&(h.withCredentials=!0);try{h.responseType="arraybuffer"}catch(e){}try{e.body?h.send(e.body):h.send()}catch(t){if(!e.body||"object"!==i(e.body.buffer))throw t;h.send(e.body.buffer)}return u},parseHeaders:function(e){var t={};return r.util.arrayEach(e.split(/\r?\n/),(function(e){var n=e.split(":",1)[0],r=e.substring(n.length+2);n.length>0&&(t[n.toLowerCase()]=r)})),t},finishRequest:function(e,t){var n;if("arraybuffer"===e.responseType&&e.response){var i=e.response;n=new r.util.Buffer(i.byteLength);for(var o=new Uint8Array(i),s=0;s<n.length;++s)n[s]=o[s]}try{n||"string"!=typeof e.responseText||(n=new r.util.Buffer(e.responseText))}catch(e){}n&&t.emit("data",n),t.emit("end")}}),r.HttpClient.prototype=r.XHRClient.prototype,r.HttpClient.streamsApiVersion=1},{"../core":19,"../http":35,events:82}],37:[function(e,t,n){var r=e("../util");function i(){}function o(e,t){if(t&&null!=e)switch(t.type){case"structure":return function(e,t){var n={};return r.each(e,(function(e,r){var i=t.members[e];if(i){if("body"!==i.location)return;var s=i.isLocationName?i.name:e,a=o(r,i);void 0!==a&&(n[s]=a)}})),n}(e,t);case"map":return function(e,t){var n={};return r.each(e,(function(e,r){var i=o(r,t.value);void 0!==i&&(n[e]=i)})),n}(e,t);case"list":return function(e,t){var n=[];return r.arrayEach(e,(function(e){var r=o(e,t.member);void 0!==r&&n.push(r)})),n}(e,t);default:return function(e,t){return t.toWireFormat(e)}(e,t)}}i.prototype.build=function(e,t){return JSON.stringify(o(e,t))},t.exports=i},{"../util":72}],38:[function(e,t,n){var r=e("../util");function i(){}function o(e,t){if(t&&void 0!==e)switch(t.type){case"structure":return function(e,t){if(null==e)return;var n={},i=t.members;return r.each(i,(function(t,r){var i=r.isLocationName?r.name:t;if(Object.prototype.hasOwnProperty.call(e,i)){var s=o(e[i],r);void 0!==s&&(n[t]=s)}})),n}(e,t);case"map":return function(e,t){if(null==e)return;var n={};return r.each(e,(function(e,r){var i=o(r,t.value);n[e]=void 0===i?null:i})),n}(e,t);case"list":return function(e,t){if(null==e)return;var n=[];return r.arrayEach(e,(function(e){var r=o(e,t.member);void 0===r?n.push(null):n.push(r)})),n}(e,t);default:return function(e,t){return t.toType(e)}(e,t)}}i.prototype.parse=function(e,t){return o(JSON.parse(e),t)},t.exports=i},{"../util":72}],39:[function(e,t,n){var r=e("./collection"),i=e("./operation"),o=e("./shape"),s=e("./paginator"),a=e("./resource_waiter"),c=e("../util"),u=c.property,l=c.memoizedProperty;t.exports=function(e,t){var n=this;e=e||{},(t=t||{}).api=this,e.metadata=e.metadata||{},u(this,"isApi",!0,!1),u(this,"apiVersion",e.metadata.apiVersion),u(this,"endpointPrefix",e.metadata.endpointPrefix),u(this,"signingName",e.metadata.signingName),u(this,"globalEndpoint",e.metadata.globalEndpoint),u(this,"signatureVersion",e.metadata.signatureVersion),u(this,"jsonVersion",e.metadata.jsonVersion),u(this,"targetPrefix",e.metadata.targetPrefix),u(this,"protocol",e.metadata.protocol),u(this,"timestampFormat",e.metadata.timestampFormat),u(this,"xmlNamespaceUri",e.metadata.xmlNamespace),u(this,"abbreviation",e.metadata.serviceAbbreviation),u(this,"fullName",e.metadata.serviceFullName),u(this,"serviceId",e.metadata.serviceId),l(this,"className",(function(){var t=e.metadata.serviceAbbreviation||e.metadata.serviceFullName;return t?("ElasticLoadBalancing"===(t=t.replace(/^Amazon|AWS\s*|\(.*|\s+|\W+/g,""))&&(t="ELB"),t):null})),u(this,"operations",new r(e.operations,t,(function(e,n){return new i(e,n,t)}),c.string.lowerFirst,(function(e,t){!0===t.endpointoperation&&u(n,"endpointOperation",c.string.lowerFirst(e))}))),u(this,"shapes",new r(e.shapes,t,(function(e,n){return o.create(n,t)}))),u(this,"paginators",new r(e.paginators,t,(function(e,n){return new s(e,n,t)}))),u(this,"waiters",new r(e.waiters,t,(function(e,n){return new a(e,n,t)}),c.string.lowerFirst)),t.documentation&&(u(this,"documentation",e.documentation),u(this,"documentationUrl",e.documentationUrl))}},{"../util":72,"./collection":40,"./operation":41,"./paginator":42,"./resource_waiter":43,"./shape":44}],40:[function(e,t,n){var r=e("../util").memoizedProperty;function i(e,t,n,i){r(this,i(e),(function(){return n(e,t)}))}t.exports=function(e,t,n,r,o){for(var s in r=r||String,e)Object.prototype.hasOwnProperty.call(e,s)&&(i.call(this,s,e[s],n,r),o&&o(s,e[s]))}},{"../util":72}],41:[function(e,t,n){var r=e("./shape"),i=e("../util"),o=i.property,s=i.memoizedProperty;t.exports=function(e,t,n){var i=this;n=n||{},o(this,"name",t.name||e),o(this,"api",n.api,!1),t.http=t.http||{},o(this,"endpoint",t.endpoint),o(this,"httpMethod",t.http.method||"POST"),o(this,"httpPath",t.http.requestUri||"/"),o(this,"authtype",t.authtype||""),o(this,"endpointDiscoveryRequired",t.endpointdiscovery?t.endpointdiscovery.required?"REQUIRED":"OPTIONAL":"NULL"),s(this,"input",(function(){return t.input?r.create(t.input,n):new r.create({type:"structure"},n)})),s(this,"output",(function(){return t.output?r.create(t.output,n):new r.create({type:"structure"},n)})),s(this,"errors",(function(){var e=[];if(!t.errors)return null;for(var i=0;i<t.errors.length;i++)e.push(r.create(t.errors[i],n));return e})),s(this,"paginator",(function(){return n.api.paginators[e]})),n.documentation&&(o(this,"documentation",t.documentation),o(this,"documentationUrl",t.documentationUrl)),s(this,"idempotentMembers",(function(){var e=[],t=i.input,n=t.members;if(!t.members)return e;for(var r in n)n.hasOwnProperty(r)&&!0===n[r].isIdempotent&&e.push(r);return e})),s(this,"hasEventOutput",(function(){return function(e){var t=e.members,n=e.payload;if(!e.members)return!1;if(n){return t[n].isEventStream}for(var r in t)if(!t.hasOwnProperty(r)&&!0===t[r].isEventStream)return!0;return!1}(i.output)}))}},{"../util":72,"./shape":44}],42:[function(e,t,n){var r=e("../util").property;t.exports=function(e,t){r(this,"inputToken",t.input_token),r(this,"limitKey",t.limit_key),r(this,"moreResults",t.more_results),r(this,"outputToken",t.output_token),r(this,"resultKey",t.result_key)}},{"../util":72}],43:[function(e,t,n){var r=e("../util"),i=r.property;t.exports=function(e,t,n){n=n||{},i(this,"name",e),i(this,"api",n.api,!1),t.operation&&i(this,"operation",r.string.lowerFirst(t.operation));var o=this;["type","description","delay","maxAttempts","acceptors"].forEach((function(e){var n=t[e];n&&i(o,e,n)}))}},{"../util":72}],44:[function(e,t,n){var r=e("./collection"),o=e("../util");function s(e,t,n){null!=n&&o.property.apply(this,arguments)}function a(e,t){e.constructor.prototype[t]||o.memoizedProperty.apply(this,arguments)}function c(e,t,n){t=t||{},s(this,"shape",e.shape),s(this,"api",t.api,!1),s(this,"type",e.type),s(this,"enum",e.enum),s(this,"min",e.min),s(this,"max",e.max),s(this,"pattern",e.pattern),s(this,"location",e.location||this.location||"body"),s(this,"name",this.name||e.xmlName||e.queryName||e.locationName||n),s(this,"isStreaming",e.streaming||this.isStreaming||!1),s(this,"requiresLength",e.requiresLength,!1),s(this,"isComposite",e.isComposite||!1),s(this,"isShape",!0,!1),s(this,"isQueryName",Boolean(e.queryName),!1),s(this,"isLocationName",Boolean(e.locationName),!1),s(this,"isIdempotent",!0===e.idempotencyToken),s(this,"isJsonValue",!0===e.jsonvalue),s(this,"isSensitive",!0===e.sensitive||e.prototype&&!0===e.prototype.sensitive),s(this,"isEventStream",Boolean(e.eventstream),!1),s(this,"isEvent",Boolean(e.event),!1),s(this,"isEventPayload",Boolean(e.eventpayload),!1),s(this,"isEventHeader",Boolean(e.eventheader),!1),s(this,"isTimestampFormatSet",Boolean(e.timestampFormat)||e.prototype&&!0===e.prototype.isTimestampFormatSet,!1),s(this,"endpointDiscoveryId",Boolean(e.endpointdiscoveryid),!1),s(this,"hostLabel",Boolean(e.hostLabel),!1),t.documentation&&(s(this,"documentation",e.documentation),s(this,"documentationUrl",e.documentationUrl)),e.xmlAttribute&&s(this,"isXmlAttribute",e.xmlAttribute||!1),s(this,"defaultValue",null),this.toWireFormat=function(e){return null==e?"":e},this.toType=function(e){return e}}function u(e){c.apply(this,arguments),s(this,"isComposite",!0),e.flattened&&s(this,"flattened",e.flattened||!1)}function l(e,t){var n=this,o=null,l=!this.isShape;u.apply(this,arguments),l&&(s(this,"defaultValue",(function(){return{}})),s(this,"members",{}),s(this,"memberNames",[]),s(this,"required",[]),s(this,"isRequired",(function(){return!1}))),e.members&&(s(this,"members",new r(e.members,t,(function(e,n){return c.create(n,t,e)}))),a(this,"memberNames",(function(){return e.xmlOrder||Object.keys(e.members)})),e.event&&(a(this,"eventPayloadMemberName",(function(){for(var e=n.members,t=n.memberNames,r=0,i=t.length;r<i;r++)if(e[t[r]].isEventPayload)return t[r]})),a(this,"eventHeaderMemberNames",(function(){for(var e=n.members,t=n.memberNames,r=[],i=0,o=t.length;i<o;i++)e[t[i]].isEventHeader&&r.push(t[i]);return r})))),e.required&&(s(this,"required",e.required),s(this,"isRequired",(function(t){if(!o){o={};for(var n=0;n<e.required.length;n++)o[e.required[n]]=!0}return o[t]}),!1,!0)),s(this,"resultWrapper",e.resultWrapper||null),e.payload&&s(this,"payload",e.payload),"string"==typeof e.xmlNamespace?s(this,"xmlNamespaceUri",e.xmlNamespace):"object"===i(e.xmlNamespace)&&(s(this,"xmlNamespacePrefix",e.xmlNamespace.prefix),s(this,"xmlNamespaceUri",e.xmlNamespace.uri))}function h(e,t){var n=this,r=!this.isShape;if(u.apply(this,arguments),r&&s(this,"defaultValue",(function(){return[]})),e.member&&a(this,"member",(function(){return c.create(e.member,t)})),this.flattened){var i=this.name;a(this,"name",(function(){return n.member.name||i}))}}function p(e,t){var n=!this.isShape;u.apply(this,arguments),n&&(s(this,"defaultValue",(function(){return{}})),s(this,"key",c.create({type:"string"},t)),s(this,"value",c.create({type:"string"},t))),e.key&&a(this,"key",(function(){return c.create(e.key,t)})),e.value&&a(this,"value",(function(){return c.create(e.value,t)}))}function f(){c.apply(this,arguments);var e=["rest-xml","query","ec2"];this.toType=function(t){return t=this.api&&e.indexOf(this.api.protocol)>-1?t||"":t,this.isJsonValue?JSON.parse(t):t&&"function"==typeof t.toString?t.toString():t},this.toWireFormat=function(e){return this.isJsonValue?JSON.stringify(e):e}}function d(){c.apply(this,arguments),this.toType=function(e){var t=o.base64.decode(e);if(this.isSensitive&&o.isNode()&&"function"==typeof o.Buffer.alloc){var n=o.Buffer.alloc(t.length,t);t.fill(0),t=n}return t},this.toWireFormat=o.base64.encode}function g(){d.apply(this,arguments)}function m(){c.apply(this,arguments),this.toType=function(e){return"boolean"==typeof e?e:null==e?null:"true"===e}}c.normalizedTypes={character:"string",double:"float",long:"integer",short:"integer",biginteger:"integer",bigdecimal:"float",blob:"binary"},c.types={structure:l,list:h,map:p,boolean:m,timestamp:function(e){var t=this;if(c.apply(this,arguments),e.timestampFormat)s(this,"timestampFormat",e.timestampFormat);else if(t.isTimestampFormatSet&&this.timestampFormat)s(this,"timestampFormat",this.timestampFormat);else if("header"===this.location)s(this,"timestampFormat","rfc822");else if("querystring"===this.location)s(this,"timestampFormat","iso8601");else if(this.api)switch(this.api.protocol){case"json":case"rest-json":s(this,"timestampFormat","unixTimestamp");break;case"rest-xml":case"query":case"ec2":s(this,"timestampFormat","iso8601")}this.toType=function(e){return null==e?null:"function"==typeof e.toUTCString?e:"string"==typeof e||"number"==typeof e?o.date.parseTimestamp(e):null},this.toWireFormat=function(e){return o.date.format(e,t.timestampFormat)}},float:function(){c.apply(this,arguments),this.toType=function(e){return null==e?null:parseFloat(e)},this.toWireFormat=this.toType},integer:function(){c.apply(this,arguments),this.toType=function(e){return null==e?null:parseInt(e,10)},this.toWireFormat=this.toType},string:f,base64:g,binary:d},c.resolve=function(e,t){if(e.shape){var n=t.api.shapes[e.shape];if(!n)throw new Error("Cannot find shape reference: "+e.shape);return n}return null},c.create=function(e,t,n){if(e.isShape)return e;var r=c.resolve(e,t);if(r){var i=Object.keys(e);t.documentation||(i=i.filter((function(e){return!e.match(/documentation/)})));var o=function(){r.constructor.call(this,e,t,n)};return o.prototype=r,new o}e.type||(e.members?e.type="structure":e.member?e.type="list":e.key?e.type="map":e.type="string");var s=e.type;if(c.normalizedTypes[e.type]&&(e.type=c.normalizedTypes[e.type]),c.types[e.type])return new c.types[e.type](e,t,n);throw new Error("Unrecognized shape type: "+s)},c.shapes={StructureShape:l,ListShape:h,MapShape:p,StringShape:f,BooleanShape:m,Base64Shape:g},t.exports=c},{"../util":72,"./collection":40}],45:[function(e,t,n){var r=e("./core");r.ParamValidator=r.util.inherit({constructor:function(e){!0!==e&&void 0!==e||(e={min:!0}),this.validation=e},validate:function(e,t,n){if(this.errors=[],this.validateMember(e,t||{},n||"params"),this.errors.length>1){var i=this.errors.join("\n* ");throw i="There were "+this.errors.length+" validation errors:\n* "+i,r.util.error(new Error(i),{code:"MultipleValidationErrors",errors:this.errors})}if(1===this.errors.length)throw this.errors[0];return!0},fail:function(e,t){this.errors.push(r.util.error(new Error(t),{code:e}))},validateStructure:function(e,t,n){var r;this.validateType(t,n,["object"],"structure");for(var i=0;e.required&&i<e.required.length;i++){var o=t[r=e.required[i]];null==o&&this.fail("MissingRequiredParameter","Missing required key '"+r+"' in "+n)}for(r in t)if(Object.prototype.hasOwnProperty.call(t,r)){var s=t[r],a=e.members[r];if(void 0!==a){var c=[n,r].join(".");this.validateMember(a,s,c)}else this.fail("UnexpectedParameter","Unexpected key '"+r+"' found in "+n)}return!0},validateMember:function(e,t,n){switch(e.type){case"structure":return this.validateStructure(e,t,n);case"list":return this.validateList(e,t,n);case"map":return this.validateMap(e,t,n);default:return this.validateScalar(e,t,n)}},validateList:function(e,t,n){if(this.validateType(t,n,[Array])){this.validateRange(e,t.length,n,"list member count");for(var r=0;r<t.length;r++)this.validateMember(e.member,t[r],n+"["+r+"]")}},validateMap:function(e,t,n){if(this.validateType(t,n,["object"],"map")){var r=0;for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(this.validateMember(e.key,i,n+"[key='"+i+"']"),this.validateMember(e.value,t[i],n+"['"+i+"']"),r++);this.validateRange(e,r,n,"map member count")}},validateScalar:function(e,t,n){switch(e.type){case null:case void 0:case"string":return this.validateString(e,t,n);case"base64":case"binary":return this.validatePayload(t,n);case"integer":case"float":return this.validateNumber(e,t,n);case"boolean":return this.validateType(t,n,["boolean"]);case"timestamp":return this.validateType(t,n,[Date,/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/,"number"],"Date object, ISO-8601 string, or a UNIX timestamp");default:return this.fail("UnkownType","Unhandled type "+e.type+" for "+n)}},validateString:function(e,t,n){var r=["string"];e.isJsonValue&&(r=r.concat(["number","object","boolean"])),null!==t&&this.validateType(t,n,r)&&(this.validateEnum(e,t,n),this.validateRange(e,t.length,n,"string length"),this.validatePattern(e,t,n),this.validateUri(e,t,n))},validateUri:function(e,t,n){"uri"===e.location&&0===t.length&&this.fail("UriParameterError",'Expected uri parameter to have length >= 1, but found "'+t+'" for '+n)},validatePattern:function(e,t,n){this.validation.pattern&&void 0!==e.pattern&&(new RegExp(e.pattern).test(t)||this.fail("PatternMatchError",'Provided value "'+t+'" does not match regex pattern /'+e.pattern+"/ for "+n))},validateRange:function(e,t,n,r){this.validation.min&&void 0!==e.min&&t<e.min&&this.fail("MinRangeError","Expected "+r+" >= "+e.min+", but found "+t+" for "+n),this.validation.max&&void 0!==e.max&&t>e.max&&this.fail("MaxRangeError","Expected "+r+" <= "+e.max+", but found "+t+" for "+n)},validateEnum:function(e,t,n){this.validation.enum&&void 0!==e.enum&&-1===e.enum.indexOf(t)&&this.fail("EnumError","Found string value of "+t+", but expected "+e.enum.join("|")+" for "+n)},validateType:function(e,t,n,o){if(null==e)return!1;for(var s=!1,a=0;a<n.length;a++){if("string"==typeof n[a]){if(i(e)===n[a])return!0}else if(n[a]instanceof RegExp){if((e||"").toString().match(n[a]))return!0}else{if(e instanceof n[a])return!0;if(r.util.isType(e,n[a]))return!0;o||s||(n=n.slice()),n[a]=r.util.typeName(n[a])}s=!0}var c=o;c||(c=n.join(", ").replace(/,([^,]+)$/,", or$1"));var u=c.match(/^[aeiou]/i)?"n":"";return this.fail("InvalidParameterType","Expected "+t+" to be a"+u+" "+c),!1},validateNumber:function(e,t,n){if(null!=t){if("string"==typeof t){var r=parseFloat(t);r.toString()===t&&(t=r)}this.validateType(t,n,["number"])&&this.validateRange(e,t,n,"numeric value")}},validatePayload:function(e,t){if(null!=e&&"string"!=typeof e&&(!e||"number"!=typeof e.byteLength)){if(r.util.isNode()){var n=r.util.stream.Stream;if(r.util.Buffer.isBuffer(e)||e instanceof n)return}else if(void 0!==("undefined"==typeof Blob?"undefined":i(Blob))&&e instanceof Blob)return;var o=["Buffer","Stream","File","Blob","ArrayBuffer","DataView"];if(e)for(var s=0;s<o.length;s++){if(r.util.isType(e,o[s]))return;if(r.util.typeName(e.constructor)===o[s])return}this.fail("InvalidParameterType","Expected "+t+" to be a string, Buffer, Stream, Blob, or typed array object")}}})},{"./core":19}],46:[function(e,t,n){var r=e("../util"),i=e("../core");t.exports={populateHostPrefix:function(e){if(!e.service.config.hostPrefixEnabled)return e;var t,n,o,s=e.service.api.operations[e.operation];if(function(e){var t=e.service.api,n=t.operations[e.operation],i=t.endpointOperation&&t.endpointOperation===r.string.lowerFirst(n.name);return"NULL"!==n.endpointDiscoveryRequired||!0===i}(e))return e;if(s.endpoint&&s.endpoint.hostPrefix){var a=function(e,t,n){return r.each(n.members,(function(n,i){if(!0===i.hostLabel){if("string"!=typeof t[n]||""===t[n])throw r.error(new Error,{message:"Parameter "+n+" should be a non-empty string.",code:"InvalidParameter"});var o=new RegExp("\\{"+n+"\\}","g");e=e.replace(o,t[n])}})),e}(s.endpoint.hostPrefix,e.params,s.input);!function(e,t){e.host&&(e.host=t+e.host);e.hostname&&(e.hostname=t+e.hostname)}(e.httpRequest.endpoint,a),t=e.httpRequest.endpoint.hostname,n=t.split("."),o=/^[a-zA-Z0-9]{1}$|^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]$/,r.arrayEach(n,(function(e){if(!e.length||e.length<1||e.length>63)throw r.error(new Error,{code:"ValidationError",message:"Hostname label length should be between 1 to 63 characters, inclusive."});if(!o.test(e))throw i.util.error(new Error,{code:"ValidationError",message:e+" is not hostname compatible."})}))}return e}}},{"../core":19,"../util":72}],47:[function(e,t,n){var r=e("../util"),i=e("../json/builder"),o=e("../json/parser"),s=e("./helpers").populateHostPrefix;t.exports={buildRequest:function(e){var t=e.httpRequest,n=e.service.api,r=n.targetPrefix+"."+n.operations[e.operation].name,o=n.jsonVersion||"1.0",a=n.operations[e.operation].input,c=new i;1===o&&(o="1.0"),t.body=c.build(e.params||{},a),t.headers["Content-Type"]="application/x-amz-json-"+o,t.headers["X-Amz-Target"]=r,s(e)},extractError:function(e){var t={},n=e.httpResponse;if(t.code=n.headers["x-amzn-errortype"]||"UnknownError","string"==typeof t.code&&(t.code=t.code.split(":")[0]),n.body.length>0)try{var i=JSON.parse(n.body.toString());(i.__type||i.code)&&(t.code=(i.__type||i.code).split("#").pop()),"RequestEntityTooLarge"===t.code?t.message="Request body must be less than 1 MB":t.message=i.message||i.Message||null}catch(i){t.statusCode=n.statusCode,t.message=n.statusMessage}else t.statusCode=n.statusCode,t.message=n.statusCode.toString();e.error=r.error(new Error,t)},extractData:function(e){var t=e.httpResponse.body.toString()||"{}";if(!1===e.request.service.config.convertResponseTypes)e.data=JSON.parse(t);else{var n=e.request.service.api.operations[e.request.operation].output||{},r=new o;e.data=r.parse(t,n)}}}},{"../json/builder":37,"../json/parser":38,"../util":72,"./helpers":46}],48:[function(e,t,n){var r=e("../core"),i=e("../util"),o=e("../query/query_param_serializer"),s=e("../model/shape"),a=e("./helpers").populateHostPrefix;t.exports={buildRequest:function(e){var t=e.service.api.operations[e.operation],n=e.httpRequest;n.headers["Content-Type"]="application/x-www-form-urlencoded; charset=utf-8",n.params={Version:e.service.api.apiVersion,Action:t.name},(new o).serialize(e.params,t.input,(function(e,t){n.params[e]=t})),n.body=i.queryParamsToString(n.params),a(e)},extractError:function(e){var t,n=e.httpResponse.body.toString();if(n.match("<UnknownOperationException"))t={Code:"UnknownOperation",Message:"Unknown operation "+e.request.operation};else try{t=(new r.XML.Parser).parse(n)}catch(n){t={Code:e.httpResponse.statusCode,Message:e.httpResponse.statusMessage}}t.requestId&&!e.requestId&&(e.requestId=t.requestId),t.Errors&&(t=t.Errors),t.Error&&(t=t.Error),t.Code?e.error=i.error(new Error,{code:t.Code,message:t.Message}):e.error=i.error(new Error,{code:e.httpResponse.statusCode,message:null})},extractData:function(e){var t=e.request,n=t.service.api.operations[t.operation].output||{},o=n;if(o.resultWrapper){var a=s.create({type:"structure"});a.members[o.resultWrapper]=n,a.memberNames=[o.resultWrapper],i.property(n,"name",n.resultWrapper),n=a}var c=new r.XML.Parser;if(n&&n.members&&!n.members._XAMZRequestId){var u=s.create({type:"string"},{api:{protocol:"query"}},"requestId");n.members._XAMZRequestId=u}var l=c.parse(e.httpResponse.body.toString(),n);e.requestId=l._XAMZRequestId||l.requestId,l._XAMZRequestId&&delete l._XAMZRequestId,o.resultWrapper&&l[o.resultWrapper]&&(i.update(l,l[o.resultWrapper]),delete l[o.resultWrapper]),e.data=l}}},{"../core":19,"../model/shape":44,"../query/query_param_serializer":52,"../util":72,"./helpers":46}],49:[function(e,t,n){var r=e("../util"),i=e("./helpers").populateHostPrefix;function o(e,t,n,i){var o=[e,t].join("/");o=o.replace(/\/+/g,"/");var s={},a=!1;if(r.each(n.members,(function(e,t){var n=i[e];if(null!=n)if("uri"===t.location){var c=new RegExp("\\{"+t.name+"(\\+)?\\}");o=o.replace(c,(function(e,t){return(t?r.uriEscapePath:r.uriEscape)(String(n))}))}else"querystring"===t.location&&(a=!0,"list"===t.type?s[t.name]=n.map((function(e){return r.uriEscape(t.member.toWireFormat(e).toString())})):"map"===t.type?r.each(n,(function(e,t){Array.isArray(t)?s[e]=t.map((function(e){return r.uriEscape(String(e))})):s[e]=r.uriEscape(String(t))})):s[t.name]=r.uriEscape(t.toWireFormat(n).toString()))})),a){o+=o.indexOf("?")>=0?"&":"?";var c=[];r.arrayEach(Object.keys(s).sort(),(function(e){Array.isArray(s[e])||(s[e]=[s[e]]);for(var t=0;t<s[e].length;t++)c.push(r.uriEscape(String(e))+"="+s[e][t])})),o+=c.join("&")}return o}t.exports={buildRequest:function(e){!function(e){e.httpRequest.method=e.service.api.operations[e.operation].httpMethod}(e),function(e){var t=e.service.api.operations[e.operation],n=t.input,r=o(e.httpRequest.endpoint.path,t.httpPath,n,e.params);e.httpRequest.path=r}(e),function(e){var t=e.service.api.operations[e.operation];r.each(t.input.members,(function(t,n){var i=e.params[t];null!=i&&("headers"===n.location&&"map"===n.type?r.each(i,(function(t,r){e.httpRequest.headers[n.name+t]=r})):"header"===n.location&&(i=n.toWireFormat(i).toString(),n.isJsonValue&&(i=r.base64.encode(i)),e.httpRequest.headers[n.name]=i))}))}(e),i(e)},extractError:function(){},extractData:function(e){var t=e.request,n={},i=e.httpResponse,o=t.service.api.operations[t.operation].output,s={};r.each(i.headers,(function(e,t){s[e.toLowerCase()]=t})),r.each(o.members,(function(e,t){var o=(t.name||e).toLowerCase();if("headers"===t.location&&"map"===t.type){n[e]={};var a=t.isLocationName?t.name:"",c=new RegExp("^"+a+"(.+)","i");r.each(i.headers,(function(t,r){var i=t.match(c);null!==i&&(n[e][i[1]]=r)}))}else if("header"===t.location){if(void 0!==s[o]){var u=t.isJsonValue?r.base64.decode(s[o]):s[o];n[e]=t.toType(u)}}else"statusCode"===t.location&&(n[e]=parseInt(i.statusCode,10))})),e.data=n},generateURI:o}},{"../util":72,"./helpers":46}],50:[function(e,t,n){var r=e("../util"),i=e("./rest"),o=e("./json"),s=e("../json/builder"),a=e("../json/parser");function c(e,t){e.service.api.operations[e.operation].input;if(!e.httpRequest.headers["Content-Type"]){var n=t?"binary/octet-stream":"application/json";e.httpRequest.headers["Content-Type"]=n}}t.exports={buildRequest:function(e){i.buildRequest(e),["HEAD","DELETE"].indexOf(e.httpRequest.method)<0&&function(e){var t=new s,n=e.service.api.operations[e.operation].input;if(n.payload){var r,i=n.members[n.payload];if(void 0===(r=e.params[n.payload]))return;"structure"===i.type?(e.httpRequest.body=t.build(r,i),c(e)):(e.httpRequest.body=r,("binary"===i.type||i.isStreaming)&&c(e,!0))}else{var o=t.build(e.params,n);"{}"===o&&"GET"===e.httpRequest.method||(e.httpRequest.body=o),c(e)}}(e)},extractError:function(e){o.extractError(e)},extractData:function(e){i.extractData(e);var t=e.request,n=t.service.api.operations[t.operation],s=t.service.api.operations[t.operation].output||{};if(n.hasEventOutput,s.payload){var c=s.members[s.payload],u=e.httpResponse.body;if(c.isEventStream)l=new a,e.data[payload]=r.createEventStream(2===AWS.HttpClient.streamsApiVersion?e.httpResponse.stream:u,l,c);else if("structure"===c.type||"list"===c.type){var l=new a;e.data[s.payload]=l.parse(u,c)}else"binary"===c.type||c.isStreaming?e.data[s.payload]=u:e.data[s.payload]=c.toType(u)}else{var h=e.data;o.extractData(e),e.data=r.merge(h,e.data)}}}},{"../json/builder":37,"../json/parser":38,"../util":72,"./json":47,"./rest":49}],51:[function(e,t,n){var r=e("../core"),i=e("../util"),o=e("./rest");t.exports={buildRequest:function(e){o.buildRequest(e),["GET","HEAD"].indexOf(e.httpRequest.method)<0&&function(e){var t=e.service.api.operations[e.operation].input,n=new r.XML.Builder,o=e.params,s=t.payload;if(s){var a=t.members[s];if(void 0===(o=o[s]))return;if("structure"===a.type){var c=a.name;e.httpRequest.body=n.toXML(o,a,c,!0)}else e.httpRequest.body=o}else e.httpRequest.body=n.toXML(o,t,t.name||t.shape||i.string.upperFirst(e.operation)+"Request")}(e)},extractError:function(e){var t;o.extractError(e);try{t=(new r.XML.Parser).parse(e.httpResponse.body.toString())}catch(n){t={Code:e.httpResponse.statusCode,Message:e.httpResponse.statusMessage}}t.Errors&&(t=t.Errors),t.Error&&(t=t.Error),t.Code?e.error=i.error(new Error,{code:t.Code,message:t.Message}):e.error=i.error(new Error,{code:e.httpResponse.statusCode,message:null})},extractData:function(e){var t;o.extractData(e);var n=e.request,s=e.httpResponse.body,a=n.service.api.operations[n.operation],c=a.output,u=(a.hasEventOutput,c.payload);if(u){var l=c.members[u];l.isEventStream?(t=new r.XML.Parser,e.data[u]=i.createEventStream(2===r.HttpClient.streamsApiVersion?e.httpResponse.stream:e.httpResponse.body,t,l)):"structure"===l.type?(t=new r.XML.Parser,e.data[u]=t.parse(s.toString(),l)):"binary"===l.type||l.isStreaming?e.data[u]=s:e.data[u]=l.toType(s)}else if(s.length>0){var h=(t=new r.XML.Parser).parse(s.toString(),c);i.update(e.data,h)}}}},{"../core":19,"../util":72,"./rest":49}],52:[function(e,t,n){var r=e("../util");function i(){}function o(e){return e.isQueryName||"ec2"!==e.api.protocol?e.name:e.name[0].toUpperCase()+e.name.substr(1)}function s(e,t,n,i){r.each(n.members,(function(n,r){var s=t[n];if(null!=s){var c=o(r);a(c=e?e+"."+c:c,s,r,i)}}))}function a(e,t,n,i){null!=t&&("structure"===n.type?s(e,t,n,i):"list"===n.type?function(e,t,n,i){var s=n.member||{};0!==t.length?r.arrayEach(t,(function(t,r){var c="."+(r+1);if("ec2"===n.api.protocol)c+="";else if(n.flattened){if(s.name){var u=e.split(".");u.pop(),u.push(o(s)),e=u.join(".")}}else c="."+(s.name?s.name:"member")+c;a(e+c,t,s,i)})):i.call(this,e,null)}(e,t,n,i):"map"===n.type?function(e,t,n,i){var o=1;r.each(t,(function(t,r){var s=(n.flattened?".":".entry.")+o+++".",c=s+(n.key.name||"key"),u=s+(n.value.name||"value");a(e+c,t,n.key,i),a(e+u,r,n.value,i)}))}(e,t,n,i):i(e,n.toWireFormat(t).toString()))}i.prototype.serialize=function(e,t,n){s("",e,t,n)},t.exports=i},{"../util":72}],53:[function(e,t,n){t.exports={now:function(){return"undefined"!=typeof performance&&"function"==typeof performance.now?performance.now():Date.now()}}},{}],54:[function(e,t,n){var r=e("./util"),i=e("./region_config_data.json");function o(e,t){r.each(t,(function(t,n){"globalEndpoint"!==t&&(void 0!==e.config[t]&&null!==e.config[t]||(e.config[t]=n))}))}t.exports=function(e){for(var t=function(e){var t=e.config.region,n=function(e){if(!e)return null;var t=e.split("-");return t.length<3?null:t.slice(0,t.length-2).join("-")+"-*"}(t),r=e.api.endpointPrefix;return[[t,r],[n,r],[t,"*"],[n,"*"],["*",r],["*","*"]].map((function(e){return e[0]&&e[1]?e.join("/"):null}))}(e),n=0;n<t.length;n++){var s=t[n];if(s&&Object.prototype.hasOwnProperty.call(i.rules,s)){var a=i.rules[s];return"string"==typeof a&&(a=i.patterns[a]),e.config.useDualstack&&r.isDualstackAvailable(e)&&((a=r.copy(a)).endpoint="{service}.dualstack.{region}.amazonaws.com"),e.isGlobalEndpoint=!!a.globalEndpoint,a.signatureVersion||(a.signatureVersion="v4"),void o(e,a)}}}},{"./region_config_data.json":55,"./util":72}],55:[function(e,t,n){t.exports={rules:{"*/*":{endpoint:"{service}.{region}.amazonaws.com"},"cn-*/*":{endpoint:"{service}.{region}.amazonaws.com.cn"},"*/budgets":"globalSSL","*/cloudfront":"globalSSL","*/iam":"globalSSL","*/sts":"globalSSL","*/importexport":{endpoint:"{service}.amazonaws.com",signatureVersion:"v2",globalEndpoint:!0},"*/route53":{endpoint:"https://{service}.amazonaws.com",signatureVersion:"v3https",globalEndpoint:!0},"*/waf":"globalSSL","us-gov-*/iam":"globalGovCloud","us-gov-*/sts":{endpoint:"{service}.{region}.amazonaws.com"},"us-gov-west-1/s3":"s3signature","us-west-1/s3":"s3signature","us-west-2/s3":"s3signature","eu-west-1/s3":"s3signature","ap-southeast-1/s3":"s3signature","ap-southeast-2/s3":"s3signature","ap-northeast-1/s3":"s3signature","sa-east-1/s3":"s3signature","us-east-1/s3":{endpoint:"{service}.amazonaws.com",signatureVersion:"s3"},"us-east-1/sdb":{endpoint:"{service}.amazonaws.com",signatureVersion:"v2"},"*/sdb":{endpoint:"{service}.{region}.amazonaws.com",signatureVersion:"v2"}},patterns:{globalSSL:{endpoint:"https://{service}.amazonaws.com",globalEndpoint:!0},globalGovCloud:{endpoint:"{service}.us-gov.amazonaws.com"},s3signature:{endpoint:"{service}.{region}.amazonaws.com",signatureVersion:"s3"}}}},{}],56:[function(e,t,n){(function(t){var n=e("./core"),r=e("./state_machine"),i=n.util.inherit,o=n.util.domain,s=e("jmespath"),a={success:1,error:1,complete:1};var c=new r;c.setupStates=function(){var e=function(e,t){var n=this;n._haltHandlersOnError=!1,n.emit(n._asm.currentState,(function(e){if(e)if(r=n,Object.prototype.hasOwnProperty.call(a,r._asm.currentState)){if(!(o&&n.domain instanceof o.Domain))throw e;e.domainEmitter=n,e.domain=n.domain,e.domainThrown=!1,n.domain.emit("error",e)}else n.response.error=e,t(e);else t(n.response.error);var r}))};this.addState("validate","build","error",e),this.addState("build","afterBuild","restart",e),this.addState("afterBuild","sign","restart",e),this.addState("sign","send","retry",e),this.addState("retry","afterRetry","afterRetry",e),this.addState("afterRetry","sign","error",e),this.addState("send","validateResponse","retry",e),this.addState("validateResponse","extractData","extractError",e),this.addState("extractError","extractData","retry",e),this.addState("extractData","success","retry",e),this.addState("restart","build","error",e),this.addState("success","complete","complete",e),this.addState("error","complete","complete",e),this.addState("complete",null,null,e)},c.setupStates(),n.Request=i({constructor:function(e,t,i){var s=e.endpoint,a=e.config.region,u=e.config.customUserAgent;e.isGlobalEndpoint&&(a="us-east-1"),this.domain=o&&o.active,this.service=e,this.operation=t,this.params=i||{},this.httpRequest=new n.HttpRequest(s,a),this.httpRequest.appendToUserAgent(u),this.startTime=e.getSkewCorrectedDate(),this.response=new n.Response(this),this._asm=new r(c.states,"validate"),this._haltHandlersOnError=!1,n.SequentialExecutor.call(this),this.emit=this.emitEvent},send:function(e){return e&&(this.httpRequest.appendToUserAgent("callback"),this.on("complete",(function(t){e.call(t,t.error,t.data)}))),this.runTo(),this.response},build:function(e){return this.runTo("send",e)},runTo:function(e,t){return this._asm.runTo(e,t,this),this},abort:function(){return this.removeAllListeners("validateResponse"),this.removeAllListeners("extractError"),this.on("validateResponse",(function(e){e.error=n.util.error(new Error("Request aborted by user"),{code:"RequestAbortedError",retryable:!1})})),this.httpRequest.stream&&!this.httpRequest.stream.didCallback&&(this.httpRequest.stream.abort(),this.httpRequest._abortCallback?this.httpRequest._abortCallback():this.removeAllListeners("send")),this},eachPage:function(e){e=n.util.fn.makeAsync(e,3),this.on("complete",(function t(r){e.call(r,r.error,r.data,(function(i){!1!==i&&(r.hasNextPage()?r.nextPage().on("complete",t).send():e.call(r,null,null,n.util.fn.noop))}))})).send()},eachItem:function(e){var t=this;this.eachPage((function(r,i){if(r)return e(r,null);if(null===i)return e(null,null);var o=t.service.paginationConfig(t.operation).resultKey;Array.isArray(o)&&(o=o[0]);var a=s.search(i,o),c=!0;return n.util.arrayEach(a,(function(t){if(!1===(c=e(null,t)))return n.util.abort})),c}))},isPageable:function(){return!!this.service.paginationConfig(this.operation)},createReadStream:function(){var e=n.util.stream,r=this,i=null;return 2===n.HttpClient.streamsApiVersion?(i=new e.PassThrough,t.nextTick((function(){r.send()}))):((i=new e.Stream).readable=!0,i.sent=!1,i.on("newListener",(function(e){i.sent||"data"!==e||(i.sent=!0,t.nextTick((function(){r.send()})))}))),this.on("error",(function(e){i.emit("error",e)})),this.on("httpHeaders",(function(t,o,s){if(t<300){r.removeListener("httpData",n.EventListeners.Core.HTTP_DATA),r.removeListener("httpError",n.EventListeners.Core.HTTP_ERROR),r.on("httpError",(function(e){s.error=e,s.error.retryable=!1}));var a,c=!1;if("HEAD"!==r.httpRequest.method&&(a=parseInt(o["content-length"],10)),void 0!==a&&!isNaN(a)&&a>=0){c=!0;var u=0}var l=function(){c&&u!==a?i.emit("error",n.util.error(new Error("Stream content length mismatch. Received "+u+" of "+a+" bytes."),{code:"StreamContentLengthMismatch"})):2===n.HttpClient.streamsApiVersion?i.end():i.emit("end")},h=s.httpResponse.createUnbufferedStream();if(2===n.HttpClient.streamsApiVersion)if(c){var p=new e.PassThrough;p._write=function(t){return t&&t.length&&(u+=t.length),e.PassThrough.prototype._write.apply(this,arguments)},p.on("end",l),i.on("error",(function(e){c=!1,h.unpipe(p),p.emit("end"),p.end()})),h.pipe(p).pipe(i,{end:!1})}else h.pipe(i);else c&&h.on("data",(function(e){e&&e.length&&(u+=e.length)})),h.on("data",(function(e){i.emit("data",e)})),h.on("end",l);h.on("error",(function(e){c=!1,i.emit("error",e)}))}})),i},emitEvent:function(e,t,r){"function"==typeof t&&(r=t,t=null),r||(r=function(){}),t||(t=this.eventParameters(e,this.response)),n.SequentialExecutor.prototype.emit.call(this,e,t,(function(e){e&&(this.response.error=e),r.call(this,e)}))},eventParameters:function(e){switch(e){case"restart":case"validate":case"sign":case"build":case"afterValidate":case"afterBuild":return[this];case"error":return[this.response.error,this.response];default:return[this.response]}},presign:function(e,t){return t||"function"!=typeof e||(t=e,e=null),(new n.Signers.Presign).sign(this.toGet(),e,t)},isPresigned:function(){return Object.prototype.hasOwnProperty.call(this.httpRequest.headers,"presigned-expires")},toUnauthenticated:function(){return this._unAuthenticated=!0,this.removeListener("validate",n.EventListeners.Core.VALIDATE_CREDENTIALS),this.removeListener("sign",n.EventListeners.Core.SIGN),this},toGet:function(){return"query"!==this.service.api.protocol&&"ec2"!==this.service.api.protocol||(this.removeListener("build",this.buildAsGet),this.addListener("build",this.buildAsGet)),this},buildAsGet:function(e){e.httpRequest.method="GET",e.httpRequest.path=e.service.endpoint.path+"?"+e.httpRequest.body,e.httpRequest.body="",delete e.httpRequest.headers["Content-Length"],delete e.httpRequest.headers["Content-Type"]},haltHandlersOnError:function(){this._haltHandlersOnError=!0}}),n.Request.addPromisesToClass=function(e){this.prototype.promise=function(){var t=this;return this.httpRequest.appendToUserAgent("promise"),new e((function(e,n){t.on("complete",(function(t){t.error?n(t.error):e(Object.defineProperty(t.data||{},"$response",{value:t}))})),t.runTo()}))}},n.Request.deletePromisesFromClass=function(){delete this.prototype.promise},n.util.addPromises(n.Request),n.util.mixin(n.Request,n.SequentialExecutor)}).call(this,e("_process"))},{"./core":19,"./state_machine":71,_process:86,jmespath:85}],57:[function(e,t,n){var r=e("./core"),i=r.util.inherit,o=e("jmespath");function s(e){var t=e.request._waiter,n=t.config.acceptors,r=!1,i="retry";n.forEach((function(n){if(!r){var o=t.matchers[n.matcher];o&&o(e,n.expected,n.argument)&&(r=!0,i=n.state)}})),!r&&e.error&&(i="failure"),"success"===i?t.setSuccess(e):t.setError(e,"retry"===i)}r.ResourceWaiter=i({constructor:function(e,t){this.service=e,this.state=t,this.loadWaiterConfig(this.state)},service:null,state:null,config:null,matchers:{path:function(e,t,n){try{var r=o.search(e.data,n)}catch(e){return!1}return o.strictDeepEqual(r,t)},pathAll:function(e,t,n){try{var r=o.search(e.data,n)}catch(e){return!1}Array.isArray(r)||(r=[r]);var i=r.length;if(!i)return!1;for(var s=0;s<i;s++)if(!o.strictDeepEqual(r[s],t))return!1;return!0},pathAny:function(e,t,n){try{var r=o.search(e.data,n)}catch(e){return!1}Array.isArray(r)||(r=[r]);for(var i=r.length,s=0;s<i;s++)if(o.strictDeepEqual(r[s],t))return!0;return!1},status:function(e,t){var n=e.httpResponse.statusCode;return"number"==typeof n&&n===t},error:function(e,t){return"string"==typeof t&&e.error?t===e.error.code:t===!!e.error}},listeners:(new r.SequentialExecutor).addNamedListeners((function(e){e("RETRY_CHECK","retry",(function(e){var t=e.request._waiter;e.error&&"ResourceNotReady"===e.error.code&&(e.error.retryDelay=1e3*(t.config.delay||0))})),e("CHECK_OUTPUT","extractData",s),e("CHECK_ERROR","extractError",s)})),wait:function(e,t){"function"==typeof e&&(t=e,e=void 0),e&&e.$waiter&&("number"==typeof(e=r.util.copy(e)).$waiter.delay&&(this.config.delay=e.$waiter.delay),"number"==typeof e.$waiter.maxAttempts&&(this.config.maxAttempts=e.$waiter.maxAttempts),delete e.$waiter);var n=this.service.makeRequest(this.config.operation,e);return n._waiter=this,n.response.maxRetries=this.config.maxAttempts,n.addListeners(this.listeners),t&&n.send(t),n},setSuccess:function(e){e.error=null,e.data=e.data||{},e.request.removeAllListeners("extractData")},setError:function(e,t){e.data=null,e.error=r.util.error(e.error||new Error,{code:"ResourceNotReady",message:"Resource is not in the state "+this.state,retryable:t})},loadWaiterConfig:function(e){if(!this.service.api.waiters[e])throw new r.util.error(new Error,{code:"StateNotFoundError",message:"State "+e+" not found."});this.config=r.util.copy(this.service.api.waiters[e])}})},{"./core":19,jmespath:85}],58:[function(e,t,n){var r=e("./core"),i=r.util.inherit,o=e("jmespath");r.Response=i({constructor:function(e){this.request=e,this.data=null,this.error=null,this.retryCount=0,this.redirectCount=0,this.httpResponse=new r.HttpResponse,e&&(this.maxRetries=e.service.numRetries(),this.maxRedirects=e.service.config.maxRedirects)},nextPage:function(e){var t,n=this.request.service,i=this.request.operation;try{t=n.paginationConfig(i,!0)}catch(e){this.error=e}if(!this.hasNextPage()){if(e)e(this.error,null);else if(this.error)throw this.error;return null}var o=r.util.copy(this.request.params);if(this.nextPageTokens){var s=t.inputToken;"string"==typeof s&&(s=[s]);for(var a=0;a<s.length;a++)o[s[a]]=this.nextPageTokens[a];return n.makeRequest(this.request.operation,o,e)}return e?e(null,null):null},hasNextPage:function(){return this.cacheNextPageTokens(),!!this.nextPageTokens||void 0===this.nextPageTokens&&void 0},cacheNextPageTokens:function(){if(Object.prototype.hasOwnProperty.call(this,"nextPageTokens"))return this.nextPageTokens;this.nextPageTokens=void 0;var e=this.request.service.paginationConfig(this.request.operation);if(!e)return this.nextPageTokens;if(this.nextPageTokens=null,e.moreResults&&!o.search(this.data,e.moreResults))return this.nextPageTokens;var t=e.outputToken;return"string"==typeof t&&(t=[t]),r.util.arrayEach.call(this,t,(function(e){var t=o.search(this.data,e);t&&(this.nextPageTokens=this.nextPageTokens||[],this.nextPageTokens.push(t))})),this.nextPageTokens}})},{"./core":19,jmespath:85}],59:[function(e,t,n){var r=e("./core");r.SequentialExecutor=r.util.inherit({constructor:function(){this._events={}},listeners:function(e){return this._events[e]?this._events[e].slice(0):[]},on:function(e,t,n){return this._events[e]?n?this._events[e].unshift(t):this._events[e].push(t):this._events[e]=[t],this},onAsync:function(e,t,n){return t._isAsync=!0,this.on(e,t,n)},removeListener:function(e,t){var n=this._events[e];if(n){for(var r=n.length,i=-1,o=0;o<r;++o)n[o]===t&&(i=o);i>-1&&n.splice(i,1)}return this},removeAllListeners:function(e){return e?delete this._events[e]:this._events={},this},emit:function(e,t,n){n||(n=function(){});var r=this.listeners(e),i=r.length;return this.callListeners(r,t,n),i>0},callListeners:function(e,t,n,i){var o=this,s=i||null;function a(i){if(i&&(s=r.util.error(s||new Error,i),o._haltHandlersOnError))return n.call(o,s);o.callListeners(e,t,n,s)}for(;e.length>0;){var c=e.shift();if(c._isAsync)return void c.apply(o,t.concat([a]));try{c.apply(o,t)}catch(e){s=r.util.error(s||new Error,e)}if(s&&o._haltHandlersOnError)return void n.call(o,s)}n.call(o,s)},addListeners:function(e){var t=this;return e._events&&(e=e._events),r.util.each(e,(function(e,n){"function"==typeof n&&(n=[n]),r.util.arrayEach(n,(function(n){t.on(e,n)}))})),t},addNamedListener:function(e,t,n,r){return this[e]=n,this.addListener(t,n,r),this},addNamedAsyncListener:function(e,t,n,r){return n._isAsync=!0,this.addNamedListener(e,t,n,r)},addNamedListeners:function(e){var t=this;return e((function(){t.addNamedListener.apply(t,arguments)}),(function(){t.addNamedAsyncListener.apply(t,arguments)})),this}}),r.SequentialExecutor.prototype.addListener=r.SequentialExecutor.prototype.on,t.exports=r.SequentialExecutor},{"./core":19}],60:[function(e,t,n){(function(n){var r=e("./core"),o=e("./model/api"),s=e("./region_config"),a=r.util.inherit,c=0;r.Service=a({constructor:function(e){if(!this.loadServiceClass)throw r.util.error(new Error,"Service must be constructed with `new' operator");var t=this.loadServiceClass(e||{});if(t){var n=r.util.copy(e),i=new t(e);return Object.defineProperty(i,"_originalConfig",{get:function(){return n},enumerable:!1,configurable:!0}),i._clientId=++c,i}this.initialize(e)},initialize:function(e){var t=r.config[this.serviceIdentifier];if(this.config=new r.Config(r.config),t&&this.config.update(t,!0),e&&this.config.update(e,!0),this.validateService(),this.config.endpoint||s(this),this.config.endpoint=this.endpointFromTemplate(this.config.endpoint),this.setEndpoint(this.config.endpoint),r.SequentialExecutor.call(this),r.Service.addDefaultMonitoringListeners(this),(this.config.clientSideMonitoring||r.Service._clientSideMonitoring)&&this.publisher){var i=this.publisher;this.addNamedListener("PUBLISH_API_CALL","apiCall",(function(e){n.nextTick((function(){i.eventHandler(e)}))})),this.addNamedListener("PUBLISH_API_ATTEMPT","apiCallAttempt",(function(e){n.nextTick((function(){i.eventHandler(e)}))}))}},validateService:function(){},loadServiceClass:function(e){var t=e;if(r.util.isEmpty(this.api)){if(t.apiConfig)return r.Service.defineServiceApi(this.constructor,t.apiConfig);if(this.constructor.services){(t=new r.Config(r.config)).update(e,!0);var n=t.apiVersions[this.constructor.serviceIdentifier];return n=n||t.apiVersion,this.getLatestServiceClass(n)}return null}return null},getLatestServiceClass:function(e){return e=this.getLatestServiceVersion(e),null===this.constructor.services[e]&&r.Service.defineServiceApi(this.constructor,e),this.constructor.services[e]},getLatestServiceVersion:function(e){if(!this.constructor.services||0===this.constructor.services.length)throw new Error("No services defined on "+this.constructor.serviceIdentifier);if(e?r.util.isType(e,Date)&&(e=r.util.date.iso8601(e).split("T")[0]):e="latest",Object.hasOwnProperty(this.constructor.services,e))return e;for(var t=Object.keys(this.constructor.services).sort(),n=null,i=t.length-1;i>=0;i--)if("*"!==t[i][t[i].length-1]&&(n=t[i]),t[i].substr(0,10)<=e)return n;throw new Error("Could not find "+this.constructor.serviceIdentifier+" API to satisfy version constraint `"+e+"'")},api:{},defaultRetryCount:3,customizeRequests:function(e){if(e){if("function"!=typeof e)throw new Error("Invalid callback type '"+i(e)+"' provided in customizeRequests");this.customRequestHandler=e}else this.customRequestHandler=null},makeRequest:function(e,t,n){if("function"==typeof t&&(n=t,t=null),t=t||{},this.config.params){var i=this.api.operations[e];i&&(t=r.util.copy(t),r.util.each(this.config.params,(function(e,n){i.input.members[e]&&(void 0!==t[e]&&null!==t[e]||(t[e]=n))})))}var o=new r.Request(this,e,t);return this.addAllRequestListeners(o),this.attachMonitoringEmitter(o),n&&o.send(n),o},makeUnauthenticatedRequest:function(e,t,n){"function"==typeof t&&(n=t,t={});var r=this.makeRequest(e,t).toUnauthenticated();return n?r.send(n):r},waitFor:function(e,t,n){return new r.ResourceWaiter(this,e).wait(t,n)},addAllRequestListeners:function(e){for(var t=[r.events,r.EventListeners.Core,this.serviceInterface(),r.EventListeners.CorePost],n=0;n<t.length;n++)t[n]&&e.addListeners(t[n]);this.config.paramValidation||e.removeListener("validate",r.EventListeners.Core.VALIDATE_PARAMETERS),this.config.logger&&e.addListeners(r.EventListeners.Logger),this.setupRequestListeners(e),"function"==typeof this.constructor.prototype.customRequestHandler&&this.constructor.prototype.customRequestHandler(e),Object.prototype.hasOwnProperty.call(this,"customRequestHandler")&&"function"==typeof this.customRequestHandler&&this.customRequestHandler(e)},apiCallEvent:function(e){var t=e.service.api.operations[e.operation],n={Type:"ApiCall",Api:t?t.name:e.operation,Version:1,Service:e.service.api.serviceId||e.service.api.endpointPrefix,Region:e.httpRequest.region,MaxRetriesExceeded:0,UserAgent:e.httpRequest.getUserAgent()},r=e.response;if(r.httpResponse.statusCode&&(n.FinalHttpStatusCode=r.httpResponse.statusCode),r.error){var i=r.error;r.httpResponse.statusCode>299?(i.code&&(n.FinalAwsException=i.code),i.message&&(n.FinalAwsExceptionMessage=i.message)):((i.code||i.name)&&(n.FinalSdkException=i.code||i.name),i.message&&(n.FinalSdkExceptionMessage=i.message))}return n},apiAttemptEvent:function(e){var t=e.service.api.operations[e.operation],n={Type:"ApiCallAttempt",Api:t?t.name:e.operation,Version:1,Service:e.service.api.serviceId||e.service.api.endpointPrefix,Fqdn:e.httpRequest.endpoint.hostname,UserAgent:e.httpRequest.getUserAgent()},r=e.response;return r.httpResponse.statusCode&&(n.HttpStatusCode=r.httpResponse.statusCode),!e._unAuthenticated&&e.service.config.credentials&&e.service.config.credentials.accessKeyId&&(n.AccessKey=e.service.config.credentials.accessKeyId),r.httpResponse.headers?(e.httpRequest.headers["x-amz-security-token"]&&(n.SessionToken=e.httpRequest.headers["x-amz-security-token"]),r.httpResponse.headers["x-amzn-requestid"]&&(n.XAmznRequestId=r.httpResponse.headers["x-amzn-requestid"]),r.httpResponse.headers["x-amz-request-id"]&&(n.XAmzRequestId=r.httpResponse.headers["x-amz-request-id"]),r.httpResponse.headers["x-amz-id-2"]&&(n.XAmzId2=r.httpResponse.headers["x-amz-id-2"]),n):n},attemptFailEvent:function(e){var t=this.apiAttemptEvent(e),n=e.response,r=n.error;return n.httpResponse.statusCode>299?(r.code&&(t.AwsException=r.code),r.message&&(t.AwsExceptionMessage=r.message)):((r.code||r.name)&&(t.SdkException=r.code||r.name),r.message&&(t.SdkExceptionMessage=r.message)),t},attachMonitoringEmitter:function(e){var t,n,i,o,s,a,c=0,u=this;e.on("validate",(function(){o=r.util.realClock.now(),a=Date.now()}),!0),e.on("sign",(function(){n=r.util.realClock.now(),t=Date.now(),s=e.httpRequest.region,c++}),!0),e.on("validateResponse",(function(){i=Math.round(r.util.realClock.now()-n)})),e.addNamedListener("API_CALL_ATTEMPT","success",(function(){var n=u.apiAttemptEvent(e);n.Timestamp=t,n.AttemptLatency=i>=0?i:0,n.Region=s,u.emit("apiCallAttempt",[n])})),e.addNamedListener("API_CALL_ATTEMPT_RETRY","retry",(function(){var o=u.attemptFailEvent(e);o.Timestamp=t,i=i||Math.round(r.util.realClock.now()-n),o.AttemptLatency=i>=0?i:0,o.Region=s,u.emit("apiCallAttempt",[o])})),e.addNamedListener("API_CALL","complete",(function(){var t=u.apiCallEvent(e);if(t.AttemptCount=c,!(t.AttemptCount<=0)){t.Timestamp=a;var n=Math.round(r.util.realClock.now()-o);t.Latency=n>=0?n:0;var i=e.response;"number"==typeof i.retryCount&&"number"==typeof i.maxRetries&&i.retryCount>=i.maxRetries&&(t.MaxRetriesExceeded=1),u.emit("apiCall",[t])}}))},setupRequestListeners:function(e){},getSignerClass:function(e){var t,n=null,i="";e&&(i=(n=(e.service.api.operations||{})[e.operation]||null)?n.authtype:"");return t=this.config.signatureVersion?this.config.signatureVersion:"v4"===i||"v4-unsigned-body"===i?"v4":this.api.signatureVersion,r.Signers.RequestSigner.getVersion(t)},serviceInterface:function(){switch(this.api.protocol){case"ec2":case"query":return r.EventListeners.Query;case"json":return r.EventListeners.Json;case"rest-json":return r.EventListeners.RestJson;case"rest-xml":return r.EventListeners.RestXml}if(this.api.protocol)throw new Error("Invalid service `protocol' "+this.api.protocol+" in API config")},successfulResponse:function(e){return e.httpResponse.statusCode<300},numRetries:function(){return void 0!==this.config.maxRetries?this.config.maxRetries:this.defaultRetryCount},retryDelays:function(e){return r.util.calculateRetryDelay(e,this.config.retryDelayOptions)},retryableError:function(e){return!!this.timeoutError(e)||(!!this.networkingError(e)||(!!this.expiredCredentialsError(e)||(!!this.throttledError(e)||e.statusCode>=500)))},networkingError:function(e){return"NetworkingError"===e.code},timeoutError:function(e){return"TimeoutError"===e.code},expiredCredentialsError:function(e){return"ExpiredTokenException"===e.code},clockSkewError:function(e){switch(e.code){case"RequestTimeTooSkewed":case"RequestExpired":case"InvalidSignatureException":case"SignatureDoesNotMatch":case"AuthFailure":case"RequestInTheFuture":return!0;default:return!1}},getSkewCorrectedDate:function(){return new Date(Date.now()+this.config.systemClockOffset)},applyClockOffset:function(e){e&&(this.config.systemClockOffset=e-Date.now())},isClockSkewed:function(e){if(e)return Math.abs(this.getSkewCorrectedDate().getTime()-e)>=3e4},throttledError:function(e){if(429===e.statusCode)return!0;switch(e.code){case"ProvisionedThroughputExceededException":case"Throttling":case"ThrottlingException":case"RequestLimitExceeded":case"RequestThrottled":case"RequestThrottledException":case"TooManyRequestsException":case"TransactionInProgressException":return!0;default:return!1}},endpointFromTemplate:function(e){if("string"!=typeof e)return e;var t=e;return t=(t=(t=t.replace(/\{service\}/g,this.api.endpointPrefix)).replace(/\{region\}/g,this.config.region)).replace(/\{scheme\}/g,this.config.sslEnabled?"https":"http")},setEndpoint:function(e){this.endpoint=new r.Endpoint(e,this.config)},paginationConfig:function(e,t){var n=this.api.operations[e].paginator;if(!n){if(t){var i=new Error;throw r.util.error(i,"No pagination configuration for "+e)}return null}return n}}),r.util.update(r.Service,{defineMethods:function(e){r.util.each(e.prototype.api.operations,(function(t){e.prototype[t]||("none"===e.prototype.api.operations[t].authtype?e.prototype[t]=function(e,n){return this.makeUnauthenticatedRequest(t,e,n)}:e.prototype[t]=function(e,n){return this.makeRequest(t,e,n)})}))},defineService:function(e,t,n){r.Service._serviceMap[e]=!0,Array.isArray(t)||(n=t,t=[]);var i=a(r.Service,n||{});if("string"==typeof e){r.Service.addVersions(i,t);var o=i.serviceIdentifier||e;i.serviceIdentifier=o}else i.prototype.api=e,r.Service.defineMethods(i);if(r.SequentialExecutor.call(this.prototype),!this.prototype.publisher&&r.util.clientSideMonitoring){var s=r.util.clientSideMonitoring.Publisher,c=(0,r.util.clientSideMonitoring.configProvider)();this.prototype.publisher=new s(c),c.enabled&&(r.Service._clientSideMonitoring=!0)}return r.SequentialExecutor.call(i.prototype),r.Service.addDefaultMonitoringListeners(i.prototype),i},addVersions:function(e,t){Array.isArray(t)||(t=[t]),e.services=e.services||{};for(var n=0;n<t.length;n++)void 0===e.services[t[n]]&&(e.services[t[n]]=null);e.apiVersions=Object.keys(e.services).sort()},defineServiceApi:function(e,t,n){var i=a(e,{serviceIdentifier:e.serviceIdentifier});function s(e){e.isApi?i.prototype.api=e:i.prototype.api=new o(e)}if("string"==typeof t){if(n)s(n);else try{s(r.apiLoader(e.serviceIdentifier,t))}catch(n){throw r.util.error(n,{message:"Could not find API configuration "+e.serviceIdentifier+"-"+t})}Object.prototype.hasOwnProperty.call(e.services,t)||(e.apiVersions=e.apiVersions.concat(t).sort()),e.services[t]=i}else s(t);return r.Service.defineMethods(i),i},hasService:function(e){return Object.prototype.hasOwnProperty.call(r.Service._serviceMap,e)},addDefaultMonitoringListeners:function(e){e.addNamedListener("MONITOR_EVENTS_BUBBLE","apiCallAttempt",(function(t){var n=Object.getPrototypeOf(e);n._events&&n.emit("apiCallAttempt",[t])})),e.addNamedListener("CALL_EVENTS_BUBBLE","apiCall",(function(t){var n=Object.getPrototypeOf(e);n._events&&n.emit("apiCall",[t])}))},_serviceMap:{}}),r.util.mixin(r.Service,r.SequentialExecutor),t.exports=r.Service}).call(this,e("_process"))},{"./core":19,"./model/api":39,"./region_config":54,_process:86}],61:[function(e,t,n){var r=e("../core");r.util.update(r.CognitoIdentity.prototype,{getOpenIdToken:function(e,t){return this.makeUnauthenticatedRequest("getOpenIdToken",e,t)},getId:function(e,t){return this.makeUnauthenticatedRequest("getId",e,t)},getCredentialsForIdentity:function(e,t){return this.makeUnauthenticatedRequest("getCredentialsForIdentity",e,t)}})},{"../core":19}],62:[function(e,t,n){(function(t){var n=e("../core"),r=e("../region_config");n.util.update(n.STS.prototype,{credentialsFrom:function(e,t){return e?(t||(t=new n.TemporaryCredentials),t.expired=!1,t.accessKeyId=e.Credentials.AccessKeyId,t.secretAccessKey=e.Credentials.SecretAccessKey,t.sessionToken=e.Credentials.SessionToken,t.expireTime=e.Credentials.Expiration,t):null},assumeRoleWithWebIdentity:function(e,t){return this.makeUnauthenticatedRequest("assumeRoleWithWebIdentity",e,t)},assumeRoleWithSAML:function(e,t){return this.makeUnauthenticatedRequest("assumeRoleWithSAML",e,t)},validateRegionalEndpointsFlagValue:function(e,t){if(!("string"==typeof e&&["legacy","regional"].indexOf(e.toLowerCase())>=0))throw n.util.error(new Error,t);this.config.stsRegionalEndpoints=e.toLowerCase()},validateRegionalEndpointsFlag:function(){var e=this.config;if(e.stsRegionalEndpoints&&this.validateRegionalEndpointsFlagValue(e.stsRegionalEndpoints,{code:"InvalidConfiguration",message:'invalid "stsRegionalEndpoints" configuration. Expect "legacy"  or "regional". Got "'+e.stsRegionalEndpoints+'".'}),n.util.isNode()){if(Object.prototype.hasOwnProperty.call(t.env,"AWS_STS_REGIONAL_ENDPOINTS")){var r=t.env.AWS_STS_REGIONAL_ENDPOINTS;this.validateRegionalEndpointsFlagValue(r,{code:"InvalidEnvironmentalVariable",message:'invalid AWS_STS_REGIONAL_ENDPOINTS environmental variable. Expect "legacy"  or "regional". Got "'+t.env.AWS_STS_REGIONAL_ENDPOINTS+'".'})}var i={};try{i=n.util.getProfilesFromSharedConfig(n.util.iniLoader)[t.env.AWS_PROFILE||n.util.defaultProfile]}catch(e){}if(i&&Object.prototype.hasOwnProperty.call(i,"sts_regional_endpoints")){var o=i.sts_regional_endpoints;this.validateRegionalEndpointsFlagValue(o,{code:"InvalidConfiguration",message:'invalid sts_regional_endpoints profile config. Expect "legacy"  or "regional". Got "'+i.sts_regional_endpoints+'".'})}}},optInRegionalEndpoint:function(){this.validateRegionalEndpointsFlag();var e=this.config;if("regional"===e.stsRegionalEndpoints){if(r(this),!this.isGlobalEndpoint)return;if(this.isGlobalEndpoint=!1,!e.region)throw n.util.error(new Error,{code:"ConfigError",message:"Missing region in config"});var t=e.endpoint.indexOf(".amazonaws.com");e.endpoint=e.endpoint.substring(0,t)+"."+e.region+e.endpoint.substring(t)}},validateService:function(){this.optInRegionalEndpoint()}})}).call(this,e("_process"))},{"../core":19,"../region_config":54,_process:86}],63:[function(e,t,n){var r=e("../core"),i=r.util.inherit,o="presigned-expires";function s(e){var t=e.httpRequest.headers[o],n=e.service.getSignerClass(e);if(delete e.httpRequest.headers["User-Agent"],delete e.httpRequest.headers["X-Amz-User-Agent"],n===r.Signers.V4){if(t>604800){throw r.util.error(new Error,{code:"InvalidExpiryTime",message:"Presigning does not support expiry time greater than a week with SigV4 signing.",retryable:!1})}e.httpRequest.headers[o]=t}else{if(n!==r.Signers.S3)throw r.util.error(new Error,{message:"Presigning only supports S3 or SigV4 signing.",code:"UnsupportedSigner",retryable:!1});var i=e.service?e.service.getSkewCorrectedDate():r.util.date.getDate();e.httpRequest.headers[o]=parseInt(r.util.date.unixTimestamp(i)+t,10).toString()}}function a(e){var t=e.httpRequest.endpoint,n=r.util.urlParse(e.httpRequest.path),i={};n.search&&(i=r.util.queryStringParse(n.search.substr(1)));var s=e.httpRequest.headers.Authorization.split(" ");if("AWS"===s[0])s=s[1].split(":"),i.AWSAccessKeyId=s[0],i.Signature=s[1],r.util.each(e.httpRequest.headers,(function(e,t){e===o&&(e="Expires"),0===e.indexOf("x-amz-meta-")&&(delete i[e],e=e.toLowerCase()),i[e]=t})),delete e.httpRequest.headers[o],delete i.Authorization,delete i.Host;else if("AWS4-HMAC-SHA256"===s[0]){s.shift();var a=s.join(" ").match(/Signature=(.*?)(?:,|\s|\r?\n|$)/)[1];i["X-Amz-Signature"]=a,delete i.Expires}t.pathname=n.pathname,t.search=r.util.queryParamsToString(i)}r.Signers.Presign=i({sign:function(e,t,n){if(e.httpRequest.headers[o]=t||3600,e.on("build",s),e.on("sign",a),e.removeListener("afterBuild",r.EventListeners.Core.SET_CONTENT_LENGTH),e.removeListener("afterBuild",r.EventListeners.Core.COMPUTE_SHA256),e.emit("beforePresign",[e]),!n){if(e.build(),e.response.error)throw e.response.error;return r.util.urlFormat(e.httpRequest.endpoint)}e.build((function(){this.response.error?n(this.response.error):n(null,r.util.urlFormat(e.httpRequest.endpoint))}))}}),t.exports=r.Signers.Presign},{"../core":19}],64:[function(e,t,n){var r=e("../core"),i=r.util.inherit;r.Signers.RequestSigner=i({constructor:function(e){this.request=e},setServiceClientId:function(e){this.serviceClientId=e},getServiceClientId:function(){return this.serviceClientId}}),r.Signers.RequestSigner.getVersion=function(e){switch(e){case"v2":return r.Signers.V2;case"v3":return r.Signers.V3;case"s3v4":case"v4":return r.Signers.V4;case"s3":return r.Signers.S3;case"v3https":return r.Signers.V3Https}throw new Error("Unknown signing version "+e)},e("./v2"),e("./v3"),e("./v3https"),e("./v4"),e("./s3"),e("./presign")},{"../core":19,"./presign":63,"./s3":65,"./v2":66,"./v3":67,"./v3https":68,"./v4":69}],65:[function(e,t,n){var r=e("../core"),i=r.util.inherit;r.Signers.S3=i(r.Signers.RequestSigner,{subResources:{acl:1,accelerate:1,analytics:1,cors:1,lifecycle:1,delete:1,inventory:1,location:1,logging:1,metrics:1,notification:1,partNumber:1,policy:1,requestPayment:1,replication:1,restore:1,tagging:1,torrent:1,uploadId:1,uploads:1,versionId:1,versioning:1,versions:1,website:1},responseHeaders:{"response-content-type":1,"response-content-language":1,"response-expires":1,"response-cache-control":1,"response-content-disposition":1,"response-content-encoding":1},addAuthorization:function(e,t){this.request.headers["presigned-expires"]||(this.request.headers["X-Amz-Date"]=r.util.date.rfc822(t)),e.sessionToken&&(this.request.headers["x-amz-security-token"]=e.sessionToken);var n=this.sign(e.secretAccessKey,this.stringToSign()),i="AWS "+e.accessKeyId+":"+n;this.request.headers.Authorization=i},stringToSign:function(){var e=this.request,t=[];t.push(e.method),t.push(e.headers["Content-MD5"]||""),t.push(e.headers["Content-Type"]||""),t.push(e.headers["presigned-expires"]||"");var n=this.canonicalizedAmzHeaders();return n&&t.push(n),t.push(this.canonicalizedResource()),t.join("\n")},canonicalizedAmzHeaders:function(){var e=[];r.util.each(this.request.headers,(function(t){t.match(/^x-amz-/i)&&e.push(t)})),e.sort((function(e,t){return e.toLowerCase()<t.toLowerCase()?-1:1}));var t=[];return r.util.arrayEach.call(this,e,(function(e){t.push(e.toLowerCase()+":"+String(this.request.headers[e]))})),t.join("\n")},canonicalizedResource:function(){var e=this.request,t=e.path.split("?"),n=t[0],i=t[1],o="";if(e.virtualHostedBucket&&(o+="/"+e.virtualHostedBucket),o+=n,i){var s=[];r.util.arrayEach.call(this,i.split("&"),(function(e){var t=e.split("=")[0],n=e.split("=")[1];if(this.subResources[t]||this.responseHeaders[t]){var r={name:t};void 0!==n&&(this.subResources[t]?r.value=n:r.value=decodeURIComponent(n)),s.push(r)}})),s.sort((function(e,t){return e.name<t.name?-1:1})),s.length&&(i=[],r.util.arrayEach(s,(function(e){void 0===e.value?i.push(e.name):i.push(e.name+"="+e.value)})),o+="?"+i.join("&"))}return o},sign:function(e,t){return r.util.crypto.hmac(e,t,"base64","sha1")}}),t.exports=r.Signers.S3},{"../core":19}],66:[function(e,t,n){var r=e("../core"),i=r.util.inherit;r.Signers.V2=i(r.Signers.RequestSigner,{addAuthorization:function(e,t){t||(t=r.util.date.getDate());var n=this.request;n.params.Timestamp=r.util.date.iso8601(t),n.params.SignatureVersion="2",n.params.SignatureMethod="HmacSHA256",n.params.AWSAccessKeyId=e.accessKeyId,e.sessionToken&&(n.params.SecurityToken=e.sessionToken),delete n.params.Signature,n.params.Signature=this.signature(e),n.body=r.util.queryParamsToString(n.params),n.headers["Content-Length"]=n.body.length},signature:function(e){return r.util.crypto.hmac(e.secretAccessKey,this.stringToSign(),"base64")},stringToSign:function(){var e=[];return e.push(this.request.method),e.push(this.request.endpoint.host.toLowerCase()),e.push(this.request.pathname()),e.push(r.util.queryParamsToString(this.request.params)),e.join("\n")}}),t.exports=r.Signers.V2},{"../core":19}],67:[function(e,t,n){var r=e("../core"),i=r.util.inherit;r.Signers.V3=i(r.Signers.RequestSigner,{addAuthorization:function(e,t){var n=r.util.date.rfc822(t);this.request.headers["X-Amz-Date"]=n,e.sessionToken&&(this.request.headers["x-amz-security-token"]=e.sessionToken),this.request.headers["X-Amzn-Authorization"]=this.authorization(e,n)},authorization:function(e){return"AWS3 AWSAccessKeyId="+e.accessKeyId+",Algorithm=HmacSHA256,SignedHeaders="+this.signedHeaders()+",Signature="+this.signature(e)},signedHeaders:function(){var e=[];return r.util.arrayEach(this.headersToSign(),(function(t){e.push(t.toLowerCase())})),e.sort().join(";")},canonicalHeaders:function(){var e=this.request.headers,t=[];return r.util.arrayEach(this.headersToSign(),(function(n){t.push(n.toLowerCase().trim()+":"+String(e[n]).trim())})),t.sort().join("\n")+"\n"},headersToSign:function(){var e=[];return r.util.each(this.request.headers,(function(t){("Host"===t||"Content-Encoding"===t||t.match(/^X-Amz/i))&&e.push(t)})),e},signature:function(e){return r.util.crypto.hmac(e.secretAccessKey,this.stringToSign(),"base64")},stringToSign:function(){var e=[];return e.push(this.request.method),e.push("/"),e.push(""),e.push(this.canonicalHeaders()),e.push(this.request.body),r.util.crypto.sha256(e.join("\n"))}}),t.exports=r.Signers.V3},{"../core":19}],68:[function(e,t,n){var r=e("../core"),i=r.util.inherit;e("./v3"),r.Signers.V3Https=i(r.Signers.V3,{authorization:function(e){return"AWS3-HTTPS AWSAccessKeyId="+e.accessKeyId+",Algorithm=HmacSHA256,Signature="+this.signature(e)},stringToSign:function(){return this.request.headers["X-Amz-Date"]}}),t.exports=r.Signers.V3Https},{"../core":19,"./v3":67}],69:[function(e,t,n){var r=e("../core"),i=e("./v4_credentials"),o=r.util.inherit;r.Signers.V4=o(r.Signers.RequestSigner,{constructor:function(e,t,n){r.Signers.RequestSigner.call(this,e),this.serviceName=t,n=n||{},this.signatureCache="boolean"!=typeof n.signatureCache||n.signatureCache,this.operation=n.operation,this.signatureVersion=n.signatureVersion},algorithm:"AWS4-HMAC-SHA256",addAuthorization:function(e,t){var n=r.util.date.iso8601(t).replace(/[:\-]|\.\d{3}/g,"");this.isPresigned()?this.updateForPresigned(e,n):this.addHeaders(e,n),this.request.headers.Authorization=this.authorization(e,n)},addHeaders:function(e,t){this.request.headers["X-Amz-Date"]=t,e.sessionToken&&(this.request.headers["x-amz-security-token"]=e.sessionToken)},updateForPresigned:function(e,t){var n=this.credentialString(t),i={"X-Amz-Date":t,"X-Amz-Algorithm":this.algorithm,"X-Amz-Credential":e.accessKeyId+"/"+n,"X-Amz-Expires":this.request.headers["presigned-expires"],"X-Amz-SignedHeaders":this.signedHeaders()};e.sessionToken&&(i["X-Amz-Security-Token"]=e.sessionToken),this.request.headers["Content-Type"]&&(i["Content-Type"]=this.request.headers["Content-Type"]),this.request.headers["Content-MD5"]&&(i["Content-MD5"]=this.request.headers["Content-MD5"]),this.request.headers["Cache-Control"]&&(i["Cache-Control"]=this.request.headers["Cache-Control"]),r.util.each.call(this,this.request.headers,(function(e,t){if("presigned-expires"!==e&&this.isSignableHeader(e)){var n=e.toLowerCase();0===n.indexOf("x-amz-meta-")?i[n]=t:0===n.indexOf("x-amz-")&&(i[e]=t)}}));var o=this.request.path.indexOf("?")>=0?"&":"?";this.request.path+=o+r.util.queryParamsToString(i)},authorization:function(e,t){var n=[],r=this.credentialString(t);return n.push(this.algorithm+" Credential="+e.accessKeyId+"/"+r),n.push("SignedHeaders="+this.signedHeaders()),n.push("Signature="+this.signature(e,t)),n.join(", ")},signature:function(e,t){var n=i.getSigningKey(e,t.substr(0,8),this.request.region,this.serviceName,this.signatureCache);return r.util.crypto.hmac(n,this.stringToSign(t),"hex")},stringToSign:function(e){var t=[];return t.push("AWS4-HMAC-SHA256"),t.push(e),t.push(this.credentialString(e)),t.push(this.hexEncodedHash(this.canonicalString())),t.join("\n")},canonicalString:function(){var e=[],t=this.request.pathname();return"s3"!==this.serviceName&&"s3v4"!==this.signatureVersion&&(t=r.util.uriEscapePath(t)),e.push(this.request.method),e.push(t),e.push(this.request.search()),e.push(this.canonicalHeaders()+"\n"),e.push(this.signedHeaders()),e.push(this.hexEncodedBodyHash()),e.join("\n")},canonicalHeaders:function(){var e=[];r.util.each.call(this,this.request.headers,(function(t,n){e.push([t,n])})),e.sort((function(e,t){return e[0].toLowerCase()<t[0].toLowerCase()?-1:1}));var t=[];return r.util.arrayEach.call(this,e,(function(e){var n=e[0].toLowerCase();if(this.isSignableHeader(n)){var i=e[1];if(null==i||"function"!=typeof i.toString)throw r.util.error(new Error("Header "+n+" contains invalid value"),{code:"InvalidHeader"});t.push(n+":"+this.canonicalHeaderValues(i.toString()))}})),t.join("\n")},canonicalHeaderValues:function(e){return e.replace(/\s+/g," ").replace(/^\s+|\s+$/g,"")},signedHeaders:function(){var e=[];return r.util.each.call(this,this.request.headers,(function(t){t=t.toLowerCase(),this.isSignableHeader(t)&&e.push(t)})),e.sort().join(";")},credentialString:function(e){return i.createScope(e.substr(0,8),this.request.region,this.serviceName)},hexEncodedHash:function(e){return r.util.crypto.sha256(e,"hex")},hexEncodedBodyHash:function(){var e=this.request;return this.isPresigned()&&"s3"===this.serviceName&&!e.body?"UNSIGNED-PAYLOAD":e.headers["X-Amz-Content-Sha256"]?e.headers["X-Amz-Content-Sha256"]:this.hexEncodedHash(this.request.body||"")},unsignableHeaders:["authorization","content-type","content-length","user-agent","presigned-expires","expect","x-amzn-trace-id"],isSignableHeader:function(e){return 0===e.toLowerCase().indexOf("x-amz-")||this.unsignableHeaders.indexOf(e)<0},isPresigned:function(){return!!this.request.headers["presigned-expires"]}}),t.exports=r.Signers.V4},{"../core":19,"./v4_credentials":70}],70:[function(e,t,n){var r=e("../core"),i={},o=[],s="aws4_request";t.exports={createScope:function(e,t,n){return[e.substr(0,8),t,n,s].join("/")},getSigningKey:function(e,t,n,a,c){var u=[r.util.crypto.hmac(e.secretAccessKey,e.accessKeyId,"base64"),t,n,a].join("_");if((c=!1!==c)&&u in i)return i[u];var l=r.util.crypto.hmac("AWS4"+e.secretAccessKey,t,"buffer"),h=r.util.crypto.hmac(l,n,"buffer"),p=r.util.crypto.hmac(h,a,"buffer"),f=r.util.crypto.hmac(p,s,"buffer");return c&&(i[u]=f,o.push(u),o.length>50&&delete i[o.shift()]),f},emptyCache:function(){i={},o=[]}}},{"../core":19}],71:[function(e,t,n){function r(e,t){this.currentState=t||null,this.states=e||{}}r.prototype.runTo=function(e,t,n,r){"function"==typeof e&&(r=n,n=t,t=e,e=null);var i=this,o=i.states[i.currentState];o.fn.call(n||i,r,(function(r){if(r){if(!o.fail)return t?t.call(n,r):null;i.currentState=o.fail}else{if(!o.accept)return t?t.call(n):null;i.currentState=o.accept}if(i.currentState===e)return t?t.call(n,r):null;i.runTo(e,t,n,r)}))},r.prototype.addState=function(e,t,n,r){return"function"==typeof t?(r=t,t=null,n=null):"function"==typeof n&&(r=n,n=null),this.currentState||(this.currentState=e),this.states[e]={accept:t,fail:n,fn:r},this},t.exports=r},{}],72:[function(e,t,n){(function(n,r){var o,s={environment:"nodejs",engine:function(){if(s.isBrowser()&&"undefined"!=typeof navigator)return navigator.userAgent;var e=n.platform+"/"+n.version;return n.env.AWS_EXECUTION_ENV&&(e+=" exec-env/"+n.env.AWS_EXECUTION_ENV),e},userAgent:function(){var t=s.environment,n="aws-sdk-"+t+"/"+e("./core").VERSION;return"nodejs"===t&&(n+=" "+s.engine()),n},uriEscape:function(e){var t=encodeURIComponent(e);return t=(t=t.replace(/[^A-Za-z0-9_.~\-%]+/g,escape)).replace(/[*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))},uriEscapePath:function(e){var t=[];return s.arrayEach(e.split("/"),(function(e){t.push(s.uriEscape(e))})),t.join("/")},urlParse:function(e){return s.url.parse(e)},urlFormat:function(e){return s.url.format(e)},queryStringParse:function(e){return s.querystring.parse(e)},queryParamsToString:function(e){var t=[],n=s.uriEscape,r=Object.keys(e).sort();return s.arrayEach(r,(function(r){var i=e[r],o=n(r),a=o+"=";if(Array.isArray(i)){var c=[];s.arrayEach(i,(function(e){c.push(n(e))})),a=o+"="+c.sort().join("&"+o+"=")}else null!=i&&(a=o+"="+n(i));t.push(a)})),t.join("&")},readFileSync:function(t){return s.isBrowser()?null:e("fs").readFileSync(t,"utf-8")},base64:{encode:function(e){if("number"==typeof e)throw s.error(new Error("Cannot base64 encode number "+e));return null==e?e:s.buffer.toBuffer(e).toString("base64")},decode:function(e){if("number"==typeof e)throw s.error(new Error("Cannot base64 decode number "+e));return null==e?e:s.buffer.toBuffer(e,"base64")}},buffer:{toBuffer:function(e,t){return"function"==typeof s.Buffer.from&&s.Buffer.from!==Uint8Array.from?s.Buffer.from(e,t):new s.Buffer(e,t)},alloc:function(e,t,n){if("number"!=typeof e)throw new Error("size passed to alloc must be a number.");if("function"==typeof s.Buffer.alloc)return s.Buffer.alloc(e,t,n);var r=new s.Buffer(e);return void 0!==t&&"function"==typeof r.fill&&r.fill(t,void 0,void 0,n),r},toStream:function(e){s.Buffer.isBuffer(e)||(e=s.buffer.toBuffer(e));var t=new s.stream.Readable,n=0;return t._read=function(r){if(n>=e.length)return t.push(null);var i=n+r;i>e.length&&(i=e.length),t.push(e.slice(n,i)),n=i},t},concat:function(e){var t,n,r=0,i=0;for(n=0;n<e.length;n++)r+=e[n].length;for(t=s.buffer.alloc(r),n=0;n<e.length;n++)e[n].copy(t,i),i+=e[n].length;return t}},string:{byteLength:function(t){if(null==t)return 0;if("string"==typeof t&&(t=s.buffer.toBuffer(t)),"number"==typeof t.byteLength)return t.byteLength;if("number"==typeof t.length)return t.length;if("number"==typeof t.size)return t.size;if("string"==typeof t.path)return e("fs").lstatSync(t.path).size;throw s.error(new Error("Cannot determine length of "+t),{object:t})},upperFirst:function(e){return e[0].toUpperCase()+e.substr(1)},lowerFirst:function(e){return e[0].toLowerCase()+e.substr(1)}},ini:{parse:function(e){var t,n={};return s.arrayEach(e.split(/\r?\n/),(function(e){var r=(e=e.split(/(^|\s)[;#]/)[0]).match(/^\s*\[([^\[\]]+)\]\s*$/);if(r)t=r[1];else if(t){var i=e.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);i&&(n[t]=n[t]||{},n[t][i[1]]=i[2])}})),n}},fn:{noop:function(){},callback:function(e){if(e)throw e},makeAsync:function(e,t){return t&&t<=e.length?e:function(){var t=Array.prototype.slice.call(arguments,0),n=t.pop(),r=e.apply(null,t);n(r)}}},date:{getDate:function(){return o||(o=e("./core")),o.config.systemClockOffset?new Date((new Date).getTime()+o.config.systemClockOffset):new Date},iso8601:function(e){return void 0===e&&(e=s.date.getDate()),e.toISOString().replace(/\.\d{3}Z$/,"Z")},rfc822:function(e){return void 0===e&&(e=s.date.getDate()),e.toUTCString()},unixTimestamp:function(e){return void 0===e&&(e=s.date.getDate()),e.getTime()/1e3},from:function(e){return"number"==typeof e?new Date(1e3*e):new Date(e)},format:function(e,t){return t||(t="iso8601"),s.date[t](s.date.from(e))},parseTimestamp:function(e){if("number"==typeof e)return new Date(1e3*e);if(e.match(/^\d+$/))return new Date(1e3*e);if(e.match(/^\d{4}/))return new Date(e);if(e.match(/^\w{3},/))return new Date(e);throw s.error(new Error("unhandled timestamp format: "+e),{code:"TimestampParserError"})}},crypto:{crc32Table:[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],crc32:function(e){var t=s.crypto.crc32Table,n=-1;"string"==typeof e&&(e=s.buffer.toBuffer(e));for(var r=0;r<e.length;r++){n=n>>>8^t[255&(n^e.readUInt8(r))]}return(-1^n)>>>0},hmac:function(e,t,n,r){return n||(n="binary"),"buffer"===n&&(n=void 0),r||(r="sha256"),"string"==typeof t&&(t=s.buffer.toBuffer(t)),s.crypto.lib.createHmac(r,e).update(t).digest(n)},md5:function(e,t,n){return s.crypto.hash("md5",e,t,n)},sha256:function(e,t,n){return s.crypto.hash("sha256",e,t,n)},hash:function(e,t,n,r){var o=s.crypto.createHash(e);n||(n="binary"),"buffer"===n&&(n=void 0),"string"==typeof t&&(t=s.buffer.toBuffer(t));var a=s.arraySliceFn(t),c=s.Buffer.isBuffer(t);if(s.isBrowser()&&"undefined"!=typeof ArrayBuffer&&t&&t.buffer instanceof ArrayBuffer&&(c=!0),r&&"object"===i(t)&&"function"==typeof t.on&&!c)t.on("data",(function(e){o.update(e)})),t.on("error",(function(e){r(e)})),t.on("end",(function(){r(null,o.digest(n))}));else{if(!r||!a||c||"undefined"==typeof FileReader){s.isBrowser()&&"object"===i(t)&&!c&&(t=new s.Buffer(new Uint8Array(t)));var u=o.update(t).digest(n);return r&&r(null,u),u}var l=0,h=new FileReader;h.onerror=function(){r(new Error("Failed to read data."))},h.onload=function(){var e=new s.Buffer(new Uint8Array(h.result));o.update(e),l+=e.length,h._continueReading()},h._continueReading=function(){if(l>=t.size)r(null,o.digest(n));else{var e=l+524288;e>t.size&&(e=t.size),h.readAsArrayBuffer(a.call(t,l,e))}},h._continueReading()}},toHex:function(e){for(var t=[],n=0;n<e.length;n++)t.push(("0"+e.charCodeAt(n).toString(16)).substr(-2,2));return t.join("")},createHash:function(e){return s.crypto.lib.createHash(e)}},abort:{},each:function(e,t){for(var n in e){if(Object.prototype.hasOwnProperty.call(e,n))if(t.call(this,n,e[n])===s.abort)break}},arrayEach:function(e,t){for(var n in e){if(Object.prototype.hasOwnProperty.call(e,n))if(t.call(this,e[n],parseInt(n,10))===s.abort)break}},update:function(e,t){return s.each(t,(function(t,n){e[t]=n})),e},merge:function(e,t){return s.update(s.copy(e),t)},copy:function(e){if(null==e)return e;var t={};for(var n in e)t[n]=e[n];return t},isEmpty:function(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0},arraySliceFn:function(e){var t=e.slice||e.webkitSlice||e.mozSlice;return"function"==typeof t?t:null},isType:function(e,t){return"function"==typeof t&&(t=s.typeName(t)),Object.prototype.toString.call(e)==="[object "+t+"]"},typeName:function(e){if(Object.prototype.hasOwnProperty.call(e,"name"))return e.name;var t=e.toString(),n=t.match(/^\s*function (.+)\(/);return n?n[1]:t},error:function(e,t){var n=null;return"string"==typeof e.message&&""!==e.message&&("string"==typeof t||t&&t.message)&&((n=s.copy(e)).message=e.message),e.message=e.message||null,"string"==typeof t?e.message=t:"object"===i(t)&&null!==t&&(s.update(e,t),t.message&&(e.message=t.message),(t.code||t.name)&&(e.code=t.code||t.name),t.stack&&(e.stack=t.stack)),"function"==typeof Object.defineProperty&&(Object.defineProperty(e,"name",{writable:!0,enumerable:!1}),Object.defineProperty(e,"message",{enumerable:!0})),e.name=t&&t.name||e.name||e.code||"Error",e.time=new Date,n&&(e.originalError=n),e},inherit:function(e,t){var n=null;if(void 0===t)t=e,e=Object,n={};else{var r=function(){};r.prototype=e.prototype,n=new r}return t.constructor===Object&&(t.constructor=function(){if(e!==Object)return e.apply(this,arguments)}),t.constructor.prototype=n,s.update(t.constructor.prototype,t),t.constructor.__super__=e,t.constructor},mixin:function(){for(var e=arguments[0],t=1;t<arguments.length;t++)for(var n in arguments[t].prototype){var r=arguments[t].prototype[n];"constructor"!==n&&(e.prototype[n]=r)}return e},hideProperties:function(e,t){"function"==typeof Object.defineProperty&&s.arrayEach(t,(function(t){Object.defineProperty(e,t,{enumerable:!1,writable:!0,configurable:!0})}))},property:function(e,t,n,r,i){var o={configurable:!0,enumerable:void 0===r||r};"function"!=typeof n||i?(o.value=n,o.writable=!0):o.get=n,Object.defineProperty(e,t,o)},memoizedProperty:function(e,t,n,r){var i=null;s.property(e,t,(function(){return null===i&&(i=n()),i}),r)},hoistPayloadMember:function(e){var t=e.request,n=t.operation,r=t.service.api.operations[n],i=r.output;if(i.payload&&!r.hasEventOutput){var o=i.members[i.payload],a=e.data[i.payload];"structure"===o.type&&s.each(a,(function(t,n){s.property(e.data,t,n,!1)}))}},computeSha256:function(t,n){if(s.isNode()){var r=s.stream.Stream,i=e("fs");if("function"==typeof r&&t instanceof r){if("string"!=typeof t.path)return n(new Error("Non-file stream objects are not supported with SigV4"));var o={};"number"==typeof t.start&&(o.start=t.start),"number"==typeof t.end&&(o.end=t.end),t=i.createReadStream(t.path,o)}}s.crypto.sha256(t,"hex",(function(e,t){e?n(e):n(null,t)}))},isClockSkewed:function(e){if(e)return s.property(o.config,"isClockSkewed",Math.abs((new Date).getTime()-e)>=3e5,!1),o.config.isClockSkewed},applyClockOffset:function(e){e&&(o.config.systemClockOffset=e-(new Date).getTime())},extractRequestId:function(e){var t=e.httpResponse.headers["x-amz-request-id"]||e.httpResponse.headers["x-amzn-requestid"];!t&&e.data&&e.data.ResponseMetadata&&(t=e.data.ResponseMetadata.RequestId),t&&(e.requestId=t),e.error&&(e.error.requestId=t)},addPromises:function(e,t){var n=!1;void 0===t&&o&&o.config&&(t=o.config.getPromisesDependency()),void 0===t&&"undefined"!=typeof Promise&&(t=Promise),"function"!=typeof t&&(n=!0),Array.isArray(e)||(e=[e]);for(var r=0;r<e.length;r++){var i=e[r];n?i.deletePromisesFromClass&&i.deletePromisesFromClass():i.addPromisesToClass&&i.addPromisesToClass(t)}},promisifyMethod:function(e,t){return function(){var n=this,r=Array.prototype.slice.call(arguments);return new t((function(t,i){r.push((function(e,n){e?i(e):t(n)})),n[e].apply(n,r)}))}},isDualstackAvailable:function(t){if(!t)return!1;var n=e("../apis/metadata.json");return"string"!=typeof t&&(t=t.serviceIdentifier),!("string"!=typeof t||!n.hasOwnProperty(t))&&!!n[t].dualstackAvailable},calculateRetryDelay:function(e,t){t||(t={});var n=t.customBackoff||null;if("function"==typeof n)return n(e);var r="number"==typeof t.base?t.base:100;return Math.random()*(Math.pow(2,e)*r)},handleRequestWithRetries:function(e,t,n){t||(t={});var r=o.HttpClient.getInstance(),i=t.httpOptions||{},a=0,c=function(e){var r=t.maxRetries||0;if(e&&"TimeoutError"===e.code&&(e.retryable=!0),e&&e.retryable&&a<r){a++;var i=s.calculateRetryDelay(a,t.retryDelayOptions);setTimeout(u,i+(e.retryAfter||0))}else n(e)},u=function(){var t="";r.handleRequest(e,i,(function(e){e.on("data",(function(e){t+=e.toString()})),e.on("end",(function(){var r=e.statusCode;if(r<300)n(null,t);else{var i=1e3*parseInt(e.headers["retry-after"],10)||0,o=s.error(new Error,{retryable:r>=500||429===r});i&&o.retryable&&(o.retryAfter=i),c(o)}}))}),c)};o.util.defer(u)},uuid:{v4:function(){return e("uuid").v4()}},convertPayloadToString:function(e){var t=e.request,n=t.operation,r=t.service.api.operations[n].output||{};r.payload&&e.data[r.payload]&&(e.data[r.payload]=e.data[r.payload].toString())},defer:function(e){"object"===i(n)&&"function"==typeof n.nextTick?n.nextTick(e):"function"==typeof r?r(e):setTimeout(e,0)},getRequestPayloadShape:function(e){var t=e.service.api.operations;if(t){var n=(t||{})[e.operation];if(n&&n.input&&n.input.payload)return n.input.members[n.input.payload]}},getProfilesFromSharedConfig:function(e,t){var r={},i={};if(n.env[s.configOptInEnv])i=e.loadFrom({isConfig:!0,filename:n.env[s.sharedConfigFileEnv]});for(var o=e.loadFrom({filename:t||n.env[s.configOptInEnv]&&n.env[s.sharedCredentialsFileEnv]}),a=0,c=Object.keys(i);a<c.length;a++)r[c[a]]=i[c[a]];for(a=0,c=Object.keys(o);a<c.length;a++)r[c[a]]=o[c[a]];return r},defaultProfile:"default",configOptInEnv:"AWS_SDK_LOAD_CONFIG",sharedCredentialsFileEnv:"AWS_SHARED_CREDENTIALS_FILE",sharedConfigFileEnv:"AWS_CONFIG_FILE",imdsDisabledEnv:"AWS_EC2_METADATA_DISABLED"};t.exports=s}).call(this,e("_process"),e("timers").setImmediate)},{"../apis/metadata.json":5,"./core":19,_process:86,fs:80,timers:94,uuid:99}],73:[function(e,t,n){var r=e("../util"),i=e("../model/shape");function o(){}function s(e,t){for(var n=e.getElementsByTagName(t),r=0,i=n.length;r<i;r++)if(n[r].parentNode===e)return n[r]}function a(e,t){switch(t||(t={}),t.type){case"structure":return c(e,t);case"map":return function(e,t){var n={},r=t.key.name||"key",i=t.value.name||"value",o=t.flattened?t.name:"entry",c=e.firstElementChild;for(;c;){if(c.nodeName===o){var u=s(c,r).textContent,l=s(c,i);n[u]=a(l,t.value)}c=c.nextElementSibling}return n}(e,t);case"list":return function(e,t){var n=[],r=t.flattened?t.name:t.member.name||"member",i=e.firstElementChild;for(;i;)i.nodeName===r&&n.push(a(i,t.member)),i=i.nextElementSibling;return n}(e,t);case void 0:case null:return function(e){if(null==e)return"";if(!e.firstElementChild)return null===e.parentNode.parentNode?{}:0===e.childNodes.length?"":e.textContent;var t={type:"structure",members:{}},n=e.firstElementChild;for(;n;){var r=n.nodeName;Object.prototype.hasOwnProperty.call(t.members,r)?t.members[r].type="list":t.members[r]={name:r},n=n.nextElementSibling}return c(e,t)}(e);default:return function(e,t){if(e.getAttribute){var n=e.getAttribute("encoding");"base64"===n&&(t=new i.create({type:n}))}var r=e.textContent;""===r&&(r=null);return"function"==typeof t.toType?t.toType(r):r}(e,t)}}function c(e,t){var n={};return null===e?n:(r.each(t.members,(function(t,r){if(r.isXmlAttribute){if(Object.prototype.hasOwnProperty.call(e.attributes,r.name)){var i=e.attributes[r.name].value;n[t]=a({textContent:i},r)}}else{var o=r.flattened?e:s(e,r.name);o?n[t]=a(o,r):r.flattened||"list"!==r.type||(n[t]=r.defaultValue)}})),n)}o.prototype.parse=function(e,t){if(""===e.replace(/^\s+/,""))return{};var n,i;try{if(window.DOMParser){try{n=(new DOMParser).parseFromString(e,"text/xml")}catch(e){throw r.error(new Error("Parse error in document"),{originalError:e,code:"XMLParserError",retryable:!0})}if(null===n.documentElement)throw r.error(new Error("Cannot parse empty document."),{code:"XMLParserError",retryable:!0});var o=n.getElementsByTagName("parsererror")[0];if(o&&(o.parentNode===n||"body"===o.parentNode.nodeName||o.parentNode.parentNode===n||"body"===o.parentNode.parentNode.nodeName)){var c=o.getElementsByTagName("div")[0]||o;throw r.error(new Error(c.textContent||"Parser error in document"),{code:"XMLParserError",retryable:!0})}}else{if(!window.ActiveXObject)throw new Error("Cannot load XML parser");if((n=new window.ActiveXObject("Microsoft.XMLDOM")).async=!1,!n.loadXML(e))throw r.error(new Error("Parse error in document"),{code:"XMLParserError",retryable:!0})}}catch(e){i=e}if(n&&n.documentElement&&!i){var u=a(n.documentElement,t),l=s(n.documentElement,"ResponseMetadata");return l&&(u.ResponseMetadata=a(l,{})),u}if(i)throw r.error(i||new Error,{code:"XMLParserError",retryable:!0});return{}},t.exports=o},{"../model/shape":44,"../util":72}],74:[function(e,t,n){var r=e("../util"),i=e("./xml-node").XmlNode,o=e("./xml-text").XmlText;function s(){}function a(e,t,n){switch(n.type){case"structure":return function(e,t,n){r.arrayEach(n.memberNames,(function(r){var o=n.members[r];if("body"===o.location){var s=t[r],u=o.name;if(null!=s)if(o.isXmlAttribute)e.addAttribute(u,s);else if(o.flattened)a(e,s,o);else{var l=new i(u);e.addChildNode(l),c(l,o),a(l,s,o)}}}))}(e,t,n);case"map":return function(e,t,n){var o=n.key.name||"key",s=n.value.name||"value";r.each(t,(function(t,r){var c=new i(n.flattened?n.name:"entry");e.addChildNode(c);var u=new i(o),l=new i(s);c.addChildNode(u),c.addChildNode(l),a(u,t,n.key),a(l,r,n.value)}))}(e,t,n);case"list":return function(e,t,n){n.flattened?r.arrayEach(t,(function(t){var r=n.member.name||n.name,o=new i(r);e.addChildNode(o),a(o,t,n.member)})):r.arrayEach(t,(function(t){var r=n.member.name||"member",o=new i(r);e.addChildNode(o),a(o,t,n.member)}))}(e,t,n);default:return function(e,t,n){e.addChildNode(new o(n.toWireFormat(t)))}(e,t,n)}}function c(e,t,n){var r,i="xmlns";t.xmlNamespaceUri?(r=t.xmlNamespaceUri,t.xmlNamespacePrefix&&(i+=":"+t.xmlNamespacePrefix)):n&&t.api.xmlNamespaceUri&&(r=t.api.xmlNamespaceUri),r&&e.addAttribute(i,r)}s.prototype.toXML=function(e,t,n,r){var o=new i(n);return c(o,t,!0),a(o,e,t),o.children.length>0||r?o.toString():""},t.exports=s},{"../util":72,"./xml-node":77,"./xml-text":78}],75:[function(e,t,n){t.exports={escapeAttribute:function(e){return e.replace(/&/g,"&amp;").replace(/'/g,"&apos;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")}}},{}],76:[function(e,t,n){t.exports={escapeElement:function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}}},{}],77:[function(e,t,n){var r=e("./escape-attribute").escapeAttribute;function i(e,t){void 0===t&&(t=[]),this.name=e,this.children=t,this.attributes={}}i.prototype.addAttribute=function(e,t){return this.attributes[e]=t,this},i.prototype.addChildNode=function(e){return this.children.push(e),this},i.prototype.removeAttribute=function(e){return delete this.attributes[e],this},i.prototype.toString=function(){for(var e=Boolean(this.children.length),t="<"+this.name,n=this.attributes,i=0,o=Object.keys(n);i<o.length;i++){var s=o[i],a=n[s];null!=a&&(t+=" "+s+'="'+r(""+a)+'"')}return t+(e?">"+this.children.map((function(e){return e.toString()})).join("")+"</"+this.name+">":"/>")},t.exports={XmlNode:i}},{"./escape-attribute":75}],78:[function(e,t,n){var r=e("./escape-element").escapeElement;function i(e){this.value=e}i.prototype.toString=function(){return r(""+this.value)},t.exports={XmlText:i}},{"./escape-element":76}],79:[function(e,t,n){"use strict";n.byteLength=function(e){var t=u(e),n=t[0],r=t[1];return 3*(n+r)/4-r},n.toByteArray=function(e){var t,n,r=u(e),s=r[0],a=r[1],c=new o(function(e,t,n){return 3*(t+n)/4-n}(0,s,a)),l=0,h=a>0?s-4:s;for(n=0;n<h;n+=4)t=i[e.charCodeAt(n)]<<18|i[e.charCodeAt(n+1)]<<12|i[e.charCodeAt(n+2)]<<6|i[e.charCodeAt(n+3)],c[l++]=t>>16&255,c[l++]=t>>8&255,c[l++]=255&t;2===a&&(t=i[e.charCodeAt(n)]<<2|i[e.charCodeAt(n+1)]>>4,c[l++]=255&t);1===a&&(t=i[e.charCodeAt(n)]<<10|i[e.charCodeAt(n+1)]<<4|i[e.charCodeAt(n+2)]>>2,c[l++]=t>>8&255,c[l++]=255&t);return c},n.fromByteArray=function(e){for(var t,n=e.length,i=n%3,o=[],s=0,a=n-i;s<a;s+=16383)o.push(l(e,s,s+16383>a?a:s+16383));1===i?(t=e[n-1],o.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],o.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,c=s.length;a<c;++a)r[a]=s[a],i[s.charCodeAt(a)]=a;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function l(e,t,n){for(var i,o,s=[],a=t;a<n;a+=3)i=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},{}],80:[function(e,t,n){},{}],81:[function(t,n,r){(function(e,n){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */"use strict";var i=t("base64-js"),o=t("ieee754"),s=t("isarray");function a(){return n.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function c(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return n.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=n.prototype:(null===e&&(e=new n(t)),e.length=t),e}function n(e,t,r){if(!(n.TYPED_ARRAY_SUPPORT||this instanceof n))return new n(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return u(this,e,t,r)}function u(e,t,r,i){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,i){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(i||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===i?new Uint8Array(t):void 0===i?new Uint8Array(t,r):new Uint8Array(t,r,i);n.TYPED_ARRAY_SUPPORT?(e=t).__proto__=n.prototype:e=p(e,t);return e}(e,t,r,i):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!n.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var i=0|d(t,r),o=(e=c(e,i)).write(t,r);o!==i&&(e=e.slice(0,o));return e}(e,t,r):function(e,t){if(n.isBuffer(t)){var r=0|f(t.length);return 0===(e=c(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(i=t.length)!=i?c(e,0):p(e,t);if("Buffer"===t.type&&s(t.data))return p(e,t.data)}var i;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(l(t),e=c(e,t<0?0:0|f(t)),!n.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function p(e,t){var n=t.length<0?0:0|f(t.length);e=c(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function f(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function d(e,t){if(n.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var i=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return F(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return H(e).length;default:if(i)return F(e).length;t=(""+t).toLowerCase(),i=!0}}function g(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return x(this,t,n);case"utf8":case"utf-8":return I(this,t,n);case"ascii":return A(this,t,n);case"latin1":case"binary":return R(this,t,n);case"base64":return k(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function m(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function v(e,t,r,i,o){if(0===e.length)return-1;if("string"==typeof r?(i=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=n.from(t,i)),n.isBuffer(t))return 0===t.length?-1:y(e,t,r,i,o);if("number"==typeof t)return t&=255,n.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):y(e,[t],r,i,o);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,r,i){var o,s=1,a=e.length,c=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;s=2,a/=2,c/=2,n/=2}function u(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){var l=-1;for(o=n;o<a;o++)if(u(e,o)===u(t,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===c)return l*s}else-1!==l&&(o-=o-l),l=-1}else for(n+c>a&&(n=a-c),o=n;o>=0;o--){for(var h=!0,p=0;p<c;p++)if(u(e,o+p)!==u(t,p)){h=!1;break}if(h)return o}return-1}function b(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[n+s]=a}return s}function w(e,t,n,r){return z(F(t,e.length-n),e,n,r)}function _(e,t,n,r){return z(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function S(e,t,n,r){return _(e,t,n,r)}function E(e,t,n,r){return z(H(t),e,n,r)}function C(e,t,n,r){return z(function(e,t){for(var n,r,i,o=[],s=0;s<e.length&&!((t-=2)<0);++s)n=e.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(t,e.length-n),e,n,r)}function k(e,t,n){return 0===t&&n===e.length?i.fromByteArray(e):i.fromByteArray(e.slice(t,n))}function I(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var o,s,a,c,u=e[i],l=null,h=u>239?4:u>223?3:u>191?2:1;if(i+h<=n)switch(h){case 1:u<128&&(l=u);break;case 2:128==(192&(o=e[i+1]))&&(c=(31&u)<<6|63&o)>127&&(l=c);break;case 3:o=e[i+1],s=e[i+2],128==(192&o)&&128==(192&s)&&(c=(15&u)<<12|(63&o)<<6|63&s)>2047&&(c<55296||c>57343)&&(l=c);break;case 4:o=e[i+1],s=e[i+2],a=e[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(c=(15&u)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&c<1114112&&(l=c)}null===l?(l=65533,h=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),i+=h}return function(e){var t=e.length;if(t<=T)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=T));return n}(r)}r.Buffer=n,r.SlowBuffer=function(e){+e!=e&&(e=0);return n.alloc(+e)},r.INSPECT_MAX_BYTES=50,n.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),r.kMaxLength=a(),n.poolSize=8192,n._augment=function(e){return e.__proto__=n.prototype,e},n.from=function(e,t,n){return u(null,e,t,n)},n.TYPED_ARRAY_SUPPORT&&(n.prototype.__proto__=Uint8Array.prototype,n.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&n[Symbol.species]===n&&Object.defineProperty(n,Symbol.species,{value:null,configurable:!0})),n.alloc=function(e,t,n){return function(e,t,n,r){return l(t),t<=0?c(e,t):void 0!==n?"string"==typeof r?c(e,t).fill(n,r):c(e,t).fill(n):c(e,t)}(null,e,t,n)},n.allocUnsafe=function(e){return h(null,e)},n.allocUnsafeSlow=function(e){return h(null,e)},n.isBuffer=function(e){return!(null==e||!e._isBuffer)},n.compare=function(e,t){if(!n.isBuffer(e)||!n.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,i=t.length,o=0,s=Math.min(r,i);o<s;++o)if(e[o]!==t[o]){r=e[o],i=t[o];break}return r<i?-1:i<r?1:0},n.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},n.concat=function(e,t){if(!s(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return n.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var i=n.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var a=e[r];if(!n.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(i,o),o+=a.length}return i},n.byteLength=d,n.prototype._isBuffer=!0,n.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)m(this,t,t+1);return this},n.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},n.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},n.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?I(this,0,e):g.apply(this,arguments)},n.prototype.equals=function(e){if(!n.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===n.compare(this,e)},n.prototype.inspect=function(){var e="",t=r.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},n.prototype.compare=function(e,t,r,i,o){if(!n.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===i&&(i=0),void 0===o&&(o=this.length),t<0||r>e.length||i<0||o>this.length)throw new RangeError("out of range index");if(i>=o&&t>=r)return 0;if(i>=o)return-1;if(t>=r)return 1;if(this===e)return 0;for(var s=(o>>>=0)-(i>>>=0),a=(r>>>=0)-(t>>>=0),c=Math.min(s,a),u=this.slice(i,o),l=e.slice(t,r),h=0;h<c;++h)if(u[h]!==l[h]){s=u[h],a=l[h];break}return s<a?-1:a<s?1:0},n.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},n.prototype.indexOf=function(e,t,n){return v(this,e,t,n,!0)},n.prototype.lastIndexOf=function(e,t,n){return v(this,e,t,n,!1)},n.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return b(this,e,t,n);case"utf8":case"utf-8":return w(this,e,t,n);case"ascii":return _(this,e,t,n);case"latin1":case"binary":return S(this,e,t,n);case"base64":return E(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},n.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var T=4096;function A(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function R(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function x(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=t;o<n;++o)i+=B(e[o]);return i}function P(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function O(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function N(e,t,r,i,o,s){if(!n.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<s)throw new RangeError('"value" argument is out of bounds');if(r+i>e.length)throw new RangeError("Index out of range")}function L(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-n,2);i<o;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function M(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-n,4);i<o;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function D(e,t,n,r,i,o){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function q(e,t,n,r,i){return i||D(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function U(e,t,n,r,i){return i||D(e,0,n,8),o.write(e,t,n,r,52,8),n+8}n.prototype.slice=function(e,t){var r,i=this.length;if((e=~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),(t=void 0===t?i:~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),t<e&&(t=e),n.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=n.prototype;else{var o=t-e;r=new n(o,void 0);for(var s=0;s<o;++s)r[s]=this[s+e]}return r},n.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r},n.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=this[e+--t],i=1;t>0&&(i*=256);)r+=this[e+--t]*i;return r},n.prototype.readUInt8=function(e,t){return t||O(e,1,this.length),this[e]},n.prototype.readUInt16LE=function(e,t){return t||O(e,2,this.length),this[e]|this[e+1]<<8},n.prototype.readUInt16BE=function(e,t){return t||O(e,2,this.length),this[e]<<8|this[e+1]},n.prototype.readUInt32LE=function(e,t){return t||O(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},n.prototype.readUInt32BE=function(e,t){return t||O(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},n.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*t)),r},n.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=t,i=1,o=this[e+--r];r>0&&(i*=256);)o+=this[e+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},n.prototype.readInt8=function(e,t){return t||O(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},n.prototype.readInt16LE=function(e,t){t||O(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},n.prototype.readInt16BE=function(e,t){t||O(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},n.prototype.readInt32LE=function(e,t){return t||O(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},n.prototype.readInt32BE=function(e,t){return t||O(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},n.prototype.readFloatLE=function(e,t){return t||O(e,4,this.length),o.read(this,e,!0,23,4)},n.prototype.readFloatBE=function(e,t){return t||O(e,4,this.length),o.read(this,e,!1,23,4)},n.prototype.readDoubleLE=function(e,t){return t||O(e,8,this.length),o.read(this,e,!0,52,8)},n.prototype.readDoubleBE=function(e,t){return t||O(e,8,this.length),o.read(this,e,!1,52,8)},n.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[t]=255&e;++o<n&&(i*=256);)this[t+o]=e/i&255;return t+n},n.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+n},n.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,1,255,0),n.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},n.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,2,65535,0),n.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},n.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,2,65535,0),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},n.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,4,4294967295,0),n.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):M(this,e,t,!0),t+4},n.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,4,4294967295,0),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):M(this,e,t,!1),t+4},n.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);N(this,e,t,n,i-1,-i)}var o=0,s=1,a=0;for(this[t]=255&e;++o<n&&(s*=256);)e<0&&0===a&&0!==this[t+o-1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},n.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);N(this,e,t,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[t+o]=255&e;--o>=0&&(s*=256);)e<0&&0===a&&0!==this[t+o+1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},n.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,1,127,-128),n.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},n.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,2,32767,-32768),n.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},n.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,2,32767,-32768),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},n.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,4,2147483647,-2147483648),n.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):M(this,e,t,!0),t+4},n.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):M(this,e,t,!1),t+4},n.prototype.writeFloatLE=function(e,t,n){return q(this,e,t,!0,n)},n.prototype.writeFloatBE=function(e,t,n){return q(this,e,t,!1,n)},n.prototype.writeDoubleLE=function(e,t,n){return U(this,e,t,!0,n)},n.prototype.writeDoubleBE=function(e,t,n){return U(this,e,t,!1,n)},n.prototype.copy=function(e,t,r,i){if(r||(r=0),i||0===i||(i=this.length),t>=e.length&&(t=e.length),t||(t=0),i>0&&i<r&&(i=r),i===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-t<i-r&&(i=e.length-t+r);var o,s=i-r;if(this===e&&r<t&&t<i)for(o=s-1;o>=0;--o)e[o+t]=this[o+r];else if(s<1e3||!n.TYPED_ARRAY_SUPPORT)for(o=0;o<s;++o)e[o+t]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+s),t);return s},n.prototype.fill=function(e,t,r,i){if("string"==typeof e){if("string"==typeof t?(i=t,t=0,r=this.length):"string"==typeof r&&(i=r,r=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!n.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var s;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(s=t;s<r;++s)this[s]=e;else{var a=n.isBuffer(e)?e:F(new n(e,i).toString()),c=a.length;for(s=0;s<r-t;++s)this[s+t]=a[s%c]}return this};var j=/[^+\/0-9A-Za-z-_]/g;function B(e){return e<16?"0"+e.toString(16):e.toString(16)}function F(e,t){var n;t=t||1/0;for(var r=e.length,i=null,o=[],s=0;s<r;++s){if((n=e.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function H(e){return i.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(j,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function z(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}}).call(this,void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t("buffer").Buffer)},{"base64-js":79,buffer:81,ieee754:83,isarray:84}],82:[function(e,t,n){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function o(e){return"function"==typeof e}function s(e){return"object"===i(e)&&null!==e}function a(e){return void 0===e}t.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},r.prototype.emit=function(e){var t,n,r,i,c,u;if(this._events||(this._events={}),"error"===e&&(!this._events.error||s(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var l=new Error('Uncaught, unspecified "error" event. ('+t+")");throw l.context=t,l}if(a(n=this._events[e]))return!1;if(o(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:i=Array.prototype.slice.call(arguments,1),n.apply(this,i)}else if(s(n))for(i=Array.prototype.slice.call(arguments,1),r=(u=n.slice()).length,c=0;c<r;c++)u[c].apply(this,i);return!0},r.prototype.addListener=function(e,t){var n;if(!o(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,o(t.listener)?t.listener:t),this._events[e]?s(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,s(this._events[e])&&!this._events[e].warned&&(n=a(this._maxListeners)?r.defaultMaxListeners:this._maxListeners)&&n>0&&this._events[e].length>n&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(e,t){if(!o(t))throw TypeError("listener must be a function");var n=!1;function r(){this.removeListener(e,r),n||(n=!0,t.apply(this,arguments))}return r.listener=t,this.on(e,r),this},r.prototype.removeListener=function(e,t){var n,r,i,a;if(!o(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(i=(n=this._events[e]).length,r=-1,n===t||o(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(s(n)){for(a=i;a-- >0;)if(n[a]===t||n[a].listener&&n[a].listener===t){r=a;break}if(r<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(r,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},r.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(o(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},r.prototype.listeners=function(e){return this._events&&this._events[e]?o(this._events[e])?[this._events[e]]:this._events[e].slice():[]},r.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(o(t))return 1;if(t)return t.length}return 0},r.listenerCount=function(e,t){return e.listenerCount(t)}},{}],83:[function(e,t,n){n.read=function(e,t,n,r,i){var o,s,a=8*i-r-1,c=(1<<a)-1,u=c>>1,l=-7,h=n?i-1:0,p=n?-1:1,f=e[t+h];for(h+=p,o=f&(1<<-l)-1,f>>=-l,l+=a;l>0;o=256*o+e[t+h],h+=p,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=r;l>0;s=256*s+e[t+h],h+=p,l-=8);if(0===o)o=1-u;else{if(o===c)return s?NaN:1/0*(f?-1:1);s+=Math.pow(2,r),o-=u}return(f?-1:1)*s*Math.pow(2,o-r)},n.write=function(e,t,n,r,i,o){var s,a,c,u=8*o-i-1,l=(1<<u)-1,h=l>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,f=r?0:o-1,d=r?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-s))<1&&(s--,c*=2),(t+=s+h>=1?p/c:p*Math.pow(2,1-h))*c>=2&&(s++,c/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(t*c-1)*Math.pow(2,i),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;e[n+f]=255&a,f+=d,a/=256,i-=8);for(s=s<<i|a,u+=i;u>0;e[n+f]=255&s,f+=d,s/=256,u-=8);e[n+f-d]|=128*g}},{}],84:[function(e,t,n){var r={}.toString;t.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},{}],85:[function(e,t,n){!function(e){"use strict";function t(e){return null!==e&&"[object Array]"===Object.prototype.toString.call(e)}function n(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)}function r(e,i){if(e===i)return!0;if(Object.prototype.toString.call(e)!==Object.prototype.toString.call(i))return!1;if(!0===t(e)){if(e.length!==i.length)return!1;for(var o=0;o<e.length;o++)if(!1===r(e[o],i[o]))return!1;return!0}if(!0===n(e)){var s={};for(var a in e)if(hasOwnProperty.call(e,a)){if(!1===r(e[a],i[a]))return!1;s[a]=!0}for(var c in i)if(hasOwnProperty.call(i,c)&&!0!==s[c])return!1;return!0}return!1}function i(e){if(""===e||!1===e||null===e)return!0;if(t(e)&&0===e.length)return!0;if(n(e)){for(var r in e)if(e.hasOwnProperty(r))return!1;return!0}return!1}var o;o="function"==typeof String.prototype.trimLeft?function(e){return e.trimLeft()}:function(e){return e.match(/^\s*(.*)/)[1]};var s=0,a=1,c=2,u=3,l=4,h=6,p=8,f=9,d={".":"Dot","*":"Star",",":"Comma",":":"Colon","{":"Lbrace","}":"Rbrace","]":"Rbracket","(":"Lparen",")":"Rparen","@":"Current"},g={"<":!0,">":!0,"=":!0,"!":!0},m={" ":!0,"\t":!0,"\n":!0};function v(e){return e>="0"&&e<="9"||"-"===e}function y(){}y.prototype={tokenize:function(e){var t,n,r,i,o=[];for(this._current=0;this._current<e.length;)if((i=e[this._current])>="a"&&i<="z"||i>="A"&&i<="Z"||"_"===i)t=this._current,n=this._consumeUnquotedIdentifier(e),o.push({type:"UnquotedIdentifier",value:n,start:t});else if(void 0!==d[e[this._current]])o.push({type:d[e[this._current]],value:e[this._current],start:this._current}),this._current++;else if(v(e[this._current]))r=this._consumeNumber(e),o.push(r);else if("["===e[this._current])r=this._consumeLBracket(e),o.push(r);else if('"'===e[this._current])t=this._current,n=this._consumeQuotedIdentifier(e),o.push({type:"QuotedIdentifier",value:n,start:t});else if("'"===e[this._current])t=this._current,n=this._consumeRawStringLiteral(e),o.push({type:"Literal",value:n,start:t});else if("`"===e[this._current]){t=this._current;var s=this._consumeLiteral(e);o.push({type:"Literal",value:s,start:t})}else if(void 0!==g[e[this._current]])o.push(this._consumeOperator(e));else if(void 0!==m[e[this._current]])this._current++;else if("&"===e[this._current])t=this._current,this._current++,"&"===e[this._current]?(this._current++,o.push({type:"And",value:"&&",start:t})):o.push({type:"Expref",value:"&",start:t});else{if("|"!==e[this._current]){var a=new Error("Unknown character:"+e[this._current]);throw a.name="LexerError",a}t=this._current,this._current++,"|"===e[this._current]?(this._current++,o.push({type:"Or",value:"||",start:t})):o.push({type:"Pipe",value:"|",start:t})}return o},_consumeUnquotedIdentifier:function(e){var t,n=this._current;for(this._current++;this._current<e.length&&((t=e[this._current])>="a"&&t<="z"||t>="A"&&t<="Z"||t>="0"&&t<="9"||"_"===t);)this._current++;return e.slice(n,this._current)},_consumeQuotedIdentifier:function(e){var t=this._current;this._current++;for(var n=e.length;'"'!==e[this._current]&&this._current<n;){var r=this._current;"\\"!==e[r]||"\\"!==e[r+1]&&'"'!==e[r+1]?r++:r+=2,this._current=r}return this._current++,JSON.parse(e.slice(t,this._current))},_consumeRawStringLiteral:function(e){var t=this._current;this._current++;for(var n=e.length;"'"!==e[this._current]&&this._current<n;){var r=this._current;"\\"!==e[r]||"\\"!==e[r+1]&&"'"!==e[r+1]?r++:r+=2,this._current=r}return this._current++,e.slice(t+1,this._current-1).replace("\\'","'")},_consumeNumber:function(e){var t=this._current;this._current++;for(var n=e.length;v(e[this._current])&&this._current<n;)this._current++;return{type:"Number",value:parseInt(e.slice(t,this._current)),start:t}},_consumeLBracket:function(e){var t=this._current;return this._current++,"?"===e[this._current]?(this._current++,{type:"Filter",value:"[?",start:t}):"]"===e[this._current]?(this._current++,{type:"Flatten",value:"[]",start:t}):{type:"Lbracket",value:"[",start:t}},_consumeOperator:function(e){var t=this._current,n=e[t];return this._current++,"!"===n?"="===e[this._current]?(this._current++,{type:"NE",value:"!=",start:t}):{type:"Not",value:"!",start:t}:"<"===n?"="===e[this._current]?(this._current++,{type:"LTE",value:"<=",start:t}):{type:"LT",value:"<",start:t}:">"===n?"="===e[this._current]?(this._current++,{type:"GTE",value:">=",start:t}):{type:"GT",value:">",start:t}:"="===n&&"="===e[this._current]?(this._current++,{type:"EQ",value:"==",start:t}):void 0},_consumeLiteral:function(e){this._current++;for(var t,n=this._current,r=e.length;"`"!==e[this._current]&&this._current<r;){var i=this._current;"\\"!==e[i]||"\\"!==e[i+1]&&"`"!==e[i+1]?i++:i+=2,this._current=i}var s=o(e.slice(n,this._current));return s=s.replace("\\`","`"),t=this._looksLikeJSON(s)?JSON.parse(s):JSON.parse('"'+s+'"'),this._current++,t},_looksLikeJSON:function(e){if(""===e)return!1;if('[{"'.indexOf(e[0])>=0)return!0;if(["true","false","null"].indexOf(e)>=0)return!0;if(!("-0123456789".indexOf(e[0])>=0))return!1;try{return JSON.parse(e),!0}catch(e){return!1}}};var b={};function w(){}function _(e){this.runtime=e}function S(e){this._interpreter=e,this.functionTable={abs:{_func:this._functionAbs,_signature:[{types:[s]}]},avg:{_func:this._functionAvg,_signature:[{types:[p]}]},ceil:{_func:this._functionCeil,_signature:[{types:[s]}]},contains:{_func:this._functionContains,_signature:[{types:[c,u]},{types:[a]}]},ends_with:{_func:this._functionEndsWith,_signature:[{types:[c]},{types:[c]}]},floor:{_func:this._functionFloor,_signature:[{types:[s]}]},length:{_func:this._functionLength,_signature:[{types:[c,u,l]}]},map:{_func:this._functionMap,_signature:[{types:[h]},{types:[u]}]},max:{_func:this._functionMax,_signature:[{types:[p,f]}]},merge:{_func:this._functionMerge,_signature:[{types:[l],variadic:!0}]},max_by:{_func:this._functionMaxBy,_signature:[{types:[u]},{types:[h]}]},sum:{_func:this._functionSum,_signature:[{types:[p]}]},starts_with:{_func:this._functionStartsWith,_signature:[{types:[c]},{types:[c]}]},min:{_func:this._functionMin,_signature:[{types:[p,f]}]},min_by:{_func:this._functionMinBy,_signature:[{types:[u]},{types:[h]}]},type:{_func:this._functionType,_signature:[{types:[a]}]},keys:{_func:this._functionKeys,_signature:[{types:[l]}]},values:{_func:this._functionValues,_signature:[{types:[l]}]},sort:{_func:this._functionSort,_signature:[{types:[f,p]}]},sort_by:{_func:this._functionSortBy,_signature:[{types:[u]},{types:[h]}]},join:{_func:this._functionJoin,_signature:[{types:[c]},{types:[f]}]},reverse:{_func:this._functionReverse,_signature:[{types:[c,u]}]},to_array:{_func:this._functionToArray,_signature:[{types:[a]}]},to_string:{_func:this._functionToString,_signature:[{types:[a]}]},to_number:{_func:this._functionToNumber,_signature:[{types:[a]}]},not_null:{_func:this._functionNotNull,_signature:[{types:[a],variadic:!0}]}}}b.EOF=0,b.UnquotedIdentifier=0,b.QuotedIdentifier=0,b.Rbracket=0,b.Rparen=0,b.Comma=0,b.Rbrace=0,b.Number=0,b.Current=0,b.Expref=0,b.Pipe=1,b.Or=2,b.And=3,b.EQ=5,b.GT=5,b.LT=5,b.GTE=5,b.LTE=5,b.NE=5,b.Flatten=9,b.Star=20,b.Filter=21,b.Dot=40,b.Not=45,b.Lbrace=50,b.Lbracket=55,b.Lparen=60,w.prototype={parse:function(e){this._loadTokens(e),this.index=0;var t=this.expression(0);if("EOF"!==this._lookahead(0)){var n=this._lookaheadToken(0),r=new Error("Unexpected token type: "+n.type+", value: "+n.value);throw r.name="ParserError",r}return t},_loadTokens:function(e){var t=(new y).tokenize(e);t.push({type:"EOF",value:"",start:e.length}),this.tokens=t},expression:function(e){var t=this._lookaheadToken(0);this._advance();for(var n=this.nud(t),r=this._lookahead(0);e<b[r];)this._advance(),n=this.led(r,n),r=this._lookahead(0);return n},_lookahead:function(e){return this.tokens[this.index+e].type},_lookaheadToken:function(e){return this.tokens[this.index+e]},_advance:function(){this.index++},nud:function(e){var t,n;switch(e.type){case"Literal":return{type:"Literal",value:e.value};case"UnquotedIdentifier":return{type:"Field",name:e.value};case"QuotedIdentifier":var r={type:"Field",name:e.value};if("Lparen"===this._lookahead(0))throw new Error("Quoted identifier not allowed for function names.");return r;case"Not":return{type:"NotExpression",children:[t=this.expression(b.Not)]};case"Star":return t=null,{type:"ValueProjection",children:[{type:"Identity"},t="Rbracket"===this._lookahead(0)?{type:"Identity"}:this._parseProjectionRHS(b.Star)]};case"Filter":return this.led(e.type,{type:"Identity"});case"Lbrace":return this._parseMultiselectHash();case"Flatten":return{type:"Projection",children:[{type:"Flatten",children:[{type:"Identity"}]},t=this._parseProjectionRHS(b.Flatten)]};case"Lbracket":return"Number"===this._lookahead(0)||"Colon"===this._lookahead(0)?(t=this._parseIndexExpression(),this._projectIfSlice({type:"Identity"},t)):"Star"===this._lookahead(0)&&"Rbracket"===this._lookahead(1)?(this._advance(),this._advance(),{type:"Projection",children:[{type:"Identity"},t=this._parseProjectionRHS(b.Star)]}):this._parseMultiselectList();case"Current":return{type:"Current"};case"Expref":return{type:"ExpressionReference",children:[n=this.expression(b.Expref)]};case"Lparen":for(var i=[];"Rparen"!==this._lookahead(0);)"Current"===this._lookahead(0)?(n={type:"Current"},this._advance()):n=this.expression(0),i.push(n);return this._match("Rparen"),i[0];default:this._errorToken(e)}},led:function(e,t){var n;switch(e){case"Dot":var r=b.Dot;return"Star"!==this._lookahead(0)?{type:"Subexpression",children:[t,n=this._parseDotRHS(r)]}:(this._advance(),{type:"ValueProjection",children:[t,n=this._parseProjectionRHS(r)]});case"Pipe":return{type:"Pipe",children:[t,n=this.expression(b.Pipe)]};case"Or":return{type:"OrExpression",children:[t,n=this.expression(b.Or)]};case"And":return{type:"AndExpression",children:[t,n=this.expression(b.And)]};case"Lparen":for(var i,o=t.name,s=[];"Rparen"!==this._lookahead(0);)"Current"===this._lookahead(0)?(i={type:"Current"},this._advance()):i=this.expression(0),"Comma"===this._lookahead(0)&&this._match("Comma"),s.push(i);return this._match("Rparen"),{type:"Function",name:o,children:s};case"Filter":var a=this.expression(0);return this._match("Rbracket"),{type:"FilterProjection",children:[t,n="Flatten"===this._lookahead(0)?{type:"Identity"}:this._parseProjectionRHS(b.Filter),a]};case"Flatten":return{type:"Projection",children:[{type:"Flatten",children:[t]},this._parseProjectionRHS(b.Flatten)]};case"EQ":case"NE":case"GT":case"GTE":case"LT":case"LTE":return this._parseComparator(t,e);case"Lbracket":var c=this._lookaheadToken(0);return"Number"===c.type||"Colon"===c.type?(n=this._parseIndexExpression(),this._projectIfSlice(t,n)):(this._match("Star"),this._match("Rbracket"),{type:"Projection",children:[t,n=this._parseProjectionRHS(b.Star)]});default:this._errorToken(this._lookaheadToken(0))}},_match:function(e){if(this._lookahead(0)!==e){var t=this._lookaheadToken(0),n=new Error("Expected "+e+", got: "+t.type);throw n.name="ParserError",n}this._advance()},_errorToken:function(e){var t=new Error("Invalid token ("+e.type+'): "'+e.value+'"');throw t.name="ParserError",t},_parseIndexExpression:function(){if("Colon"===this._lookahead(0)||"Colon"===this._lookahead(1))return this._parseSliceExpression();var e={type:"Index",value:this._lookaheadToken(0).value};return this._advance(),this._match("Rbracket"),e},_projectIfSlice:function(e,t){var n={type:"IndexExpression",children:[e,t]};return"Slice"===t.type?{type:"Projection",children:[n,this._parseProjectionRHS(b.Star)]}:n},_parseSliceExpression:function(){for(var e=[null,null,null],t=0,n=this._lookahead(0);"Rbracket"!==n&&t<3;){if("Colon"===n)t++,this._advance();else{if("Number"!==n){var r=this._lookahead(0),i=new Error("Syntax error, unexpected token: "+r.value+"("+r.type+")");throw i.name="Parsererror",i}e[t]=this._lookaheadToken(0).value,this._advance()}n=this._lookahead(0)}return this._match("Rbracket"),{type:"Slice",children:e}},_parseComparator:function(e,t){return{type:"Comparator",name:t,children:[e,this.expression(b[t])]}},_parseDotRHS:function(e){var t=this._lookahead(0);return["UnquotedIdentifier","QuotedIdentifier","Star"].indexOf(t)>=0?this.expression(e):"Lbracket"===t?(this._match("Lbracket"),this._parseMultiselectList()):"Lbrace"===t?(this._match("Lbrace"),this._parseMultiselectHash()):void 0},_parseProjectionRHS:function(e){var t;if(b[this._lookahead(0)]<10)t={type:"Identity"};else if("Lbracket"===this._lookahead(0))t=this.expression(e);else if("Filter"===this._lookahead(0))t=this.expression(e);else{if("Dot"!==this._lookahead(0)){var n=this._lookaheadToken(0),r=new Error("Sytanx error, unexpected token: "+n.value+"("+n.type+")");throw r.name="ParserError",r}this._match("Dot"),t=this._parseDotRHS(e)}return t},_parseMultiselectList:function(){for(var e=[];"Rbracket"!==this._lookahead(0);){var t=this.expression(0);if(e.push(t),"Comma"===this._lookahead(0)&&(this._match("Comma"),"Rbracket"===this._lookahead(0)))throw new Error("Unexpected token Rbracket")}return this._match("Rbracket"),{type:"MultiSelectList",children:e}},_parseMultiselectHash:function(){for(var e,t,n,r=[],i=["UnquotedIdentifier","QuotedIdentifier"];;){if(e=this._lookaheadToken(0),i.indexOf(e.type)<0)throw new Error("Expecting an identifier token, got: "+e.type);if(t=e.value,this._advance(),this._match("Colon"),n={type:"KeyValuePair",name:t,value:this.expression(0)},r.push(n),"Comma"===this._lookahead(0))this._match("Comma");else if("Rbrace"===this._lookahead(0)){this._match("Rbrace");break}}return{type:"MultiSelectHash",children:r}}},_.prototype={search:function(e,t){return this.visit(e,t)},visit:function(e,o){var s,a,c,u,l,h,p,f,d;switch(e.type){case"Field":return null===o?null:n(o)?void 0===(h=o[e.name])?null:h:null;case"Subexpression":for(c=this.visit(e.children[0],o),d=1;d<e.children.length;d++)if(null===(c=this.visit(e.children[1],c)))return null;return c;case"IndexExpression":return p=this.visit(e.children[0],o),this.visit(e.children[1],p);case"Index":if(!t(o))return null;var g=e.value;return g<0&&(g=o.length+g),void 0===(c=o[g])&&(c=null),c;case"Slice":if(!t(o))return null;var m=e.children.slice(0),v=this.computeSliceParams(o.length,m),y=v[0],b=v[1],w=v[2];if(c=[],w>0)for(d=y;d<b;d+=w)c.push(o[d]);else for(d=y;d>b;d+=w)c.push(o[d]);return c;case"Projection":var _=this.visit(e.children[0],o);if(!t(_))return null;for(f=[],d=0;d<_.length;d++)null!==(a=this.visit(e.children[1],_[d]))&&f.push(a);return f;case"ValueProjection":if(!n(_=this.visit(e.children[0],o)))return null;f=[];var S=function(e){for(var t=Object.keys(e),n=[],r=0;r<t.length;r++)n.push(e[t[r]]);return n}(_);for(d=0;d<S.length;d++)null!==(a=this.visit(e.children[1],S[d]))&&f.push(a);return f;case"FilterProjection":if(!t(_=this.visit(e.children[0],o)))return null;var E=[],C=[];for(d=0;d<_.length;d++)i(s=this.visit(e.children[2],_[d]))||E.push(_[d]);for(var k=0;k<E.length;k++)null!==(a=this.visit(e.children[1],E[k]))&&C.push(a);return C;case"Comparator":switch(u=this.visit(e.children[0],o),l=this.visit(e.children[1],o),e.name){case"EQ":c=r(u,l);break;case"NE":c=!r(u,l);break;case"GT":c=u>l;break;case"GTE":c=u>=l;break;case"LT":c=u<l;break;case"LTE":c=u<=l;break;default:throw new Error("Unknown comparator: "+e.name)}return c;case"Flatten":var I=this.visit(e.children[0],o);if(!t(I))return null;var T=[];for(d=0;d<I.length;d++)t(a=I[d])?T.push.apply(T,a):T.push(a);return T;case"Identity":return o;case"MultiSelectList":if(null===o)return null;for(f=[],d=0;d<e.children.length;d++)f.push(this.visit(e.children[d],o));return f;case"MultiSelectHash":if(null===o)return null;var A;for(f={},d=0;d<e.children.length;d++)f[(A=e.children[d]).name]=this.visit(A.value,o);return f;case"OrExpression":return i(s=this.visit(e.children[0],o))&&(s=this.visit(e.children[1],o)),s;case"AndExpression":return!0===i(u=this.visit(e.children[0],o))?u:this.visit(e.children[1],o);case"NotExpression":return i(u=this.visit(e.children[0],o));case"Literal":return e.value;case"Pipe":return p=this.visit(e.children[0],o),this.visit(e.children[1],p);case"Current":return o;case"Function":var R=[];for(d=0;d<e.children.length;d++)R.push(this.visit(e.children[d],o));return this.runtime.callFunction(e.name,R);case"ExpressionReference":var x=e.children[0];return x.jmespathType="Expref",x;default:throw new Error("Unknown node type: "+e.type)}},computeSliceParams:function(e,t){var n=t[0],r=t[1],i=t[2],o=[null,null,null];if(null===i)i=1;else if(0===i){var s=new Error("Invalid slice, step cannot be 0");throw s.name="RuntimeError",s}var a=i<0;return n=null===n?a?e-1:0:this.capSliceRange(e,n,i),r=null===r?a?-1:e:this.capSliceRange(e,r,i),o[0]=n,o[1]=r,o[2]=i,o},capSliceRange:function(e,t,n){return t<0?(t+=e)<0&&(t=n<0?-1:0):t>=e&&(t=n<0?e-1:e),t}},S.prototype={callFunction:function(e,t){var n=this.functionTable[e];if(void 0===n)throw new Error("Unknown function: "+e+"()");return this._validateArgs(e,t,n._signature),n._func.call(this,t)},_validateArgs:function(e,t,n){var r,i,o,s;if(n[n.length-1].variadic){if(t.length<n.length)throw r=1===n.length?" argument":" arguments",new Error("ArgumentError: "+e+"() takes at least"+n.length+r+" but received "+t.length)}else if(t.length!==n.length)throw r=1===n.length?" argument":" arguments",new Error("ArgumentError: "+e+"() takes "+n.length+r+" but received "+t.length);for(var a=0;a<n.length;a++){s=!1,i=n[a].types,o=this._getTypeName(t[a]);for(var c=0;c<i.length;c++)if(this._typeMatches(o,i[c],t[a])){s=!0;break}if(!s)throw new Error("TypeError: "+e+"() expected argument "+(a+1)+" to be type "+i+" but received type "+o+" instead.")}},_typeMatches:function(e,t,n){if(t===a)return!0;if(t!==f&&t!==p&&t!==u)return e===t;if(t===u)return e===u;if(e===u){var r;t===p?r=s:t===f&&(r=c);for(var i=0;i<n.length;i++)if(!this._typeMatches(this._getTypeName(n[i]),r,n[i]))return!1;return!0}},_getTypeName:function(e){switch(Object.prototype.toString.call(e)){case"[object String]":return c;case"[object Number]":return s;case"[object Array]":return u;case"[object Boolean]":return 5;case"[object Null]":return 7;case"[object Object]":return"Expref"===e.jmespathType?h:l}},_functionStartsWith:function(e){return 0===e[0].lastIndexOf(e[1])},_functionEndsWith:function(e){var t=e[0],n=e[1];return-1!==t.indexOf(n,t.length-n.length)},_functionReverse:function(e){if(this._getTypeName(e[0])===c){for(var t=e[0],n="",r=t.length-1;r>=0;r--)n+=t[r];return n}var i=e[0].slice(0);return i.reverse(),i},_functionAbs:function(e){return Math.abs(e[0])},_functionCeil:function(e){return Math.ceil(e[0])},_functionAvg:function(e){for(var t=0,n=e[0],r=0;r<n.length;r++)t+=n[r];return t/n.length},_functionContains:function(e){return e[0].indexOf(e[1])>=0},_functionFloor:function(e){return Math.floor(e[0])},_functionLength:function(e){return n(e[0])?Object.keys(e[0]).length:e[0].length},_functionMap:function(e){for(var t=[],n=this._interpreter,r=e[0],i=e[1],o=0;o<i.length;o++)t.push(n.visit(r,i[o]));return t},_functionMerge:function(e){for(var t={},n=0;n<e.length;n++){var r=e[n];for(var i in r)t[i]=r[i]}return t},_functionMax:function(e){if(e[0].length>0){if(this._getTypeName(e[0][0])===s)return Math.max.apply(Math,e[0]);for(var t=e[0],n=t[0],r=1;r<t.length;r++)n.localeCompare(t[r])<0&&(n=t[r]);return n}return null},_functionMin:function(e){if(e[0].length>0){if(this._getTypeName(e[0][0])===s)return Math.min.apply(Math,e[0]);for(var t=e[0],n=t[0],r=1;r<t.length;r++)t[r].localeCompare(n)<0&&(n=t[r]);return n}return null},_functionSum:function(e){for(var t=0,n=e[0],r=0;r<n.length;r++)t+=n[r];return t},_functionType:function(e){switch(this._getTypeName(e[0])){case s:return"number";case c:return"string";case u:return"array";case l:return"object";case 5:return"boolean";case h:return"expref";case 7:return"null"}},_functionKeys:function(e){return Object.keys(e[0])},_functionValues:function(e){for(var t=e[0],n=Object.keys(t),r=[],i=0;i<n.length;i++)r.push(t[n[i]]);return r},_functionJoin:function(e){var t=e[0];return e[1].join(t)},_functionToArray:function(e){return this._getTypeName(e[0])===u?e[0]:[e[0]]},_functionToString:function(e){return this._getTypeName(e[0])===c?e[0]:JSON.stringify(e[0])},_functionToNumber:function(e){var t,n=this._getTypeName(e[0]);return n===s?e[0]:n!==c||(t=+e[0],isNaN(t))?null:t},_functionNotNull:function(e){for(var t=0;t<e.length;t++)if(7!==this._getTypeName(e[t]))return e[t];return null},_functionSort:function(e){var t=e[0].slice(0);return t.sort(),t},_functionSortBy:function(e){var t=e[0].slice(0);if(0===t.length)return t;var n=this._interpreter,r=e[1],i=this._getTypeName(n.visit(r,t[0]));if([s,c].indexOf(i)<0)throw new Error("TypeError");for(var o=this,a=[],u=0;u<t.length;u++)a.push([u,t[u]]);a.sort((function(e,t){var s=n.visit(r,e[1]),a=n.visit(r,t[1]);if(o._getTypeName(s)!==i)throw new Error("TypeError: expected "+i+", received "+o._getTypeName(s));if(o._getTypeName(a)!==i)throw new Error("TypeError: expected "+i+", received "+o._getTypeName(a));return s>a?1:s<a?-1:e[0]-t[0]}));for(var l=0;l<a.length;l++)t[l]=a[l][1];return t},_functionMaxBy:function(e){for(var t,n,r=e[1],i=e[0],o=this.createKeyFunction(r,[s,c]),a=-1/0,u=0;u<i.length;u++)(n=o(i[u]))>a&&(a=n,t=i[u]);return t},_functionMinBy:function(e){for(var t,n,r=e[1],i=e[0],o=this.createKeyFunction(r,[s,c]),a=1/0,u=0;u<i.length;u++)(n=o(i[u]))<a&&(a=n,t=i[u]);return t},createKeyFunction:function(e,t){var n=this,r=this._interpreter;return function(i){var o=r.visit(e,i);if(t.indexOf(n._getTypeName(o))<0){var s="TypeError: expected one of "+t+", received "+n._getTypeName(o);throw new Error(s)}return o}}},e.tokenize=function(e){return(new y).tokenize(e)},e.compile=function(e){return(new w).parse(e)},e.search=function(e,t){var n=new w,r=new S,i=new _(r);r._interpreter=i;var o=n.parse(t);return i.search(o,e)},e.strictDeepEqual=r}(void 0===n?this.jmespath={}:n)},{}],86:[function(e,t,n){var r,i,o=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(r===setTimeout)return setTimeout(e,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(e){r=s}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}}();var u,l=[],h=!1,p=-1;function f(){h&&u&&(h=!1,u.length?l=u.concat(l):p=-1,l.length&&d())}function d(){if(!h){var e=c(f);h=!0;for(var t=l.length;t;){for(u=l,l=[];++p<t;)u&&u[p].run();p=-1,t=l.length}u=null,h=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new g(e,t)),1!==l.length||h||c(d)},g.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},{}],87:[function(t,o,s){(function(e){!function(t){var a="object"==i(s)&&s&&!s.nodeType&&s,c="object"==i(o)&&o&&!o.nodeType&&o,u="object"==i(e)&&e;u.global!==u&&u.window!==u&&u.self!==u||(t=u);var l,h,p=2147483647,f=36,d=1,g=26,m=38,v=700,y=72,b=128,w="-",_=/^xn--/,S=/[^\x20-\x7E]/,E=/[\x2E\u3002\uFF0E\uFF61]/g,C={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},k=f-d,I=Math.floor,T=String.fromCharCode;function A(e){throw RangeError(C[e])}function R(e,t){for(var n=e.length,r=[];n--;)r[n]=t(e[n]);return r}function x(e,t){var n=e.split("@"),r="";return n.length>1&&(r=n[0]+"@",e=n[1]),r+R((e=e.replace(E,".")).split("."),t).join(".")}function P(e){for(var t,n,r=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(n=e.charCodeAt(i++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),i--):r.push(t);return r}function O(e){return R(e,(function(e){var t="";return e>65535&&(t+=T((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=T(e)})).join("")}function N(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function L(e,t,n){var r=0;for(e=n?I(e/v):e>>1,e+=I(e/t);e>k*g>>1;r+=f)e=I(e/k);return I(r+(k+1)*e/(e+m))}function M(e){var t,n,r,i,o,s,a,c,u,l,h,m=[],v=e.length,_=0,S=b,E=y;for((n=e.lastIndexOf(w))<0&&(n=0),r=0;r<n;++r)e.charCodeAt(r)>=128&&A("not-basic"),m.push(e.charCodeAt(r));for(i=n>0?n+1:0;i<v;){for(o=_,s=1,a=f;i>=v&&A("invalid-input"),((c=(h=e.charCodeAt(i++))-48<10?h-22:h-65<26?h-65:h-97<26?h-97:f)>=f||c>I((p-_)/s))&&A("overflow"),_+=c*s,!(c<(u=a<=E?d:a>=E+g?g:a-E));a+=f)s>I(p/(l=f-u))&&A("overflow"),s*=l;E=L(_-o,t=m.length+1,0==o),I(_/t)>p-S&&A("overflow"),S+=I(_/t),_%=t,m.splice(_++,0,S)}return O(m)}function D(e){var t,n,r,i,o,s,a,c,u,l,h,m,v,_,S,E=[];for(m=(e=P(e)).length,t=b,n=0,o=y,s=0;s<m;++s)(h=e[s])<128&&E.push(T(h));for(r=i=E.length,i&&E.push(w);r<m;){for(a=p,s=0;s<m;++s)(h=e[s])>=t&&h<a&&(a=h);for(a-t>I((p-n)/(v=r+1))&&A("overflow"),n+=(a-t)*v,t=a,s=0;s<m;++s)if((h=e[s])<t&&++n>p&&A("overflow"),h==t){for(c=n,u=f;!(c<(l=u<=o?d:u>=o+g?g:u-o));u+=f)S=c-l,_=f-l,E.push(T(N(l+S%_,0))),c=I(S/_);E.push(T(N(c,0))),o=L(n,v,r==i),n=0,++r}++n,++t}return E.join("")}if(l={version:"1.3.2",ucs2:{decode:P,encode:O},decode:M,encode:D,toASCII:function(e){return x(e,(function(e){return S.test(e)?"xn--"+D(e):e}))},toUnicode:function(e){return x(e,(function(e){return _.test(e)?M(e.slice(4).toLowerCase()):e}))}},"object"==i(n(3))&&n(3))void 0===(r=function(){return l}.call(s,n,s,o))||(o.exports=r);else if(a&&c)if(o.exports==a)c.exports=l;else for(h in l)l.hasOwnProperty(h)&&(a[h]=l[h]);else t.punycode=l}(this)}).call(this,void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],88:[function(e,t,n){"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.exports=function(e,t,n,o){t=t||"&",n=n||"=";var s={};if("string"!=typeof e||0===e.length)return s;var a=/\+/g;e=e.split(t);var c=1e3;o&&"number"==typeof o.maxKeys&&(c=o.maxKeys);var u=e.length;c>0&&u>c&&(u=c);for(var l=0;l<u;++l){var h,p,f,d,g=e[l].replace(a,"%20"),m=g.indexOf(n);m>=0?(h=g.substr(0,m),p=g.substr(m+1)):(h=g,p=""),f=decodeURIComponent(h),d=decodeURIComponent(p),r(s,f)?i(s[f])?s[f].push(d):s[f]=[s[f],d]:s[f]=d}return s};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},{}],89:[function(e,t,n){"use strict";var r=function(e){switch(i(e)){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};t.exports=function(e,t,n,c){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"===i(e)?s(a(e),(function(i){var a=encodeURIComponent(r(i))+n;return o(e[i])?s(e[i],(function(e){return a+encodeURIComponent(r(e))})).join(t):a+encodeURIComponent(r(e[i]))})).join(t):c?encodeURIComponent(r(c))+n+encodeURIComponent(r(e)):""};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function s(e,t){if(e.map)return e.map(t);for(var n=[],r=0;r<e.length;r++)n.push(t(e[r],r));return n}var a=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}},{}],90:[function(e,t,n){"use strict";n.decode=n.parse=e("./decode"),n.encode=n.stringify=e("./encode")},{"./decode":88,"./encode":89}],91:[function(e,t,n){"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.exports=function(e,t,n,i){t=t||"&",n=n||"=";var o={};if("string"!=typeof e||0===e.length)return o;var s=/\+/g;e=e.split(t);var a=1e3;i&&"number"==typeof i.maxKeys&&(a=i.maxKeys);var c=e.length;a>0&&c>a&&(c=a);for(var u=0;u<c;++u){var l,h,p,f,d=e[u].replace(s,"%20"),g=d.indexOf(n);g>=0?(l=d.substr(0,g),h=d.substr(g+1)):(l=d,h=""),p=decodeURIComponent(l),f=decodeURIComponent(h),r(o,p)?Array.isArray(o[p])?o[p].push(f):o[p]=[o[p],f]:o[p]=f}return o}},{}],92:[function(e,t,n){"use strict";var r=function(e){switch(i(e)){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};t.exports=function(e,t,n,o){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"===i(e)?Object.keys(e).map((function(i){var o=encodeURIComponent(r(i))+n;return Array.isArray(e[i])?e[i].map((function(e){return o+encodeURIComponent(r(e))})).join(t):o+encodeURIComponent(r(e[i]))})).join(t):o?encodeURIComponent(r(o))+n+encodeURIComponent(r(e)):""}},{}],93:[function(e,t,n){arguments[4][90][0].apply(n,arguments)},{"./decode":91,"./encode":92,dup:90}],94:[function(e,t,n){(function(t,r){var i=e("process/browser.js").nextTick,o=Function.prototype.apply,s=Array.prototype.slice,a={},c=0;function u(e,t){this._id=e,this._clearFn=t}n.setTimeout=function(){return new u(o.call(setTimeout,window,arguments),clearTimeout)},n.setInterval=function(){return new u(o.call(setInterval,window,arguments),clearInterval)},n.clearTimeout=n.clearInterval=function(e){e.close()},u.prototype.unref=u.prototype.ref=function(){},u.prototype.close=function(){this._clearFn.call(window,this._id)},n.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},n.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},n._unrefActive=n.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n.setImmediate="function"==typeof t?t:function(e){var t=c++,r=!(arguments.length<2)&&s.call(arguments,1);return a[t]=!0,i((function(){a[t]&&(r?e.apply(null,r):e.call(null),n.clearImmediate(t))})),t},n.clearImmediate="function"==typeof r?r:function(e){delete a[e]}}).call(this,e("timers").setImmediate,e("timers").clearImmediate)},{"process/browser.js":86,timers:94}],95:[function(e,t,n){var r=e("punycode");function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}n.parse=y,n.resolve=function(e,t){return y(e,!1,!0).resolve(t)},n.resolveObject=function(e,t){return e?y(e,!1,!0).resolveObject(t):t},n.format=function(e){b(e)&&(e=y(e));return e instanceof o?e.format():o.prototype.format.call(e)},n.Url=o;var s=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,c=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(c),l=["%","/","?",";","#"].concat(u),h=["/","?","#"],p=/^[a-z0-9A-Z_-]{0,63}$/,f=/^([a-z0-9A-Z_-]{0,63})(.*)$/,d={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},m={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},v=e("querystring");function y(e,t,n){if(e&&w(e)&&e instanceof o)return e;var r=new o;return r.parse(e,t,n),r}function b(e){return"string"==typeof e}function w(e){return"object"===i(e)&&null!==e}function _(e){return null===e}o.prototype.parse=function(e,t,n){if(!b(e))throw new TypeError("Parameter 'url' must be a string, not "+i(e));var o=e;o=o.trim();var a=s.exec(o);if(a){var c=(a=a[0]).toLowerCase();this.protocol=c,o=o.substr(a.length)}if(n||a||o.match(/^\/\/[^@\/]+@[^@\/]+/)){var y="//"===o.substr(0,2);!y||a&&g[a]||(o=o.substr(2),this.slashes=!0)}if(!g[a]&&(y||a&&!m[a])){for(var w,_,S=-1,E=0;E<h.length;E++){-1!==(C=o.indexOf(h[E]))&&(-1===S||C<S)&&(S=C)}-1!==(_=-1===S?o.lastIndexOf("@"):o.lastIndexOf("@",S))&&(w=o.slice(0,_),o=o.slice(_+1),this.auth=decodeURIComponent(w)),S=-1;for(E=0;E<l.length;E++){var C;-1!==(C=o.indexOf(l[E]))&&(-1===S||C<S)&&(S=C)}-1===S&&(S=o.length),this.host=o.slice(0,S),o=o.slice(S),this.parseHost(),this.hostname=this.hostname||"";var k="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!k)for(var I=this.hostname.split(/\./),T=(E=0,I.length);E<T;E++){var A=I[E];if(A&&!A.match(p)){for(var R="",x=0,P=A.length;x<P;x++)A.charCodeAt(x)>127?R+="x":R+=A[x];if(!R.match(p)){var O=I.slice(0,E),N=I.slice(E+1),L=A.match(f);L&&(O.push(L[1]),N.unshift(L[2])),N.length&&(o="/"+N.join(".")+o),this.hostname=O.join(".");break}}}if(this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),!k){var M=this.hostname.split("."),D=[];for(E=0;E<M.length;++E){var q=M[E];D.push(q.match(/[^A-Za-z0-9_-]/)?"xn--"+r.encode(q):q)}this.hostname=D.join(".")}var U=this.port?":"+this.port:"",j=this.hostname||"";this.host=j+U,this.href+=this.host,k&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==o[0]&&(o="/"+o))}if(!d[c])for(E=0,T=u.length;E<T;E++){var B=u[E],F=encodeURIComponent(B);F===B&&(F=escape(B)),o=o.split(B).join(F)}var H=o.indexOf("#");-1!==H&&(this.hash=o.substr(H),o=o.slice(0,H));var z=o.indexOf("?");if(-1!==z?(this.search=o.substr(z),this.query=o.substr(z+1),t&&(this.query=v.parse(this.query)),o=o.slice(0,z)):t&&(this.search="",this.query={}),o&&(this.pathname=o),m[c]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){U=this.pathname||"",q=this.search||"";this.path=U+q}return this.href=this.format(),this},o.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",r=this.hash||"",i=!1,o="";this.host?i=e+this.host:this.hostname&&(i=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&w(this.query)&&Object.keys(this.query).length&&(o=v.stringify(this.query));var s=this.search||o&&"?"+o||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||m[t])&&!1!==i?(i="//"+(i||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):i||(i=""),r&&"#"!==r.charAt(0)&&(r="#"+r),s&&"?"!==s.charAt(0)&&(s="?"+s),t+i+(n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(s=s.replace("#","%23"))+r},o.prototype.resolve=function(e){return this.resolveObject(y(e,!1,!0)).format()},o.prototype.resolveObject=function(e){if(b(e)){var t=new o;t.parse(e,!1,!0),e=t}var n=new o;if(Object.keys(this).forEach((function(e){n[e]=this[e]}),this),n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol)return Object.keys(e).forEach((function(t){"protocol"!==t&&(n[t]=e[t])})),m[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n;if(e.protocol&&e.protocol!==n.protocol){if(!m[e.protocol])return Object.keys(e).forEach((function(t){n[t]=e[t]})),n.href=n.format(),n;if(n.protocol=e.protocol,e.host||g[e.protocol])n.pathname=e.pathname;else{for(var r=(e.pathname||"").split("/");r.length&&!(e.host=r.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==r[0]&&r.unshift(""),r.length<2&&r.unshift(""),n.pathname=r.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var i=n.pathname||"",s=n.search||"";n.path=i+s}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var a=n.pathname&&"/"===n.pathname.charAt(0),c=e.host||e.pathname&&"/"===e.pathname.charAt(0),u=c||a||n.host&&e.pathname,l=u,h=n.pathname&&n.pathname.split("/")||[],p=(r=e.pathname&&e.pathname.split("/")||[],n.protocol&&!m[n.protocol]);if(p&&(n.hostname="",n.port=null,n.host&&(""===h[0]?h[0]=n.host:h.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===r[0]?r[0]=e.host:r.unshift(e.host)),e.host=null),u=u&&(""===r[0]||""===h[0])),c)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,h=r;else if(r.length)h||(h=[]),h.pop(),h=h.concat(r),n.search=e.search,n.query=e.query;else if(null!=e.search){if(p)n.hostname=n.host=h.shift(),(w=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=w.shift(),n.host=n.hostname=w.shift());return n.search=e.search,n.query=e.query,_(n.pathname)&&_(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n}if(!h.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var f=h.slice(-1)[0],d=(n.host||e.host)&&("."===f||".."===f)||""===f,v=0,y=h.length;y>=0;y--)"."==(f=h[y])?h.splice(y,1):".."===f?(h.splice(y,1),v++):v&&(h.splice(y,1),v--);if(!u&&!l)for(;v--;v)h.unshift("..");!u||""===h[0]||h[0]&&"/"===h[0].charAt(0)||h.unshift(""),d&&"/"!==h.join("/").substr(-1)&&h.push("");var w,S=""===h[0]||h[0]&&"/"===h[0].charAt(0);p&&(n.hostname=n.host=S?"":h.length?h.shift():"",(w=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=w.shift(),n.host=n.hostname=w.shift()));return(u=u||n.host&&h.length)&&!S&&h.unshift(""),h.length?n.pathname=h.join("/"):(n.pathname=null,n.path=null),_(n.pathname)&&_(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},o.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},{punycode:87,querystring:90}],96:[function(e,t,n){"function"==typeof Object.create?t.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},{}],97:[function(e,t,n){t.exports=function(e){return e&&"object"===i(e)&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},{}],98:[function(t,n,r){(function(e,n){var o=/%[sdj%]/g;r.format=function(e){if(!y(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(c(arguments[n]));return t.join(" ")}n=1;for(var r=arguments,i=r.length,s=String(e).replace(o,(function(e){if("%%"===e)return"%";if(n>=i)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}})),a=r[n];n<i;a=r[++n])m(a)||!_(a)?s+=" "+a:s+=" "+c(a);return s},r.deprecate=function(t,i){if(b(n.process))return function(){return r.deprecate(t,i).apply(this,arguments)};if(!0===e.noDeprecation)return t;var o=!1;return function(){if(!o){if(e.throwDeprecation)throw new Error(i);e.traceDeprecation?console.trace(i):console.error(i),o=!0}return t.apply(this,arguments)}};var s,a={};function c(e,t){var n={seen:[],stylize:l};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),g(t)?n.showHidden=t:t&&r._extend(n,t),b(n.showHidden)&&(n.showHidden=!1),b(n.depth)&&(n.depth=2),b(n.colors)&&(n.colors=!1),b(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=u),h(n,e,n.depth)}function u(e,t){var n=c.styles[t];return n?"["+c.colors[n][0]+"m"+e+"["+c.colors[n][1]+"m":e}function l(e,t){return e}function h(e,t,n){if(e.customInspect&&t&&C(t.inspect)&&t.inspect!==r.inspect&&(!t.constructor||t.constructor.prototype!==t)){var i=t.inspect(n,e);return y(i)||(i=h(e,i,n)),i}var o=function(e,t){if(b(t))return e.stylize("undefined","undefined");if(y(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}if(v(t))return e.stylize(""+t,"number");if(g(t))return e.stylize(""+t,"boolean");if(m(t))return e.stylize("null","null")}(e,t);if(o)return o;var s=Object.keys(t),a=function(e){var t={};return e.forEach((function(e,n){t[e]=!0})),t}(s);if(e.showHidden&&(s=Object.getOwnPropertyNames(t)),E(t)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return p(t);if(0===s.length){if(C(t)){var c=t.name?": "+t.name:"";return e.stylize("[Function"+c+"]","special")}if(w(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(S(t))return e.stylize(Date.prototype.toString.call(t),"date");if(E(t))return p(t)}var u,l="",_=!1,k=["{","}"];(d(t)&&(_=!0,k=["[","]"]),C(t))&&(l=" [Function"+(t.name?": "+t.name:"")+"]");return w(t)&&(l=" "+RegExp.prototype.toString.call(t)),S(t)&&(l=" "+Date.prototype.toUTCString.call(t)),E(t)&&(l=" "+p(t)),0!==s.length||_&&0!=t.length?n<0?w(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),u=_?function(e,t,n,r,i){for(var o=[],s=0,a=t.length;s<a;++s)R(t,String(s))?o.push(f(e,t,n,r,String(s),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(f(e,t,n,r,i,!0))})),o}(e,t,n,a,s):s.map((function(r){return f(e,t,n,a,r,_)})),e.seen.pop(),function(e,t,n){if(e.reduce((function(e,t){return t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1];return n[0]+t+" "+e.join(", ")+" "+n[1]}(u,l,k)):k[0]+l+k[1]}function p(e){return"["+Error.prototype.toString.call(e)+"]"}function f(e,t,n,r,i,o){var s,a,c;if((c=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?a=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(a=e.stylize("[Setter]","special")),R(r,i)||(s="["+i+"]"),a||(e.seen.indexOf(c.value)<0?(a=m(n)?h(e,c.value,null):h(e,c.value,n-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+a.split("\n").map((function(e){return"   "+e})).join("\n")):a=e.stylize("[Circular]","special")),b(s)){if(o&&i.match(/^\d+$/))return a;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+a}function d(e){return Array.isArray(e)}function g(e){return"boolean"==typeof e}function m(e){return null===e}function v(e){return"number"==typeof e}function y(e){return"string"==typeof e}function b(e){return void 0===e}function w(e){return _(e)&&"[object RegExp]"===k(e)}function _(e){return"object"===i(e)&&null!==e}function S(e){return _(e)&&"[object Date]"===k(e)}function E(e){return _(e)&&("[object Error]"===k(e)||e instanceof Error)}function C(e){return"function"==typeof e}function k(e){return Object.prototype.toString.call(e)}function I(e){return e<10?"0"+e.toString(10):e.toString(10)}r.debuglog=function(t){if(b(s)&&(s=e.env.NODE_DEBUG||""),t=t.toUpperCase(),!a[t])if(new RegExp("\\b"+t+"\\b","i").test(s)){var n=e.pid;a[t]=function(){var e=r.format.apply(r,arguments);console.error("%s %d: %s",t,n,e)}}else a[t]=function(){};return a[t]},r.inspect=c,c.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},c.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},r.isArray=d,r.isBoolean=g,r.isNull=m,r.isNullOrUndefined=function(e){return null==e},r.isNumber=v,r.isString=y,r.isSymbol=function(e){return"symbol"===i(e)},r.isUndefined=b,r.isRegExp=w,r.isObject=_,r.isDate=S,r.isError=E,r.isFunction=C,r.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"===i(e)||void 0===e},r.isBuffer=t("./support/isBuffer");var T=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function A(){var e=new Date,t=[I(e.getHours()),I(e.getMinutes()),I(e.getSeconds())].join(":");return[e.getDate(),T[e.getMonth()],t].join(" ")}function R(e,t){return Object.prototype.hasOwnProperty.call(e,t)}r.log=function(){console.log("%s - %s",A(),r.format.apply(r,arguments))},r.inherits=t("inherits"),r._extend=function(e,t){if(!t||!_(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}}).call(this,t("_process"),void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./support/isBuffer":97,_process:86,inherits:96}],99:[function(e,t,n){var r=e("./v1"),i=e("./v4"),o=i;o.v1=r,o.v4=i,t.exports=o},{"./v1":102,"./v4":103}],100:[function(e,t,n){for(var r=[],i=0;i<256;++i)r[i]=(i+256).toString(16).substr(1);t.exports=function(e,t){var n=t||0,i=r;return[i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]]].join("")}},{}],101:[function(e,t,n){var r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(r){var i=new Uint8Array(16);t.exports=function(){return r(i),i}}else{var o=new Array(16);t.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),o[t]=e>>>((3&t)<<3)&255;return o}}},{}],102:[function(e,t,n){var r,i,o=e("./lib/rng"),s=e("./lib/bytesToUuid"),a=0,c=0;t.exports=function(e,t,n){var u=t&&n||0,l=t||[],h=(e=e||{}).node||r,p=void 0!==e.clockseq?e.clockseq:i;if(null==h||null==p){var f=o();null==h&&(h=r=[1|f[0],f[1],f[2],f[3],f[4],f[5]]),null==p&&(p=i=16383&(f[6]<<8|f[7]))}var d=void 0!==e.msecs?e.msecs:(new Date).getTime(),g=void 0!==e.nsecs?e.nsecs:c+1,m=d-a+(g-c)/1e4;if(m<0&&void 0===e.clockseq&&(p=p+1&16383),(m<0||d>a)&&void 0===e.nsecs&&(g=0),g>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=d,c=g,i=p;var v=(1e4*(268435455&(d+=122192928e5))+g)%4294967296;l[u++]=v>>>24&255,l[u++]=v>>>16&255,l[u++]=v>>>8&255,l[u++]=255&v;var y=d/4294967296*1e4&268435455;l[u++]=y>>>8&255,l[u++]=255&y,l[u++]=y>>>24&15|16,l[u++]=y>>>16&255,l[u++]=p>>>8|128,l[u++]=255&p;for(var b=0;b<6;++b)l[u+b]=h[b];return t||s(l)}},{"./lib/bytesToUuid":100,"./lib/rng":101}],103:[function(e,t,n){var r=e("./lib/rng"),i=e("./lib/bytesToUuid");t.exports=function(e,t,n){var o=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var s=(e=e||{}).random||(e.rng||r)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t)for(var a=0;a<16;++a)t[o+a]=s[a];return t||i(s)}},{"./lib/bytesToUuid":100,"./lib/rng":101}],104:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./utils/LRU"),i=1e3,o=function(){function e(e){void 0===e&&(e=i),this.maxSize=e,this.cache=new r.LRUCache(e)}return Object.defineProperty(e.prototype,"size",{get:function(){return this.cache.length},enumerable:!0,configurable:!0}),e.prototype.put=function(t,n){var r="string"!=typeof t?e.getKeyString(t):t,i=this.populateValue(n);this.cache.put(r,i)},e.prototype.get=function(t){var n="string"!=typeof t?e.getKeyString(t):t,r=Date.now(),i=this.cache.get(n);if(i)for(var o=0;o<i.length;o++){if(i[o].Expire<r)return void this.cache.remove(n)}return i},e.getKeyString=function(e){for(var t=[],n=Object.keys(e).sort(),r=0;r<n.length;r++){var i=n[r];void 0!==e[i]&&t.push(e[i])}return t.join(" ")},e.prototype.populateValue=function(e){var t=Date.now();return e.map((function(e){return{Address:e.Address||"",Expire:t+60*(e.CachePeriodInMinutes||1)*1e3}}))},e.prototype.empty=function(){this.cache.empty()},e.prototype.remove=function(t){var n="string"!=typeof t?e.getKeyString(t):t;this.cache.remove(n)},e}();n.EndpointCache=o},{"./utils/LRU":105}],105:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(e,t){this.key=e,this.value=t},i=function(){function e(e){if(this.nodeMap={},this.size=0,"number"!=typeof e||e<1)throw new Error("Cache size can only be positive number");this.sizeLimit=e}return Object.defineProperty(e.prototype,"length",{get:function(){return this.size},enumerable:!0,configurable:!0}),e.prototype.prependToList=function(e){this.headerNode?(this.headerNode.prev=e,e.next=this.headerNode):this.tailNode=e,this.headerNode=e,this.size++},e.prototype.removeFromTail=function(){if(this.tailNode){var e=this.tailNode,t=e.prev;return t&&(t.next=void 0),e.prev=void 0,this.tailNode=t,this.size--,e}},e.prototype.detachFromList=function(e){this.headerNode===e&&(this.headerNode=e.next),this.tailNode===e&&(this.tailNode=e.prev),e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),e.next=void 0,e.prev=void 0,this.size--},e.prototype.get=function(e){if(this.nodeMap[e]){var t=this.nodeMap[e];return this.detachFromList(t),this.prependToList(t),t.value}},e.prototype.remove=function(e){if(this.nodeMap[e]){var t=this.nodeMap[e];this.detachFromList(t),delete this.nodeMap[e]}},e.prototype.put=function(e,t){if(this.nodeMap[e])this.remove(e);else if(this.size===this.sizeLimit){var n=this.removeFromTail().key;delete this.nodeMap[n]}var i=new r(e,t);this.nodeMap[e]=i,this.prependToList(i)},e.prototype.empty=function(){for(var e=Object.keys(this.nodeMap),t=0;t<e.length;t++){var n=e[t],r=this.nodeMap[n];this.detachFromList(r),delete this.nodeMap[n]}},e}();n.LRUCache=i},{}],106:[function(e,t,n){e("./browser_loader");var r=e("./core");"undefined"!=typeof window&&(window.AWS=r),void 0!==t&&(t.exports=r),"undefined"!=typeof self&&(self.AWS=r),Object.prototype.hasOwnProperty.call(r,"ConnectParticipant")||(r.apiLoader.services.connectparticipant={},r.ConnectParticipant=r.Service.defineService("connectparticipant",["2018-09-07"])),r.apiLoader.services.connectparticipant["2018-09-07"]=e("../apis/connectparticipant-2018-09-07.min"),r.apiLoader.services.connectparticipant["2018-09-07"].paginators=e("../apis/connectparticipant-2018-09-07.paginators").pagination,Object.prototype.hasOwnProperty.call(r,"STS")||(r.apiLoader.services.sts={},r.STS=r.Service.defineService("sts",["2011-06-15"]),e("./services/sts"))},{"../apis/connectparticipant-2018-09-07.min":3,"../apis/connectparticipant-2018-09-07.paginators":4,"../apis/sts-2011-06-15.min":6,"./browser_loader":17,"./core":19,"./services/sts":62}]},{},[106])}).call(this,n(0))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
