!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){var o;!function(){"use strict";var r={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function i(e){return function(e,t){var n,o,s,c,a,u,l,f,h,p=1,d=e.length,g="";for(o=0;o<d;o++)if("string"==typeof e[o])g+=e[o];else if("object"==typeof e[o]){if((c=e[o]).keys)for(n=t[p],s=0;s<c.keys.length;s++){if(null==n)throw new Error(i('[sprintf] Cannot access property "%s" of undefined value "%s"',c.keys[s],c.keys[s-1]));n=n[c.keys[s]]}else n=c.param_no?t[c.param_no]:t[p++];if(r.not_type.test(c.type)&&r.not_primitive.test(c.type)&&n instanceof Function&&(n=n()),r.numeric_arg.test(c.type)&&"number"!=typeof n&&isNaN(n))throw new TypeError(i("[sprintf] expecting number but found %T",n));switch(r.number.test(c.type)&&(f=n>=0),c.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,c.width?parseInt(c.width):0);break;case"e":n=c.precision?parseFloat(n).toExponential(c.precision):parseFloat(n).toExponential();break;case"f":n=c.precision?parseFloat(n).toFixed(c.precision):parseFloat(n);break;case"g":n=c.precision?String(Number(n.toPrecision(c.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=c.precision?n.substring(0,c.precision):n;break;case"t":n=String(!!n),n=c.precision?n.substring(0,c.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=c.precision?n.substring(0,c.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=c.precision?n.substring(0,c.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}r.json.test(c.type)?g+=n:(!r.number.test(c.type)||f&&!c.sign?h="":(h=f?"+":"-",n=n.toString().replace(r.sign,"")),u=c.pad_char?"0"===c.pad_char?"0":c.pad_char.charAt(1):" ",l=c.width-(h+n).length,a=c.width&&l>0?u.repeat(l):"",g+=c.align?h+n+a:"0"===u?h+a+n:a+h+n)}return g}(function(e){if(c[e])return c[e];var t,n=e,o=[],i=0;for(;n;){if(null!==(t=r.text.exec(n)))o.push(t[0]);else if(null!==(t=r.modulo.exec(n)))o.push("%");else{if(null===(t=r.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){i|=1;var s=[],a=t[2],u=[];if(null===(u=r.key.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(s.push(u[1]);""!==(a=a.substring(u[0].length));)if(null!==(u=r.key_access.exec(a)))s.push(u[1]);else{if(null===(u=r.index_access.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");s.push(u[1])}t[2]=s}else i|=2;if(3===i)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");o.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return c[e]=o}(e),arguments)}function s(e,t){return i.apply(null,[e].concat(t||[]))}var c=Object.create(null);t.sprintf=i,t.vsprintf=s,"undefined"!=typeof window&&(window.sprintf=i,window.vsprintf=s,void 0===(o=function(){return{sprintf:i,vsprintf:s}}.call(t,n,t,e))||(e.exports=o))}()},function(e,t,n){"use strict";function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}function c(e){var t="function"==typeof Map?new Map:void 0;return(c=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,o)}function o(){return a(e,arguments,l(this).constructor)}return o.prototype=Object.create(e.prototype,{constructor:{value:o,enumerable:!1,writable:!0,configurable:!0}}),u(o,e)})(e)}function a(e,t,n){return(a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()?Reflect.construct:function(e,t,n){var o=[null];o.push.apply(o,t);var r=new(Function.bind.apply(e,o));return n&&u(r,n.prototype),r}).apply(null,arguments)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var f=function(e){function t(e){var n;return r(this,t),(n=i(this,l(t).call(this,e))).name="ValueError",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,c(Error)),t}(),h=function(e){function t(e){var n;return r(this,t),(n=i(this,l(t).call(this,e))).name="UnImplementedMethod",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,c(Error)),t}(),p=function(e){function t(e,n){var o;return r(this,t),(o=i(this,l(t).call(this,e))).name="IllegalArgument",o.argument=n,console.log("EXCEPTION: "+o.name+" MESSAGE: "+o.message),o}return s(t,c(Error)),t}(),d=function(e){function t(e){var n;return r(this,t),(n=i(this,l(t).call(this,e))).name="IllegalState",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,c(Error)),t}(),g=function(e,t,n){var o=new XMLHttpRequest;o.open(e.method||"GET",e.url),e.headers&&Object.keys(e.headers).forEach(function(t){o.setRequestHeader(t,e.headers[t])}),o.onload=function(){o.status>=200&&o.status<300?t(o):n(o)},o.onerror=function(){return n(o)},o.send(e.body)};function y(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var v=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,o;return t=e,(n=[{key:"update",value:function(e){var t=e||{};this.region=t.region||this.region,this.endpointOverride=t.endpoint||this.endpointOverride,this.reconnect=!1!==t.reconnect}},{key:"getRegion",value:function(){return this.region}},{key:"getEndpointOverride",value:function(){return this.endpointOverride}}])&&y(t.prototype,n),o&&y(t,o),e}()),b=n(0);function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var C={assertTrue:function(e,t){if(!e)throw new f(t)},assertNotNull:function(e,t){return C.assertTrue(null!==e&&void 0!==_(e),Object(b.sprintf)("%s must be provided",t||"A value")),e},now:function(){return(new Date).getTime()},isString:function(e){return"string"==typeof e},randomId:function(){return Object(b.sprintf)("%s-%s",C.now(),Math.random().toString(36).slice(2))},assertIsNonEmptyString:function(e,t){if(!e||"string"!=typeof e)throw new p(t+" is not a non-empty string!")},assertIsList:function(e,t){if(!Array.isArray(e))throw new p(t+" is not an array")},assertIsEnum:function(e,t,n){var o;for(o=0;o<t.length;o++)if(t[o]===e)return;throw new p(n+" passed is not valid. Allowed values are: "+t)},makeEnum:function(e){var t={};return e.forEach(function(e){var n=e.replace(/\.?([a-z]+)_?/g,function(e,t){return t.toUpperCase()+"_"}).replace(/_$/,"");t[n]=e}),t},contains:function(e,t){return e instanceof Array?null!==C.find(e,function(e){return e===t}):t in e},find:function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return e[n];return null},containsValue:function(e,t){return e instanceof Array?null!==C.find(e,function(e){return e===t}):null!==C.find(C.values(e),function(e){return e===t})},isFunction:function(e){return!!(e&&e.constructor&&e.call&&e.apply)},values:function(e){var t=[];for(var n in C.assertNotNull(e,"map"),e)t.push(e[n]);return t},isObject:function(e){return!("object"!==_(e)||null===e)},assertIsObject:function(e,t){if(!C.isObject(e))throw new p(t+" is not an object!")},delay:function(e){return new Promise(function(t){return setTimeout(t,e)})},asyncWhileInterval:function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,r=new Date;return t(o)?e(o).catch(function(){var i=Math.max(0,n-(new Date).valueOf()+r.valueOf());return C.delay(i).then(function(){return C.asyncWhileInterval(e,t,n,o+1)})}):Promise.reject(new Error("async while aborted"))}},w=C,m="/contact/chat/participant/message",E="/contact/chat/participant/transcript",S="/contact/chat/participant/event",I="/contact/chat/participant/disconnect",k="/contact/chat/participant/connection-details",O="post",T="PERSISTED",N={textPlain:"text/plain"},M=w.makeEnum(["ALL","MANAGER","AGENT","CUSTOMER","THIRDPARTY"]),A=w.makeEnum(["PERSISTED","NON_PERSISTED"]),P={"us-west-2":{invokeUrl:"https://eap1w93j0k.execute-api.us-west-2.amazonaws.com/prod"},"us-east-1":{invokeUrl:"https://4agcjusx3k.execute-api.us-east-1.amazonaws.com/prod"},"ap-southeast-2":{invokeUrl:"https://v4u8oq0cve.execute-api.ap-southeast-2.amazonaws.com/prod"},"ap-northeast-1":{invokeUrl:"https://3fidunfyz7.execute-api.ap-northeast-1.amazonaws.com/prod"},"eu-central-1":{invokeUrl:"https://1gynaarm3e.execute-api.eu-central-1.amazonaws.com/prod"}},D=30,U=60,L={AGENT:"AGENT",CUSTOMER:"CUSTOMER"},R="INCOMING_MESSAGE",x="INCOMING_TYPING",j="CONNECTION_ESTABLISHED",B="CONNECTION_BROKEN",q=15,F="ASCENDING",V="BACKWARD",G="NULL",H="CLIENT_LOGGER",K="DEBUG",Q="us-west-2";function J(e){return(J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function z(e,t){return!t||"object"!==J(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Y(e){return(Y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function W(e,t){return(W=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function X(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function $(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Z(e,t,n){return t&&$(e.prototype,t),n&&$(e,n),e}var ee=function(){function e(){X(this,e)}return Z(e,[{key:"debug",value:function(e){}},{key:"info",value:function(e){}},{key:"warn",value:function(e){}},{key:"error",value:function(e){}}]),e}(),te={DEBUG:10,INFO:20,WARN:30,ERROR:40},ne=function(){function e(){X(this,e),this.updateLoggerConfig(),this.consoleLoggerWrapper=ie()}return Z(e,[{key:"writeToClientLogger",value:function(e,t){if(this.hasClientLogger())switch(e){case te.DEBUG:return this._clientLogger.debug(t);case te.INFO:return this._clientLogger.info(t);case te.WARN:return this._clientLogger.warn(t);case te.ERROR:return this._clientLogger.error(t)}}},{key:"isLevelEnabled",value:function(e){return e>=this._level}},{key:"hasClientLogger",value:function(){return null!==this._clientLogger}},{key:"getLogger",value:function(e){var t=e.prefix||"";return this._logsDestination===K?this.consoleLoggerWrapper:new re(t)}},{key:"updateLoggerConfig",value:function(e){var t=e||{};this._level=t.level||te.INFO,this._clientLogger=t.logger||null,this._logsDestination=G,t.debug&&(this._logsDestination=K),t.logger&&(this._logsDestination=H)}}]),e}(),oe=function(){function e(){X(this,e)}return Z(e,[{key:"debug",value:function(){}},{key:"info",value:function(){}},{key:"warn",value:function(){}},{key:"error",value:function(){}}]),e}(),re=function(e){function t(e){var n;return X(this,t),(n=z(this,Y(t).call(this))).prefix=e||"",n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&W(e,t)}(t,oe),Z(t,[{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(te.DEBUG,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(te.INFO,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(te.WARN,t)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(te.ERROR,t)}},{key:"_shouldLog",value:function(e){return se.hasClientLogger()&&se.isLevelEnabled(e)}},{key:"_writeToClientLogger",value:function(e,t){se.writeToClientLogger(e,t)}},{key:"_log",value:function(e,t){if(this._shouldLog(e)){var n=this._convertToSingleStatement(t);this._writeToClientLogger(e,n)}}},{key:"_convertToSingleStatement",value:function(e){var t="";this.prefix&&(t+=this.prefix+" ");for(var n=0;n<e.length;n++){var o=e[n];t+=this._convertToString(o)+" "}return t}},{key:"_convertToString",value:function(e){try{if(!e)return"";if(w.isString(e))return e;if(w.isObject(e)&&w.isFunction(e.toString)){var t=e.toString();if("[object Object]"!==t)return t}return JSON.stringify(e)}catch(t){return console.error("Error while converting argument to string",e,t),""}}}]),t}(),ie=function(){var e=new oe;return e.debug=console.debug.bind(window.console),e.info=console.info.bind(window.console),e.warn=console.warn.bind(window.console),e.error=console.error.bind(window.console),e},se=new ne;function ce(e){return(ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ae(e,t){return!t||"object"!==ce(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ue(e){return(ue=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function le(e,t){return(le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function fe(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function he(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function pe(e,t,n){return t&&he(e.prototype,t),n&&he(e,n),e}var de=function(){function e(){fe(this,e),this.clientCache={}}return pe(e,[{key:"getCachedClient",value:function(e){var t=Object.assign({},e),n=e.region||v.getRegion()||Q;if(t.region=n,this.clientCache[n])return this.clientCache[n];var o=this._createClient(t);return this.clientCache[n]=o,o}},{key:"_createClient",value:function(e){var t=e.region,n=v.getEndpointOverride(),o=P[t];return n&&(o.invokeUrl=n),new ye({stageConfig:o})}}]),e}(),ge=function(){function e(){fe(this,e)}return pe(e,[{key:"sendMessage",value:function(e,t,n){throw new h("sendTextMessage in ChatClient")}},{key:"disconnectChat",value:function(e){throw new h("disconnectChat in ChatClient")}},{key:"sendEvent",value:function(e,t,n,o){throw new h("sendEvent in ChatClient")}},{key:"createConnectionDetails",value:function(e){throw new h("reconnectChat in ChatClient")}}]),e}(),ye=function(e){function t(e){var n;return fe(this,t),(n=ae(this,ue(t).call(this))).invokeUrl=e.stageConfig.invokeUrl,n.callHttpClient=g,n.logger=se.getLogger({prefix:"ChatClient"}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&le(e,t)}(t,ge),pe(t,[{key:"sendMessage",value:function(e,t,n){console.log(n);var o={Message:{ContentType:N.textPlain,Content:t,Persistence:T}},r={method:O,headers:{},url:this.invokeUrl+m,body:o};return r.headers["x-amzn-connect-connection-token"]=e,this._callHttpClient(r)}},{key:"getTranscript",value:function(e,t){var n={method:O,headers:{},url:this.invokeUrl+E,body:t};return n.headers["x-amzn-connect-connection-token"]=e,this._callHttpClient(n)}},{key:"sendEvent",value:function(e,t,n,o,r){console.log(n),console.log(r);var i={ParticipantEvent:{Visibility:o,ParticipantEventType:t}},s={method:O,headers:{},url:this.invokeUrl+S,body:i};return s.headers["x-amzn-connect-connection-token"]=e,this._callHttpClient(s)}},{key:"disconnectChat",value:function(e){var t={method:O,headers:{},url:this.invokeUrl+I,body:{}};return t.headers["x-amzn-connect-connection-token"]=e,this._callHttpClient(t)}},{key:"createConnectionDetails",value:function(e){var t={method:O,headers:{},url:this.invokeUrl+k,body:{}};return t.headers["x-amzn-connect-participant-token"]=e,this._callHttpClient(t)}},{key:"_callHttpClient",value:function(e){var t=this;return e.headers=Object.assign({"Content-Type":"application/json",Accept:"application/json"},e.headers),e.body=JSON.stringify(e.body),new Promise(function(n,o){t.callHttpClient(e,function(e){var t={};t.data=JSON.parse(e.responseText),n(t)},function(e){var n={};n.statusText=e.statusText;try{n.error=JSON.parse(e.responseText)}catch(e){t.logger.warn("invalid json error from server"),n.error=null}o(n)})})}}]),t}(),ve=new de;function be(e){return(be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _e(e,t){return!t||"object"!==be(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ce(e){return(Ce=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function we(e,t){return(we=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function me(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ee(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Se(e,t,n){return t&&Ee(e.prototype,t),n&&Ee(e,n),e}var Ie=function(){function e(){me(this,e)}return Se(e,[{key:"validateNewControllerDetails",value:function(e){return!0}},{key:"validateSendMessage",value:function(e,t){w.isString(e)||w.assertIsObject(e,"message"),w.assertIsEnum(t,Object.values(N),"type")}},{key:"validateConnectChat",value:function(e){return!0}},{key:"validateLogger",value:function(e){w.assertIsObject(e,"logger"),["debug","info","warn","error"].forEach(function(t){if(!w.isFunction(e[t]))throw new p(t+" should be a valid function on the passed logger object!")})}},{key:"validateSendEvent",value:function(e){w.assertIsNonEmptyString(e.eventType,"eventType"),void 0!==e.messageIds&&w.assertIsList(e.messageIds),void 0!==e.visibility&&w.assertIsEnum(e.visibility,Object.values(M),"visibility"),void 0!==e.persistence&&w.assertIsEnum(e.persistence,Object.values(A),"persistence")}},{key:"validateGetMessages",value:function(e){return!0}}]),e}(),ke=function(e){function t(){return me(this,t),_e(this,Ce(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&we(e,t)}(t,Ie),Se(t,[{key:"validateChatDetails",value:function(e){w.assertIsObject(e,"chatDetails"),w.assertIsNonEmptyString(e.initialContactId,"chatDetails.initialContactId"),w.assertIsNonEmptyString(e.contactId,"chatDetails.contactId"),w.assertIsNonEmptyString(e.participantId,"chatDetails.participantId"),e.connectionDetails?(w.assertIsObject(e.connectionDetails,"chatDetails.connectionDetails"),w.assertIsNonEmptyString(e.connectionDetails.PreSignedConnectionUrl,"chatDetails.connectionDetails.PreSignedConnectionUrl"),w.assertIsNonEmptyString(e.connectionDetails.ConnectionId,"chatDetails.connectionDetails.ConnectionId"),w.assertIsNonEmptyString(e.connectionDetails.connectionToken,"chatDetails.connectionDetails.connectionToken")):w.assertIsNonEmptyString(e.participantToken,"chatDetails.participantToken")}},{key:"validateInitiateChatResponse",value:function(){return!0}}]),t}(),Oe=n(3),Te=n.n(Oe);function Ne(e){return(Ne="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Me(e){return(Me=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ae(e,t){return(Ae=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Pe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function De(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ue(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Le(e,t,n){return t&&Ue(e.prototype,t),n&&Ue(e,n),e}var Re=function(){function e(){De(this,e)}return Le(e,[{key:"createNewMqttConnectionProvider",value:function(e,t){switch(t){case"PahoMqttConnection":return function(t){return e.callback=t,new qe(e)}}throw new p("type in ChatConnectionManager.createNewMqttConnectionProvider",t)}}]),e}(),xe=function(){function e(){De(this,e)}return Le(e,[{key:"connect",value:function(e){throw new h("connect in IotClient")}},{key:"disconnect",value:function(){throw new h("connect in IotClient")}},{key:"subscribe",value:function(e,t){throw new h("connect in IotClient")}},{key:"unsubscribe",value:function(e,t){throw new h("connect in IotClient")}}]),e}(),je=Object.freeze({NeverConnected:"NeverConnected",Connecting:"Connecting",Connected:"Connected",Disconnected:"Disconnected"}),Be=Object.freeze({MESSAGE:"Message",DISCONNECTED:"Disconnected"}),qe=function(e){function t(e){var n;De(this,t),(n=function(e,t){return!t||"object"!==Ne(t)&&"function"!=typeof t?Pe(e):t}(this,Me(t).call(this))).preSignedUrl=e.preSignedUrl,n.connectionId=e.connectionId,n.status=je.NeverConnected,n.pahoClient=new Te.a.Client(n.preSignedUrl,n.connectionId);var o=Pe(Pe(n));return n.pahoClient.onMessageArrived=function(e){o._messageArrivedCallback(e)},n.pahoClient.onConnectionLost=function(e){o._connectionLostCallBack(e)},n.pahoClient.onMessageArrived=function(e){o._messageArrivedCallback(e)},n.callback=e.callback,n.neverConnected=!0,n._subscribedTopics=[],n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ae(e,t)}(t,xe),Le(t,[{key:"connect",value:function(e){var t=this;return new Promise(function(n,o){e.onSuccess=function(e){t.neverConnected=!1,t._onConnectSuccess(e),n({})},e.onFailure=function(e){var n={reason:e};t._onConnectFailure(n),o(n)},t.status=je.Connecting,t.pahoClient.connect(e)})}},{key:"_connectionLostCallBack",value:function(e){var t={reason:e};this._subscribedTopics=[],this.status!==je.Disconnected&&(this.status=je.Disconnected,this.callback(Be.DISCONNECTED,t))}},{key:"_messageArrivedCallback",value:function(e){var t={topic:e.topic,qos:e.qos,payloadString:e.payloadString};this.callback(Be.MESSAGE,t)}},{key:"_onConnectSuccess",value:function(e){this.status=je.Connected}},{key:"_onConnectFailure",value:function(e){this.neverConnected?this.status=je.NeverConnected:this.status=je.Disconnected}},{key:"disconnect",value:function(){this._subscribedTopics=[],this.status=je.Disconnected,this.pahoClient.disconnect()}},{key:"subscribe",value:function(e,t){var n=this;return new Promise(function(o,r){t.onSuccess=function(t){n._subscribeSuccess(e,t);var r={topic:e,qos:t.grantedQos};o(r)},t.onFailure=function(t){r({topic:e,error:t})},n.pahoClient.subscribe(e,t)})}},{key:"_addToTopics",value:function(e){this._subscribedTopics.indexOf(e)>=0||this._subscribedTopics.push(e)}},{key:"_subscribeSuccess",value:function(e,t){this._addToTopics(e)}},{key:"getSubscribedTopics",value:function(){return this._subscribedTopics.slice(0)}},{key:"unsubscribe",value:function(e,t){var n=this;return new Promise(function(o,r){t.onSuccess=function(t){var r={topic:e,response:t};n._unsubscribeSuccess(e,r),o(r)},t.onFailure=function(t){r({topic:e,error:t})},n.pahoClient.unsubscribe(e,t)})}},{key:"_unsubscribeSuccess",value:function(e,t){this._subscribedTopics=this._subscribedTopics.filter(function(t){return t!==e})}},{key:"getStatus",value:function(){return this.status}}]),t}();function Fe(e){return(Fe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ve(e,t){return!t||"object"!==Fe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ge(e){return(Ge=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function He(e,t){return(He=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ke(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Qe(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Je(e,t,n){return t&&Qe(e.prototype,t),n&&Qe(e,n),e}var ze=function(){function e(){Ke(this,e)}return Je(e,[{key:"start",value:function(e){throw new h("start in ConnectionHelper")}},{key:"end",value:function(){throw new h("end in ConnectionHelper")}}]),e}(),Ye={NeverStarted:"NeverStarted",Starting:"Starting",Connected:"Connected",Ended:"Ended"},We="Ended",Xe="IncomingMessage",$e=function(e){function t(e){var n;Ke(this,t),n=Ve(this,Ge(t).call(this));var o="ContactId-"+e.contactId+": ";if(n.logger=se.getLogger({prefix:o}),n.preSignedUrl=e.connectionDetails.preSignedUrl,n.topic=e.connectionDetails.connectionId,n.considerParticipantAsDisconnected=!1,n.iotConnection=e.mqttConnectionProvider(function(e,t){return n._handleIotEvent(e,t)}),n.iotConnection.getStatus()!==je.NeverConnected)throw new p("iotConnection is expected to be in NeverConnected state but is not")();return n.chatControllerCallback=e.callback,n.status=Ye.NeverStarted,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&He(e,t)}(t,ze),Je(t,[{key:"cleanUpOnParticipantDisconnect",value:function(){this.considerParticipantAsDisconnected=!0}},{key:"start",value:function(){if(this.status!==Ye.NeverStarted)throw new d("Connection helper started twice!!");return this.status=Ye.Starting,new Promise(this._createStartPromise())}},{key:"_createStartPromise",value:function(){var e=this;return function(t,n){e._connect(t,n)}}},{key:"_connect",value:function(e,t){var n=this,o={useSSL:!0,keepAliveInterval:D,reconnect:!1,mqttVersion:4,timeout:U};n.iotConnection.connect(o).then(function(o){n._postConnect(e,t,o)}).catch(function(e){n._connectFailed(t,e)})}},{key:"_postConnect",value:function(e,t,n){this._subscribe(e,t,n)}},{key:"_connectFailed",value:function(e,t){var n={connectSuccess:!1,reason:"ConnectionToBrokerFailed",details:t};this.status=Ye.Ended,e(n)}},{key:"_subscribe",value:function(e,t,n){var o=this;o.iotConnection.subscribe(o.topic,{qos:1}).then(function(t){o._postSubscribe(e,t)}).catch(function(e){o._subscribeFailed(t,e)})}},{key:"_postSubscribe",value:function(e,t){var n={details:t,connectSuccess:!0};this.status=Ye.Connected,e(n)}},{key:"_subscribeFailed",value:function(e,t){var n={connectSuccess:!1,details:t,reason:"SubscribtionToTopicFailed"};this.status=Ye.Ended,this.iotConnection.disconnect(),e(n)}},{key:"_handleIotEvent",value:function(e,t){switch(e){case Be.MESSAGE:this.logger.debug("Received incoming data",t.payloadString),this.chatControllerCallback(Xe,t);break;case Be.DISCONNECTED:this.status=Ye.Ended,this.chatControllerCallback(We,t)}}},{key:"end",value:function(){this.status=Ye.Ended,this.iotConnection.disconnect()}},{key:"getStatus",value:function(){return this.status}}]),t}();function Ze(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var et=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,o;return t=e,(n=[{key:"fromConnectionHelperEvent",value:function(e,t,n){var o={type:null,data:{data:t,chatDetails:n}};switch(e){case We:return o.type=B,o.data.reconnect=0!==t.reason.errorCode,o;case Xe:return this._fromIncomingData(t,n)}}},{key:"_fromIncomingData",value:function(e,t){var n=JSON.parse(e.payloadString),o={type:null,data:{data:n,chatDetails:t}};switch(n.Data.Type){case"TYPING":return o.type=x,o}return o.type=R,o}}])&&Ze(t.prototype,n),o&&Ze(t,o),e}(),tt=function(e,t,n){this.subMap=e,this.id=w.randomId(),this.eventName=t,this.f=n};tt.prototype.unsubscribe=function(){this.subMap.unsubscribe(this.eventName,this.id)};var nt=function(){this.subIdMap={},this.subEventNameMap={}};nt.prototype.subscribe=function(e,t){var n=new tt(this,e,t);this.subIdMap[n.id]=n;var o=this.subEventNameMap[e]||[];o.push(n),this.subEventNameMap[e]=o},nt.prototype.unsubscribe=function(e,t){w.contains(this.subEventNameMap,e)&&(this.subEventNameMap[e]=this.subEventNameMap[e].filter(function(e){return e.id!==t}),this.subEventNameMap[e].length<1&&delete this.subEventNameMap[e]),w.contains(this.subIdMap,t)&&delete this.subIdMap[t]},nt.prototype.getAllSubscriptions=function(){return w.values(this.subEventNameMap).reduce(function(e,t){return e.concat(t)},[])},nt.prototype.getSubscriptions=function(e){return this.subEventNameMap[e]||[]};var ot=function(e){var t=e||{};this.subMap=new nt,this.logEvents=t.logEvents||!1};function rt(e){return(rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function it(e,t){return!t||"object"!==rt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function st(e){return(st=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ct(e,t){return(ct=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function at(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ut(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function lt(e,t,n){return t&&ut(e.prototype,t),n&&ut(e,n),e}ot.prototype.subscribe=function(e,t){return w.assertNotNull(e,"eventName"),w.assertNotNull(t,"f"),w.assertTrue(w.isFunction(t),"f must be a function"),this.subMap.subscribe(e,t)},ot.prototype.subscribeAll=function(e){return w.assertNotNull(e,"f"),w.assertTrue(w.isFunction(e),"f must be a function"),this.subMap.subscribe("<<all>>",e)},ot.prototype.getSubscriptions=function(e){return this.subMap.getSubscriptions(e)},ot.prototype.trigger=function(e,t){w.assertNotNull(e,"eventName");var n=this,o=this.subMap.getSubscriptions("<<all>>"),r=this.subMap.getSubscriptions(e);o.concat(r).forEach(function(o){try{o.f(t||null,e,n)}catch(e){}})},ot.prototype.triggerAsync=function(e,t){var n=this;setTimeout(function(){return n.trigger(e,t)},0)},ot.prototype.bridge=function(){var e=this;return function(t,n){e.trigger(n,t)}},ot.prototype.unsubscribeAll=function(){this.subMap.getAllSubscriptions().forEach(function(e){e.unsubscribe()})};var ft="NeverEstablished",ht="Establishing",pt="Established",dt="Broken",gt=function(){function e(){at(this,e)}return lt(e,[{key:"sendTextMessage",value:function(e){throw new h("sendTextMessage in ChatController")}},{key:"establishNetworkLink",value:function(e){throw new h("connectChat in ChatController")}},{key:"disconnectParticipant",value:function(){throw new h("endChat in ChatController")}},{key:"sendEvent",value:function(e){throw new h("sendEvent in ChatController")}},{key:"getTranscript",value:function(e){throw new h("getTranscript in ChatController")}},{key:"getConnectionStatus",value:function(){throw new h("getStatus in ChatController")}}]),e}(),yt=function(e){function t(e){var n;return at(this,t),(n=it(this,st(t).call(this))).setArguments(e),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ct(e,t)}(t,gt),lt(t,[{key:"setArguments",value:function(e){var t=this,n="ContactId-"+e.chatDetails.contactId+": ";this.logger=se.getLogger({prefix:n}),this.argsValidator=e.argsValidator,this.chatEventConstructor=e.chatEventConstructor,this.connectionDetails=e.chatDetails.connectionDetails,this.intialContactId=e.chatDetails.initialContactId,this.contactId=e.chatDetails.contactId,this.participantId=e.chatDetails.participantId,this.chatClient=e.chatClient,this.participantToken=e.chatDetails.participantToken,this.connectionHelperCallback=function(e,n){return t._handleConnectionHelperEvents(e,n)},this._hasConnectionDetails=e.hasConnectionDetails,this.chatControllerFactory=e.chatControllerFactory,e.hasConnectionDetails&&this._setConnectionHelper(e.chatDetails.connectionDetails,e.chatDetails.contactId),this._connectCalledAtleastOnce=!1,this._everConnected=!1,this.pubsub=e.pubsub,this._participantDisconnected=!1,this.sessionMetadata={}}},{key:"_setConnectionHelper",value:function(e,t){var n=this.chatControllerFactory.createConnectionHelperProvider(e,t);this.connectionHelper=n(this.connectionHelperCallback)}},{key:"cleanUpOnParticipantDisconnect",value:function(){this.pubsub.unsubscribeAll(),this.connectionHelper&&this.connectionHelper.cleanUpOnParticipantDisconnect()}},{key:"subscribe",value:function(e,t){this.pubsub.subscribe(e,t),this.logger.info("Subscribed successfully to eventName: ",e)}},{key:"sendMessage",value:function(e){var t=this,n=e.message,o=e.type||N.textPlain,r=e.metadata||null;t.argsValidator.validateSendMessage(n,o);var i=t.connectionDetails.connectionToken;return t.chatClient.sendMessage(i,n,o).then(function(n){return n.metadata=r,t.logger.debug("Successfully sent message, response: ",n," request: ",e),n},function(n){return n.metadata=r,t.logger.debug("Failed to send message, error: ",n," request: ",e),Promise.reject(n)})}},{key:"sendEvent",value:function(e){var t=this,n=e.metadata||null;t.argsValidator.validateSendEvent(e);var o=t.connectionDetails.connectionToken,r=e.persistence||A.PERSISTED,i=e.visibility||M.ALL;return t.chatClient.sendEvent(o,e.eventType,e.messageIds,i,r).then(function(o){return o.metadata=n,t.logger.debug("Successfully sent event, response: ",o," request: ",e),o},function(o){return o.metadata=n,t.logger.debug("Failed to send event, error: ",o," request: ",e),Promise.reject(o)})}},{key:"getTranscript",value:function(e){var t=this,n=e.metadata||null,o={};o.IntialContactId=this.intialContactId,o.StartKey=e.StartKey||{},o.ScanDirection=e.ScanDirection||V,o.SortKey=e.SortKey||F,o.MaxResults=e.MaxResults||q,e.NextToken&&(o.NextToken=e.NextToken);var r=this.connectionDetails.connectionToken;return this.chatClient.getTranscript(r,o).then(function(e){return e.metadata=n,t.logger.debug("Successfully retrieved transcript, response: ",e," request: ",o),e},function(e){return e.metadata=n,t.logger.debug("Failed to retrieve transcript, error: ",e," request: ",o),Promise.reject(e)})}},{key:"_mapConnectionHelperEventToChatEvent",value:function(e,t){try{return this.chatEventConstructor.fromConnectionHelperEvent(e,t,this.getChatDetails(),this.logger)}catch(n){return this.logger.error("Error occured while handling event from Connection. eventType and eventData: ",e,t," Causing exception: ",n),null}}},{key:"_forwardChatEvent",value:function(e){this.logger.debug("Triggering event for subscribers:",e),this.pubsub.triggerAsync(e.type,e.data)}},{key:"_handleConnectionHelperEvents",value:function(e,t){var n=this._mapConnectionHelperEventToChatEvent(e,t);n&&(this._handleChatEvent(n),this._forwardChatEvent(n))}},{key:"_handleChatEvent",value:function(e){e.type===B&&v.reconnect&&e.data.reconnect&&this._initiateReconnect()}},{key:"connect",value:function(e){var t=e||{};return this.sessionMetadata=t.metadata||null,this.argsValidator.validateConnectChat(t),this._connect()}},{key:"_connect",value:function(){var e=this;if(!this._canConnect())throw new d("Can call establishNetworkLink only when getConnectionStatus is Broken or NeverEstablished");var t=function(t){return e._onConnectSuccess(t,e.sessionMetadata)},n=function(t){return e._onConnectFailure(t,e.sessionMetadata)};return this._connectCalledAtleastOnce=!0,this._hasConnectionDetails?this.connectionHelper.start().then(t,n):this._fetchConnectionDetails().then(function(t){return e._setConnectionHelper(t,e.contactId),e.connectionDetails=t,e._hasConnectionDetails=!0,e.connectionHelper.start()}).then(t,n)}},{key:"_initiateReconnect",value:function(){var e=this;w.asyncWhileInterval(function(t){return e.logger.info("Reconnect - ".concat(t,". try")),e._hasConnectionDetails=!1,e.connectionDetails=null,e._connect()},function(t){return t<5&&e._canReconnect()},1e3).then(function(){e.logger.info("Reconnect - Success")}).catch(function(){e.logger.info("Reconnect - Failed")})}},{key:"_canConnect",value:function(){return this.getConnectionStatus()===dt||this.getConnectionStatus()===ft}},{key:"_canReconnect",value:function(){return this.getConnectionStatus()===dt}},{key:"_onConnectSuccess",value:function(e,t){this.logger.info("Connect successful!");var n={_debug:e,connectSuccess:!0,connectCalled:!0,metadata:t},o=Object.assign({chatDetails:this.getChatDetails()},n);return this.pubsub.triggerAsync(j,o),n}},{key:"_onConnectFailure",value:function(e,t){var n={_debug:e,connectSuccess:!1,connectCalled:!0,metadata:t};return this.logger.error("Connect Failed with data: ",n),Promise.reject(n)}},{key:"_fetchConnectionDetails",value:function(){return this.chatClient.createConnectionDetails(this.participantToken).then(function(e){var t={};return t.ConnectionId=e.data.ConnectionId,t.PreSignedConnectionUrl=e.data.PreSignedConnectionUrl,t.connectionToken=e.data.ParticipantCredentials.ConnectionAuthenticationToken,t},function(e){return Promise.reject({reason:"Failed to fetch connectionDetails",_debug:e})})}},{key:"breakConnection",value:function(){return this.connectionHelper.end()}},{key:"disconnectParticipant",value:function(){var e=this,t=e.connectionDetails.connectionToken;return e.chatClient.disconnectChat(t).then(function(t){return e.logger.info("disconnect participant successful"),e._participantDisconnected=!0,t},function(t){return e.logger.error("disconnect participant failed with error: ",t),Promise.reject(t)})}},{key:"getChatDetails",value:function(){return{intialContactId:this.intialContactId,contactId:this.contactId,participantId:this.participantId,participantToken:this.participantToken,connectionDetails:this.connectionDetails}}},{key:"_convertConnectionHelperStatus",value:function(e){switch(e){case Ye.NeverStarted:return ft;case Ye.Starting:return ht;case Ye.Ended:return dt;case Ye.Connected:return pt}self.logger.error("Reached invalid state. Unknown connectionHelperStatus: ",e)}},{key:"getConnectionStatus",value:function(){return this._convertConnectionHelperStatus(this.connectionHelper.getStatus())}}]),t}();function vt(e){return(vt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function bt(e,t){return!t||"object"!==vt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _t(e){return(_t=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ct(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&wt(e,t)}function wt(e,t){return(wt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function mt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Et(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function St(e,t,n){return t&&Et(e.prototype,t),n&&Et(e,n),e}n.d(t,"a",function(){return At});var It=function(){function e(){mt(this,e)}return St(e,[{key:"createAgentChatController",value:function(e,t){throw new h("createAgentChatController in ChatControllerFactory.")}},{key:"createCustomerChatController",value:function(e,t){throw new h("createCustomerChatController in ChatControllerFactory.")}},{key:"createConnectionHelperProvider",value:function(e){throw new h("createIncomingChatController in ChatControllerFactory")}}]),e}(),kt=function(e){function t(){var e;return mt(this,t),(e=bt(this,_t(t).call(this))).argsValidator=new ke,e.chatConnectionManager=new Re,e.chatEventConstructor=new et,e}return Ct(t,It),St(t,[{key:"createAgentChatSession",value:function(e,t){var n=this._createChatSession(e,t);return new Tt(n)}},{key:"createCustomerChatSession",value:function(e,t){var n=this._createChatSession(e,t);return new Nt(n)}},{key:"_createChatSession",value:function(e,t){var n=this._normalizeChatDetails(e),o=!1;n.connectionDetails&&(o=!0);var r={chatDetails:n,chatControllerFactory:this,chatEventConstructor:this.chatEventConstructor,pubsub:new ot,chatClient:ve.getCachedClient(t),argsValidator:this.argsValidator,hasConnectionDetails:o};return new yt(r)}},{key:"_normalizeChatDetails",value:function(e){if(e.ChatConnectionAttributes&&e.ChatConnectionAttributes.ParticipantCredentials){this.argsValidator.validateInitiateChatResponse(e);var t={},n={};return n.connectionToken=e.ChatConnectionAttributes.ParticipantCredentials.ConnectionAuthenticationToken,n.ConnectionId=e.ChatConnectionAttributes.ConnectionId,n.PreSignedConnectionUrl=e.ChatConnectionAttributes.PreSignedConnectionUrl,t.connectionDetails=n,t.participantId=e.ParticipantId,t.contactId=e.ContactId,t.initialContactId=e.ContactId,t}return this.argsValidator.validateChatDetails(e),e}},{key:"createConnectionHelperProvider",value:function(e,t){var n={preSignedUrl:e.PreSignedConnectionUrl,connectionId:e.ConnectionId},o={mqttConnectionProvider:this.chatConnectionManager.createNewMqttConnectionProvider(n,"PahoMqttConnection"),connectionDetails:{preSignedUrl:e.PreSignedConnectionUrl,connectionId:e.ConnectionId},contactId:t};return function(e){return o.callback=e,new $e(o)}}}]),t}(),Ot=function(){function e(t){mt(this,e),this.controller=t}return St(e,[{key:"onMessage",value:function(e){this.controller.subscribe(R,e)}},{key:"onTyping",value:function(e){this.controller.subscribe(x,e)}},{key:"onConnectionBroken",value:function(e){this.controller.subscribe(B,e)}},{key:"onConnectionEstablished",value:function(e){this.controller.subscribe(j,e)}},{key:"sendMessage",value:function(e){return this.controller.sendMessage(e)}},{key:"connect",value:function(e){return this.controller.connect(e)}},{key:"sendEvent",value:function(e){return this.controller.sendEvent(e)}},{key:"getTranscript",value:function(e){return this.controller.getTranscript(e)}},{key:"getChatDetails",value:function(){return this.controller.getChatDetails()}}]),e}(),Tt=function(e){function t(e){return mt(this,t),bt(this,_t(t).call(this,e))}return Ct(t,Ot),St(t,[{key:"cleanUpOnParticipantDisconnect",value:function(){return this.controller.cleanUpOnParticipantDisconnect()}}]),t}(),Nt=function(e){function t(e){return mt(this,t),bt(this,_t(t).call(this,e))}return Ct(t,Ot),St(t,[{key:"disconnectParticipant",value:function(){var e=this;return this.controller.disconnectParticipant().then(function(t){return e.controller.cleanUpOnParticipantDisconnect(),e.controller.breakConnection(),t})}}]),t}(),Mt=new kt,At={create:function(e){var t=e.options||{},n=e.type||L.AGENT;if(n===L.AGENT)return Mt.createAgentChatSession(e.chatDetails,t);if(n===L.CUSTOMER)return Mt.createCustomerChatSession(e.chatDetails,t);throw new p("Unkown value for session type, Allowed values are: "+Object.values(L),n)},setGlobalConfig:function(e){var t=e.loggerConfig;v.update(e),se.updateLoggerConfig(t)},LogLevel:te,Logger:ee,SessionTypes:L}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(e,o){var r,i,s;function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}s=function(){return function(e){var t,n=e.localStorage||(t={},{setItem:function(e,n){t[e]=n},getItem:function(e){return t[e]},removeItem:function(e){delete t[e]}}),o={CONNECT:1,CONNACK:2,PUBLISH:3,PUBACK:4,PUBREC:5,PUBREL:6,PUBCOMP:7,SUBSCRIBE:8,SUBACK:9,UNSUBSCRIBE:10,UNSUBACK:11,PINGREQ:12,PINGRESP:13,DISCONNECT:14},r=function(e,t){for(var n in e)if(e.hasOwnProperty(n)){if(!t.hasOwnProperty(n)){var o="Unknown property, "+n+". Valid properties are:";for(var r in t)t.hasOwnProperty(r)&&(o=o+" "+r);throw new Error(o)}if(c(e[n])!==t[n])throw new Error(u(s.INVALID_TYPE,[c(e[n]),n]))}},i=function(e,t){return function(){return e.apply(t,arguments)}},s={OK:{code:0,text:"AMQJSC0000I OK."},CONNECT_TIMEOUT:{code:1,text:"AMQJSC0001E Connect timed out."},SUBSCRIBE_TIMEOUT:{code:2,text:"AMQJS0002E Subscribe timed out."},UNSUBSCRIBE_TIMEOUT:{code:3,text:"AMQJS0003E Unsubscribe timed out."},PING_TIMEOUT:{code:4,text:"AMQJS0004E Ping timed out."},INTERNAL_ERROR:{code:5,text:"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}"},CONNACK_RETURNCODE:{code:6,text:"AMQJS0006E Bad Connack return code:{0} {1}."},SOCKET_ERROR:{code:7,text:"AMQJS0007E Socket error:{0}."},SOCKET_CLOSE:{code:8,text:"AMQJS0008I Socket closed."},MALFORMED_UTF:{code:9,text:"AMQJS0009E Malformed UTF data:{0} {1} {2}."},UNSUPPORTED:{code:10,text:"AMQJS0010E {0} is not supported by this browser."},INVALID_STATE:{code:11,text:"AMQJS0011E Invalid state {0}."},INVALID_TYPE:{code:12,text:"AMQJS0012E Invalid type {0} for {1}."},INVALID_ARGUMENT:{code:13,text:"AMQJS0013E Invalid argument {0} for {1}."},UNSUPPORTED_OPERATION:{code:14,text:"AMQJS0014E Unsupported operation."},INVALID_STORED_DATA:{code:15,text:"AMQJS0015E Invalid data in local storage key={0} value={1}."},INVALID_MQTT_MESSAGE_TYPE:{code:16,text:"AMQJS0016E Invalid MQTT message type {0}."},MALFORMED_UNICODE:{code:17,text:"AMQJS0017E Malformed Unicode string:{0} {1}."},BUFFER_FULL:{code:18,text:"AMQJS0018E Message buffer is full, maximum buffer size: {0}."}},a={0:"Connection Accepted",1:"Connection Refused: unacceptable protocol version",2:"Connection Refused: identifier rejected",3:"Connection Refused: server unavailable",4:"Connection Refused: bad user name or password",5:"Connection Refused: not authorized"},u=function(e,t){var n=e.text;if(t)for(var o,r,i=0;i<t.length;i++)if(o="{"+i+"}",(r=n.indexOf(o))>0){var s=n.substring(0,r),c=n.substring(r+o.length);n=s+t[i]+c}return n},l=[0,6,77,81,73,115,100,112,3],f=[0,4,77,81,84,84,4],h=function(e,t){for(var n in this.type=e,t)t.hasOwnProperty(n)&&(this[n]=t[n])};function p(e,t){var n,r=t,i=e[t],s=i>>4,c=i&=15;t+=1;var a=0,u=1;do{if(t==e.length)return[null,r];a+=(127&(n=e[t++]))*u,u*=128}while(0!=(128&n));var l=t+a;if(l>e.length)return[null,r];var f=new h(s);switch(s){case o.CONNACK:1&e[t++]&&(f.sessionPresent=!0),f.returnCode=e[t++];break;case o.PUBLISH:var p=c>>1&3,d=y(e,t),g=_(e,t+=2,d);t+=d,p>0&&(f.messageIdentifier=y(e,t),t+=2);var v=new E(e.subarray(t,l));1==(1&c)&&(v.retained=!0),8==(8&c)&&(v.duplicate=!0),v.qos=p,v.destinationName=g,f.payloadMessage=v;break;case o.PUBACK:case o.PUBREC:case o.PUBREL:case o.PUBCOMP:case o.UNSUBACK:f.messageIdentifier=y(e,t);break;case o.SUBACK:f.messageIdentifier=y(e,t),t+=2,f.returnCode=e.subarray(t,l)}return[f,l]}function d(e,t,n){return t[n++]=e>>8,t[n++]=e%256,n}function g(e,t,n,o){return b(e,n,o=d(t,n,o)),o+t}function y(e,t){return 256*e[t]+e[t+1]}function v(e){for(var t=0,n=0;n<e.length;n++){var o=e.charCodeAt(n);o>2047?(55296<=o&&o<=56319&&(n++,t++),t+=3):o>127?t+=2:t++}return t}function b(e,t,n){for(var o=n,r=0;r<e.length;r++){var i=e.charCodeAt(r);if(55296<=i&&i<=56319){var c=e.charCodeAt(++r);if(isNaN(c))throw new Error(u(s.MALFORMED_UNICODE,[i,c]));i=c-56320+(i-55296<<10)+65536}i<=127?t[o++]=i:i<=2047?(t[o++]=i>>6&31|192,t[o++]=63&i|128):i<=65535?(t[o++]=i>>12&15|224,t[o++]=i>>6&63|128,t[o++]=63&i|128):(t[o++]=i>>18&7|240,t[o++]=i>>12&63|128,t[o++]=i>>6&63|128,t[o++]=63&i|128)}return t}function _(e,t,n){for(var o,r="",i=t;i<t+n;){var c=e[i++];if(c<128)o=c;else{var a=e[i++]-128;if(a<0)throw new Error(u(s.MALFORMED_UTF,[c.toString(16),a.toString(16),""]));if(c<224)o=64*(c-192)+a;else{var l=e[i++]-128;if(l<0)throw new Error(u(s.MALFORMED_UTF,[c.toString(16),a.toString(16),l.toString(16)]));if(c<240)o=4096*(c-224)+64*a+l;else{var f=e[i++]-128;if(f<0)throw new Error(u(s.MALFORMED_UTF,[c.toString(16),a.toString(16),l.toString(16),f.toString(16)]));if(!(c<248))throw new Error(u(s.MALFORMED_UTF,[c.toString(16),a.toString(16),l.toString(16),f.toString(16)]));o=262144*(c-240)+4096*a+64*l+f}}}o>65535&&(o-=65536,r+=String.fromCharCode(55296+(o>>10)),o=56320+(1023&o)),r+=String.fromCharCode(o)}return r}h.prototype.encode=function(){var e,t=(15&this.type)<<4,n=0,r=[],i=0;switch(void 0!==this.messageIdentifier&&(n+=2),this.type){case o.CONNECT:switch(this.mqttVersion){case 3:n+=l.length+3;break;case 4:n+=f.length+3}n+=v(this.clientId)+2,void 0!==this.willMessage&&(n+=v(this.willMessage.destinationName)+2,(e=this.willMessage.payloadBytes)instanceof Uint8Array||(e=new Uint8Array(c)),n+=e.byteLength+2),void 0!==this.userName&&(n+=v(this.userName)+2),void 0!==this.password&&(n+=v(this.password)+2);break;case o.SUBSCRIBE:t|=2;for(var s=0;s<this.topics.length;s++)r[s]=v(this.topics[s]),n+=r[s]+2;n+=this.requestedQos.length;break;case o.UNSUBSCRIBE:t|=2;for(s=0;s<this.topics.length;s++)r[s]=v(this.topics[s]),n+=r[s]+2;break;case o.PUBREL:t|=2;break;case o.PUBLISH:this.payloadMessage.duplicate&&(t|=8),t=t|=this.payloadMessage.qos<<1,this.payloadMessage.retained&&(t|=1),n+=(i=v(this.payloadMessage.destinationName))+2;var c=this.payloadMessage.payloadBytes;n+=c.byteLength,c instanceof ArrayBuffer?c=new Uint8Array(c):c instanceof Uint8Array||(c=new Uint8Array(c.buffer));break;case o.DISCONNECT:}var a=function(e){var t=new Array(1),n=0;do{var o=e%128;(e>>=7)>0&&(o|=128),t[n++]=o}while(e>0&&n<4);return t}(n),u=a.length+1,h=new ArrayBuffer(n+u),p=new Uint8Array(h);if(p[0]=t,p.set(a,1),this.type==o.PUBLISH)u=g(this.payloadMessage.destinationName,i,p,u);else if(this.type==o.CONNECT){switch(this.mqttVersion){case 3:p.set(l,u),u+=l.length;break;case 4:p.set(f,u),u+=f.length}var y=0;this.cleanSession&&(y=2),void 0!==this.willMessage&&(y|=4,y|=this.willMessage.qos<<3,this.willMessage.retained&&(y|=32)),void 0!==this.userName&&(y|=128),void 0!==this.password&&(y|=64),p[u++]=y,u=d(this.keepAliveInterval,p,u)}switch(void 0!==this.messageIdentifier&&(u=d(this.messageIdentifier,p,u)),this.type){case o.CONNECT:u=g(this.clientId,v(this.clientId),p,u),void 0!==this.willMessage&&(u=g(this.willMessage.destinationName,v(this.willMessage.destinationName),p,u),u=d(e.byteLength,p,u),p.set(e,u),u+=e.byteLength),void 0!==this.userName&&(u=g(this.userName,v(this.userName),p,u)),void 0!==this.password&&(u=g(this.password,v(this.password),p,u));break;case o.PUBLISH:p.set(c,u);break;case o.SUBSCRIBE:for(s=0;s<this.topics.length;s++)u=g(this.topics[s],r[s],p,u),p[u++]=this.requestedQos[s];break;case o.UNSUBSCRIBE:for(s=0;s<this.topics.length;s++)u=g(this.topics[s],r[s],p,u)}return h};var C=function(e,t){this._client=e,this._keepAliveInterval=1e3*t,this.isReset=!1;var n=new h(o.PINGREQ).encode(),r=function(e){return function(){return i.apply(e)}},i=function(){this.isReset?(this.isReset=!1,this._client._trace("Pinger.doPing","send PINGREQ"),this._client.socket.send(n),this.timeout=setTimeout(r(this),this._keepAliveInterval)):(this._client._trace("Pinger.doPing","Timed out"),this._client._disconnected(s.PING_TIMEOUT.code,u(s.PING_TIMEOUT)))};this.reset=function(){this.isReset=!0,clearTimeout(this.timeout),this._keepAliveInterval>0&&(this.timeout=setTimeout(r(this),this._keepAliveInterval))},this.cancel=function(){clearTimeout(this.timeout)}},w=function(e,t,n,o){t||(t=30);this.timeout=setTimeout(function(e,t,n){return function(){return e.apply(t,n)}}(n,e,o),1e3*t),this.cancel=function(){clearTimeout(this.timeout)}},m=function(t,o,r,i,c){if(!("WebSocket"in e&&null!==e.WebSocket))throw new Error(u(s.UNSUPPORTED,["WebSocket"]));if(!("ArrayBuffer"in e&&null!==e.ArrayBuffer))throw new Error(u(s.UNSUPPORTED,["ArrayBuffer"]));for(var a in this._trace("Paho.Client",t,o,r,i,c),this.host=o,this.port=r,this.path=i,this.uri=t,this.clientId=c,this._wsuri=null,this._localKey=o+":"+r+("/mqtt"!=i?":"+i:"")+":"+c+":",this._msg_queue=[],this._buffered_msg_queue=[],this._sentMessages={},this._receivedMessages={},this._notify_msg_sent={},this._message_identifier=1,this._sequence=0,n)0!==a.indexOf("Sent:"+this._localKey)&&0!==a.indexOf("Received:"+this._localKey)||this.restore(a)};m.prototype.host=null,m.prototype.port=null,m.prototype.path=null,m.prototype.uri=null,m.prototype.clientId=null,m.prototype.socket=null,m.prototype.connected=!1,m.prototype.maxMessageIdentifier=65536,m.prototype.connectOptions=null,m.prototype.hostIndex=null,m.prototype.onConnected=null,m.prototype.onConnectionLost=null,m.prototype.onMessageDelivered=null,m.prototype.onMessageArrived=null,m.prototype.traceFunction=null,m.prototype._msg_queue=null,m.prototype._buffered_msg_queue=null,m.prototype._connectTimeout=null,m.prototype.sendPinger=null,m.prototype.receivePinger=null,m.prototype._reconnectInterval=1,m.prototype._reconnecting=!1,m.prototype._reconnectTimeout=null,m.prototype.disconnectedPublishing=!1,m.prototype.disconnectedBufferSize=5e3,m.prototype.receiveBuffer=null,m.prototype._traceBuffer=null,m.prototype._MAX_TRACE_ENTRIES=100,m.prototype.connect=function(e){var t=this._traceMask(e,"password");if(this._trace("Client.connect",t,this.socket,this.connected),this.connected)throw new Error(u(s.INVALID_STATE,["already connected"]));if(this.socket)throw new Error(u(s.INVALID_STATE,["already connected"]));this._reconnecting&&(this._reconnectTimeout.cancel(),this._reconnectTimeout=null,this._reconnecting=!1),this.connectOptions=e,this._reconnectInterval=1,this._reconnecting=!1,e.uris?(this.hostIndex=0,this._doConnect(e.uris[0])):this._doConnect(this.uri)},m.prototype.subscribe=function(e,t){if(this._trace("Client.subscribe",e,t),!this.connected)throw new Error(u(s.INVALID_STATE,["not connected"]));var n=new h(o.SUBSCRIBE);n.topics=e.constructor===Array?e:[e],void 0===t.qos&&(t.qos=0),n.requestedQos=[];for(var r=0;r<n.topics.length;r++)n.requestedQos[r]=t.qos;t.onSuccess&&(n.onSuccess=function(e){t.onSuccess({invocationContext:t.invocationContext,grantedQos:e})}),t.onFailure&&(n.onFailure=function(e){t.onFailure({invocationContext:t.invocationContext,errorCode:e,errorMessage:u(e)})}),t.timeout&&(n.timeOut=new w(this,t.timeout,t.onFailure,[{invocationContext:t.invocationContext,errorCode:s.SUBSCRIBE_TIMEOUT.code,errorMessage:u(s.SUBSCRIBE_TIMEOUT)}])),this._requires_ack(n),this._schedule_message(n)},m.prototype.unsubscribe=function(e,t){if(this._trace("Client.unsubscribe",e,t),!this.connected)throw new Error(u(s.INVALID_STATE,["not connected"]));var n=new h(o.UNSUBSCRIBE);n.topics=e.constructor===Array?e:[e],t.onSuccess&&(n.callback=function(){t.onSuccess({invocationContext:t.invocationContext})}),t.timeout&&(n.timeOut=new w(this,t.timeout,t.onFailure,[{invocationContext:t.invocationContext,errorCode:s.UNSUBSCRIBE_TIMEOUT.code,errorMessage:u(s.UNSUBSCRIBE_TIMEOUT)}])),this._requires_ack(n),this._schedule_message(n)},m.prototype.send=function(e){this._trace("Client.send",e);var t=new h(o.PUBLISH);if(t.payloadMessage=e,this.connected)e.qos>0?this._requires_ack(t):this.onMessageDelivered&&(this._notify_msg_sent[t]=this.onMessageDelivered(t.payloadMessage)),this._schedule_message(t);else{if(!this._reconnecting||!this.disconnectedPublishing)throw new Error(u(s.INVALID_STATE,["not connected"]));if(Object.keys(this._sentMessages).length+this._buffered_msg_queue.length>this.disconnectedBufferSize)throw new Error(u(s.BUFFER_FULL,[this.disconnectedBufferSize]));e.qos>0?this._requires_ack(t):(t.sequence=++this._sequence,this._buffered_msg_queue.unshift(t))}},m.prototype.disconnect=function(){if(this._trace("Client.disconnect"),this._reconnecting&&(this._reconnectTimeout.cancel(),this._reconnectTimeout=null,this._reconnecting=!1),!this.socket)throw new Error(u(s.INVALID_STATE,["not connecting or connected"]));var e=new h(o.DISCONNECT);this._notify_msg_sent[e]=i(this._disconnected,this),this._schedule_message(e)},m.prototype.getTraceLog=function(){if(null!==this._traceBuffer){for(var e in this._trace("Client.getTraceLog",new Date),this._trace("Client.getTraceLog in flight messages",this._sentMessages.length),this._sentMessages)this._trace("_sentMessages ",e,this._sentMessages[e]);for(var e in this._receivedMessages)this._trace("_receivedMessages ",e,this._receivedMessages[e]);return this._traceBuffer}},m.prototype.startTrace=function(){null===this._traceBuffer&&(this._traceBuffer=[]),this._trace("Client.startTrace",new Date,"@VERSION@-@BUILDLEVEL@")},m.prototype.stopTrace=function(){delete this._traceBuffer},m.prototype._doConnect=function(e){if(this.connectOptions.useSSL){var t=e.split(":");t[0]="wss",e=t.join(":")}this._wsuri=e,this.connected=!1,this.connectOptions.mqttVersion<4?this.socket=new WebSocket(e,["mqttv3.1"]):this.socket=new WebSocket(e,["mqtt"]),this.socket.binaryType="arraybuffer",this.socket.onopen=i(this._on_socket_open,this),this.socket.onmessage=i(this._on_socket_message,this),this.socket.onerror=i(this._on_socket_error,this),this.socket.onclose=i(this._on_socket_close,this),this.sendPinger=new C(this,this.connectOptions.keepAliveInterval),this.receivePinger=new C(this,this.connectOptions.keepAliveInterval),this._connectTimeout&&(this._connectTimeout.cancel(),this._connectTimeout=null),this._connectTimeout=new w(this,this.connectOptions.timeout,this._disconnected,[s.CONNECT_TIMEOUT.code,u(s.CONNECT_TIMEOUT)])},m.prototype._schedule_message=function(e){this._msg_queue.unshift(e),this.connected&&this._process_queue()},m.prototype.store=function(e,t){var r={type:t.type,messageIdentifier:t.messageIdentifier,version:1};switch(t.type){case o.PUBLISH:t.pubRecReceived&&(r.pubRecReceived=!0),r.payloadMessage={};for(var i="",c=t.payloadMessage.payloadBytes,a=0;a<c.length;a++)c[a]<=15?i=i+"0"+c[a].toString(16):i+=c[a].toString(16);r.payloadMessage.payloadHex=i,r.payloadMessage.qos=t.payloadMessage.qos,r.payloadMessage.destinationName=t.payloadMessage.destinationName,t.payloadMessage.duplicate&&(r.payloadMessage.duplicate=!0),t.payloadMessage.retained&&(r.payloadMessage.retained=!0),0===e.indexOf("Sent:")&&(void 0===t.sequence&&(t.sequence=++this._sequence),r.sequence=t.sequence);break;default:throw Error(u(s.INVALID_STORED_DATA,[e+this._localKey+t.messageIdentifier,r]))}n.setItem(e+this._localKey+t.messageIdentifier,JSON.stringify(r))},m.prototype.restore=function(e){var t=n.getItem(e),r=JSON.parse(t),i=new h(r.type,r);switch(r.type){case o.PUBLISH:for(var c=r.payloadMessage.payloadHex,a=new ArrayBuffer(c.length/2),l=new Uint8Array(a),f=0;c.length>=2;){var p=parseInt(c.substring(0,2),16);c=c.substring(2,c.length),l[f++]=p}var d=new E(l);d.qos=r.payloadMessage.qos,d.destinationName=r.payloadMessage.destinationName,r.payloadMessage.duplicate&&(d.duplicate=!0),r.payloadMessage.retained&&(d.retained=!0),i.payloadMessage=d;break;default:throw Error(u(s.INVALID_STORED_DATA,[e,t]))}0===e.indexOf("Sent:"+this._localKey)?(i.payloadMessage.duplicate=!0,this._sentMessages[i.messageIdentifier]=i):0===e.indexOf("Received:"+this._localKey)&&(this._receivedMessages[i.messageIdentifier]=i)},m.prototype._process_queue=function(){for(var e=null;e=this._msg_queue.pop();)this._socket_send(e),this._notify_msg_sent[e]&&(this._notify_msg_sent[e](),delete this._notify_msg_sent[e])},m.prototype._requires_ack=function(e){var t=Object.keys(this._sentMessages).length;if(t>this.maxMessageIdentifier)throw Error("Too many messages:"+t);for(;void 0!==this._sentMessages[this._message_identifier];)this._message_identifier++;e.messageIdentifier=this._message_identifier,this._sentMessages[e.messageIdentifier]=e,e.type===o.PUBLISH&&this.store("Sent:",e),this._message_identifier===this.maxMessageIdentifier&&(this._message_identifier=1)},m.prototype._on_socket_open=function(){var e=new h(o.CONNECT,this.connectOptions);e.clientId=this.clientId,this._socket_send(e)},m.prototype._on_socket_message=function(e){this._trace("Client._on_socket_message",e.data);for(var t=this._deframeMessages(e.data),n=0;n<t.length;n+=1)this._handleMessage(t[n])},m.prototype._deframeMessages=function(e){var t=new Uint8Array(e),n=[];if(this.receiveBuffer){var o=new Uint8Array(this.receiveBuffer.length+t.length);o.set(this.receiveBuffer),o.set(t,this.receiveBuffer.length),t=o,delete this.receiveBuffer}try{for(var r=0;r<t.length;){var i=p(t,r),c=i[0];if(r=i[1],null===c)break;n.push(c)}r<t.length&&(this.receiveBuffer=t.subarray(r))}catch(e){var a="undefined"==e.hasOwnProperty("stack")?e.stack.toString():"No Error Stack Available";return void this._disconnected(s.INTERNAL_ERROR.code,u(s.INTERNAL_ERROR,[e.message,a]))}return n},m.prototype._handleMessage=function(e){this._trace("Client._handleMessage",e);try{switch(e.type){case o.CONNACK:if(this._connectTimeout.cancel(),this._reconnectTimeout&&this._reconnectTimeout.cancel(),this.connectOptions.cleanSession){for(var t in this._sentMessages){var r=this._sentMessages[t];n.removeItem("Sent:"+this._localKey+r.messageIdentifier)}for(var t in this._sentMessages={},this._receivedMessages){var i=this._receivedMessages[t];n.removeItem("Received:"+this._localKey+i.messageIdentifier)}this._receivedMessages={}}if(0!==e.returnCode){this._disconnected(s.CONNACK_RETURNCODE.code,u(s.CONNACK_RETURNCODE,[e.returnCode,a[e.returnCode]]));break}this.connected=!0,this.connectOptions.uris&&(this.hostIndex=this.connectOptions.uris.length);var c=[];for(var l in this._sentMessages)this._sentMessages.hasOwnProperty(l)&&c.push(this._sentMessages[l]);if(this._buffered_msg_queue.length>0)for(var f=null;f=this._buffered_msg_queue.pop();)c.push(f),this.onMessageDelivered&&(this._notify_msg_sent[f]=this.onMessageDelivered(f.payloadMessage));c=c.sort(function(e,t){return e.sequence-t.sequence});for(var p=0,d=c.length;p<d;p++){if((r=c[p]).type==o.PUBLISH&&r.pubRecReceived){var g=new h(o.PUBREL,{messageIdentifier:r.messageIdentifier});this._schedule_message(g)}else this._schedule_message(r)}this.connectOptions.onSuccess&&this.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});var y=!1;this._reconnecting&&(y=!0,this._reconnectInterval=1,this._reconnecting=!1),this._connected(y,this._wsuri),this._process_queue();break;case o.PUBLISH:this._receivePublish(e);break;case o.PUBACK:(r=this._sentMessages[e.messageIdentifier])&&(delete this._sentMessages[e.messageIdentifier],n.removeItem("Sent:"+this._localKey+e.messageIdentifier),this.onMessageDelivered&&this.onMessageDelivered(r.payloadMessage));break;case o.PUBREC:if(r=this._sentMessages[e.messageIdentifier]){r.pubRecReceived=!0;g=new h(o.PUBREL,{messageIdentifier:e.messageIdentifier});this.store("Sent:",r),this._schedule_message(g)}break;case o.PUBREL:i=this._receivedMessages[e.messageIdentifier];n.removeItem("Received:"+this._localKey+e.messageIdentifier),i&&(this._receiveMessage(i),delete this._receivedMessages[e.messageIdentifier]);var v=new h(o.PUBCOMP,{messageIdentifier:e.messageIdentifier});this._schedule_message(v);break;case o.PUBCOMP:r=this._sentMessages[e.messageIdentifier];delete this._sentMessages[e.messageIdentifier],n.removeItem("Sent:"+this._localKey+e.messageIdentifier),this.onMessageDelivered&&this.onMessageDelivered(r.payloadMessage);break;case o.SUBACK:(r=this._sentMessages[e.messageIdentifier])&&(r.timeOut&&r.timeOut.cancel(),128===e.returnCode[0]?r.onFailure&&r.onFailure(e.returnCode):r.onSuccess&&r.onSuccess(e.returnCode),delete this._sentMessages[e.messageIdentifier]);break;case o.UNSUBACK:(r=this._sentMessages[e.messageIdentifier])&&(r.timeOut&&r.timeOut.cancel(),r.callback&&r.callback(),delete this._sentMessages[e.messageIdentifier]);break;case o.PINGRESP:this.sendPinger.reset();break;case o.DISCONNECT:this._disconnected(s.INVALID_MQTT_MESSAGE_TYPE.code,u(s.INVALID_MQTT_MESSAGE_TYPE,[e.type]));break;default:this._disconnected(s.INVALID_MQTT_MESSAGE_TYPE.code,u(s.INVALID_MQTT_MESSAGE_TYPE,[e.type]))}}catch(e){var b="undefined"==e.hasOwnProperty("stack")?e.stack.toString():"No Error Stack Available";return void this._disconnected(s.INTERNAL_ERROR.code,u(s.INTERNAL_ERROR,[e.message,b]))}},m.prototype._on_socket_error=function(e){this._reconnecting||this._disconnected(s.SOCKET_ERROR.code,u(s.SOCKET_ERROR,[e.data]))},m.prototype._on_socket_close=function(){this._reconnecting||this._disconnected(s.SOCKET_CLOSE.code,u(s.SOCKET_CLOSE))},m.prototype._socket_send=function(e){if(1==e.type){var t=this._traceMask(e,"password");this._trace("Client._socket_send",t)}else this._trace("Client._socket_send",e);this.socket.send(e.encode()),this.sendPinger.reset()},m.prototype._receivePublish=function(e){switch(e.payloadMessage.qos){case"undefined":case 0:this._receiveMessage(e);break;case 1:var t=new h(o.PUBACK,{messageIdentifier:e.messageIdentifier});this._schedule_message(t),this._receiveMessage(e);break;case 2:this._receivedMessages[e.messageIdentifier]=e,this.store("Received:",e);var n=new h(o.PUBREC,{messageIdentifier:e.messageIdentifier});this._schedule_message(n);break;default:throw Error("Invaild qos="+e.payloadMessage.qos)}},m.prototype._receiveMessage=function(e){this.onMessageArrived&&this.onMessageArrived(e.payloadMessage)},m.prototype._connected=function(e,t){this.onConnected&&this.onConnected(e,t)},m.prototype._reconnect=function(){this._trace("Client._reconnect"),this.connected||(this._reconnecting=!0,this.sendPinger.cancel(),this.receivePinger.cancel(),this._reconnectInterval<128&&(this._reconnectInterval=2*this._reconnectInterval),this.connectOptions.uris?(this.hostIndex=0,this._doConnect(this.connectOptions.uris[0])):this._doConnect(this.uri))},m.prototype._disconnected=function(e,t){if(this._trace("Client._disconnected",e,t),void 0!==e&&this._reconnecting)this._reconnectTimeout=new w(this,this._reconnectInterval,this._reconnect);else if(this.sendPinger.cancel(),this.receivePinger.cancel(),this._connectTimeout&&(this._connectTimeout.cancel(),this._connectTimeout=null),this._msg_queue=[],this._buffered_msg_queue=[],this._notify_msg_sent={},this.socket&&(this.socket.onopen=null,this.socket.onmessage=null,this.socket.onerror=null,this.socket.onclose=null,1===this.socket.readyState&&this.socket.close(),delete this.socket),this.connectOptions.uris&&this.hostIndex<this.connectOptions.uris.length-1)this.hostIndex++,this._doConnect(this.connectOptions.uris[this.hostIndex]);else if(void 0===e&&(e=s.OK.code,t=u(s.OK)),this.connected){if(this.connected=!1,this.onConnectionLost&&this.onConnectionLost({errorCode:e,errorMessage:t,reconnect:this.connectOptions.reconnect,uri:this._wsuri}),e!==s.OK.code&&this.connectOptions.reconnect)return this._reconnectInterval=1,void this._reconnect()}else 4===this.connectOptions.mqttVersion&&!1===this.connectOptions.mqttVersionExplicit?(this._trace("Failed to connect V4, dropping back to V3"),this.connectOptions.mqttVersion=3,this.connectOptions.uris?(this.hostIndex=0,this._doConnect(this.connectOptions.uris[0])):this._doConnect(this.uri)):this.connectOptions.onFailure&&this.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext,errorCode:e,errorMessage:t})},m.prototype._trace=function(){if(this.traceFunction){var e=Array.prototype.slice.call(arguments);for(var t in e)void 0!==e[t]&&e.splice(t,1,JSON.stringify(e[t]));var n=e.join("");this.traceFunction({severity:"Debug",message:n})}if(null!==this._traceBuffer){t=0;for(var o=arguments.length;t<o;t++)this._traceBuffer.length==this._MAX_TRACE_ENTRIES&&this._traceBuffer.shift(),0===t?this._traceBuffer.push(arguments[t]):void 0===arguments[t]?this._traceBuffer.push(arguments[t]):this._traceBuffer.push("  "+JSON.stringify(arguments[t]))}},m.prototype._traceMask=function(e,t){var n={};for(var o in e)e.hasOwnProperty(o)&&(n[o]=o==t?"******":e[o]);return n};var E=function(e){var t,n;if(!("string"==typeof e||e instanceof ArrayBuffer||ArrayBuffer.isView(e)&&!(e instanceof DataView)))throw u(s.INVALID_ARGUMENT,[e,"newPayload"]);t=e;var o=0,r=!1,i=!1;Object.defineProperties(this,{payloadString:{enumerable:!0,get:function(){return"string"==typeof t?t:_(t,0,t.length)}},payloadBytes:{enumerable:!0,get:function(){if("string"==typeof t){var e=new ArrayBuffer(v(t)),n=new Uint8Array(e);return b(t,n,0),n}return t}},destinationName:{enumerable:!0,get:function(){return n},set:function(e){if("string"!=typeof e)throw new Error(u(s.INVALID_ARGUMENT,[e,"newDestinationName"]));n=e}},qos:{enumerable:!0,get:function(){return o},set:function(e){if(0!==e&&1!==e&&2!==e)throw new Error("Invalid argument:"+e);o=e}},retained:{enumerable:!0,get:function(){return r},set:function(e){if("boolean"!=typeof e)throw new Error(u(s.INVALID_ARGUMENT,[e,"newRetained"]));r=e}},topic:{enumerable:!0,get:function(){return n},set:function(e){n=e}},duplicate:{enumerable:!0,get:function(){return i},set:function(e){i=e}}})};return{Client:function(e,t,n,o){var i;if("string"!=typeof e)throw new Error(u(s.INVALID_TYPE,[c(e),"host"]));if(2==arguments.length){o=t;var a=(i=e).match(/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/);if(!a)throw new Error(u(s.INVALID_ARGUMENT,[e,"host"]));e=a[4]||a[2],t=parseInt(a[7]),n=a[8]}else{if(3==arguments.length&&(o=n,n="/mqtt"),"number"!=typeof t||t<0)throw new Error(u(s.INVALID_TYPE,[c(t),"port"]));if("string"!=typeof n)throw new Error(u(s.INVALID_TYPE,[c(n),"path"]));var l=-1!==e.indexOf(":")&&"["!==e.slice(0,1)&&"]"!==e.slice(-1);i="ws://"+(l?"["+e+"]":e)+":"+t+n}for(var f=0,h=0;h<o.length;h++){var p=o.charCodeAt(h);55296<=p&&p<=56319&&h++,f++}if("string"!=typeof o||f>65535)throw new Error(u(s.INVALID_ARGUMENT,[o,"clientId"]));var d=new m(i,e,t,n,o);Object.defineProperties(this,{host:{get:function(){return e},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},port:{get:function(){return t},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},path:{get:function(){return n},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},uri:{get:function(){return i},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},clientId:{get:function(){return d.clientId},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},onConnected:{get:function(){return d.onConnected},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[c(e),"onConnected"]));d.onConnected=e}},disconnectedPublishing:{get:function(){return d.disconnectedPublishing},set:function(e){d.disconnectedPublishing=e}},disconnectedBufferSize:{get:function(){return d.disconnectedBufferSize},set:function(e){d.disconnectedBufferSize=e}},onConnectionLost:{get:function(){return d.onConnectionLost},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[c(e),"onConnectionLost"]));d.onConnectionLost=e}},onMessageDelivered:{get:function(){return d.onMessageDelivered},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[c(e),"onMessageDelivered"]));d.onMessageDelivered=e}},onMessageArrived:{get:function(){return d.onMessageArrived},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[c(e),"onMessageArrived"]));d.onMessageArrived=e}},trace:{get:function(){return d.traceFunction},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[c(e),"onTrace"]));d.traceFunction=e}}}),this.connect=function(e){if(r(e=e||{},{timeout:"number",userName:"string",password:"string",willMessage:"object",keepAliveInterval:"number",cleanSession:"boolean",useSSL:"boolean",invocationContext:"object",onSuccess:"function",onFailure:"function",hosts:"object",ports:"object",reconnect:"boolean",mqttVersion:"number",mqttVersionExplicit:"boolean",uris:"object"}),void 0===e.keepAliveInterval&&(e.keepAliveInterval=60),e.mqttVersion>4||e.mqttVersion<3)throw new Error(u(s.INVALID_ARGUMENT,[e.mqttVersion,"connectOptions.mqttVersion"]));if(void 0===e.mqttVersion?(e.mqttVersionExplicit=!1,e.mqttVersion=4):e.mqttVersionExplicit=!0,void 0!==e.password&&void 0===e.userName)throw new Error(u(s.INVALID_ARGUMENT,[e.password,"connectOptions.password"]));if(e.willMessage){if(!(e.willMessage instanceof E))throw new Error(u(s.INVALID_TYPE,[e.willMessage,"connectOptions.willMessage"]));if(e.willMessage.stringPayload=null,void 0===e.willMessage.destinationName)throw new Error(u(s.INVALID_TYPE,[c(e.willMessage.destinationName),"connectOptions.willMessage.destinationName"]))}if(void 0===e.cleanSession&&(e.cleanSession=!0),e.hosts){if(!(e.hosts instanceof Array))throw new Error(u(s.INVALID_ARGUMENT,[e.hosts,"connectOptions.hosts"]));if(e.hosts.length<1)throw new Error(u(s.INVALID_ARGUMENT,[e.hosts,"connectOptions.hosts"]));for(var t=!1,o=0;o<e.hosts.length;o++){if("string"!=typeof e.hosts[o])throw new Error(u(s.INVALID_TYPE,[c(e.hosts[o]),"connectOptions.hosts["+o+"]"]));if(/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/.test(e.hosts[o])){if(0===o)t=!0;else if(!t)throw new Error(u(s.INVALID_ARGUMENT,[e.hosts[o],"connectOptions.hosts["+o+"]"]))}else if(t)throw new Error(u(s.INVALID_ARGUMENT,[e.hosts[o],"connectOptions.hosts["+o+"]"]))}if(t)e.uris=e.hosts;else{if(!e.ports)throw new Error(u(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));if(!(e.ports instanceof Array))throw new Error(u(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));if(e.hosts.length!==e.ports.length)throw new Error(u(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));for(e.uris=[],o=0;o<e.hosts.length;o++){if("number"!=typeof e.ports[o]||e.ports[o]<0)throw new Error(u(s.INVALID_TYPE,[c(e.ports[o]),"connectOptions.ports["+o+"]"]));var a=e.hosts[o],l=e.ports[o],f=-1!==a.indexOf(":");i="ws://"+(f?"["+a+"]":a)+":"+l+n,e.uris.push(i)}}}d.connect(e)},this.subscribe=function(e,t){if("string"!=typeof e&&e.constructor!==Array)throw new Error("Invalid argument:"+e);if(r(t=t||{},{qos:"number",invocationContext:"object",onSuccess:"function",onFailure:"function",timeout:"number"}),t.timeout&&!t.onFailure)throw new Error("subscribeOptions.timeout specified with no onFailure callback.");if(void 0!==t.qos&&0!==t.qos&&1!==t.qos&&2!==t.qos)throw new Error(u(s.INVALID_ARGUMENT,[t.qos,"subscribeOptions.qos"]));d.subscribe(e,t)},this.unsubscribe=function(e,t){if("string"!=typeof e&&e.constructor!==Array)throw new Error("Invalid argument:"+e);if(r(t=t||{},{invocationContext:"object",onSuccess:"function",onFailure:"function",timeout:"number"}),t.timeout&&!t.onFailure)throw new Error("unsubscribeOptions.timeout specified with no onFailure callback.");d.unsubscribe(e,t)},this.send=function(e,t,n,o){var r;if(0===arguments.length)throw new Error("Invalid argument.length");if(1==arguments.length){if(!(e instanceof E)&&"string"!=typeof e)throw new Error("Invalid argument:"+c(e));if(void 0===(r=e).destinationName)throw new Error(u(s.INVALID_ARGUMENT,[r.destinationName,"Message.destinationName"]));d.send(r)}else(r=new E(t)).destinationName=e,arguments.length>=3&&(r.qos=n),arguments.length>=4&&(r.retained=o),d.send(r)},this.publish=function(e,t,n,o){var r;if(0===arguments.length)throw new Error("Invalid argument.length");if(1==arguments.length){if(!(e instanceof E)&&"string"!=typeof e)throw new Error("Invalid argument:"+c(e));if(void 0===(r=e).destinationName)throw new Error(u(s.INVALID_ARGUMENT,[r.destinationName,"Message.destinationName"]));d.send(r)}else(r=new E(t)).destinationName=e,arguments.length>=3&&(r.qos=n),arguments.length>=4&&(r.retained=o),d.send(r)},this.disconnect=function(){d.disconnect()},this.getTraceLog=function(){return d.getTraceLog()},this.startTrace=function(){d.startTrace()},this.stopTrace=function(){d.stopTrace()},this.isConnected=function(){return d.connected}},Message:E}}(void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},"object"===c(t)&&"object"===c(o)?o.exports=s():void 0===(i="function"==typeof(r=s)?r.call(t,n,t,o):r)||(o.exports=i)}).call(this,n(2),n(5)(e))},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"ChatSession",function(){return r});var o=n(1);e.connect=e.connect||{},connect.ChatSession=o.a;var r=o.a}.call(this,n(2))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NwcmludGYtanMvc3JjL3NwcmludGYuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXhjZXB0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L1htbEh0dHBDbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dsb2JhbENvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbG9nLmpzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvY2xpZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NoYXRBcmdzVmFsaWRhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2Nvbm5lY3Rpb25NYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2Nvbm5lY3Rpb25IZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXZlbnRDb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9ldmVudGJ1cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jaGF0Q29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jaGF0U2Vzc2lvbi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWhvLW1xdHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsInJlIiwibm90X3N0cmluZyIsIm5vdF9ib29sIiwibm90X3R5cGUiLCJub3RfcHJpbWl0aXZlIiwibnVtYmVyIiwibnVtZXJpY19hcmciLCJqc29uIiwibm90X2pzb24iLCJ0ZXh0IiwibW9kdWxvIiwicGxhY2Vob2xkZXIiLCJrZXlfYWNjZXNzIiwiaW5kZXhfYWNjZXNzIiwic2lnbiIsInNwcmludGYiLCJwYXJzZV90cmVlIiwiYXJndiIsImFyZyIsImsiLCJwaCIsInBhZCIsInBhZF9jaGFyYWN0ZXIiLCJwYWRfbGVuZ3RoIiwiaXNfcG9zaXRpdmUiLCJjdXJzb3IiLCJ0cmVlX2xlbmd0aCIsImxlbmd0aCIsIm91dHB1dCIsImtleXMiLCJ1bmRlZmluZWQiLCJFcnJvciIsInBhcmFtX25vIiwidGVzdCIsInR5cGUiLCJGdW5jdGlvbiIsImlzTmFOIiwiVHlwZUVycm9yIiwicGFyc2VJbnQiLCJ0b1N0cmluZyIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ3aWR0aCIsInByZWNpc2lvbiIsInBhcnNlRmxvYXQiLCJ0b0V4cG9uZW50aWFsIiwidG9GaXhlZCIsIk51bWJlciIsInRvUHJlY2lzaW9uIiwic3Vic3RyaW5nIiwic2xpY2UiLCJ0b0xvd2VyQ2FzZSIsInZhbHVlT2YiLCJ0b1VwcGVyQ2FzZSIsInJlcGxhY2UiLCJwYWRfY2hhciIsImNoYXJBdCIsInJlcGVhdCIsImFsaWduIiwic3ByaW50Zl9mb3JtYXQiLCJmbXQiLCJzcHJpbnRmX2NhY2hlIiwibWF0Y2giLCJfZm10IiwiYXJnX25hbWVzIiwiZXhlYyIsInB1c2giLCJTeW50YXhFcnJvciIsImZpZWxkX2xpc3QiLCJyZXBsYWNlbWVudF9maWVsZCIsImZpZWxkX21hdGNoIiwic3ByaW50Zl9wYXJzZSIsImFyZ3VtZW50cyIsInZzcHJpbnRmIiwiYXBwbHkiLCJjb25jYXQiLCJ3aW5kb3ciLCJWYWx1ZUVycm9yIiwibWVzc2FnZSIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2dldFByb3RvdHlwZU9mIiwiY29uc29sZSIsImxvZyIsIlVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24iLCJfdGhpczIiLCJJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24iLCJhcmd1bWVudCIsIl90aGlzMyIsIklsbGVnYWxTdGF0ZUV4Y2VwdGlvbiIsIl90aGlzNCIsIm1ha2VIdHRwUmVxdWVzdCIsIm9iaiIsInN1Y2Nlc3MiLCJmYWlsdXJlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwibWV0aG9kIiwidXJsIiwiaGVhZGVycyIsImZvckVhY2giLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25sb2FkIiwic3RhdHVzIiwib25lcnJvciIsInNlbmQiLCJib2R5IiwiR2xvYmFsQ29uZmlnIiwiY29uZmlnSW5wdXQiLCJjb25maWciLCJyZWdpb24iLCJlbmRwb2ludE92ZXJyaWRlIiwiZW5kcG9pbnQiLCJyZWNvbm5lY3QiLCJVdGlscyIsInByZW1pc2UiLCJhc3NlcnRUcnVlIiwidXRpbHNfdHlwZW9mIiwiRGF0ZSIsImdldFRpbWUiLCJub3ciLCJNYXRoIiwicmFuZG9tIiwiQXJyYXkiLCJpc0FycmF5IiwiYWxsb3dlZFZhbHVlcyIsInZhbHVlcyIsImVudW1PYmoiLCJ4IiwieSIsImZpbmQiLCJ2IiwiYXJyYXkiLCJwcmVkaWNhdGUiLCJjb25zdHJ1Y3RvciIsIm1hcCIsImFzc2VydE5vdE51bGwiLCJpc09iamVjdCIsIm1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiZiIsImludGVydmFsIiwiY291bnQiLCJjYXRjaCIsImRlbGF5IiwibWF4IiwidGhlbiIsImFzeW5jV2hpbGVJbnRlcnZhbCIsInJlamVjdCIsIlJFU09VUkNFX1BBVEgiLCJIVFRQX01FVEhPRFMiLCJNRVNTQUdFX1BFUlNJU1RFTkNFIiwiQ09OVEVOVF9UWVBFIiwidGV4dFBsYWluIiwiVklTSUJJTElUWSIsIm1ha2VFbnVtIiwiUEVSU0lTVEVOQ0UiLCJSRUdJT05fQ09ORklHIiwidXMtd2VzdC0yIiwiaW52b2tlVXJsIiwidXMtZWFzdC0xIiwiYXAtc291dGhlYXN0LTIiLCJhcC1ub3J0aGVhc3QtMSIsImV1LWNlbnRyYWwtMSIsIk1RVFRfQ09OU1RBTlRTIiwiU0VTU0lPTl9UWVBFUyIsIkFHRU5UIiwiQ1VTVE9NRVIiLCJDSEFUX0VWRU5UUyIsIlRSQU5TQ1JJUFRfREVGQVVMVF9QQVJBTVMiLCJMT0dTX0RFU1RJTkFUSU9OIiwiUkVHSU9OUyIsIkxvZ2dlciIsImRhdGEiLCJMb2dMZXZlbCIsIkRFQlVHIiwiSU5GTyIsIldBUk4iLCJFUlJPUiIsIkxvZ01hbmFnZXJJbXBsIiwibG9nX2NsYXNzQ2FsbENoZWNrIiwidXBkYXRlTG9nZ2VyQ29uZmlnIiwiY29uc29sZUxvZ2dlcldyYXBwZXIiLCJjcmVhdGVDb25zb2xlTG9nZ2VyIiwibGV2ZWwiLCJsb2dTdGF0ZW1lbnQiLCJoYXNDbGllbnRMb2dnZXIiLCJfY2xpZW50TG9nZ2VyIiwiZGVidWciLCJpbmZvIiwid2FybiIsImVycm9yIiwiX2xldmVsIiwib3B0aW9ucyIsInByZWZpeCIsIl9sb2dzRGVzdGluYXRpb24iLCJMb2dnZXJXcmFwcGVySW1wbCIsImlucHV0Q29uZmlnIiwibG9nZ2VyIiwiTG9nZ2VyV3JhcHBlciIsImxvZ19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwibG9nX2dldFByb3RvdHlwZU9mIiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiX2xvZyIsIl9sZW4yIiwiX2tleTIiLCJfbGVuMyIsIl9rZXkzIiwiX2xlbjQiLCJfa2V5NCIsIkxvZ01hbmFnZXIiLCJpc0xldmVsRW5hYmxlZCIsIndyaXRlVG9DbGllbnRMb2dnZXIiLCJfc2hvdWxkTG9nIiwiX2NvbnZlcnRUb1NpbmdsZVN0YXRlbWVudCIsIl93cml0ZVRvQ2xpZW50TG9nZ2VyIiwiaW5kZXgiLCJfY29udmVydFRvU3RyaW5nIiwiaXNTdHJpbmciLCJpc0Z1bmN0aW9uIiwidG9TdHJpbmdSZXN1bHQiLCJDaGF0Q2xpZW50RmFjdG9yeUltcGwiLCJjbGllbnRfY2xhc3NDYWxsQ2hlY2siLCJjbGllbnRDYWNoZSIsIm9wdGlvbnNJbnB1dCIsImFzc2lnbiIsImdldFJlZ2lvbiIsImNsaWVudCIsIl9jcmVhdGVDbGllbnQiLCJnZXRFbmRwb2ludE92ZXJyaWRlIiwic3RhZ2VDb25maWciLCJIdHRwQ2hhdENsaWVudCIsIkNoYXRDbGllbnQiLCJwYXJ0aWNpcGFudFRva2VuIiwiZXZlbnRUeXBlIiwibWVzc2FnZUlkcyIsInZpc2liaWxpdHkiLCJwZXJzaXN0ZW5jZSIsImNsaWVudF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiY2xpZW50X2dldFByb3RvdHlwZU9mIiwiY2FsbEh0dHBDbGllbnQiLCJnZXRMb2dnZXIiLCJjb25uZWN0aW9uVG9rZW4iLCJNZXNzYWdlIiwiQ29udGVudFR5cGUiLCJDb250ZW50IiwiUGVyc2lzdGVuY2UiLCJyZXF1ZXN0SW5wdXQiLCJfY2FsbEh0dHBDbGllbnQiLCJQYXJ0aWNpcGFudEV2ZW50IiwiVmlzaWJpbGl0eSIsIlBhcnRpY2lwYW50RXZlbnRUeXBlIiwic2VsZiIsIkNvbnRlbnQtVHlwZSIsIkFjY2VwdCIsInJlcXVlc3QiLCJyZXNwb25zZU9iamVjdCIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiZXJyb3JPYmplY3QiLCJzdGF0dXNUZXh0IiwiZSIsIkNoYXRDbGllbnRGYWN0b3J5IiwiQ2hhdENvbnRyb2xsZXJBcmdzVmFsaWRhdG9yIiwiY2hhdERldGFpbHMiLCJhc3NlcnRJc09iamVjdCIsImFzc2VydElzRW51bSIsIm1ldGhvZE5hbWUiLCJhc3NlcnRJc05vbkVtcHR5U3RyaW5nIiwiYXNzZXJ0SXNMaXN0IiwiQ2hhdFNlcnZpY2VBcmdzVmFsaWRhdG9yIiwiaW5pdGlhbENvbnRhY3RJZCIsImNvbnRhY3RJZCIsInBhcnRpY2lwYW50SWQiLCJjb25uZWN0aW9uRGV0YWlscyIsIlByZVNpZ25lZENvbm5lY3Rpb25VcmwiLCJDb25uZWN0aW9uSWQiLCJDaGF0Q29ubmVjdGlvbk1hbmFnZXIiLCJjb25uZWN0aW9uQXJncyIsImNhbGxiYWNrIiwiUGFob01xdHRDb25uZWN0aW9uIiwiTVFUVENsaWVudCIsImNvbm5lY3RPcHRpb25zIiwidG9waWMiLCJzdWJzY3JpYmVPcHRpb25zIiwidW5zdWJzY3JpYmVPcHRpb25zIiwiTXF0dENvbm5lY3Rpb25TdGF0dXMiLCJmcmVlemUiLCJOZXZlckNvbm5lY3RlZCIsIkNvbm5lY3RpbmciLCJDb25uZWN0ZWQiLCJEaXNjb25uZWN0ZWQiLCJNcXR0RXZlbnRzIiwiTUVTU0FHRSIsIkRJU0NPTk5FQ1RFRCIsImNvbm5lY3Rpb25NYW5hZ2VyX2NsYXNzQ2FsbENoZWNrIiwiY29ubmVjdGlvbk1hbmFnZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImNvbm5lY3Rpb25NYW5hZ2VyX2dldFByb3RvdHlwZU9mIiwicHJlU2lnbmVkVXJsIiwiY29ubmVjdGlvbklkIiwicGFob0NsaWVudCIsIlBhaG8iLCJDbGllbnQiLCJjb25uZWN0aW9uTWFuYWdlcl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJvbk1lc3NhZ2VBcnJpdmVkIiwiX21lc3NhZ2VBcnJpdmVkQ2FsbGJhY2siLCJvbkNvbm5lY3Rpb25Mb3N0IiwiX2Nvbm5lY3Rpb25Mb3N0Q2FsbEJhY2siLCJuZXZlckNvbm5lY3RlZCIsIl9zdWJzY3JpYmVkVG9waWNzIiwib25TdWNjZXNzIiwicmVzcG9uc2UiLCJfb25Db25uZWN0U3VjY2VzcyIsIm9uRmFpbHVyZSIsImVycm9yRGV0YWlscyIsInJlYXNvbiIsIl9vbkNvbm5lY3RGYWlsdXJlIiwiY29ubmVjdCIsImluY29taW5nTWVzc2FnZSIsInFvcyIsInBheWxvYWRTdHJpbmciLCJkaXNjb25uZWN0IiwiX3N1YnNjcmliZVN1Y2Nlc3MiLCJncmFudGVkUW9zIiwic3Vic2NyaWJlIiwiaW5kZXhPZiIsIl9hZGRUb1RvcGljcyIsIl91bnN1YnNjcmliZVN1Y2Nlc3MiLCJ1bnN1YnNjcmliZSIsImZpbHRlciIsIkNvbm5lY3Rpb25IZWxwZXIiLCJDb25uZWN0aW9uSGVscGVyU3RhdHVzIiwiTmV2ZXJTdGFydGVkIiwiU3RhcnRpbmciLCJFbmRlZCIsIkNvbm5lY3Rpb25IZWxwZXJFdmVudHMiLCJTb2xvQ2hhdENvbm5lY3Rpb25NcXR0SGVscGVyIiwiY29ubmVjdGlvbkhlbHBlcl9jbGFzc0NhbGxDaGVjayIsImNvbm5lY3Rpb25IZWxwZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImNvbm5lY3Rpb25IZWxwZXJfZ2V0UHJvdG90eXBlT2YiLCJjb25zaWRlclBhcnRpY2lwYW50QXNEaXNjb25uZWN0ZWQiLCJpb3RDb25uZWN0aW9uIiwibXF0dENvbm5lY3Rpb25Qcm92aWRlciIsImV2ZW50RGF0YSIsIl9oYW5kbGVJb3RFdmVudCIsImdldFN0YXR1cyIsImNoYXRDb250cm9sbGVyQ2FsbGJhY2siLCJfY3JlYXRlU3RhcnRQcm9taXNlIiwicmVzb3ZsZSIsIl9jb25uZWN0IiwidXNlU1NMIiwia2VlcEFsaXZlSW50ZXJ2YWwiLCJtcXR0VmVyc2lvbiIsInRpbWVvdXQiLCJfcG9zdENvbm5lY3QiLCJfY29ubmVjdEZhaWxlZCIsImNvbm5lY3RSZXNwb25zZSIsIl9zdWJzY3JpYmUiLCJjb25uZWN0RXJyb3IiLCJjb25uZWN0U3VjY2VzcyIsImRldGFpbHMiLCJfcG9zdFN1YnNjcmliZSIsIl9zdWJzY3JpYmVGYWlsZWQiLCJzdWJzY3JpYmVSZXNwb25zZSIsInN1YnNjcmliZUVycm9yIiwiRXZlbnRDb25zdHJ1Y3RvciIsInJldHVybk9iamVjdCIsImVycm9yQ29kZSIsIl9mcm9tSW5jb21pbmdEYXRhIiwiaW5jb21pbmdEYXRhIiwiRGF0YSIsIlR5cGUiLCJTdWJzY3JpcHRpb24iLCJzdWJNYXAiLCJldmVudE5hbWUiLCJpZCIsInJhbmRvbUlkIiwiU3Vic2NyaXB0aW9uTWFwIiwic3ViSWRNYXAiLCJzdWJFdmVudE5hbWVNYXAiLCJzdWIiLCJzdWJMaXN0Iiwic3ViSWQiLCJjb250YWlucyIsImdldEFsbFN1YnNjcmlwdGlvbnMiLCJyZWR1Y2UiLCJhIiwiYiIsImdldFN1YnNjcmlwdGlvbnMiLCJFdmVudEJ1cyIsInBhcmFtc0luIiwicGFyYW1zIiwibG9nRXZlbnRzIiwic3Vic2NyaWJlQWxsIiwidHJpZ2dlciIsImFsbEV2ZW50U3VicyIsImV2ZW50U3VicyIsInRyaWdnZXJBc3luYyIsImJyaWRnZSIsImV2ZW50IiwidW5zdWJzY3JpYmVBbGwiLCJOZXR3b3JrTGlua1N0YXR1cyIsIkNoYXRDb250cm9sbGVyIiwidGV4dE1lc3NhZ2UiLCJQZXJzaXN0ZW50Q29ubmVjdGlvbkFuZENoYXRTZXJ2aWNlQ29udHJvbGxlciIsImNoYXRDb250cm9sbGVyX2NsYXNzQ2FsbENoZWNrIiwiY2hhdENvbnRyb2xsZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImNoYXRDb250cm9sbGVyX2dldFByb3RvdHlwZU9mIiwic2V0QXJndW1lbnRzIiwiYXJnc1ZhbGlkYXRvciIsImNoYXRFdmVudENvbnN0cnVjdG9yIiwiaW50aWFsQ29udGFjdElkIiwiY2hhdENsaWVudCIsImNvbm5lY3Rpb25IZWxwZXJDYWxsYmFjayIsIl9oYW5kbGVDb25uZWN0aW9uSGVscGVyRXZlbnRzIiwiX2hhc0Nvbm5lY3Rpb25EZXRhaWxzIiwiaGFzQ29ubmVjdGlvbkRldGFpbHMiLCJjaGF0Q29udHJvbGxlckZhY3RvcnkiLCJfc2V0Q29ubmVjdGlvbkhlbHBlciIsIl9jb25uZWN0Q2FsbGVkQXRsZWFzdE9uY2UiLCJfZXZlckNvbm5lY3RlZCIsInB1YnN1YiIsIl9wYXJ0aWNpcGFudERpc2Nvbm5lY3RlZCIsInNlc3Npb25NZXRhZGF0YSIsImNvbm5lY3Rpb25IZWxwZXJQcm92aWRlciIsImNyZWF0ZUNvbm5lY3Rpb25IZWxwZXJQcm92aWRlciIsImNvbm5lY3Rpb25IZWxwZXIiLCJjbGVhblVwT25QYXJ0aWNpcGFudERpc2Nvbm5lY3QiLCJtZXRhZGF0YSIsInZhbGlkYXRlU2VuZE1lc3NhZ2UiLCJzZW5kTWVzc2FnZSIsInZhbGlkYXRlU2VuZEV2ZW50IiwicGVyc2lzdGVuY2VBcmd1bWVudCIsIlBFUlNJU1RFRCIsInZpc2liaWxpdHlBcmd1bWVudCIsIkFMTCIsInNlbmRFdmVudCIsImlucHV0QXJncyIsIkludGlhbENvbnRhY3RJZCIsIlN0YXJ0S2V5IiwiU2NhbkRpcmVjdGlvbiIsIlNvcnRLZXkiLCJNYXhSZXN1bHRzIiwiTmV4dFRva2VuIiwiZ2V0VHJhbnNjcmlwdCIsImZyb21Db25uZWN0aW9uSGVscGVyRXZlbnQiLCJnZXRDaGF0RGV0YWlscyIsImV4YyIsImNoYXRFdmVudCIsIl9tYXBDb25uZWN0aW9uSGVscGVyRXZlbnRUb0NoYXRFdmVudCIsIl9oYW5kbGVDaGF0RXZlbnQiLCJfZm9yd2FyZENoYXRFdmVudCIsIl9pbml0aWF0ZVJlY29ubmVjdCIsInZhbGlkYXRlQ29ubmVjdENoYXQiLCJfY2FuQ29ubmVjdCIsIl9vblN1Y2Nlc3MiLCJfb25GYWlsdXJlIiwic3RhcnQiLCJfZmV0Y2hDb25uZWN0aW9uRGV0YWlscyIsIl9jYW5SZWNvbm5lY3QiLCJnZXRDb25uZWN0aW9uU3RhdHVzIiwiX2RlYnVnIiwiY29ubmVjdENhbGxlZCIsImNyZWF0ZUNvbm5lY3Rpb25EZXRhaWxzIiwiUGFydGljaXBhbnRDcmVkZW50aWFscyIsIkNvbm5lY3Rpb25BdXRoZW50aWNhdGlvblRva2VuIiwiZW5kIiwiZGlzY29ubmVjdENoYXQiLCJjb25uZWN0aW9uSGVscGVyU3RhdHVzIiwiX2NvbnZlcnRDb25uZWN0aW9uSGVscGVyU3RhdHVzIiwiQ2hhdFNlc3Npb25GYWN0b3J5IiwicGFydGljaXBhbnRUeXBlIiwiUGVyc2lzdGVudENvbm5lY3Rpb25BbmRDaGF0U2VydmljZVNlc3Npb25GYWN0b3J5IiwiY2hhdFNlc3Npb25fY2xhc3NDYWxsQ2hlY2siLCJjaGF0U2Vzc2lvbl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiY2hhdFNlc3Npb25fZ2V0UHJvdG90eXBlT2YiLCJjaGF0Q29ubmVjdGlvbk1hbmFnZXIiLCJjaGF0Q29udHJvbGxlciIsIl9jcmVhdGVDaGF0U2Vzc2lvbiIsIkFnZW50Q2hhdFNlc3Npb24iLCJDdXN0b21lckNoYXRTZXNzaW9uIiwiY2hhdERldGFpbHNJbnB1dCIsIl9ub3JtYWxpemVDaGF0RGV0YWlscyIsImdldENhY2hlZENsaWVudCIsIkNoYXRDb25uZWN0aW9uQXR0cmlidXRlcyIsInZhbGlkYXRlSW5pdGlhdGVDaGF0UmVzcG9uc2UiLCJQYXJ0aWNpcGFudElkIiwiQ29udGFjdElkIiwidmFsaWRhdGVDaGF0RGV0YWlscyIsImNyZWF0ZU5ld01xdHRDb25uZWN0aW9uUHJvdmlkZXIiLCJDaGF0U2Vzc2lvbiIsImNvbnRyb2xsZXIiLCJkaXNjb25uZWN0UGFydGljaXBhbnQiLCJicmVha0Nvbm5lY3Rpb24iLCJDSEFUX1NFU1NJT05fRkFDVE9SWSIsIkNoYXRTZXNzaW9uT2JqZWN0IiwiY3JlYXRlQWdlbnRDaGF0U2Vzc2lvbiIsImNyZWF0ZUN1c3RvbWVyQ2hhdFNlc3Npb24iLCJzZXRHbG9iYWxDb25maWciLCJsb2dnZXJDb25maWciLCJ1cGRhdGUiLCJTZXNzaW9uVHlwZXMiLCJnIiwiZmFjdG9yeSIsImdsb2JhbCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJpdGVtIiwiZ2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJNRVNTQUdFX1RZUEUiLCJDT05ORUNUIiwiQ09OTkFDSyIsIlBVQkxJU0giLCJQVUJBQ0siLCJQVUJSRUMiLCJQVUJSRUwiLCJQVUJDT01QIiwiU1VCU0NSSUJFIiwiU1VCQUNLIiwiVU5TVUJTQ1JJQkUiLCJVTlNVQkFDSyIsIlBJTkdSRVEiLCJQSU5HUkVTUCIsIkRJU0NPTk5FQ1QiLCJ2YWxpZGF0ZSIsImVycm9yU3RyIiwidmFsaWRLZXkiLCJfdHlwZW9mIiwiZm9ybWF0IiwiSU5WQUxJRF9UWVBFIiwic2NvcGUiLCJPSyIsImNvZGUiLCJDT05ORUNUX1RJTUVPVVQiLCJTVUJTQ1JJQkVfVElNRU9VVCIsIlVOU1VCU0NSSUJFX1RJTUVPVVQiLCJQSU5HX1RJTUVPVVQiLCJJTlRFUk5BTF9FUlJPUiIsIkNPTk5BQ0tfUkVUVVJOQ09ERSIsIlNPQ0tFVF9FUlJPUiIsIlNPQ0tFVF9DTE9TRSIsIk1BTEZPUk1FRF9VVEYiLCJVTlNVUFBPUlRFRCIsIklOVkFMSURfU1RBVEUiLCJJTlZBTElEX0FSR1VNRU5UIiwiVU5TVVBQT1JURURfT1BFUkFUSU9OIiwiSU5WQUxJRF9TVE9SRURfREFUQSIsIklOVkFMSURfTVFUVF9NRVNTQUdFX1RZUEUiLCJNQUxGT1JNRURfVU5JQ09ERSIsIkJVRkZFUl9GVUxMIiwiQ09OTkFDS19SQyIsIjAiLCIxIiwiMiIsIjMiLCI0IiwiNSIsInN1YnN0aXR1dGlvbnMiLCJmaWVsZCIsInBhcnQxIiwicGFydDIiLCJNcXR0UHJvdG9JZGVudGlmaWVydjMiLCJNcXR0UHJvdG9JZGVudGlmaWVydjQiLCJXaXJlTWVzc2FnZSIsImRlY29kZU1lc3NhZ2UiLCJpbnB1dCIsInBvcyIsImRpZ2l0Iiwic3RhcnRpbmdQb3MiLCJmaXJzdCIsIm1lc3NhZ2VJbmZvIiwicmVtTGVuZ3RoIiwibXVsdGlwbGllciIsImVuZFBvcyIsIndpcmVNZXNzYWdlIiwic2Vzc2lvblByZXNlbnQiLCJyZXR1cm5Db2RlIiwibGVuIiwicmVhZFVpbnQxNiIsInRvcGljTmFtZSIsInBhcnNlVVRGOCIsIm1lc3NhZ2VJZGVudGlmaWVyIiwic3ViYXJyYXkiLCJyZXRhaW5lZCIsImR1cGxpY2F0ZSIsImRlc3RpbmF0aW9uTmFtZSIsInBheWxvYWRNZXNzYWdlIiwid3JpdGVVaW50MTYiLCJidWZmZXIiLCJvZmZzZXQiLCJ3cml0ZVN0cmluZyIsInV0ZjhMZW5ndGgiLCJzdHJpbmdUb1VURjgiLCJVVEY4TGVuZ3RoIiwiY2hhckNvZGUiLCJjaGFyQ29kZUF0IiwibG93Q2hhckNvZGUiLCJ1dGYxNiIsImJ5dGUxIiwiYnl0ZTIiLCJieXRlMyIsImJ5dGU0IiwiZW5jb2RlIiwid2lsbE1lc3NhZ2VQYXlsb2FkQnl0ZXMiLCJ0b3BpY1N0ckxlbmd0aCIsImRlc3RpbmF0aW9uTmFtZUxlbmd0aCIsImNsaWVudElkIiwid2lsbE1lc3NhZ2UiLCJwYXlsb2FkQnl0ZXMiLCJVaW50OEFycmF5IiwiYnl0ZUxlbmd0aCIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJ0b3BpY3MiLCJyZXF1ZXN0ZWRRb3MiLCJBcnJheUJ1ZmZlciIsIm1iaSIsIm51bUJ5dGVzIiwiZW5jb2RlTUJJIiwiYnl0ZVN0cmVhbSIsInNldCIsImNvbm5lY3RGbGFncyIsImNsZWFuU2Vzc2lvbiIsIlBpbmdlciIsIl9jbGllbnQiLCJfa2VlcEFsaXZlSW50ZXJ2YWwiLCJpc1Jlc2V0IiwicGluZ1JlcSIsImRvVGltZW91dCIsInBpbmdlciIsImRvUGluZyIsIl90cmFjZSIsInNvY2tldCIsIl9kaXNjb25uZWN0ZWQiLCJyZXNldCIsImNsZWFyVGltZW91dCIsImNhbmNlbCIsIlRpbWVvdXQiLCJ0aW1lb3V0U2Vjb25kcyIsImFjdGlvbiIsIkNsaWVudEltcGwiLCJ1cmkiLCJob3N0IiwicG9ydCIsInBhdGgiLCJXZWJTb2NrZXQiLCJfd3N1cmkiLCJfbG9jYWxLZXkiLCJfbXNnX3F1ZXVlIiwiX2J1ZmZlcmVkX21zZ19xdWV1ZSIsIl9zZW50TWVzc2FnZXMiLCJfcmVjZWl2ZWRNZXNzYWdlcyIsIl9ub3RpZnlfbXNnX3NlbnQiLCJfbWVzc2FnZV9pZGVudGlmaWVyIiwiX3NlcXVlbmNlIiwicmVzdG9yZSIsImNvbm5lY3RlZCIsIm1heE1lc3NhZ2VJZGVudGlmaWVyIiwiaG9zdEluZGV4Iiwib25Db25uZWN0ZWQiLCJvbk1lc3NhZ2VEZWxpdmVyZWQiLCJ0cmFjZUZ1bmN0aW9uIiwiX2Nvbm5lY3RUaW1lb3V0Iiwic2VuZFBpbmdlciIsInJlY2VpdmVQaW5nZXIiLCJfcmVjb25uZWN0SW50ZXJ2YWwiLCJfcmVjb25uZWN0aW5nIiwiX3JlY29ubmVjdFRpbWVvdXQiLCJkaXNjb25uZWN0ZWRQdWJsaXNoaW5nIiwiZGlzY29ubmVjdGVkQnVmZmVyU2l6ZSIsInJlY2VpdmVCdWZmZXIiLCJfdHJhY2VCdWZmZXIiLCJfTUFYX1RSQUNFX0VOVFJJRVMiLCJjb25uZWN0T3B0aW9uc01hc2tlZCIsIl90cmFjZU1hc2siLCJ1cmlzIiwiX2RvQ29ubmVjdCIsImludm9jYXRpb25Db250ZXh0IiwiZXJyb3JNZXNzYWdlIiwidGltZU91dCIsIl9yZXF1aXJlc19hY2siLCJfc2NoZWR1bGVfbWVzc2FnZSIsInNlcXVlbmNlIiwidW5zaGlmdCIsImdldFRyYWNlTG9nIiwic3RhcnRUcmFjZSIsInN0b3BUcmFjZSIsIndzdXJsIiwidXJpUGFydHMiLCJzcGxpdCIsImpvaW4iLCJiaW5hcnlUeXBlIiwib25vcGVuIiwiX29uX3NvY2tldF9vcGVuIiwib25tZXNzYWdlIiwiX29uX3NvY2tldF9tZXNzYWdlIiwiX29uX3NvY2tldF9lcnJvciIsIm9uY2xvc2UiLCJfb25fc29ja2V0X2Nsb3NlIiwiX3Byb2Nlc3NfcXVldWUiLCJzdG9yZSIsInN0b3JlZE1lc3NhZ2UiLCJ2ZXJzaW9uIiwicHViUmVjUmVjZWl2ZWQiLCJoZXgiLCJtZXNzYWdlQnl0ZXMiLCJwYXlsb2FkSGV4IiwicG9wIiwiX3NvY2tldF9zZW5kIiwibWVzc2FnZUNvdW50IiwibWVzc2FnZXMiLCJfZGVmcmFtZU1lc3NhZ2VzIiwiX2hhbmRsZU1lc3NhZ2UiLCJieXRlQXJyYXkiLCJuZXdEYXRhIiwicmVzdWx0IiwiZXJyb3JTdGFjayIsInN0YWNrIiwic2VudE1lc3NhZ2UiLCJyZWNlaXZlZE1lc3NhZ2UiLCJzZXF1ZW5jZWRNZXNzYWdlcyIsIm1zZ0lkIiwibXNnIiwic29ydCIsInB1YlJlbE1lc3NhZ2UiLCJyZWNvbm5lY3RlZCIsIl9jb25uZWN0ZWQiLCJfcmVjZWl2ZVB1Ymxpc2giLCJfcmVjZWl2ZU1lc3NhZ2UiLCJwdWJDb21wTWVzc2FnZSIsIndpcmVNZXNzYWdlTWFza2VkIiwicHViQWNrTWVzc2FnZSIsInB1YlJlY01lc3NhZ2UiLCJfcmVjb25uZWN0IiwiZXJyb3JUZXh0IiwicmVhZHlTdGF0ZSIsImNsb3NlIiwibXF0dFZlcnNpb25FeHBsaWNpdCIsInNwbGljZSIsInJlY29yZCIsInNldmVyaXR5Iiwic2hpZnQiLCJ0cmFjZU9iamVjdCIsIm1hc2tlZCIsInRyYWNlT2JqZWN0TWFza2VkIiwiYXR0ciIsIm5ld1BheWxvYWQiLCJwYXlsb2FkIiwiaXNWaWV3IiwiRGF0YVZpZXciLCJkZWZpbmVQcm9wZXJ0aWVzIiwibmV3RGVzdGluYXRpb25OYW1lIiwibmV3UW9zIiwibmV3UmV0YWluZWQiLCJuZXdUb3BpYyIsIm5ld0R1cGxpY2F0ZSIsImlwdjZBZGRTQnJhY2tldCIsImNsaWVudElkTGVuZ3RoIiwibmV3T25Db25uZWN0ZWQiLCJuZXdEaXNjb25uZWN0ZWRQdWJsaXNoaW5nIiwibmV3RGlzY29ubmVjdGVkQnVmZmVyU2l6ZSIsIm5ld09uQ29ubmVjdGlvbkxvc3QiLCJuZXdPbk1lc3NhZ2VEZWxpdmVyZWQiLCJuZXdPbk1lc3NhZ2VBcnJpdmVkIiwidHJhY2UiLCJob3N0cyIsInBvcnRzIiwic3RyaW5nUGF5bG9hZCIsInVzaW5nVVJJcyIsImlwdjYiLCJwdWJsaXNoIiwiaXNDb25uZWN0ZWQiLCJkZWZpbmUiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18iLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX2NvcmVfY2hhdFNlc3Npb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFB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QUUsRUFBQUMsR0FBQWl6QixLQUFBanpCLEVBQUFELFFBQUFrQywyREN6RlZwQyxFQUFBa0IsRUFBQW15QixHQUFBLFNBQUEvUSxHQUFBdGlCLEVBQUFVLEVBQUEyeUIsRUFBQSxnQ0FBQTdSLElBQUEsSUFBQThSLEVBQUF0ekIsRUFBQSxHQUdBc2lCLEVBQU8zTCxRQUFVMkwsRUFBTzNMLFNBQVcsR0FDbkNBLFFBQVE2SyxZQUFjSyxJQUVmLElBQU1MLEVBQWNLLG9DQ04zQjFoQixFQUFBRCxRQUFBLFNBQUFDLEdBb0JBLE9BbkJBQSxFQUFBb3pCLGtCQUNBcHpCLEVBQUFxekIsVUFBQSxhQUNBcnpCLEVBQUFzekIsTUFBQSxHQUVBdHpCLEVBQUF1ekIsV0FBQXZ6QixFQUFBdXpCLFNBQUEsSUFDQTV5QixPQUFBQyxlQUFBWixFQUFBLFVBQ0FhLFlBQUEsRUFDQUMsSUFBQSxXQUNBLE9BQUFkLEVBQUFFLEtBR0FTLE9BQUFDLGVBQUFaLEVBQUEsTUFDQWEsWUFBQSxFQUNBQyxJQUFBLFdBQ0EsT0FBQWQsRUFBQUMsS0FHQUQsRUFBQW96QixnQkFBQSxHQUVBcHpCIiwiZmlsZSI6ImFtYXpvbi1jb25uZWN0LWNoYXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNCk7XG4iLCIvKiBnbG9iYWwgd2luZG93LCBleHBvcnRzLCBkZWZpbmUgKi9cblxuIWZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0J1xuXG4gICAgdmFyIHJlID0ge1xuICAgICAgICBub3Rfc3RyaW5nOiAvW15zXS8sXG4gICAgICAgIG5vdF9ib29sOiAvW150XS8sXG4gICAgICAgIG5vdF90eXBlOiAvW15UXS8sXG4gICAgICAgIG5vdF9wcmltaXRpdmU6IC9bXnZdLyxcbiAgICAgICAgbnVtYmVyOiAvW2RpZWZnXS8sXG4gICAgICAgIG51bWVyaWNfYXJnOiAvW2JjZGllZmd1eFhdLyxcbiAgICAgICAganNvbjogL1tqXS8sXG4gICAgICAgIG5vdF9qc29uOiAvW15qXS8sXG4gICAgICAgIHRleHQ6IC9eW15cXHgyNV0rLyxcbiAgICAgICAgbW9kdWxvOiAvXlxceDI1ezJ9LyxcbiAgICAgICAgcGxhY2Vob2xkZXI6IC9eXFx4MjUoPzooWzEtOV1cXGQqKVxcJHxcXCgoW14pXSspXFwpKT8oXFwrKT8oMHwnW14kXSk/KC0pPyhcXGQrKT8oPzpcXC4oXFxkKykpPyhbYi1naWpvc3RUdXZ4WF0pLyxcbiAgICAgICAga2V5OiAvXihbYS16X11bYS16X1xcZF0qKS9pLFxuICAgICAgICBrZXlfYWNjZXNzOiAvXlxcLihbYS16X11bYS16X1xcZF0qKS9pLFxuICAgICAgICBpbmRleF9hY2Nlc3M6IC9eXFxbKFxcZCspXFxdLyxcbiAgICAgICAgc2lnbjogL15bKy1dL1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNwcmludGYoa2V5KSB7XG4gICAgICAgIC8vIGBhcmd1bWVudHNgIGlzIG5vdCBhbiBhcnJheSwgYnV0IHNob3VsZCBiZSBmaW5lIGZvciB0aGlzIGNhbGxcbiAgICAgICAgcmV0dXJuIHNwcmludGZfZm9ybWF0KHNwcmludGZfcGFyc2Uoa2V5KSwgYXJndW1lbnRzKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZzcHJpbnRmKGZtdCwgYXJndikge1xuICAgICAgICByZXR1cm4gc3ByaW50Zi5hcHBseShudWxsLCBbZm10XS5jb25jYXQoYXJndiB8fCBbXSkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3ByaW50Zl9mb3JtYXQocGFyc2VfdHJlZSwgYXJndikge1xuICAgICAgICB2YXIgY3Vyc29yID0gMSwgdHJlZV9sZW5ndGggPSBwYXJzZV90cmVlLmxlbmd0aCwgYXJnLCBvdXRwdXQgPSAnJywgaSwgaywgcGgsIHBhZCwgcGFkX2NoYXJhY3RlciwgcGFkX2xlbmd0aCwgaXNfcG9zaXRpdmUsIHNpZ25cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRyZWVfbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyc2VfdHJlZVtpXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gcGFyc2VfdHJlZVtpXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcnNlX3RyZWVbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgcGggPSBwYXJzZV90cmVlW2ldIC8vIGNvbnZlbmllbmNlIHB1cnBvc2VzIG9ubHlcbiAgICAgICAgICAgICAgICBpZiAocGgua2V5cykgeyAvLyBrZXl3b3JkIGFyZ3VtZW50XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3ZbY3Vyc29yXVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgcGgua2V5cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZyA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Ioc3ByaW50ZignW3NwcmludGZdIENhbm5vdCBhY2Nlc3MgcHJvcGVydHkgXCIlc1wiIG9mIHVuZGVmaW5lZCB2YWx1ZSBcIiVzXCInLCBwaC5rZXlzW2tdLCBwaC5rZXlzW2stMV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnW3BoLmtleXNba11dXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGgucGFyYW1fbm8pIHsgLy8gcG9zaXRpb25hbCBhcmd1bWVudCAoZXhwbGljaXQpXG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3ZbcGgucGFyYW1fbm9dXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBwb3NpdGlvbmFsIGFyZ3VtZW50IChpbXBsaWNpdClcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndltjdXJzb3IrK11cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmUubm90X3R5cGUudGVzdChwaC50eXBlKSAmJiByZS5ub3RfcHJpbWl0aXZlLnRlc3QocGgudHlwZSkgJiYgYXJnIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnKClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmUubnVtZXJpY19hcmcudGVzdChwaC50eXBlKSAmJiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgJiYgaXNOYU4oYXJnKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzcHJpbnRmKCdbc3ByaW50Zl0gZXhwZWN0aW5nIG51bWJlciBidXQgZm91bmQgJVQnLCBhcmcpKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZS5udW1iZXIudGVzdChwaC50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBpc19wb3NpdGl2ZSA9IGFyZyA+PSAwXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChwaC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2InOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGFyc2VJbnQoYXJnLCAxMCkudG9TdHJpbmcoMilcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChhcmcsIDEwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdpJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBhcnNlSW50KGFyZywgMTApXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdqJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IEpTT04uc3RyaW5naWZ5KGFyZywgbnVsbCwgcGgud2lkdGggPyBwYXJzZUludChwaC53aWR0aCkgOiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwaC5wcmVjaXNpb24gPyBwYXJzZUZsb2F0KGFyZykudG9FeHBvbmVudGlhbChwaC5wcmVjaXNpb24pIDogcGFyc2VGbG9hdChhcmcpLnRvRXhwb25lbnRpYWwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZic6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwaC5wcmVjaXNpb24gPyBwYXJzZUZsb2F0KGFyZykudG9GaXhlZChwaC5wcmVjaXNpb24pIDogcGFyc2VGbG9hdChhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdnJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBoLnByZWNpc2lvbiA/IFN0cmluZyhOdW1iZXIoYXJnLnRvUHJlY2lzaW9uKHBoLnByZWNpc2lvbikpKSA6IHBhcnNlRmxvYXQoYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGFyc2VJbnQoYXJnLCAxMCkgPj4+IDApLnRvU3RyaW5nKDgpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IFN0cmluZyhhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGgucHJlY2lzaW9uID8gYXJnLnN1YnN0cmluZygwLCBwaC5wcmVjaXNpb24pIDogYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBTdHJpbmcoISFhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGgucHJlY2lzaW9uID8gYXJnLnN1YnN0cmluZygwLCBwaC5wcmVjaXNpb24pIDogYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnKS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBoLnByZWNpc2lvbiA/IGFyZy5zdWJzdHJpbmcoMCwgcGgucHJlY2lzaW9uKSA6IGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGFyc2VJbnQoYXJnLCAxMCkgPj4+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBoLnByZWNpc2lvbiA/IGFyZy5zdWJzdHJpbmcoMCwgcGgucHJlY2lzaW9uKSA6IGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBhcnNlSW50KGFyZywgMTApID4+PiAwKS50b1N0cmluZygxNilcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBhcnNlSW50KGFyZywgMTApID4+PiAwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlLmpzb24udGVzdChwaC50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgKz0gYXJnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmUubnVtYmVyLnRlc3QocGgudHlwZSkgJiYgKCFpc19wb3NpdGl2ZSB8fCBwaC5zaWduKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbiA9IGlzX3Bvc2l0aXZlID8gJysnIDogJy0nXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcudG9TdHJpbmcoKS5yZXBsYWNlKHJlLnNpZ24sICcnKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbiA9ICcnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGFkX2NoYXJhY3RlciA9IHBoLnBhZF9jaGFyID8gcGgucGFkX2NoYXIgPT09ICcwJyA/ICcwJyA6IHBoLnBhZF9jaGFyLmNoYXJBdCgxKSA6ICcgJ1xuICAgICAgICAgICAgICAgICAgICBwYWRfbGVuZ3RoID0gcGgud2lkdGggLSAoc2lnbiArIGFyZykubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIHBhZCA9IHBoLndpZHRoID8gKHBhZF9sZW5ndGggPiAwID8gcGFkX2NoYXJhY3Rlci5yZXBlYXQocGFkX2xlbmd0aCkgOiAnJykgOiAnJ1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgKz0gcGguYWxpZ24gPyBzaWduICsgYXJnICsgcGFkIDogKHBhZF9jaGFyYWN0ZXIgPT09ICcwJyA/IHNpZ24gKyBwYWQgKyBhcmcgOiBwYWQgKyBzaWduICsgYXJnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0XG4gICAgfVxuXG4gICAgdmFyIHNwcmludGZfY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5cbiAgICBmdW5jdGlvbiBzcHJpbnRmX3BhcnNlKGZtdCkge1xuICAgICAgICBpZiAoc3ByaW50Zl9jYWNoZVtmbXRdKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ByaW50Zl9jYWNoZVtmbXRdXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX2ZtdCA9IGZtdCwgbWF0Y2gsIHBhcnNlX3RyZWUgPSBbXSwgYXJnX25hbWVzID0gMFxuICAgICAgICB3aGlsZSAoX2ZtdCkge1xuICAgICAgICAgICAgaWYgKChtYXRjaCA9IHJlLnRleHQuZXhlYyhfZm10KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJzZV90cmVlLnB1c2gobWF0Y2hbMF0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgobWF0Y2ggPSByZS5tb2R1bG8uZXhlYyhfZm10KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJzZV90cmVlLnB1c2goJyUnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKG1hdGNoID0gcmUucGxhY2Vob2xkZXIuZXhlYyhfZm10KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hbMl0pIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnX25hbWVzIHw9IDFcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkX2xpc3QgPSBbXSwgcmVwbGFjZW1lbnRfZmllbGQgPSBtYXRjaFsyXSwgZmllbGRfbWF0Y2ggPSBbXVxuICAgICAgICAgICAgICAgICAgICBpZiAoKGZpZWxkX21hdGNoID0gcmUua2V5LmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfbGlzdC5wdXNoKGZpZWxkX21hdGNoWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChyZXBsYWNlbWVudF9maWVsZCA9IHJlcGxhY2VtZW50X2ZpZWxkLnN1YnN0cmluZyhmaWVsZF9tYXRjaFswXS5sZW5ndGgpKSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGZpZWxkX21hdGNoID0gcmUua2V5X2FjY2Vzcy5leGVjKHJlcGxhY2VtZW50X2ZpZWxkKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfbGlzdC5wdXNoKGZpZWxkX21hdGNoWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgoZmllbGRfbWF0Y2ggPSByZS5pbmRleF9hY2Nlc3MuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkX2xpc3QucHVzaChmaWVsZF9tYXRjaFsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignW3NwcmludGZdIGZhaWxlZCB0byBwYXJzZSBuYW1lZCBhcmd1bWVudCBrZXknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignW3NwcmludGZdIGZhaWxlZCB0byBwYXJzZSBuYW1lZCBhcmd1bWVudCBrZXknKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoWzJdID0gZmllbGRfbGlzdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnX25hbWVzIHw9IDJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFyZ19uYW1lcyA9PT0gMykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tzcHJpbnRmXSBtaXhpbmcgcG9zaXRpb25hbCBhbmQgbmFtZWQgcGxhY2Vob2xkZXJzIGlzIG5vdCAoeWV0KSBzdXBwb3J0ZWQnKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBhcnNlX3RyZWUucHVzaChcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IG1hdGNoWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1fbm86ICAgIG1hdGNoWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5czogICAgICAgIG1hdGNoWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbjogICAgICAgIG1hdGNoWzNdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkX2NoYXI6ICAgIG1hdGNoWzRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ246ICAgICAgIG1hdGNoWzVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICAgICAgIG1hdGNoWzZdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlY2lzaW9uOiAgIG1hdGNoWzddLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogICAgICAgIG1hdGNoWzhdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1tzcHJpbnRmXSB1bmV4cGVjdGVkIHBsYWNlaG9sZGVyJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9mbXQgPSBfZm10LnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNwcmludGZfY2FjaGVbZm10XSA9IHBhcnNlX3RyZWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBleHBvcnQgdG8gZWl0aGVyIGJyb3dzZXIgb3Igbm9kZS5qc1xuICAgICAqL1xuICAgIC8qIGVzbGludC1kaXNhYmxlIHF1b3RlLXByb3BzICovXG4gICAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBleHBvcnRzWydzcHJpbnRmJ10gPSBzcHJpbnRmXG4gICAgICAgIGV4cG9ydHNbJ3ZzcHJpbnRmJ10gPSB2c3ByaW50ZlxuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2luZG93WydzcHJpbnRmJ10gPSBzcHJpbnRmXG4gICAgICAgIHdpbmRvd1sndnNwcmludGYnXSA9IHZzcHJpbnRmXG5cbiAgICAgICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSkge1xuICAgICAgICAgICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICdzcHJpbnRmJzogc3ByaW50ZixcbiAgICAgICAgICAgICAgICAgICAgJ3ZzcHJpbnRmJzogdnNwcmludGZcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qIGVzbGludC1lbmFibGUgcXVvdGUtcHJvcHMgKi9cbn0oKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuIiwiY2xhc3MgVmFsdWVFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiVmFsdWVFcnJvclwiO1xuICAgIGNvbnNvbGUubG9nKFwiRVhDRVBUSU9OOiBcIiArIHRoaXMubmFtZSArIFwiIE1FU1NBR0U6IFwiICsgdGhpcy5tZXNzYWdlKTtcbiAgfVxufVxuXG5jbGFzcyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gXCJVbkltcGxlbWVudGVkTWV0aG9kXCI7XG4gICAgY29uc29sZS5sb2coXCJFWENFUFRJT046IFwiICsgdGhpcy5uYW1lICsgXCIgTUVTU0FHRTogXCIgKyB0aGlzLm1lc3NhZ2UpO1xuICB9XG59XG5cbmNsYXNzIElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgYXJndW1lbnQpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSBcIklsbGVnYWxBcmd1bWVudFwiO1xuICAgIHRoaXMuYXJndW1lbnQgPSBhcmd1bWVudDtcbiAgICBjb25zb2xlLmxvZyhcIkVYQ0VQVElPTjogXCIgKyB0aGlzLm5hbWUgKyBcIiBNRVNTQUdFOiBcIiArIHRoaXMubWVzc2FnZSk7XG4gIH1cbn1cblxuY2xhc3MgSWxsZWdhbFN0YXRlRXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gXCJJbGxlZ2FsU3RhdGVcIjtcbiAgICBjb25zb2xlLmxvZyhcIkVYQ0VQVElPTjogXCIgKyB0aGlzLm5hbWUgKyBcIiBNRVNTQUdFOiBcIiArIHRoaXMubWVzc2FnZSk7XG4gIH1cbn1cblxuY2xhc3MgSWxsZWdhbEpzb25FeGNlcHRpb24gZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGFyZ3MpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSBcIklsbGVnYWxTdGF0ZVwiO1xuICAgIHRoaXMuY2F1c2VFeGNlcHRpb24gPSBhcmdzLmNhdXNlRXhjZXB0aW9uO1xuICAgIHRoaXMub3JpZ2luYWxKc29uU3RyaW5nID0gYXJncy5vcmlnaW5hbEpzb25TdHJpbmc7XG4gICAgY29uc29sZS5sb2coXG4gICAgICBcIkVYQ0VQVElPTjogXCIgK1xuICAgICAgICB0aGlzLm5hbWUgK1xuICAgICAgICBcIiBNRVNTQUdFOiBcIiArXG4gICAgICAgIHRoaXMubWVzc2FnZSArXG4gICAgICAgIFwiIGNhdXNlOiBcIiArXG4gICAgICAgIHRoaXMuY2F1c2VFeGNlcHRpb25cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24sXG4gIElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbixcbiAgSWxsZWdhbFN0YXRlRXhjZXB0aW9uLFxuICBJbGxlZ2FsSnNvbkV4Y2VwdGlvbixcbiAgVmFsdWVFcnJvclxufTtcbiIsInZhciBtYWtlSHR0cFJlcXVlc3QgPSAob2JqLCBzdWNjZXNzLCBmYWlsdXJlKSA9PiB7XG4gIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgeGhyLm9wZW4ob2JqLm1ldGhvZCB8fCBcIkdFVFwiLCBvYmoudXJsKTtcbiAgaWYgKG9iai5oZWFkZXJzKSB7XG4gICAgT2JqZWN0LmtleXMob2JqLmhlYWRlcnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgb2JqLmhlYWRlcnNba2V5XSk7XG4gICAgfSk7XG4gIH1cbiAgeGhyLm9ubG9hZCA9ICgpID0+IHtcbiAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCkge1xuICAgICAgc3VjY2Vzcyh4aHIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmYWlsdXJlKHhocik7XG4gICAgfVxuICB9O1xuICB4aHIub25lcnJvciA9ICgpID0+IGZhaWx1cmUoeGhyKTtcbiAgeGhyLnNlbmQob2JqLmJvZHkpO1xufTtcblxuZXhwb3J0IHsgbWFrZUh0dHBSZXF1ZXN0IH07XG4iLCJjbGFzcyBHbG9iYWxDb25maWdJbXBsIHtcbiAgdXBkYXRlKGNvbmZpZ0lucHV0KSB7XG4gICAgdmFyIGNvbmZpZyA9IGNvbmZpZ0lucHV0IHx8IHt9O1xuICAgIHRoaXMucmVnaW9uID0gY29uZmlnLnJlZ2lvbiB8fCB0aGlzLnJlZ2lvbjtcbiAgICB0aGlzLmVuZHBvaW50T3ZlcnJpZGUgPSBjb25maWcuZW5kcG9pbnQgfHwgdGhpcy5lbmRwb2ludE92ZXJyaWRlO1xuICAgIHRoaXMucmVjb25uZWN0ID0gY29uZmlnLnJlY29ubmVjdCA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWU7XG4gIH1cblxuICBnZXRSZWdpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVnaW9uO1xuICB9XG5cbiAgZ2V0RW5kcG9pbnRPdmVycmlkZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbmRwb2ludE92ZXJyaWRlO1xuICB9XG59XG5cbmNvbnN0IEdsb2JhbENvbmZpZyA9IG5ldyBHbG9iYWxDb25maWdJbXBsKCk7XG5cbmV4cG9ydCB7IEdsb2JhbENvbmZpZyB9O1xuIiwiaW1wb3J0IHsgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIH0gZnJvbSBcIi4vY29yZS9leGNlcHRpb25zXCI7XG5pbXBvcnQgeyBWYWx1ZUVycm9yIH0gZnJvbSBcIi4vY29yZS9leGNlcHRpb25zXCI7XG5pbXBvcnQgeyBzcHJpbnRmIH0gZnJvbSBcInNwcmludGYtanNcIjtcbmNvbnN0IFV0aWxzID0ge307XG5cbi8qKlxuICogQXNzZXJ0cyB0aGF0IGEgcHJlbWlzZSBpcyB0cnVlLlxuICovXG5VdGlscy5hc3NlcnRUcnVlID0gZnVuY3Rpb24ocHJlbWlzZSwgbWVzc2FnZSkge1xuICBpZiAoIXByZW1pc2UpIHtcbiAgICB0aHJvdyBuZXcgVmFsdWVFcnJvcihtZXNzYWdlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBc3NlcnRzIHRoYXQgYSB2YWx1ZSBpcyBub3QgbnVsbCBvciB1bmRlZmluZWQuXG4gKi9cblV0aWxzLmFzc2VydE5vdE51bGwgPSBmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICBVdGlscy5hc3NlcnRUcnVlKFxuICAgIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgIHNwcmludGYoXCIlcyBtdXN0IGJlIHByb3ZpZGVkXCIsIG5hbWUgfHwgXCJBIHZhbHVlXCIpXG4gICk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cblV0aWxzLm5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG59O1xuXG5VdGlscy5pc1N0cmluZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgcmFuZG9tIElEIGNvbnNpc3Rpbmcgb2YgdGhlIGN1cnJlbnQgdGltZXN0YW1wXG4gKiBhbmQgYSByYW5kb20gYmFzZS0zNiBudW1iZXIgYmFzZWQgb24gTWF0aC5yYW5kb20oKS5cbiAqL1xuVXRpbHMucmFuZG9tSWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHNwcmludGYoXG4gICAgXCIlcy0lc1wiLFxuICAgIFV0aWxzLm5vdygpLFxuICAgIE1hdGgucmFuZG9tKClcbiAgICAgIC50b1N0cmluZygzNilcbiAgICAgIC5zbGljZSgyKVxuICApO1xufTtcblxuVXRpbHMuYXNzZXJ0SXNOb25FbXB0eVN0cmluZyA9IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKGtleSArIFwiIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmchXCIpO1xuICB9XG59O1xuXG5VdGlscy5hc3NlcnRJc0xpc3QgPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKGtleSArIFwiIGlzIG5vdCBhbiBhcnJheVwiKTtcbiAgfVxufTtcblxuVXRpbHMuYXNzZXJ0SXNFbnVtID0gZnVuY3Rpb24odmFsdWUsIGFsbG93ZWRWYWx1ZXMsIGtleSkge1xuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IGFsbG93ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYWxsb3dlZFZhbHVlc1tpXSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbihcbiAgICBrZXkgKyBcIiBwYXNzZWQgaXMgbm90IHZhbGlkLiBcIiArIFwiQWxsb3dlZCB2YWx1ZXMgYXJlOiBcIiArIGFsbG93ZWRWYWx1ZXNcbiAgKTtcbn07XG5cbi8qKlxuICogR2VuZXJhdGUgYW4gZW51bSBmcm9tIHRoZSBnaXZlbiBsaXN0IG9mIGxvd2VyLWNhc2UgZW51bSB2YWx1ZXMsXG4gKiB3aGVyZSB0aGUgZW51bSBrZXlzIHdpbGwgYmUgdXBwZXIgY2FzZS5cbiAqXG4gKiBDb252ZXJzaW9uIGZyb20gcGFzY2FsIGNhc2UgYmFzZWQgb24gY29kZSBmcm9tIGhlcmU6XG4gKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwNTIxMjI0XG4gKi9cblV0aWxzLm1ha2VFbnVtID0gZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBlbnVtT2JqID0ge307XG5cbiAgdmFsdWVzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIga2V5ID0gdmFsdWVcbiAgICAgIC5yZXBsYWNlKC9cXC4/KFthLXpdKylfPy9nLCBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHJldHVybiB5LnRvVXBwZXJDYXNlKCkgKyBcIl9cIjtcbiAgICAgIH0pXG4gICAgICAucmVwbGFjZSgvXyQvLCBcIlwiKTtcblxuICAgIGVudW1PYmpba2V5XSA9IHZhbHVlO1xuICB9KTtcblxuICByZXR1cm4gZW51bU9iajtcbn07XG5cblV0aWxzLmNvbnRhaW5zID0gZnVuY3Rpb24ob2JqLCB2YWx1ZSkge1xuICBpZiAob2JqIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgVXRpbHMuZmluZChvYmosIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgcmV0dXJuIHYgPT09IHZhbHVlO1xuICAgICAgfSkgIT09IG51bGxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZSBpbiBvYmo7XG4gIH1cbn07XG5cblV0aWxzLmZpbmQgPSBmdW5jdGlvbihhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIHggPSAwOyB4IDwgYXJyYXkubGVuZ3RoOyB4KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W3hdKSkge1xuICAgICAgcmV0dXJuIGFycmF5W3hdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuVXRpbHMuY29udGFpbnNWYWx1ZSA9IGZ1bmN0aW9uKG9iaiwgdmFsdWUpIHtcbiAgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIFV0aWxzLmZpbmQob2JqLCBmdW5jdGlvbih2KSB7XG4gICAgICAgIHJldHVybiB2ID09PSB2YWx1ZTtcbiAgICAgIH0pICE9PSBudWxsXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFxuICAgICAgVXRpbHMuZmluZChVdGlscy52YWx1ZXMob2JqKSwgZnVuY3Rpb24odikge1xuICAgICAgICByZXR1cm4gdiA9PT0gdmFsdWU7XG4gICAgICB9KSAhPT0gbnVsbFxuICAgICk7XG4gIH1cbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGNhbGxhYmxlIGZ1bmN0aW9uIHR5cGUuXG4gKiBCb3Jyb3dlZCBmcm9tIFVuZGVyc2NvcmUuanMuXG4gKi9cblV0aWxzLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuICEhKG9iaiAmJiBvYmouY29uc3RydWN0b3IgJiYgb2JqLmNhbGwgJiYgb2JqLmFwcGx5KTtcbn07XG5cbi8qKlxuICogR2V0IGEgbGlzdCBvZiB2YWx1ZXMgZnJvbSBhIEphdmFzY3JpcHQgb2JqZWN0IHVzZWRcbiAqIGFzIGEgaGFzaCBtYXAuXG4gKi9cblV0aWxzLnZhbHVlcyA9IGZ1bmN0aW9uKG1hcCkge1xuICB2YXIgdmFsdWVzID0gW107XG5cbiAgVXRpbHMuYXNzZXJ0Tm90TnVsbChtYXAsIFwibWFwXCIpO1xuXG4gIGZvciAodmFyIGsgaW4gbWFwKSB7XG4gICAgdmFsdWVzLnB1c2gobWFwW2tdKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZXM7XG59O1xuXG5VdGlscy5pc09iamVjdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiAhKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbCk7XG59O1xuXG5VdGlscy5hc3NlcnRJc09iamVjdCA9IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgaWYgKCFVdGlscy5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKGtleSArIFwiIGlzIG5vdCBhbiBvYmplY3QhXCIpO1xuICB9XG59O1xuXG5VdGlscy5kZWxheSA9IChtcykgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG5cblV0aWxzLmFzeW5jV2hpbGVJbnRlcnZhbCA9IGZ1bmN0aW9uKGYsIHByZWRpY2F0ZSwgaW50ZXJ2YWwsIGNvdW50PTApIHtcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgaWYgKHByZWRpY2F0ZShjb3VudCkpIHtcbiAgICByZXR1cm4gZihjb3VudCkuY2F0Y2goKCkgPT4ge1xuICAgICAgY29uc3QgZGVsYXkgPSBNYXRoLm1heCgwLCBpbnRlcnZhbCAtIChuZXcgRGF0ZSgpKS52YWx1ZU9mKCkgKyBub3cudmFsdWVPZigpKTtcbiAgICAgIHJldHVybiBVdGlsc1xuICAgICAgICAuZGVsYXkoZGVsYXkpXG4gICAgICAgIC50aGVuKCgpID0+IFV0aWxzLmFzeW5jV2hpbGVJbnRlcnZhbChmLCBwcmVkaWNhdGUsIGludGVydmFsLCBjb3VudCArIDEpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiYXN5bmMgd2hpbGUgYWJvcnRlZFwiKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFV0aWxzO1xuIiwiaW1wb3J0IFV0aWxzIGZyb20gXCIuL3V0aWxzXCI7XG4vL1BsYWNlaG9sZGVyXG5leHBvcnQgY29uc3QgQ0hBVF9DT05GSUdVUkFUSU9OUyA9IHtcbiAgQ09OQ1VSUkVOVF9DSEFUUzogMTBcbn07XG5cbmV4cG9ydCBjb25zdCBDT05ORUNUSU9OX1RPS0VOX0tFWSA9IFwieC1hbXpuLWNvbm5lY3QtY29ubmVjdGlvbi10b2tlblwiO1xuZXhwb3J0IGNvbnN0IFBBUlRJQ0lQQU5UX1RPS0VOX0tFWSA9IFwieC1hbXpuLWNvbm5lY3QtcGFydGljaXBhbnQtdG9rZW5cIjtcblxuZXhwb3J0IGNvbnN0IFJFU09VUkNFX1BBVEggPSB7XG4gIE1FU1NBR0U6IFwiL2NvbnRhY3QvY2hhdC9wYXJ0aWNpcGFudC9tZXNzYWdlXCIsXG4gIFRSQU5TQ1JJUFQ6IFwiL2NvbnRhY3QvY2hhdC9wYXJ0aWNpcGFudC90cmFuc2NyaXB0XCIsXG4gIEVWRU5UOiBcIi9jb250YWN0L2NoYXQvcGFydGljaXBhbnQvZXZlbnRcIixcbiAgRElTQ09OTkVDVDogXCIvY29udGFjdC9jaGF0L3BhcnRpY2lwYW50L2Rpc2Nvbm5lY3RcIixcbiAgQ09OTkVDVElPTl9ERVRBSUxTOiBcIi9jb250YWN0L2NoYXQvcGFydGljaXBhbnQvY29ubmVjdGlvbi1kZXRhaWxzXCJcbn07XG5cbmV4cG9ydCBjb25zdCBIVFRQX01FVEhPRFMgPSB7XG4gIFBPU1Q6IFwicG9zdFwiXG59O1xuXG5leHBvcnQgY29uc3QgTUVTU0FHRV9QRVJTSVNURU5DRSA9IHtcbiAgUEVSU0lTVEVEOiBcIlBFUlNJU1RFRFwiLFxuICBOT05fUEVSU0lTVEVEOiBcIk5PTl9QRVJTSVNURURcIlxufTtcblxuZXhwb3J0IGNvbnN0IENPTlRFTlRfVFlQRSA9IHtcbiAgdGV4dFBsYWluOiBcInRleHQvcGxhaW5cIlxufTtcblxuZXhwb3J0IGNvbnN0IFZJU0lCSUxJVFkgPSBVdGlscy5tYWtlRW51bShbXG4gIFwiQUxMXCIsXG4gIFwiTUFOQUdFUlwiLFxuICBcIkFHRU5UXCIsXG4gIFwiQ1VTVE9NRVJcIixcbiAgXCJUSElSRFBBUlRZXCJcbl0pO1xuXG5leHBvcnQgY29uc3QgUEVSU0lTVEVOQ0UgPSBVdGlscy5tYWtlRW51bShbXCJQRVJTSVNURURcIiwgXCJOT05fUEVSU0lTVEVEXCJdKTtcblxuZXhwb3J0IGNvbnN0IFJFR0lPTl9DT05GSUcgPSB7XG4gIFwidXMtd2VzdC0yXCI6IHtcbiAgICBpbnZva2VVcmw6IFwiaHR0cHM6Ly9lYXAxdzkzajBrLmV4ZWN1dGUtYXBpLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tL3Byb2RcIlxuICB9LFxuICBcInVzLWVhc3QtMVwiOiB7XG4gICAgaW52b2tlVXJsOiBcImh0dHBzOi8vNGFnY2p1c3gzay5leGVjdXRlLWFwaS51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS9wcm9kXCJcbiAgfSxcbiAgXCJhcC1zb3V0aGVhc3QtMlwiOiB7XG4gICAgaW52b2tlVXJsOlxuICAgICAgXCJodHRwczovL3Y0dThvcTBjdmUuZXhlY3V0ZS1hcGkuYXAtc291dGhlYXN0LTIuYW1hem9uYXdzLmNvbS9wcm9kXCJcbiAgfSxcbiAgXCJhcC1ub3J0aGVhc3QtMVwiOiB7XG4gICAgaW52b2tlVXJsOlxuICAgICAgXCJodHRwczovLzNmaWR1bmZ5ejcuZXhlY3V0ZS1hcGkuYXAtbm9ydGhlYXN0LTEuYW1hem9uYXdzLmNvbS9wcm9kXCJcbiAgfSxcbiAgXCJldS1jZW50cmFsLTFcIjoge1xuICAgIGludm9rZVVybDogXCJodHRwczovLzFneW5hYXJtM2UuZXhlY3V0ZS1hcGkuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb20vcHJvZFwiXG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBNUVRUX0NPTlNUQU5UUyA9IHtcbiAgS0VFUF9BTElWRTogMzAsXG4gIENPTk5FQ1RfVElNRU9VVDogNjBcbn07XG5cbmV4cG9ydCBjb25zdCBTRVNTSU9OX1RZUEVTID0ge1xuICBBR0VOVDogXCJBR0VOVFwiLFxuICBDVVNUT01FUjogXCJDVVNUT01FUlwiXG59O1xuXG5leHBvcnQgY29uc3QgQ0hBVF9FVkVOVFMgPSB7XG4gIElOQ09NSU5HX01FU1NBR0U6IFwiSU5DT01JTkdfTUVTU0FHRVwiLFxuICBJTkNPTUlOR19UWVBJTkc6IFwiSU5DT01JTkdfVFlQSU5HXCIsXG4gIENPTk5FQ1RJT05fRVNUQUJMSVNIRUQ6IFwiQ09OTkVDVElPTl9FU1RBQkxJU0hFRFwiLFxuICBDT05ORUNUSU9OX0JST0tFTjogXCJDT05ORUNUSU9OX0JST0tFTlwiXG59O1xuXG5leHBvcnQgY29uc3QgVFJBTlNDUklQVF9ERUZBVUxUX1BBUkFNUyA9IHtcbiAgTUFYX1JFU1VMVFM6IDE1LFxuICBTT1JUX0tFWTogXCJBU0NFTkRJTkdcIixcbiAgU0NBTl9ESVJFQ1RJT046IFwiQkFDS1dBUkRcIlxufTtcblxuZXhwb3J0IGNvbnN0IExPR1NfREVTVElOQVRJT04gPSB7XG4gIE5VTEw6IFwiTlVMTFwiLFxuICBDTElFTlRfTE9HR0VSOiBcIkNMSUVOVF9MT0dHRVJcIixcbiAgREVCVUc6IFwiREVCVUdcIlxufTtcblxuZXhwb3J0IGNvbnN0IFJFR0lPTlMgPSB7XG4gIHBkeDogXCJ1cy13ZXN0LTJcIixcbiAgaWFkOiBcInVzLWVhc3QtMVwiLFxuICBzeWQ6IFwiYXAtc291dGhlYXN0LTJcIixcbiAgbnJ0OiBcImFwLW5vcnRoZWFzdC0xXCIsXG4gIGZyYTogXCJldS1jZW50cmFsLTFcIlxufTtcblxuZXhwb3J0IGNvbnN0IFJFQ09OTkVDVF9JTlRFUlZBTCA9IDEwMDA7XG5leHBvcnQgY29uc3QgTUFYX1JFQ09OTkVDVF9BVFRFTVBUUyA9IDU7XG4iLCJpbXBvcnQgVXRpbHMgZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7IExPR1NfREVTVElOQVRJT04gfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG5jbGFzcyBMb2dnZXIge1xuICBkZWJ1ZyhkYXRhKSB7fVxuXG4gIGluZm8oZGF0YSkge31cblxuICB3YXJuKGRhdGEpIHt9XG5cbiAgZXJyb3IoZGF0YSkge31cbn1cbi8qZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyovXG5cbmNvbnN0IExvZ0xldmVsID0ge1xuICBERUJVRzogMTAsXG4gIElORk86IDIwLFxuICBXQVJOOiAzMCxcbiAgRVJST1I6IDQwXG59O1xuXG5jbGFzcyBMb2dNYW5hZ2VySW1wbCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudXBkYXRlTG9nZ2VyQ29uZmlnKCk7XG4gICAgdGhpcy5jb25zb2xlTG9nZ2VyV3JhcHBlciA9IGNyZWF0ZUNvbnNvbGVMb2dnZXIoKTtcbiAgfVxuXG4gIHdyaXRlVG9DbGllbnRMb2dnZXIobGV2ZWwsIGxvZ1N0YXRlbWVudCkge1xuICAgIGlmICghdGhpcy5oYXNDbGllbnRMb2dnZXIoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICBjYXNlIExvZ0xldmVsLkRFQlVHOlxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50TG9nZ2VyLmRlYnVnKGxvZ1N0YXRlbWVudCk7XG4gICAgICBjYXNlIExvZ0xldmVsLklORk86XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRMb2dnZXIuaW5mbyhsb2dTdGF0ZW1lbnQpO1xuICAgICAgY2FzZSBMb2dMZXZlbC5XQVJOOlxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50TG9nZ2VyLndhcm4obG9nU3RhdGVtZW50KTtcbiAgICAgIGNhc2UgTG9nTGV2ZWwuRVJST1I6XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRMb2dnZXIuZXJyb3IobG9nU3RhdGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBpc0xldmVsRW5hYmxlZChsZXZlbCkge1xuICAgIHJldHVybiBsZXZlbCA+PSB0aGlzLl9sZXZlbDtcbiAgfVxuXG4gIGhhc0NsaWVudExvZ2dlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50TG9nZ2VyICE9PSBudWxsO1xuICB9XG5cbiAgZ2V0TG9nZ2VyKG9wdGlvbnMpIHtcbiAgICB2YXIgcHJlZml4ID0gb3B0aW9ucy5wcmVmaXggfHwgXCJcIjtcbiAgICBpZiAodGhpcy5fbG9nc0Rlc3RpbmF0aW9uID09PSBMT0dTX0RFU1RJTkFUSU9OLkRFQlVHKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb25zb2xlTG9nZ2VyV3JhcHBlcjtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBMb2dnZXJXcmFwcGVySW1wbChwcmVmaXgpO1xuICB9XG5cbiAgdXBkYXRlTG9nZ2VyQ29uZmlnKGlucHV0Q29uZmlnKSB7XG4gICAgdmFyIGNvbmZpZyA9IGlucHV0Q29uZmlnIHx8IHt9O1xuICAgIHRoaXMuX2xldmVsID0gY29uZmlnLmxldmVsIHx8IExvZ0xldmVsLklORk87XG4gICAgdGhpcy5fY2xpZW50TG9nZ2VyID0gY29uZmlnLmxvZ2dlciB8fCBudWxsO1xuICAgIHRoaXMuX2xvZ3NEZXN0aW5hdGlvbiA9IExPR1NfREVTVElOQVRJT04uTlVMTDtcbiAgICBpZiAoY29uZmlnLmRlYnVnKSB7XG4gICAgICB0aGlzLl9sb2dzRGVzdGluYXRpb24gPSBMT0dTX0RFU1RJTkFUSU9OLkRFQlVHO1xuICAgIH1cbiAgICBpZiAoY29uZmlnLmxvZ2dlcikge1xuICAgICAgdGhpcy5fbG9nc0Rlc3RpbmF0aW9uID0gTE9HU19ERVNUSU5BVElPTi5DTElFTlRfTE9HR0VSO1xuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBMb2dnZXJXcmFwcGVyIHtcbiAgZGVidWcoKSB7fVxuXG4gIGluZm8oKSB7fVxuXG4gIHdhcm4oKSB7fVxuXG4gIGVycm9yKCkge31cbn1cblxuY2xhc3MgTG9nZ2VyV3JhcHBlckltcGwgZXh0ZW5kcyBMb2dnZXJXcmFwcGVyIHtcbiAgY29uc3RydWN0b3IocHJlZml4KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnByZWZpeCA9IHByZWZpeCB8fCBcIlwiO1xuICB9XG5cbiAgZGVidWcoLi4uYXJncykge1xuICAgIHRoaXMuX2xvZyhMb2dMZXZlbC5ERUJVRywgYXJncyk7XG4gIH1cblxuICBpbmZvKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9sb2coTG9nTGV2ZWwuSU5GTywgYXJncyk7XG4gIH1cblxuICB3YXJuKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9sb2coTG9nTGV2ZWwuV0FSTiwgYXJncyk7XG4gIH1cblxuICBlcnJvciguLi5hcmdzKSB7XG4gICAgdGhpcy5fbG9nKExvZ0xldmVsLkVSUk9SLCBhcmdzKTtcbiAgfVxuXG4gIF9zaG91bGRMb2cobGV2ZWwpIHtcbiAgICByZXR1cm4gTG9nTWFuYWdlci5oYXNDbGllbnRMb2dnZXIoKSAmJiBMb2dNYW5hZ2VyLmlzTGV2ZWxFbmFibGVkKGxldmVsKTtcbiAgfVxuXG4gIF93cml0ZVRvQ2xpZW50TG9nZ2VyKGxldmVsLCBsb2dTdGF0ZW1lbnQpIHtcbiAgICBMb2dNYW5hZ2VyLndyaXRlVG9DbGllbnRMb2dnZXIobGV2ZWwsIGxvZ1N0YXRlbWVudCk7XG4gIH1cblxuICBfbG9nKGxldmVsLCBhcmdzKSB7XG4gICAgaWYgKHRoaXMuX3Nob3VsZExvZyhsZXZlbCkpIHtcbiAgICAgIHZhciBsb2dTdGF0ZW1lbnQgPSB0aGlzLl9jb252ZXJ0VG9TaW5nbGVTdGF0ZW1lbnQoYXJncyk7XG4gICAgICB0aGlzLl93cml0ZVRvQ2xpZW50TG9nZ2VyKGxldmVsLCBsb2dTdGF0ZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIF9jb252ZXJ0VG9TaW5nbGVTdGF0ZW1lbnQoYXJncykge1xuICAgIHZhciBsb2dTdGF0ZW1lbnQgPSBcIlwiO1xuICAgIGlmICh0aGlzLnByZWZpeCkge1xuICAgICAgbG9nU3RhdGVtZW50ICs9IHRoaXMucHJlZml4ICsgXCIgXCI7XG4gICAgfVxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBhcmdzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGFyZyA9IGFyZ3NbaW5kZXhdO1xuICAgICAgbG9nU3RhdGVtZW50ICs9IHRoaXMuX2NvbnZlcnRUb1N0cmluZyhhcmcpICsgXCIgXCI7XG4gICAgfVxuICAgIHJldHVybiBsb2dTdGF0ZW1lbnQ7XG4gIH1cblxuICBfY29udmVydFRvU3RyaW5nKGFyZykge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIWFyZykge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIH1cbiAgICAgIGlmIChVdGlscy5pc1N0cmluZyhhcmcpKSB7XG4gICAgICAgIHJldHVybiBhcmc7XG4gICAgICB9XG4gICAgICBpZiAoVXRpbHMuaXNPYmplY3QoYXJnKSAmJiBVdGlscy5pc0Z1bmN0aW9uKGFyZy50b1N0cmluZykpIHtcbiAgICAgICAgdmFyIHRvU3RyaW5nUmVzdWx0ID0gYXJnLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmICh0b1N0cmluZ1Jlc3VsdCAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIikge1xuICAgICAgICAgIHJldHVybiB0b1N0cmluZ1Jlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB3aGlsZSBjb252ZXJ0aW5nIGFyZ3VtZW50IHRvIHN0cmluZ1wiLCBhcmcsIGVycm9yKTtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxufVxuXG52YXIgY3JlYXRlQ29uc29sZUxvZ2dlciA9ICgpID0+IHtcbiAgdmFyIGxvZ2dlciA9IG5ldyBMb2dnZXJXcmFwcGVyKCk7XG4gIGxvZ2dlci5kZWJ1ZyA9IGNvbnNvbGUuZGVidWcuYmluZCh3aW5kb3cuY29uc29sZSk7XG4gIGxvZ2dlci5pbmZvID0gY29uc29sZS5pbmZvLmJpbmQod2luZG93LmNvbnNvbGUpO1xuICBsb2dnZXIud2FybiA9IGNvbnNvbGUud2Fybi5iaW5kKHdpbmRvdy5jb25zb2xlKTtcbiAgbG9nZ2VyLmVycm9yID0gY29uc29sZS5lcnJvci5iaW5kKHdpbmRvdy5jb25zb2xlKTtcbiAgcmV0dXJuIGxvZ2dlcjtcbn07XG5cbmNvbnN0IExvZ01hbmFnZXIgPSBuZXcgTG9nTWFuYWdlckltcGwoKTtcblxuZXhwb3J0IHsgTG9nTWFuYWdlciwgTG9nZ2VyLCBMb2dMZXZlbCB9O1xuIiwiaW1wb3J0IHsgVW5JbXBsZW1lbnRlZE1ldGhvZEV4Y2VwdGlvbiB9IGZyb20gXCIuLi9jb3JlL2V4Y2VwdGlvbnNcIjtcbmltcG9ydCB7IG1ha2VIdHRwUmVxdWVzdCB9IGZyb20gXCIuL1htbEh0dHBDbGllbnRcIjtcbmltcG9ydCB7IEdsb2JhbENvbmZpZyB9IGZyb20gXCIuLi9nbG9iYWxDb25maWdcIjtcbmltcG9ydCB7XG4gIFJFU09VUkNFX1BBVEgsXG4gIEhUVFBfTUVUSE9EUyxcbiAgUkVHSU9OX0NPTkZJRyxcbiAgQ09OVEVOVF9UWVBFLFxuICBNRVNTQUdFX1BFUlNJU1RFTkNFLFxuICBDT05ORUNUSU9OX1RPS0VOX0tFWSxcbiAgUEFSVElDSVBBTlRfVE9LRU5fS0VZLFxuICBSRUdJT05TXG59IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IExvZ01hbmFnZXIgfSBmcm9tIFwiLi4vbG9nXCI7XG5cbmNsYXNzIENoYXRDbGllbnRGYWN0b3J5SW1wbCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY2xpZW50Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIGdldENhY2hlZENsaWVudChvcHRpb25zSW5wdXQpIHtcbiAgICB2YXIgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnNJbnB1dCk7XG4gICAgdmFyIHJlZ2lvbiA9IG9wdGlvbnNJbnB1dC5yZWdpb24gfHwgR2xvYmFsQ29uZmlnLmdldFJlZ2lvbigpIHx8IFJFR0lPTlMucGR4O1xuICAgIG9wdGlvbnMucmVnaW9uID0gcmVnaW9uO1xuICAgIGlmICh0aGlzLmNsaWVudENhY2hlW3JlZ2lvbl0pIHtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudENhY2hlW3JlZ2lvbl07XG4gICAgfVxuICAgIHZhciBjbGllbnQgPSB0aGlzLl9jcmVhdGVDbGllbnQob3B0aW9ucyk7XG4gICAgdGhpcy5jbGllbnRDYWNoZVtyZWdpb25dID0gY2xpZW50O1xuICAgIHJldHVybiBjbGllbnQ7XG4gIH1cblxuICBfY3JlYXRlQ2xpZW50KG9wdGlvbnMpIHtcbiAgICB2YXIgcmVnaW9uID0gb3B0aW9ucy5yZWdpb247XG4gICAgdmFyIGVuZHBvaW50T3ZlcnJpZGUgPSBHbG9iYWxDb25maWcuZ2V0RW5kcG9pbnRPdmVycmlkZSgpO1xuICAgIHZhciBzdGFnZUNvbmZpZyA9IFJFR0lPTl9DT05GSUdbcmVnaW9uXTtcbiAgICBpZiAoZW5kcG9pbnRPdmVycmlkZSkge1xuICAgICAgc3RhZ2VDb25maWcuaW52b2tlVXJsID0gZW5kcG9pbnRPdmVycmlkZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBIdHRwQ2hhdENsaWVudCh7XG4gICAgICBzdGFnZUNvbmZpZzogc3RhZ2VDb25maWdcbiAgICB9KTtcbiAgfVxufVxuXG4vKmVzbGludC1kaXNhYmxlKi9cbmNsYXNzIENoYXRDbGllbnQge1xuICBzZW5kTWVzc2FnZShwYXJ0aWNpcGFudFRva2VuLCBtZXNzYWdlLCB0eXBlKSB7XG4gICAgdGhyb3cgbmV3IFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24oXCJzZW5kVGV4dE1lc3NhZ2UgaW4gQ2hhdENsaWVudFwiKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RDaGF0KHBhcnRpY2lwYW50VG9rZW4pIHtcbiAgICB0aHJvdyBuZXcgVW5JbXBsZW1lbnRlZE1ldGhvZEV4Y2VwdGlvbihcImRpc2Nvbm5lY3RDaGF0IGluIENoYXRDbGllbnRcIik7XG4gIH1cblxuICBzZW5kRXZlbnQoZXZlbnRUeXBlLCBtZXNzYWdlSWRzLCB2aXNpYmlsaXR5LCBwZXJzaXN0ZW5jZSkge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFwic2VuZEV2ZW50IGluIENoYXRDbGllbnRcIik7XG4gIH1cblxuICBjcmVhdGVDb25uZWN0aW9uRGV0YWlscyhwYXJ0aWNpcGFudFRva2VuKSB7XG4gICAgdGhyb3cgbmV3IFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24oXCJyZWNvbm5lY3RDaGF0IGluIENoYXRDbGllbnRcIik7XG4gIH1cbn1cbi8qZXNsaW50LWVuYWJsZSovXG5cbnZhciBjcmVhdGVEZWZhdWx0SGVhZGVycyA9ICgpID0+ICh7XG4gIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiXG59KTtcblxuY2xhc3MgSHR0cENoYXRDbGllbnQgZXh0ZW5kcyBDaGF0Q2xpZW50IHtcbiAgY29uc3RydWN0b3IoYXJncykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pbnZva2VVcmwgPSBhcmdzLnN0YWdlQ29uZmlnLmludm9rZVVybDtcbiAgICB0aGlzLmNhbGxIdHRwQ2xpZW50ID0gbWFrZUh0dHBSZXF1ZXN0O1xuICAgIHRoaXMubG9nZ2VyID0gTG9nTWFuYWdlci5nZXRMb2dnZXIoeyBwcmVmaXg6IFwiQ2hhdENsaWVudFwiIH0pO1xuICB9XG5cbiAgc2VuZE1lc3NhZ2UoY29ubmVjdGlvblRva2VuLCBtZXNzYWdlLCB0eXBlKSB7XG4gICAgY29uc29sZS5sb2codHlwZSk7XG4gICAgdmFyIGJvZHkgPSB7XG4gICAgICBNZXNzYWdlOiB7XG4gICAgICAgIENvbnRlbnRUeXBlOiBDT05URU5UX1RZUEUudGV4dFBsYWluLFxuICAgICAgICBDb250ZW50OiBtZXNzYWdlLFxuICAgICAgICBQZXJzaXN0ZW5jZTogTUVTU0FHRV9QRVJTSVNURU5DRS5QRVJTSVNURURcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZXF1ZXN0SW5wdXQgPSB7XG4gICAgICBtZXRob2Q6IEhUVFBfTUVUSE9EUy5QT1NULFxuICAgICAgaGVhZGVyczoge30sXG4gICAgICB1cmw6IHRoaXMuaW52b2tlVXJsICsgUkVTT1VSQ0VfUEFUSC5NRVNTQUdFLFxuICAgICAgYm9keTogYm9keVxuICAgIH07XG4gICAgcmVxdWVzdElucHV0LmhlYWRlcnNbQ09OTkVDVElPTl9UT0tFTl9LRVldID0gY29ubmVjdGlvblRva2VuO1xuICAgIHJldHVybiB0aGlzLl9jYWxsSHR0cENsaWVudChyZXF1ZXN0SW5wdXQpO1xuICB9XG5cbiAgZ2V0VHJhbnNjcmlwdChjb25uZWN0aW9uVG9rZW4sIGFyZ3MpIHtcbiAgICB2YXIgcmVxdWVzdElucHV0ID0ge1xuICAgICAgbWV0aG9kOiBIVFRQX01FVEhPRFMuUE9TVCxcbiAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgdXJsOiB0aGlzLmludm9rZVVybCArIFJFU09VUkNFX1BBVEguVFJBTlNDUklQVCxcbiAgICAgIGJvZHk6IGFyZ3NcbiAgICB9O1xuICAgIHJlcXVlc3RJbnB1dC5oZWFkZXJzW0NPTk5FQ1RJT05fVE9LRU5fS0VZXSA9IGNvbm5lY3Rpb25Ub2tlbjtcbiAgICByZXR1cm4gdGhpcy5fY2FsbEh0dHBDbGllbnQocmVxdWVzdElucHV0KTtcbiAgfVxuXG4gIHNlbmRFdmVudChjb25uZWN0aW9uVG9rZW4sIGV2ZW50VHlwZSwgbWVzc2FnZUlkcywgdmlzaWJpbGl0eSwgcGVyc2lzdGVuY2UpIHtcbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlSWRzKTtcbiAgICBjb25zb2xlLmxvZyhwZXJzaXN0ZW5jZSk7XG4gICAgdmFyIGJvZHkgPSB7XG4gICAgICBQYXJ0aWNpcGFudEV2ZW50OiB7XG4gICAgICAgIFZpc2liaWxpdHk6IHZpc2liaWxpdHksXG4gICAgICAgIFBhcnRpY2lwYW50RXZlbnRUeXBlOiBldmVudFR5cGVcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZXF1ZXN0SW5wdXQgPSB7XG4gICAgICBtZXRob2Q6IEhUVFBfTUVUSE9EUy5QT1NULFxuICAgICAgaGVhZGVyczoge30sXG4gICAgICB1cmw6IHRoaXMuaW52b2tlVXJsICsgUkVTT1VSQ0VfUEFUSC5FVkVOVCxcbiAgICAgIGJvZHk6IGJvZHlcbiAgICB9O1xuICAgIHJlcXVlc3RJbnB1dC5oZWFkZXJzW0NPTk5FQ1RJT05fVE9LRU5fS0VZXSA9IGNvbm5lY3Rpb25Ub2tlbjtcbiAgICByZXR1cm4gdGhpcy5fY2FsbEh0dHBDbGllbnQocmVxdWVzdElucHV0KTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RDaGF0KGNvbm5lY3Rpb25Ub2tlbikge1xuICAgIHZhciByZXF1ZXN0SW5wdXQgPSB7XG4gICAgICBtZXRob2Q6IEhUVFBfTUVUSE9EUy5QT1NULFxuICAgICAgaGVhZGVyczoge30sXG4gICAgICB1cmw6IHRoaXMuaW52b2tlVXJsICsgUkVTT1VSQ0VfUEFUSC5ESVNDT05ORUNULFxuICAgICAgYm9keToge31cbiAgICB9O1xuICAgIHJlcXVlc3RJbnB1dC5oZWFkZXJzW0NPTk5FQ1RJT05fVE9LRU5fS0VZXSA9IGNvbm5lY3Rpb25Ub2tlbjtcbiAgICByZXR1cm4gdGhpcy5fY2FsbEh0dHBDbGllbnQocmVxdWVzdElucHV0KTtcbiAgfVxuXG4gIGNyZWF0ZUNvbm5lY3Rpb25EZXRhaWxzKHBhcnRpY2lwYW50VG9rZW4pIHtcbiAgICB2YXIgcmVxdWVzdElucHV0ID0ge1xuICAgICAgbWV0aG9kOiBIVFRQX01FVEhPRFMuUE9TVCxcbiAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgdXJsOiB0aGlzLmludm9rZVVybCArIFJFU09VUkNFX1BBVEguQ09OTkVDVElPTl9ERVRBSUxTLFxuICAgICAgYm9keToge31cbiAgICB9O1xuICAgIHJlcXVlc3RJbnB1dC5oZWFkZXJzW1BBUlRJQ0lQQU5UX1RPS0VOX0tFWV0gPSBwYXJ0aWNpcGFudFRva2VuO1xuICAgIHJldHVybiB0aGlzLl9jYWxsSHR0cENsaWVudChyZXF1ZXN0SW5wdXQpO1xuICB9XG5cbiAgX2NhbGxIdHRwQ2xpZW50KHJlcXVlc3RJbnB1dCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXF1ZXN0SW5wdXQuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICBjcmVhdGVEZWZhdWx0SGVhZGVycygpLFxuICAgICAgcmVxdWVzdElucHV0LmhlYWRlcnNcbiAgICApO1xuICAgIHJlcXVlc3RJbnB1dC5ib2R5ID0gSlNPTi5zdHJpbmdpZnkocmVxdWVzdElucHV0LmJvZHkpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBzdWNjZXNzID0gcmVxdWVzdCA9PiB7XG4gICAgICAgIHZhciByZXNwb25zZU9iamVjdCA9IHt9O1xuICAgICAgICByZXNwb25zZU9iamVjdC5kYXRhID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIHJlc29sdmUocmVzcG9uc2VPYmplY3QpO1xuICAgICAgfTtcbiAgICAgIHZhciBmYWlsdXJlID0gcmVxdWVzdCA9PiB7XG4gICAgICAgIHZhciBlcnJvck9iamVjdCA9IHt9O1xuICAgICAgICBlcnJvck9iamVjdC5zdGF0dXNUZXh0ID0gcmVxdWVzdC5zdGF0dXNUZXh0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGVycm9yT2JqZWN0LmVycm9yID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuKFwiaW52YWxpZCBqc29uIGVycm9yIGZyb20gc2VydmVyXCIpO1xuICAgICAgICAgIGVycm9yT2JqZWN0LmVycm9yID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoZXJyb3JPYmplY3QpO1xuICAgICAgfTtcbiAgICAgIHNlbGYuY2FsbEh0dHBDbGllbnQocmVxdWVzdElucHV0LCBzdWNjZXNzLCBmYWlsdXJlKTtcbiAgICB9KTtcbiAgfVxufVxuXG52YXIgQ2hhdENsaWVudEZhY3RvcnkgPSBuZXcgQ2hhdENsaWVudEZhY3RvcnlJbXBsKCk7XG5leHBvcnQgeyBDaGF0Q2xpZW50RmFjdG9yeSB9O1xuIiwiaW1wb3J0IFV0aWxzIGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHsgQ09OVEVOVF9UWVBFLCBWSVNJQklMSVRZLCBQRVJTSVNURU5DRSB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiB9IGZyb20gXCIuL2V4Y2VwdGlvbnNcIjtcblxuY2xhc3MgQ2hhdENvbnRyb2xsZXJBcmdzVmFsaWRhdG9yIHtcbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG4gIHZhbGlkYXRlTmV3Q29udHJvbGxlckRldGFpbHMoY2hhdERldGFpbHMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKmVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMqL1xuXG4gIHZhbGlkYXRlU2VuZE1lc3NhZ2UobWVzc2FnZSwgdHlwZSkge1xuICAgIGlmICghVXRpbHMuaXNTdHJpbmcobWVzc2FnZSkpIHtcbiAgICAgIFV0aWxzLmFzc2VydElzT2JqZWN0KG1lc3NhZ2UsIFwibWVzc2FnZVwiKTtcbiAgICB9XG4gICAgVXRpbHMuYXNzZXJ0SXNFbnVtKHR5cGUsIE9iamVjdC52YWx1ZXMoQ09OVEVOVF9UWVBFKSwgXCJ0eXBlXCIpO1xuICB9XG5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG4gIHZhbGlkYXRlQ29ubmVjdENoYXQoYXJncykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyovXG5cbiAgdmFsaWRhdGVMb2dnZXIobG9nZ2VyKSB7XG4gICAgVXRpbHMuYXNzZXJ0SXNPYmplY3QobG9nZ2VyLCBcImxvZ2dlclwiKTtcbiAgICBbXCJkZWJ1Z1wiLCBcImluZm9cIiwgXCJ3YXJuXCIsIFwiZXJyb3JcIl0uZm9yRWFjaChtZXRob2ROYW1lID0+IHtcbiAgICAgIGlmICghVXRpbHMuaXNGdW5jdGlvbihsb2dnZXJbbWV0aG9kTmFtZV0pKSB7XG4gICAgICAgIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oXG4gICAgICAgICAgbWV0aG9kTmFtZSArXG4gICAgICAgICAgICBcIiBzaG91bGQgYmUgYSB2YWxpZCBmdW5jdGlvbiBvbiB0aGUgcGFzc2VkIGxvZ2dlciBvYmplY3QhXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhbGlkYXRlU2VuZEV2ZW50KGFyZ3MpIHtcbiAgICBVdGlscy5hc3NlcnRJc05vbkVtcHR5U3RyaW5nKGFyZ3MuZXZlbnRUeXBlLCBcImV2ZW50VHlwZVwiKTtcbiAgICBpZiAoYXJncy5tZXNzYWdlSWRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFV0aWxzLmFzc2VydElzTGlzdChhcmdzLm1lc3NhZ2VJZHMpO1xuICAgIH1cbiAgICBpZiAoYXJncy52aXNpYmlsaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFV0aWxzLmFzc2VydElzRW51bShcbiAgICAgICAgYXJncy52aXNpYmlsaXR5LFxuICAgICAgICBPYmplY3QudmFsdWVzKFZJU0lCSUxJVFkpLFxuICAgICAgICBcInZpc2liaWxpdHlcIlxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGFyZ3MucGVyc2lzdGVuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgVXRpbHMuYXNzZXJ0SXNFbnVtKFxuICAgICAgICBhcmdzLnBlcnNpc3RlbmNlLFxuICAgICAgICBPYmplY3QudmFsdWVzKFBFUlNJU1RFTkNFKSxcbiAgICAgICAgXCJwZXJzaXN0ZW5jZVwiXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE86IE5vdCBzdXJlIGFib3V0IHRoaXMgQVBJLlxuICAvKmVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzKi9cbiAgdmFsaWRhdGVHZXRNZXNzYWdlcyhhcmdzKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyplc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzKi9cbn1cblxuY2xhc3MgQ2hhdFNlcnZpY2VBcmdzVmFsaWRhdG9yIGV4dGVuZHMgQ2hhdENvbnRyb2xsZXJBcmdzVmFsaWRhdG9yIHtcbiAgdmFsaWRhdGVDaGF0RGV0YWlscyhjaGF0RGV0YWlscykge1xuICAgIFV0aWxzLmFzc2VydElzT2JqZWN0KGNoYXREZXRhaWxzLCBcImNoYXREZXRhaWxzXCIpO1xuICAgIFV0aWxzLmFzc2VydElzTm9uRW1wdHlTdHJpbmcoXG4gICAgICBjaGF0RGV0YWlscy5pbml0aWFsQ29udGFjdElkLFxuICAgICAgXCJjaGF0RGV0YWlscy5pbml0aWFsQ29udGFjdElkXCJcbiAgICApO1xuICAgIFV0aWxzLmFzc2VydElzTm9uRW1wdHlTdHJpbmcoXG4gICAgICBjaGF0RGV0YWlscy5jb250YWN0SWQsXG4gICAgICBcImNoYXREZXRhaWxzLmNvbnRhY3RJZFwiXG4gICAgKTtcbiAgICBVdGlscy5hc3NlcnRJc05vbkVtcHR5U3RyaW5nKFxuICAgICAgY2hhdERldGFpbHMucGFydGljaXBhbnRJZCxcbiAgICAgIFwiY2hhdERldGFpbHMucGFydGljaXBhbnRJZFwiXG4gICAgKTtcbiAgICBpZiAoY2hhdERldGFpbHMuY29ubmVjdGlvbkRldGFpbHMpIHtcbiAgICAgIFV0aWxzLmFzc2VydElzT2JqZWN0KFxuICAgICAgICBjaGF0RGV0YWlscy5jb25uZWN0aW9uRGV0YWlscyxcbiAgICAgICAgXCJjaGF0RGV0YWlscy5jb25uZWN0aW9uRGV0YWlsc1wiXG4gICAgICApO1xuICAgICAgVXRpbHMuYXNzZXJ0SXNOb25FbXB0eVN0cmluZyhcbiAgICAgICAgY2hhdERldGFpbHMuY29ubmVjdGlvbkRldGFpbHMuUHJlU2lnbmVkQ29ubmVjdGlvblVybCxcbiAgICAgICAgXCJjaGF0RGV0YWlscy5jb25uZWN0aW9uRGV0YWlscy5QcmVTaWduZWRDb25uZWN0aW9uVXJsXCJcbiAgICAgICk7XG4gICAgICBVdGlscy5hc3NlcnRJc05vbkVtcHR5U3RyaW5nKFxuICAgICAgICBjaGF0RGV0YWlscy5jb25uZWN0aW9uRGV0YWlscy5Db25uZWN0aW9uSWQsXG4gICAgICAgIFwiY2hhdERldGFpbHMuY29ubmVjdGlvbkRldGFpbHMuQ29ubmVjdGlvbklkXCJcbiAgICAgICk7XG4gICAgICBVdGlscy5hc3NlcnRJc05vbkVtcHR5U3RyaW5nKFxuICAgICAgICBjaGF0RGV0YWlscy5jb25uZWN0aW9uRGV0YWlscy5jb25uZWN0aW9uVG9rZW4sXG4gICAgICAgIFwiY2hhdERldGFpbHMuY29ubmVjdGlvbkRldGFpbHMuY29ubmVjdGlvblRva2VuXCJcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFV0aWxzLmFzc2VydElzTm9uRW1wdHlTdHJpbmcoXG4gICAgICAgIGNoYXREZXRhaWxzLnBhcnRpY2lwYW50VG9rZW4sXG4gICAgICAgIFwiY2hhdERldGFpbHMucGFydGljaXBhbnRUb2tlblwiXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlSW5pdGlhdGVDaGF0UmVzcG9uc2UoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IHsgQ2hhdFNlcnZpY2VBcmdzVmFsaWRhdG9yIH07XG4iLCJpbXBvcnQge1xuICBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24sXG4gIFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb25cbn0gZnJvbSBcIi4vZXhjZXB0aW9uc1wiO1xuXG5pbXBvcnQgUGFobyBmcm9tIFwiLi4vcGFoby1tcXR0XCI7XG5cbmNsYXNzIENoYXRDb25uZWN0aW9uTWFuYWdlciB7XG4gIGNyZWF0ZU5ld01xdHRDb25uZWN0aW9uUHJvdmlkZXIoY29ubmVjdGlvbkFyZ3MsIHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJQYWhvTXF0dENvbm5lY3Rpb25cIjpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY29ubmVjdGlvbkFyZ3MuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgICAgICByZXR1cm4gbmV3IFBhaG9NcXR0Q29ubmVjdGlvbihjb25uZWN0aW9uQXJncyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oXG4gICAgICBcInR5cGUgaW4gQ2hhdENvbm5lY3Rpb25NYW5hZ2VyLmNyZWF0ZU5ld01xdHRDb25uZWN0aW9uUHJvdmlkZXJcIixcbiAgICAgIHR5cGVcbiAgICApO1xuICB9XG59XG5cbi8vIFdoYXQgaXMgdGhlIGV4cGVjdGF0aW9uIGZyb20gdGhpcyBjbGFzcz9cbi8vIFRoaXMgc2hvdWxkIHByb3ZpZGUgYW4gaW50ZXJmYWNlIGZvciBjb25uZWN0aW5nICsgc3Vic2NyaWJpbmcgJiYgZGlzY29ubmVjdGluZyArIHVuc3Vic2NyaWJpbmcgdG8gZW5kcG9pbnQgKyB0b3BpYy5cbi8vIFRoaXMgY2xhc3Mgc2hvdWxkIGNhbGwgYmFja1xuLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG5jbGFzcyBNUVRUQ2xpZW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSBjb25uZWN0aW9uT3B0aW9ucyAob2JqZWN0KSAtXG4gICAqICAgICAgY29ubmVjdE9wdGlvbnMudXNlU1NMIC0gaWYgcHJlc2VudCBhbmQgdHJ1ZSwgdXNlIGFuIFNTTCBXZWJzb2NrZXQgY29ubmVjdGlvbi5cbiAgICogICAgICBjb25uZWN0T3B0aW9ucy5rZWVwQWxpdmVJbnRlcnZhbCAtIHRoZSBzZXJ2ZXIgZGlzY29ubmVjdHMgdGhpcyBjbGllbnQgaWYgdGhlcmUgaXMgbm8gYWN0aXZpdHkgZm9yIHRoaXMgbnVtYmVyIG9mIHNlY29uZHMuXG4gICAqICAgICAgY29ubmVjdE9wdGlvbnMucmVjb25uZWN0IC0gU2V0cyB3aGV0aGVyIHRoZSBjbGllbnQgd2lsbCBhdXRvbWF0aWNhbGx5IGF0dGVtcHQgdG8gcmVjb25uZWN0XG4gICAqICAgICAgY29ubmVjdE9wdGlvbnMubXF0dFZlcnNpb24gLSBUaGUgdmVyc2lvbiBvZiBNUVRUIHRvIHVzZSB0byBjb25uZWN0IHRvIHRoZSBNUVRUIEJyb2tlci5cbiAgICogICAgICBjb25uZWN0T3B0aW9ucy50aW1lb3V0IC0gSWYgdGhlIGNvbm5lY3QgaGFzIG5vdCBzdWNjZWVkZWQgd2l0aGluIHRoaXMgbnVtYmVyIG9mIHNlY29uZHMsIGl0IGlzIGRlZW1lZCB0byBoYXZlIGZhaWxlZC5cbiAgICpcbiAgICogQHJldHVybnMgYSBQcm9taXNlIG9iamVjdCAtXG4gICAqICAgICAgcmVzcG9uc2UgPSB7fVxuICAgKiAgICAgIGVycm9yID0ge1wicmVhc29uXCI6IHt9IC8vIEltcGxlbWVudGF0aW9uIHNwZWNpZmljXG4gICAqICAgICAgICAgIH1cbiAgICovXG4gIGNvbm5lY3QoY29ubmVjdE9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgVW5JbXBsZW1lbnRlZE1ldGhvZEV4Y2VwdGlvbihcImNvbm5lY3QgaW4gSW90Q2xpZW50XCIpO1xuICB9XG5cbiAgZGlzY29ubmVjdCgpIHtcbiAgICB0aHJvdyBuZXcgVW5JbXBsZW1lbnRlZE1ldGhvZEV4Y2VwdGlvbihcImNvbm5lY3QgaW4gSW90Q2xpZW50XCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBzdWJzY3JpYmVPcHRpb25zIChvYmplY3QpIC1cbiAgICogICAgICBzdWJzY3JpYmVPcHRpb25zLnFvcyAtIHRoZSBtYWl4aW11bSBxb3Mgb2YgYW55IHB1YmxpY2F0aW9ucyBzZW50IGFzIGEgcmVzdWx0IG9mIG1ha2luZyB0aGlzIHN1YnNjcmlwdGlvbi5cbiAgICogICAgICBjb25uZWN0T3B0aW9ucy50aW1lb3V0IC0gd2hpY2gsIGlmIHByZXNlbnQsIGRldGVybWluZXMgdGhlIG51bWJlciBvZiBzZWNvbmRzIGFmdGVyIHdoaWNoIHRoZSBvbkZhaWx1cmUgY2FsYmFjayBpcyBjYWxsZWQuXG4gICAqICAgICAgICAgIFRoZSBwcmVzZW5jZSBvZiBhIHRpbWVvdXQgZG9lcyBub3QgcHJldmVudCB0aGUgb25TdWNjZXNzIGNhbGxiYWNrIGZyb20gYmVpbmcgY2FsbGVkIHdoZW4gdGhlIHN1YnNjcmliZSBjb21wbGV0ZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSBvYmplY3QgLVxuICAgKiAgICAgIHJlc3BvbnNlID0ge1widG9waWNcIjogPHN0cmluZz4sXG4gICAqICAgICAgICAgICAgICAgICAgXCJxb3NcIjogcW9zLFxuICAgKiAgICAgIH1cbiAgICogICAgICBlcnJvciA9IHtcInRvcGljXCI6IDxzdHJpbmc+LFxuICAgKiAgICAgICAgICBcImVycm9yXCI6IHt9IC8vIEltcGxlbWVudGF0aW9uIHNwZWNpZmljXG4gICAqICAgICAgfVxuICAgKi9cbiAgc3Vic2NyaWJlKHRvcGljLCBzdWJzY3JpYmVPcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24oXCJjb25uZWN0IGluIElvdENsaWVudFwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gc3Vic2NyaWJlT3B0aW9ucyAob2JqZWN0KSAtXG4gICAqICAgICAgY29ubmVjdE9wdGlvbnMudGltZW91dCAtIHdoaWNoLCBpZiBwcmVzZW50LCBkZXRlcm1pbmVzIHRoZSBudW1iZXIgb2Ygc2Vjb25kcyBhZnRlciB3aGljaCB0aGUgb25GYWlsdXJlIGNhbGxiYWNrIGlzIGNhbGxlZC5cbiAgICogICAgICAgICAgVGhlIHByZXNlbmNlIG9mIGEgdGltZW91dCBkb2VzIG5vdCBwcmV2ZW50IHRoZSBvblN1Y2Nlc3MgY2FsbGJhY2sgZnJvbSBiZWluZyBjYWxsZWQgd2hlbiB0aGUgdW5zdWJzY3JpYmUgY29tcGxldGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyBhIFByb21pc2Ugb2JqZWN0IC1cbiAgICogICAgICByZXNwb25zZSA9IHtcInRvcGljXCI6IDxzdHJpbmc+LFxuICAgKiAgICAgICAgICAgICAgICAgIFwicW9zXCI6IHFvcyxcbiAgICogICAgICB9XG4gICAqICAgICAgZXJyb3IgPSB7XCJ0b3BpY1wiOiA8c3RyaW5nPixcbiAgICogICAgICAgICAgXCJlcnJvclwiOiB7fSAvLyBJbXBsZW1lbnRhdGlvbiBzcGVjaWZpY1xuICAgKiAgICAgIH1cbiAgICpcbiAgICovXG4gIHVuc3Vic2NyaWJlKHRvcGljLCB1bnN1YnNjcmliZU9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgVW5JbXBsZW1lbnRlZE1ldGhvZEV4Y2VwdGlvbihcImNvbm5lY3QgaW4gSW90Q2xpZW50XCIpO1xuICB9XG59XG4vKmVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMqL1xuXG52YXIgTXF0dENvbm5lY3Rpb25TdGF0dXMgPSBPYmplY3QuZnJlZXplKHtcbiAgTmV2ZXJDb25uZWN0ZWQ6IFwiTmV2ZXJDb25uZWN0ZWRcIixcbiAgQ29ubmVjdGluZzogXCJDb25uZWN0aW5nXCIsXG4gIENvbm5lY3RlZDogXCJDb25uZWN0ZWRcIixcbiAgRGlzY29ubmVjdGVkOiBcIkRpc2Nvbm5lY3RlZFwiXG59KTtcblxudmFyIE1xdHRFdmVudHMgPSBPYmplY3QuZnJlZXplKHtcbiAgTUVTU0FHRTogXCJNZXNzYWdlXCIsIC8vIHRvcGljLCBxb3MsIHBheWxvYWRTdHJpbmdcbiAgRElTQ09OTkVDVEVEOiBcIkRpc2Nvbm5lY3RlZFwiLCAvLyByZWFzb246IHBhaG9PYmplY3QvIFwiVGltZU91dEluUmVjb25uZWN0XCJcbn0pOyAvLyB7fVxuXG5jbGFzcyBQYWhvTXF0dENvbm5lY3Rpb24gZXh0ZW5kcyBNUVRUQ2xpZW50IHtcbiAgY29uc3RydWN0b3IoYXJncykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5wcmVTaWduZWRVcmwgPSBhcmdzLnByZVNpZ25lZFVybDtcbiAgICB0aGlzLmNvbm5lY3Rpb25JZCA9IGFyZ3MuY29ubmVjdGlvbklkO1xuICAgIHRoaXMuc3RhdHVzID0gTXF0dENvbm5lY3Rpb25TdGF0dXMuTmV2ZXJDb25uZWN0ZWQ7XG4gICAgdGhpcy5wYWhvQ2xpZW50ID0gbmV3IFBhaG8uQ2xpZW50KHRoaXMucHJlU2lnbmVkVXJsLCB0aGlzLmNvbm5lY3Rpb25JZCk7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMucGFob0NsaWVudC5vbk1lc3NhZ2VBcnJpdmVkID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgc2VsZi5fbWVzc2FnZUFycml2ZWRDYWxsYmFjayhtZXNzYWdlKTtcbiAgICB9O1xuICAgIHRoaXMucGFob0NsaWVudC5vbkNvbm5lY3Rpb25Mb3N0ID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgc2VsZi5fY29ubmVjdGlvbkxvc3RDYWxsQmFjayhkYXRhKTtcbiAgICB9O1xuICAgIHRoaXMucGFob0NsaWVudC5vbk1lc3NhZ2VBcnJpdmVkID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgc2VsZi5fbWVzc2FnZUFycml2ZWRDYWxsYmFjayhtZXNzYWdlKTtcbiAgICB9O1xuICAgIHRoaXMuY2FsbGJhY2sgPSBhcmdzLmNhbGxiYWNrO1xuICAgIHRoaXMubmV2ZXJDb25uZWN0ZWQgPSB0cnVlO1xuICAgIHRoaXMuX3N1YnNjcmliZWRUb3BpY3MgPSBbXTtcbiAgfVxuXG4gIGNvbm5lY3QoY29ubmVjdE9wdGlvbnMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgY29ubmVjdE9wdGlvbnMub25TdWNjZXNzID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgc2VsZi5uZXZlckNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICBzZWxmLl9vbkNvbm5lY3RTdWNjZXNzKHJlc3BvbnNlKTtcbiAgICAgICAgcmVzb2x2ZSh7fSk7XG4gICAgICB9O1xuICAgICAgY29ubmVjdE9wdGlvbnMub25GYWlsdXJlID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgdmFyIGVycm9yRGV0YWlscyA9IHtcbiAgICAgICAgICByZWFzb246IGVycm9yXG4gICAgICAgIH07XG4gICAgICAgIHNlbGYuX29uQ29ubmVjdEZhaWx1cmUoZXJyb3JEZXRhaWxzKTtcbiAgICAgICAgcmVqZWN0KGVycm9yRGV0YWlscyk7XG4gICAgICB9O1xuICAgICAgc2VsZi5zdGF0dXMgPSBNcXR0Q29ubmVjdGlvblN0YXR1cy5Db25uZWN0aW5nO1xuICAgICAgc2VsZi5wYWhvQ2xpZW50LmNvbm5lY3QoY29ubmVjdE9wdGlvbnMpO1xuICAgIH0pO1xuICB9XG5cbiAgX2Nvbm5lY3Rpb25Mb3N0Q2FsbEJhY2soZXJyb3IpIHtcbiAgICB2YXIgZGF0YSA9IHtcbiAgICAgIHJlYXNvbjogZXJyb3JcbiAgICB9O1xuICAgIHRoaXMuX3N1YnNjcmliZWRUb3BpY3MgPSBbXTtcbiAgICBpZiAodGhpcy5zdGF0dXMgPT09IE1xdHRDb25uZWN0aW9uU3RhdHVzLkRpc2Nvbm5lY3RlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnN0YXR1cyA9IE1xdHRDb25uZWN0aW9uU3RhdHVzLkRpc2Nvbm5lY3RlZDtcbiAgICB0aGlzLmNhbGxiYWNrKE1xdHRFdmVudHMuRElTQ09OTkVDVEVELCBkYXRhKTtcbiAgfVxuXG4gIF9tZXNzYWdlQXJyaXZlZENhbGxiYWNrKG1lc3NhZ2UpIHtcbiAgICB2YXIgaW5jb21pbmdNZXNzYWdlID0ge1xuICAgICAgdG9waWM6IG1lc3NhZ2UudG9waWMsXG4gICAgICBxb3M6IG1lc3NhZ2UucW9zLFxuICAgICAgcGF5bG9hZFN0cmluZzogbWVzc2FnZS5wYXlsb2FkU3RyaW5nXG4gICAgfTtcbiAgICB0aGlzLmNhbGxiYWNrKE1xdHRFdmVudHMuTUVTU0FHRSwgaW5jb21pbmdNZXNzYWdlKTtcbiAgfVxuXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMqL1xuICBfb25Db25uZWN0U3VjY2VzcyhyZXNwb25zZSkge1xuICAgIC8qZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyovXG4gICAgdGhpcy5zdGF0dXMgPSBNcXR0Q29ubmVjdGlvblN0YXR1cy5Db25uZWN0ZWQ7XG4gIH1cblxuICAvKmVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzKi9cbiAgX29uQ29ubmVjdEZhaWx1cmUoZXJyb3IpIHtcbiAgICAvKmVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMqL1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAoc2VsZi5uZXZlckNvbm5lY3RlZCkge1xuICAgICAgc2VsZi5zdGF0dXMgPSBNcXR0Q29ubmVjdGlvblN0YXR1cy5OZXZlckNvbm5lY3RlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5zdGF0dXMgPSBNcXR0Q29ubmVjdGlvblN0YXR1cy5EaXNjb25uZWN0ZWQ7XG4gICAgfVxuICB9XG5cbiAgZGlzY29ubmVjdCgpIHtcbiAgICB0aGlzLl9zdWJzY3JpYmVkVG9waWNzID0gW107XG4gICAgdGhpcy5zdGF0dXMgPSBNcXR0Q29ubmVjdGlvblN0YXR1cy5EaXNjb25uZWN0ZWQ7XG4gICAgdGhpcy5wYWhvQ2xpZW50LmRpc2Nvbm5lY3QoKTtcbiAgfVxuXG4gIHN1YnNjcmliZSh0b3BpYywgc3Vic2NyaWJlT3B0aW9ucykge1xuICAgIC8vIHNob3VsZCB3ZSBjaGVjayBpZiB0aGlzIHRvcGljIGlzIGFscmVhZHkgc3Vic2NyaWJlZD9cbiAgICAvLyBOTywgbGVhdmUgdGhpcyBiZWhhdmlvdXIgdG8gUEFITyAtIHdoYXRldmVyIFBBSE8gZG9lc1xuICAgIC8vIGluIGNhc2Ugb2YgZHVwbGljYXRlIHN1YnNjcmliZSAtIHdlIHdpbGwgZm9sbG93IHRoZSBzYW1lLlxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBzdWJzY3JpYmVPcHRpb25zLm9uU3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIHNlbGYuX3N1YnNjcmliZVN1Y2Nlc3ModG9waWMsIHJlc3BvbnNlKTtcbiAgICAgICAgdmFyIHJlc3BvbnNlT2JqZWN0ID0ge1xuICAgICAgICAgIHRvcGljOiB0b3BpYyxcbiAgICAgICAgICBxb3M6IHJlc3BvbnNlLmdyYW50ZWRRb3NcbiAgICAgICAgfTtcbiAgICAgICAgcmVzb2x2ZShyZXNwb25zZU9iamVjdCk7XG4gICAgICB9O1xuICAgICAgc3Vic2NyaWJlT3B0aW9ucy5vbkZhaWx1cmUgPSBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICB2YXIgZXJyb3JPYmplY3QgPSB7XG4gICAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICB9O1xuICAgICAgICByZWplY3QoZXJyb3JPYmplY3QpO1xuICAgICAgfTtcbiAgICAgIHNlbGYucGFob0NsaWVudC5zdWJzY3JpYmUodG9waWMsIHN1YnNjcmliZU9wdGlvbnMpO1xuICAgIH0pO1xuICB9XG5cbiAgX2FkZFRvVG9waWNzKHRvcGljKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmIChzZWxmLl9zdWJzY3JpYmVkVG9waWNzLmluZGV4T2YodG9waWMpID49IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2VsZi5fc3Vic2NyaWJlZFRvcGljcy5wdXNoKHRvcGljKTtcbiAgfVxuXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMqL1xuICBfc3Vic2NyaWJlU3VjY2Vzcyh0b3BpYywgcmVzcG9uc2UpIHtcbiAgICAvKmVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMqL1xuICAgIHRoaXMuX2FkZFRvVG9waWNzKHRvcGljKTtcbiAgfVxuXG4gIGdldFN1YnNjcmliZWRUb3BpY3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZWRUb3BpY3Muc2xpY2UoMCk7XG4gIH1cblxuICB1bnN1YnNjcmliZSh0b3BpYywgdW5zdWJzY3JpYmVPcHRpb25zKSB7XG4gICAgLy8gc2hvdWxkIHdlIGNoZWNrIGlmIHRoaXMgdG9waWMgaXMgZXZlbiBzdWJzY3JpYmVkP1xuICAgIC8vIE5PLCBsZWF2ZSB0aGlzIGJlaGF2aW91ciB0byBQQUhPIC0gd2hhdGV2ZXIgUEFITyBkb2VzXG4gICAgLy8gaW4gY2FzZSBvZiB1bnN1YnNjcmliZSBvZiB0b3BpY3Mgbm90IGV2ZW50IHN1YnNjcmliZWRcbiAgICAvLyAtIHdlIHdpbGwgZm9sbG93IHRoZSBzYW1lLlxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB1bnN1YnNjcmliZU9wdGlvbnMub25TdWNjZXNzID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIHJlc3BvbnNlT2JqZWN0ID0ge1xuICAgICAgICAgIHRvcGljOiB0b3BpYyxcbiAgICAgICAgICByZXNwb25zZTogcmVzcG9uc2VcbiAgICAgICAgfTtcbiAgICAgICAgc2VsZi5fdW5zdWJzY3JpYmVTdWNjZXNzKHRvcGljLCByZXNwb25zZU9iamVjdCk7XG4gICAgICAgIHJlc29sdmUocmVzcG9uc2VPYmplY3QpO1xuICAgICAgfTtcbiAgICAgIHVuc3Vic2NyaWJlT3B0aW9ucy5vbkZhaWx1cmUgPSBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICB2YXIgZXJyb3JPYmplY3QgPSB7XG4gICAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICB9O1xuICAgICAgICByZWplY3QoZXJyb3JPYmplY3QpO1xuICAgICAgfTtcbiAgICAgIHNlbGYucGFob0NsaWVudC51bnN1YnNjcmliZSh0b3BpYywgdW5zdWJzY3JpYmVPcHRpb25zKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMqL1xuICBfdW5zdWJzY3JpYmVTdWNjZXNzKHRvcGljLCByZXNwb25zZSkge1xuICAgIC8qZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyovXG4gICAgdGhpcy5fc3Vic2NyaWJlZFRvcGljcyA9IHRoaXMuX3N1YnNjcmliZWRUb3BpY3MuZmlsdGVyKHQgPT4gdCAhPT0gdG9waWMpO1xuICB9XG5cbiAgZ2V0U3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXR1cztcbiAgfVxufVxuXG5leHBvcnQgeyBDaGF0Q29ubmVjdGlvbk1hbmFnZXIsIE1xdHRFdmVudHMsIE1xdHRDb25uZWN0aW9uU3RhdHVzLCBNUVRUQ2xpZW50IH07XG4iLCJpbXBvcnQge1xuICBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uLFxuICBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24sXG4gIElsbGVnYWxTdGF0ZUV4Y2VwdGlvblxufSBmcm9tIFwiLi9leGNlcHRpb25zXCI7XG5pbXBvcnQgeyBNcXR0Q29ubmVjdGlvblN0YXR1cywgTXF0dEV2ZW50cyB9IGZyb20gXCIuL2Nvbm5lY3Rpb25NYW5hZ2VyXCI7XG5pbXBvcnQgeyBNUVRUX0NPTlNUQU5UUyB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IExvZ01hbmFnZXIgfSBmcm9tIFwiLi4vbG9nXCI7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpcyB1c2VkIGZvciBlc3RhYmxpc2hpbmcgYSBjb25uZWN0aW9uIGZvciB0aGUgY2hhdC5cbiAqIFRoZSBvYmplY3Qgb2YgdGhpcyBjbGFzcyBjYW4gb25seSBiZSBzdGFydGVkIG9uY2UgYW5kIGNhbiBvbmx5IGJlIGNsb3NlZCBvbmNlLlxuICogSWYgdGhlIGNvbm5lY3Rpb24gZmFpbHMgdG8gZXN0YWJsaXNoLCBvciBpZiBpdCBlbmRzIGFicnVwdGx5IGR1ZSB0b1xuICogIGRvd25zdHJlYW0gaXNzdWVzLCBvciBpdCBpcyBlbmRlZCBleHBsaWNpdGx5IGJ5IGNhbGxpbmcgZW5kKClcbiAqICB0aGVuIHRoaXMgb2JqZWN0IGNhbiBubyBsb25nZXIgYmUgdXNlZC4gQSBuZXcgb2JqZWN0IG11c3QgYmUgY3JlYXRlZCB0byBjYWxsIHN0YXJ0IGFnYWluLlxuICogc3RhcnQoKSBhdHRlbXB0cyB0byBzdGFydCBhIGNvbm5lY3Rpb24uXG4gKi9cbi8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMqL1xuY2xhc3MgQ29ubmVjdGlvbkhlbHBlciB7XG4gIC8qKlxuICAgKiAgIHJldHVybnMgUHJvbWlzZSBvYmplY3Qgd2l0aFxuICAgKiAgICAgICByZXNwb25zZSA9IHtcbiAgICogICAgICAgICBjb25uZWN0U3VjY2VzczogdHJ1ZSxcbiAgICogICAgICAgICBkZXRhaWxzOiB7fSAvLyBJbXBsZW1lbnRhdGlvbiBzcGVjaWZpY1xuICAgKiAgICAgICB9O1xuICAgKiAgICAgICBlcnJvciA9IHtcbiAgICogICAgICAgICBjb25uZWN0U3VjY2VzczogZmFsc2UsXG4gICAqICAgICAgICAgcmVhc29uOiBcIlwiIC8vIEltcGxlbWVudGF0aW9uIHNwZWNpZmljXG4gICAqICAgICAgICAgZGV0YWlsczoge30gLy8gSW1wbGVtZW50YXRpb24gc3BlY2lmaWNcbiAgICogICAgICAgfTtcbiAgICovXG4gIHN0YXJ0KGFyZ3MpIHtcbiAgICB0aHJvdyBuZXcgVW5JbXBsZW1lbnRlZE1ldGhvZEV4Y2VwdGlvbihcInN0YXJ0IGluIENvbm5lY3Rpb25IZWxwZXJcIik7XG4gIH1cblxuICBlbmQoKSB7XG4gICAgdGhyb3cgbmV3IFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24oXCJlbmQgaW4gQ29ubmVjdGlvbkhlbHBlclwiKTtcbiAgfVxufVxuLyplc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzKi9cblxudmFyIENvbm5lY3Rpb25IZWxwZXJTdGF0dXMgPSB7XG4gIE5ldmVyU3RhcnRlZDogXCJOZXZlclN0YXJ0ZWRcIixcbiAgU3RhcnRpbmc6IFwiU3RhcnRpbmdcIixcbiAgQ29ubmVjdGVkOiBcIkNvbm5lY3RlZFwiLFxuICBFbmRlZDogXCJFbmRlZFwiXG59O1xuXG52YXIgQ29ubmVjdGlvbkhlbHBlckV2ZW50cyA9IHtcbiAgRW5kZWQ6IFwiRW5kZWRcIiwgLy8gZXZlbnQgZGF0YSBpczoge3JlYXNvbjogLi4ufVxuICBJbmNvbWluZ01lc3NhZ2U6IFwiSW5jb21pbmdNZXNzYWdlXCIgLy8gZXZlbnQgZGF0YSBpczoge3BheWxvYWRTdHJpbmc6IC4uLn1cbn07XG5cbi8qXG5UaGlzIGltcGxlbWVudGF0aW9uIGFzc3VtZXMgdGhhdCBpdCBoYXMgaXRzIG93biBNUVRUIGNsaWVudCBcbndoaWNoIGhhcyBuZXZlciBiZWVuIGNvbm5lY3RlZCBhbmQgd2lsbCBub3QgYmUgc2hhcmVkIHdpdGggYW55b25lLlxuKi9cbi8vIFRPRE8gLSBiZWxvdyBjYW4gYmUgY2hhbmdlZCB3aXRoIFByb21pc2UgQ2hhaW5pbmcuXG5jbGFzcyBTb2xvQ2hhdENvbm5lY3Rpb25NcXR0SGVscGVyIGV4dGVuZHMgQ29ubmVjdGlvbkhlbHBlciB7XG4gIGNvbnN0cnVjdG9yKGFyZ3MpIHtcbiAgICBzdXBlcigpO1xuICAgIHZhciBwcmVmaXggPSBcIkNvbnRhY3RJZC1cIiArIGFyZ3MuY29udGFjdElkICsgXCI6IFwiO1xuICAgIHRoaXMubG9nZ2VyID0gTG9nTWFuYWdlci5nZXRMb2dnZXIoe1xuICAgICAgcHJlZml4OiBwcmVmaXhcbiAgICB9KTtcbiAgICB0aGlzLnByZVNpZ25lZFVybCA9IGFyZ3MuY29ubmVjdGlvbkRldGFpbHMucHJlU2lnbmVkVXJsO1xuICAgIHRoaXMudG9waWMgPSBhcmdzLmNvbm5lY3Rpb25EZXRhaWxzLmNvbm5lY3Rpb25JZDtcbiAgICB0aGlzLmNvbnNpZGVyUGFydGljaXBhbnRBc0Rpc2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMuaW90Q29ubmVjdGlvbiA9IGFyZ3MubXF0dENvbm5lY3Rpb25Qcm92aWRlcigoZXZlbnRUeXBlLCBldmVudERhdGEpID0+XG4gICAgICB0aGlzLl9oYW5kbGVJb3RFdmVudChldmVudFR5cGUsIGV2ZW50RGF0YSlcbiAgICApO1xuICAgIGlmIChcbiAgICAgIHRoaXMuaW90Q29ubmVjdGlvbi5nZXRTdGF0dXMoKSAhPT0gTXF0dENvbm5lY3Rpb25TdGF0dXMuTmV2ZXJDb25uZWN0ZWRcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oXG4gICAgICAgIFwiaW90Q29ubmVjdGlvbiBpcyBleHBlY3RlZCB0byBiZSBpbiBOZXZlckNvbm5lY3RlZCBzdGF0ZSBidXQgaXMgbm90XCJcbiAgICAgICkoKTtcbiAgICB9XG4gICAgdGhpcy5jaGF0Q29udHJvbGxlckNhbGxiYWNrID0gYXJncy5jYWxsYmFjaztcbiAgICB0aGlzLnN0YXR1cyA9IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuTmV2ZXJTdGFydGVkO1xuICB9XG5cbiAgLy8gQWRkIGFueSBmdW5jdGlvbmFsaXR5IHRoYXQgeW91IHdhbnQgdGhpcyB0byBkbyxcbiAgLy8gaWYgdGhlIHBhcnRpY2lwYW50IGlzIHRvIGJlIGNvbnNpZGVyZWQgYXMgZGlzY29ubmVjdGVkLlxuICAvLyBkaXNjb25uZWN0IGhlcmUgbWVhbnMgdGhhdCB0aGUgcGFydGljaXBhbnQgaXMgbm8gbG9uZ2VyIHBhcnQgb2YgdGhlciBjaGF0LlxuICAvLyBpdCBpcyBpbmRlcGVuZGVudCBvZiB0aGUgYWN0dWFsIHdlYnNvY2tldCBjb25uZWN0aW9uIGJlaW5nIGNvbm5lY3RlZCBvciBub3QuXG4gIC8vIHBhcnRpY2lwYW50IGNhbiBubyBsb25nZXIgc2VuZCBhbmQgcmVjaWV2ZSBtZXNzYWdlcyB0byB0aGUgYmFja2VuZC5cbiAgY2xlYW5VcE9uUGFydGljaXBhbnREaXNjb25uZWN0KCkge1xuICAgIC8vIFJpZ2h0IG5vdywgbm90aGluZyBkZXBlbmRzIG9uIHRoaXMgZmllbGQuXG4gICAgLy8gSG93ZXZlciBpbiBmdXR1cmUgd2UgbWlnaHQgcHJldmVudCByZXRpcmVzIG9uIGNvbm5lY3Rpb24gaWYgdGhpcyBmaWVsZCBpcyBzZXQgdG8gdHJ1ZS5cbiAgICB0aGlzLmNvbnNpZGVyUGFydGljaXBhbnRBc0Rpc2Nvbm5lY3RlZCA9IHRydWU7XG4gIH1cblxuICBzdGFydCgpIHtcbiAgICBpZiAodGhpcy5zdGF0dXMgIT09IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuTmV2ZXJTdGFydGVkKSB7XG4gICAgICB0aHJvdyBuZXcgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKFwiQ29ubmVjdGlvbiBoZWxwZXIgc3RhcnRlZCB0d2ljZSEhXCIpO1xuICAgIH1cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5zdGF0dXMgPSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLlN0YXJ0aW5nO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShzZWxmLl9jcmVhdGVTdGFydFByb21pc2UoKSk7XG4gIH1cblxuICBfY3JlYXRlU3RhcnRQcm9taXNlKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gZnVuY3Rpb24ocmVzb3ZsZSwgcmVqZWN0KSB7XG4gICAgICBzZWxmLl9jb25uZWN0KHJlc292bGUsIHJlamVjdCk7XG4gICAgfTtcbiAgfVxuXG4gIF9jb25uZWN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgY29ubmVjdE9wdGlvbnMgPSB7XG4gICAgICB1c2VTU0w6IHRydWUsXG4gICAgICBrZWVwQWxpdmVJbnRlcnZhbDogTVFUVF9DT05TVEFOVFMuS0VFUF9BTElWRSxcbiAgICAgIHJlY29ubmVjdDogZmFsc2UsXG4gICAgICBtcXR0VmVyc2lvbjogNCxcbiAgICAgIHRpbWVvdXQ6IE1RVFRfQ09OU1RBTlRTLkNPTk5FQ1RfVElNRU9VVFxuICAgIH07XG4gICAgc2VsZi5pb3RDb25uZWN0aW9uXG4gICAgICAuY29ubmVjdChjb25uZWN0T3B0aW9ucylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIHNlbGYuX3Bvc3RDb25uZWN0KHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBzZWxmLl9jb25uZWN0RmFpbGVkKHJlamVjdCwgZXJyb3IpO1xuICAgICAgfSk7XG4gIH1cblxuICBfcG9zdENvbm5lY3QocmVzb2x2ZSwgcmVqZWN0LCBjb25uZWN0UmVzcG9uc2UpIHtcbiAgICB0aGlzLl9zdWJzY3JpYmUocmVzb2x2ZSwgcmVqZWN0LCBjb25uZWN0UmVzcG9uc2UpO1xuICB9XG5cbiAgX2Nvbm5lY3RGYWlsZWQocmVqZWN0LCBjb25uZWN0RXJyb3IpIHtcbiAgICB2YXIgZXJyb3IgPSB7XG4gICAgICBjb25uZWN0U3VjY2VzczogZmFsc2UsXG4gICAgICByZWFzb246IFwiQ29ubmVjdGlvblRvQnJva2VyRmFpbGVkXCIsXG4gICAgICBkZXRhaWxzOiBjb25uZWN0RXJyb3JcbiAgICB9O1xuICAgIHRoaXMuc3RhdHVzID0gQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5FbmRlZDtcbiAgICByZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG4gIF9zdWJzY3JpYmUocmVzb2x2ZSwgcmVqZWN0LCBjb25uZWN0UmVzcG9uc2UpIHtcbiAgICAvKmVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMqL1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgc3Vic2NyaWJlT3B0aW9ucyA9IHtcbiAgICAgIHFvczogMVxuICAgIH07XG4gICAgc2VsZi5pb3RDb25uZWN0aW9uXG4gICAgICAuc3Vic2NyaWJlKHNlbGYudG9waWMsIHN1YnNjcmliZU9wdGlvbnMpXG4gICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICBzZWxmLl9wb3N0U3Vic2NyaWJlKHJlc29sdmUsIHJlc3BvbnNlKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgc2VsZi5fc3Vic2NyaWJlRmFpbGVkKHJlamVjdCwgZXJyb3IpO1xuICAgICAgfSk7XG4gIH1cblxuICBfcG9zdFN1YnNjcmliZShyZXNvbHZlLCBzdWJzY3JpYmVSZXNwb25zZSkge1xuICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgIGRldGFpbHM6IHN1YnNjcmliZVJlc3BvbnNlLFxuICAgICAgY29ubmVjdFN1Y2Nlc3M6IHRydWVcbiAgICB9O1xuICAgIHRoaXMuc3RhdHVzID0gQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5Db25uZWN0ZWQ7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH1cblxuICBfc3Vic2NyaWJlRmFpbGVkKHJlamVjdCwgc3Vic2NyaWJlRXJyb3IpIHtcbiAgICB2YXIgZXJyb3IgPSB7XG4gICAgICBjb25uZWN0U3VjY2VzczogZmFsc2UsXG4gICAgICBkZXRhaWxzOiBzdWJzY3JpYmVFcnJvcixcbiAgICAgIHJlYXNvbjogXCJTdWJzY3JpYnRpb25Ub1RvcGljRmFpbGVkXCJcbiAgICB9O1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLnN0YXR1cyA9IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuRW5kZWQ7XG4gICAgc2VsZi5pb3RDb25uZWN0aW9uLmRpc2Nvbm5lY3QoKTtcbiAgICByZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgX2hhbmRsZUlvdEV2ZW50KGV2ZW50VHlwZSwgZXZlbnREYXRhKSB7XG4gICAgc3dpdGNoIChldmVudFR5cGUpIHtcbiAgICAgIGNhc2UgTXF0dEV2ZW50cy5NRVNTQUdFOlxuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcIlJlY2VpdmVkIGluY29taW5nIGRhdGFcIiwgZXZlbnREYXRhLnBheWxvYWRTdHJpbmcpO1xuICAgICAgICB0aGlzLmNoYXRDb250cm9sbGVyQ2FsbGJhY2soXG4gICAgICAgICAgQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5JbmNvbWluZ01lc3NhZ2UsXG4gICAgICAgICAgZXZlbnREYXRhXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBNcXR0RXZlbnRzLkRJU0NPTk5FQ1RFRDpcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLkVuZGVkO1xuICAgICAgICB0aGlzLmNoYXRDb250cm9sbGVyQ2FsbGJhY2soQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5FbmRlZCwgZXZlbnREYXRhKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZW5kKCkge1xuICAgIHRoaXMuc3RhdHVzID0gQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5FbmRlZDtcbiAgICAvLyBEbyB3ZSBleHBsaWNpdGx5IGhhdmUgdG8gdW5zdWJzY3JpYmUgYmVmb3JlIGRpc2Nvbm5lY3RpbmcgTVFUVD9cbiAgICB0aGlzLmlvdENvbm5lY3Rpb24uZGlzY29ubmVjdCgpO1xuICB9XG5cbiAgZ2V0U3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXR1cztcbiAgfVxufVxuXG5leHBvcnQge1xuICBTb2xvQ2hhdENvbm5lY3Rpb25NcXR0SGVscGVyLFxuICBDb25uZWN0aW9uSGVscGVyRXZlbnRzLFxuICBDb25uZWN0aW9uSGVscGVyU3RhdHVzLFxuICBDb25uZWN0aW9uSGVscGVyXG59O1xuIiwiaW1wb3J0IHsgQ0hBVF9FVkVOVFMgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBDb25uZWN0aW9uSGVscGVyRXZlbnRzIH0gZnJvbSBcIi4vY29ubmVjdGlvbkhlbHBlclwiO1xuXG5cbmNsYXNzIEV2ZW50Q29uc3RydWN0b3Ige1xuICBmcm9tQ29ubmVjdGlvbkhlbHBlckV2ZW50KGV2ZW50VHlwZSwgZXZlbnREYXRhLCBjaGF0RGV0YWlscykge1xuICAgIHZhciBkYXRhID0ge1xuICAgICAgZGF0YTogZXZlbnREYXRhLFxuICAgICAgY2hhdERldGFpbHM6IGNoYXREZXRhaWxzXG4gICAgfTtcbiAgICB2YXIgcmV0dXJuT2JqZWN0ID0ge1xuICAgICAgdHlwZTogbnVsbCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9O1xuICAgIHN3aXRjaCAoZXZlbnRUeXBlKSB7XG4gICAgICBjYXNlIENvbm5lY3Rpb25IZWxwZXJFdmVudHMuRW5kZWQ6XG4gICAgICAgIHJldHVybk9iamVjdC50eXBlID0gQ0hBVF9FVkVOVFMuQ09OTkVDVElPTl9CUk9LRU47XG4gICAgICAgIHJldHVybk9iamVjdC5kYXRhLnJlY29ubmVjdCA9IGV2ZW50RGF0YS5yZWFzb24uZXJyb3JDb2RlICE9PSAwO1xuICAgICAgICByZXR1cm4gcmV0dXJuT2JqZWN0O1xuICAgICAgY2FzZSBDb25uZWN0aW9uSGVscGVyRXZlbnRzLkluY29taW5nTWVzc2FnZTpcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zyb21JbmNvbWluZ0RhdGEoZXZlbnREYXRhLCBjaGF0RGV0YWlscyk7XG4gICAgfVxuICB9XG5cbiAgX2Zyb21JbmNvbWluZ0RhdGEoZXZlbnREYXRhLCBjaGF0RGV0YWlscykge1xuICAgIHZhciBpbmNvbWluZ0RhdGEgPSBKU09OLnBhcnNlKGV2ZW50RGF0YS5wYXlsb2FkU3RyaW5nKTtcbiAgICB2YXIgZGF0YSA9IHtcbiAgICAgIGRhdGE6IGluY29taW5nRGF0YSxcbiAgICAgIGNoYXREZXRhaWxzOiBjaGF0RGV0YWlsc1xuICAgIH07XG4gICAgdmFyIHJldHVybk9iamVjdCA9IHtcbiAgICAgIHR5cGU6IG51bGwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfTtcbiAgICBzd2l0Y2ggKGluY29taW5nRGF0YS5EYXRhLlR5cGUpIHtcbiAgICAgIGNhc2UgXCJUWVBJTkdcIjpcbiAgICAgICAgcmV0dXJuT2JqZWN0LnR5cGUgPSBDSEFUX0VWRU5UUy5JTkNPTUlOR19UWVBJTkc7XG4gICAgICAgIHJldHVybiByZXR1cm5PYmplY3Q7XG4gICAgfVxuICAgIC8vIFRPRE8gdGhpcyBpcyBub3QgcmlnaHQhIFdlIGFyZSByZXR1cm5pbmdcbiAgICAvLyBhIE1FU1NBR0UgZXZlbnQgZXZlbiB0aG91Z2ggdGhpcyBjb3VsZCBiZSBhIGN1c3RvbSBldmVudCxcbiAgICAvLyBzaG91bGQgdGhlcmUgYmUgYW4gZXhoYXVzdGl2ZSBsaXN0IG9mIGV2ZW50cyBsaWtlIFBBUlRJQ0lQQU5UX0pPSU5FRFxuICAgIC8vIHJlY29nbml6ZWQgYXMgTUVTU0FHRT9cbiAgICByZXR1cm5PYmplY3QudHlwZSA9IENIQVRfRVZFTlRTLklOQ09NSU5HX01FU1NBR0U7XG4gICAgcmV0dXJuIHJldHVybk9iamVjdDtcbiAgfVxufVxuXG5leHBvcnQgeyBFdmVudENvbnN0cnVjdG9yIH07XG4iLCJpbXBvcnQgVXRpbHMgZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmNvbnN0IEFMTF9FVkVOVFMgPSBcIjw8YWxsPj5cIjtcblxuLyoqXG4gKiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIGFuIGV2ZW50IHN1YnNjcmlwdGlvbiBpbiBhbiBFdmVudEJ1cy5cbiAqL1xudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKHN1Yk1hcCwgZXZlbnROYW1lLCBmKSB7XG4gIHRoaXMuc3ViTWFwID0gc3ViTWFwO1xuICB0aGlzLmlkID0gVXRpbHMucmFuZG9tSWQoKTtcbiAgdGhpcy5ldmVudE5hbWUgPSBldmVudE5hbWU7XG4gIHRoaXMuZiA9IGY7XG59O1xuXG4vKipcbiAqIFVuc3Vic2NyaWJlIHRoZSBoYW5kbGVyIG9mIHRoaXMgc3Vic2NyaXB0aW9uIGZyb20gdGhlIEV2ZW50QnVzXG4gKiBmcm9tIHdoaWNoIGl0IHdhcyBjcmVhdGVkLlxuICovXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc3ViTWFwLnVuc3Vic2NyaWJlKHRoaXMuZXZlbnROYW1lLCB0aGlzLmlkKTtcbn07XG5cbi8qKlxuICogQSBtYXAgb2YgZXZlbnQgc3Vic2NyaXB0aW9ucywgdXNlZCBieSB0aGUgRXZlbnRCdXMuXG4gKi9cbnZhciBTdWJzY3JpcHRpb25NYXAgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdWJJZE1hcCA9IHt9O1xuICB0aGlzLnN1YkV2ZW50TmFtZU1hcCA9IHt9O1xufTtcblxuLyoqXG4gKiBBZGQgYSBzdWJzY3JpcHRpb24gZm9yIHRoZSBuYW1lZCBldmVudC4gIENyZWF0ZXMgYSBuZXcgU3Vic2NyaXB0aW9uXG4gKiBvYmplY3QgYW5kIHJldHVybnMgaXQuICBUaGlzIG9iamVjdCBjYW4gYmUgdXNlZCB0byB1bnN1YnNjcmliZS5cbiAqL1xuU3Vic2NyaXB0aW9uTWFwLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbihldmVudE5hbWUsIGYpIHtcbiAgdmFyIHN1YiA9IG5ldyBTdWJzY3JpcHRpb24odGhpcywgZXZlbnROYW1lLCBmKTtcblxuICB0aGlzLnN1YklkTWFwW3N1Yi5pZF0gPSBzdWI7XG4gIHZhciBzdWJMaXN0ID0gdGhpcy5zdWJFdmVudE5hbWVNYXBbZXZlbnROYW1lXSB8fCBbXTtcbiAgc3ViTGlzdC5wdXNoKHN1Yik7XG4gIHRoaXMuc3ViRXZlbnROYW1lTWFwW2V2ZW50TmFtZV0gPSBzdWJMaXN0O1xufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBhIHN1YnNjcmlwdGlvbiBtYXRjaGluZyB0aGUgZ2l2ZW4gZXZlbnQgbmFtZSBhbmQgaWQuXG4gKi9cblN1YnNjcmlwdGlvbk1hcC5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbihldmVudE5hbWUsIHN1YklkKSB7XG4gIGlmIChVdGlscy5jb250YWlucyh0aGlzLnN1YkV2ZW50TmFtZU1hcCwgZXZlbnROYW1lKSkge1xuICAgIHRoaXMuc3ViRXZlbnROYW1lTWFwW2V2ZW50TmFtZV0gPSB0aGlzLnN1YkV2ZW50TmFtZU1hcFtldmVudE5hbWVdLmZpbHRlcihcbiAgICAgIGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgcmV0dXJuIHMuaWQgIT09IHN1YklkO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBpZiAodGhpcy5zdWJFdmVudE5hbWVNYXBbZXZlbnROYW1lXS5sZW5ndGggPCAxKSB7XG4gICAgICBkZWxldGUgdGhpcy5zdWJFdmVudE5hbWVNYXBbZXZlbnROYW1lXTtcbiAgICB9XG4gIH1cblxuICBpZiAoVXRpbHMuY29udGFpbnModGhpcy5zdWJJZE1hcCwgc3ViSWQpKSB7XG4gICAgZGVsZXRlIHRoaXMuc3ViSWRNYXBbc3ViSWRdO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCBhIGxpc3Qgb2YgYWxsIHN1YnNjcmlwdGlvbnMgaW4gdGhlIHN1YnNjcmlwdGlvbiBtYXAuXG4gKi9cblN1YnNjcmlwdGlvbk1hcC5wcm90b3R5cGUuZ2V0QWxsU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gVXRpbHMudmFsdWVzKHRoaXMuc3ViRXZlbnROYW1lTWFwKS5yZWR1Y2UoZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgfSwgW10pO1xufTtcblxuLyoqXG4gKiBHZXQgYSBsaXN0IG9mIHN1YnNjcmlwdGlvbnMgZm9yIHRoZSBnaXZlbiBldmVudCBuYW1lLCBvciBhbiBlbXB0eVxuICogbGlzdCBpZiB0aGVyZSBhcmUgbm8gc3Vic2NyaXB0aW9ucy5cbiAqL1xuU3Vic2NyaXB0aW9uTWFwLnByb3RvdHlwZS5nZXRTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gIHJldHVybiB0aGlzLnN1YkV2ZW50TmFtZU1hcFtldmVudE5hbWVdIHx8IFtdO1xufTtcblxuLyoqXG4gKiBBbiBvYmplY3Qgd2hpY2ggbWFpbnRhaW5zIGEgbWFwIG9mIHN1YnNjcmlwdGlvbnMgYW5kIHNlcnZlcyBhcyB0aGVcbiAqIG1lY2hhbmlzbSBmb3IgdHJpZ2dlcmluZyBldmVudHMgdG8gYmUgaGFuZGxlZCBieSBzdWJzY3JpYmVycy5cbiAqL1xudmFyIEV2ZW50QnVzID0gZnVuY3Rpb24ocGFyYW1zSW4pIHtcbiAgdmFyIHBhcmFtcyA9IHBhcmFtc0luIHx8IHt9O1xuXG4gIHRoaXMuc3ViTWFwID0gbmV3IFN1YnNjcmlwdGlvbk1hcCgpO1xuICB0aGlzLmxvZ0V2ZW50cyA9IHBhcmFtcy5sb2dFdmVudHMgfHwgZmFsc2U7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byB0aGUgbmFtZWQgZXZlbnQuICBSZXR1cm5zIGEgbmV3IFN1YnNjcmlwdGlvbiBvYmplY3RcbiAqIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlLlxuICovXG5FdmVudEJ1cy5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24oZXZlbnROYW1lLCBmKSB7XG4gIFV0aWxzLmFzc2VydE5vdE51bGwoZXZlbnROYW1lLCBcImV2ZW50TmFtZVwiKTtcbiAgVXRpbHMuYXNzZXJ0Tm90TnVsbChmLCBcImZcIik7XG4gIFV0aWxzLmFzc2VydFRydWUoVXRpbHMuaXNGdW5jdGlvbihmKSwgXCJmIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgcmV0dXJuIHRoaXMuc3ViTWFwLnN1YnNjcmliZShldmVudE5hbWUsIGYpO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gYWxsIGV2ZW50cy5cbiAqL1xuRXZlbnRCdXMucHJvdG90eXBlLnN1YnNjcmliZUFsbCA9IGZ1bmN0aW9uKGYpIHtcbiAgVXRpbHMuYXNzZXJ0Tm90TnVsbChmLCBcImZcIik7XG4gIFV0aWxzLmFzc2VydFRydWUoVXRpbHMuaXNGdW5jdGlvbihmKSwgXCJmIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgcmV0dXJuIHRoaXMuc3ViTWFwLnN1YnNjcmliZShBTExfRVZFTlRTLCBmKTtcbn07XG5cbi8qKlxuICogR2V0IGEgbGlzdCBvZiBzdWJzY3JpcHRpb25zIGZvciB0aGUgZ2l2ZW4gZXZlbnQgbmFtZSwgb3IgYW4gZW1wdHlcbiAqIGxpc3QgaWYgdGhlcmUgYXJlIG5vIHN1YnNjcmlwdGlvbnMuXG4gKi9cbkV2ZW50QnVzLnByb3RvdHlwZS5nZXRTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gIHJldHVybiB0aGlzLnN1Yk1hcC5nZXRTdWJzY3JpcHRpb25zKGV2ZW50TmFtZSk7XG59O1xuXG4vKipcbiAqIFRyaWdnZXIgdGhlIGdpdmVuIGV2ZW50IHdpdGggdGhlIGdpdmVuIGRhdGEuICBBbGwgbWV0aG9kcyBzdWJzY3JpYmVkXG4gKiB0byB0aGlzIGV2ZW50IHdpbGwgYmUgY2FsbGVkIGFuZCBhcmUgcHJvdmlkZWQgd2l0aCB0aGUgZ2l2ZW4gYXJiaXRyYXJ5XG4gKiBkYXRhIG9iamVjdCBhbmQgdGhlIG5hbWUgb2YgdGhlIGV2ZW50LCBpbiB0aGF0IG9yZGVyLlxuICovXG5FdmVudEJ1cy5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgZGF0YSkge1xuICBVdGlscy5hc3NlcnROb3ROdWxsKGV2ZW50TmFtZSwgXCJldmVudE5hbWVcIik7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGFsbEV2ZW50U3VicyA9IHRoaXMuc3ViTWFwLmdldFN1YnNjcmlwdGlvbnMoQUxMX0VWRU5UUyk7XG4gIHZhciBldmVudFN1YnMgPSB0aGlzLnN1Yk1hcC5nZXRTdWJzY3JpcHRpb25zKGV2ZW50TmFtZSk7XG5cbiAgLy8gaWYgKHRoaXMubG9nRXZlbnRzICYmIChldmVudE5hbWUgIT09IGNvbm5lY3QuRXZlbnRUeXBlLkxPRyAmJiBldmVudE5hbWUgIT09IGNvbm5lY3QuRXZlbnRUeXBlLk1BU1RFUl9SRVNQT05TRSAmJiBldmVudE5hbWUgIT09IGNvbm5lY3QuRXZlbnRUeXBlLkFQSV9NRVRSSUMpKSB7XG4gIC8vICAgIGNvbm5lY3QuZ2V0TG9nKCkudHJhY2UoXCJQdWJsaXNoaW5nIGV2ZW50OiAlc1wiLCBldmVudE5hbWUpO1xuICAvLyB9XG5cbiAgYWxsRXZlbnRTdWJzLmNvbmNhdChldmVudFN1YnMpLmZvckVhY2goZnVuY3Rpb24oc3ViKSB7XG4gICAgdHJ5IHtcbiAgICAgIHN1Yi5mKGRhdGEgfHwgbnVsbCwgZXZlbnROYW1lLCBzZWxmKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyAgIGNvbm5lY3RcbiAgICAgIC8vICAgICAuZ2V0TG9nKClcbiAgICAgIC8vICAgICAuZXJyb3IoXCInJXMnIGV2ZW50IGhhbmRsZXIgZmFpbGVkLlwiLCBldmVudE5hbWUpXG4gICAgICAvLyAgICAgLndpdGhFeGNlcHRpb24oZSk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogVHJpZ2dlciB0aGUgZ2l2ZW4gZXZlbnQgd2l0aCB0aGUgZ2l2ZW4gZGF0YS4gIEFsbCBtZXRob2RzIHN1YnNjcmliZWRcbiAqIHRvIHRoaXMgZXZlbnQgd2lsbCBiZSBjYWxsZWQgYW5kIGFyZSBwcm92aWRlZCB3aXRoIHRoZSBnaXZlbiBhcmJpdHJhcnlcbiAqIGRhdGEgb2JqZWN0IGFuZCB0aGUgbmFtZSBvZiB0aGUgZXZlbnQsIGluIHRoYXQgb3JkZXIuXG4gKi9cbkV2ZW50QnVzLnByb3RvdHlwZS50cmlnZ2VyQXN5bmMgPSBmdW5jdGlvbihldmVudE5hbWUsIGRhdGEpIHtcbiAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnRyaWdnZXIoZXZlbnROYW1lLCBkYXRhKSwgMCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBjbG9zdXJlIHdoaWNoIGJyaWRnZXMgYW4gZXZlbnQgZnJvbSBhbm90aGVyIEV2ZW50QnVzIHRvIHRoaXMgYnVzLlxuICpcbiAqIFVzYWdlOlxuICogY29uZHVpdC5vblVwc3RyZWFtKFwiTXlFdmVudFwiLCBidXMuYnJpZGdlKCkpO1xuICovXG5FdmVudEJ1cy5wcm90b3R5cGUuYnJpZGdlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGEsIGV2ZW50KSB7XG4gICAgc2VsZi50cmlnZ2VyKGV2ZW50LCBkYXRhKTtcbiAgfTtcbn07XG5cbi8qKlxuICogVW5zdWJzY3JpYmUgYWxsIGV2ZW50cyBpbiB0aGUgZXZlbnQgYnVzLlxuICovXG5FdmVudEJ1cy5wcm90b3R5cGUudW5zdWJzY3JpYmVBbGwgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdWJNYXAuZ2V0QWxsU3Vic2NyaXB0aW9ucygpLmZvckVhY2goZnVuY3Rpb24oc3ViKSB7XG4gICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gIH0pO1xufTtcblxuZXhwb3J0IHsgRXZlbnRCdXMgfTtcbiIsImltcG9ydCB7XG4gIFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24sXG4gIElsbGVnYWxTdGF0ZUV4Y2VwdGlvblxufSBmcm9tIFwiLi9leGNlcHRpb25zXCI7XG5pbXBvcnQgeyBDb25uZWN0aW9uSGVscGVyU3RhdHVzIH0gZnJvbSBcIi4vY29ubmVjdGlvbkhlbHBlclwiO1xuaW1wb3J0IHtcbiAgUEVSU0lTVEVOQ0UsXG4gIFZJU0lCSUxJVFksXG4gIENIQVRfRVZFTlRTLFxuICBUUkFOU0NSSVBUX0RFRkFVTFRfUEFSQU1TLFxuICBDT05URU5UX1RZUEUsXG4gIFJFQ09OTkVDVF9JTlRFUlZBTCxcbiAgTUFYX1JFQ09OTkVDVF9BVFRFTVBUU1xufSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBHbG9iYWxDb25maWcgfSBmcm9tIFwiLi4vZ2xvYmFsQ29uZmlnXCI7XG5pbXBvcnQgeyBMb2dNYW5hZ2VyIH0gZnJvbSBcIi4uL2xvZ1wiO1xuaW1wb3J0IFV0aWxzIGZyb20gXCIuLi91dGlsc1wiO1xuXG52YXIgTmV0d29ya0xpbmtTdGF0dXMgPSB7XG4gIE5ldmVyRXN0YWJsaXNoZWQ6IFwiTmV2ZXJFc3RhYmxpc2hlZFwiLFxuICBFc3RhYmxpc2hpbmc6IFwiRXN0YWJsaXNoaW5nXCIsXG4gIEVzdGFibGlzaGVkOiBcIkVzdGFibGlzaGVkXCIsXG4gIEJyb2tlbjogXCJCcm9rZW5cIlxufTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG5jbGFzcyBDaGF0Q29udHJvbGxlciB7XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dE1lc3NhZ2VcbiAgICogQHJldHVybiBhIHByb21pc2Ugb2JqZWN0IHdpdGhcbiAgICogc3VjY2VzcyA9IHtcbiAgICogIFwic3RhdHVzQ29kZVwiOiAyMDAsXG4gICAqICBcImRhdGFcIjoge1xuICAgKiAgICAgIFwiTWVzc2FnZUlkXCI6IDxzdHJpbmc+XG4gICAqICAgICAgfVxuICAgKiAgfVxuICAgKiBlcnJvciA9IHtcbiAgICogIFwic3RhdHVzQ29kZVwiOiA8ZXJyb3JTdGF0dXNDb2RlPixcbiAgICogIFwiZXhjZXB0aW9uXCI6IHt9IC8vIHNvbWUgb2JqZWN0Li4uXG4gICAqIH1cbiAgICovXG4gIHNlbmRUZXh0TWVzc2FnZSh0ZXh0TWVzc2FnZSkge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFwic2VuZFRleHRNZXNzYWdlIGluIENoYXRDb250cm9sbGVyXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gYXJnc1xuICAgKiBAcmV0dXJuIFByb21pc2Ugb2JqZWN0IHdpdGhcbiAgICogICAgICByZXNwb25zZSA9IHtcbiAgICogICAgICAgICAgICAgIFwiZGV0YWlsc1wiOiB7fSwgLy8gSW1wbGVtZW50YXRpb24gc3BlY2lmaWNcbiAgICogICAgICAgICAgICAgIFwiaW5pdGlhbENvbnRhY3RJZFwiOiA8SW5pdGlhbENvbnRhY3RJZD4sXG4gICAqICAgICAgICAgICAgICBcImNvbnRhY3RJZFwiOiAgPGNvbnRhY3RJZD4sXG4gICAqICAgICAgICAgICAgICBcImNvbm5lY3RTdWNjZXNzXCI6IHRydWVcbiAgICogICAgICB9XG4gICAqICAgICAgZXJyb3IgPSB7XG4gICAqICAgICAgICAgICAgICBcImRldGFpbHNcIjoge30sIC8vIEltcGxlbWVudGF0aW9uIHNwZWNpZmljXG4gICAqICAgICAgICAgICAgICBcImluaXRpYWxDb250YWN0SWRcIjogPEluaXRpYWxDb250YWN0SWQ+LFxuICAgKiAgICAgICAgICAgICAgXCJjb250YWN0SWRcIjogIDxjb250YWN0SWQ+LFxuICAgKiAgICAgICAgICAgICAgXCJjb25uZWN0U3VjY2Vzc1wiOiBmYWxzZVxuICAgKiAgICAgIH1cbiAgICovXG4gIGVzdGFibGlzaE5ldHdvcmtMaW5rKGFyZ3MpIHtcbiAgICB0aHJvdyBuZXcgVW5JbXBsZW1lbnRlZE1ldGhvZEV4Y2VwdGlvbihcImNvbm5lY3RDaGF0IGluIENoYXRDb250cm9sbGVyXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gbnVsbFxuICAgKi9cbiAgZGlzY29ubmVjdFBhcnRpY2lwYW50KCkge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFwiZW5kQ2hhdCBpbiBDaGF0Q29udHJvbGxlclwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlXG4gICAqIEByZXR1cm4gUHJvbWlzZSBvYmplY3Qgd2l0aFxuICAgKiAgc3VjY2VzcyA9IHtcbiAgICogICAgICBcInN0YXR1c0NvZGVcIjogMjAwLFxuICAgKiAgICAgIFwiZGF0YVwiOiB7fSAvLyBlbXB0eSBvYmplY3Q/IFRPRE9cbiAgICogIH1cbiAgICogIGVycm9yID0ge1xuICAgKiAgICAgIFwic3RhdHVzQ29kZVwiOiA8ZXJyb3JDb2RlPixcbiAgICogICAgICBcImV4Y2VwdGlvblwiOiB7fSAvLyBzb21lIG9iamVjdFxuICAgKiAgfVxuICAgKi9cbiAgc2VuZEV2ZW50KGV2ZW50VHlwZSkge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFwic2VuZEV2ZW50IGluIENoYXRDb250cm9sbGVyXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBhcmdzIC8vVE9ET1xuICAgKiBAcmV0dXJuIC8vIFRPRE9cbiAgICovXG4gIGdldFRyYW5zY3JpcHQoYXJncykge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFwiZ2V0VHJhbnNjcmlwdCBpbiBDaGF0Q29udHJvbGxlclwiKTtcbiAgfVxuXG4gIGdldENvbm5lY3Rpb25TdGF0dXMoKSB7XG4gICAgdGhyb3cgbmV3IFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24oXCJnZXRTdGF0dXMgaW4gQ2hhdENvbnRyb2xsZXJcIik7XG4gIH1cbn1cbi8qZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyovXG5cbmNsYXNzIFBlcnNpc3RlbnRDb25uZWN0aW9uQW5kQ2hhdFNlcnZpY2VDb250cm9sbGVyIGV4dGVuZHMgQ2hhdENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnNldEFyZ3VtZW50cyhhcmdzKTtcbiAgfVxuXG4gIHNldEFyZ3VtZW50cyhhcmdzKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBwcmVmaXggPSBcIkNvbnRhY3RJZC1cIiArIGFyZ3MuY2hhdERldGFpbHMuY29udGFjdElkICsgXCI6IFwiO1xuICAgIHRoaXMubG9nZ2VyID0gTG9nTWFuYWdlci5nZXRMb2dnZXIoe1xuICAgICAgcHJlZml4OiBwcmVmaXhcbiAgICB9KTtcbiAgICB0aGlzLmFyZ3NWYWxpZGF0b3IgPSBhcmdzLmFyZ3NWYWxpZGF0b3I7XG4gICAgdGhpcy5jaGF0RXZlbnRDb25zdHJ1Y3RvciA9IGFyZ3MuY2hhdEV2ZW50Q29uc3RydWN0b3I7XG4gICAgdGhpcy5jb25uZWN0aW9uRGV0YWlscyA9IGFyZ3MuY2hhdERldGFpbHMuY29ubmVjdGlvbkRldGFpbHM7XG4gICAgdGhpcy5pbnRpYWxDb250YWN0SWQgPSBhcmdzLmNoYXREZXRhaWxzLmluaXRpYWxDb250YWN0SWQ7XG4gICAgdGhpcy5jb250YWN0SWQgPSBhcmdzLmNoYXREZXRhaWxzLmNvbnRhY3RJZDtcbiAgICB0aGlzLnBhcnRpY2lwYW50SWQgPSBhcmdzLmNoYXREZXRhaWxzLnBhcnRpY2lwYW50SWQ7XG4gICAgdGhpcy5jaGF0Q2xpZW50ID0gYXJncy5jaGF0Q2xpZW50O1xuICAgIHRoaXMucGFydGljaXBhbnRUb2tlbiA9IGFyZ3MuY2hhdERldGFpbHMucGFydGljaXBhbnRUb2tlbjtcbiAgICB0aGlzLmNvbm5lY3Rpb25IZWxwZXJDYWxsYmFjayA9IChldmVudFR5cGUsIGV2ZW50RGF0YSkgPT5cbiAgICAgIHNlbGYuX2hhbmRsZUNvbm5lY3Rpb25IZWxwZXJFdmVudHMoZXZlbnRUeXBlLCBldmVudERhdGEpO1xuICAgIHRoaXMuX2hhc0Nvbm5lY3Rpb25EZXRhaWxzID0gYXJncy5oYXNDb25uZWN0aW9uRGV0YWlscztcbiAgICB0aGlzLmNoYXRDb250cm9sbGVyRmFjdG9yeSA9IGFyZ3MuY2hhdENvbnRyb2xsZXJGYWN0b3J5O1xuICAgIGlmIChhcmdzLmhhc0Nvbm5lY3Rpb25EZXRhaWxzKSB7XG4gICAgICB0aGlzLl9zZXRDb25uZWN0aW9uSGVscGVyKFxuICAgICAgICBhcmdzLmNoYXREZXRhaWxzLmNvbm5lY3Rpb25EZXRhaWxzLFxuICAgICAgICBhcmdzLmNoYXREZXRhaWxzLmNvbnRhY3RJZFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5fY29ubmVjdENhbGxlZEF0bGVhc3RPbmNlID0gZmFsc2U7XG4gICAgdGhpcy5fZXZlckNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMucHVic3ViID0gYXJncy5wdWJzdWI7XG4gICAgdGhpcy5fcGFydGljaXBhbnREaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnNlc3Npb25NZXRhZGF0YSA9IHt9O1xuICB9XG5cbiAgX3NldENvbm5lY3Rpb25IZWxwZXIoY29ubmVjdGlvbkRldGFpbHMsIGNvbnRhY3RJZCkge1xuICAgIHZhciBjb25uZWN0aW9uSGVscGVyUHJvdmlkZXIgPSB0aGlzLmNoYXRDb250cm9sbGVyRmFjdG9yeS5jcmVhdGVDb25uZWN0aW9uSGVscGVyUHJvdmlkZXIoXG4gICAgICBjb25uZWN0aW9uRGV0YWlscyxcbiAgICAgIGNvbnRhY3RJZFxuICAgICk7XG4gICAgdGhpcy5jb25uZWN0aW9uSGVscGVyID0gY29ubmVjdGlvbkhlbHBlclByb3ZpZGVyKFxuICAgICAgdGhpcy5jb25uZWN0aW9uSGVscGVyQ2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgLy8gRG8gYW55IGNsZWFuIHVwIHRoYXQgbmVlZHMgdG8gYmUgZG9uZSB1cG9uIHRoZSBwYXJ0aWNpcGFudCBiZWluZyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgY2hhdCAtXG4gIC8vIGRpc2Nvbm5lY3RlZCBoZXJlIG1lYW5zIHRoYXQgdGhlIHBhcnRpY2lwYW50IGlzIG5vIGxvbmdlciBwYXJ0IG9mIHRoZXIgY2hhdC5cbiAgY2xlYW5VcE9uUGFydGljaXBhbnREaXNjb25uZWN0KCkge1xuICAgIHRoaXMucHVic3ViLnVuc3Vic2NyaWJlQWxsKCk7XG4gICAgdGhpcy5jb25uZWN0aW9uSGVscGVyICYmXG4gICAgICB0aGlzLmNvbm5lY3Rpb25IZWxwZXIuY2xlYW5VcE9uUGFydGljaXBhbnREaXNjb25uZWN0KCk7XG4gIH1cblxuICBzdWJzY3JpYmUoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgIHRoaXMucHVic3ViLnN1YnNjcmliZShldmVudE5hbWUsIGNhbGxiYWNrKTtcbiAgICB0aGlzLmxvZ2dlci5pbmZvKFwiU3Vic2NyaWJlZCBzdWNjZXNzZnVsbHkgdG8gZXZlbnROYW1lOiBcIiwgZXZlbnROYW1lKTtcbiAgfVxuXG4gIHNlbmRNZXNzYWdlKGFyZ3MpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIG1lc3NhZ2UgPSBhcmdzLm1lc3NhZ2U7XG4gICAgdmFyIHR5cGUgPSBhcmdzLnR5cGUgfHwgQ09OVEVOVF9UWVBFLnRleHRQbGFpbjtcbiAgICB2YXIgbWV0YWRhdGEgPSBhcmdzLm1ldGFkYXRhIHx8IG51bGw7XG4gICAgc2VsZi5hcmdzVmFsaWRhdG9yLnZhbGlkYXRlU2VuZE1lc3NhZ2UobWVzc2FnZSwgdHlwZSk7XG4gICAgdmFyIGNvbm5lY3Rpb25Ub2tlbiA9IHNlbGYuY29ubmVjdGlvbkRldGFpbHMuY29ubmVjdGlvblRva2VuO1xuICAgIHJldHVybiBzZWxmLmNoYXRDbGllbnQuc2VuZE1lc3NhZ2UoY29ubmVjdGlvblRva2VuLCBtZXNzYWdlLCB0eXBlKS50aGVuKFxuICAgICAgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgcmVzcG9uc2UubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoXG4gICAgICAgICAgXCJTdWNjZXNzZnVsbHkgc2VudCBtZXNzYWdlLCByZXNwb25zZTogXCIsXG4gICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgXCIgcmVxdWVzdDogXCIsXG4gICAgICAgICAgYXJnc1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgZXJyb3IubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoXG4gICAgICAgICAgXCJGYWlsZWQgdG8gc2VuZCBtZXNzYWdlLCBlcnJvcjogXCIsXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgXCIgcmVxdWVzdDogXCIsXG4gICAgICAgICAgYXJnc1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBzZW5kRXZlbnQoYXJncykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgbWV0YWRhdGEgPSBhcmdzLm1ldGFkYXRhIHx8IG51bGw7XG4gICAgc2VsZi5hcmdzVmFsaWRhdG9yLnZhbGlkYXRlU2VuZEV2ZW50KGFyZ3MpO1xuICAgIHZhciBjb25uZWN0aW9uVG9rZW4gPSBzZWxmLmNvbm5lY3Rpb25EZXRhaWxzLmNvbm5lY3Rpb25Ub2tlbjtcbiAgICB2YXIgcGVyc2lzdGVuY2VBcmd1bWVudCA9IGFyZ3MucGVyc2lzdGVuY2UgfHwgUEVSU0lTVEVOQ0UuUEVSU0lTVEVEO1xuICAgIHZhciB2aXNpYmlsaXR5QXJndW1lbnQgPSBhcmdzLnZpc2liaWxpdHkgfHwgVklTSUJJTElUWS5BTEw7XG5cbiAgICByZXR1cm4gc2VsZi5jaGF0Q2xpZW50XG4gICAgICAuc2VuZEV2ZW50KFxuICAgICAgICBjb25uZWN0aW9uVG9rZW4sXG4gICAgICAgIGFyZ3MuZXZlbnRUeXBlLFxuICAgICAgICBhcmdzLm1lc3NhZ2VJZHMsXG4gICAgICAgIHZpc2liaWxpdHlBcmd1bWVudCxcbiAgICAgICAgcGVyc2lzdGVuY2VBcmd1bWVudFxuICAgICAgKVxuICAgICAgLnRoZW4oXG4gICAgICAgIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgcmVzcG9uc2UubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgICAgIFwiU3VjY2Vzc2Z1bGx5IHNlbnQgZXZlbnQsIHJlc3BvbnNlOiBcIixcbiAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgXCIgcmVxdWVzdDogXCIsXG4gICAgICAgICAgICBhcmdzXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgZXJyb3IubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgICAgIFwiRmFpbGVkIHRvIHNlbmQgZXZlbnQsIGVycm9yOiBcIixcbiAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgXCIgcmVxdWVzdDogXCIsXG4gICAgICAgICAgICBhcmdzXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICApO1xuICB9XG5cbiAgZ2V0VHJhbnNjcmlwdChpbnB1dEFyZ3MpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIG1ldGFkYXRhID0gaW5wdXRBcmdzLm1ldGFkYXRhIHx8IG51bGw7XG4gICAgdmFyIGFyZ3MgPSB7fTtcbiAgICBhcmdzLkludGlhbENvbnRhY3RJZCA9IHRoaXMuaW50aWFsQ29udGFjdElkO1xuICAgIGFyZ3MuU3RhcnRLZXkgPSBpbnB1dEFyZ3MuU3RhcnRLZXkgfHwge307XG4gICAgYXJncy5TY2FuRGlyZWN0aW9uID1cbiAgICAgIGlucHV0QXJncy5TY2FuRGlyZWN0aW9uIHx8IFRSQU5TQ1JJUFRfREVGQVVMVF9QQVJBTVMuU0NBTl9ESVJFQ1RJT047XG4gICAgYXJncy5Tb3J0S2V5ID0gaW5wdXRBcmdzLlNvcnRLZXkgfHwgVFJBTlNDUklQVF9ERUZBVUxUX1BBUkFNUy5TT1JUX0tFWTtcbiAgICBhcmdzLk1heFJlc3VsdHMgPVxuICAgICAgaW5wdXRBcmdzLk1heFJlc3VsdHMgfHwgVFJBTlNDUklQVF9ERUZBVUxUX1BBUkFNUy5NQVhfUkVTVUxUUztcbiAgICBpZiAoaW5wdXRBcmdzLk5leHRUb2tlbikge1xuICAgICAgYXJncy5OZXh0VG9rZW4gPSBpbnB1dEFyZ3MuTmV4dFRva2VuO1xuICAgIH1cbiAgICB2YXIgY29ubmVjdGlvblRva2VuID0gdGhpcy5jb25uZWN0aW9uRGV0YWlscy5jb25uZWN0aW9uVG9rZW47XG4gICAgcmV0dXJuIHRoaXMuY2hhdENsaWVudC5nZXRUcmFuc2NyaXB0KGNvbm5lY3Rpb25Ub2tlbiwgYXJncykudGhlbihcbiAgICAgIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIHJlc3BvbnNlLm1ldGFkYXRhID0gbWV0YWRhdGE7XG4gICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKFxuICAgICAgICAgIFwiU3VjY2Vzc2Z1bGx5IHJldHJpZXZlZCB0cmFuc2NyaXB0LCByZXNwb25zZTogXCIsXG4gICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgXCIgcmVxdWVzdDogXCIsXG4gICAgICAgICAgYXJnc1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgZXJyb3IubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoXG4gICAgICAgICAgXCJGYWlsZWQgdG8gcmV0cmlldmUgdHJhbnNjcmlwdCwgZXJyb3I6IFwiLFxuICAgICAgICAgIGVycm9yLFxuICAgICAgICAgIFwiIHJlcXVlc3Q6IFwiLFxuICAgICAgICAgIGFyZ3NcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgX21hcENvbm5lY3Rpb25IZWxwZXJFdmVudFRvQ2hhdEV2ZW50KGV2ZW50VHlwZSwgZXZlbnREYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB0aGlzLmNoYXRFdmVudENvbnN0cnVjdG9yLmZyb21Db25uZWN0aW9uSGVscGVyRXZlbnQoXG4gICAgICAgIGV2ZW50VHlwZSxcbiAgICAgICAgZXZlbnREYXRhLFxuICAgICAgICB0aGlzLmdldENoYXREZXRhaWxzKCksXG4gICAgICAgIHRoaXMubG9nZ2VyXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgIFwiRXJyb3Igb2NjdXJlZCB3aGlsZSBoYW5kbGluZyBldmVudCBmcm9tIENvbm5lY3Rpb24uIGV2ZW50VHlwZSBhbmQgZXZlbnREYXRhOiBcIixcbiAgICAgICAgZXZlbnRUeXBlLFxuICAgICAgICBldmVudERhdGEsXG4gICAgICAgIFwiIENhdXNpbmcgZXhjZXB0aW9uOiBcIixcbiAgICAgICAgZXhjXG4gICAgICApO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgX2ZvcndhcmRDaGF0RXZlbnQoY2hhdEV2ZW50KSB7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcoXCJUcmlnZ2VyaW5nIGV2ZW50IGZvciBzdWJzY3JpYmVyczpcIiwgY2hhdEV2ZW50KTtcbiAgICB0aGlzLnB1YnN1Yi50cmlnZ2VyQXN5bmMoY2hhdEV2ZW50LnR5cGUsIGNoYXRFdmVudC5kYXRhKTtcbiAgfVxuXG4gIF9oYW5kbGVDb25uZWN0aW9uSGVscGVyRXZlbnRzKGV2ZW50VHlwZSwgZXZlbnREYXRhKSB7XG4gICAgY29uc3QgY2hhdEV2ZW50ID0gdGhpcy5fbWFwQ29ubmVjdGlvbkhlbHBlckV2ZW50VG9DaGF0RXZlbnQoZXZlbnRUeXBlLCBldmVudERhdGEpO1xuICAgIGlmICghY2hhdEV2ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2hhbmRsZUNoYXRFdmVudChjaGF0RXZlbnQpO1xuICAgIHRoaXMuX2ZvcndhcmRDaGF0RXZlbnQoY2hhdEV2ZW50KTtcbiAgfVxuXG4gIF9oYW5kbGVDaGF0RXZlbnQoY2hhdEV2ZW50KSB7XG4gICAgaWYgKGNoYXRFdmVudC50eXBlID09PSBDSEFUX0VWRU5UUy5DT05ORUNUSU9OX0JST0tFTiAmJiBHbG9iYWxDb25maWcucmVjb25uZWN0ICYmIGNoYXRFdmVudC5kYXRhLnJlY29ubmVjdCkge1xuICAgICAgdGhpcy5faW5pdGlhdGVSZWNvbm5lY3QoKTtcbiAgICB9XG4gIH1cblxuICBjb25uZWN0KGlucHV0QXJncykge1xuICAgIHZhciBhcmdzID0gaW5wdXRBcmdzIHx8IHt9O1xuICAgIHRoaXMuc2Vzc2lvbk1ldGFkYXRhID0gYXJncy5tZXRhZGF0YSB8fCBudWxsO1xuICAgIHRoaXMuYXJnc1ZhbGlkYXRvci52YWxpZGF0ZUNvbm5lY3RDaGF0KGFyZ3MpO1xuICAgIHJldHVybiB0aGlzLl9jb25uZWN0KCk7XG4gIH1cblxuICBfY29ubmVjdCgpIHtcbiAgICBpZiAoIXRoaXMuX2NhbkNvbm5lY3QoKSkge1xuICAgICAgdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbihcbiAgICAgICAgXCJDYW4gY2FsbCBlc3RhYmxpc2hOZXR3b3JrTGluayBvbmx5IHdoZW4gZ2V0Q29ubmVjdGlvblN0YXR1cyBpcyBCcm9rZW4gb3IgTmV2ZXJFc3RhYmxpc2hlZFwiXG4gICAgICApO1xuICAgIH1cbiAgICB2YXIgX29uU3VjY2VzcyA9IHJlc3BvbnNlID0+IHRoaXMuX29uQ29ubmVjdFN1Y2Nlc3MocmVzcG9uc2UsIHRoaXMuc2Vzc2lvbk1ldGFkYXRhKTtcbiAgICB2YXIgX29uRmFpbHVyZSA9IGVycm9yID0+IHRoaXMuX29uQ29ubmVjdEZhaWx1cmUoZXJyb3IsIHRoaXMuc2Vzc2lvbk1ldGFkYXRhKTtcbiAgICB0aGlzLl9jb25uZWN0Q2FsbGVkQXRsZWFzdE9uY2UgPSB0cnVlO1xuICAgIGlmICh0aGlzLl9oYXNDb25uZWN0aW9uRGV0YWlscykge1xuICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbkhlbHBlci5zdGFydCgpLnRoZW4oX29uU3VjY2VzcywgX29uRmFpbHVyZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgICAgIC5fZmV0Y2hDb25uZWN0aW9uRGV0YWlscygpXG4gICAgICAgIC50aGVuKGNvbm5lY3Rpb25EZXRhaWxzID0+IHtcbiAgICAgICAgICB0aGlzLl9zZXRDb25uZWN0aW9uSGVscGVyKGNvbm5lY3Rpb25EZXRhaWxzLCB0aGlzLmNvbnRhY3RJZCk7XG4gICAgICAgICAgdGhpcy5jb25uZWN0aW9uRGV0YWlscyA9IGNvbm5lY3Rpb25EZXRhaWxzO1xuICAgICAgICAgIHRoaXMuX2hhc0Nvbm5lY3Rpb25EZXRhaWxzID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uSGVscGVyLnN0YXJ0KCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKF9vblN1Y2Nlc3MsIF9vbkZhaWx1cmUpO1xuICAgIH1cbiAgfVxuXG4gIF9pbml0aWF0ZVJlY29ubmVjdCgpIHtcbiAgICBVdGlsc1xuICAgICAgLmFzeW5jV2hpbGVJbnRlcnZhbChcbiAgICAgICAgKGNvdW50KSA9PiB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhgUmVjb25uZWN0IC0gJHtjb3VudH0uIHRyeWApO1xuICAgICAgICAgIHRoaXMuX2hhc0Nvbm5lY3Rpb25EZXRhaWxzID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5jb25uZWN0aW9uRGV0YWlscyA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3QoKTtcbiAgICAgICAgfSxcbiAgICAgICAgKGNvdW50KSA9PiBjb3VudCA8IE1BWF9SRUNPTk5FQ1RfQVRURU1QVFMgJiYgdGhpcy5fY2FuUmVjb25uZWN0KCksXG4gICAgICAgIFJFQ09OTkVDVF9JTlRFUlZBTFxuICAgICAgKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKGBSZWNvbm5lY3QgLSBTdWNjZXNzYCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhgUmVjb25uZWN0IC0gRmFpbGVkYCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIF9jYW5Db25uZWN0KCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmdldENvbm5lY3Rpb25TdGF0dXMoKSA9PT0gTmV0d29ya0xpbmtTdGF0dXMuQnJva2VuIHx8XG4gICAgICB0aGlzLmdldENvbm5lY3Rpb25TdGF0dXMoKSA9PT0gTmV0d29ya0xpbmtTdGF0dXMuTmV2ZXJFc3RhYmxpc2hlZFxuICAgICk7XG4gIH1cblxuICBfY2FuUmVjb25uZWN0KCkge1xuICAgIHJldHVybiB0aGlzLmdldENvbm5lY3Rpb25TdGF0dXMoKSA9PT0gTmV0d29ya0xpbmtTdGF0dXMuQnJva2VuO1xuICB9XG5cbiAgX29uQ29ubmVjdFN1Y2Nlc3MocmVzcG9uc2UsIG1ldGFkYXRhKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNlbGYubG9nZ2VyLmluZm8oXCJDb25uZWN0IHN1Y2Nlc3NmdWwhXCIpO1xuICAgIHZhciByZXNwb25zZU9iamVjdCA9IHtcbiAgICAgIF9kZWJ1ZzogcmVzcG9uc2UsXG4gICAgICBjb25uZWN0U3VjY2VzczogdHJ1ZSxcbiAgICAgIGNvbm5lY3RDYWxsZWQ6IHRydWUsXG4gICAgICBtZXRhZGF0YTogbWV0YWRhdGFcbiAgICB9O1xuICAgIHZhciBldmVudERhdGEgPSBPYmplY3QuYXNzaWduKFxuICAgICAge1xuICAgICAgICBjaGF0RGV0YWlsczogc2VsZi5nZXRDaGF0RGV0YWlscygpXG4gICAgICB9LFxuICAgICAgcmVzcG9uc2VPYmplY3RcbiAgICApO1xuICAgIHRoaXMucHVic3ViLnRyaWdnZXJBc3luYyhDSEFUX0VWRU5UUy5DT05ORUNUSU9OX0VTVEFCTElTSEVELCBldmVudERhdGEpO1xuICAgIHJldHVybiByZXNwb25zZU9iamVjdDtcbiAgfVxuXG4gIF9vbkNvbm5lY3RGYWlsdXJlKGVycm9yLCBtZXRhZGF0YSkge1xuICAgIHZhciBlcnJvck9iamVjdCA9IHtcbiAgICAgIF9kZWJ1ZzogZXJyb3IsXG4gICAgICBjb25uZWN0U3VjY2VzczogZmFsc2UsXG4gICAgICBjb25uZWN0Q2FsbGVkOiB0cnVlLFxuICAgICAgbWV0YWRhdGE6IG1ldGFkYXRhXG4gICAgfTtcbiAgICB0aGlzLmxvZ2dlci5lcnJvcihcIkNvbm5lY3QgRmFpbGVkIHdpdGggZGF0YTogXCIsIGVycm9yT2JqZWN0KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3JPYmplY3QpO1xuICB9XG5cbiAgX2ZldGNoQ29ubmVjdGlvbkRldGFpbHMoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBzZWxmLmNoYXRDbGllbnQuY3JlYXRlQ29ubmVjdGlvbkRldGFpbHMoc2VsZi5wYXJ0aWNpcGFudFRva2VuKS50aGVuKFxuICAgICAgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIGNvbm5lY3Rpb25EZXRhaWxzID0ge307XG4gICAgICAgIGNvbm5lY3Rpb25EZXRhaWxzLkNvbm5lY3Rpb25JZCA9IHJlc3BvbnNlLmRhdGEuQ29ubmVjdGlvbklkO1xuICAgICAgICBjb25uZWN0aW9uRGV0YWlscy5QcmVTaWduZWRDb25uZWN0aW9uVXJsID1cbiAgICAgICAgICByZXNwb25zZS5kYXRhLlByZVNpZ25lZENvbm5lY3Rpb25Vcmw7XG4gICAgICAgIGNvbm5lY3Rpb25EZXRhaWxzLmNvbm5lY3Rpb25Ub2tlbiA9XG4gICAgICAgICAgcmVzcG9uc2UuZGF0YS5QYXJ0aWNpcGFudENyZWRlbnRpYWxzLkNvbm5lY3Rpb25BdXRoZW50aWNhdGlvblRva2VuO1xuICAgICAgICByZXR1cm4gY29ubmVjdGlvbkRldGFpbHM7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHtcbiAgICAgICAgICByZWFzb246IFwiRmFpbGVkIHRvIGZldGNoIGNvbm5lY3Rpb25EZXRhaWxzXCIsXG4gICAgICAgICAgX2RlYnVnOiBlcnJvclxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgYnJlYWtDb25uZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25IZWxwZXIuZW5kKCk7XG4gIH1cblxuICBkaXNjb25uZWN0UGFydGljaXBhbnQoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBjb25uZWN0aW9uVG9rZW4gPSBzZWxmLmNvbm5lY3Rpb25EZXRhaWxzLmNvbm5lY3Rpb25Ub2tlbjtcbiAgICByZXR1cm4gc2VsZi5jaGF0Q2xpZW50LmRpc2Nvbm5lY3RDaGF0KGNvbm5lY3Rpb25Ub2tlbikudGhlbihcbiAgICAgIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIHNlbGYubG9nZ2VyLmluZm8oXCJkaXNjb25uZWN0IHBhcnRpY2lwYW50IHN1Y2Nlc3NmdWxcIik7XG4gICAgICAgIHNlbGYuX3BhcnRpY2lwYW50RGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKFwiZGlzY29ubmVjdCBwYXJ0aWNpcGFudCBmYWlsZWQgd2l0aCBlcnJvcjogXCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgZ2V0Q2hhdERldGFpbHMoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiB7XG4gICAgICBpbnRpYWxDb250YWN0SWQ6IHNlbGYuaW50aWFsQ29udGFjdElkLFxuICAgICAgY29udGFjdElkOiBzZWxmLmNvbnRhY3RJZCxcbiAgICAgIHBhcnRpY2lwYW50SWQ6IHNlbGYucGFydGljaXBhbnRJZCxcbiAgICAgIHBhcnRpY2lwYW50VG9rZW46IHNlbGYucGFydGljaXBhbnRUb2tlbixcbiAgICAgIGNvbm5lY3Rpb25EZXRhaWxzOiBzZWxmLmNvbm5lY3Rpb25EZXRhaWxzXG4gICAgfTtcbiAgfVxuXG4gIF9jb252ZXJ0Q29ubmVjdGlvbkhlbHBlclN0YXR1cyhjb25uZWN0aW9uSGVscGVyU3RhdHVzKSB7XG4gICAgc3dpdGNoIChjb25uZWN0aW9uSGVscGVyU3RhdHVzKSB7XG4gICAgICBjYXNlIENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuTmV2ZXJTdGFydGVkOlxuICAgICAgICByZXR1cm4gTmV0d29ya0xpbmtTdGF0dXMuTmV2ZXJFc3RhYmxpc2hlZDtcbiAgICAgIGNhc2UgQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5TdGFydGluZzpcbiAgICAgICAgcmV0dXJuIE5ldHdvcmtMaW5rU3RhdHVzLkVzdGFibGlzaGluZztcbiAgICAgIGNhc2UgQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5FbmRlZDpcbiAgICAgICAgcmV0dXJuIE5ldHdvcmtMaW5rU3RhdHVzLkJyb2tlbjtcbiAgICAgIGNhc2UgQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5Db25uZWN0ZWQ6XG4gICAgICAgIHJldHVybiBOZXR3b3JrTGlua1N0YXR1cy5Fc3RhYmxpc2hlZDtcbiAgICB9XG4gICAgc2VsZi5sb2dnZXIuZXJyb3IoXG4gICAgICBcIlJlYWNoZWQgaW52YWxpZCBzdGF0ZS4gVW5rbm93biBjb25uZWN0aW9uSGVscGVyU3RhdHVzOiBcIixcbiAgICAgIGNvbm5lY3Rpb25IZWxwZXJTdGF0dXNcbiAgICApO1xuICB9XG5cbiAgZ2V0Q29ubmVjdGlvblN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udmVydENvbm5lY3Rpb25IZWxwZXJTdGF0dXMoXG4gICAgICB0aGlzLmNvbm5lY3Rpb25IZWxwZXIuZ2V0U3RhdHVzKClcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7IFBlcnNpc3RlbnRDb25uZWN0aW9uQW5kQ2hhdFNlcnZpY2VDb250cm9sbGVyLCBOZXR3b3JrTGlua1N0YXR1cyB9O1xuIiwiaW1wb3J0IHtcbiAgVW5JbXBsZW1lbnRlZE1ldGhvZEV4Y2VwdGlvbixcbiAgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uXG59IGZyb20gXCIuL2V4Y2VwdGlvbnNcIjtcbmltcG9ydCB7IENoYXRDbGllbnRGYWN0b3J5IH0gZnJvbSBcIi4uL2NsaWVudC9jbGllbnRcIjtcbmltcG9ydCB7IENoYXRTZXJ2aWNlQXJnc1ZhbGlkYXRvciB9IGZyb20gXCIuL2NoYXRBcmdzVmFsaWRhdG9yXCI7XG5pbXBvcnQgeyBDaGF0Q29ubmVjdGlvbk1hbmFnZXIgfSBmcm9tIFwiLi9jb25uZWN0aW9uTWFuYWdlclwiO1xuaW1wb3J0IHsgU29sb0NoYXRDb25uZWN0aW9uTXF0dEhlbHBlciB9IGZyb20gXCIuL2Nvbm5lY3Rpb25IZWxwZXJcIjtcbmltcG9ydCB7IFNFU1NJT05fVFlQRVMsIENIQVRfRVZFTlRTIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgRXZlbnRDb25zdHJ1Y3RvciB9IGZyb20gXCIuL2V2ZW50Q29uc3RydWN0b3JcIjtcbmltcG9ydCB7IEV2ZW50QnVzIH0gZnJvbSBcIi4vZXZlbnRidXNcIjtcbmltcG9ydCB7IEdsb2JhbENvbmZpZyB9IGZyb20gXCIuLi9nbG9iYWxDb25maWdcIjtcblxuaW1wb3J0IHsgUGVyc2lzdGVudENvbm5lY3Rpb25BbmRDaGF0U2VydmljZUNvbnRyb2xsZXIgfSBmcm9tIFwiLi9jaGF0Q29udHJvbGxlclwiO1xuaW1wb3J0IHsgTG9nTWFuYWdlciwgTG9nTGV2ZWwsIExvZ2dlciB9IGZyb20gXCIuLi9sb2dcIjtcblxuY2xhc3MgQ2hhdFNlc3Npb25GYWN0b3J5IHtcbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG5cbiAgY3JlYXRlQWdlbnRDaGF0Q29udHJvbGxlcihjaGF0RGV0YWlscywgcGFydGljaXBhbnRUeXBlKSB7XG4gICAgdGhyb3cgbmV3IFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24oXG4gICAgICBcImNyZWF0ZUFnZW50Q2hhdENvbnRyb2xsZXIgaW4gQ2hhdENvbnRyb2xsZXJGYWN0b3J5LlwiXG4gICAgKTtcbiAgfVxuXG4gIGNyZWF0ZUN1c3RvbWVyQ2hhdENvbnRyb2xsZXIoY2hhdERldGFpbHMsIHBhcnRpY2lwYW50VHlwZSkge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFxuICAgICAgXCJjcmVhdGVDdXN0b21lckNoYXRDb250cm9sbGVyIGluIENoYXRDb250cm9sbGVyRmFjdG9yeS5cIlxuICAgICk7XG4gIH1cblxuICBjcmVhdGVDb25uZWN0aW9uSGVscGVyUHJvdmlkZXIoY29ubmVjdGlvbkRldGFpbHMpIHtcbiAgICB0aHJvdyBuZXcgVW5JbXBsZW1lbnRlZE1ldGhvZEV4Y2VwdGlvbihcbiAgICAgIFwiY3JlYXRlSW5jb21pbmdDaGF0Q29udHJvbGxlciBpbiBDaGF0Q29udHJvbGxlckZhY3RvcnlcIlxuICAgICk7XG4gIH1cbiAgLyplc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzKi9cbn1cblxuY2xhc3MgUGVyc2lzdGVudENvbm5lY3Rpb25BbmRDaGF0U2VydmljZVNlc3Npb25GYWN0b3J5IGV4dGVuZHMgQ2hhdFNlc3Npb25GYWN0b3J5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmFyZ3NWYWxpZGF0b3IgPSBuZXcgQ2hhdFNlcnZpY2VBcmdzVmFsaWRhdG9yKCk7XG4gICAgdGhpcy5jaGF0Q29ubmVjdGlvbk1hbmFnZXIgPSBuZXcgQ2hhdENvbm5lY3Rpb25NYW5hZ2VyKCk7XG4gICAgdGhpcy5jaGF0RXZlbnRDb25zdHJ1Y3RvciA9IG5ldyBFdmVudENvbnN0cnVjdG9yKCk7XG4gIH1cblxuICBjcmVhdGVBZ2VudENoYXRTZXNzaW9uKGNoYXREZXRhaWxzLCBvcHRpb25zKSB7XG4gICAgdmFyIGNoYXRDb250cm9sbGVyID0gdGhpcy5fY3JlYXRlQ2hhdFNlc3Npb24oY2hhdERldGFpbHMsIG9wdGlvbnMpO1xuICAgIHJldHVybiBuZXcgQWdlbnRDaGF0U2Vzc2lvbihjaGF0Q29udHJvbGxlcik7XG4gIH1cblxuICBjcmVhdGVDdXN0b21lckNoYXRTZXNzaW9uKGNoYXREZXRhaWxzLCBvcHRpb25zKSB7XG4gICAgdmFyIGNoYXRDb250cm9sbGVyID0gdGhpcy5fY3JlYXRlQ2hhdFNlc3Npb24oY2hhdERldGFpbHMsIG9wdGlvbnMpO1xuICAgIHJldHVybiBuZXcgQ3VzdG9tZXJDaGF0U2Vzc2lvbihjaGF0Q29udHJvbGxlcik7XG4gIH1cblxuICBfY3JlYXRlQ2hhdFNlc3Npb24oY2hhdERldGFpbHNJbnB1dCwgb3B0aW9ucykge1xuICAgIHZhciBjaGF0RGV0YWlscyA9IHRoaXMuX25vcm1hbGl6ZUNoYXREZXRhaWxzKGNoYXREZXRhaWxzSW5wdXQpO1xuICAgIHZhciBoYXNDb25uZWN0aW9uRGV0YWlscyA9IGZhbHNlO1xuICAgIGlmIChjaGF0RGV0YWlscy5jb25uZWN0aW9uRGV0YWlscykge1xuICAgICAgaGFzQ29ubmVjdGlvbkRldGFpbHMgPSB0cnVlO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IHtcbiAgICAgIGNoYXREZXRhaWxzOiBjaGF0RGV0YWlscyxcbiAgICAgIGNoYXRDb250cm9sbGVyRmFjdG9yeTogdGhpcyxcbiAgICAgIGNoYXRFdmVudENvbnN0cnVjdG9yOiB0aGlzLmNoYXRFdmVudENvbnN0cnVjdG9yLFxuICAgICAgcHVic3ViOiBuZXcgRXZlbnRCdXMoKSxcbiAgICAgIGNoYXRDbGllbnQ6IENoYXRDbGllbnRGYWN0b3J5LmdldENhY2hlZENsaWVudChvcHRpb25zKSxcbiAgICAgIGFyZ3NWYWxpZGF0b3I6IHRoaXMuYXJnc1ZhbGlkYXRvcixcbiAgICAgIGhhc0Nvbm5lY3Rpb25EZXRhaWxzOiBoYXNDb25uZWN0aW9uRGV0YWlsc1xuICAgIH07XG4gICAgcmV0dXJuIG5ldyBQZXJzaXN0ZW50Q29ubmVjdGlvbkFuZENoYXRTZXJ2aWNlQ29udHJvbGxlcihhcmdzKTtcbiAgfVxuXG4gIF9ub3JtYWxpemVDaGF0RGV0YWlscyhjaGF0RGV0YWlsc0lucHV0KSB7XG4gICAgaWYgKFxuICAgICAgY2hhdERldGFpbHNJbnB1dC5DaGF0Q29ubmVjdGlvbkF0dHJpYnV0ZXMgJiZcbiAgICAgIGNoYXREZXRhaWxzSW5wdXQuQ2hhdENvbm5lY3Rpb25BdHRyaWJ1dGVzLlBhcnRpY2lwYW50Q3JlZGVudGlhbHNcbiAgICApIHtcbiAgICAgIHRoaXMuYXJnc1ZhbGlkYXRvci52YWxpZGF0ZUluaXRpYXRlQ2hhdFJlc3BvbnNlKGNoYXREZXRhaWxzSW5wdXQpO1xuICAgICAgdmFyIGNoYXREZXRhaWxzID0ge307XG4gICAgICB2YXIgY29ubmVjdGlvbkRldGFpbHMgPSB7fTtcbiAgICAgIGNvbm5lY3Rpb25EZXRhaWxzLmNvbm5lY3Rpb25Ub2tlbiA9XG4gICAgICAgIGNoYXREZXRhaWxzSW5wdXQuQ2hhdENvbm5lY3Rpb25BdHRyaWJ1dGVzLlBhcnRpY2lwYW50Q3JlZGVudGlhbHMuQ29ubmVjdGlvbkF1dGhlbnRpY2F0aW9uVG9rZW47XG4gICAgICBjb25uZWN0aW9uRGV0YWlscy5Db25uZWN0aW9uSWQgPVxuICAgICAgICBjaGF0RGV0YWlsc0lucHV0LkNoYXRDb25uZWN0aW9uQXR0cmlidXRlcy5Db25uZWN0aW9uSWQ7XG4gICAgICBjb25uZWN0aW9uRGV0YWlscy5QcmVTaWduZWRDb25uZWN0aW9uVXJsID1cbiAgICAgICAgY2hhdERldGFpbHNJbnB1dC5DaGF0Q29ubmVjdGlvbkF0dHJpYnV0ZXMuUHJlU2lnbmVkQ29ubmVjdGlvblVybDtcbiAgICAgIGNoYXREZXRhaWxzLmNvbm5lY3Rpb25EZXRhaWxzID0gY29ubmVjdGlvbkRldGFpbHM7XG4gICAgICBjaGF0RGV0YWlscy5wYXJ0aWNpcGFudElkID0gY2hhdERldGFpbHNJbnB1dC5QYXJ0aWNpcGFudElkO1xuICAgICAgY2hhdERldGFpbHMuY29udGFjdElkID0gY2hhdERldGFpbHNJbnB1dC5Db250YWN0SWQ7XG4gICAgICBjaGF0RGV0YWlscy5pbml0aWFsQ29udGFjdElkID0gY2hhdERldGFpbHNJbnB1dC5Db250YWN0SWQ7XG4gICAgICByZXR1cm4gY2hhdERldGFpbHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXJnc1ZhbGlkYXRvci52YWxpZGF0ZUNoYXREZXRhaWxzKGNoYXREZXRhaWxzSW5wdXQpO1xuICAgICAgcmV0dXJuIGNoYXREZXRhaWxzSW5wdXQ7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlQ29ubmVjdGlvbkhlbHBlclByb3ZpZGVyKGNvbm5lY3Rpb25EZXRhaWxzLCBjb250YWN0SWQpIHtcbiAgICAvL2xhdGVyIHJldHVybiBiYXNlZCBvbiB0aGUgdHlwZSBhcmd1bWVudFxuICAgIHZhciBjb25uZWN0aW9uQXJncyA9IHtcbiAgICAgIHByZVNpZ25lZFVybDogY29ubmVjdGlvbkRldGFpbHMuUHJlU2lnbmVkQ29ubmVjdGlvblVybCxcbiAgICAgIGNvbm5lY3Rpb25JZDogY29ubmVjdGlvbkRldGFpbHMuQ29ubmVjdGlvbklkXG4gICAgfTtcbiAgICB2YXIgbXF0dENvbm5lY3Rpb25Qcm92aWRlciA9IHRoaXMuY2hhdENvbm5lY3Rpb25NYW5hZ2VyLmNyZWF0ZU5ld01xdHRDb25uZWN0aW9uUHJvdmlkZXIoXG4gICAgICBjb25uZWN0aW9uQXJncyxcbiAgICAgIFwiUGFob01xdHRDb25uZWN0aW9uXCJcbiAgICApO1xuICAgIHZhciBhcmdzID0ge1xuICAgICAgbXF0dENvbm5lY3Rpb25Qcm92aWRlcjogbXF0dENvbm5lY3Rpb25Qcm92aWRlcixcbiAgICAgIGNvbm5lY3Rpb25EZXRhaWxzOiB7XG4gICAgICAgIHByZVNpZ25lZFVybDogY29ubmVjdGlvbkRldGFpbHMuUHJlU2lnbmVkQ29ubmVjdGlvblVybCxcbiAgICAgICAgY29ubmVjdGlvbklkOiBjb25uZWN0aW9uRGV0YWlscy5Db25uZWN0aW9uSWRcbiAgICAgIH0sXG4gICAgICBjb250YWN0SWQ6IGNvbnRhY3RJZFxuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICBhcmdzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICByZXR1cm4gbmV3IFNvbG9DaGF0Q29ubmVjdGlvbk1xdHRIZWxwZXIoYXJncyk7XG4gICAgfTtcbiAgfVxufVxuXG5jbGFzcyBDaGF0U2Vzc2lvbiB7XG4gIGNvbnN0cnVjdG9yKGNvbnRyb2xsZXIpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xuICB9XG5cbiAgb25NZXNzYWdlKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jb250cm9sbGVyLnN1YnNjcmliZShDSEFUX0VWRU5UUy5JTkNPTUlOR19NRVNTQUdFLCBjYWxsYmFjayk7XG4gIH1cblxuICBvblR5cGluZyhjYWxsYmFjaykge1xuICAgIHRoaXMuY29udHJvbGxlci5zdWJzY3JpYmUoQ0hBVF9FVkVOVFMuSU5DT01JTkdfVFlQSU5HLCBjYWxsYmFjayk7XG4gIH1cblxuICBvbkNvbm5lY3Rpb25Ccm9rZW4oY2FsbGJhY2spIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuc3Vic2NyaWJlKENIQVRfRVZFTlRTLkNPTk5FQ1RJT05fQlJPS0VOLCBjYWxsYmFjayk7XG4gIH1cblxuICBvbkNvbm5lY3Rpb25Fc3RhYmxpc2hlZChjYWxsYmFjaykge1xuICAgIHRoaXMuY29udHJvbGxlci5zdWJzY3JpYmUoQ0hBVF9FVkVOVFMuQ09OTkVDVElPTl9FU1RBQkxJU0hFRCwgY2FsbGJhY2spO1xuICB9XG5cbiAgc2VuZE1lc3NhZ2UoYXJncykge1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2xsZXIuc2VuZE1lc3NhZ2UoYXJncyk7XG4gIH1cblxuICBjb25uZWN0KGFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sbGVyLmNvbm5lY3QoYXJncyk7XG4gIH1cblxuICBzZW5kRXZlbnQoYXJncykge1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2xsZXIuc2VuZEV2ZW50KGFyZ3MpO1xuICB9XG5cbiAgZ2V0VHJhbnNjcmlwdChhcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbGxlci5nZXRUcmFuc2NyaXB0KGFyZ3MpO1xuICB9XG5cbiAgZ2V0Q2hhdERldGFpbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbGxlci5nZXRDaGF0RGV0YWlscygpO1xuICB9XG59XG5cbmNsYXNzIEFnZW50Q2hhdFNlc3Npb24gZXh0ZW5kcyBDaGF0U2Vzc2lvbiB7XG4gIGNvbnN0cnVjdG9yKGNvbnRyb2xsZXIpIHtcbiAgICBzdXBlcihjb250cm9sbGVyKTtcbiAgfVxuXG4gIGNsZWFuVXBPblBhcnRpY2lwYW50RGlzY29ubmVjdCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sbGVyLmNsZWFuVXBPblBhcnRpY2lwYW50RGlzY29ubmVjdCgpO1xuICB9XG59XG5cbmNsYXNzIEN1c3RvbWVyQ2hhdFNlc3Npb24gZXh0ZW5kcyBDaGF0U2Vzc2lvbiB7XG4gIGNvbnN0cnVjdG9yKGNvbnRyb2xsZXIpIHtcbiAgICBzdXBlcihjb250cm9sbGVyKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RQYXJ0aWNpcGFudCgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbGxlci5kaXNjb25uZWN0UGFydGljaXBhbnQoKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICBzZWxmLmNvbnRyb2xsZXIuY2xlYW5VcE9uUGFydGljaXBhbnREaXNjb25uZWN0KCk7XG4gICAgICBzZWxmLmNvbnRyb2xsZXIuYnJlYWtDb25uZWN0aW9uKCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSk7XG4gIH1cbn1cblxuY29uc3QgQ0hBVF9TRVNTSU9OX0ZBQ1RPUlkgPSBuZXcgUGVyc2lzdGVudENvbm5lY3Rpb25BbmRDaGF0U2VydmljZVNlc3Npb25GYWN0b3J5KCk7XG5cbnZhciBzZXRHbG9iYWxDb25maWcgPSBjb25maWcgPT4ge1xuICB2YXIgbG9nZ2VyQ29uZmlnID0gY29uZmlnLmxvZ2dlckNvbmZpZztcbiAgR2xvYmFsQ29uZmlnLnVwZGF0ZShjb25maWcpO1xuICBMb2dNYW5hZ2VyLnVwZGF0ZUxvZ2dlckNvbmZpZyhsb2dnZXJDb25maWcpO1xufTtcblxudmFyIENoYXRTZXNzaW9uQ29uc3RydWN0b3IgPSBhcmdzID0+IHtcbiAgdmFyIG9wdGlvbnMgPSBhcmdzLm9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gYXJncy50eXBlIHx8IFNFU1NJT05fVFlQRVMuQUdFTlQ7XG4gIGlmICh0eXBlID09PSBTRVNTSU9OX1RZUEVTLkFHRU5UKSB7XG4gICAgcmV0dXJuIENIQVRfU0VTU0lPTl9GQUNUT1JZLmNyZWF0ZUFnZW50Q2hhdFNlc3Npb24oXG4gICAgICBhcmdzLmNoYXREZXRhaWxzLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gU0VTU0lPTl9UWVBFUy5DVVNUT01FUikge1xuICAgIHJldHVybiBDSEFUX1NFU1NJT05fRkFDVE9SWS5jcmVhdGVDdXN0b21lckNoYXRTZXNzaW9uKFxuICAgICAgYXJncy5jaGF0RGV0YWlscyxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oXG4gICAgICBcIlVua293biB2YWx1ZSBmb3Igc2Vzc2lvbiB0eXBlLCBBbGxvd2VkIHZhbHVlcyBhcmU6IFwiICtcbiAgICAgICAgT2JqZWN0LnZhbHVlcyhTRVNTSU9OX1RZUEVTKSxcbiAgICAgIHR5cGVcbiAgICApO1xuICB9XG59O1xuXG5jb25zdCBDaGF0U2Vzc2lvbk9iamVjdCA9IHtcbiAgY3JlYXRlOiBDaGF0U2Vzc2lvbkNvbnN0cnVjdG9yLFxuICBzZXRHbG9iYWxDb25maWc6IHNldEdsb2JhbENvbmZpZyxcbiAgTG9nTGV2ZWw6IExvZ0xldmVsLFxuICBMb2dnZXI6IExvZ2dlcixcbiAgU2Vzc2lvblR5cGVzOiBTRVNTSU9OX1RZUEVTXG59O1xuXG5leHBvcnQgeyBDaGF0U2Vzc2lvbk9iamVjdCB9O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEJlbG93IGlzIHRoZSBQYWhvIG1xdHQgdmVyc2lvbiAxLjAuMVxuLy8gUGxlYXNlIHRlc3QgcHJvcGVybHkgaWYgeW91IGNoYW5nZSB0aGUgdmVyc2lvbiBvZiB0aGlzIGZpbGUuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IChjKSAyMDEzIElCTSBDb3JwLlxuICpcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHNcbiAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMFxuICogYW5kIEVjbGlwc2UgRGlzdHJpYnV0aW9uIExpY2Vuc2UgdjEuMCB3aGljaCBhY2NvbXBhbnkgdGhpcyBkaXN0cmlidXRpb24uXG4gKlxuICogVGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgaXMgYXZhaWxhYmxlIGF0XG4gKiAgICBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbFxuICogYW5kIHRoZSBFY2xpcHNlIERpc3RyaWJ1dGlvbiBMaWNlbnNlIGlzIGF2YWlsYWJsZSBhdFxuICogICBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL29yZy9kb2N1bWVudHMvZWRsLXYxMC5waHAuXG4gKlxuICogQ29udHJpYnV0b3JzOlxuICogICAgQW5kcmV3IEJhbmtzIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uIGFuZCBpbml0aWFsIGRvY3VtZW50YXRpb25cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vLyBPbmx5IGV4cG9zZSBhIHNpbmdsZSBvYmplY3QgbmFtZSBpbiB0aGUgZ2xvYmFsIG5hbWVzcGFjZS5cbi8vIEV2ZXJ5dGhpbmcgbXVzdCBnbyB0aHJvdWdoIHRoaXMgbW9kdWxlLiBHbG9iYWwgUGFobyBtb2R1bGVcbi8vIG9ubHkgaGFzIGEgc2luZ2xlIHB1YmxpYyBmdW5jdGlvbiwgY2xpZW50LCB3aGljaCByZXR1cm5zXG4vLyBhIFBhaG8gY2xpZW50IG9iamVjdCBnaXZlbiBjb25uZWN0aW9uIGRldGFpbHMuXG5cbi8qKlxuICogU2VuZCBhbmQgcmVjZWl2ZSBtZXNzYWdlcyB1c2luZyB3ZWIgYnJvd3NlcnMuXG4gKiA8cD5cbiAqIFRoaXMgcHJvZ3JhbW1pbmcgaW50ZXJmYWNlIGxldHMgYSBKYXZhU2NyaXB0IGNsaWVudCBhcHBsaWNhdGlvbiB1c2UgdGhlIE1RVFQgVjMuMSBvclxuICogVjMuMS4xIHByb3RvY29sIHRvIGNvbm5lY3QgdG8gYW4gTVFUVC1zdXBwb3J0aW5nIG1lc3NhZ2luZyBzZXJ2ZXIuXG4gKlxuICogVGhlIGZ1bmN0aW9uIHN1cHBvcnRlZCBpbmNsdWRlczpcbiAqIDxvbD5cbiAqIDxsaT5Db25uZWN0aW5nIHRvIGFuZCBkaXNjb25uZWN0aW5nIGZyb20gYSBzZXJ2ZXIuIFRoZSBzZXJ2ZXIgaXMgaWRlbnRpZmllZCBieSBpdHMgaG9zdCBuYW1lIGFuZCBwb3J0IG51bWJlci5cbiAqIDxsaT5TcGVjaWZ5aW5nIG9wdGlvbnMgdGhhdCByZWxhdGUgdG8gdGhlIGNvbW11bmljYXRpb25zIGxpbmsgd2l0aCB0aGUgc2VydmVyLFxuICogZm9yIGV4YW1wbGUgdGhlIGZyZXF1ZW5jeSBvZiBrZWVwLWFsaXZlIGhlYXJ0YmVhdHMsIGFuZCB3aGV0aGVyIFNTTC9UTFMgaXMgcmVxdWlyZWQuXG4gKiA8bGk+U3Vic2NyaWJpbmcgdG8gYW5kIHJlY2VpdmluZyBtZXNzYWdlcyBmcm9tIE1RVFQgVG9waWNzLlxuICogPGxpPlB1Ymxpc2hpbmcgbWVzc2FnZXMgdG8gTVFUVCBUb3BpY3MuXG4gKiA8L29sPlxuICogPHA+XG4gKiBUaGUgQVBJIGNvbnNpc3RzIG9mIHR3byBtYWluIG9iamVjdHM6XG4gKiA8ZGw+XG4gKiA8ZHQ+PGI+e0BsaW5rIFBhaG8uQ2xpZW50fTwvYj48L2R0PlxuICogPGRkPlRoaXMgY29udGFpbnMgbWV0aG9kcyB0aGF0IHByb3ZpZGUgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIEFQSSxcbiAqIGluY2x1ZGluZyBwcm92aXNpb24gb2YgY2FsbGJhY2tzIHRoYXQgbm90aWZ5IHRoZSBhcHBsaWNhdGlvbiB3aGVuIGEgbWVzc2FnZVxuICogYXJyaXZlcyBmcm9tIG9yIGlzIGRlbGl2ZXJlZCB0byB0aGUgbWVzc2FnaW5nIHNlcnZlcixcbiAqIG9yIHdoZW4gdGhlIHN0YXR1cyBvZiBpdHMgY29ubmVjdGlvbiB0byB0aGUgbWVzc2FnaW5nIHNlcnZlciBjaGFuZ2VzLjwvZGQ+XG4gKiA8ZHQ+PGI+e0BsaW5rIFBhaG8uTWVzc2FnZX08L2I+PC9kdD5cbiAqIDxkZD5UaGlzIGVuY2Fwc3VsYXRlcyB0aGUgcGF5bG9hZCBvZiB0aGUgbWVzc2FnZSBhbG9uZyB3aXRoIHZhcmlvdXMgYXR0cmlidXRlc1xuICogYXNzb2NpYXRlZCB3aXRoIGl0cyBkZWxpdmVyeSwgaW4gcGFydGljdWxhciB0aGUgZGVzdGluYXRpb24gdG8gd2hpY2ggaXQgaGFzXG4gKiBiZWVuIChvciBpcyBhYm91dCB0byBiZSkgc2VudC48L2RkPlxuICogPC9kbD5cbiAqIDxwPlxuICogVGhlIHByb2dyYW1taW5nIGludGVyZmFjZSB2YWxpZGF0ZXMgcGFyYW1ldGVycyBwYXNzZWQgdG8gaXQsIGFuZCB3aWxsIHRocm93XG4gKiBhbiBFcnJvciBjb250YWluaW5nIGFuIGVycm9yIG1lc3NhZ2UgaW50ZW5kZWQgZm9yIGRldmVsb3BlciB1c2UsIGlmIGl0IGRldGVjdHNcbiAqIGFuIGVycm9yIHdpdGggYW55IHBhcmFtZXRlci5cbiAqIDxwPlxuICogRXhhbXBsZTpcbiAqXG4gKiA8Y29kZT48cHJlPlxudmFyIGNsaWVudCA9IG5ldyBQYWhvLk1RVFQuQ2xpZW50KGxvY2F0aW9uLmhvc3RuYW1lLCBOdW1iZXIobG9jYXRpb24ucG9ydCksIFwiY2xpZW50SWRcIik7XG5jbGllbnQub25Db25uZWN0aW9uTG9zdCA9IG9uQ29ubmVjdGlvbkxvc3Q7XG5jbGllbnQub25NZXNzYWdlQXJyaXZlZCA9IG9uTWVzc2FnZUFycml2ZWQ7XG5jbGllbnQuY29ubmVjdCh7b25TdWNjZXNzOm9uQ29ubmVjdH0pO1xuXG5mdW5jdGlvbiBvbkNvbm5lY3QoKSB7XG4gIC8vIE9uY2UgYSBjb25uZWN0aW9uIGhhcyBiZWVuIG1hZGUsIG1ha2UgYSBzdWJzY3JpcHRpb24gYW5kIHNlbmQgYSBtZXNzYWdlLlxuICBjb25zb2xlLmxvZyhcIm9uQ29ubmVjdFwiKTtcbiAgY2xpZW50LnN1YnNjcmliZShcIi9Xb3JsZFwiKTtcbiAgdmFyIG1lc3NhZ2UgPSBuZXcgUGFoby5NUVRULk1lc3NhZ2UoXCJIZWxsb1wiKTtcbiAgbWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUgPSBcIi9Xb3JsZFwiO1xuICBjbGllbnQuc2VuZChtZXNzYWdlKTtcbn07XG5mdW5jdGlvbiBvbkNvbm5lY3Rpb25Mb3N0KHJlc3BvbnNlT2JqZWN0KSB7XG4gIGlmIChyZXNwb25zZU9iamVjdC5lcnJvckNvZGUgIT09IDApXG5cdGNvbnNvbGUubG9nKFwib25Db25uZWN0aW9uTG9zdDpcIityZXNwb25zZU9iamVjdC5lcnJvck1lc3NhZ2UpO1xufTtcbmZ1bmN0aW9uIG9uTWVzc2FnZUFycml2ZWQobWVzc2FnZSkge1xuICBjb25zb2xlLmxvZyhcIm9uTWVzc2FnZUFycml2ZWQ6XCIrbWVzc2FnZS5wYXlsb2FkU3RyaW5nKTtcbiAgY2xpZW50LmRpc2Nvbm5lY3QoKTtcbn07XG4gKiA8L3ByZT48L2NvZGU+XG4gKiBAbmFtZXNwYWNlIFBhaG9cbiAqL1xuXG4vKiBqc2hpbnQgc2hhZG93OnRydWUgKi9cbihmdW5jdGlvbiBFeHBvcnRMaWJyYXJ5KHJvb3QsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgIGV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy9pZiAodHlwZW9mIHJvb3QuUGFobyA9PT0gXCJ1bmRlZmluZWRcIil7XG4gICAgLy9cdHJvb3QuUGFobyA9IHt9O1xuICAgIC8vfVxuICAgIHJvb3QuUGFobyA9IGZhY3RvcnkoKTtcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gTGlicmFyeUZhY3RvcnkoKSB7XG4gIHZhciBQYWhvTVFUVCA9IChmdW5jdGlvbihnbG9iYWwpIHtcbiAgICAvLyBQcml2YXRlIHZhcmlhYmxlcyBiZWxvdywgdGhlc2UgYXJlIG9ubHkgdmlzaWJsZSBpbnNpZGUgdGhlIGZ1bmN0aW9uIGNsb3N1cmVcbiAgICAvLyB3aGljaCBpcyB1c2VkIHRvIGRlZmluZSB0aGUgbW9kdWxlLlxuICAgIHZhciB2ZXJzaW9uID0gXCJAVkVSU0lPTkAtQEJVSUxETEVWRUxAXCI7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHZhciBsb2NhbFN0b3JhZ2UgPVxuICAgICAgZ2xvYmFsLmxvY2FsU3RvcmFnZSB8fFxuICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGF0YSA9IHt9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2V0SXRlbTogZnVuY3Rpb24oa2V5LCBpdGVtKSB7XG4gICAgICAgICAgICBkYXRhW2tleV0gPSBpdGVtO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0SXRlbTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVtb3ZlSXRlbTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBkZWxldGUgZGF0YVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pKCk7XG5cbiAgICAvKipcbiAgICAgKiBVbmlxdWUgbWVzc2FnZSB0eXBlIGlkZW50aWZpZXJzLCB3aXRoIGFzc29jaWF0ZWRcbiAgICAgKiBhc3NvY2lhdGVkIGludGVnZXIgdmFsdWVzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdmFyIE1FU1NBR0VfVFlQRSA9IHtcbiAgICAgIENPTk5FQ1Q6IDEsXG4gICAgICBDT05OQUNLOiAyLFxuICAgICAgUFVCTElTSDogMyxcbiAgICAgIFBVQkFDSzogNCxcbiAgICAgIFBVQlJFQzogNSxcbiAgICAgIFBVQlJFTDogNixcbiAgICAgIFBVQkNPTVA6IDcsXG4gICAgICBTVUJTQ1JJQkU6IDgsXG4gICAgICBTVUJBQ0s6IDksXG4gICAgICBVTlNVQlNDUklCRTogMTAsXG4gICAgICBVTlNVQkFDSzogMTEsXG4gICAgICBQSU5HUkVROiAxMixcbiAgICAgIFBJTkdSRVNQOiAxMyxcbiAgICAgIERJU0NPTk5FQ1Q6IDE0XG4gICAgfTtcblxuICAgIC8vIENvbGxlY3Rpb24gb2YgdXRpbGl0eSBtZXRob2RzIHVzZWQgdG8gc2ltcGxpZnkgbW9kdWxlIGNvZGVcbiAgICAvLyBhbmQgcHJvbW90ZSB0aGUgRFJZIHBhdHRlcm4uXG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSBhbiBvYmplY3QncyBwYXJhbWV0ZXIgbmFtZXMgdG8gZW5zdXJlIHRoZXlcbiAgICAgKiBtYXRjaCBhIGxpc3Qgb2YgZXhwZWN0ZWQgdmFyaWFibGVzIG5hbWUgZm9yIHRoaXMgb3B0aW9uXG4gICAgICogdHlwZS4gVXNlZCB0byBlbnN1cmUgb3B0aW9uIG9iamVjdCBwYXNzZWQgaW50byB0aGUgQVBJIGRvbid0XG4gICAgICogY29udGFpbiBlcnJvbmVvdXMgcGFyYW1ldGVycy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gVXNlciBvcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBrZXlzIC0gdmFsaWQga2V5cyBhbmQgdHlwZXMgdGhhdCBtYXkgZXhpc3QgaW4gb2JqLlxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJbnZhbGlkIG9wdGlvbiBwYXJhbWV0ZXIgZm91bmQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbihvYmosIGtleXMpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaWYgKGtleXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmpba2V5XSAhPT0ga2V5c1trZXldKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfVFlQRSwgW3R5cGVvZiBvYmpba2V5XSwga2V5XSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGVycm9yU3RyID1cbiAgICAgICAgICAgICAgXCJVbmtub3duIHByb3BlcnR5LCBcIiArIGtleSArIFwiLiBWYWxpZCBwcm9wZXJ0aWVzIGFyZTpcIjtcbiAgICAgICAgICAgIGZvciAodmFyIHZhbGlkS2V5IGluIGtleXMpXG4gICAgICAgICAgICAgIGlmIChrZXlzLmhhc093blByb3BlcnR5KHZhbGlkS2V5KSlcbiAgICAgICAgICAgICAgICBlcnJvclN0ciA9IGVycm9yU3RyICsgXCIgXCIgKyB2YWxpZEtleTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIG5ldyBmdW5jdGlvbiB3aGljaCBydW5zIHRoZSB1c2VyIGZ1bmN0aW9uIGJvdW5kXG4gICAgICogdG8gYSBmaXhlZCBzY29wZS5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBVc2VyIGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtvYmplY3R9IEZ1bmN0aW9uIHNjb3BlXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259IFVzZXIgZnVuY3Rpb24gYm91bmQgdG8gYW5vdGhlciBzY29wZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdmFyIHNjb3BlID0gZnVuY3Rpb24oZiwgc2NvcGUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGYuYXBwbHkoc2NvcGUsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVbmlxdWUgbWVzc2FnZSB0eXBlIGlkZW50aWZpZXJzLCB3aXRoIGFzc29jaWF0ZWRcbiAgICAgKiBhc3NvY2lhdGVkIGludGVnZXIgdmFsdWVzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdmFyIEVSUk9SID0ge1xuICAgICAgT0s6IHsgY29kZTogMCwgdGV4dDogXCJBTVFKU0MwMDAwSSBPSy5cIiB9LFxuICAgICAgQ09OTkVDVF9USU1FT1VUOiB7IGNvZGU6IDEsIHRleHQ6IFwiQU1RSlNDMDAwMUUgQ29ubmVjdCB0aW1lZCBvdXQuXCIgfSxcbiAgICAgIFNVQlNDUklCRV9USU1FT1VUOiB7IGNvZGU6IDIsIHRleHQ6IFwiQU1RSlMwMDAyRSBTdWJzY3JpYmUgdGltZWQgb3V0LlwiIH0sXG4gICAgICBVTlNVQlNDUklCRV9USU1FT1VUOiB7XG4gICAgICAgIGNvZGU6IDMsXG4gICAgICAgIHRleHQ6IFwiQU1RSlMwMDAzRSBVbnN1YnNjcmliZSB0aW1lZCBvdXQuXCJcbiAgICAgIH0sXG4gICAgICBQSU5HX1RJTUVPVVQ6IHsgY29kZTogNCwgdGV4dDogXCJBTVFKUzAwMDRFIFBpbmcgdGltZWQgb3V0LlwiIH0sXG4gICAgICBJTlRFUk5BTF9FUlJPUjoge1xuICAgICAgICBjb2RlOiA1LFxuICAgICAgICB0ZXh0OiBcIkFNUUpTMDAwNUUgSW50ZXJuYWwgZXJyb3IuIEVycm9yIE1lc3NhZ2U6IHswfSwgU3RhY2sgdHJhY2U6IHsxfVwiXG4gICAgICB9LFxuICAgICAgQ09OTkFDS19SRVRVUk5DT0RFOiB7XG4gICAgICAgIGNvZGU6IDYsXG4gICAgICAgIHRleHQ6IFwiQU1RSlMwMDA2RSBCYWQgQ29ubmFjayByZXR1cm4gY29kZTp7MH0gezF9LlwiXG4gICAgICB9LFxuICAgICAgU09DS0VUX0VSUk9SOiB7IGNvZGU6IDcsIHRleHQ6IFwiQU1RSlMwMDA3RSBTb2NrZXQgZXJyb3I6ezB9LlwiIH0sXG4gICAgICBTT0NLRVRfQ0xPU0U6IHsgY29kZTogOCwgdGV4dDogXCJBTVFKUzAwMDhJIFNvY2tldCBjbG9zZWQuXCIgfSxcbiAgICAgIE1BTEZPUk1FRF9VVEY6IHtcbiAgICAgICAgY29kZTogOSxcbiAgICAgICAgdGV4dDogXCJBTVFKUzAwMDlFIE1hbGZvcm1lZCBVVEYgZGF0YTp7MH0gezF9IHsyfS5cIlxuICAgICAgfSxcbiAgICAgIFVOU1VQUE9SVEVEOiB7XG4gICAgICAgIGNvZGU6IDEwLFxuICAgICAgICB0ZXh0OiBcIkFNUUpTMDAxMEUgezB9IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyLlwiXG4gICAgICB9LFxuICAgICAgSU5WQUxJRF9TVEFURTogeyBjb2RlOiAxMSwgdGV4dDogXCJBTVFKUzAwMTFFIEludmFsaWQgc3RhdGUgezB9LlwiIH0sXG4gICAgICBJTlZBTElEX1RZUEU6IHsgY29kZTogMTIsIHRleHQ6IFwiQU1RSlMwMDEyRSBJbnZhbGlkIHR5cGUgezB9IGZvciB7MX0uXCIgfSxcbiAgICAgIElOVkFMSURfQVJHVU1FTlQ6IHtcbiAgICAgICAgY29kZTogMTMsXG4gICAgICAgIHRleHQ6IFwiQU1RSlMwMDEzRSBJbnZhbGlkIGFyZ3VtZW50IHswfSBmb3IgezF9LlwiXG4gICAgICB9LFxuICAgICAgVU5TVVBQT1JURURfT1BFUkFUSU9OOiB7XG4gICAgICAgIGNvZGU6IDE0LFxuICAgICAgICB0ZXh0OiBcIkFNUUpTMDAxNEUgVW5zdXBwb3J0ZWQgb3BlcmF0aW9uLlwiXG4gICAgICB9LFxuICAgICAgSU5WQUxJRF9TVE9SRURfREFUQToge1xuICAgICAgICBjb2RlOiAxNSxcbiAgICAgICAgdGV4dDogXCJBTVFKUzAwMTVFIEludmFsaWQgZGF0YSBpbiBsb2NhbCBzdG9yYWdlIGtleT17MH0gdmFsdWU9ezF9LlwiXG4gICAgICB9LFxuICAgICAgSU5WQUxJRF9NUVRUX01FU1NBR0VfVFlQRToge1xuICAgICAgICBjb2RlOiAxNixcbiAgICAgICAgdGV4dDogXCJBTVFKUzAwMTZFIEludmFsaWQgTVFUVCBtZXNzYWdlIHR5cGUgezB9LlwiXG4gICAgICB9LFxuICAgICAgTUFMRk9STUVEX1VOSUNPREU6IHtcbiAgICAgICAgY29kZTogMTcsXG4gICAgICAgIHRleHQ6IFwiQU1RSlMwMDE3RSBNYWxmb3JtZWQgVW5pY29kZSBzdHJpbmc6ezB9IHsxfS5cIlxuICAgICAgfSxcbiAgICAgIEJVRkZFUl9GVUxMOiB7XG4gICAgICAgIGNvZGU6IDE4LFxuICAgICAgICB0ZXh0OiBcIkFNUUpTMDAxOEUgTWVzc2FnZSBidWZmZXIgaXMgZnVsbCwgbWF4aW11bSBidWZmZXIgc2l6ZTogezB9LlwiXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKiBDT05OQUNLIFJDIE1lYW5pbmcuICovXG4gICAgdmFyIENPTk5BQ0tfUkMgPSB7XG4gICAgICAwOiBcIkNvbm5lY3Rpb24gQWNjZXB0ZWRcIixcbiAgICAgIDE6IFwiQ29ubmVjdGlvbiBSZWZ1c2VkOiB1bmFjY2VwdGFibGUgcHJvdG9jb2wgdmVyc2lvblwiLFxuICAgICAgMjogXCJDb25uZWN0aW9uIFJlZnVzZWQ6IGlkZW50aWZpZXIgcmVqZWN0ZWRcIixcbiAgICAgIDM6IFwiQ29ubmVjdGlvbiBSZWZ1c2VkOiBzZXJ2ZXIgdW5hdmFpbGFibGVcIixcbiAgICAgIDQ6IFwiQ29ubmVjdGlvbiBSZWZ1c2VkOiBiYWQgdXNlciBuYW1lIG9yIHBhc3N3b3JkXCIsXG4gICAgICA1OiBcIkNvbm5lY3Rpb24gUmVmdXNlZDogbm90IGF1dGhvcml6ZWRcIlxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGb3JtYXQgYW4gZXJyb3IgbWVzc2FnZSB0ZXh0LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtlcnJvcn0gRVJST1IgdmFsdWUgYWJvdmUuXG4gICAgICogQHBhcmFtIHtzdWJzdGl0dXRpb25zfSBbYXJyYXldIHN1YnN0aXR1dGVkIGludG8gdGhlIHRleHQuXG4gICAgICogQHJldHVybiB0aGUgdGV4dCB3aXRoIHRoZSBzdWJzdGl0dXRpb25zIG1hZGUuXG4gICAgICovXG4gICAgdmFyIGZvcm1hdCA9IGZ1bmN0aW9uKGVycm9yLCBzdWJzdGl0dXRpb25zKSB7XG4gICAgICB2YXIgdGV4dCA9IGVycm9yLnRleHQ7XG4gICAgICBpZiAoc3Vic3RpdHV0aW9ucykge1xuICAgICAgICB2YXIgZmllbGQsIHN0YXJ0O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnN0aXR1dGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBmaWVsZCA9IFwie1wiICsgaSArIFwifVwiO1xuICAgICAgICAgIHN0YXJ0ID0gdGV4dC5pbmRleE9mKGZpZWxkKTtcbiAgICAgICAgICBpZiAoc3RhcnQgPiAwKSB7XG4gICAgICAgICAgICB2YXIgcGFydDEgPSB0ZXh0LnN1YnN0cmluZygwLCBzdGFydCk7XG4gICAgICAgICAgICB2YXIgcGFydDIgPSB0ZXh0LnN1YnN0cmluZyhzdGFydCArIGZpZWxkLmxlbmd0aCk7XG4gICAgICAgICAgICB0ZXh0ID0gcGFydDEgKyBzdWJzdGl0dXRpb25zW2ldICsgcGFydDI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9O1xuXG4gICAgLy9NUVRUIHByb3RvY29sIGFuZCB2ZXJzaW9uICAgICAgICAgIDYgICAgTSAgICBRICAgIEkgICAgcyAgICBkICAgIHAgICAgM1xuICAgIHZhciBNcXR0UHJvdG9JZGVudGlmaWVydjMgPSBbXG4gICAgICAweDAwLFxuICAgICAgMHgwNixcbiAgICAgIDB4NGQsXG4gICAgICAweDUxLFxuICAgICAgMHg0OSxcbiAgICAgIDB4NzMsXG4gICAgICAweDY0LFxuICAgICAgMHg3MCxcbiAgICAgIDB4MDNcbiAgICBdO1xuICAgIC8vTVFUVCBwcm90by92ZXJzaW9uIGZvciAzMTEgICAgICAgICA0ICAgIE0gICAgUSAgICBUICAgIFQgICAgNFxuICAgIHZhciBNcXR0UHJvdG9JZGVudGlmaWVydjQgPSBbMHgwMCwgMHgwNCwgMHg0ZCwgMHg1MSwgMHg1NCwgMHg1NCwgMHgwNF07XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYW4gTVFUVCB3aXJlIHByb3RvY29sIG1lc3NhZ2UuXG4gICAgICogQHBhcmFtIHR5cGUgTVFUVCBwYWNrZXQgdHlwZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBvcHRpb25hbCB3aXJlIG1lc3NhZ2UgYXR0cmlidXRlcy5cbiAgICAgKlxuICAgICAqIE9wdGlvbmFsIHByb3BlcnRpZXNcbiAgICAgKlxuICAgICAqIG1lc3NhZ2VJZGVudGlmaWVyOiBtZXNzYWdlIElEIGluIHRoZSByYW5nZSBbMC4uNjU1MzVdXG4gICAgICogcGF5bG9hZE1lc3NhZ2U6XHRBcHBsaWNhdGlvbiBNZXNzYWdlIC0gUFVCTElTSCBvbmx5XG4gICAgICogY29ubmVjdFN0cmluZ3M6XHRhcnJheSBvZiAwIG9yIG1vcmUgU3RyaW5ncyB0byBiZSBwdXQgaW50byB0aGUgQ09OTkVDVCBwYXlsb2FkXG4gICAgICogdG9waWNzOlx0XHRcdGFycmF5IG9mIHN0cmluZ3MgKFNVQlNDUklCRSwgVU5TVUJTQ1JJQkUpXG4gICAgICogcmVxdWVzdFFvUzpcdFx0YXJyYXkgb2YgUW9TIHZhbHVlcyBbMC4uMl1cbiAgICAgKlxuICAgICAqIFwiRmxhZ1wiIHByb3BlcnRpZXNcbiAgICAgKiBjbGVhblNlc3Npb246XHR0cnVlIGlmIHByZXNlbnQgLyBmYWxzZSBpZiBhYnNlbnQgKENPTk5FQ1QpXG4gICAgICogd2lsbE1lc3NhZ2U6ICBcdHRydWUgaWYgcHJlc2VudCAvIGZhbHNlIGlmIGFic2VudCAoQ09OTkVDVClcbiAgICAgKiBpc1JldGFpbmVkOlx0XHR0cnVlIGlmIHByZXNlbnQgLyBmYWxzZSBpZiBhYnNlbnQgKENPTk5FQ1QpXG4gICAgICogdXNlck5hbWU6XHRcdHRydWUgaWYgcHJlc2VudCAvIGZhbHNlIGlmIGFic2VudCAoQ09OTkVDVClcbiAgICAgKiBwYXNzd29yZDpcdFx0dHJ1ZSBpZiBwcmVzZW50IC8gZmFsc2UgaWYgYWJzZW50IChDT05ORUNUKVxuICAgICAqIGtlZXBBbGl2ZUludGVydmFsOlx0aW50ZWdlciBbMC4uNjU1MzVdICAoQ09OTkVDVClcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHZhciBXaXJlTWVzc2FnZSA9IGZ1bmN0aW9uKHR5cGUsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICB0aGlzW25hbWVdID0gb3B0aW9uc1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBXaXJlTWVzc2FnZS5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBDb21wdXRlIHRoZSBmaXJzdCBieXRlIG9mIHRoZSBmaXhlZCBoZWFkZXJcbiAgICAgIHZhciBmaXJzdCA9ICh0aGlzLnR5cGUgJiAweDBmKSA8PCA0O1xuXG4gICAgICAvKlxuICAgICAgICogTm93IGNhbGN1bGF0ZSB0aGUgbGVuZ3RoIG9mIHRoZSB2YXJpYWJsZSBoZWFkZXIgKyBwYXlsb2FkIGJ5IGFkZGluZyB1cCB0aGUgbGVuZ3Roc1xuICAgICAgICogb2YgYWxsIHRoZSBjb21wb25lbnQgcGFydHNcbiAgICAgICAqL1xuXG4gICAgICB2YXIgcmVtTGVuZ3RoID0gMDtcbiAgICAgIHZhciB0b3BpY1N0ckxlbmd0aCA9IFtdO1xuICAgICAgdmFyIGRlc3RpbmF0aW9uTmFtZUxlbmd0aCA9IDA7XG4gICAgICB2YXIgd2lsbE1lc3NhZ2VQYXlsb2FkQnl0ZXM7XG5cbiAgICAgIC8vIGlmIHRoZSBtZXNzYWdlIGNvbnRhaW5zIGEgbWVzc2FnZUlkZW50aWZpZXIgdGhlbiB3ZSBuZWVkIHR3byBieXRlcyBmb3IgdGhhdFxuICAgICAgaWYgKHRoaXMubWVzc2FnZUlkZW50aWZpZXIgIT09IHVuZGVmaW5lZCkgcmVtTGVuZ3RoICs9IDI7XG5cbiAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgIC8vIElmIHRoaXMgYSBDb25uZWN0IHRoZW4gd2UgbmVlZCB0byBpbmNsdWRlIDEyIGJ5dGVzIGZvciBpdHMgaGVhZGVyXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLkNPTk5FQ1Q6XG4gICAgICAgICAgc3dpdGNoICh0aGlzLm1xdHRWZXJzaW9uKSB7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIHJlbUxlbmd0aCArPSBNcXR0UHJvdG9JZGVudGlmaWVydjMubGVuZ3RoICsgMztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgIHJlbUxlbmd0aCArPSBNcXR0UHJvdG9JZGVudGlmaWVydjQubGVuZ3RoICsgMztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVtTGVuZ3RoICs9IFVURjhMZW5ndGgodGhpcy5jbGllbnRJZCkgKyAyO1xuICAgICAgICAgIGlmICh0aGlzLndpbGxNZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlbUxlbmd0aCArPSBVVEY4TGVuZ3RoKHRoaXMud2lsbE1lc3NhZ2UuZGVzdGluYXRpb25OYW1lKSArIDI7XG4gICAgICAgICAgICAvLyBXaWxsIG1lc3NhZ2UgaXMgYWx3YXlzIGEgc3RyaW5nLCBzZW50IGFzIFVURi04IGNoYXJhY3RlcnMgd2l0aCBhIHByZWNlZGluZyBsZW5ndGguXG4gICAgICAgICAgICB3aWxsTWVzc2FnZVBheWxvYWRCeXRlcyA9IHRoaXMud2lsbE1lc3NhZ2UucGF5bG9hZEJ5dGVzO1xuICAgICAgICAgICAgaWYgKCEod2lsbE1lc3NhZ2VQYXlsb2FkQnl0ZXMgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgICAgICAgd2lsbE1lc3NhZ2VQYXlsb2FkQnl0ZXMgPSBuZXcgVWludDhBcnJheShwYXlsb2FkQnl0ZXMpO1xuICAgICAgICAgICAgcmVtTGVuZ3RoICs9IHdpbGxNZXNzYWdlUGF5bG9hZEJ5dGVzLmJ5dGVMZW5ndGggKyAyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy51c2VyTmFtZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVtTGVuZ3RoICs9IFVURjhMZW5ndGgodGhpcy51c2VyTmFtZSkgKyAyO1xuICAgICAgICAgIGlmICh0aGlzLnBhc3N3b3JkICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZW1MZW5ndGggKz0gVVRGOExlbmd0aCh0aGlzLnBhc3N3b3JkKSArIDI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgLy8gU3Vic2NyaWJlLCBVbnN1YnNjcmliZSBjYW4gYm90aCBjb250YWluIHRvcGljIHN0cmluZ3NcbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuU1VCU0NSSUJFOlxuICAgICAgICAgIGZpcnN0IHw9IDB4MDI7IC8vIFFvcyA9IDE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRvcGljcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9waWNTdHJMZW5ndGhbaV0gPSBVVEY4TGVuZ3RoKHRoaXMudG9waWNzW2ldKTtcbiAgICAgICAgICAgIHJlbUxlbmd0aCArPSB0b3BpY1N0ckxlbmd0aFtpXSArIDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlbUxlbmd0aCArPSB0aGlzLnJlcXVlc3RlZFFvcy5sZW5ndGg7IC8vIDEgYnl0ZSBmb3IgZWFjaCB0b3BpYydzIFFvc1xuICAgICAgICAgIC8vIFFvUyBvbiBTdWJzY3JpYmUgb25seVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlVOU1VCU0NSSUJFOlxuICAgICAgICAgIGZpcnN0IHw9IDB4MDI7IC8vIFFvcyA9IDE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRvcGljcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9waWNTdHJMZW5ndGhbaV0gPSBVVEY4TGVuZ3RoKHRoaXMudG9waWNzW2ldKTtcbiAgICAgICAgICAgIHJlbUxlbmd0aCArPSB0b3BpY1N0ckxlbmd0aFtpXSArIDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQlJFTDpcbiAgICAgICAgICBmaXJzdCB8PSAweDAyOyAvLyBRb3MgPSAxO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQkxJU0g6XG4gICAgICAgICAgaWYgKHRoaXMucGF5bG9hZE1lc3NhZ2UuZHVwbGljYXRlKSBmaXJzdCB8PSAweDA4O1xuICAgICAgICAgIGZpcnN0ID0gZmlyc3QgfD0gdGhpcy5wYXlsb2FkTWVzc2FnZS5xb3MgPDwgMTtcbiAgICAgICAgICBpZiAodGhpcy5wYXlsb2FkTWVzc2FnZS5yZXRhaW5lZCkgZmlyc3QgfD0gMHgwMTtcbiAgICAgICAgICBkZXN0aW5hdGlvbk5hbWVMZW5ndGggPSBVVEY4TGVuZ3RoKFxuICAgICAgICAgICAgdGhpcy5wYXlsb2FkTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWVcbiAgICAgICAgICApO1xuICAgICAgICAgIHJlbUxlbmd0aCArPSBkZXN0aW5hdGlvbk5hbWVMZW5ndGggKyAyO1xuICAgICAgICAgIHZhciBwYXlsb2FkQnl0ZXMgPSB0aGlzLnBheWxvYWRNZXNzYWdlLnBheWxvYWRCeXRlcztcbiAgICAgICAgICByZW1MZW5ndGggKz0gcGF5bG9hZEJ5dGVzLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKHBheWxvYWRCeXRlcyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKVxuICAgICAgICAgICAgcGF5bG9hZEJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkocGF5bG9hZEJ5dGVzKTtcbiAgICAgICAgICBlbHNlIGlmICghKHBheWxvYWRCeXRlcyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKVxuICAgICAgICAgICAgcGF5bG9hZEJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkocGF5bG9hZEJ5dGVzLmJ1ZmZlcik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuRElTQ09OTkVDVDpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBOb3cgd2UgY2FuIGFsbG9jYXRlIGEgYnVmZmVyIGZvciB0aGUgbWVzc2FnZVxuXG4gICAgICB2YXIgbWJpID0gZW5jb2RlTUJJKHJlbUxlbmd0aCk7IC8vIENvbnZlcnQgdGhlIGxlbmd0aCB0byBNUVRUIE1CSSBmb3JtYXRcbiAgICAgIHZhciBwb3MgPSBtYmkubGVuZ3RoICsgMTsgLy8gT2Zmc2V0IG9mIHN0YXJ0IG9mIHZhcmlhYmxlIGhlYWRlclxuICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihyZW1MZW5ndGggKyBwb3MpO1xuICAgICAgdmFyIGJ5dGVTdHJlYW0gPSBuZXcgVWludDhBcnJheShidWZmZXIpOyAvLyB2aWV3IGl0IGFzIGEgc2VxdWVuY2Ugb2YgYnl0ZXNcblxuICAgICAgLy9Xcml0ZSB0aGUgZml4ZWQgaGVhZGVyIGludG8gdGhlIGJ1ZmZlclxuICAgICAgYnl0ZVN0cmVhbVswXSA9IGZpcnN0O1xuICAgICAgYnl0ZVN0cmVhbS5zZXQobWJpLCAxKTtcblxuICAgICAgLy8gSWYgdGhpcyBpcyBhIFBVQkxJU0ggdGhlbiB0aGUgdmFyaWFibGUgaGVhZGVyIHN0YXJ0cyB3aXRoIGEgdG9waWNcbiAgICAgIGlmICh0aGlzLnR5cGUgPT0gTUVTU0FHRV9UWVBFLlBVQkxJU0gpXG4gICAgICAgIHBvcyA9IHdyaXRlU3RyaW5nKFxuICAgICAgICAgIHRoaXMucGF5bG9hZE1lc3NhZ2UuZGVzdGluYXRpb25OYW1lLFxuICAgICAgICAgIGRlc3RpbmF0aW9uTmFtZUxlbmd0aCxcbiAgICAgICAgICBieXRlU3RyZWFtLFxuICAgICAgICAgIHBvc1xuICAgICAgICApO1xuICAgICAgLy8gSWYgdGhpcyBpcyBhIENPTk5FQ1QgdGhlbiB0aGUgdmFyaWFibGUgaGVhZGVyIGNvbnRhaW5zIHRoZSBwcm90b2NvbCBuYW1lL3ZlcnNpb24sIGZsYWdzIGFuZCBrZWVwYWxpdmUgdGltZVxuICAgICAgZWxzZSBpZiAodGhpcy50eXBlID09IE1FU1NBR0VfVFlQRS5DT05ORUNUKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5tcXR0VmVyc2lvbikge1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGJ5dGVTdHJlYW0uc2V0KE1xdHRQcm90b0lkZW50aWZpZXJ2MywgcG9zKTtcbiAgICAgICAgICAgIHBvcyArPSBNcXR0UHJvdG9JZGVudGlmaWVydjMubGVuZ3RoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgYnl0ZVN0cmVhbS5zZXQoTXF0dFByb3RvSWRlbnRpZmllcnY0LCBwb3MpO1xuICAgICAgICAgICAgcG9zICs9IE1xdHRQcm90b0lkZW50aWZpZXJ2NC5sZW5ndGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29ubmVjdEZsYWdzID0gMDtcbiAgICAgICAgaWYgKHRoaXMuY2xlYW5TZXNzaW9uKSBjb25uZWN0RmxhZ3MgPSAweDAyO1xuICAgICAgICBpZiAodGhpcy53aWxsTWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29ubmVjdEZsYWdzIHw9IDB4MDQ7XG4gICAgICAgICAgY29ubmVjdEZsYWdzIHw9IHRoaXMud2lsbE1lc3NhZ2UucW9zIDw8IDM7XG4gICAgICAgICAgaWYgKHRoaXMud2lsbE1lc3NhZ2UucmV0YWluZWQpIHtcbiAgICAgICAgICAgIGNvbm5lY3RGbGFncyB8PSAweDIwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy51c2VyTmFtZSAhPT0gdW5kZWZpbmVkKSBjb25uZWN0RmxhZ3MgfD0gMHg4MDtcbiAgICAgICAgaWYgKHRoaXMucGFzc3dvcmQgIT09IHVuZGVmaW5lZCkgY29ubmVjdEZsYWdzIHw9IDB4NDA7XG4gICAgICAgIGJ5dGVTdHJlYW1bcG9zKytdID0gY29ubmVjdEZsYWdzO1xuICAgICAgICBwb3MgPSB3cml0ZVVpbnQxNih0aGlzLmtlZXBBbGl2ZUludGVydmFsLCBieXRlU3RyZWFtLCBwb3MpO1xuICAgICAgfVxuXG4gICAgICAvLyBPdXRwdXQgdGhlIG1lc3NhZ2VJZGVudGlmaWVyIC0gaWYgdGhlcmUgaXMgb25lXG4gICAgICBpZiAodGhpcy5tZXNzYWdlSWRlbnRpZmllciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBwb3MgPSB3cml0ZVVpbnQxNih0aGlzLm1lc3NhZ2VJZGVudGlmaWVyLCBieXRlU3RyZWFtLCBwb3MpO1xuXG4gICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5DT05ORUNUOlxuICAgICAgICAgIHBvcyA9IHdyaXRlU3RyaW5nKFxuICAgICAgICAgICAgdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICAgIFVURjhMZW5ndGgodGhpcy5jbGllbnRJZCksXG4gICAgICAgICAgICBieXRlU3RyZWFtLFxuICAgICAgICAgICAgcG9zXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAodGhpcy53aWxsTWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwb3MgPSB3cml0ZVN0cmluZyhcbiAgICAgICAgICAgICAgdGhpcy53aWxsTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUsXG4gICAgICAgICAgICAgIFVURjhMZW5ndGgodGhpcy53aWxsTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUpLFxuICAgICAgICAgICAgICBieXRlU3RyZWFtLFxuICAgICAgICAgICAgICBwb3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBwb3MgPSB3cml0ZVVpbnQxNihcbiAgICAgICAgICAgICAgd2lsbE1lc3NhZ2VQYXlsb2FkQnl0ZXMuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgICAgYnl0ZVN0cmVhbSxcbiAgICAgICAgICAgICAgcG9zXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnl0ZVN0cmVhbS5zZXQod2lsbE1lc3NhZ2VQYXlsb2FkQnl0ZXMsIHBvcyk7XG4gICAgICAgICAgICBwb3MgKz0gd2lsbE1lc3NhZ2VQYXlsb2FkQnl0ZXMuYnl0ZUxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMudXNlck5hbWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHBvcyA9IHdyaXRlU3RyaW5nKFxuICAgICAgICAgICAgICB0aGlzLnVzZXJOYW1lLFxuICAgICAgICAgICAgICBVVEY4TGVuZ3RoKHRoaXMudXNlck5hbWUpLFxuICAgICAgICAgICAgICBieXRlU3RyZWFtLFxuICAgICAgICAgICAgICBwb3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKHRoaXMucGFzc3dvcmQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHBvcyA9IHdyaXRlU3RyaW5nKFxuICAgICAgICAgICAgICB0aGlzLnBhc3N3b3JkLFxuICAgICAgICAgICAgICBVVEY4TGVuZ3RoKHRoaXMucGFzc3dvcmQpLFxuICAgICAgICAgICAgICBieXRlU3RyZWFtLFxuICAgICAgICAgICAgICBwb3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCTElTSDpcbiAgICAgICAgICAvLyBQVUJMSVNIIGhhcyBhIHRleHQgb3IgYmluYXJ5IHBheWxvYWQsIGlmIHRleHQgZG8gbm90IGFkZCBhIDIgYnl0ZSBsZW5ndGggZmllbGQsIGp1c3QgdGhlIFVURiBjaGFyYWN0ZXJzLlxuICAgICAgICAgIGJ5dGVTdHJlYW0uc2V0KHBheWxvYWRCeXRlcywgcG9zKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIC8vICAgIFx0ICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQlJFQzpcbiAgICAgICAgLy8gICAgXHQgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCUkVMOlxuICAgICAgICAvLyAgICBcdCAgICBjYXNlIE1FU1NBR0VfVFlQRS5QVUJDT01QOlxuICAgICAgICAvLyAgICBcdCAgICBcdGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlNVQlNDUklCRTpcbiAgICAgICAgICAvLyBTVUJTQ1JJQkUgaGFzIGEgbGlzdCBvZiB0b3BpYyBzdHJpbmdzIGFuZCByZXF1ZXN0IFFvU1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50b3BpY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBvcyA9IHdyaXRlU3RyaW5nKFxuICAgICAgICAgICAgICB0aGlzLnRvcGljc1tpXSxcbiAgICAgICAgICAgICAgdG9waWNTdHJMZW5ndGhbaV0sXG4gICAgICAgICAgICAgIGJ5dGVTdHJlYW0sXG4gICAgICAgICAgICAgIHBvc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJ5dGVTdHJlYW1bcG9zKytdID0gdGhpcy5yZXF1ZXN0ZWRRb3NbaV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlVOU1VCU0NSSUJFOlxuICAgICAgICAgIC8vIFVOU1VCU0NSSUJFIGhhcyBhIGxpc3Qgb2YgdG9waWMgc3RyaW5nc1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50b3BpY3MubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBwb3MgPSB3cml0ZVN0cmluZyhcbiAgICAgICAgICAgICAgdGhpcy50b3BpY3NbaV0sXG4gICAgICAgICAgICAgIHRvcGljU3RyTGVuZ3RoW2ldLFxuICAgICAgICAgICAgICBieXRlU3RyZWFtLFxuICAgICAgICAgICAgICBwb3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gRG8gbm90aGluZy5cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZGVjb2RlTWVzc2FnZShpbnB1dCwgcG9zKSB7XG4gICAgICB2YXIgc3RhcnRpbmdQb3MgPSBwb3M7XG4gICAgICB2YXIgZmlyc3QgPSBpbnB1dFtwb3NdO1xuICAgICAgdmFyIHR5cGUgPSBmaXJzdCA+PiA0O1xuICAgICAgdmFyIG1lc3NhZ2VJbmZvID0gKGZpcnN0ICY9IDB4MGYpO1xuICAgICAgcG9zICs9IDE7XG5cbiAgICAgIC8vIERlY29kZSB0aGUgcmVtYWluaW5nIGxlbmd0aCAoTUJJIGZvcm1hdClcblxuICAgICAgdmFyIGRpZ2l0O1xuICAgICAgdmFyIHJlbUxlbmd0aCA9IDA7XG4gICAgICB2YXIgbXVsdGlwbGllciA9IDE7XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChwb3MgPT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIFtudWxsLCBzdGFydGluZ1Bvc107XG4gICAgICAgIH1cbiAgICAgICAgZGlnaXQgPSBpbnB1dFtwb3MrK107XG4gICAgICAgIHJlbUxlbmd0aCArPSAoZGlnaXQgJiAweDdmKSAqIG11bHRpcGxpZXI7XG4gICAgICAgIG11bHRpcGxpZXIgKj0gMTI4O1xuICAgICAgfSB3aGlsZSAoKGRpZ2l0ICYgMHg4MCkgIT09IDApO1xuXG4gICAgICB2YXIgZW5kUG9zID0gcG9zICsgcmVtTGVuZ3RoO1xuICAgICAgaWYgKGVuZFBvcyA+IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW251bGwsIHN0YXJ0aW5nUG9zXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHdpcmVNZXNzYWdlID0gbmV3IFdpcmVNZXNzYWdlKHR5cGUpO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLkNPTk5BQ0s6XG4gICAgICAgICAgdmFyIGNvbm5lY3RBY2tub3dsZWRnZUZsYWdzID0gaW5wdXRbcG9zKytdO1xuICAgICAgICAgIGlmIChjb25uZWN0QWNrbm93bGVkZ2VGbGFncyAmIDB4MDEpIHdpcmVNZXNzYWdlLnNlc3Npb25QcmVzZW50ID0gdHJ1ZTtcbiAgICAgICAgICB3aXJlTWVzc2FnZS5yZXR1cm5Db2RlID0gaW5wdXRbcG9zKytdO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQkxJU0g6XG4gICAgICAgICAgdmFyIHFvcyA9IChtZXNzYWdlSW5mbyA+PiAxKSAmIDB4MDM7XG5cbiAgICAgICAgICB2YXIgbGVuID0gcmVhZFVpbnQxNihpbnB1dCwgcG9zKTtcbiAgICAgICAgICBwb3MgKz0gMjtcbiAgICAgICAgICB2YXIgdG9waWNOYW1lID0gcGFyc2VVVEY4KGlucHV0LCBwb3MsIGxlbik7XG4gICAgICAgICAgcG9zICs9IGxlbjtcbiAgICAgICAgICAvLyBJZiBRb1MgMSBvciAyIHRoZXJlIHdpbGwgYmUgYSBtZXNzYWdlSWRlbnRpZmllclxuICAgICAgICAgIGlmIChxb3MgPiAwKSB7XG4gICAgICAgICAgICB3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllciA9IHJlYWRVaW50MTYoaW5wdXQsIHBvcyk7XG4gICAgICAgICAgICBwb3MgKz0gMjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbWVzc2FnZSA9IG5ldyBNZXNzYWdlKGlucHV0LnN1YmFycmF5KHBvcywgZW5kUG9zKSk7XG4gICAgICAgICAgaWYgKChtZXNzYWdlSW5mbyAmIDB4MDEpID09IDB4MDEpIG1lc3NhZ2UucmV0YWluZWQgPSB0cnVlO1xuICAgICAgICAgIGlmICgobWVzc2FnZUluZm8gJiAweDA4KSA9PSAweDA4KSBtZXNzYWdlLmR1cGxpY2F0ZSA9IHRydWU7XG4gICAgICAgICAgbWVzc2FnZS5xb3MgPSBxb3M7XG4gICAgICAgICAgbWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUgPSB0b3BpY05hbWU7XG4gICAgICAgICAgd2lyZU1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQkFDSzpcbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCUkVDOlxuICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5QVUJSRUw6XG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQkNPTVA6XG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlVOU1VCQUNLOlxuICAgICAgICAgIHdpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyID0gcmVhZFVpbnQxNihpbnB1dCwgcG9zKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5TVUJBQ0s6XG4gICAgICAgICAgd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXIgPSByZWFkVWludDE2KGlucHV0LCBwb3MpO1xuICAgICAgICAgIHBvcyArPSAyO1xuICAgICAgICAgIHdpcmVNZXNzYWdlLnJldHVybkNvZGUgPSBpbnB1dC5zdWJhcnJheShwb3MsIGVuZFBvcyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFt3aXJlTWVzc2FnZSwgZW5kUG9zXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3cml0ZVVpbnQxNihpbnB1dCwgYnVmZmVyLCBvZmZzZXQpIHtcbiAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBpbnB1dCA+PiA4OyAvL01TQlxuICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGlucHV0ICUgMjU2OyAvL0xTQlxuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3cml0ZVN0cmluZyhpbnB1dCwgdXRmOExlbmd0aCwgYnVmZmVyLCBvZmZzZXQpIHtcbiAgICAgIG9mZnNldCA9IHdyaXRlVWludDE2KHV0ZjhMZW5ndGgsIGJ1ZmZlciwgb2Zmc2V0KTtcbiAgICAgIHN0cmluZ1RvVVRGOChpbnB1dCwgYnVmZmVyLCBvZmZzZXQpO1xuICAgICAgcmV0dXJuIG9mZnNldCArIHV0ZjhMZW5ndGg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVhZFVpbnQxNihidWZmZXIsIG9mZnNldCkge1xuICAgICAgcmV0dXJuIDI1NiAqIGJ1ZmZlcltvZmZzZXRdICsgYnVmZmVyW29mZnNldCArIDFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgYW4gTVFUVCBNdWx0aS1CeXRlIEludGVnZXJcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuY29kZU1CSShudW1iZXIpIHtcbiAgICAgIHZhciBvdXRwdXQgPSBuZXcgQXJyYXkoMSk7XG4gICAgICB2YXIgbnVtQnl0ZXMgPSAwO1xuXG4gICAgICBkbyB7XG4gICAgICAgIHZhciBkaWdpdCA9IG51bWJlciAlIDEyODtcbiAgICAgICAgbnVtYmVyID0gbnVtYmVyID4+IDc7XG4gICAgICAgIGlmIChudW1iZXIgPiAwKSB7XG4gICAgICAgICAgZGlnaXQgfD0gMHg4MDtcbiAgICAgICAgfVxuICAgICAgICBvdXRwdXRbbnVtQnl0ZXMrK10gPSBkaWdpdDtcbiAgICAgIH0gd2hpbGUgKG51bWJlciA+IDAgJiYgbnVtQnl0ZXMgPCA0KTtcblxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBhIFN0cmluZyBhbmQgY2FsY3VsYXRlcyBpdHMgbGVuZ3RoIGluIGJ5dGVzIHdoZW4gZW5jb2RlZCBpbiBVVEY4LlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gVVRGOExlbmd0aChpbnB1dCkge1xuICAgICAgdmFyIG91dHB1dCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGFyQ29kZSA9IGlucHV0LmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjaGFyQ29kZSA+IDB4N2ZmKSB7XG4gICAgICAgICAgLy8gU3Vycm9nYXRlIHBhaXIgbWVhbnMgaXRzIGEgNCBieXRlIGNoYXJhY3RlclxuICAgICAgICAgIGlmICgweGQ4MDAgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gMHhkYmZmKSB7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICBvdXRwdXQrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0cHV0ICs9IDM7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhckNvZGUgPiAweDdmKSBvdXRwdXQgKz0gMjtcbiAgICAgICAgZWxzZSBvdXRwdXQrKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGFrZXMgYSBTdHJpbmcgYW5kIHdyaXRlcyBpdCBpbnRvIGFuIGFycmF5IGFzIFVURjggZW5jb2RlZCBieXRlcy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0cmluZ1RvVVRGOChpbnB1dCwgb3V0cHV0LCBzdGFydCkge1xuICAgICAgdmFyIHBvcyA9IHN0YXJ0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hhckNvZGUgPSBpbnB1dC5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICAgIC8vIENoZWNrIGZvciBhIHN1cnJvZ2F0ZSBwYWlyLlxuICAgICAgICBpZiAoMHhkODAwIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IDB4ZGJmZikge1xuICAgICAgICAgIHZhciBsb3dDaGFyQ29kZSA9IGlucHV0LmNoYXJDb2RlQXQoKytpKTtcbiAgICAgICAgICBpZiAoaXNOYU4obG93Q2hhckNvZGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5NQUxGT1JNRURfVU5JQ09ERSwgW2NoYXJDb2RlLCBsb3dDaGFyQ29kZV0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaGFyQ29kZSA9XG4gICAgICAgICAgICAoKGNoYXJDb2RlIC0gMHhkODAwKSA8PCAxMCkgKyAobG93Q2hhckNvZGUgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFyQ29kZSA8PSAweDdmKSB7XG4gICAgICAgICAgb3V0cHV0W3BvcysrXSA9IGNoYXJDb2RlO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXJDb2RlIDw9IDB4N2ZmKSB7XG4gICAgICAgICAgb3V0cHV0W3BvcysrXSA9ICgoY2hhckNvZGUgPj4gNikgJiAweDFmKSB8IDB4YzA7XG4gICAgICAgICAgb3V0cHV0W3BvcysrXSA9IChjaGFyQ29kZSAmIDB4M2YpIHwgMHg4MDtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyQ29kZSA8PSAweGZmZmYpIHtcbiAgICAgICAgICBvdXRwdXRbcG9zKytdID0gKChjaGFyQ29kZSA+PiAxMikgJiAweDBmKSB8IDB4ZTA7XG4gICAgICAgICAgb3V0cHV0W3BvcysrXSA9ICgoY2hhckNvZGUgPj4gNikgJiAweDNmKSB8IDB4ODA7XG4gICAgICAgICAgb3V0cHV0W3BvcysrXSA9IChjaGFyQ29kZSAmIDB4M2YpIHwgMHg4MDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXRwdXRbcG9zKytdID0gKChjaGFyQ29kZSA+PiAxOCkgJiAweDA3KSB8IDB4ZjA7XG4gICAgICAgICAgb3V0cHV0W3BvcysrXSA9ICgoY2hhckNvZGUgPj4gMTIpICYgMHgzZikgfCAweDgwO1xuICAgICAgICAgIG91dHB1dFtwb3MrK10gPSAoKGNoYXJDb2RlID4+IDYpICYgMHgzZikgfCAweDgwO1xuICAgICAgICAgIG91dHB1dFtwb3MrK10gPSAoY2hhckNvZGUgJiAweDNmKSB8IDB4ODA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VVVEY4KGlucHV0LCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgdmFyIG91dHB1dCA9IFwiXCI7XG4gICAgICB2YXIgdXRmMTY7XG4gICAgICB2YXIgcG9zID0gb2Zmc2V0O1xuXG4gICAgICB3aGlsZSAocG9zIDwgb2Zmc2V0ICsgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBieXRlMSA9IGlucHV0W3BvcysrXTtcbiAgICAgICAgaWYgKGJ5dGUxIDwgMTI4KSB1dGYxNiA9IGJ5dGUxO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgYnl0ZTIgPSBpbnB1dFtwb3MrK10gLSAxMjg7XG4gICAgICAgICAgaWYgKGJ5dGUyIDwgMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLk1BTEZPUk1FRF9VVEYsIFtcbiAgICAgICAgICAgICAgICBieXRlMS50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgYnl0ZTIudG9TdHJpbmcoMTYpLFxuICAgICAgICAgICAgICAgIFwiXCJcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKGJ5dGUxIDwgMHhlMClcbiAgICAgICAgICAgIC8vIDIgYnl0ZSBjaGFyYWN0ZXJcbiAgICAgICAgICAgIHV0ZjE2ID0gNjQgKiAoYnl0ZTEgLSAweGMwKSArIGJ5dGUyO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGJ5dGUzID0gaW5wdXRbcG9zKytdIC0gMTI4O1xuICAgICAgICAgICAgaWYgKGJ5dGUzIDwgMClcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5NQUxGT1JNRURfVVRGLCBbXG4gICAgICAgICAgICAgICAgICBieXRlMS50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgICBieXRlMi50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgICBieXRlMy50b1N0cmluZygxNilcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGJ5dGUxIDwgMHhmMClcbiAgICAgICAgICAgICAgLy8gMyBieXRlIGNoYXJhY3RlclxuICAgICAgICAgICAgICB1dGYxNiA9IDQwOTYgKiAoYnl0ZTEgLSAweGUwKSArIDY0ICogYnl0ZTIgKyBieXRlMztcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgYnl0ZTQgPSBpbnB1dFtwb3MrK10gLSAxMjg7XG4gICAgICAgICAgICAgIGlmIChieXRlNCA8IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLk1BTEZPUk1FRF9VVEYsIFtcbiAgICAgICAgICAgICAgICAgICAgYnl0ZTEudG9TdHJpbmcoMTYpLFxuICAgICAgICAgICAgICAgICAgICBieXRlMi50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgICAgIGJ5dGUzLnRvU3RyaW5nKDE2KSxcbiAgICAgICAgICAgICAgICAgICAgYnl0ZTQudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChieXRlMSA8IDB4ZjgpXG4gICAgICAgICAgICAgICAgLy8gNCBieXRlIGNoYXJhY3RlclxuICAgICAgICAgICAgICAgIHV0ZjE2ID1cbiAgICAgICAgICAgICAgICAgIDI2MjE0NCAqIChieXRlMSAtIDB4ZjApICsgNDA5NiAqIGJ5dGUyICsgNjQgKiBieXRlMyArIGJ5dGU0O1xuICAgICAgICAgICAgICAvLyBsb25nZXIgZW5jb2RpbmdzIGFyZSBub3Qgc3VwcG9ydGVkXG4gICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuTUFMRk9STUVEX1VURiwgW1xuICAgICAgICAgICAgICAgICAgICBieXRlMS50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgICAgIGJ5dGUyLnRvU3RyaW5nKDE2KSxcbiAgICAgICAgICAgICAgICAgICAgYnl0ZTMudG9TdHJpbmcoMTYpLFxuICAgICAgICAgICAgICAgICAgICBieXRlNC50b1N0cmluZygxNilcbiAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRmMTYgPiAweGZmZmYpIHtcbiAgICAgICAgICAvLyA0IGJ5dGUgY2hhcmFjdGVyIC0gZXhwcmVzcyBhcyBhIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICAgICAgdXRmMTYgLT0gMHgxMDAwMDtcbiAgICAgICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGQ4MDAgKyAodXRmMTYgPj4gMTApKTsgLy8gbGVhZCBjaGFyYWN0ZXJcbiAgICAgICAgICB1dGYxNiA9IDB4ZGMwMCArICh1dGYxNiAmIDB4M2ZmKTsgLy8gdHJhaWwgY2hhcmFjdGVyXG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodXRmMTYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXQga2VlcGFsaXZlIHJlcXVlc3RzLCBtb25pdG9yIHJlc3BvbnNlcy5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgdmFyIFBpbmdlciA9IGZ1bmN0aW9uKGNsaWVudCwga2VlcEFsaXZlSW50ZXJ2YWwpIHtcbiAgICAgIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcbiAgICAgIHRoaXMuX2tlZXBBbGl2ZUludGVydmFsID0ga2VlcEFsaXZlSW50ZXJ2YWwgKiAxMDAwO1xuICAgICAgdGhpcy5pc1Jlc2V0ID0gZmFsc2U7XG5cbiAgICAgIHZhciBwaW5nUmVxID0gbmV3IFdpcmVNZXNzYWdlKE1FU1NBR0VfVFlQRS5QSU5HUkVRKS5lbmNvZGUoKTtcblxuICAgICAgdmFyIGRvVGltZW91dCA9IGZ1bmN0aW9uKHBpbmdlcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGRvUGluZy5hcHBseShwaW5nZXIpO1xuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgLyoqIEBpZ25vcmUgKi9cbiAgICAgIHZhciBkb1BpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVzZXQpIHtcbiAgICAgICAgICB0aGlzLl9jbGllbnQuX3RyYWNlKFwiUGluZ2VyLmRvUGluZ1wiLCBcIlRpbWVkIG91dFwiKTtcbiAgICAgICAgICB0aGlzLl9jbGllbnQuX2Rpc2Nvbm5lY3RlZChcbiAgICAgICAgICAgIEVSUk9SLlBJTkdfVElNRU9VVC5jb2RlLFxuICAgICAgICAgICAgZm9ybWF0KEVSUk9SLlBJTkdfVElNRU9VVClcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaXNSZXNldCA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuX2NsaWVudC5fdHJhY2UoXCJQaW5nZXIuZG9QaW5nXCIsIFwic2VuZCBQSU5HUkVRXCIpO1xuICAgICAgICAgIHRoaXMuX2NsaWVudC5zb2NrZXQuc2VuZChwaW5nUmVxKTtcbiAgICAgICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGRvVGltZW91dCh0aGlzKSwgdGhpcy5fa2VlcEFsaXZlSW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuaXNSZXNldCA9IHRydWU7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgICAgICBpZiAodGhpcy5fa2VlcEFsaXZlSW50ZXJ2YWwgPiAwKVxuICAgICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZG9UaW1lb3V0KHRoaXMpLCB0aGlzLl9rZWVwQWxpdmVJbnRlcnZhbCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1vbml0b3IgcmVxdWVzdCBjb21wbGV0aW9uLlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICB2YXIgVGltZW91dCA9IGZ1bmN0aW9uKGNsaWVudCwgdGltZW91dFNlY29uZHMsIGFjdGlvbiwgYXJncykge1xuICAgICAgaWYgKCF0aW1lb3V0U2Vjb25kcykgdGltZW91dFNlY29uZHMgPSAzMDtcblxuICAgICAgdmFyIGRvVGltZW91dCA9IGZ1bmN0aW9uKGFjdGlvbiwgY2xpZW50LCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uLmFwcGx5KGNsaWVudCwgYXJncyk7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChcbiAgICAgICAgZG9UaW1lb3V0KGFjdGlvbiwgY2xpZW50LCBhcmdzKSxcbiAgICAgICAgdGltZW91dFNlY29uZHMgKiAxMDAwXG4gICAgICApO1xuXG4gICAgICB0aGlzLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIHRoZSBXZWJzb2NrZXRzIE1RVFQgVjMuMSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBQYWhvLkNsaWVudEltcGwgQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGhvc3QgdGhlIEROUyBuYW1lb2YgdGhlIHdlYlNvY2tldCBob3N0LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3J0IHRoZSBwb3J0IG51bWJlciBmb3IgdGhhdCBob3N0LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjbGllbnRJZCB0aGUgTVEgY2xpZW50IGlkZW50aWZpZXIuXG4gICAgICovXG4gICAgdmFyIENsaWVudEltcGwgPSBmdW5jdGlvbih1cmksIGhvc3QsIHBvcnQsIHBhdGgsIGNsaWVudElkKSB7XG4gICAgICAvLyBDaGVjayBkZXBlbmRlbmNpZXMgYXJlIHNhdGlzZmllZCBpbiB0aGlzIGJyb3dzZXIuXG4gICAgICBpZiAoIShcIldlYlNvY2tldFwiIGluIGdsb2JhbCAmJiBnbG9iYWwuV2ViU29ja2V0ICE9PSBudWxsKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLlVOU1VQUE9SVEVELCBbXCJXZWJTb2NrZXRcIl0pKTtcbiAgICAgIH1cbiAgICAgIGlmICghKFwiQXJyYXlCdWZmZXJcIiBpbiBnbG9iYWwgJiYgZ2xvYmFsLkFycmF5QnVmZmVyICE9PSBudWxsKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLlVOU1VQUE9SVEVELCBbXCJBcnJheUJ1ZmZlclwiXSkpO1xuICAgICAgfVxuICAgICAgdGhpcy5fdHJhY2UoXCJQYWhvLkNsaWVudFwiLCB1cmksIGhvc3QsIHBvcnQsIHBhdGgsIGNsaWVudElkKTtcblxuICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgIHRoaXMucG9ydCA9IHBvcnQ7XG4gICAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgICAgdGhpcy51cmkgPSB1cmk7XG4gICAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWQ7XG4gICAgICB0aGlzLl93c3VyaSA9IG51bGw7XG5cbiAgICAgIC8vIExvY2FsIHN0b3JhZ2VrZXlzIGFyZSBxdWFsaWZpZWQgd2l0aCB0aGUgZm9sbG93aW5nIHN0cmluZy5cbiAgICAgIC8vIFRoZSBjb25kaXRpb25hbCBpbmNsdXNpb24gb2YgcGF0aCBpbiB0aGUga2V5IGlzIGZvciBiYWNrd2FyZFxuICAgICAgLy8gY29tcGF0aWJpbGl0eSB0byB3aGVuIHRoZSBwYXRoIHdhcyBub3QgY29uZmlndXJhYmxlIGFuZCBhc3N1bWVkIHRvXG4gICAgICAvLyBiZSAvbXF0dFxuICAgICAgdGhpcy5fbG9jYWxLZXkgPVxuICAgICAgICBob3N0ICtcbiAgICAgICAgXCI6XCIgK1xuICAgICAgICBwb3J0ICtcbiAgICAgICAgKHBhdGggIT0gXCIvbXF0dFwiID8gXCI6XCIgKyBwYXRoIDogXCJcIikgK1xuICAgICAgICBcIjpcIiArXG4gICAgICAgIGNsaWVudElkICtcbiAgICAgICAgXCI6XCI7XG5cbiAgICAgIC8vIENyZWF0ZSBwcml2YXRlIGluc3RhbmNlLW9ubHkgbWVzc2FnZSBxdWV1ZVxuICAgICAgLy8gSW50ZXJuYWwgcXVldWUgb2YgbWVzc2FnZXMgdG8gYmUgc2VudCwgaW4gc2VuZGluZyBvcmRlci5cbiAgICAgIHRoaXMuX21zZ19xdWV1ZSA9IFtdO1xuICAgICAgdGhpcy5fYnVmZmVyZWRfbXNnX3F1ZXVlID0gW107XG5cbiAgICAgIC8vIE1lc3NhZ2VzIHdlIGhhdmUgc2VudCBhbmQgYXJlIGV4cGVjdGluZyBhIHJlc3BvbnNlIGZvciwgaW5kZXhlZCBieSB0aGVpciByZXNwZWN0aXZlIG1lc3NhZ2UgaWRzLlxuICAgICAgdGhpcy5fc2VudE1lc3NhZ2VzID0ge307XG5cbiAgICAgIC8vIE1lc3NhZ2VzIHdlIGhhdmUgcmVjZWl2ZWQgYW5kIGFja25vd2xlZ2VkIGFuZCBhcmUgZXhwZWN0aW5nIGEgY29uZmlybSBtZXNzYWdlIGZvclxuICAgICAgLy8gaW5kZXhlZCBieSB0aGVpciByZXNwZWN0aXZlIG1lc3NhZ2UgaWRzLlxuICAgICAgdGhpcy5fcmVjZWl2ZWRNZXNzYWdlcyA9IHt9O1xuXG4gICAgICAvLyBJbnRlcm5hbCBsaXN0IG9mIGNhbGxiYWNrcyB0byBiZSBleGVjdXRlZCB3aGVuIG1lc3NhZ2VzXG4gICAgICAvLyBoYXZlIGJlZW4gc3VjY2Vzc2Z1bGx5IHNlbnQgb3ZlciB3ZWIgc29ja2V0LCBlLmcuIGRpc2Nvbm5lY3RcbiAgICAgIC8vIHdoZW4gaXQgZG9lc24ndCBoYXZlIHRvIHdhaXQgZm9yIEFDSywganVzdCBtZXNzYWdlIGlzIGRpc3BhdGNoZWQuXG4gICAgICB0aGlzLl9ub3RpZnlfbXNnX3NlbnQgPSB7fTtcblxuICAgICAgLy8gVW5pcXVlIGlkZW50aWZpZXIgZm9yIFNFTkQgbWVzc2FnZXMsIGluY3JlbWVudGluZ1xuICAgICAgLy8gY291bnRlciBhcyBtZXNzYWdlcyBhcmUgc2VudC5cbiAgICAgIHRoaXMuX21lc3NhZ2VfaWRlbnRpZmllciA9IDE7XG5cbiAgICAgIC8vIFVzZWQgdG8gZGV0ZXJtaW5lIHRoZSB0cmFuc21pc3Npb24gc2VxdWVuY2Ugb2Ygc3RvcmVkIHNlbnQgbWVzc2FnZXMuXG4gICAgICB0aGlzLl9zZXF1ZW5jZSA9IDA7XG5cbiAgICAgIC8vIExvYWQgdGhlIGxvY2FsIHN0YXRlLCBpZiBhbnksIGZyb20gdGhlIHNhdmVkIHZlcnNpb24sIG9ubHkgcmVzdG9yZSBzdGF0ZSByZWxldmFudCB0byB0aGlzIGNsaWVudC5cbiAgICAgIGZvciAodmFyIGtleSBpbiBsb2NhbFN0b3JhZ2UpXG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkuaW5kZXhPZihcIlNlbnQ6XCIgKyB0aGlzLl9sb2NhbEtleSkgPT09IDAgfHxcbiAgICAgICAgICBrZXkuaW5kZXhPZihcIlJlY2VpdmVkOlwiICsgdGhpcy5fbG9jYWxLZXkpID09PSAwXG4gICAgICAgIClcbiAgICAgICAgICB0aGlzLnJlc3RvcmUoa2V5KTtcbiAgICB9O1xuXG4gICAgLy8gTWVzc2FnaW5nIENsaWVudCBwdWJsaWMgaW5zdGFuY2UgbWVtYmVycy5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5ob3N0ID0gbnVsbDtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5wb3J0ID0gbnVsbDtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5wYXRoID0gbnVsbDtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS51cmkgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLmNsaWVudElkID0gbnVsbDtcblxuICAgIC8vIE1lc3NhZ2luZyBDbGllbnQgcHJpdmF0ZSBpbnN0YW5jZSBtZW1iZXJzLlxuICAgIENsaWVudEltcGwucHJvdG90eXBlLnNvY2tldCA9IG51bGw7XG4gICAgLyogdHJ1ZSBvbmNlIHdlIGhhdmUgcmVjZWl2ZWQgYW4gYWNrbm93bGVkZ2VtZW50IHRvIGEgQ09OTkVDVCBwYWNrZXQuICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgLyogVGhlIGxhcmdlc3QgbWVzc2FnZSBpZGVudGlmaWVyIGFsbG93ZWQsIG1heSBub3QgYmUgbGFyZ2VyIHRoYW4gMioqMTYgYnV0XG4gICAgICogaWYgc2V0IHNtYWxsZXIgcmVkdWNlcyB0aGUgbWF4aW11bSBudW1iZXIgb2Ygb3V0Ym91bmQgbWVzc2FnZXMgYWxsb3dlZC5cbiAgICAgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5tYXhNZXNzYWdlSWRlbnRpZmllciA9IDY1NTM2O1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLmNvbm5lY3RPcHRpb25zID0gbnVsbDtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5ob3N0SW5kZXggPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLm9uQ29ubmVjdGVkID0gbnVsbDtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5vbkNvbm5lY3Rpb25Mb3N0ID0gbnVsbDtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5vbk1lc3NhZ2VEZWxpdmVyZWQgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLm9uTWVzc2FnZUFycml2ZWQgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLnRyYWNlRnVuY3Rpb24gPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9tc2dfcXVldWUgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9idWZmZXJlZF9tc2dfcXVldWUgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9jb25uZWN0VGltZW91dCA9IG51bGw7XG4gICAgLyogVGhlIHNlbmRQaW5nZXIgbW9uaXRvcnMgaG93IGxvbmcgd2UgYWxsb3cgYmVmb3JlIHdlIHNlbmQgZGF0YSB0byBwcm92ZSB0byB0aGUgc2VydmVyIHRoYXQgd2UgYXJlIGFsaXZlLiAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLnNlbmRQaW5nZXIgPSBudWxsO1xuICAgIC8qIFRoZSByZWNlaXZlUGluZ2VyIG1vbml0b3JzIGhvdyBsb25nIHdlIGFsbG93IGJlZm9yZSB3ZSByZXF1aXJlIGV2aWRlbmNlIHRoYXQgdGhlIHNlcnZlciBpcyBhbGl2ZS4gKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5yZWNlaXZlUGluZ2VyID0gbnVsbDtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fcmVjb25uZWN0SW50ZXJ2YWwgPSAxOyAvLyBSZWNvbm5lY3QgRGVsYXksIHN0YXJ0cyBhdCAxIHNlY29uZFxuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fcmVjb25uZWN0VGltZW91dCA9IG51bGw7XG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuZGlzY29ubmVjdGVkUHVibGlzaGluZyA9IGZhbHNlO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLmRpc2Nvbm5lY3RlZEJ1ZmZlclNpemUgPSA1MDAwO1xuXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUucmVjZWl2ZUJ1ZmZlciA9IG51bGw7XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fdHJhY2VCdWZmZXIgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9NQVhfVFJBQ0VfRU5UUklFUyA9IDEwMDtcblxuICAgIENsaWVudEltcGwucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbihjb25uZWN0T3B0aW9ucykge1xuICAgICAgdmFyIGNvbm5lY3RPcHRpb25zTWFza2VkID0gdGhpcy5fdHJhY2VNYXNrKGNvbm5lY3RPcHRpb25zLCBcInBhc3N3b3JkXCIpO1xuICAgICAgdGhpcy5fdHJhY2UoXG4gICAgICAgIFwiQ2xpZW50LmNvbm5lY3RcIixcbiAgICAgICAgY29ubmVjdE9wdGlvbnNNYXNrZWQsXG4gICAgICAgIHRoaXMuc29ja2V0LFxuICAgICAgICB0aGlzLmNvbm5lY3RlZFxuICAgICAgKTtcblxuICAgICAgaWYgKHRoaXMuY29ubmVjdGVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLklOVkFMSURfU1RBVEUsIFtcImFscmVhZHkgY29ubmVjdGVkXCJdKSk7XG4gICAgICBpZiAodGhpcy5zb2NrZXQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuSU5WQUxJRF9TVEFURSwgW1wiYWxyZWFkeSBjb25uZWN0ZWRcIl0pKTtcblxuICAgICAgaWYgKHRoaXMuX3JlY29ubmVjdGluZykge1xuICAgICAgICAvLyBjb25uZWN0KCkgZnVuY3Rpb24gaXMgY2FsbGVkIHdoaWxlIHJlY29ubmVjdCBpcyBpbiBwcm9ncmVzcy5cbiAgICAgICAgLy8gVGVybWluYXRlIHRoZSBhdXRvIHJlY29ubmVjdCBwcm9jZXNzIHRvIHVzZSBuZXcgY29ubmVjdCBvcHRpb25zLlxuICAgICAgICB0aGlzLl9yZWNvbm5lY3RUaW1lb3V0LmNhbmNlbCgpO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3RUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29ubmVjdE9wdGlvbnMgPSBjb25uZWN0T3B0aW9ucztcbiAgICAgIHRoaXMuX3JlY29ubmVjdEludGVydmFsID0gMTtcbiAgICAgIHRoaXMuX3JlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgaWYgKGNvbm5lY3RPcHRpb25zLnVyaXMpIHtcbiAgICAgICAgdGhpcy5ob3N0SW5kZXggPSAwO1xuICAgICAgICB0aGlzLl9kb0Nvbm5lY3QoY29ubmVjdE9wdGlvbnMudXJpc1swXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9kb0Nvbm5lY3QodGhpcy51cmkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbihmaWx0ZXIsIHN1YnNjcmliZU9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX3RyYWNlKFwiQ2xpZW50LnN1YnNjcmliZVwiLCBmaWx0ZXIsIHN1YnNjcmliZU9wdGlvbnMpO1xuXG4gICAgICBpZiAoIXRoaXMuY29ubmVjdGVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLklOVkFMSURfU1RBVEUsIFtcIm5vdCBjb25uZWN0ZWRcIl0pKTtcblxuICAgICAgdmFyIHdpcmVNZXNzYWdlID0gbmV3IFdpcmVNZXNzYWdlKE1FU1NBR0VfVFlQRS5TVUJTQ1JJQkUpO1xuICAgICAgd2lyZU1lc3NhZ2UudG9waWNzID0gZmlsdGVyLmNvbnN0cnVjdG9yID09PSBBcnJheSA/IGZpbHRlciA6IFtmaWx0ZXJdO1xuICAgICAgaWYgKHN1YnNjcmliZU9wdGlvbnMucW9zID09PSB1bmRlZmluZWQpIHN1YnNjcmliZU9wdGlvbnMucW9zID0gMDtcbiAgICAgIHdpcmVNZXNzYWdlLnJlcXVlc3RlZFFvcyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3aXJlTWVzc2FnZS50b3BpY3MubGVuZ3RoOyBpKyspXG4gICAgICAgIHdpcmVNZXNzYWdlLnJlcXVlc3RlZFFvc1tpXSA9IHN1YnNjcmliZU9wdGlvbnMucW9zO1xuXG4gICAgICBpZiAoc3Vic2NyaWJlT3B0aW9ucy5vblN1Y2Nlc3MpIHtcbiAgICAgICAgd2lyZU1lc3NhZ2Uub25TdWNjZXNzID0gZnVuY3Rpb24oZ3JhbnRlZFFvcykge1xuICAgICAgICAgIHN1YnNjcmliZU9wdGlvbnMub25TdWNjZXNzKHtcbiAgICAgICAgICAgIGludm9jYXRpb25Db250ZXh0OiBzdWJzY3JpYmVPcHRpb25zLmludm9jYXRpb25Db250ZXh0LFxuICAgICAgICAgICAgZ3JhbnRlZFFvczogZ3JhbnRlZFFvc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoc3Vic2NyaWJlT3B0aW9ucy5vbkZhaWx1cmUpIHtcbiAgICAgICAgd2lyZU1lc3NhZ2Uub25GYWlsdXJlID0gZnVuY3Rpb24oZXJyb3JDb2RlKSB7XG4gICAgICAgICAgc3Vic2NyaWJlT3B0aW9ucy5vbkZhaWx1cmUoe1xuICAgICAgICAgICAgaW52b2NhdGlvbkNvbnRleHQ6IHN1YnNjcmliZU9wdGlvbnMuaW52b2NhdGlvbkNvbnRleHQsXG4gICAgICAgICAgICBlcnJvckNvZGU6IGVycm9yQ29kZSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZm9ybWF0KGVycm9yQ29kZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN1YnNjcmliZU9wdGlvbnMudGltZW91dCkge1xuICAgICAgICB3aXJlTWVzc2FnZS50aW1lT3V0ID0gbmV3IFRpbWVvdXQoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBzdWJzY3JpYmVPcHRpb25zLnRpbWVvdXQsXG4gICAgICAgICAgc3Vic2NyaWJlT3B0aW9ucy5vbkZhaWx1cmUsXG4gICAgICAgICAgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpbnZvY2F0aW9uQ29udGV4dDogc3Vic2NyaWJlT3B0aW9ucy5pbnZvY2F0aW9uQ29udGV4dCxcbiAgICAgICAgICAgICAgZXJyb3JDb2RlOiBFUlJPUi5TVUJTQ1JJQkVfVElNRU9VVC5jb2RlLFxuICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGZvcm1hdChFUlJPUi5TVUJTQ1JJQkVfVElNRU9VVClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFsbCBzdWJzY3JpcHRpb25zIHJldHVybiBhIFNVQkFDSy5cbiAgICAgIHRoaXMuX3JlcXVpcmVzX2Fjayh3aXJlTWVzc2FnZSk7XG4gICAgICB0aGlzLl9zY2hlZHVsZV9tZXNzYWdlKHdpcmVNZXNzYWdlKTtcbiAgICB9O1xuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uKGZpbHRlciwgdW5zdWJzY3JpYmVPcHRpb25zKSB7XG4gICAgICB0aGlzLl90cmFjZShcIkNsaWVudC51bnN1YnNjcmliZVwiLCBmaWx0ZXIsIHVuc3Vic2NyaWJlT3B0aW9ucyk7XG5cbiAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuSU5WQUxJRF9TVEFURSwgW1wibm90IGNvbm5lY3RlZFwiXSkpO1xuXG4gICAgICB2YXIgd2lyZU1lc3NhZ2UgPSBuZXcgV2lyZU1lc3NhZ2UoTUVTU0FHRV9UWVBFLlVOU1VCU0NSSUJFKTtcbiAgICAgIHdpcmVNZXNzYWdlLnRvcGljcyA9IGZpbHRlci5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgPyBmaWx0ZXIgOiBbZmlsdGVyXTtcblxuICAgICAgaWYgKHVuc3Vic2NyaWJlT3B0aW9ucy5vblN1Y2Nlc3MpIHtcbiAgICAgICAgd2lyZU1lc3NhZ2UuY2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1bnN1YnNjcmliZU9wdGlvbnMub25TdWNjZXNzKHtcbiAgICAgICAgICAgIGludm9jYXRpb25Db250ZXh0OiB1bnN1YnNjcmliZU9wdGlvbnMuaW52b2NhdGlvbkNvbnRleHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmICh1bnN1YnNjcmliZU9wdGlvbnMudGltZW91dCkge1xuICAgICAgICB3aXJlTWVzc2FnZS50aW1lT3V0ID0gbmV3IFRpbWVvdXQoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICB1bnN1YnNjcmliZU9wdGlvbnMudGltZW91dCxcbiAgICAgICAgICB1bnN1YnNjcmliZU9wdGlvbnMub25GYWlsdXJlLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaW52b2NhdGlvbkNvbnRleHQ6IHVuc3Vic2NyaWJlT3B0aW9ucy5pbnZvY2F0aW9uQ29udGV4dCxcbiAgICAgICAgICAgICAgZXJyb3JDb2RlOiBFUlJPUi5VTlNVQlNDUklCRV9USU1FT1VULmNvZGUsXG4gICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZm9ybWF0KEVSUk9SLlVOU1VCU0NSSUJFX1RJTUVPVVQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBBbGwgdW5zdWJzY3JpYmVzIHJldHVybiBhIFNVQkFDSy5cbiAgICAgIHRoaXMuX3JlcXVpcmVzX2Fjayh3aXJlTWVzc2FnZSk7XG4gICAgICB0aGlzLl9zY2hlZHVsZV9tZXNzYWdlKHdpcmVNZXNzYWdlKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIHRoaXMuX3RyYWNlKFwiQ2xpZW50LnNlbmRcIiwgbWVzc2FnZSk7XG5cbiAgICAgIHZhciB3aXJlTWVzc2FnZSA9IG5ldyBXaXJlTWVzc2FnZShNRVNTQUdFX1RZUEUuUFVCTElTSCk7XG4gICAgICB3aXJlTWVzc2FnZS5wYXlsb2FkTWVzc2FnZSA9IG1lc3NhZ2U7XG5cbiAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAvLyBNYXJrIHFvcyAxICYgMiBtZXNzYWdlIGFzIFwiQUNLIHJlcXVpcmVkXCJcbiAgICAgICAgLy8gRm9yIHFvcyAwIG1lc3NhZ2UsIGludm9rZSBvbk1lc3NhZ2VEZWxpdmVyZWQgY2FsbGJhY2sgaWYgdGhlcmUgaXMgb25lLlxuICAgICAgICAvLyBUaGVuIHNjaGVkdWxlIHRoZSBtZXNzYWdlLlxuICAgICAgICBpZiAobWVzc2FnZS5xb3MgPiAwKSB7XG4gICAgICAgICAgdGhpcy5fcmVxdWlyZXNfYWNrKHdpcmVNZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9uTWVzc2FnZURlbGl2ZXJlZCkge1xuICAgICAgICAgIHRoaXMuX25vdGlmeV9tc2dfc2VudFt3aXJlTWVzc2FnZV0gPSB0aGlzLm9uTWVzc2FnZURlbGl2ZXJlZChcbiAgICAgICAgICAgIHdpcmVNZXNzYWdlLnBheWxvYWRNZXNzYWdlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zY2hlZHVsZV9tZXNzYWdlKHdpcmVNZXNzYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEN1cnJlbnRseSBkaXNjb25uZWN0ZWQsIHdpbGwgbm90IHNjaGVkdWxlIHRoaXMgbWVzc2FnZVxuICAgICAgICAvLyBDaGVjayBpZiByZWNvbm5lY3RpbmcgaXMgaW4gcHJvZ3Jlc3MgYW5kIGRpc2Nvbm5lY3RlZCBwdWJsaXNoIGlzIGVuYWJsZWQuXG4gICAgICAgIGlmICh0aGlzLl9yZWNvbm5lY3RpbmcgJiYgdGhpcy5kaXNjb25uZWN0ZWRQdWJsaXNoaW5nKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgdGhlIGxpbWl0IHdoaWNoIGluY2x1ZGUgdGhlIFwicmVxdWlyZWQgQUNLXCIgbWVzc2FnZXNcbiAgICAgICAgICB2YXIgbWVzc2FnZUNvdW50ID1cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX3NlbnRNZXNzYWdlcykubGVuZ3RoICtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlcmVkX21zZ19xdWV1ZS5sZW5ndGg7XG4gICAgICAgICAgaWYgKG1lc3NhZ2VDb3VudCA+IHRoaXMuZGlzY29ubmVjdGVkQnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuQlVGRkVSX0ZVTEwsIFt0aGlzLmRpc2Nvbm5lY3RlZEJ1ZmZlclNpemVdKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UucW9zID4gMCkge1xuICAgICAgICAgICAgICAvLyBNYXJrIHRoaXMgbWVzc2FnZSBhcyBcIkFDSyByZXF1aXJlZFwiXG4gICAgICAgICAgICAgIHRoaXMuX3JlcXVpcmVzX2Fjayh3aXJlTWVzc2FnZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aXJlTWVzc2FnZS5zZXF1ZW5jZSA9ICsrdGhpcy5fc2VxdWVuY2U7XG4gICAgICAgICAgICAgIC8vIEFkZCBtZXNzYWdlcyBpbiBmaWZvIG9yZGVyIHRvIGFycmF5LCBieSBhZGRpbmcgdG8gc3RhcnRcbiAgICAgICAgICAgICAgdGhpcy5fYnVmZmVyZWRfbXNnX3F1ZXVlLnVuc2hpZnQod2lyZU1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLklOVkFMSURfU1RBVEUsIFtcIm5vdCBjb25uZWN0ZWRcIl0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl90cmFjZShcIkNsaWVudC5kaXNjb25uZWN0XCIpO1xuXG4gICAgICBpZiAodGhpcy5fcmVjb25uZWN0aW5nKSB7XG4gICAgICAgIC8vIGRpc2Nvbm5lY3QoKSBmdW5jdGlvbiBpcyBjYWxsZWQgd2hpbGUgcmVjb25uZWN0IGlzIGluIHByb2dyZXNzLlxuICAgICAgICAvLyBUZXJtaW5hdGUgdGhlIGF1dG8gcmVjb25uZWN0IHByb2Nlc3MuXG4gICAgICAgIHRoaXMuX3JlY29ubmVjdFRpbWVvdXQuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdFRpbWVvdXQgPSBudWxsO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnNvY2tldClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX1NUQVRFLCBbXCJub3QgY29ubmVjdGluZyBvciBjb25uZWN0ZWRcIl0pXG4gICAgICAgICk7XG5cbiAgICAgIHZhciB3aXJlTWVzc2FnZSA9IG5ldyBXaXJlTWVzc2FnZShNRVNTQUdFX1RZUEUuRElTQ09OTkVDVCk7XG5cbiAgICAgIC8vIFJ1biB0aGUgZGlzY29ubmVjdGVkIGNhbGwgYmFjayBhcyBzb29uIGFzIHRoZSBtZXNzYWdlIGhhcyBiZWVuIHNlbnQsXG4gICAgICAvLyBpbiBjYXNlIG9mIGEgZmFpbHVyZSBsYXRlciBvbiBpbiB0aGUgZGlzY29ubmVjdCBwcm9jZXNzaW5nLlxuICAgICAgLy8gYXMgYSBjb25zZXF1ZW5jZSwgdGhlIF9kaXNjb25lY3RlZCBjYWxsIGJhY2sgbWF5IGJlIHJ1biBzZXZlcmFsIHRpbWVzLlxuICAgICAgdGhpcy5fbm90aWZ5X21zZ19zZW50W3dpcmVNZXNzYWdlXSA9IHNjb3BlKHRoaXMuX2Rpc2Nvbm5lY3RlZCwgdGhpcyk7XG5cbiAgICAgIHRoaXMuX3NjaGVkdWxlX21lc3NhZ2Uod2lyZU1lc3NhZ2UpO1xuICAgIH07XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5nZXRUcmFjZUxvZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX3RyYWNlQnVmZmVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3RyYWNlKFwiQ2xpZW50LmdldFRyYWNlTG9nXCIsIG5ldyBEYXRlKCkpO1xuICAgICAgICB0aGlzLl90cmFjZShcbiAgICAgICAgICBcIkNsaWVudC5nZXRUcmFjZUxvZyBpbiBmbGlnaHQgbWVzc2FnZXNcIixcbiAgICAgICAgICB0aGlzLl9zZW50TWVzc2FnZXMubGVuZ3RoXG4gICAgICAgICk7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl9zZW50TWVzc2FnZXMpXG4gICAgICAgICAgdGhpcy5fdHJhY2UoXCJfc2VudE1lc3NhZ2VzIFwiLCBrZXksIHRoaXMuX3NlbnRNZXNzYWdlc1trZXldKTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuX3JlY2VpdmVkTWVzc2FnZXMpXG4gICAgICAgICAgdGhpcy5fdHJhY2UoXCJfcmVjZWl2ZWRNZXNzYWdlcyBcIiwga2V5LCB0aGlzLl9yZWNlaXZlZE1lc3NhZ2VzW2tleV0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl90cmFjZUJ1ZmZlcjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuc3RhcnRUcmFjZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX3RyYWNlQnVmZmVyID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3RyYWNlQnVmZmVyID0gW107XG4gICAgICB9XG4gICAgICB0aGlzLl90cmFjZShcIkNsaWVudC5zdGFydFRyYWNlXCIsIG5ldyBEYXRlKCksIHZlcnNpb24pO1xuICAgIH07XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5zdG9wVHJhY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl90cmFjZUJ1ZmZlcjtcbiAgICB9O1xuXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX2RvQ29ubmVjdCA9IGZ1bmN0aW9uKHdzdXJsKSB7XG4gICAgICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgb3BlbiwgdGhpcyBjbGllbnQgd2lsbCBzZW5kIHRoZSBDT05ORUNUIFdpcmVNZXNzYWdlIHVzaW5nIHRoZSBzYXZlZCBwYXJhbWV0ZXJzLlxuICAgICAgaWYgKHRoaXMuY29ubmVjdE9wdGlvbnMudXNlU1NMKSB7XG4gICAgICAgIHZhciB1cmlQYXJ0cyA9IHdzdXJsLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgdXJpUGFydHNbMF0gPSBcIndzc1wiO1xuICAgICAgICB3c3VybCA9IHVyaVBhcnRzLmpvaW4oXCI6XCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5fd3N1cmkgPSB3c3VybDtcbiAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLmNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uIDwgNCkge1xuICAgICAgICB0aGlzLnNvY2tldCA9IG5ldyBXZWJTb2NrZXQod3N1cmwsIFtcIm1xdHR2My4xXCJdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc29ja2V0ID0gbmV3IFdlYlNvY2tldCh3c3VybCwgW1wibXF0dFwiXSk7XG4gICAgICB9XG4gICAgICB0aGlzLnNvY2tldC5iaW5hcnlUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgdGhpcy5zb2NrZXQub25vcGVuID0gc2NvcGUodGhpcy5fb25fc29ja2V0X29wZW4sIHRoaXMpO1xuICAgICAgdGhpcy5zb2NrZXQub25tZXNzYWdlID0gc2NvcGUodGhpcy5fb25fc29ja2V0X21lc3NhZ2UsIHRoaXMpO1xuICAgICAgdGhpcy5zb2NrZXQub25lcnJvciA9IHNjb3BlKHRoaXMuX29uX3NvY2tldF9lcnJvciwgdGhpcyk7XG4gICAgICB0aGlzLnNvY2tldC5vbmNsb3NlID0gc2NvcGUodGhpcy5fb25fc29ja2V0X2Nsb3NlLCB0aGlzKTtcblxuICAgICAgdGhpcy5zZW5kUGluZ2VyID0gbmV3IFBpbmdlcih0aGlzLCB0aGlzLmNvbm5lY3RPcHRpb25zLmtlZXBBbGl2ZUludGVydmFsKTtcbiAgICAgIHRoaXMucmVjZWl2ZVBpbmdlciA9IG5ldyBQaW5nZXIoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRoaXMuY29ubmVjdE9wdGlvbnMua2VlcEFsaXZlSW50ZXJ2YWxcbiAgICAgICk7XG4gICAgICBpZiAodGhpcy5fY29ubmVjdFRpbWVvdXQpIHtcbiAgICAgICAgdGhpcy5fY29ubmVjdFRpbWVvdXQuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RUaW1lb3V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2Nvbm5lY3RUaW1lb3V0ID0gbmV3IFRpbWVvdXQoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRoaXMuY29ubmVjdE9wdGlvbnMudGltZW91dCxcbiAgICAgICAgdGhpcy5fZGlzY29ubmVjdGVkLFxuICAgICAgICBbRVJST1IuQ09OTkVDVF9USU1FT1VULmNvZGUsIGZvcm1hdChFUlJPUi5DT05ORUNUX1RJTUVPVVQpXVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgLy8gU2NoZWR1bGUgYSBuZXcgbWVzc2FnZSB0byBiZSBzZW50IG92ZXIgdGhlIFdlYlNvY2tldHNcbiAgICAvLyBjb25uZWN0aW9uLiBDT05ORUNUIG1lc3NhZ2VzIGNhdXNlIFdlYlNvY2tldCBjb25uZWN0aW9uXG4gICAgLy8gdG8gYmUgc3RhcnRlZC4gQWxsIG90aGVyIG1lc3NhZ2VzIGFyZSBxdWV1ZWQgaW50ZXJuYWxseVxuICAgIC8vIHVudGlsIHRoaXMgaGFzIGhhcHBlbmVkLiBXaGVuIFdTIGNvbm5lY3Rpb24gc3RhcnRzLCBwcm9jZXNzXG4gICAgLy8gYWxsIG91dHN0YW5kaW5nIG1lc3NhZ2VzLlxuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9zY2hlZHVsZV9tZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgLy8gQWRkIG1lc3NhZ2VzIGluIGZpZm8gb3JkZXIgdG8gYXJyYXksIGJ5IGFkZGluZyB0byBzdGFydFxuICAgICAgdGhpcy5fbXNnX3F1ZXVlLnVuc2hpZnQobWVzc2FnZSk7XG4gICAgICAvLyBQcm9jZXNzIG91dHN0YW5kaW5nIG1lc3NhZ2VzIGluIHRoZSBxdWV1ZSBpZiB3ZSBoYXZlIGFuICBvcGVuIHNvY2tldCwgYW5kIGhhdmUgcmVjZWl2ZWQgQ09OTkFDSy5cbiAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICB0aGlzLl9wcm9jZXNzX3F1ZXVlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENsaWVudEltcGwucHJvdG90eXBlLnN0b3JlID0gZnVuY3Rpb24ocHJlZml4LCB3aXJlTWVzc2FnZSkge1xuICAgICAgdmFyIHN0b3JlZE1lc3NhZ2UgPSB7XG4gICAgICAgIHR5cGU6IHdpcmVNZXNzYWdlLnR5cGUsXG4gICAgICAgIG1lc3NhZ2VJZGVudGlmaWVyOiB3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcixcbiAgICAgICAgdmVyc2lvbjogMVxuICAgICAgfTtcblxuICAgICAgc3dpdGNoICh3aXJlTWVzc2FnZS50eXBlKSB7XG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQkxJU0g6XG4gICAgICAgICAgaWYgKHdpcmVNZXNzYWdlLnB1YlJlY1JlY2VpdmVkKSBzdG9yZWRNZXNzYWdlLnB1YlJlY1JlY2VpdmVkID0gdHJ1ZTtcblxuICAgICAgICAgIC8vIENvbnZlcnQgdGhlIHBheWxvYWQgdG8gYSBoZXggc3RyaW5nLlxuICAgICAgICAgIHN0b3JlZE1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UgPSB7fTtcbiAgICAgICAgICB2YXIgaGV4ID0gXCJcIjtcbiAgICAgICAgICB2YXIgbWVzc2FnZUJ5dGVzID0gd2lyZU1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UucGF5bG9hZEJ5dGVzO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVzc2FnZUJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZUJ5dGVzW2ldIDw9IDB4ZilcbiAgICAgICAgICAgICAgaGV4ID0gaGV4ICsgXCIwXCIgKyBtZXNzYWdlQnl0ZXNbaV0udG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgZWxzZSBoZXggPSBoZXggKyBtZXNzYWdlQnl0ZXNbaV0udG9TdHJpbmcoMTYpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdG9yZWRNZXNzYWdlLnBheWxvYWRNZXNzYWdlLnBheWxvYWRIZXggPSBoZXg7XG5cbiAgICAgICAgICBzdG9yZWRNZXNzYWdlLnBheWxvYWRNZXNzYWdlLnFvcyA9IHdpcmVNZXNzYWdlLnBheWxvYWRNZXNzYWdlLnFvcztcbiAgICAgICAgICBzdG9yZWRNZXNzYWdlLnBheWxvYWRNZXNzYWdlLmRlc3RpbmF0aW9uTmFtZSA9XG4gICAgICAgICAgICB3aXJlTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWU7XG4gICAgICAgICAgaWYgKHdpcmVNZXNzYWdlLnBheWxvYWRNZXNzYWdlLmR1cGxpY2F0ZSlcbiAgICAgICAgICAgIHN0b3JlZE1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UuZHVwbGljYXRlID0gdHJ1ZTtcbiAgICAgICAgICBpZiAod2lyZU1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UucmV0YWluZWQpXG4gICAgICAgICAgICBzdG9yZWRNZXNzYWdlLnBheWxvYWRNZXNzYWdlLnJldGFpbmVkID0gdHJ1ZTtcblxuICAgICAgICAgIC8vIEFkZCBhIHNlcXVlbmNlIG51bWJlciB0byBzZW50IG1lc3NhZ2VzLlxuICAgICAgICAgIGlmIChwcmVmaXguaW5kZXhPZihcIlNlbnQ6XCIpID09PSAwKSB7XG4gICAgICAgICAgICBpZiAod2lyZU1lc3NhZ2Uuc2VxdWVuY2UgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgd2lyZU1lc3NhZ2Uuc2VxdWVuY2UgPSArK3RoaXMuX3NlcXVlbmNlO1xuICAgICAgICAgICAgc3RvcmVkTWVzc2FnZS5zZXF1ZW5jZSA9IHdpcmVNZXNzYWdlLnNlcXVlbmNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfU1RPUkVEX0RBVEEsIFtcbiAgICAgICAgICAgICAgcHJlZml4ICsgdGhpcy5fbG9jYWxLZXkgKyB3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcixcbiAgICAgICAgICAgICAgc3RvcmVkTWVzc2FnZVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXG4gICAgICAgIHByZWZpeCArIHRoaXMuX2xvY2FsS2V5ICsgd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXIsXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHN0b3JlZE1lc3NhZ2UpXG4gICAgICApO1xuICAgIH07XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgdmFyIHN0b3JlZE1lc3NhZ2UgPSBKU09OLnBhcnNlKHZhbHVlKTtcblxuICAgICAgdmFyIHdpcmVNZXNzYWdlID0gbmV3IFdpcmVNZXNzYWdlKHN0b3JlZE1lc3NhZ2UudHlwZSwgc3RvcmVkTWVzc2FnZSk7XG5cbiAgICAgIHN3aXRjaCAoc3RvcmVkTWVzc2FnZS50eXBlKSB7XG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQkxJU0g6XG4gICAgICAgICAgLy8gUmVwbGFjZSB0aGUgcGF5bG9hZCBtZXNzYWdlIHdpdGggYSBNZXNzYWdlIG9iamVjdC5cbiAgICAgICAgICB2YXIgaGV4ID0gc3RvcmVkTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5wYXlsb2FkSGV4O1xuICAgICAgICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoaGV4Lmxlbmd0aCAvIDIpO1xuICAgICAgICAgIHZhciBieXRlU3RyZWFtID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgd2hpbGUgKGhleC5sZW5ndGggPj0gMikge1xuICAgICAgICAgICAgdmFyIHggPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDAsIDIpLCAxNik7XG4gICAgICAgICAgICBoZXggPSBoZXguc3Vic3RyaW5nKDIsIGhleC5sZW5ndGgpO1xuICAgICAgICAgICAgYnl0ZVN0cmVhbVtpKytdID0geDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHBheWxvYWRNZXNzYWdlID0gbmV3IE1lc3NhZ2UoYnl0ZVN0cmVhbSk7XG5cbiAgICAgICAgICBwYXlsb2FkTWVzc2FnZS5xb3MgPSBzdG9yZWRNZXNzYWdlLnBheWxvYWRNZXNzYWdlLnFvcztcbiAgICAgICAgICBwYXlsb2FkTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUgPVxuICAgICAgICAgICAgc3RvcmVkTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWU7XG4gICAgICAgICAgaWYgKHN0b3JlZE1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UuZHVwbGljYXRlKVxuICAgICAgICAgICAgcGF5bG9hZE1lc3NhZ2UuZHVwbGljYXRlID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoc3RvcmVkTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5yZXRhaW5lZClcbiAgICAgICAgICAgIHBheWxvYWRNZXNzYWdlLnJldGFpbmVkID0gdHJ1ZTtcbiAgICAgICAgICB3aXJlTWVzc2FnZS5wYXlsb2FkTWVzc2FnZSA9IHBheWxvYWRNZXNzYWdlO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXQoRVJST1IuSU5WQUxJRF9TVE9SRURfREFUQSwgW2tleSwgdmFsdWVdKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkuaW5kZXhPZihcIlNlbnQ6XCIgKyB0aGlzLl9sb2NhbEtleSkgPT09IDApIHtcbiAgICAgICAgd2lyZU1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UuZHVwbGljYXRlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fc2VudE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXSA9IHdpcmVNZXNzYWdlO1xuICAgICAgfSBlbHNlIGlmIChrZXkuaW5kZXhPZihcIlJlY2VpdmVkOlwiICsgdGhpcy5fbG9jYWxLZXkpID09PSAwKSB7XG4gICAgICAgIHRoaXMuX3JlY2VpdmVkTWVzc2FnZXNbd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJdID0gd2lyZU1lc3NhZ2U7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9wcm9jZXNzX3F1ZXVlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbWVzc2FnZSA9IG51bGw7XG5cbiAgICAgIC8vIFNlbmQgYWxsIHF1ZXVlZCBtZXNzYWdlcyBkb3duIHNvY2tldCBjb25uZWN0aW9uXG4gICAgICB3aGlsZSAoKG1lc3NhZ2UgPSB0aGlzLl9tc2dfcXVldWUucG9wKCkpKSB7XG4gICAgICAgIHRoaXMuX3NvY2tldF9zZW5kKG1lc3NhZ2UpO1xuICAgICAgICAvLyBOb3RpZnkgbGlzdGVuZXJzIHRoYXQgbWVzc2FnZSB3YXMgc3VjY2Vzc2Z1bGx5IHNlbnRcbiAgICAgICAgaWYgKHRoaXMuX25vdGlmeV9tc2dfc2VudFttZXNzYWdlXSkge1xuICAgICAgICAgIHRoaXMuX25vdGlmeV9tc2dfc2VudFttZXNzYWdlXSgpO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ub3RpZnlfbXNnX3NlbnRbbWVzc2FnZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRXhwZWN0IGFuIEFDSyByZXNwb25zZSBmb3IgdGhpcyBtZXNzYWdlLiBBZGQgbWVzc2FnZSB0byB0aGUgc2V0IG9mIGluIHByb2dyZXNzXG4gICAgICogbWVzc2FnZXMgYW5kIHNldCBhbiB1bnVzZWQgaWRlbnRpZmllciBpbiB0aGlzIG1lc3NhZ2UuXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9yZXF1aXJlc19hY2sgPSBmdW5jdGlvbih3aXJlTWVzc2FnZSkge1xuICAgICAgdmFyIG1lc3NhZ2VDb3VudCA9IE9iamVjdC5rZXlzKHRoaXMuX3NlbnRNZXNzYWdlcykubGVuZ3RoO1xuICAgICAgaWYgKG1lc3NhZ2VDb3VudCA+IHRoaXMubWF4TWVzc2FnZUlkZW50aWZpZXIpXG4gICAgICAgIHRocm93IEVycm9yKFwiVG9vIG1hbnkgbWVzc2FnZXM6XCIgKyBtZXNzYWdlQ291bnQpO1xuXG4gICAgICB3aGlsZSAodGhpcy5fc2VudE1lc3NhZ2VzW3RoaXMuX21lc3NhZ2VfaWRlbnRpZmllcl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9tZXNzYWdlX2lkZW50aWZpZXIrKztcbiAgICAgIH1cbiAgICAgIHdpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyID0gdGhpcy5fbWVzc2FnZV9pZGVudGlmaWVyO1xuICAgICAgdGhpcy5fc2VudE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXSA9IHdpcmVNZXNzYWdlO1xuICAgICAgaWYgKHdpcmVNZXNzYWdlLnR5cGUgPT09IE1FU1NBR0VfVFlQRS5QVUJMSVNIKSB7XG4gICAgICAgIHRoaXMuc3RvcmUoXCJTZW50OlwiLCB3aXJlTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fbWVzc2FnZV9pZGVudGlmaWVyID09PSB0aGlzLm1heE1lc3NhZ2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHRoaXMuX21lc3NhZ2VfaWRlbnRpZmllciA9IDE7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHRoZSB1bmRlcmx5aW5nIHdlYnNvY2tldCBoYXMgYmVlbiBvcGVuZWQuXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9vbl9zb2NrZXRfb3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gQ3JlYXRlIHRoZSBDT05ORUNUIG1lc3NhZ2Ugb2JqZWN0LlxuICAgICAgdmFyIHdpcmVNZXNzYWdlID0gbmV3IFdpcmVNZXNzYWdlKFxuICAgICAgICBNRVNTQUdFX1RZUEUuQ09OTkVDVCxcbiAgICAgICAgdGhpcy5jb25uZWN0T3B0aW9uc1xuICAgICAgKTtcbiAgICAgIHdpcmVNZXNzYWdlLmNsaWVudElkID0gdGhpcy5jbGllbnRJZDtcbiAgICAgIHRoaXMuX3NvY2tldF9zZW5kKHdpcmVNZXNzYWdlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIHVuZGVybHlpbmcgd2Vic29ja2V0IGhhcyByZWNlaXZlZCBhIGNvbXBsZXRlIHBhY2tldC5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX29uX3NvY2tldF9tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHRoaXMuX3RyYWNlKFwiQ2xpZW50Ll9vbl9zb2NrZXRfbWVzc2FnZVwiLCBldmVudC5kYXRhKTtcbiAgICAgIHZhciBtZXNzYWdlcyA9IHRoaXMuX2RlZnJhbWVNZXNzYWdlcyhldmVudC5kYXRhKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVzc2FnZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlTWVzc2FnZShtZXNzYWdlc1tpXSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9kZWZyYW1lTWVzc2FnZXMgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgYnl0ZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gICAgICB2YXIgbWVzc2FnZXMgPSBbXTtcbiAgICAgIGlmICh0aGlzLnJlY2VpdmVCdWZmZXIpIHtcbiAgICAgICAgdmFyIG5ld0RhdGEgPSBuZXcgVWludDhBcnJheShcbiAgICAgICAgICB0aGlzLnJlY2VpdmVCdWZmZXIubGVuZ3RoICsgYnl0ZUFycmF5Lmxlbmd0aFxuICAgICAgICApO1xuICAgICAgICBuZXdEYXRhLnNldCh0aGlzLnJlY2VpdmVCdWZmZXIpO1xuICAgICAgICBuZXdEYXRhLnNldChieXRlQXJyYXksIHRoaXMucmVjZWl2ZUJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICBieXRlQXJyYXkgPSBuZXdEYXRhO1xuICAgICAgICBkZWxldGUgdGhpcy5yZWNlaXZlQnVmZmVyO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHdoaWxlIChvZmZzZXQgPCBieXRlQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGRlY29kZU1lc3NhZ2UoYnl0ZUFycmF5LCBvZmZzZXQpO1xuICAgICAgICAgIHZhciB3aXJlTWVzc2FnZSA9IHJlc3VsdFswXTtcbiAgICAgICAgICBvZmZzZXQgPSByZXN1bHRbMV07XG4gICAgICAgICAgaWYgKHdpcmVNZXNzYWdlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBtZXNzYWdlcy5wdXNoKHdpcmVNZXNzYWdlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgPCBieXRlQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyID0gYnl0ZUFycmF5LnN1YmFycmF5KG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHZhciBlcnJvclN0YWNrID1cbiAgICAgICAgICBlcnJvci5oYXNPd25Qcm9wZXJ0eShcInN0YWNrXCIpID09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgICAgID8gZXJyb3Iuc3RhY2sudG9TdHJpbmcoKVxuICAgICAgICAgICAgOiBcIk5vIEVycm9yIFN0YWNrIEF2YWlsYWJsZVwiO1xuICAgICAgICB0aGlzLl9kaXNjb25uZWN0ZWQoXG4gICAgICAgICAgRVJST1IuSU5URVJOQUxfRVJST1IuY29kZSxcbiAgICAgICAgICBmb3JtYXQoRVJST1IuSU5URVJOQUxfRVJST1IsIFtlcnJvci5tZXNzYWdlLCBlcnJvclN0YWNrXSlcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xuICAgIH07XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5faGFuZGxlTWVzc2FnZSA9IGZ1bmN0aW9uKHdpcmVNZXNzYWdlKSB7XG4gICAgICB0aGlzLl90cmFjZShcIkNsaWVudC5faGFuZGxlTWVzc2FnZVwiLCB3aXJlTWVzc2FnZSk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHN3aXRjaCAod2lyZU1lc3NhZ2UudHlwZSkge1xuICAgICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLkNPTk5BQ0s6XG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0VGltZW91dC5jYW5jZWwoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZWNvbm5lY3RUaW1lb3V0KSB0aGlzLl9yZWNvbm5lY3RUaW1lb3V0LmNhbmNlbCgpO1xuXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIHN0YXJ0ZWQgdXNpbmcgY2xlYW4gc2Vzc2lvbiB0aGVuIGNsZWFyIHVwIHRoZSBsb2NhbCBzdGF0ZS5cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3RPcHRpb25zLmNsZWFuU2Vzc2lvbikge1xuICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fc2VudE1lc3NhZ2VzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbnRNZXNzYWdlID0gdGhpcy5fc2VudE1lc3NhZ2VzW2tleV07XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXG4gICAgICAgICAgICAgICAgICBcIlNlbnQ6XCIgKyB0aGlzLl9sb2NhbEtleSArIHNlbnRNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aGlzLl9zZW50TWVzc2FnZXMgPSB7fTtcblxuICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fcmVjZWl2ZWRNZXNzYWdlcykge1xuICAgICAgICAgICAgICAgIHZhciByZWNlaXZlZE1lc3NhZ2UgPSB0aGlzLl9yZWNlaXZlZE1lc3NhZ2VzW2tleV07XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXG4gICAgICAgICAgICAgICAgICBcIlJlY2VpdmVkOlwiICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxLZXkgK1xuICAgICAgICAgICAgICAgICAgICByZWNlaXZlZE1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMuX3JlY2VpdmVkTWVzc2FnZXMgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENsaWVudCBjb25uZWN0ZWQgYW5kIHJlYWR5IGZvciBidXNpbmVzcy5cbiAgICAgICAgICAgIGlmICh3aXJlTWVzc2FnZS5yZXR1cm5Db2RlID09PSAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgLy8gSnVtcCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0IG9mIHVyaXMgYW5kIHN0b3AgbG9va2luZyBmb3IgYSBnb29kIGhvc3QuXG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdE9wdGlvbnMudXJpcylcbiAgICAgICAgICAgICAgICB0aGlzLmhvc3RJbmRleCA9IHRoaXMuY29ubmVjdE9wdGlvbnMudXJpcy5sZW5ndGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9kaXNjb25uZWN0ZWQoXG4gICAgICAgICAgICAgICAgRVJST1IuQ09OTkFDS19SRVRVUk5DT0RFLmNvZGUsXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLkNPTk5BQ0tfUkVUVVJOQ09ERSwgW1xuICAgICAgICAgICAgICAgICAgd2lyZU1lc3NhZ2UucmV0dXJuQ29kZSxcbiAgICAgICAgICAgICAgICAgIENPTk5BQ0tfUkNbd2lyZU1lc3NhZ2UucmV0dXJuQ29kZV1cbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVzZW5kIG1lc3NhZ2VzLlxuICAgICAgICAgICAgdmFyIHNlcXVlbmNlZE1lc3NhZ2VzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBtc2dJZCBpbiB0aGlzLl9zZW50TWVzc2FnZXMpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuX3NlbnRNZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eShtc2dJZCkpXG4gICAgICAgICAgICAgICAgc2VxdWVuY2VkTWVzc2FnZXMucHVzaCh0aGlzLl9zZW50TWVzc2FnZXNbbXNnSWRdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQWxzbyBzY2hlZHVsZSBxb3MgMCBidWZmZXJlZCBtZXNzYWdlcyBpZiBhbnlcbiAgICAgICAgICAgIGlmICh0aGlzLl9idWZmZXJlZF9tc2dfcXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICB2YXIgbXNnID0gbnVsbDtcbiAgICAgICAgICAgICAgd2hpbGUgKChtc2cgPSB0aGlzLl9idWZmZXJlZF9tc2dfcXVldWUucG9wKCkpKSB7XG4gICAgICAgICAgICAgICAgc2VxdWVuY2VkTWVzc2FnZXMucHVzaChtc2cpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uTWVzc2FnZURlbGl2ZXJlZClcbiAgICAgICAgICAgICAgICAgIHRoaXMuX25vdGlmeV9tc2dfc2VudFttc2ddID0gdGhpcy5vbk1lc3NhZ2VEZWxpdmVyZWQoXG4gICAgICAgICAgICAgICAgICAgIG1zZy5wYXlsb2FkTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTb3J0IHNlbnRNZXNzYWdlcyBpbnRvIHRoZSBvcmlnaW5hbCBzZW50IG9yZGVyLlxuICAgICAgICAgICAgdmFyIHNlcXVlbmNlZE1lc3NhZ2VzID0gc2VxdWVuY2VkTWVzc2FnZXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhLnNlcXVlbmNlIC0gYi5zZXF1ZW5jZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNlcXVlbmNlZE1lc3NhZ2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgIHZhciBzZW50TWVzc2FnZSA9IHNlcXVlbmNlZE1lc3NhZ2VzW2ldO1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc2VudE1lc3NhZ2UudHlwZSA9PSBNRVNTQUdFX1RZUEUuUFVCTElTSCAmJlxuICAgICAgICAgICAgICAgIHNlbnRNZXNzYWdlLnB1YlJlY1JlY2VpdmVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciBwdWJSZWxNZXNzYWdlID0gbmV3IFdpcmVNZXNzYWdlKE1FU1NBR0VfVFlQRS5QVUJSRUwsIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2VJZGVudGlmaWVyOiBzZW50TWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NjaGVkdWxlX21lc3NhZ2UocHViUmVsTWVzc2FnZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVfbWVzc2FnZShzZW50TWVzc2FnZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgY29ubmVjdE9wdGlvbnMub25TdWNjZXNzIGNhbGxiYWNrIGlmIHRoZXJlIGlzIG9uZS5cbiAgICAgICAgICAgIC8vIFdpbGwgYWxzbyBub3cgcmV0dXJuIGlmIHRoaXMgY29ubmVjdGlvbiB3YXMgdGhlIHJlc3VsdCBvZiBhbiBhdXRvbWF0aWNcbiAgICAgICAgICAgIC8vIHJlY29ubmVjdCBhbmQgd2hpY2ggVVJJIHdhcyBzdWNjZXNzZnVsbHkgY29ubmVjdGVkIHRvLlxuICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdE9wdGlvbnMub25TdWNjZXNzKSB7XG4gICAgICAgICAgICAgIHRoaXMuY29ubmVjdE9wdGlvbnMub25TdWNjZXNzKHtcbiAgICAgICAgICAgICAgICBpbnZvY2F0aW9uQ29udGV4dDogdGhpcy5jb25uZWN0T3B0aW9ucy5pbnZvY2F0aW9uQ29udGV4dFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5fcmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgIHJlY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0SW50ZXJ2YWwgPSAxO1xuICAgICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgb25Db25uZWN0ZWQgY2FsbGJhY2sgaWYgdGhlcmUgaXMgb25lLlxuICAgICAgICAgICAgdGhpcy5fY29ubmVjdGVkKHJlY29ubmVjdGVkLCB0aGlzLl93c3VyaSk7XG5cbiAgICAgICAgICAgIC8vIFByb2Nlc3MgYWxsIHF1ZXVlZCBtZXNzYWdlcyBub3cgdGhhdCB0aGUgY29ubmVjdGlvbiBpcyBlc3RhYmxpc2hlZC5cbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NfcXVldWUoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCTElTSDpcbiAgICAgICAgICAgIHRoaXMuX3JlY2VpdmVQdWJsaXNoKHdpcmVNZXNzYWdlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCQUNLOlxuICAgICAgICAgICAgdmFyIHNlbnRNZXNzYWdlID0gdGhpcy5fc2VudE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXTtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSByZSBmbG93IG9mIGEgUFVCQUNLIGFmdGVyIHdlIGhhdmUgcmVzdGFydGVkIHJlY2VpdmVkTWVzc2FnZSB3aWxsIG5vdCBleGlzdC5cbiAgICAgICAgICAgIGlmIChzZW50TWVzc2FnZSkge1xuICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fc2VudE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXTtcbiAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXG4gICAgICAgICAgICAgICAgXCJTZW50OlwiICsgdGhpcy5fbG9jYWxLZXkgKyB3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllclxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBpZiAodGhpcy5vbk1lc3NhZ2VEZWxpdmVyZWQpXG4gICAgICAgICAgICAgICAgdGhpcy5vbk1lc3NhZ2VEZWxpdmVyZWQoc2VudE1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5QVUJSRUM6XG4gICAgICAgICAgICB2YXIgc2VudE1lc3NhZ2UgPSB0aGlzLl9zZW50TWVzc2FnZXNbd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJdO1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHJlIGZsb3cgb2YgYSBQVUJSRUMgYWZ0ZXIgd2UgaGF2ZSByZXN0YXJ0ZWQgcmVjZWl2ZWRNZXNzYWdlIHdpbGwgbm90IGV4aXN0LlxuICAgICAgICAgICAgaWYgKHNlbnRNZXNzYWdlKSB7XG4gICAgICAgICAgICAgIHNlbnRNZXNzYWdlLnB1YlJlY1JlY2VpdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdmFyIHB1YlJlbE1lc3NhZ2UgPSBuZXcgV2lyZU1lc3NhZ2UoTUVTU0FHRV9UWVBFLlBVQlJFTCwge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VJZGVudGlmaWVyOiB3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllclxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdGhpcy5zdG9yZShcIlNlbnQ6XCIsIHNlbnRNZXNzYWdlKTtcbiAgICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVfbWVzc2FnZShwdWJSZWxNZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCUkVMOlxuICAgICAgICAgICAgdmFyIHJlY2VpdmVkTWVzc2FnZSA9IHRoaXMuX3JlY2VpdmVkTWVzc2FnZXNbXG4gICAgICAgICAgICAgIHdpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXG4gICAgICAgICAgICAgIFwiUmVjZWl2ZWQ6XCIgKyB0aGlzLl9sb2NhbEtleSArIHdpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHJlIGZsb3cgb2YgYSBQVUJSRUwgYWZ0ZXIgd2UgaGF2ZSByZXN0YXJ0ZWQgcmVjZWl2ZWRNZXNzYWdlIHdpbGwgbm90IGV4aXN0LlxuICAgICAgICAgICAgaWYgKHJlY2VpdmVkTWVzc2FnZSkge1xuICAgICAgICAgICAgICB0aGlzLl9yZWNlaXZlTWVzc2FnZShyZWNlaXZlZE1lc3NhZ2UpO1xuICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fcmVjZWl2ZWRNZXNzYWdlc1t3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBbHdheXMgZmxvdyBQdWJDb21wLCB3ZSBtYXkgaGF2ZSBwcmV2aW91c2x5IGZsb3dlZCBQdWJDb21wIGJ1dCB0aGUgc2VydmVyIGxvc3QgaXQgYW5kIHJlc3RhcnRlZC5cbiAgICAgICAgICAgIHZhciBwdWJDb21wTWVzc2FnZSA9IG5ldyBXaXJlTWVzc2FnZShNRVNTQUdFX1RZUEUuUFVCQ09NUCwge1xuICAgICAgICAgICAgICBtZXNzYWdlSWRlbnRpZmllcjogd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVfbWVzc2FnZShwdWJDb21wTWVzc2FnZSk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCQ09NUDpcbiAgICAgICAgICAgIHZhciBzZW50TWVzc2FnZSA9IHRoaXMuX3NlbnRNZXNzYWdlc1t3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcl07XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fc2VudE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFxuICAgICAgICAgICAgICBcIlNlbnQ6XCIgKyB0aGlzLl9sb2NhbEtleSArIHdpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHRoaXMub25NZXNzYWdlRGVsaXZlcmVkKVxuICAgICAgICAgICAgICB0aGlzLm9uTWVzc2FnZURlbGl2ZXJlZChzZW50TWVzc2FnZS5wYXlsb2FkTWVzc2FnZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlNVQkFDSzpcbiAgICAgICAgICAgIHZhciBzZW50TWVzc2FnZSA9IHRoaXMuX3NlbnRNZXNzYWdlc1t3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcl07XG4gICAgICAgICAgICBpZiAoc2VudE1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgaWYgKHNlbnRNZXNzYWdlLnRpbWVPdXQpIHNlbnRNZXNzYWdlLnRpbWVPdXQuY2FuY2VsKCk7XG4gICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBuZWVkIHRvIGJlIGZpeGVkIHdoZW4gd2UgYWRkIG11bHRpcGxlIHRvcGljIHN1cHBvcnRcbiAgICAgICAgICAgICAgaWYgKHdpcmVNZXNzYWdlLnJldHVybkNvZGVbMF0gPT09IDB4ODApIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VudE1lc3NhZ2Uub25GYWlsdXJlKSB7XG4gICAgICAgICAgICAgICAgICBzZW50TWVzc2FnZS5vbkZhaWx1cmUod2lyZU1lc3NhZ2UucmV0dXJuQ29kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlbnRNZXNzYWdlLm9uU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHNlbnRNZXNzYWdlLm9uU3VjY2Vzcyh3aXJlTWVzc2FnZS5yZXR1cm5Db2RlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fc2VudE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuVU5TVUJBQ0s6XG4gICAgICAgICAgICB2YXIgc2VudE1lc3NhZ2UgPSB0aGlzLl9zZW50TWVzc2FnZXNbd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJdO1xuICAgICAgICAgICAgaWYgKHNlbnRNZXNzYWdlKSB7XG4gICAgICAgICAgICAgIGlmIChzZW50TWVzc2FnZS50aW1lT3V0KSBzZW50TWVzc2FnZS50aW1lT3V0LmNhbmNlbCgpO1xuICAgICAgICAgICAgICBpZiAoc2VudE1lc3NhZ2UuY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBzZW50TWVzc2FnZS5jYWxsYmFjaygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zZW50TWVzc2FnZXNbd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBJTkdSRVNQOlxuICAgICAgICAgICAgLyogVGhlIHNlbmRQaW5nZXIgb3IgcmVjZWl2ZVBpbmdlciBtYXkgaGF2ZSBzZW50IGEgcGluZywgdGhlIHJlY2VpdmVQaW5nZXIgaGFzIGFscmVhZHkgYmVlbiByZXNldC4gKi9cbiAgICAgICAgICAgIHRoaXMuc2VuZFBpbmdlci5yZXNldCgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5ESVNDT05ORUNUOlxuICAgICAgICAgICAgLy8gQ2xpZW50cyBkbyBub3QgZXhwZWN0IHRvIHJlY2VpdmUgZGlzY29ubmVjdCBwYWNrZXRzLlxuICAgICAgICAgICAgdGhpcy5fZGlzY29ubmVjdGVkKFxuICAgICAgICAgICAgICBFUlJPUi5JTlZBTElEX01RVFRfTUVTU0FHRV9UWVBFLmNvZGUsXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX01RVFRfTUVTU0FHRV9UWVBFLCBbd2lyZU1lc3NhZ2UudHlwZV0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhpcy5fZGlzY29ubmVjdGVkKFxuICAgICAgICAgICAgICBFUlJPUi5JTlZBTElEX01RVFRfTUVTU0FHRV9UWVBFLmNvZGUsXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX01RVFRfTUVTU0FHRV9UWVBFLCBbd2lyZU1lc3NhZ2UudHlwZV0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB2YXIgZXJyb3JTdGFjayA9XG4gICAgICAgICAgZXJyb3IuaGFzT3duUHJvcGVydHkoXCJzdGFja1wiKSA9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICA/IGVycm9yLnN0YWNrLnRvU3RyaW5nKClcbiAgICAgICAgICAgIDogXCJObyBFcnJvciBTdGFjayBBdmFpbGFibGVcIjtcbiAgICAgICAgdGhpcy5fZGlzY29ubmVjdGVkKFxuICAgICAgICAgIEVSUk9SLklOVEVSTkFMX0VSUk9SLmNvZGUsXG4gICAgICAgICAgZm9ybWF0KEVSUk9SLklOVEVSTkFMX0VSUk9SLCBbZXJyb3IubWVzc2FnZSwgZXJyb3JTdGFja10pXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fb25fc29ja2V0X2Vycm9yID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgIGlmICghdGhpcy5fcmVjb25uZWN0aW5nKSB7XG4gICAgICAgIHRoaXMuX2Rpc2Nvbm5lY3RlZChcbiAgICAgICAgICBFUlJPUi5TT0NLRVRfRVJST1IuY29kZSxcbiAgICAgICAgICBmb3JtYXQoRVJST1IuU09DS0VUX0VSUk9SLCBbZXJyb3IuZGF0YV0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKiBAaWdub3JlICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX29uX3NvY2tldF9jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLl9yZWNvbm5lY3RpbmcpIHtcbiAgICAgICAgdGhpcy5fZGlzY29ubmVjdGVkKEVSUk9SLlNPQ0tFVF9DTE9TRS5jb2RlLCBmb3JtYXQoRVJST1IuU09DS0VUX0NMT1NFKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKiBAaWdub3JlICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX3NvY2tldF9zZW5kID0gZnVuY3Rpb24od2lyZU1lc3NhZ2UpIHtcbiAgICAgIGlmICh3aXJlTWVzc2FnZS50eXBlID09IDEpIHtcbiAgICAgICAgdmFyIHdpcmVNZXNzYWdlTWFza2VkID0gdGhpcy5fdHJhY2VNYXNrKHdpcmVNZXNzYWdlLCBcInBhc3N3b3JkXCIpO1xuICAgICAgICB0aGlzLl90cmFjZShcIkNsaWVudC5fc29ja2V0X3NlbmRcIiwgd2lyZU1lc3NhZ2VNYXNrZWQpO1xuICAgICAgfSBlbHNlIHRoaXMuX3RyYWNlKFwiQ2xpZW50Ll9zb2NrZXRfc2VuZFwiLCB3aXJlTWVzc2FnZSk7XG5cbiAgICAgIHRoaXMuc29ja2V0LnNlbmQod2lyZU1lc3NhZ2UuZW5jb2RlKCkpO1xuICAgICAgLyogV2UgaGF2ZSBwcm92ZWQgdG8gdGhlIHNlcnZlciB3ZSBhcmUgYWxpdmUuICovXG4gICAgICB0aGlzLnNlbmRQaW5nZXIucmVzZXQoKTtcbiAgICB9O1xuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fcmVjZWl2ZVB1Ymxpc2ggPSBmdW5jdGlvbih3aXJlTWVzc2FnZSkge1xuICAgICAgc3dpdGNoICh3aXJlTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5xb3MpIHtcbiAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgdGhpcy5fcmVjZWl2ZU1lc3NhZ2Uod2lyZU1lc3NhZ2UpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICB2YXIgcHViQWNrTWVzc2FnZSA9IG5ldyBXaXJlTWVzc2FnZShNRVNTQUdFX1RZUEUuUFVCQUNLLCB7XG4gICAgICAgICAgICBtZXNzYWdlSWRlbnRpZmllcjogd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLl9zY2hlZHVsZV9tZXNzYWdlKHB1YkFja01lc3NhZ2UpO1xuICAgICAgICAgIHRoaXMuX3JlY2VpdmVNZXNzYWdlKHdpcmVNZXNzYWdlKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgdGhpcy5fcmVjZWl2ZWRNZXNzYWdlc1t3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcl0gPSB3aXJlTWVzc2FnZTtcbiAgICAgICAgICB0aGlzLnN0b3JlKFwiUmVjZWl2ZWQ6XCIsIHdpcmVNZXNzYWdlKTtcbiAgICAgICAgICB2YXIgcHViUmVjTWVzc2FnZSA9IG5ldyBXaXJlTWVzc2FnZShNRVNTQUdFX1RZUEUuUFVCUkVDLCB7XG4gICAgICAgICAgICBtZXNzYWdlSWRlbnRpZmllcjogd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLl9zY2hlZHVsZV9tZXNzYWdlKHB1YlJlY01lc3NhZ2UpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFpbGQgcW9zPVwiICsgd2lyZU1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UucW9zKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fcmVjZWl2ZU1lc3NhZ2UgPSBmdW5jdGlvbih3aXJlTWVzc2FnZSkge1xuICAgICAgaWYgKHRoaXMub25NZXNzYWdlQXJyaXZlZCkge1xuICAgICAgICB0aGlzLm9uTWVzc2FnZUFycml2ZWQod2lyZU1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGllbnQgaGFzIGNvbm5lY3RlZC5cbiAgICAgKiBAcGFyYW0ge3JlY29ubmVjdH0gW2Jvb2xlYW5dIGluZGljYXRlIGlmIHRoaXMgd2FzIGEgcmVzdWx0IG9mIHJlY29ubmVjdCBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHt1cml9IFtzdHJpbmddIGZ1bGx5IHF1YWxpZmllZCBXZWJTb2NrZXQgVVJJIG9mIHRoZSBzZXJ2ZXIuXG4gICAgICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX2Nvbm5lY3RlZCA9IGZ1bmN0aW9uKHJlY29ubmVjdCwgdXJpKSB7XG4gICAgICAvLyBFeGVjdXRlIHRoZSBvbkNvbm5lY3RlZCBjYWxsYmFjayBpZiB0aGVyZSBpcyBvbmUuXG4gICAgICBpZiAodGhpcy5vbkNvbm5lY3RlZCkgdGhpcy5vbkNvbm5lY3RlZChyZWNvbm5lY3QsIHVyaSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIHJlY29ubmVjdCB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIuXG4gICAgICogRm9yIGVhY2ggcmVjb25uZWN0IGF0dGVtcHQsIHdpbGwgZG91YmxlIHRoZSByZWNvbm5lY3QgaW50ZXJ2YWxcbiAgICAgKiB1cCB0byAxMjggc2Vjb25kcy5cbiAgICAgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fcmVjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl90cmFjZShcIkNsaWVudC5fcmVjb25uZWN0XCIpO1xuICAgICAgaWYgKCF0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnNlbmRQaW5nZXIuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMucmVjZWl2ZVBpbmdlci5jYW5jZWwoKTtcbiAgICAgICAgaWYgKHRoaXMuX3JlY29ubmVjdEludGVydmFsIDwgMTI4KVxuICAgICAgICAgIHRoaXMuX3JlY29ubmVjdEludGVydmFsID0gdGhpcy5fcmVjb25uZWN0SW50ZXJ2YWwgKiAyO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0T3B0aW9ucy51cmlzKSB7XG4gICAgICAgICAgdGhpcy5ob3N0SW5kZXggPSAwO1xuICAgICAgICAgIHRoaXMuX2RvQ29ubmVjdCh0aGlzLmNvbm5lY3RPcHRpb25zLnVyaXNbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2RvQ29ubmVjdCh0aGlzLnVyaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xpZW50IGhhcyBkaXNjb25uZWN0ZWQgZWl0aGVyIGF0IGl0cyBvd24gcmVxdWVzdCBvciBiZWNhdXNlIHRoZSBzZXJ2ZXJcbiAgICAgKiBvciBuZXR3b3JrIGRpc2Nvbm5lY3RlZCBpdC4gUmVtb3ZlIGFsbCBub24tZHVyYWJsZSBzdGF0ZS5cbiAgICAgKiBAcGFyYW0ge2Vycm9yQ29kZX0gW251bWJlcl0gdGhlIGVycm9yIG51bWJlci5cbiAgICAgKiBAcGFyYW0ge2Vycm9yVGV4dH0gW3N0cmluZ10gdGhlIGVycm9yIHRleHQuXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9kaXNjb25uZWN0ZWQgPSBmdW5jdGlvbihlcnJvckNvZGUsIGVycm9yVGV4dCkge1xuICAgICAgdGhpcy5fdHJhY2UoXCJDbGllbnQuX2Rpc2Nvbm5lY3RlZFwiLCBlcnJvckNvZGUsIGVycm9yVGV4dCk7XG5cbiAgICAgIGlmIChlcnJvckNvZGUgIT09IHVuZGVmaW5lZCAmJiB0aGlzLl9yZWNvbm5lY3RpbmcpIHtcbiAgICAgICAgLy9Db250aW51ZSBhdXRvbWF0aWMgcmVjb25uZWN0IHByb2Nlc3NcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0VGltZW91dCA9IG5ldyBUaW1lb3V0KFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgdGhpcy5fcmVjb25uZWN0SW50ZXJ2YWwsXG4gICAgICAgICAgdGhpcy5fcmVjb25uZWN0XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZW5kUGluZ2VyLmNhbmNlbCgpO1xuICAgICAgdGhpcy5yZWNlaXZlUGluZ2VyLmNhbmNlbCgpO1xuICAgICAgaWYgKHRoaXMuX2Nvbm5lY3RUaW1lb3V0KSB7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RUaW1lb3V0LmNhbmNlbCgpO1xuICAgICAgICB0aGlzLl9jb25uZWN0VGltZW91dCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFyIG1lc3NhZ2UgYnVmZmVycy5cbiAgICAgIHRoaXMuX21zZ19xdWV1ZSA9IFtdO1xuICAgICAgdGhpcy5fYnVmZmVyZWRfbXNnX3F1ZXVlID0gW107XG4gICAgICB0aGlzLl9ub3RpZnlfbXNnX3NlbnQgPSB7fTtcblxuICAgICAgaWYgKHRoaXMuc29ja2V0KSB7XG4gICAgICAgIC8vIENhbmNlbCBhbGwgc29ja2V0IGNhbGxiYWNrcyBzbyB0aGF0IHRoZXkgY2Fubm90IGJlIGRyaXZlbiBhZ2FpbiBieSB0aGlzIHNvY2tldC5cbiAgICAgICAgdGhpcy5zb2NrZXQub25vcGVuID0gbnVsbDtcbiAgICAgICAgdGhpcy5zb2NrZXQub25tZXNzYWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zb2NrZXQub25lcnJvciA9IG51bGw7XG4gICAgICAgIHRoaXMuc29ja2V0Lm9uY2xvc2UgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5zb2NrZXQucmVhZHlTdGF0ZSA9PT0gMSkgdGhpcy5zb2NrZXQuY2xvc2UoKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuc29ja2V0O1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuY29ubmVjdE9wdGlvbnMudXJpcyAmJlxuICAgICAgICB0aGlzLmhvc3RJbmRleCA8IHRoaXMuY29ubmVjdE9wdGlvbnMudXJpcy5sZW5ndGggLSAxXG4gICAgICApIHtcbiAgICAgICAgLy8gVHJ5IHRoZSBuZXh0IGhvc3QuXG4gICAgICAgIHRoaXMuaG9zdEluZGV4Kys7XG4gICAgICAgIHRoaXMuX2RvQ29ubmVjdCh0aGlzLmNvbm5lY3RPcHRpb25zLnVyaXNbdGhpcy5ob3N0SW5kZXhdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChlcnJvckNvZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVycm9yQ29kZSA9IEVSUk9SLk9LLmNvZGU7XG4gICAgICAgICAgZXJyb3JUZXh0ID0gZm9ybWF0KEVSUk9SLk9LKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJ1biBhbnkgYXBwbGljYXRpb24gY2FsbGJhY2tzIGxhc3QgYXMgdGhleSBtYXkgYXR0ZW1wdCB0byByZWNvbm5lY3QgYW5kIGhlbmNlIGNyZWF0ZSBhIG5ldyBzb2NrZXQuXG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgY29ubmVjdGlvbkxvc3RDYWxsYmFjayBpZiB0aGVyZSBpcyBvbmUsIGFuZCB3ZSB3ZXJlIGNvbm5lY3RlZC5cbiAgICAgICAgICBpZiAodGhpcy5vbkNvbm5lY3Rpb25Mb3N0KSB7XG4gICAgICAgICAgICB0aGlzLm9uQ29ubmVjdGlvbkxvc3Qoe1xuICAgICAgICAgICAgICBlcnJvckNvZGU6IGVycm9yQ29kZSxcbiAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlcnJvclRleHQsXG4gICAgICAgICAgICAgIHJlY29ubmVjdDogdGhpcy5jb25uZWN0T3B0aW9ucy5yZWNvbm5lY3QsXG4gICAgICAgICAgICAgIHVyaTogdGhpcy5fd3N1cmlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXJyb3JDb2RlICE9PSBFUlJPUi5PSy5jb2RlICYmIHRoaXMuY29ubmVjdE9wdGlvbnMucmVjb25uZWN0KSB7XG4gICAgICAgICAgICAvLyBTdGFydCBhdXRvbWF0aWMgcmVjb25uZWN0IHByb2Nlc3MgZm9yIHRoZSB2ZXJ5IGZpcnN0IHRpbWUgc2luY2UgbGFzdCBzdWNjZXNzZnVsIGNvbm5lY3QuXG4gICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3RJbnRlcnZhbCA9IDE7XG4gICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3QoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIG5ldmVyIGhhZCBhIGNvbm5lY3Rpb24sIHNvIGluZGljYXRlIHRoYXQgdGhlIGNvbm5lY3QgaGFzIGZhaWxlZC5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uID09PSA0ICYmXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uRXhwbGljaXQgPT09IGZhbHNlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLl90cmFjZShcIkZhaWxlZCB0byBjb25uZWN0IFY0LCBkcm9wcGluZyBiYWNrIHRvIFYzXCIpO1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvbiA9IDM7XG4gICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0T3B0aW9ucy51cmlzKSB7XG4gICAgICAgICAgICAgIHRoaXMuaG9zdEluZGV4ID0gMDtcbiAgICAgICAgICAgICAgdGhpcy5fZG9Db25uZWN0KHRoaXMuY29ubmVjdE9wdGlvbnMudXJpc1swXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9kb0Nvbm5lY3QodGhpcy51cmkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb25uZWN0T3B0aW9ucy5vbkZhaWx1cmUpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdE9wdGlvbnMub25GYWlsdXJlKHtcbiAgICAgICAgICAgICAgaW52b2NhdGlvbkNvbnRleHQ6IHRoaXMuY29ubmVjdE9wdGlvbnMuaW52b2NhdGlvbkNvbnRleHQsXG4gICAgICAgICAgICAgIGVycm9yQ29kZTogZXJyb3JDb2RlLFxuICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yVGV4dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKiBAaWdub3JlICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX3RyYWNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBQYXNzIHRyYWNlIG1lc3NhZ2UgYmFjayB0byBjbGllbnQncyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgaWYgKHRoaXMudHJhY2VGdW5jdGlvbikge1xuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIGZvciAodmFyIGkgaW4gYXJncykge1xuICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1tpXSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgIGFyZ3Muc3BsaWNlKGksIDEsIEpTT04uc3RyaW5naWZ5KGFyZ3NbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVjb3JkID0gYXJncy5qb2luKFwiXCIpO1xuICAgICAgICB0aGlzLnRyYWNlRnVuY3Rpb24oeyBzZXZlcml0eTogXCJEZWJ1Z1wiLCBtZXNzYWdlOiByZWNvcmQgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vYnVmZmVyIHN0eWxlIHRyYWNlXG4gICAgICBpZiAodGhpcy5fdHJhY2VCdWZmZXIgIT09IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1heCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBtYXg7IGkrKykge1xuICAgICAgICAgIGlmICh0aGlzLl90cmFjZUJ1ZmZlci5sZW5ndGggPT0gdGhpcy5fTUFYX1RSQUNFX0VOVFJJRVMpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYWNlQnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpID09PSAwKSB0aGlzLl90cmFjZUJ1ZmZlci5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgIHRoaXMuX3RyYWNlQnVmZmVyLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICAgICAgICBlbHNlIHRoaXMuX3RyYWNlQnVmZmVyLnB1c2goXCIgIFwiICsgSlNPTi5zdHJpbmdpZnkoYXJndW1lbnRzW2ldKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fdHJhY2VNYXNrID0gZnVuY3Rpb24odHJhY2VPYmplY3QsIG1hc2tlZCkge1xuICAgICAgdmFyIHRyYWNlT2JqZWN0TWFza2VkID0ge307XG4gICAgICBmb3IgKHZhciBhdHRyIGluIHRyYWNlT2JqZWN0KSB7XG4gICAgICAgIGlmICh0cmFjZU9iamVjdC5oYXNPd25Qcm9wZXJ0eShhdHRyKSkge1xuICAgICAgICAgIGlmIChhdHRyID09IG1hc2tlZCkgdHJhY2VPYmplY3RNYXNrZWRbYXR0cl0gPSBcIioqKioqKlwiO1xuICAgICAgICAgIGVsc2UgdHJhY2VPYmplY3RNYXNrZWRbYXR0cl0gPSB0cmFjZU9iamVjdFthdHRyXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRyYWNlT2JqZWN0TWFza2VkO1xuICAgIH07XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBQdWJsaWMgUHJvZ3JhbW1pbmcgaW50ZXJmYWNlLlxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogVGhlIEphdmFTY3JpcHQgYXBwbGljYXRpb24gY29tbXVuaWNhdGVzIHRvIHRoZSBzZXJ2ZXIgdXNpbmcgYSB7QGxpbmsgUGFoby5DbGllbnR9IG9iamVjdC5cbiAgICAgKiA8cD5cbiAgICAgKiBNb3N0IGFwcGxpY2F0aW9ucyB3aWxsIGNyZWF0ZSBqdXN0IG9uZSBDbGllbnQgb2JqZWN0IGFuZCB0aGVuIGNhbGwgaXRzIGNvbm5lY3QoKSBtZXRob2QsXG4gICAgICogaG93ZXZlciBhcHBsaWNhdGlvbnMgY2FuIGNyZWF0ZSBtb3JlIHRoYW4gb25lIENsaWVudCBvYmplY3QgaWYgdGhleSB3aXNoLlxuICAgICAqIEluIHRoaXMgY2FzZSB0aGUgY29tYmluYXRpb24gb2YgaG9zdCwgcG9ydCBhbmQgY2xpZW50SWQgYXR0cmlidXRlcyBtdXN0IGJlIGRpZmZlcmVudCBmb3IgZWFjaCBDbGllbnQgb2JqZWN0LlxuICAgICAqIDxwPlxuICAgICAqIFRoZSBzZW5kLCBzdWJzY3JpYmUgYW5kIHVuc3Vic2NyaWJlIG1ldGhvZHMgYXJlIGltcGxlbWVudGVkIGFzIGFzeW5jaHJvbm91cyBKYXZhU2NyaXB0IG1ldGhvZHNcbiAgICAgKiAoZXZlbiB0aG91Z2ggdGhlIHVuZGVybHlpbmcgcHJvdG9jb2wgZXhjaGFuZ2UgbWlnaHQgYmUgc3luY2hyb25vdXMgaW4gbmF0dXJlKS5cbiAgICAgKiBUaGlzIG1lYW5zIHRoZXkgc2lnbmFsIHRoZWlyIGNvbXBsZXRpb24gYnkgY2FsbGluZyBiYWNrIHRvIHRoZSBhcHBsaWNhdGlvbixcbiAgICAgKiB2aWEgU3VjY2VzcyBvciBGYWlsdXJlIGNhbGxiYWNrIGZ1bmN0aW9ucyBwcm92aWRlZCBieSB0aGUgYXBwbGljYXRpb24gb24gdGhlIG1ldGhvZCBpbiBxdWVzdGlvbi5cbiAgICAgKiBTdWNoIGNhbGxiYWNrcyBhcmUgY2FsbGVkIGF0IG1vc3Qgb25jZSBwZXIgbWV0aG9kIGludm9jYXRpb24gYW5kIGRvIG5vdCBwZXJzaXN0IGJleW9uZCB0aGUgbGlmZXRpbWVcbiAgICAgKiBvZiB0aGUgc2NyaXB0IHRoYXQgbWFkZSB0aGUgaW52b2NhdGlvbi5cbiAgICAgKiA8cD5cbiAgICAgKiBJbiBjb250cmFzdCB0aGVyZSBhcmUgc29tZSBjYWxsYmFjayBmdW5jdGlvbnMsIG1vc3Qgbm90YWJseSA8aT5vbk1lc3NhZ2VBcnJpdmVkPC9pPixcbiAgICAgKiB0aGF0IGFyZSBkZWZpbmVkIG9uIHRoZSB7QGxpbmsgUGFoby5DbGllbnR9IG9iamVjdC5cbiAgICAgKiBUaGVzZSBtYXkgZ2V0IGNhbGxlZCBtdWx0aXBsZSB0aW1lcywgYW5kIGFyZW4ndCBkaXJlY3RseSByZWxhdGVkIHRvIHNwZWNpZmljIG1ldGhvZCBpbnZvY2F0aW9ucyBtYWRlIGJ5IHRoZSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBQYWhvLkNsaWVudFxuICAgICAqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaG9zdCAtIHRoZSBhZGRyZXNzIG9mIHRoZSBtZXNzYWdpbmcgc2VydmVyLCBhcyBhIGZ1bGx5IHF1YWxpZmllZCBXZWJTb2NrZXQgVVJJLCBhcyBhIEROUyBuYW1lIG9yIGRvdHRlZCBkZWNpbWFsIElQIGFkZHJlc3MuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBvcnQgLSB0aGUgcG9ydCBudW1iZXIgdG8gY29ubmVjdCB0byAtIG9ubHkgcmVxdWlyZWQgaWYgaG9zdCBpcyBub3QgYSBVUklcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIHRoZSBwYXRoIG9uIHRoZSBob3N0IHRvIGNvbm5lY3QgdG8gLSBvbmx5IHVzZWQgaWYgaG9zdCBpcyBub3QgYSBVUkkuIERlZmF1bHQ6ICcvbXF0dCcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNsaWVudElkIC0gdGhlIE1lc3NhZ2luZyBjbGllbnQgaWRlbnRpZmllciwgYmV0d2VlbiAxIGFuZCAyMyBjaGFyYWN0ZXJzIGluIGxlbmd0aC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBob3N0IC0gPGk+cmVhZCBvbmx5PC9pPiB0aGUgc2VydmVyJ3MgRE5TIGhvc3RuYW1lIG9yIGRvdHRlZCBkZWNpbWFsIElQIGFkZHJlc3MuXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHBvcnQgLSA8aT5yZWFkIG9ubHk8L2k+IHRoZSBzZXJ2ZXIncyBwb3J0LlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwYXRoIC0gPGk+cmVhZCBvbmx5PC9pPiB0aGUgc2VydmVyJ3MgcGF0aC5cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gY2xpZW50SWQgLSA8aT5yZWFkIG9ubHk8L2k+IHVzZWQgd2hlbiBjb25uZWN0aW5nIHRvIHRoZSBzZXJ2ZXIuXG4gICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gb25Db25uZWN0aW9uTG9zdCAtIGNhbGxlZCB3aGVuIGEgY29ubmVjdGlvbiBoYXMgYmVlbiBsb3N0LlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyIGEgY29ubmVjdCgpIG1ldGhvZCBoYXMgc3VjY2VlZGVkLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVzdGFibGlzaCB0aGUgY2FsbCBiYWNrIHVzZWQgd2hlbiBhIGNvbm5lY3Rpb24gaGFzIGJlZW4gbG9zdC4gVGhlIGNvbm5lY3Rpb24gbWF5IGJlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9zdCBiZWNhdXNlIHRoZSBjbGllbnQgaW5pdGlhdGVzIGEgZGlzY29ubmVjdCBvciBiZWNhdXNlIHRoZSBzZXJ2ZXIgb3IgbmV0d29ya1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdXNlIHRoZSBjbGllbnQgdG8gYmUgZGlzY29ubmVjdGVkLiBUaGUgZGlzY29ubmVjdCBjYWxsIGJhY2sgbWF5IGJlIGNhbGxlZCB3aXRob3V0XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGNvbm5lY3Rpb25Db21wbGV0ZSBjYWxsIGJhY2sgYmVpbmcgaW52b2tlZCBpZiwgZm9yIGV4YW1wbGUgdGhlIGNsaWVudCBmYWlscyB0b1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3QuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBzaW5nbGUgcmVzcG9uc2Ugb2JqZWN0IHBhcmFtZXRlciBpcyBwYXNzZWQgdG8gdGhlIG9uQ29ubmVjdGlvbkxvc3QgY2FsbGJhY2sgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIGZpZWxkczpcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmVycm9yQ29kZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5lcnJvck1lc3NhZ2VcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IG9uTWVzc2FnZURlbGl2ZXJlZCAtIGNhbGxlZCB3aGVuIGEgbWVzc2FnZSBoYXMgYmVlbiBkZWxpdmVyZWQuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxsIHByb2Nlc3NpbmcgdGhhdCB0aGlzIENsaWVudCB3aWxsIGV2ZXIgZG8gaGFzIGJlZW4gY29tcGxldGVkLiBTbywgZm9yIGV4YW1wbGUsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGNhc2Ugb2YgYSBRb3M9MiBtZXNzYWdlIHNlbnQgYnkgdGhpcyBjbGllbnQsIHRoZSBQdWJDb21wIGZsb3cgaGFzIGJlZW4gcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBtZXNzYWdlIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBwZXJzaXN0ZW50IHN0b3JhZ2UgYmVmb3JlIHRoaXMgY2FsbGJhY2sgaXMgaW52b2tlZC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJhbWV0ZXJzIHBhc3NlZCB0byB0aGUgb25NZXNzYWdlRGVsaXZlcmVkIGNhbGxiYWNrIGFyZTpcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPntAbGluayBQYWhvLk1lc3NhZ2V9IHRoYXQgd2FzIGRlbGl2ZXJlZC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IG9uTWVzc2FnZUFycml2ZWQgLSBjYWxsZWQgd2hlbiBhIG1lc3NhZ2UgaGFzIGFycml2ZWQgaW4gdGhpcyBQYWhvLmNsaWVudC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJhbWV0ZXJzIHBhc3NlZCB0byB0aGUgb25NZXNzYWdlQXJyaXZlZCBjYWxsYmFjayBhcmU6XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57QGxpbmsgUGFoby5NZXNzYWdlfSB0aGF0IGhhcyBhcnJpdmVkLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gb25Db25uZWN0ZWQgLSBjYWxsZWQgd2hlbiBhIGNvbm5lY3Rpb24gaXMgc3VjY2Vzc2Z1bGx5IG1hZGUgdG8gdGhlIHNlcnZlci5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlciBhIGNvbm5lY3QoKSBtZXRob2QuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyYW1ldGVycyBwYXNzZWQgdG8gdGhlIG9uQ29ubmVjdGVkIGNhbGxiYWNrIGFyZTpcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPnJlY29ubmVjdCAoYm9vbGVhbikgLSBJZiB0cnVlLCB0aGUgY29ubmVjdGlvbiB3YXMgdGhlIHJlc3VsdCBvZiBhIHJlY29ubmVjdC48L2xpPlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5VUkkgKHN0cmluZykgLSBUaGUgVVJJIHVzZWQgdG8gY29ubmVjdCB0byB0aGUgc2VydmVyLjwvbGk+XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGRpc2Nvbm5lY3RlZFB1Ymxpc2hpbmcgLSBpZiBzZXQsIHdpbGwgZW5hYmxlIGRpc2Nvbm5lY3RlZCBwdWJsaXNoaW5nIGluXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBldmVudCB0aGF0IHRoZSBjb25uZWN0aW9uIHRvIHRoZSBzZXJ2ZXIgaXMgbG9zdC5cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gZGlzY29ubmVjdGVkQnVmZmVyU2l6ZSAtIFVzZWQgdG8gc2V0IHRoZSBtYXhpbXVtIG51bWJlciBvZiBtZXNzYWdlcyB0aGF0IHRoZSBkaXNjb25uZWN0ZWRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciB3aWxsIGhvbGQgYmVmb3JlIHJlamVjdGluZyBuZXcgbWVzc2FnZXMuIERlZmF1bHQgc2l6ZTogNTAwMCBtZXNzYWdlc1xuICAgICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IHRyYWNlIC0gY2FsbGVkIHdoZW5ldmVyIHRyYWNlIGlzIGNhbGxlZC4gVE9ET1xuICAgICAqL1xuICAgIHZhciBDbGllbnQgPSBmdW5jdGlvbihob3N0LCBwb3J0LCBwYXRoLCBjbGllbnRJZCkge1xuICAgICAgdmFyIHVyaTtcblxuICAgICAgaWYgKHR5cGVvZiBob3N0ICE9PSBcInN0cmluZ1wiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLklOVkFMSURfVFlQRSwgW3R5cGVvZiBob3N0LCBcImhvc3RcIl0pKTtcblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMikge1xuICAgICAgICAvLyBob3N0OiBtdXN0IGJlIGZ1bGwgd3M6Ly8gdXJpXG4gICAgICAgIC8vIHBvcnQ6IGNsaWVudElkXG4gICAgICAgIGNsaWVudElkID0gcG9ydDtcbiAgICAgICAgdXJpID0gaG9zdDtcbiAgICAgICAgdmFyIG1hdGNoID0gdXJpLm1hdGNoKFxuICAgICAgICAgIC9eKHdzcz8pOlxcL1xcLygoXFxbKC4rKVxcXSl8KFteXFwvXSs/KSkoOihcXGQrKSk/KFxcLy4qKSQvXG4gICAgICAgICk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIGhvc3QgPSBtYXRjaFs0XSB8fCBtYXRjaFsyXTtcbiAgICAgICAgICBwb3J0ID0gcGFyc2VJbnQobWF0Y2hbN10pO1xuICAgICAgICAgIHBhdGggPSBtYXRjaFs4XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtob3N0LCBcImhvc3RcIl0pKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMykge1xuICAgICAgICAgIGNsaWVudElkID0gcGF0aDtcbiAgICAgICAgICBwYXRoID0gXCIvbXF0dFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcG9ydCAhPT0gXCJudW1iZXJcIiB8fCBwb3J0IDwgMClcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLklOVkFMSURfVFlQRSwgW3R5cGVvZiBwb3J0LCBcInBvcnRcIl0pKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXRoICE9PSBcInN0cmluZ1wiKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbdHlwZW9mIHBhdGgsIFwicGF0aFwiXSkpO1xuXG4gICAgICAgIHZhciBpcHY2QWRkU0JyYWNrZXQgPVxuICAgICAgICAgIGhvc3QuaW5kZXhPZihcIjpcIikgIT09IC0xICYmXG4gICAgICAgICAgaG9zdC5zbGljZSgwLCAxKSAhPT0gXCJbXCIgJiZcbiAgICAgICAgICBob3N0LnNsaWNlKC0xKSAhPT0gXCJdXCI7XG4gICAgICAgIHVyaSA9XG4gICAgICAgICAgXCJ3czovL1wiICtcbiAgICAgICAgICAoaXB2NkFkZFNCcmFja2V0ID8gXCJbXCIgKyBob3N0ICsgXCJdXCIgOiBob3N0KSArXG4gICAgICAgICAgXCI6XCIgK1xuICAgICAgICAgIHBvcnQgK1xuICAgICAgICAgIHBhdGg7XG4gICAgICB9XG5cbiAgICAgIHZhciBjbGllbnRJZExlbmd0aCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsaWVudElkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGFyQ29kZSA9IGNsaWVudElkLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmICgweGQ4MDAgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gMHhkYmZmKSB7XG4gICAgICAgICAgaSsrOyAvLyBTdXJyb2dhdGUgcGFpci5cbiAgICAgICAgfVxuICAgICAgICBjbGllbnRJZExlbmd0aCsrO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjbGllbnRJZCAhPT0gXCJzdHJpbmdcIiB8fCBjbGllbnRJZExlbmd0aCA+IDY1NTM1KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtjbGllbnRJZCwgXCJjbGllbnRJZFwiXSkpO1xuXG4gICAgICB2YXIgY2xpZW50ID0gbmV3IENsaWVudEltcGwodXJpLCBob3N0LCBwb3J0LCBwYXRoLCBjbGllbnRJZCk7XG5cbiAgICAgIC8vUHVibGljIFByb3BlcnRpZXNcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgaG9zdDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gaG9zdDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLlVOU1VQUE9SVEVEX09QRVJBVElPTikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcG9ydDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9ydDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLlVOU1VQUE9SVEVEX09QRVJBVElPTikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcGF0aDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLlVOU1VQUE9SVEVEX09QRVJBVElPTikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdXJpOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB1cmk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdChFUlJPUi5VTlNVUFBPUlRFRF9PUEVSQVRJT04pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsaWVudElkOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQuY2xpZW50SWQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdChFUlJPUi5VTlNVUFBPUlRFRF9PUEVSQVRJT04pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ29ubmVjdGVkOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQub25Db25uZWN0ZWQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5ld09uQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5ld09uQ29ubmVjdGVkID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgIGNsaWVudC5vbkNvbm5lY3RlZCA9IG5ld09uQ29ubmVjdGVkO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfVFlQRSwgW1xuICAgICAgICAgICAgICAgICAgdHlwZW9mIG5ld09uQ29ubmVjdGVkLFxuICAgICAgICAgICAgICAgICAgXCJvbkNvbm5lY3RlZFwiXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRpc2Nvbm5lY3RlZFB1Ymxpc2hpbmc6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5kaXNjb25uZWN0ZWRQdWJsaXNoaW5nO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihuZXdEaXNjb25uZWN0ZWRQdWJsaXNoaW5nKSB7XG4gICAgICAgICAgICBjbGllbnQuZGlzY29ubmVjdGVkUHVibGlzaGluZyA9IG5ld0Rpc2Nvbm5lY3RlZFB1Ymxpc2hpbmc7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkaXNjb25uZWN0ZWRCdWZmZXJTaXplOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQuZGlzY29ubmVjdGVkQnVmZmVyU2l6ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24obmV3RGlzY29ubmVjdGVkQnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgY2xpZW50LmRpc2Nvbm5lY3RlZEJ1ZmZlclNpemUgPSBuZXdEaXNjb25uZWN0ZWRCdWZmZXJTaXplO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25Db25uZWN0aW9uTG9zdDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50Lm9uQ29ubmVjdGlvbkxvc3Q7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5ld09uQ29ubmVjdGlvbkxvc3QpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3T25Db25uZWN0aW9uTG9zdCA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICBjbGllbnQub25Db25uZWN0aW9uTG9zdCA9IG5ld09uQ29ubmVjdGlvbkxvc3Q7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbXG4gICAgICAgICAgICAgICAgICB0eXBlb2YgbmV3T25Db25uZWN0aW9uTG9zdCxcbiAgICAgICAgICAgICAgICAgIFwib25Db25uZWN0aW9uTG9zdFwiXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uTWVzc2FnZURlbGl2ZXJlZDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50Lm9uTWVzc2FnZURlbGl2ZXJlZDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24obmV3T25NZXNzYWdlRGVsaXZlcmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5ld09uTWVzc2FnZURlbGl2ZXJlZCA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICBjbGllbnQub25NZXNzYWdlRGVsaXZlcmVkID0gbmV3T25NZXNzYWdlRGVsaXZlcmVkO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfVFlQRSwgW1xuICAgICAgICAgICAgICAgICAgdHlwZW9mIG5ld09uTWVzc2FnZURlbGl2ZXJlZCxcbiAgICAgICAgICAgICAgICAgIFwib25NZXNzYWdlRGVsaXZlcmVkXCJcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25NZXNzYWdlQXJyaXZlZDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50Lm9uTWVzc2FnZUFycml2ZWQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5ld09uTWVzc2FnZUFycml2ZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3T25NZXNzYWdlQXJyaXZlZCA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICBjbGllbnQub25NZXNzYWdlQXJyaXZlZCA9IG5ld09uTWVzc2FnZUFycml2ZWQ7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbXG4gICAgICAgICAgICAgICAgICB0eXBlb2YgbmV3T25NZXNzYWdlQXJyaXZlZCxcbiAgICAgICAgICAgICAgICAgIFwib25NZXNzYWdlQXJyaXZlZFwiXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRyYWNlOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQudHJhY2VGdW5jdGlvbjtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24odHJhY2UpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdHJhY2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICBjbGllbnQudHJhY2VGdW5jdGlvbiA9IHRyYWNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX1RZUEUsIFt0eXBlb2YgdHJhY2UsIFwib25UcmFjZVwiXSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvKipcbiAgICAgICAqIENvbm5lY3QgdGhpcyBNZXNzYWdpbmcgY2xpZW50IHRvIGl0cyBzZXJ2ZXIuXG4gICAgICAgKlxuICAgICAgICogQG5hbWUgUGFoby5DbGllbnQjY29ubmVjdFxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gY29ubmVjdE9wdGlvbnMgLSBBdHRyaWJ1dGVzIHVzZWQgd2l0aCB0aGUgY29ubmVjdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb25uZWN0T3B0aW9ucy50aW1lb3V0IC0gSWYgdGhlIGNvbm5lY3QgaGFzIG5vdCBzdWNjZWVkZWQgd2l0aGluIHRoaXNcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICBudW1iZXIgb2Ygc2Vjb25kcywgaXQgaXMgZGVlbWVkIHRvIGhhdmUgZmFpbGVkLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgIFRoZSBkZWZhdWx0IGlzIDMwIHNlY29uZHMuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29ubmVjdE9wdGlvbnMudXNlck5hbWUgLSBBdXRoZW50aWNhdGlvbiB1c2VybmFtZSBmb3IgdGhpcyBjb25uZWN0aW9uLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbm5lY3RPcHRpb25zLnBhc3N3b3JkIC0gQXV0aGVudGljYXRpb24gcGFzc3dvcmQgZm9yIHRoaXMgY29ubmVjdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7UGFoby5NZXNzYWdlfSBjb25uZWN0T3B0aW9ucy53aWxsTWVzc2FnZSAtIHNlbnQgYnkgdGhlIHNlcnZlciB3aGVuIHRoZSBjbGllbnRcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICBkaXNjb25uZWN0cyBhYm5vcm1hbGx5LlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbm5lY3RPcHRpb25zLmtlZXBBbGl2ZUludGVydmFsIC0gdGhlIHNlcnZlciBkaXNjb25uZWN0cyB0aGlzIGNsaWVudCBpZlxuICAgICAgICogICAgICAgICAgICAgICAgICAgIHRoZXJlIGlzIG5vIGFjdGl2aXR5IGZvciB0aGlzIG51bWJlciBvZiBzZWNvbmRzLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgIFRoZSBkZWZhdWx0IHZhbHVlIG9mIDYwIHNlY29uZHMgaXMgYXNzdW1lZCBpZiBub3Qgc2V0LlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBjb25uZWN0T3B0aW9ucy5jbGVhblNlc3Npb24gLSBpZiB0cnVlKGRlZmF1bHQpIHRoZSBjbGllbnQgYW5kIHNlcnZlclxuICAgICAgICogICAgICAgICAgICAgICAgICAgIHBlcnNpc3RlbnQgc3RhdGUgaXMgZGVsZXRlZCBvbiBzdWNjZXNzZnVsIGNvbm5lY3QuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNvbm5lY3RPcHRpb25zLnVzZVNTTCAtIGlmIHByZXNlbnQgYW5kIHRydWUsIHVzZSBhbiBTU0wgV2Vic29ja2V0IGNvbm5lY3Rpb24uXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gY29ubmVjdE9wdGlvbnMuaW52b2NhdGlvbkNvbnRleHQgLSBwYXNzZWQgdG8gdGhlIG9uU3VjY2VzcyBjYWxsYmFjayBvciBvbkZhaWx1cmUgY2FsbGJhY2suXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25uZWN0T3B0aW9ucy5vblN1Y2Nlc3MgLSBjYWxsZWQgd2hlbiB0aGUgY29ubmVjdCBhY2tub3dsZWRnZW1lbnRcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICAgKiBBIHNpbmdsZSByZXNwb25zZSBvYmplY3QgcGFyYW1ldGVyIGlzIHBhc3NlZCB0byB0aGUgb25TdWNjZXNzIGNhbGxiYWNrIGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBmaWVsZHM6XG4gICAgICAgKiA8b2w+XG4gICAgICAgKiA8bGk+aW52b2NhdGlvbkNvbnRleHQgYXMgcGFzc2VkIGluIHRvIHRoZSBvblN1Y2Nlc3MgbWV0aG9kIGluIHRoZSBjb25uZWN0T3B0aW9ucy5cbiAgICAgICAqIDwvb2w+XG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25uZWN0T3B0aW9ucy5vbkZhaWx1cmUgLSBjYWxsZWQgd2hlbiB0aGUgY29ubmVjdCByZXF1ZXN0IGhhcyBmYWlsZWQgb3IgdGltZWQgb3V0LlxuICAgICAgICogQSBzaW5nbGUgcmVzcG9uc2Ugb2JqZWN0IHBhcmFtZXRlciBpcyBwYXNzZWQgdG8gdGhlIG9uRmFpbHVyZSBjYWxsYmFjayBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICAgICAgICogPG9sPlxuICAgICAgICogPGxpPmludm9jYXRpb25Db250ZXh0IGFzIHBhc3NlZCBpbiB0byB0aGUgb25GYWlsdXJlIG1ldGhvZCBpbiB0aGUgY29ubmVjdE9wdGlvbnMuXG4gICAgICAgKiA8bGk+ZXJyb3JDb2RlIGEgbnVtYmVyIGluZGljYXRpbmcgdGhlIG5hdHVyZSBvZiB0aGUgZXJyb3IuXG4gICAgICAgKiA8bGk+ZXJyb3JNZXNzYWdlIHRleHQgZGVzY3JpYmluZyB0aGUgZXJyb3IuXG4gICAgICAgKiA8L29sPlxuICAgICAgICogQHBhcmFtIHthcnJheX0gY29ubmVjdE9wdGlvbnMuaG9zdHMgLSBJZiBwcmVzZW50IHRoaXMgY29udGFpbnMgZWl0aGVyIGEgc2V0IG9mIGhvc3RuYW1lcyBvciBmdWxseSBxdWFsaWZpZWRcbiAgICAgICAqIFdlYlNvY2tldCBVUklzICh3czovL2lvdC5lY2xpcHNlLm9yZzo4MC93cyksIHRoYXQgYXJlIHRyaWVkIGluIG9yZGVyIGluIHBsYWNlXG4gICAgICAgKiBvZiB0aGUgaG9zdCBhbmQgcG9ydCBwYXJhbWF0ZXIgb24gdGhlIGNvbnN0cnV0b3IuIFRoZSBob3N0cyBhcmUgdHJpZWQgb25lIGF0IGF0IHRpbWUgaW4gb3JkZXIgdW50aWxcbiAgICAgICAqIG9uZSBvZiB0aGVuIHN1Y2NlZWRzLlxuICAgICAgICogQHBhcmFtIHthcnJheX0gY29ubmVjdE9wdGlvbnMucG9ydHMgLSBJZiBwcmVzZW50IHRoZSBzZXQgb2YgcG9ydHMgbWF0Y2hpbmcgdGhlIGhvc3RzLiBJZiBob3N0cyBjb250YWlucyBVUklzLCB0aGlzIHByb3BlcnR5XG4gICAgICAgKiBpcyBub3QgdXNlZC5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY29ubmVjdE9wdGlvbnMucmVjb25uZWN0IC0gU2V0cyB3aGV0aGVyIHRoZSBjbGllbnQgd2lsbCBhdXRvbWF0aWNhbGx5IGF0dGVtcHQgdG8gcmVjb25uZWN0XG4gICAgICAgKiB0byB0aGUgc2VydmVyIGlmIHRoZSBjb25uZWN0aW9uIGlzIGxvc3QuXG4gICAgICAgKjx1bD5cbiAgICAgICAqPGxpPklmIHNldCB0byBmYWxzZSwgdGhlIGNsaWVudCB3aWxsIG5vdCBhdHRlbXB0IHRvIGF1dG9tYXRpY2FsbHkgcmVjb25uZWN0IHRvIHRoZSBzZXJ2ZXIgaW4gdGhlIGV2ZW50IHRoYXQgdGhlXG4gICAgICAgKiBjb25uZWN0aW9uIGlzIGxvc3QuPC9saT5cbiAgICAgICAqPGxpPklmIHNldCB0byB0cnVlLCBpbiB0aGUgZXZlbnQgdGhhdCB0aGUgY29ubmVjdGlvbiBpcyBsb3N0LCB0aGUgY2xpZW50IHdpbGwgYXR0ZW1wdCB0byByZWNvbm5lY3QgdG8gdGhlIHNlcnZlci5cbiAgICAgICAqIEl0IHdpbGwgaW5pdGlhbGx5IHdhaXQgMSBzZWNvbmQgYmVmb3JlIGl0IGF0dGVtcHRzIHRvIHJlY29ubmVjdCwgZm9yIGV2ZXJ5IGZhaWxlZCByZWNvbm5lY3QgYXR0ZW1wdCwgdGhlIGRlbGF5XG4gICAgICAgKiB3aWxsIGRvdWJsZSB1bnRpbCBpdCBpcyBhdCAyIG1pbnV0ZXMgYXQgd2hpY2ggcG9pbnQgdGhlIGRlbGF5IHdpbGwgc3RheSBhdCAyIG1pbnV0ZXMuPC9saT5cbiAgICAgICAqPC91bD5cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvbiAtIFRoZSB2ZXJzaW9uIG9mIE1RVFQgdG8gdXNlIHRvIGNvbm5lY3QgdG8gdGhlIE1RVFQgQnJva2VyLlxuICAgICAgICo8dWw+XG4gICAgICAgKjxsaT4zIC0gTVFUVCBWMy4xPC9saT5cbiAgICAgICAqPGxpPjQgLSBNUVRUIFYzLjEuMTwvbGk+XG4gICAgICAgKjwvdWw+XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uRXhwbGljaXQgLSBJZiBzZXQgdG8gdHJ1ZSwgd2lsbCBmb3JjZSB0aGUgY29ubmVjdGlvbiB0byB1c2UgdGhlXG4gICAgICAgKiBzZWxlY3RlZCBNUVRUIFZlcnNpb24gb3Igd2lsbCBmYWlsIHRvIGNvbm5lY3QuXG4gICAgICAgKiBAcGFyYW0ge2FycmF5fSBjb25uZWN0T3B0aW9ucy51cmlzIC0gSWYgcHJlc2VudCwgc2hvdWxkIGNvbnRhaW4gYSBsaXN0IG9mIGZ1bGx5IHF1YWxpZmllZCBXZWJTb2NrZXQgdXJpc1xuICAgICAgICogKGUuZy4gd3M6Ly9pb3QuZWNsaXBzZS5vcmc6ODAvd3MpLCB0aGF0IGFyZSB0cmllZCBpbiBvcmRlciBpbiBwbGFjZSBvZiB0aGUgaG9zdCBhbmQgcG9ydCBwYXJhbWV0ZXIgb2YgdGhlIGNvbnN0cnV0b3IuXG4gICAgICAgKiBUaGUgdXJpcyBhcmUgdHJpZWQgb25lIGF0IGEgdGltZSBpbiBvcmRlciB1bnRpbCBvbmUgb2YgdGhlbSBzdWNjZWVkcy4gRG8gbm90IHVzZSB0aGlzIGluIGNvbmp1bmN0aW9uIHdpdGggaG9zdHMgYXNcbiAgICAgICAqIHRoZSBob3N0cyBhcnJheSB3aWxsIGJlIGNvbnZlcnRlZCB0byB1cmlzIGFuZCB3aWxsIG92ZXJ3cml0ZSB0aGlzIHByb3BlcnR5LlxuICAgICAgICogQHRocm93cyB7SW52YWxpZFN0YXRlfSBJZiB0aGUgY2xpZW50IGlzIG5vdCBpbiBkaXNjb25uZWN0ZWQgc3RhdGUuIFRoZSBjbGllbnQgbXVzdCBoYXZlIHJlY2VpdmVkIGNvbm5lY3Rpb25Mb3N0XG4gICAgICAgKiBvciBkaXNjb25uZWN0ZWQgYmVmb3JlIGNhbGxpbmcgY29ubmVjdCBmb3IgYSBzZWNvbmQgb3Igc3Vic2VxdWVudCB0aW1lLlxuICAgICAgICovXG4gICAgICB0aGlzLmNvbm5lY3QgPSBmdW5jdGlvbihjb25uZWN0T3B0aW9ucykge1xuICAgICAgICBjb25uZWN0T3B0aW9ucyA9IGNvbm5lY3RPcHRpb25zIHx8IHt9O1xuICAgICAgICB2YWxpZGF0ZShjb25uZWN0T3B0aW9ucywge1xuICAgICAgICAgIHRpbWVvdXQ6IFwibnVtYmVyXCIsXG4gICAgICAgICAgdXNlck5hbWU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgcGFzc3dvcmQ6IFwic3RyaW5nXCIsXG4gICAgICAgICAgd2lsbE1lc3NhZ2U6IFwib2JqZWN0XCIsXG4gICAgICAgICAga2VlcEFsaXZlSW50ZXJ2YWw6IFwibnVtYmVyXCIsXG4gICAgICAgICAgY2xlYW5TZXNzaW9uOiBcImJvb2xlYW5cIixcbiAgICAgICAgICB1c2VTU0w6IFwiYm9vbGVhblwiLFxuICAgICAgICAgIGludm9jYXRpb25Db250ZXh0OiBcIm9iamVjdFwiLFxuICAgICAgICAgIG9uU3VjY2VzczogXCJmdW5jdGlvblwiLFxuICAgICAgICAgIG9uRmFpbHVyZTogXCJmdW5jdGlvblwiLFxuICAgICAgICAgIGhvc3RzOiBcIm9iamVjdFwiLFxuICAgICAgICAgIHBvcnRzOiBcIm9iamVjdFwiLFxuICAgICAgICAgIHJlY29ubmVjdDogXCJib29sZWFuXCIsXG4gICAgICAgICAgbXF0dFZlcnNpb246IFwibnVtYmVyXCIsXG4gICAgICAgICAgbXF0dFZlcnNpb25FeHBsaWNpdDogXCJib29sZWFuXCIsXG4gICAgICAgICAgdXJpczogXCJvYmplY3RcIlxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBJZiBubyBrZWVwIGFsaXZlIGludGVydmFsIGlzIHNldCwgYXNzdW1lIDYwIHNlY29uZHMuXG4gICAgICAgIGlmIChjb25uZWN0T3B0aW9ucy5rZWVwQWxpdmVJbnRlcnZhbCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgIGNvbm5lY3RPcHRpb25zLmtlZXBBbGl2ZUludGVydmFsID0gNjA7XG5cbiAgICAgICAgaWYgKGNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uID4gNCB8fCBjb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvbiA8IDMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9BUkdVTUVOVCwgW1xuICAgICAgICAgICAgICBjb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvbixcbiAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvblwiXG4gICAgICAgICAgICBdKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29ubmVjdE9wdGlvbnMubXF0dFZlcnNpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uRXhwbGljaXQgPSBmYWxzZTtcbiAgICAgICAgICBjb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvbiA9IDQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29ubmVjdE9wdGlvbnMubXF0dFZlcnNpb25FeHBsaWNpdCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvL0NoZWNrIHRoYXQgaWYgcGFzc3dvcmQgaXMgc2V0LCBzbyBpcyB1c2VybmFtZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgY29ubmVjdE9wdGlvbnMucGFzc3dvcmQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgIGNvbm5lY3RPcHRpb25zLnVzZXJOYW1lID09PSB1bmRlZmluZWRcbiAgICAgICAgKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgIGNvbm5lY3RPcHRpb25zLnBhc3N3b3JkLFxuICAgICAgICAgICAgICBcImNvbm5lY3RPcHRpb25zLnBhc3N3b3JkXCJcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgKTtcblxuICAgICAgICBpZiAoY29ubmVjdE9wdGlvbnMud2lsbE1lc3NhZ2UpIHtcbiAgICAgICAgICBpZiAoIShjb25uZWN0T3B0aW9ucy53aWxsTWVzc2FnZSBpbnN0YW5jZW9mIE1lc3NhZ2UpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbXG4gICAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMud2lsbE1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy53aWxsTWVzc2FnZVwiXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIC8vIFRoZSB3aWxsIG1lc3NhZ2UgbXVzdCBoYXZlIGEgcGF5bG9hZCB0aGF0IGNhbiBiZSByZXByZXNlbnRlZCBhcyBhIHN0cmluZy5cbiAgICAgICAgICAvLyBDYXVzZSB0aGUgd2lsbE1lc3NhZ2UgdG8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIHRoaXMgaXMgbm90IHRoZSBjYXNlLlxuICAgICAgICAgIGNvbm5lY3RPcHRpb25zLndpbGxNZXNzYWdlLnN0cmluZ1BheWxvYWQgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25uZWN0T3B0aW9ucy53aWxsTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX1RZUEUsIFtcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29ubmVjdE9wdGlvbnMud2lsbE1lc3NhZ2UuZGVzdGluYXRpb25OYW1lLFxuICAgICAgICAgICAgICAgIFwiY29ubmVjdE9wdGlvbnMud2lsbE1lc3NhZ2UuZGVzdGluYXRpb25OYW1lXCJcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjb25uZWN0T3B0aW9ucy5jbGVhblNlc3Npb24gPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgY29ubmVjdE9wdGlvbnMuY2xlYW5TZXNzaW9uID0gdHJ1ZTtcbiAgICAgICAgaWYgKGNvbm5lY3RPcHRpb25zLmhvc3RzKSB7XG4gICAgICAgICAgaWYgKCEoY29ubmVjdE9wdGlvbnMuaG9zdHMgaW5zdGFuY2VvZiBBcnJheSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMuaG9zdHMsXG4gICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5ob3N0c1wiXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGlmIChjb25uZWN0T3B0aW9ucy5ob3N0cy5sZW5ndGggPCAxKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9BUkdVTUVOVCwgW1xuICAgICAgICAgICAgICAgIGNvbm5lY3RPcHRpb25zLmhvc3RzLFxuICAgICAgICAgICAgICAgIFwiY29ubmVjdE9wdGlvbnMuaG9zdHNcIlxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgIHZhciB1c2luZ1VSSXMgPSBmYWxzZTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbm5lY3RPcHRpb25zLmhvc3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbm5lY3RPcHRpb25zLmhvc3RzW2ldICE9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfVFlQRSwgW1xuICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbm5lY3RPcHRpb25zLmhvc3RzW2ldLFxuICAgICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5ob3N0c1tcIiArIGkgKyBcIl1cIlxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIC9eKHdzcz8pOlxcL1xcLygoXFxbKC4rKVxcXSl8KFteXFwvXSs/KSkoOihcXGQrKSk/KFxcLy4qKSQvLnRlc3QoXG4gICAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMuaG9zdHNbaV1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdXNpbmdVUklzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICghdXNpbmdVUklzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMuaG9zdHNbaV0sXG4gICAgICAgICAgICAgICAgICAgIFwiY29ubmVjdE9wdGlvbnMuaG9zdHNbXCIgKyBpICsgXCJdXCJcbiAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh1c2luZ1VSSXMpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgICAgICBjb25uZWN0T3B0aW9ucy5ob3N0c1tpXSxcbiAgICAgICAgICAgICAgICAgIFwiY29ubmVjdE9wdGlvbnMuaG9zdHNbXCIgKyBpICsgXCJdXCJcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdXNpbmdVUklzKSB7XG4gICAgICAgICAgICBpZiAoIWNvbm5lY3RPcHRpb25zLnBvcnRzKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtcbiAgICAgICAgICAgICAgICAgIGNvbm5lY3RPcHRpb25zLnBvcnRzLFxuICAgICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5wb3J0c1wiXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghKGNvbm5lY3RPcHRpb25zLnBvcnRzIGluc3RhbmNlb2YgQXJyYXkpKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtcbiAgICAgICAgICAgICAgICAgIGNvbm5lY3RPcHRpb25zLnBvcnRzLFxuICAgICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5wb3J0c1wiXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChjb25uZWN0T3B0aW9ucy5ob3N0cy5sZW5ndGggIT09IGNvbm5lY3RPcHRpb25zLnBvcnRzLmxlbmd0aClcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgICAgICBjb25uZWN0T3B0aW9ucy5wb3J0cyxcbiAgICAgICAgICAgICAgICAgIFwiY29ubmVjdE9wdGlvbnMucG9ydHNcIlxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbm5lY3RPcHRpb25zLnVyaXMgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb25uZWN0T3B0aW9ucy5ob3N0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbm5lY3RPcHRpb25zLnBvcnRzW2ldICE9PSBcIm51bWJlclwiIHx8XG4gICAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMucG9ydHNbaV0gPCAwXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjb25uZWN0T3B0aW9ucy5wb3J0c1tpXSxcbiAgICAgICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5wb3J0c1tcIiArIGkgKyBcIl1cIlxuICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB2YXIgaG9zdCA9IGNvbm5lY3RPcHRpb25zLmhvc3RzW2ldO1xuICAgICAgICAgICAgICB2YXIgcG9ydCA9IGNvbm5lY3RPcHRpb25zLnBvcnRzW2ldO1xuXG4gICAgICAgICAgICAgIHZhciBpcHY2ID0gaG9zdC5pbmRleE9mKFwiOlwiKSAhPT0gLTE7XG4gICAgICAgICAgICAgIHVyaSA9XG4gICAgICAgICAgICAgICAgXCJ3czovL1wiICsgKGlwdjYgPyBcIltcIiArIGhvc3QgKyBcIl1cIiA6IGhvc3QpICsgXCI6XCIgKyBwb3J0ICsgcGF0aDtcbiAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMudXJpcy5wdXNoKHVyaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbm5lY3RPcHRpb25zLnVyaXMgPSBjb25uZWN0T3B0aW9ucy5ob3N0cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjbGllbnQuY29ubmVjdChjb25uZWN0T3B0aW9ucyk7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIFN1YnNjcmliZSBmb3IgbWVzc2FnZXMsIHJlcXVlc3QgcmVjZWlwdCBvZiBhIGNvcHkgb2YgbWVzc2FnZXMgc2VudCB0byB0aGUgZGVzdGluYXRpb25zIGRlc2NyaWJlZCBieSB0aGUgZmlsdGVyLlxuICAgICAgICpcbiAgICAgICAqIEBuYW1lIFBhaG8uQ2xpZW50I3N1YnNjcmliZVxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsdGVyIGRlc2NyaWJpbmcgdGhlIGRlc3RpbmF0aW9ucyB0byByZWNlaXZlIG1lc3NhZ2VzIGZyb20uXG4gICAgICAgKiA8YnI+XG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gc3Vic2NyaWJlT3B0aW9ucyAtIHVzZWQgdG8gY29udHJvbCB0aGUgc3Vic2NyaXB0aW9uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnNjcmliZU9wdGlvbnMucW9zIC0gdGhlIG1heGltdW0gcW9zIG9mIGFueSBwdWJsaWNhdGlvbnMgc2VudFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXMgYSByZXN1bHQgb2YgbWFraW5nIHRoaXMgc3Vic2NyaXB0aW9uLlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IHN1YnNjcmliZU9wdGlvbnMuaW52b2NhdGlvbkNvbnRleHQgLSBwYXNzZWQgdG8gdGhlIG9uU3VjY2VzcyBjYWxsYmFja1xuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Igb25GYWlsdXJlIGNhbGxiYWNrLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gc3Vic2NyaWJlT3B0aW9ucy5vblN1Y2Nlc3MgLSBjYWxsZWQgd2hlbiB0aGUgc3Vic2NyaWJlIGFja25vd2xlZGdlbWVudFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzIGJlZW4gcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBzaW5nbGUgcmVzcG9uc2Ugb2JqZWN0IHBhcmFtZXRlciBpcyBwYXNzZWQgdG8gdGhlIG9uU3VjY2VzcyBjYWxsYmFjayBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmludm9jYXRpb25Db250ZXh0IGlmIHNldCBpbiB0aGUgc3Vic2NyaWJlT3B0aW9ucy5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdWJzY3JpYmVPcHRpb25zLm9uRmFpbHVyZSAtIGNhbGxlZCB3aGVuIHRoZSBzdWJzY3JpYmUgcmVxdWVzdCBoYXMgZmFpbGVkIG9yIHRpbWVkIG91dC5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEEgc2luZ2xlIHJlc3BvbnNlIG9iamVjdCBwYXJhbWV0ZXIgaXMgcGFzc2VkIHRvIHRoZSBvbkZhaWx1cmUgY2FsbGJhY2sgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIGZpZWxkczpcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5pbnZvY2F0aW9uQ29udGV4dCAtIGlmIHNldCBpbiB0aGUgc3Vic2NyaWJlT3B0aW9ucy5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5lcnJvckNvZGUgLSBhIG51bWJlciBpbmRpY2F0aW5nIHRoZSBuYXR1cmUgb2YgdGhlIGVycm9yLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmVycm9yTWVzc2FnZSAtIHRleHQgZGVzY3JpYmluZyB0aGUgZXJyb3IuXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnNjcmliZU9wdGlvbnMudGltZW91dCAtIHdoaWNoLCBpZiBwcmVzZW50LCBkZXRlcm1pbmVzIHRoZSBudW1iZXIgb2ZcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHMgYWZ0ZXIgd2hpY2ggdGhlIG9uRmFpbHVyZSBjYWxiYWNrIGlzIGNhbGxlZC5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBwcmVzZW5jZSBvZiBhIHRpbWVvdXQgZG9lcyBub3QgcHJldmVudCB0aGUgb25TdWNjZXNzXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayBmcm9tIGJlaW5nIGNhbGxlZCB3aGVuIHRoZSBzdWJzY3JpYmUgY29tcGxldGVzLlxuICAgICAgICogQHRocm93cyB7SW52YWxpZFN0YXRlfSBpZiB0aGUgY2xpZW50IGlzIG5vdCBpbiBjb25uZWN0ZWQgc3RhdGUuXG4gICAgICAgKi9cbiAgICAgIHRoaXMuc3Vic2NyaWJlID0gZnVuY3Rpb24oZmlsdGVyLCBzdWJzY3JpYmVPcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmlsdGVyICE9PSBcInN0cmluZ1wiICYmIGZpbHRlci5jb25zdHJ1Y3RvciAhPT0gQXJyYXkpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudDpcIiArIGZpbHRlcik7XG4gICAgICAgIHN1YnNjcmliZU9wdGlvbnMgPSBzdWJzY3JpYmVPcHRpb25zIHx8IHt9O1xuICAgICAgICB2YWxpZGF0ZShzdWJzY3JpYmVPcHRpb25zLCB7XG4gICAgICAgICAgcW9zOiBcIm51bWJlclwiLFxuICAgICAgICAgIGludm9jYXRpb25Db250ZXh0OiBcIm9iamVjdFwiLFxuICAgICAgICAgIG9uU3VjY2VzczogXCJmdW5jdGlvblwiLFxuICAgICAgICAgIG9uRmFpbHVyZTogXCJmdW5jdGlvblwiLFxuICAgICAgICAgIHRpbWVvdXQ6IFwibnVtYmVyXCJcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzdWJzY3JpYmVPcHRpb25zLnRpbWVvdXQgJiYgIXN1YnNjcmliZU9wdGlvbnMub25GYWlsdXJlKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIFwic3Vic2NyaWJlT3B0aW9ucy50aW1lb3V0IHNwZWNpZmllZCB3aXRoIG5vIG9uRmFpbHVyZSBjYWxsYmFjay5cIlxuICAgICAgICAgICk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2Ygc3Vic2NyaWJlT3B0aW9ucy5xb3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAhKFxuICAgICAgICAgICAgc3Vic2NyaWJlT3B0aW9ucy5xb3MgPT09IDAgfHxcbiAgICAgICAgICAgIHN1YnNjcmliZU9wdGlvbnMucW9zID09PSAxIHx8XG4gICAgICAgICAgICBzdWJzY3JpYmVPcHRpb25zLnFvcyA9PT0gMlxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgIHN1YnNjcmliZU9wdGlvbnMucW9zLFxuICAgICAgICAgICAgICBcInN1YnNjcmliZU9wdGlvbnMucW9zXCJcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgKTtcbiAgICAgICAgY2xpZW50LnN1YnNjcmliZShmaWx0ZXIsIHN1YnNjcmliZU9wdGlvbnMpO1xuICAgICAgfTtcblxuICAgICAgLyoqXG5cdFx0ICogVW5zdWJzY3JpYmUgZm9yIG1lc3NhZ2VzLCBzdG9wIHJlY2VpdmluZyBtZXNzYWdlcyBzZW50IHRvIGRlc3RpbmF0aW9ucyBkZXNjcmliZWQgYnkgdGhlIGZpbHRlci5cblx0XHQgKlxuXHRcdCAqIEBuYW1lIFBhaG8uQ2xpZW50I3Vuc3Vic2NyaWJlXG5cdFx0ICogQGZ1bmN0aW9uXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IGZpbHRlciAtIGRlc2NyaWJpbmcgdGhlIGRlc3RpbmF0aW9ucyB0byByZWNlaXZlIG1lc3NhZ2VzIGZyb20uXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IHVuc3Vic2NyaWJlT3B0aW9ucyAtIHVzZWQgdG8gY29udHJvbCB0aGUgc3Vic2NyaXB0aW9uXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IHVuc3Vic2NyaWJlT3B0aW9ucy5pbnZvY2F0aW9uQ29udGV4dCAtIHBhc3NlZCB0byB0aGUgb25TdWNjZXNzIGNhbGxiYWNrXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICBvciBvbkZhaWx1cmUgY2FsbGJhY2suXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbn0gdW5zdWJzY3JpYmVPcHRpb25zLm9uU3VjY2VzcyAtIGNhbGxlZCB3aGVuIHRoZSB1bnN1YnNjcmliZSBhY2tub3dsZWRnZW1lbnQgaGFzIGJlZW4gcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyLlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBzaW5nbGUgcmVzcG9uc2Ugb2JqZWN0IHBhcmFtZXRlciBpcyBwYXNzZWQgdG8gdGhlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblN1Y2Nlc3MgY2FsbGJhY2sgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIGZpZWxkczpcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5pbnZvY2F0aW9uQ29udGV4dCAtIGlmIHNldCBpbiB0aGUgdW5zdWJzY3JpYmVPcHRpb25zLlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSB1bnN1YnNjcmliZU9wdGlvbnMub25GYWlsdXJlIGNhbGxlZCB3aGVuIHRoZSB1bnN1YnNjcmliZSByZXF1ZXN0IGhhcyBmYWlsZWQgb3IgdGltZWQgb3V0LlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBzaW5nbGUgcmVzcG9uc2Ugb2JqZWN0IHBhcmFtZXRlciBpcyBwYXNzZWQgdG8gdGhlIG9uRmFpbHVyZSBjYWxsYmFjayBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmludm9jYXRpb25Db250ZXh0IC0gaWYgc2V0IGluIHRoZSB1bnN1YnNjcmliZU9wdGlvbnMuXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+ZXJyb3JDb2RlIC0gYSBudW1iZXIgaW5kaWNhdGluZyB0aGUgbmF0dXJlIG9mIHRoZSBlcnJvci5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5lcnJvck1lc3NhZ2UgLSB0ZXh0IGRlc2NyaWJpbmcgdGhlIGVycm9yLlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gdW5zdWJzY3JpYmVPcHRpb25zLnRpbWVvdXQgLSB3aGljaCwgaWYgcHJlc2VudCwgZGV0ZXJtaW5lcyB0aGUgbnVtYmVyIG9mIHNlY29uZHNcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyIHdoaWNoIHRoZSBvbkZhaWx1cmUgY2FsbGJhY2sgaXMgY2FsbGVkLiBUaGUgcHJlc2VuY2Ugb2Zcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgdGltZW91dCBkb2VzIG5vdCBwcmV2ZW50IHRoZSBvblN1Y2Nlc3MgY2FsbGJhY2sgZnJvbSBiZWluZ1xuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVkIHdoZW4gdGhlIHVuc3Vic2NyaWJlIGNvbXBsZXRlc1xuXHRcdCAqIEB0aHJvd3Mge0ludmFsaWRTdGF0ZX0gaWYgdGhlIGNsaWVudCBpcyBub3QgaW4gY29ubmVjdGVkIHN0YXRlLlxuXHRcdCAqL1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IGZ1bmN0aW9uKGZpbHRlciwgdW5zdWJzY3JpYmVPcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmlsdGVyICE9PSBcInN0cmluZ1wiICYmIGZpbHRlci5jb25zdHJ1Y3RvciAhPT0gQXJyYXkpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudDpcIiArIGZpbHRlcik7XG4gICAgICAgIHVuc3Vic2NyaWJlT3B0aW9ucyA9IHVuc3Vic2NyaWJlT3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFsaWRhdGUodW5zdWJzY3JpYmVPcHRpb25zLCB7XG4gICAgICAgICAgaW52b2NhdGlvbkNvbnRleHQ6IFwib2JqZWN0XCIsXG4gICAgICAgICAgb25TdWNjZXNzOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgICAgb25GYWlsdXJlOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgICAgdGltZW91dDogXCJudW1iZXJcIlxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHVuc3Vic2NyaWJlT3B0aW9ucy50aW1lb3V0ICYmICF1bnN1YnNjcmliZU9wdGlvbnMub25GYWlsdXJlKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIFwidW5zdWJzY3JpYmVPcHRpb25zLnRpbWVvdXQgc3BlY2lmaWVkIHdpdGggbm8gb25GYWlsdXJlIGNhbGxiYWNrLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgY2xpZW50LnVuc3Vic2NyaWJlKGZpbHRlciwgdW5zdWJzY3JpYmVPcHRpb25zKTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogU2VuZCBhIG1lc3NhZ2UgdG8gdGhlIGNvbnN1bWVycyBvZiB0aGUgZGVzdGluYXRpb24gaW4gdGhlIE1lc3NhZ2UuXG4gICAgICAgKlxuICAgICAgICogQG5hbWUgUGFoby5DbGllbnQjc2VuZFxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xQYWhvLk1lc3NhZ2V9IHRvcGljIC0gPGI+bWFuZGF0b3J5PC9iPiBUaGUgbmFtZSBvZiB0aGUgZGVzdGluYXRpb24gdG8gd2hpY2ggdGhlIG1lc3NhZ2UgaXMgdG8gYmUgc2VudC5cbiAgICAgICAqIFx0XHRcdFx0XHQgICAtIElmIGl0IGlzIHRoZSBvbmx5IHBhcmFtZXRlciwgdXNlZCBhcyBQYWhvLk1lc3NhZ2Ugb2JqZWN0LlxuICAgICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXlCdWZmZXJ9IHBheWxvYWQgLSBUaGUgbWVzc2FnZSBkYXRhIHRvIGJlIHNlbnQuXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gcW9zIFRoZSBRdWFsaXR5IG9mIFNlcnZpY2UgdXNlZCB0byBkZWxpdmVyIHRoZSBtZXNzYWdlLlxuICAgICAgICogXHRcdDxkbD5cbiAgICAgICAqIFx0XHRcdDxkdD4wIEJlc3QgZWZmb3J0IChkZWZhdWx0KS5cbiAgICAgICAqICAgICBcdFx0XHQ8ZHQ+MSBBdCBsZWFzdCBvbmNlLlxuICAgICAgICogICAgIFx0XHRcdDxkdD4yIEV4YWN0bHkgb25jZS5cbiAgICAgICAqIFx0XHQ8L2RsPlxuICAgICAgICogQHBhcmFtIHtCb29sZWFufSByZXRhaW5lZCBJZiB0cnVlLCB0aGUgbWVzc2FnZSBpcyB0byBiZSByZXRhaW5lZCBieSB0aGUgc2VydmVyIGFuZCBkZWxpdmVyZWRcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgdG8gYm90aCBjdXJyZW50IGFuZCBmdXR1cmUgc3Vic2NyaXB0aW9ucy5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgSWYgZmFsc2UgdGhlIHNlcnZlciBvbmx5IGRlbGl2ZXJzIHRoZSBtZXNzYWdlIHRvIGN1cnJlbnQgc3Vic2NyaWJlcnMsIHRoaXMgaXMgdGhlIGRlZmF1bHQgZm9yIG5ldyBNZXNzYWdlcy5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgQSByZWNlaXZlZCBtZXNzYWdlIGhhcyB0aGUgcmV0YWluZWQgYm9vbGVhbiBzZXQgdG8gdHJ1ZSBpZiB0aGUgbWVzc2FnZSB3YXMgcHVibGlzaGVkXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIHJldGFpbmVkIGJvb2xlYW4gc2V0IHRvIHRydWVcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBzdWJzY3JwdGlvbiB3YXMgbWFkZSBhZnRlciB0aGUgbWVzc2FnZSBoYXMgYmVlbiBwdWJsaXNoZWQuXG4gICAgICAgKiBAdGhyb3dzIHtJbnZhbGlkU3RhdGV9IGlmIHRoZSBjbGllbnQgaXMgbm90IGNvbm5lY3RlZC5cbiAgICAgICAqL1xuICAgICAgdGhpcy5zZW5kID0gZnVuY3Rpb24odG9waWMsIHBheWxvYWQsIHFvcywgcmV0YWluZWQpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2U7XG5cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50LlwiICsgXCJsZW5ndGhcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgaWYgKCEodG9waWMgaW5zdGFuY2VvZiBNZXNzYWdlKSAmJiB0eXBlb2YgdG9waWMgIT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50OlwiICsgdHlwZW9mIHRvcGljKTtcblxuICAgICAgICAgIG1lc3NhZ2UgPSB0b3BpYztcbiAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UuZGVzdGluYXRpb25OYW1lID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9BUkdVTUVOVCwgW1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGVzdGluYXRpb25OYW1lLFxuICAgICAgICAgICAgICAgIFwiTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWVcIlxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICBjbGllbnQuc2VuZChtZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL3BhcmFtZXRlciBjaGVja2luZyBpbiBNZXNzYWdlIG9iamVjdFxuICAgICAgICAgIG1lc3NhZ2UgPSBuZXcgTWVzc2FnZShwYXlsb2FkKTtcbiAgICAgICAgICBtZXNzYWdlLmRlc3RpbmF0aW9uTmFtZSA9IHRvcGljO1xuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIG1lc3NhZ2UucW9zID0gcW9zO1xuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIG1lc3NhZ2UucmV0YWluZWQgPSByZXRhaW5lZDtcbiAgICAgICAgICBjbGllbnQuc2VuZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBQdWJsaXNoIGEgbWVzc2FnZSB0byB0aGUgY29uc3VtZXJzIG9mIHRoZSBkZXN0aW5hdGlvbiBpbiB0aGUgTWVzc2FnZS5cbiAgICAgICAqIFN5bm9ueW0gZm9yIFBhaG8uTXF0dC5DbGllbnQjc2VuZFxuICAgICAgICpcbiAgICAgICAqIEBuYW1lIFBhaG8uQ2xpZW50I3B1Ymxpc2hcbiAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8UGFoby5NZXNzYWdlfSB0b3BpYyAtIDxiPm1hbmRhdG9yeTwvYj4gVGhlIG5hbWUgb2YgdGhlIHRvcGljIHRvIHdoaWNoIHRoZSBtZXNzYWdlIGlzIHRvIGJlIHB1Ymxpc2hlZC5cbiAgICAgICAqIFx0XHRcdFx0XHQgICAtIElmIGl0IGlzIHRoZSBvbmx5IHBhcmFtZXRlciwgdXNlZCBhcyBQYWhvLk1lc3NhZ2Ugb2JqZWN0LlxuICAgICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXlCdWZmZXJ9IHBheWxvYWQgLSBUaGUgbWVzc2FnZSBkYXRhIHRvIGJlIHB1Ymxpc2hlZC5cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBxb3MgVGhlIFF1YWxpdHkgb2YgU2VydmljZSB1c2VkIHRvIGRlbGl2ZXIgdGhlIG1lc3NhZ2UuXG4gICAgICAgKiBcdFx0PGRsPlxuICAgICAgICogXHRcdFx0PGR0PjAgQmVzdCBlZmZvcnQgKGRlZmF1bHQpLlxuICAgICAgICogICAgIFx0XHRcdDxkdD4xIEF0IGxlYXN0IG9uY2UuXG4gICAgICAgKiAgICAgXHRcdFx0PGR0PjIgRXhhY3RseSBvbmNlLlxuICAgICAgICogXHRcdDwvZGw+XG4gICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJldGFpbmVkIElmIHRydWUsIHRoZSBtZXNzYWdlIGlzIHRvIGJlIHJldGFpbmVkIGJ5IHRoZSBzZXJ2ZXIgYW5kIGRlbGl2ZXJlZFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICB0byBib3RoIGN1cnJlbnQgYW5kIGZ1dHVyZSBzdWJzY3JpcHRpb25zLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICBJZiBmYWxzZSB0aGUgc2VydmVyIG9ubHkgZGVsaXZlcnMgdGhlIG1lc3NhZ2UgdG8gY3VycmVudCBzdWJzY3JpYmVycywgdGhpcyBpcyB0aGUgZGVmYXVsdCBmb3IgbmV3IE1lc3NhZ2VzLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICBBIHJlY2VpdmVkIG1lc3NhZ2UgaGFzIHRoZSByZXRhaW5lZCBib29sZWFuIHNldCB0byB0cnVlIGlmIHRoZSBtZXNzYWdlIHdhcyBwdWJsaXNoZWRcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgcmV0YWluZWQgYm9vbGVhbiBzZXQgdG8gdHJ1ZVxuICAgICAgICogICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHN1YnNjcnB0aW9uIHdhcyBtYWRlIGFmdGVyIHRoZSBtZXNzYWdlIGhhcyBiZWVuIHB1Ymxpc2hlZC5cbiAgICAgICAqIEB0aHJvd3Mge0ludmFsaWRTdGF0ZX0gaWYgdGhlIGNsaWVudCBpcyBub3QgY29ubmVjdGVkLlxuICAgICAgICovXG4gICAgICB0aGlzLnB1Ymxpc2ggPSBmdW5jdGlvbih0b3BpYywgcGF5bG9hZCwgcW9zLCByZXRhaW5lZCkge1xuICAgICAgICB2YXIgbWVzc2FnZTtcblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQuXCIgKyBcImxlbmd0aFwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICBpZiAoISh0b3BpYyBpbnN0YW5jZW9mIE1lc3NhZ2UpICYmIHR5cGVvZiB0b3BpYyAhPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQ6XCIgKyB0eXBlb2YgdG9waWMpO1xuXG4gICAgICAgICAgbWVzc2FnZSA9IHRvcGljO1xuICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgICAgbWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAgXCJNZXNzYWdlLmRlc3RpbmF0aW9uTmFtZVwiXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGNsaWVudC5zZW5kKG1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vcGFyYW1ldGVyIGNoZWNraW5nIGluIE1lc3NhZ2Ugb2JqZWN0XG4gICAgICAgICAgbWVzc2FnZSA9IG5ldyBNZXNzYWdlKHBheWxvYWQpO1xuICAgICAgICAgIG1lc3NhZ2UuZGVzdGluYXRpb25OYW1lID0gdG9waWM7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgbWVzc2FnZS5xb3MgPSBxb3M7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgbWVzc2FnZS5yZXRhaW5lZCA9IHJldGFpbmVkO1xuICAgICAgICAgIGNsaWVudC5zZW5kKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIE5vcm1hbCBkaXNjb25uZWN0IG9mIHRoaXMgTWVzc2FnaW5nIGNsaWVudCBmcm9tIGl0cyBzZXJ2ZXIuXG4gICAgICAgKlxuICAgICAgICogQG5hbWUgUGFoby5DbGllbnQjZGlzY29ubmVjdFxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBAdGhyb3dzIHtJbnZhbGlkU3RhdGV9IGlmIHRoZSBjbGllbnQgaXMgYWxyZWFkeSBkaXNjb25uZWN0ZWQuXG4gICAgICAgKi9cbiAgICAgIHRoaXMuZGlzY29ubmVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGllbnQuZGlzY29ubmVjdCgpO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgdGhlIGNvbnRlbnRzIG9mIHRoZSB0cmFjZSBsb2cuXG4gICAgICAgKlxuICAgICAgICogQG5hbWUgUGFoby5DbGllbnQjZ2V0VHJhY2VMb2dcbiAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICogQHJldHVybiB7T2JqZWN0W119IHRyYWNlYnVmZmVyIGNvbnRhaW5pbmcgdGhlIHRpbWUgb3JkZXJlZCB0cmFjZSByZWNvcmRzLlxuICAgICAgICovXG4gICAgICB0aGlzLmdldFRyYWNlTG9nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjbGllbnQuZ2V0VHJhY2VMb2coKTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogU3RhcnQgdHJhY2luZy5cbiAgICAgICAqXG4gICAgICAgKiBAbmFtZSBQYWhvLkNsaWVudCNzdGFydFRyYWNlXG4gICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAqL1xuICAgICAgdGhpcy5zdGFydFRyYWNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsaWVudC5zdGFydFRyYWNlKCk7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIFN0b3AgdHJhY2luZy5cbiAgICAgICAqXG4gICAgICAgKiBAbmFtZSBQYWhvLkNsaWVudCNzdG9wVHJhY2VcbiAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICovXG4gICAgICB0aGlzLnN0b3BUcmFjZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGllbnQuc3RvcFRyYWNlKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmlzQ29ubmVjdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjbGllbnQuY29ubmVjdGVkO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQW4gYXBwbGljYXRpb24gbWVzc2FnZSwgc2VudCBvciByZWNlaXZlZC5cbiAgICAgKiA8cD5cbiAgICAgKiBBbGwgYXR0cmlidXRlcyBtYXkgYmUgbnVsbCwgd2hpY2ggaW1wbGllcyB0aGUgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAbmFtZSBQYWhvLk1lc3NhZ2VcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheUJ1ZmZlcn0gcGF5bG9hZCBUaGUgbWVzc2FnZSBkYXRhIHRvIGJlIHNlbnQuXG4gICAgICogPHA+XG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IHBheWxvYWRTdHJpbmcgPGk+cmVhZCBvbmx5PC9pPiBUaGUgcGF5bG9hZCBhcyBhIHN0cmluZyBpZiB0aGUgcGF5bG9hZCBjb25zaXN0cyBvZiB2YWxpZCBVVEYtOCBjaGFyYWN0ZXJzLlxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXlCdWZmZXJ9IHBheWxvYWRCeXRlcyA8aT5yZWFkIG9ubHk8L2k+IFRoZSBwYXlsb2FkIGFzIGFuIEFycmF5QnVmZmVyLlxuICAgICAqIDxwPlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXN0aW5hdGlvbk5hbWUgPGI+bWFuZGF0b3J5PC9iPiBUaGUgbmFtZSBvZiB0aGUgZGVzdGluYXRpb24gdG8gd2hpY2ggdGhlIG1lc3NhZ2UgaXMgdG8gYmUgc2VudFxuICAgICAqICAgICAgICAgICAgICAgICAgICAoZm9yIG1lc3NhZ2VzIGFib3V0IHRvIGJlIHNlbnQpIG9yIHRoZSBuYW1lIG9mIHRoZSBkZXN0aW5hdGlvbiBmcm9tIHdoaWNoIHRoZSBtZXNzYWdlIGhhcyBiZWVuIHJlY2VpdmVkLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAoZm9yIG1lc3NhZ2VzIHJlY2VpdmVkIGJ5IHRoZSBvbk1lc3NhZ2UgZnVuY3Rpb24pLlxuICAgICAqIDxwPlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBxb3MgVGhlIFF1YWxpdHkgb2YgU2VydmljZSB1c2VkIHRvIGRlbGl2ZXIgdGhlIG1lc3NhZ2UuXG4gICAgICogPGRsPlxuICAgICAqICAgICA8ZHQ+MCBCZXN0IGVmZm9ydCAoZGVmYXVsdCkuXG4gICAgICogICAgIDxkdD4xIEF0IGxlYXN0IG9uY2UuXG4gICAgICogICAgIDxkdD4yIEV4YWN0bHkgb25jZS5cbiAgICAgKiA8L2RsPlxuICAgICAqIDxwPlxuICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gcmV0YWluZWQgSWYgdHJ1ZSwgdGhlIG1lc3NhZ2UgaXMgdG8gYmUgcmV0YWluZWQgYnkgdGhlIHNlcnZlciBhbmQgZGVsaXZlcmVkXG4gICAgICogICAgICAgICAgICAgICAgICAgICB0byBib3RoIGN1cnJlbnQgYW5kIGZ1dHVyZSBzdWJzY3JpcHRpb25zLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgSWYgZmFsc2UgdGhlIHNlcnZlciBvbmx5IGRlbGl2ZXJzIHRoZSBtZXNzYWdlIHRvIGN1cnJlbnQgc3Vic2NyaWJlcnMsIHRoaXMgaXMgdGhlIGRlZmF1bHQgZm9yIG5ldyBNZXNzYWdlcy5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgIEEgcmVjZWl2ZWQgbWVzc2FnZSBoYXMgdGhlIHJldGFpbmVkIGJvb2xlYW4gc2V0IHRvIHRydWUgaWYgdGhlIG1lc3NhZ2Ugd2FzIHB1Ymxpc2hlZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgcmV0YWluZWQgYm9vbGVhbiBzZXQgdG8gdHJ1ZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBzdWJzY3JwdGlvbiB3YXMgbWFkZSBhZnRlciB0aGUgbWVzc2FnZSBoYXMgYmVlbiBwdWJsaXNoZWQuXG4gICAgICogPHA+XG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBkdXBsaWNhdGUgPGk+cmVhZCBvbmx5PC9pPiBJZiB0cnVlLCB0aGlzIG1lc3NhZ2UgbWlnaHQgYmUgYSBkdXBsaWNhdGUgb2Ygb25lIHdoaWNoIGhhcyBhbHJlYWR5IGJlZW4gcmVjZWl2ZWQuXG4gICAgICogICAgICAgICAgICAgICAgICAgICBUaGlzIGlzIG9ubHkgc2V0IG9uIG1lc3NhZ2VzIHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlci5cbiAgICAgKlxuICAgICAqL1xuICAgIHZhciBNZXNzYWdlID0gZnVuY3Rpb24obmV3UGF5bG9hZCkge1xuICAgICAgdmFyIHBheWxvYWQ7XG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBuZXdQYXlsb2FkID09PSBcInN0cmluZ1wiIHx8XG4gICAgICAgIG5ld1BheWxvYWQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fFxuICAgICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KG5ld1BheWxvYWQpICYmICEobmV3UGF5bG9hZCBpbnN0YW5jZW9mIERhdGFWaWV3KSlcbiAgICAgICkge1xuICAgICAgICBwYXlsb2FkID0gbmV3UGF5bG9hZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbbmV3UGF5bG9hZCwgXCJuZXdQYXlsb2FkXCJdKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlc3RpbmF0aW9uTmFtZTtcbiAgICAgIHZhciBxb3MgPSAwO1xuICAgICAgdmFyIHJldGFpbmVkID0gZmFsc2U7XG4gICAgICB2YXIgZHVwbGljYXRlID0gZmFsc2U7XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgcGF5bG9hZFN0cmluZzoge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIHBheWxvYWQ7XG4gICAgICAgICAgICBlbHNlIHJldHVybiBwYXJzZVVURjgocGF5bG9hZCwgMCwgcGF5bG9hZC5sZW5ndGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcGF5bG9hZEJ5dGVzOiB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXlsb2FkID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoVVRGOExlbmd0aChwYXlsb2FkKSk7XG4gICAgICAgICAgICAgIHZhciBieXRlU3RyZWFtID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgICAgICAgc3RyaW5nVG9VVEY4KHBheWxvYWQsIGJ5dGVTdHJlYW0sIDApO1xuXG4gICAgICAgICAgICAgIHJldHVybiBieXRlU3RyZWFtO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZXN0aW5hdGlvbk5hbWU6IHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVzdGluYXRpb25OYW1lO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihuZXdEZXN0aW5hdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3RGVzdGluYXRpb25OYW1lID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICBkZXN0aW5hdGlvbk5hbWUgPSBuZXdEZXN0aW5hdGlvbk5hbWU7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9BUkdVTUVOVCwgW1xuICAgICAgICAgICAgICAgICAgbmV3RGVzdGluYXRpb25OYW1lLFxuICAgICAgICAgICAgICAgICAgXCJuZXdEZXN0aW5hdGlvbk5hbWVcIlxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBxb3M6IHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcW9zO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihuZXdRb3MpIHtcbiAgICAgICAgICAgIGlmIChuZXdRb3MgPT09IDAgfHwgbmV3UW9zID09PSAxIHx8IG5ld1FvcyA9PT0gMikgcW9zID0gbmV3UW9zO1xuICAgICAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50OlwiICsgbmV3UW9zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJldGFpbmVkOiB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJldGFpbmVkO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihuZXdSZXRhaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdSZXRhaW5lZCA9PT0gXCJib29sZWFuXCIpIHJldGFpbmVkID0gbmV3UmV0YWluZWQ7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9BUkdVTUVOVCwgW25ld1JldGFpbmVkLCBcIm5ld1JldGFpbmVkXCJdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdG9waWM6IHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVzdGluYXRpb25OYW1lO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihuZXdUb3BpYykge1xuICAgICAgICAgICAgZGVzdGluYXRpb25OYW1lID0gbmV3VG9waWM7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkdXBsaWNhdGU6IHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZHVwbGljYXRlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihuZXdEdXBsaWNhdGUpIHtcbiAgICAgICAgICAgIGR1cGxpY2F0ZSA9IG5ld0R1cGxpY2F0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBNb2R1bGUgY29udGVudHMuXG4gICAgcmV0dXJuIHtcbiAgICAgIENsaWVudDogQ2xpZW50LFxuICAgICAgTWVzc2FnZTogTWVzc2FnZVxuICAgIH07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gIH0pKFxuICAgIHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgID8gZ2xvYmFsXG4gICAgICA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICA/IHNlbGZcbiAgICAgIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgPyB3aW5kb3dcbiAgICAgIDoge31cbiAgKTtcbiAgcmV0dXJuIFBhaG9NUVRUO1xufSk7XG4iLCIvKmVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiovXG5pbXBvcnQgeyBDaGF0U2Vzc2lvbk9iamVjdCB9IGZyb20gXCIuL2NvcmUvY2hhdFNlc3Npb25cIjtcblxuZ2xvYmFsLmNvbm5lY3QgPSBnbG9iYWwuY29ubmVjdCB8fCB7fTtcbmNvbm5lY3QuQ2hhdFNlc3Npb24gPSBDaGF0U2Vzc2lvbk9iamVjdDtcblxuZXhwb3J0IGNvbnN0IENoYXRTZXNzaW9uID0gQ2hhdFNlc3Npb25PYmplY3Q7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9