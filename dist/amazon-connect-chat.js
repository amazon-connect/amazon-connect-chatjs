!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}function c(e){var t="function"==typeof Map?new Map:void 0;return(c=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,o)}function o(){return a(e,arguments,l(this).constructor)}return o.prototype=Object.create(e.prototype,{constructor:{value:o,enumerable:!1,writable:!0,configurable:!0}}),u(o,e)})(e)}function a(e,t,n){return(a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()?Reflect.construct:function(e,t,n){var o=[null];o.push.apply(o,t);var i=new(Function.bind.apply(e,o));return n&&u(i,n.prototype),i}).apply(null,arguments)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var h=function(e){function t(e){var n;return i(this,t),(n=r(this,l(t).call(this,e))).name="ValueError",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,c(Error)),t}(),f=function(e){function t(e){var n;return i(this,t),(n=r(this,l(t).call(this,e))).name="UnImplementedMethod",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,c(Error)),t}(),p=function(e){function t(e,n){var o;return i(this,t),(o=r(this,l(t).call(this,e))).name="IllegalArgument",o.argument=n,console.log("EXCEPTION: "+o.name+" MESSAGE: "+o.message),o}return s(t,c(Error)),t}(),d=function(e){function t(e){var n;return i(this,t),(n=r(this,l(t).call(this,e))).name="IllegalState",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,c(Error)),t}(),y=function(e,t,n){var o=new XMLHttpRequest;o.open(e.method||"GET",e.url),e.headers&&Object.keys(e.headers).forEach(function(t){o.setRequestHeader(t,e.headers[t])}),o.onload=function(){o.status>=200&&o.status<300?t(o):n(o)},o.onerror=function(){return n(o)},o.send(e.body)},v=function e(){return e.cache.hasOwnProperty(arguments[0])||(e.cache[arguments[0]]=e.parse(arguments[0])),e.format.call(null,e.cache[arguments[0]],arguments)};v.format=function(e,t){var n,o,i,r,s,c,a,u=1,l=e.length,h="",f=[];for(o=0;o<l;o++)if("string"===(h=g(e[o])))f.push(e[o]);else if("array"===h){if((r=e[o])[2])for(n=t[u],i=0;i<r[2].length;i++){if(!n.hasOwnProperty(r[2][i]))throw v('[sprintf] property "%s" does not exist',r[2][i]);n=n[r[2][i]]}else n=r[1]?t[r[1]]:t[u++];if(/[^s]/.test(r[8])&&"number"!=g(n))throw v("[sprintf] expecting number but found %s",g(n));switch(r[8]){case"b":n=n.toString(2);break;case"c":n=String.fromCharCode(n);break;case"d":n=parseInt(n,10);break;case"e":n=r[7]?n.toExponential(r[7]):n.toExponential();break;case"f":n=r[7]?parseFloat(n).toFixed(r[7]):parseFloat(n);break;case"o":n=n.toString(8);break;case"s":n=(n=String(n))&&r[7]?n.substring(0,r[7]):n;break;case"u":n>>>=0;break;case"x":n=n.toString(16);break;case"X":n=n.toString(16).toUpperCase()}n=/[def]/.test(r[8])&&r[3]&&n>=0?"+"+n:n,c=r[4]?"0"==r[4]?"0":r[4].charAt(1):" ",a=r[6]-String(n).length,s=r[6]?_(c,a):"",f.push(r[5]?n+s:s+n)}return f.join("")},v.cache={},v.parse=function(e){for(var t=e,n=[],o=[],i=0;t;){if(null!==(n=/^[^\x25]+/.exec(t)))o.push(n[0]);else if(null!==(n=/^\x25{2}/.exec(t)))o.push("%");else{if(null===(n=/^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(t)))throw"[sprintf] huh?";if(n[2]){i|=1;var r=[],s=n[2],c=[];if(null===(c=/^([a-z_][a-z_\d]*)/i.exec(s)))throw"[sprintf] huh?";for(r.push(c[1]);""!==(s=s.substring(c[0].length));)if(null!==(c=/^\.([a-z_][a-z_\d]*)/i.exec(s)))r.push(c[1]);else{if(null===(c=/^\[(\d+)\]/.exec(s)))throw"[sprintf] huh?";r.push(c[1])}n[2]=r}else i|=2;if(3===i)throw"[sprintf] mixing positional and named placeholders is not (yet) supported";o.push(n)}t=t.substring(n[0].length)}return o};function g(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}function _(e,t){for(var n=[];t>0;n[--t]=e);return n.join("")}function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var C={assertTrue:function(e,t){if(!e)throw new h(t)},assertNotNull:function(e,t){return C.assertTrue(null!==e&&void 0!==b(e),v("%s must be provided",t||"A value")),e},now:function(){return(new Date).getTime()},isString:function(e){return"string"==typeof e},randomId:function(){return v("%s-%s",C.now(),Math.random().toString(36).slice(2))},makeEnum:function(e){var t={};return e.forEach(function(e){var n=e.replace(/\.?([a-z]+)_?/g,function(e,t){return t.toUpperCase()+"_"}).replace(/_$/,"");t[n]=e}),t},contains:function(e,t){return e instanceof Array?null!==C.find(e,function(e){return e===t}):t in e},find:function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return e[n];return null},containsValue:function(e,t){return e instanceof Array?null!==C.find(e,function(e){return e===t}):null!==C.find(C.values(e),function(e){return e===t})},isFunction:function(e){return!!(e&&e.constructor&&e.call&&e.apply)},values:function(e){var t=[];for(var n in C.assertNotNull(e,"map"),e)t.push(e[n]);return t},wrapPromise:function(e,t,n){return new Promise(function(o,i){e.then(t(o)).catch(n(i))})}},E=C,w="/contact/chat/participant/message",S="/contact/chat/participant/transcript",m="/contact/chat/participant/event",I="/contact/chat/participant/disconnect",T="/contact/chat/participant/connection-details",N="post",k="PERSISTED",O={textPlain:"text/plain"},M=E.makeEnum(["ALL","MANAGER","AGENT","CUSTOMER","THIRDPARTY"]),A=E.makeEnum(["PERSISTED","NON_PERSISTED"]),P={PROD:{invokeUrl:"https://vxgh3tfytg.execute-api.us-west-2.amazonaws.com/Stage"}},D=30,R=60,U="AGENT",x="CUSTOMER",L="INCOMING_MESSAGE",B="INCOMING_TYPING",q="CONNECTION_ESTABLISHED",j="CONNECTION_BROKEN";function V(e){return(V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function F(e,t){return!t||"object"!==V(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function G(e){return(G=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function H(e,t){return(H=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function K(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Q(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function J(e,t,n){return t&&Q(e.prototype,t),n&&Q(e,n),e}var Y=function(){function e(){K(this,e)}return J(e,[{key:"getClient",value:function(e){if("PROD"===e)return new W({stageConfig:P.PROD});throw new p("unrecognized stage in ChatClientFactoryImpl")}}]),e}(),z=function(){function e(){K(this,e)}return J(e,[{key:"sendMessage",value:function(e,t,n){throw new f("sendTextMessage in ChatClient")}},{key:"disconnectChat",value:function(e){throw new f("disconnectChat in ChatClient")}},{key:"sendEvent",value:function(e,t,n,o){throw new f("sendEvent in ChatClient")}},{key:"createConnectionDetails",value:function(e){throw new f("reconnectChat in ChatClient")}}]),e}(),W=function(e){function t(e){var n;return K(this,t),(n=F(this,G(t).call(this))).invokeUrl=e.stageConfig.invokeUrl,n.callHttpClient=y,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&H(e,t)}(t,z),J(t,[{key:"sendMessage",value:function(e,t,n){console.log(n);var o={Message:{ContentType:O.textPlain,Content:t,Persistence:k}},i={method:N,headers:{ConnectionToken:e},url:this.invokeUrl+w,body:o};return this._callHttpClient(i)}},{key:"getTranscript",value:function(e,t){var n={method:N,headers:{ConnectionToken:e},url:this.invokeUrl+S,body:t};return this._callHttpClient(n)}},{key:"sendEvent",value:function(e,t,n,o,i){console.log(n),console.log(i);var r={ParticipantEvent:{Visibility:o,ParticipantEventType:t}},s={method:N,headers:{ConnectionToken:e},url:this.invokeUrl+m,body:r};return this._callHttpClient(s)}},{key:"disconnectChat",value:function(e){var t={method:N,headers:{ConnectionToken:e},url:this.invokeUrl+I,body:{}};return this._callHttpClient(t)}},{key:"createConnectionDetails",value:function(e){var t={method:N,headers:{ParticipantToken:e},url:this.invokeUrl+T,body:{}};return this._callHttpClient(t)}},{key:"_callHttpClient",value:function(e){var t=this;return e.headers=Object.assign(e.headers,{"Content-Type":"application/json",Accept:"application/json"}),e.body=JSON.stringify(e.body),new Promise(function(n,o){t.callHttpClient(e,function(e){var t={};t.data=JSON.parse(e.responseText),n(t)},function(e){var t={};t.statusText=e.statusText,o(t)})})}}]),t}(),X=new Y;function $(e,t){return!t||"object"!==te(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Z(e){return(Z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ee(e,t){return(ee=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function te(e){return(te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ne(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function oe(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function ie(e,t,n){return t&&oe(e.prototype,t),n&&oe(e,n),e}var re=function(){function e(){ne(this,e)}return ie(e,[{key:"_assertIsNonEmptyString",value:function(e,t){if(!e||"string"!=typeof e)throw new p(t+" is not a non-empty string!")}},{key:"_assertIsList",value:function(e,t){if(!Array.isArray(e))throw new p(t+" is not an array")}},{key:"_assertIsEnum",value:function(e,t,n){var o;for(o=0;o<t.length;o++)if(t[o]===e)return;throw new p(n+" passed is not valid. Allowed values are: "+t)}},{key:"_assertIsObject",value:function(e,t){if("object"!==te(e))throw new p(t+" is not an object!")}},{key:"validateNewControllerDetails",value:function(e){return!0}},{key:"validateSendMessage",value:function(e,t){E.isString(e)||this._assertIsObject(e,"message"),this._assertIsEnum(t,Object.values(O),"type")}},{key:"validateConnectChat",value:function(e){return!0}},{key:"validateSendEvent",value:function(e){this._assertIsNonEmptyString(e.eventType,"eventType"),void 0!==e.messageIds&&this._assertIsList(e.messageIds),void 0!==e.visibility&&this._assertIsEnum(e.visibility,Object.values(M),"visibility"),void 0!==e.persistence&&this._assertIsEnum(e.persistence,Object.values(A),"persistence")}},{key:"validateGetMessages",value:function(e){return!0}}]),e}(),se=function(e){function t(){return ne(this,t),$(this,Z(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ee(e,t)}(t,re),ie(t,[{key:"validateChatDetails",value:function(e){this._assertIsObject(e,"chatDetails"),this._assertIsNonEmptyString(e.initialContactId,"chatDetails.initialContactId"),this._assertIsNonEmptyString(e.contactId,"chatDetails.contactId"),this._assertIsNonEmptyString(e.participantId,"chatDetails.participantId"),e.connectionDetails?(this._assertIsObject(e.connectionDetails,"chatDetails.connectionDetails"),this._assertIsNonEmptyString(e.connectionDetails.PreSignedConnectionUrl,"chatDetails.connectionDetails.PreSignedConnectionUrl"),this._assertIsNonEmptyString(e.connectionDetails.ConnectionId,"chatDetails.connectionDetails.ConnectionId"),this._assertIsNonEmptyString(e.connectionDetails.connectionToken,"chatDetails.connectionDetails.connectionToken")):this._assertIsNonEmptyString(e.participantToken,"chatDetails.participantToken")}},{key:"validateInitiateChatResponse",value:function(){return!0}}]),t}();function ce(e){return(ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ae(e){return(ae=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ue(e,t){return(ue=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function le(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function he(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function fe(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function pe(e,t,n){return t&&fe(e.prototype,t),n&&fe(e,n),e}var de=function(){function e(){he(this,e)}return pe(e,[{key:"createNewMqttConnectionProvider",value:function(e,t){switch(t){case"PahoMqttConnection":return function(t){return e.callback=t,new be(e)}}throw new p("type in ChatConnectionManager.createNewMqttConnectionProvider",t)}}]),e}(),ye=function(){function e(){he(this,e)}return pe(e,[{key:"connect",value:function(e){throw new f("connect in IotClient")}},{key:"disconnect",value:function(){throw new f("connect in IotClient")}},{key:"subscribe",value:function(e,t){throw new f("connect in IotClient")}},{key:"unsubscribe",value:function(e,t){throw new f("connect in IotClient")}}]),e}(),ve=Object.freeze({NeverConnected:"NeverConnected",Connecting:"Connecting",Connected:"Connected",DisconnectedRetrying:"DisconnectedRetrying",Disconnected:"Disconnected",Reconnecting:"Reconnecting"}),ge=Object.freeze({MESSAGE:"Message",DISCONNECTED_RETRYING:"DisconnectedRetrying",DISCONNECTED:"Disconnected",RECONNECTED:"ReconnectSuccess"}),_e=n(3),be=function(e){function t(e){var n;he(this,t),(n=function(e,t){return!t||"object"!==ce(t)&&"function"!=typeof t?le(e):t}(this,ae(t).call(this))).preSignedUrl=e.preSignedUrl,n.connectionId=e.connectionId,n.status=ve.NeverConnected,n.pahoClient=new _e.Client(n.preSignedUrl,n.connectionId);var o=le(le(n));return n.pahoClient.onMessageArrived=function(e){o._messageArrivedCallback(e)},n.pahoClient.onConnectionLost=function(e){o._connectionLostCallBack(e)},n.pahoClient.onMessageArrived=function(e){o._messageArrivedCallback(e)},n.debug=e.debug,e.debug&&(n.pahoClient.trace=function(e){console.log("trace paho: "),console.log(e)}),n.callback=e.callback,n.killReconnect=null,n.maxRetryTime=e.maxRetryTime,n.neverConnected=!0,n._subscribedTopics=[],n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ue(e,t)}(t,ye),pe(t,[{key:"connect",value:function(e){var t=this;return new Promise(function(n,o){e.onSuccess=function(e){t.neverConnected=!1;var o=t.status;t._onConnectSuccess(e),n({}),o===ve.DisconnectedRetrying&&t.callback(ge.RECONNECTED,{})},e.onFailure=function(e){var n={reason:e};t._onConnectFailure(n),o(n)},t.status=ve.Connecting,t.pahoClient.connect(e)})}},{key:"_connectionLostCallBack",value:function(e){var t={reason:e};if(this._subscribedTopics=[],this.status!==ve.Disconnected)return t.reason.reconnect?(this.status=ve.DisconnectedRetrying,this.callback(ge.DISCONNECTED_RETRYING,t),void(this.killReconnect=this._scheduleReconnectKilling())):(this.status=ve.Disconnected,void this.callback(ge.DISCONNECTED,t))}},{key:"_messageArrivedCallback",value:function(e){var t={topic:e.topic,qos:e.qos,payloadString:e.payloadString};this.callback(ge.MESSAGE,t)}},{key:"_onConnectSuccess",value:function(e){null!==this.killReconnect&&(clearTimeout(this.killReconnect),this.killReconnect=null),this.status=ve.Connected}},{key:"_onConnectFailure",value:function(e){this.neverConnected?this.status=ve.NeverConnected:this.status=ve.Disconnected}},{key:"_scheduleReconnectKilling",value:function(){var e=this;return setTimeout(function(){e.disconnect(),e.callback(ge.DISCONNECTED,{reason:"TimeoutInReconnect"})},1e3*e.maxRetryTime)}},{key:"disconnect",value:function(){this._subscribedTopics=[],this.status=ve.Disconnected,this.pahoClient.disconnect()}},{key:"subscribe",value:function(e,t){var n=this;return new Promise(function(o,i){t.onSuccess=function(t){n._subscribeSuccess(e,t);var i={topic:e,qos:t.grantedQos};o(i)},t.onFailure=function(t){i({topic:e,error:t})},n.pahoClient.subscribe(e,t)})}},{key:"_addToTopics",value:function(e){var t;for(t in this._subscribedTopics)if(t===e)return;this._subscribedTopics.push(e)}},{key:"_subscribeSuccess",value:function(e,t){this._addToTopics(e)}},{key:"getSubscribedTopics",value:function(){return this._subscribedTopics.slice(0)}},{key:"unsubscribe",value:function(e,t){var n=this;return new Promise(function(o,i){t.onSuccess=function(t){var i={topic:e,response:t};n._unsubscribeSuccess(e,i),o(i)},t.onFailure=function(t){i({topic:e,error:t})},n.pahoClient.unsubscribe(e,t)})}},{key:"_unsubscribeSuccess",value:function(e,t){this._subscribedTopics=this._subscribedTopics.filter(function(t){return t!==e})}},{key:"getStatus",value:function(){return this.status}},{key:"_logit",value:function(e){this.debug&&console.log(e)}}]),t}();function Ce(e){return(Ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ee(e,t){return!t||"object"!==Ce(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function we(e){return(we=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Se(e,t){return(Se=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function me(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ie(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Te(e,t,n){return t&&Ie(e.prototype,t),n&&Ie(e,n),e}var Ne=function(){function e(){me(this,e)}return Te(e,[{key:"start",value:function(e){throw new f("start in ConnectionHelper")}},{key:"end",value:function(){throw new f("end in ConnectionHelper")}}]),e}(),ke={NeverStarted:"NeverStarted",Starting:"Starting",Connected:"Connected",DisconnectedReconnecting:"DisconnectedReconnecting",Ended:"Ended"},Oe="Ended",Me="DisconnectedReconnecting",Ae="Reconnected",Pe="IncomingMessage",De=function(e){function t(e){var n;if(me(this,t),(n=Ee(this,we(t).call(this))).preSignedUrl=e.connectionDetails.preSignedUrl,n.topic=e.connectionDetails.connectionId,n.iotConnection=e.mqttConnectionProvider(function(e,t){return n._handleIotEvent(e,t)}),n.iotConnection.getStatus()!==ve.NeverConnected)throw new p("iotConnection is expected to be in NeverConnected state but is not")();return n.chatControllerCallback=e.callback,n.status=ke.NeverStarted,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Se(e,t)}(t,Ne),Te(t,[{key:"start",value:function(){if(this.status!==ke.NeverStarted)throw new d("Connection helper started twice!!");return this.status=ke.Starting,new Promise(this._createStartPromise())}},{key:"_createStartPromise",value:function(){var e=this;return function(t,n){e._connect(t,n)}}},{key:"_connect",value:function(e,t){var n=this,o={useSSL:!0,keepAliveInterval:D,reconnect:!1,mqttVersion:4,timeout:R};n.iotConnection.connect(o).then(function(o){n._postConnect(e,t,o)}).catch(function(e){n._connectFailed(t,e)})}},{key:"_postConnect",value:function(e,t,n){this._subscribe(e,t,n)}},{key:"_connectFailed",value:function(e,t){var n={connectSuccess:!1,reason:"ConnectionToBrokerFailed",details:t};self.status=ke.Ended,e(n)}},{key:"_subscribe",value:function(e,t,n){var o=this;o.iotConnection.subscribe(o.topic,{qos:1}).then(function(t){o._postSubscribe(e,t)}).catch(function(e){o._subscribeFailed(t,e)})}},{key:"_postSubscribe",value:function(e,t){var n={details:t,connectSuccess:!0};this.status=ke.Connected,e(n)}},{key:"_subscribeFailed",value:function(e,t){var n={connectSuccess:!1,details:t,reason:"SubscribtionToTopicFailed"};this.status=ke.Ended,this.iotConnection.disconnect(),e(n)}},{key:"_handleIotEvent",value:function(e,t){switch(e){case ge.MESSAGE:this.chatControllerCallback(Pe,t);break;case ge.DISCONNECTED_RETRYING:console.log("ERROR. Received unexpected event DISCONNECTED_RETRYING");break;case ge.DISCONNECTED:this.status=ke.Ended,this.chatControllerCallback(Oe,t);break;case ge.RECONNECTED:console.log("ERROR. Received unexpected event DISCONNECTED_RETRYING")}}},{key:"end",value:function(){this.status=ke.Ended,this.iotConnection.disconnect()}},{key:"getStatus",value:function(){return this.status}}]),t}();function Re(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var Ue=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,o;return t=e,(n=[{key:"fromConnectionHelperEvent",value:function(e,t,n){var o={data:t,chatDetails:n},i={type:null,data:o};switch(e){case Oe:o.retrying=!1,i.type=j;break;case Me:o.retrying=!0,i.type=j;break;case Ae:o.connectCalled=!1,i.type=q;break;case Pe:return this._fromIncomingData(t,n)}}},{key:"_fromIncomingData",value:function(e,t){var n=JSON.parse(e.payloadString),o={type:null,data:{data:n,chatDetails:t}};switch(n.Data.Type){case"TYPING":return o.type=B,o}return o.type=L,o}}])&&Re(t.prototype,n),o&&Re(t,o),e}(),xe=function(e,t,n){this.subMap=e,this.id=E.randomId(),this.eventName=t,this.f=n};xe.prototype.unsubscribe=function(){this.subMap.unsubscribe(this.eventName,this.id)};var Le=function(){this.subIdMap={},this.subEventNameMap={}};Le.prototype.subscribe=function(e,t){var n=new xe(this,e,t);this.subIdMap[n.id]=n;var o=this.subEventNameMap[e]||[];o.push(n),this.subEventNameMap[e]=o},Le.prototype.unsubscribe=function(e,t){E.contains(this.subEventNameMap,e)&&(this.subEventNameMap[e]=this.subEventNameMap[e].filter(function(e){return e.id!==t}),this.subEventNameMap[e].length<1&&delete this.subEventNameMap[e]),E.contains(this.subIdMap,t)&&delete this.subIdMap[t]},Le.prototype.getAllSubscriptions=function(){return E.values(this.subEventNameMap).reduce(function(e,t){return e.concat(t)},[])},Le.prototype.getSubscriptions=function(e){return this.subEventNameMap[e]||[]};var Be=function(e){var t=e||{};this.subMap=new Le,this.logEvents=t.logEvents||!1};function qe(e){return(qe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function je(e,t){return!t||"object"!==qe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ve(e){return(Ve=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Fe(e,t){return(Fe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ge(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function He(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Ke(e,t,n){return t&&He(e.prototype,t),n&&He(e,n),e}Be.prototype.subscribe=function(e,t){return E.assertNotNull(e,"eventName"),E.assertNotNull(t,"f"),E.assertTrue(E.isFunction(t),"f must be a function"),this.subMap.subscribe(e,t)},Be.prototype.subscribeAll=function(e){return E.assertNotNull(e,"f"),E.assertTrue(E.isFunction(e),"f must be a function"),this.subMap.subscribe("<<all>>",e)},Be.prototype.getSubscriptions=function(e){return this.subMap.getSubscriptions(e)},Be.prototype.trigger=function(e,t){E.assertNotNull(e,"eventName");var n=this,o=this.subMap.getSubscriptions("<<all>>"),i=this.subMap.getSubscriptions(e);o.concat(i).forEach(function(o){try{o.f(t||null,e,n)}catch(e){}})},Be.prototype.triggerAsync=function(e,t){var n=this;setTimeout(function(){return n.trigger(e,t)},0)},Be.prototype.bridge=function(){var e=this;return function(t,n){e.trigger(n,t)}},Be.prototype.unsubscribeAll=function(){this.subMap.getAllSubscriptions().forEach(function(e){e.unsubscribe()})};var Qe="NeverEstablished",Je="Establishing",Ye="Established",ze="BrokenRetrying",We="Broken",Xe=function(){function e(){Ge(this,e)}return Ke(e,[{key:"sendTextMessage",value:function(e){throw new f("sendTextMessage in ChatController")}},{key:"establishNetworkLink",value:function(e){throw new f("connectChat in ChatController")}},{key:"disconnectParticipant",value:function(){throw new f("endChat in ChatController")}},{key:"sendEvent",value:function(e){throw new f("sendEvent in ChatController")}},{key:"getTranscript",value:function(e){throw new f("getTranscript in ChatController")}},{key:"getConnectionStatus",value:function(){throw new f("getStatus in ChatController")}}]),e}(),$e=function(e){function t(e){var n;return Ge(this,t),(n=je(this,Ve(t).call(this))).setArguments(e),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Fe(e,t)}(t,Xe),Ke(t,[{key:"setArguments",value:function(e){var t=this;this.argsValidator=e.argsValidator,this.chatEventConstructor=e.chatEventConstructor,this.connectionDetails=e.chatDetails.connectionDetails,this.intialContactId=e.chatDetails.initialContactId,this.contactId=e.chatDetails.contactId,this.participantId=e.chatDetails.participantId,this.acpsClient=e.acpsClient,this.participantToken=e.chatDetails.participantToken,this.connectionHelperCallback=function(e,n){return t._handleConnectionHelperEvents(e,n)},this._hasConnectionDetails=e.hasConnectionDetails,this.chatControllerFactory=e.chatControllerFactory,e.hasConnectionDetails&&this._setConnectionHelper(e.chatDetails.connectionDetails),this._connectCalledAtleastOnce=!1,this._everConnected=!1,this.pubsub=e.pubsub,this.continuousSuccessFetchConnections=0,this._chatEnded=!1}},{key:"_setConnectionHelper",value:function(e){var t=this.chatControllerFactory.createConnectionHelperProvider(e);this.connectionHelper=t(this.connectionHelperCallback)}},{key:"subscribe",value:function(e,t){this.pubsub.subscribe(e,t)}},{key:"_createPromiseWrapperFromContext",value:function(e,t){return E.wrapPromise(e,function(e){return function(n){n.requestContext=t,e(n)}},function(e){return function(n){n.requestContext=t,e(n)}})}},{key:"sendMessage",value:function(e,t,n){var o=(n||{}).requestContext;this.argsValidator.validateSendMessage(e,t);var i,r=this.connectionDetails.connectionToken;i=E.isString(e)?e:e.message;var s=this.acpsClient.sendMessage(r,i,t);return this._createPromiseWrapperFromContext(s,o)}},{key:"sendEvent",value:function(e,t){var n=t||{};this.argsValidator.validateSendEvent(e);var o=this.connectionDetails.connectionToken,i=e.persistence||A.PERSISTED,r=e.visibility||M.ALL,s=n.requestContext,c=this.acpsClient.sendEvent(o,e.eventType,e.messageIds,r,i);return this._createPromiseWrapperFromContext(c,s)}},{key:"getTranscript",value:function(e,t){var n=t||{},o={};o.IntialContactId=this.intialContactId,o.StartKey=e.StartKey||{},o.ScanDirection=e.ScanDirection||"BACKWARD",o.SortKey=e.SortKey||"ASCENDING",o.MaxResults=e.MaxResults||15,e.NextToken&&(o.NextToken=e.NextToken);var i=this.connectionDetails.connectionToken,r=n.requestContext,s=this.acpsClient.getTranscript(i,o);return this._createPromiseWrapperFromContext(s,r)}},{key:"_handleConnectionHelperEvents",value:function(e,t){try{var n=this.chatEventConstructor.fromConnectionHelperEvent(e,t,this.getChatDetails())}catch(e){throw console.log(e),e}this.pubsub.triggerAsync(n.type,n.data)}},{key:"connect",value:function(e){var t=this;if(this.argsValidator.validateConnectChat(e),t.getConnectionStatus()!==We&&t.getConnectionStatus()!==Qe)throw new d("Can call establishNetworkLink only when getConnectionStatus is Broken or NeverEstablished");return new Promise(function(n,o){var i=t._createConnectCallbacksWrapper(n,o,e);t._hasConnectionDetails?t._startConnectionHelper(i):t._fetchConnectionDetails().then(function(e){t._setConnectionHelper(e),t.connectionDetails=e,t._hasConnectionDetails=!0,t._startConnectionHelper(i)}).catch(function(e){i.reject(e)}),t._connectCalledAtleastOnce=!0})}},{key:"_createConnectCallbacksWrapper",value:function(e,t,n){var o=this,i=this;return{resolve:function(t){var r={_debug:t,connectSuccess:!0,connectCalled:!0},s=Object.assign({chatDetails:i.getChatDetails()},r);o.pubsub.triggerAsync(q,s),e(r,n)},reject:function(e){t({_debug:e,connectSuccess:!1,connectCalled:!0},n)}}}},{key:"_fetchConnectionDetails",value:function(){var e=this;return new Promise(function(t,n){e.acpsClient.createConnectionDetails(e.participantToken).then(function(e){var n={};n.ConnectionId=e.data.ConnectionDetails.ConnectionId,n.PreSignedConnectionUrl=e.data.ConnectionDetails.PreSignedConnectionUrl,n.connectionToken=e.data.ParticipantCredentials.Token,t(n)}).catch(function(e){n({reason:"Failed to fetch connectionDetails",_debug:e})})})}},{key:"disconnectParticipant",value:function(){var e=this;e._chatEnded=!0;var t=e.connectionDetails.connectionToken;setTimeout(function(){e.acpsClient.disconnectChat(t),e.connectionHelper.end()},0)}},{key:"_startConnectionHelper",value:function(e){var t=this;this.connectionHelper.start().then(function(n){t._everConnected=!0,e.resolve(n.details)}).catch(function(){e.reject({})})}},{key:"getChatDetails",value:function(){return{intialContactId:this.intialContactId,contactId:this.contactId,participantId:this.participantId,participantToken:this.participantToken,connectionDetails:this.connectionDetails}}},{key:"_convertConnectionHelperStatus",value:function(e){switch(e){case ke.NeverStarted:return Qe;case ke.Starting:return Je;case ke.Ended:return We;case ke.Connected:return Ye;case ke.DisconnectedReconnecting:return ze}}},{key:"getConnectionStatus",value:function(){return this._hasConnectionDetails?this._convertConnectionHelperStatus(this.connectionHelper.getStatus()):Qe}}]),t}();function Ze(e){return(Ze="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function et(e,t){return!t||"object"!==Ze(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function tt(e){return(tt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function nt(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ot(e,t)}function ot(e,t){return(ot=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function it(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function rt(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function st(e,t,n){return t&&rt(e.prototype,t),n&&rt(e,n),e}n.d(t,"a",function(){return pt});var ct=function(){function e(){it(this,e)}return st(e,[{key:"createAgentChatController",value:function(e,t){throw new f("createAgentChatController in ChatControllerFactory.")}},{key:"createCustomerChatController",value:function(e,t){throw new f("createCustomerChatController in ChatControllerFactory.")}},{key:"createConnectionHelperProvider",value:function(e){throw new f("createIncomingChatController in ChatControllerFactory")}}]),e}(),at=function(e){function t(){var e;return it(this,t),(e=et(this,tt(t).call(this))).argsValidator=new se,e.chatConnectionManager=new de,e.acpsClient=X.getClient("PROD"),e.chatEventConstructor=new Ue,e}return nt(t,ct),st(t,[{key:"createAgentChatSession",value:function(e){var t=this._createChatSession(e);return new lt(t)}},{key:"createCustomerChatSession",value:function(e){var t=this._createChatSession(e);return new ht(t)}},{key:"_createChatSession",value:function(e){var t=this._normalizeChatDetails(e),n=!1;t.connectionDetails&&(n=!0);var o={chatDetails:t,chatControllerFactory:this,chatEventConstructor:this.chatEventConstructor,pubsub:new Be,acpsClient:this.acpsClient,argsValidator:this.argsValidator,hasConnectionDetails:n};return new $e(o)}},{key:"_normalizeChatDetails",value:function(e){if(e.ParticipantCredentials&&e.ParticipantCredentials.Token){this.argsValidator.validateInitiateChatResponse(e);var t={},n={};return n.connectionToken=e.ParticipantCredentials.Token,n.ConnectionId=e.ConnectionDetails.ConnectionId,n.PreSignedConnectionUrl=e.ConnectionDetails.PreSignedConnectionUrl,t.connectionDetails=n,t.participantId=e.ParticipantId,t.contactId=e.ContactId,t.initialContactId=e.ContactId,t}return this.argsValidator.validateChatDetails(e),e}},{key:"createConnectionHelperProvider",value:function(e){var t={preSignedUrl:e.PreSignedConnectionUrl,connectionId:e.ConnectionId,maxRetryTime:120,debug:!0},n={mqttConnectionProvider:this.chatConnectionManager.createNewMqttConnectionProvider(t,"PahoMqttConnection"),connectionDetails:{preSignedUrl:e.PreSignedConnectionUrl,connectionId:e.ConnectionId}};return function(e){return n.callback=e,new De(n)}}}]),t}(),ut=function(){function e(t){it(this,e),this.controller=t}return st(e,[{key:"onMessage",value:function(e){this.controller.subscribe(L,e)}},{key:"onTyping",value:function(e){this.controller.subscribe(B,e)}},{key:"onConnectionBroken",value:function(e){this.controller.subscribe(j,e)}},{key:"onConnectionEstablished",value:function(e){this.controller.subscribe(q,e)}},{key:"sendMessage",value:function(e,t,n){return this.controller.sendMessage(e,t,n)}},{key:"connect",value:function(e,t){return this.controller.connect(e,t)}},{key:"sendEvent",value:function(e,t){return this.controller.sendEvent(e,t)}},{key:"getTranscript",value:function(e,t){return this.controller.getTranscript(e,t)}},{key:"getConnectionStatus",value:function(){return this.controller.getConnectionStatus()}},{key:"getChatDetails",value:function(){return this.controller.getChatDetails()}}]),e}(),lt=function(e){function t(e){return it(this,t),et(this,tt(t).call(this,e))}return nt(t,ut),t}(),ht=function(e){function t(e){return it(this,t),et(this,tt(t).call(this,e))}return nt(t,ut),st(t,[{key:"disconnectParticipant",value:function(){return this.controller.disconnectParticipant()}}]),t}(),ft=new at,pt=function(e,t){var n=t||U;if(n===U)return ft.createAgentChatSession(e);if(n===x)return ft.createCustomerChatSession(e);throw new p("Unkown value for session type",t)}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"chatSession",function(){return i});var o=n(0);connect=e.connect||{},e.connect=connect,connect.ChatSession=o.a;var i=o.a}.call(this,n(1))},function(e,t,n){(function(t){var n;n=function(){return function(e){var t,n=e.localStorage||(t={},{setItem:function(e,n){t[e]=n},getItem:function(e){return t[e]},removeItem:function(e){delete t[e]}}),o={CONNECT:1,CONNACK:2,PUBLISH:3,PUBACK:4,PUBREC:5,PUBREL:6,PUBCOMP:7,SUBSCRIBE:8,SUBACK:9,UNSUBSCRIBE:10,UNSUBACK:11,PINGREQ:12,PINGRESP:13,DISCONNECT:14},i=function(e,t){for(var n in e)if(e.hasOwnProperty(n)){if(!t.hasOwnProperty(n)){var o="Unknown property, "+n+". Valid properties are:";for(var i in t)t.hasOwnProperty(i)&&(o=o+" "+i);throw new Error(o)}if(typeof e[n]!==t[n])throw new Error(a(s.INVALID_TYPE,[typeof e[n],n]))}},r=function(e,t){return function(){return e.apply(t,arguments)}},s={OK:{code:0,text:"AMQJSC0000I OK."},CONNECT_TIMEOUT:{code:1,text:"AMQJSC0001E Connect timed out."},SUBSCRIBE_TIMEOUT:{code:2,text:"AMQJS0002E Subscribe timed out."},UNSUBSCRIBE_TIMEOUT:{code:3,text:"AMQJS0003E Unsubscribe timed out."},PING_TIMEOUT:{code:4,text:"AMQJS0004E Ping timed out."},INTERNAL_ERROR:{code:5,text:"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}"},CONNACK_RETURNCODE:{code:6,text:"AMQJS0006E Bad Connack return code:{0} {1}."},SOCKET_ERROR:{code:7,text:"AMQJS0007E Socket error:{0}."},SOCKET_CLOSE:{code:8,text:"AMQJS0008I Socket closed."},MALFORMED_UTF:{code:9,text:"AMQJS0009E Malformed UTF data:{0} {1} {2}."},UNSUPPORTED:{code:10,text:"AMQJS0010E {0} is not supported by this browser."},INVALID_STATE:{code:11,text:"AMQJS0011E Invalid state {0}."},INVALID_TYPE:{code:12,text:"AMQJS0012E Invalid type {0} for {1}."},INVALID_ARGUMENT:{code:13,text:"AMQJS0013E Invalid argument {0} for {1}."},UNSUPPORTED_OPERATION:{code:14,text:"AMQJS0014E Unsupported operation."},INVALID_STORED_DATA:{code:15,text:"AMQJS0015E Invalid data in local storage key={0} value={1}."},INVALID_MQTT_MESSAGE_TYPE:{code:16,text:"AMQJS0016E Invalid MQTT message type {0}."},MALFORMED_UNICODE:{code:17,text:"AMQJS0017E Malformed Unicode string:{0} {1}."},BUFFER_FULL:{code:18,text:"AMQJS0018E Message buffer is full, maximum buffer size: {0}."}},c={0:"Connection Accepted",1:"Connection Refused: unacceptable protocol version",2:"Connection Refused: identifier rejected",3:"Connection Refused: server unavailable",4:"Connection Refused: bad user name or password",5:"Connection Refused: not authorized"},a=function(e,t){var n=e.text;if(t)for(var o,i,r=0;r<t.length;r++)if(o="{"+r+"}",(i=n.indexOf(o))>0){var s=n.substring(0,i),c=n.substring(i+o.length);n=s+t[r]+c}return n},u=[0,6,77,81,73,115,100,112,3],l=[0,4,77,81,84,84,4],h=function(e,t){for(var n in this.type=e,t)t.hasOwnProperty(n)&&(this[n]=t[n])};function f(e,t){var n,i=t,r=e[t],s=r>>4,c=r&=15;t+=1;var a=0,u=1;do{if(t==e.length)return[null,i];a+=(127&(n=e[t++]))*u,u*=128}while(0!=(128&n));var l=t+a;if(l>e.length)return[null,i];var f=new h(s);switch(s){case o.CONNACK:1&e[t++]&&(f.sessionPresent=!0),f.returnCode=e[t++];break;case o.PUBLISH:var p=c>>1&3,d=y(e,t),v=_(e,t+=2,d);t+=d,p>0&&(f.messageIdentifier=y(e,t),t+=2);var g=new w(e.subarray(t,l));1==(1&c)&&(g.retained=!0),8==(8&c)&&(g.duplicate=!0),g.qos=p,g.destinationName=v,f.payloadMessage=g;break;case o.PUBACK:case o.PUBREC:case o.PUBREL:case o.PUBCOMP:case o.UNSUBACK:f.messageIdentifier=y(e,t);break;case o.SUBACK:f.messageIdentifier=y(e,t),t+=2,f.returnCode=e.subarray(t,l)}return[f,l]}function p(e,t,n){return t[n++]=e>>8,t[n++]=e%256,n}function d(e,t,n,o){return g(e,n,o=p(t,n,o)),o+t}function y(e,t){return 256*e[t]+e[t+1]}function v(e){for(var t=0,n=0;n<e.length;n++){var o=e.charCodeAt(n);o>2047?(55296<=o&&o<=56319&&(n++,t++),t+=3):o>127?t+=2:t++}return t}function g(e,t,n){for(var o=n,i=0;i<e.length;i++){var r=e.charCodeAt(i);if(55296<=r&&r<=56319){var c=e.charCodeAt(++i);if(isNaN(c))throw new Error(a(s.MALFORMED_UNICODE,[r,c]));r=c-56320+(r-55296<<10)+65536}r<=127?t[o++]=r:r<=2047?(t[o++]=r>>6&31|192,t[o++]=63&r|128):r<=65535?(t[o++]=r>>12&15|224,t[o++]=r>>6&63|128,t[o++]=63&r|128):(t[o++]=r>>18&7|240,t[o++]=r>>12&63|128,t[o++]=r>>6&63|128,t[o++]=63&r|128)}return t}function _(e,t,n){for(var o,i="",r=t;r<t+n;){var c=e[r++];if(c<128)o=c;else{var u=e[r++]-128;if(u<0)throw new Error(a(s.MALFORMED_UTF,[c.toString(16),u.toString(16),""]));if(c<224)o=64*(c-192)+u;else{var l=e[r++]-128;if(l<0)throw new Error(a(s.MALFORMED_UTF,[c.toString(16),u.toString(16),l.toString(16)]));if(c<240)o=4096*(c-224)+64*u+l;else{var h=e[r++]-128;if(h<0)throw new Error(a(s.MALFORMED_UTF,[c.toString(16),u.toString(16),l.toString(16),h.toString(16)]));if(!(c<248))throw new Error(a(s.MALFORMED_UTF,[c.toString(16),u.toString(16),l.toString(16),h.toString(16)]));o=262144*(c-240)+4096*u+64*l+h}}}o>65535&&(o-=65536,i+=String.fromCharCode(55296+(o>>10)),o=56320+(1023&o)),i+=String.fromCharCode(o)}return i}h.prototype.encode=function(){var e,t=(15&this.type)<<4,n=0,i=[],r=0;switch(void 0!==this.messageIdentifier&&(n+=2),this.type){case o.CONNECT:switch(this.mqttVersion){case 3:n+=u.length+3;break;case 4:n+=l.length+3}n+=v(this.clientId)+2,void 0!==this.willMessage&&(n+=v(this.willMessage.destinationName)+2,(e=this.willMessage.payloadBytes)instanceof Uint8Array||(e=new Uint8Array(c)),n+=e.byteLength+2),void 0!==this.userName&&(n+=v(this.userName)+2),void 0!==this.password&&(n+=v(this.password)+2);break;case o.SUBSCRIBE:t|=2;for(var s=0;s<this.topics.length;s++)i[s]=v(this.topics[s]),n+=i[s]+2;n+=this.requestedQos.length;break;case o.UNSUBSCRIBE:t|=2;for(s=0;s<this.topics.length;s++)i[s]=v(this.topics[s]),n+=i[s]+2;break;case o.PUBREL:t|=2;break;case o.PUBLISH:this.payloadMessage.duplicate&&(t|=8),t=t|=this.payloadMessage.qos<<1,this.payloadMessage.retained&&(t|=1),n+=(r=v(this.payloadMessage.destinationName))+2;var c=this.payloadMessage.payloadBytes;n+=c.byteLength,c instanceof ArrayBuffer?c=new Uint8Array(c):c instanceof Uint8Array||(c=new Uint8Array(c.buffer));break;case o.DISCONNECT:}var a=function(e){var t=new Array(1),n=0;do{var o=e%128;(e>>=7)>0&&(o|=128),t[n++]=o}while(e>0&&n<4);return t}(n),h=a.length+1,f=new ArrayBuffer(n+h),y=new Uint8Array(f);if(y[0]=t,y.set(a,1),this.type==o.PUBLISH)h=d(this.payloadMessage.destinationName,r,y,h);else if(this.type==o.CONNECT){switch(this.mqttVersion){case 3:y.set(u,h),h+=u.length;break;case 4:y.set(l,h),h+=l.length}var g=0;this.cleanSession&&(g=2),void 0!==this.willMessage&&(g|=4,g|=this.willMessage.qos<<3,this.willMessage.retained&&(g|=32)),void 0!==this.userName&&(g|=128),void 0!==this.password&&(g|=64),y[h++]=g,h=p(this.keepAliveInterval,y,h)}switch(void 0!==this.messageIdentifier&&(h=p(this.messageIdentifier,y,h)),this.type){case o.CONNECT:h=d(this.clientId,v(this.clientId),y,h),void 0!==this.willMessage&&(h=d(this.willMessage.destinationName,v(this.willMessage.destinationName),y,h),h=p(e.byteLength,y,h),y.set(e,h),h+=e.byteLength),void 0!==this.userName&&(h=d(this.userName,v(this.userName),y,h)),void 0!==this.password&&(h=d(this.password,v(this.password),y,h));break;case o.PUBLISH:y.set(c,h);break;case o.SUBSCRIBE:for(s=0;s<this.topics.length;s++)h=d(this.topics[s],i[s],y,h),y[h++]=this.requestedQos[s];break;case o.UNSUBSCRIBE:for(s=0;s<this.topics.length;s++)h=d(this.topics[s],i[s],y,h)}return f};var b=function(e,t){this._client=e,this._keepAliveInterval=1e3*t,this.isReset=!1;var n=new h(o.PINGREQ).encode(),i=function(e){return function(){return r.apply(e)}},r=function(){this.isReset?(this.isReset=!1,this._client._trace("Pinger.doPing","send PINGREQ"),this._client.socket.send(n),this.timeout=setTimeout(i(this),this._keepAliveInterval)):(this._client._trace("Pinger.doPing","Timed out"),this._client._disconnected(s.PING_TIMEOUT.code,a(s.PING_TIMEOUT)))};this.reset=function(){this.isReset=!0,clearTimeout(this.timeout),this._keepAliveInterval>0&&(this.timeout=setTimeout(i(this),this._keepAliveInterval))},this.cancel=function(){clearTimeout(this.timeout)}},C=function(e,t,n,o){t||(t=30);this.timeout=setTimeout(function(e,t,n){return function(){return e.apply(t,n)}}(n,e,o),1e3*t),this.cancel=function(){clearTimeout(this.timeout)}},E=function(t,o,i,r,c){if(!("WebSocket"in e&&null!==e.WebSocket))throw new Error(a(s.UNSUPPORTED,["WebSocket"]));if(!("ArrayBuffer"in e&&null!==e.ArrayBuffer))throw new Error(a(s.UNSUPPORTED,["ArrayBuffer"]));for(var u in this._trace("Paho.Client",t,o,i,r,c),this.host=o,this.port=i,this.path=r,this.uri=t,this.clientId=c,this._wsuri=null,this._localKey=o+":"+i+("/mqtt"!=r?":"+r:"")+":"+c+":",this._msg_queue=[],this._buffered_msg_queue=[],this._sentMessages={},this._receivedMessages={},this._notify_msg_sent={},this._message_identifier=1,this._sequence=0,n)0!==u.indexOf("Sent:"+this._localKey)&&0!==u.indexOf("Received:"+this._localKey)||this.restore(u)};E.prototype.host=null,E.prototype.port=null,E.prototype.path=null,E.prototype.uri=null,E.prototype.clientId=null,E.prototype.socket=null,E.prototype.connected=!1,E.prototype.maxMessageIdentifier=65536,E.prototype.connectOptions=null,E.prototype.hostIndex=null,E.prototype.onConnected=null,E.prototype.onConnectionLost=null,E.prototype.onMessageDelivered=null,E.prototype.onMessageArrived=null,E.prototype.traceFunction=null,E.prototype._msg_queue=null,E.prototype._buffered_msg_queue=null,E.prototype._connectTimeout=null,E.prototype.sendPinger=null,E.prototype.receivePinger=null,E.prototype._reconnectInterval=1,E.prototype._reconnecting=!1,E.prototype._reconnectTimeout=null,E.prototype.disconnectedPublishing=!1,E.prototype.disconnectedBufferSize=5e3,E.prototype.receiveBuffer=null,E.prototype._traceBuffer=null,E.prototype._MAX_TRACE_ENTRIES=100,E.prototype.connect=function(e){var t=this._traceMask(e,"password");if(this._trace("Client.connect",t,this.socket,this.connected),this.connected)throw new Error(a(s.INVALID_STATE,["already connected"]));if(this.socket)throw new Error(a(s.INVALID_STATE,["already connected"]));this._reconnecting&&(this._reconnectTimeout.cancel(),this._reconnectTimeout=null,this._reconnecting=!1),this.connectOptions=e,this._reconnectInterval=1,this._reconnecting=!1,e.uris?(this.hostIndex=0,this._doConnect(e.uris[0])):this._doConnect(this.uri)},E.prototype.subscribe=function(e,t){if(this._trace("Client.subscribe",e,t),!this.connected)throw new Error(a(s.INVALID_STATE,["not connected"]));var n=new h(o.SUBSCRIBE);n.topics=e.constructor===Array?e:[e],void 0===t.qos&&(t.qos=0),n.requestedQos=[];for(var i=0;i<n.topics.length;i++)n.requestedQos[i]=t.qos;t.onSuccess&&(n.onSuccess=function(e){t.onSuccess({invocationContext:t.invocationContext,grantedQos:e})}),t.onFailure&&(n.onFailure=function(e){t.onFailure({invocationContext:t.invocationContext,errorCode:e,errorMessage:a(e)})}),t.timeout&&(n.timeOut=new C(this,t.timeout,t.onFailure,[{invocationContext:t.invocationContext,errorCode:s.SUBSCRIBE_TIMEOUT.code,errorMessage:a(s.SUBSCRIBE_TIMEOUT)}])),this._requires_ack(n),this._schedule_message(n)},E.prototype.unsubscribe=function(e,t){if(this._trace("Client.unsubscribe",e,t),!this.connected)throw new Error(a(s.INVALID_STATE,["not connected"]));var n=new h(o.UNSUBSCRIBE);n.topics=e.constructor===Array?e:[e],t.onSuccess&&(n.callback=function(){t.onSuccess({invocationContext:t.invocationContext})}),t.timeout&&(n.timeOut=new C(this,t.timeout,t.onFailure,[{invocationContext:t.invocationContext,errorCode:s.UNSUBSCRIBE_TIMEOUT.code,errorMessage:a(s.UNSUBSCRIBE_TIMEOUT)}])),this._requires_ack(n),this._schedule_message(n)},E.prototype.send=function(e){this._trace("Client.send",e);var t=new h(o.PUBLISH);if(t.payloadMessage=e,this.connected)e.qos>0?this._requires_ack(t):this.onMessageDelivered&&(this._notify_msg_sent[t]=this.onMessageDelivered(t.payloadMessage)),this._schedule_message(t);else{if(!this._reconnecting||!this.disconnectedPublishing)throw new Error(a(s.INVALID_STATE,["not connected"]));if(Object.keys(this._sentMessages).length+this._buffered_msg_queue.length>this.disconnectedBufferSize)throw new Error(a(s.BUFFER_FULL,[this.disconnectedBufferSize]));e.qos>0?this._requires_ack(t):(t.sequence=++this._sequence,this._buffered_msg_queue.unshift(t))}},E.prototype.disconnect=function(){if(this._trace("Client.disconnect"),this._reconnecting&&(this._reconnectTimeout.cancel(),this._reconnectTimeout=null,this._reconnecting=!1),!this.socket)throw new Error(a(s.INVALID_STATE,["not connecting or connected"]));var e=new h(o.DISCONNECT);this._notify_msg_sent[e]=r(this._disconnected,this),this._schedule_message(e)},E.prototype.getTraceLog=function(){if(null!==this._traceBuffer){for(var e in this._trace("Client.getTraceLog",new Date),this._trace("Client.getTraceLog in flight messages",this._sentMessages.length),this._sentMessages)this._trace("_sentMessages ",e,this._sentMessages[e]);for(var e in this._receivedMessages)this._trace("_receivedMessages ",e,this._receivedMessages[e]);return this._traceBuffer}},E.prototype.startTrace=function(){null===this._traceBuffer&&(this._traceBuffer=[]),this._trace("Client.startTrace",new Date,"@VERSION@-@BUILDLEVEL@")},E.prototype.stopTrace=function(){delete this._traceBuffer},E.prototype._doConnect=function(e){if(this.connectOptions.useSSL){var t=e.split(":");t[0]="wss",e=t.join(":")}this._wsuri=e,this.connected=!1,this.connectOptions.mqttVersion<4?this.socket=new WebSocket(e,["mqttv3.1"]):this.socket=new WebSocket(e,["mqtt"]),this.socket.binaryType="arraybuffer",this.socket.onopen=r(this._on_socket_open,this),this.socket.onmessage=r(this._on_socket_message,this),this.socket.onerror=r(this._on_socket_error,this),this.socket.onclose=r(this._on_socket_close,this),this.sendPinger=new b(this,this.connectOptions.keepAliveInterval),this.receivePinger=new b(this,this.connectOptions.keepAliveInterval),this._connectTimeout&&(this._connectTimeout.cancel(),this._connectTimeout=null),this._connectTimeout=new C(this,this.connectOptions.timeout,this._disconnected,[s.CONNECT_TIMEOUT.code,a(s.CONNECT_TIMEOUT)])},E.prototype._schedule_message=function(e){this._msg_queue.unshift(e),this.connected&&this._process_queue()},E.prototype.store=function(e,t){var i={type:t.type,messageIdentifier:t.messageIdentifier,version:1};switch(t.type){case o.PUBLISH:t.pubRecReceived&&(i.pubRecReceived=!0),i.payloadMessage={};for(var r="",c=t.payloadMessage.payloadBytes,u=0;u<c.length;u++)c[u]<=15?r=r+"0"+c[u].toString(16):r+=c[u].toString(16);i.payloadMessage.payloadHex=r,i.payloadMessage.qos=t.payloadMessage.qos,i.payloadMessage.destinationName=t.payloadMessage.destinationName,t.payloadMessage.duplicate&&(i.payloadMessage.duplicate=!0),t.payloadMessage.retained&&(i.payloadMessage.retained=!0),0===e.indexOf("Sent:")&&(void 0===t.sequence&&(t.sequence=++this._sequence),i.sequence=t.sequence);break;default:throw Error(a(s.INVALID_STORED_DATA,[e+this._localKey+t.messageIdentifier,i]))}n.setItem(e+this._localKey+t.messageIdentifier,JSON.stringify(i))},E.prototype.restore=function(e){var t=n.getItem(e),i=JSON.parse(t),r=new h(i.type,i);switch(i.type){case o.PUBLISH:for(var c=i.payloadMessage.payloadHex,u=new ArrayBuffer(c.length/2),l=new Uint8Array(u),f=0;c.length>=2;){var p=parseInt(c.substring(0,2),16);c=c.substring(2,c.length),l[f++]=p}var d=new w(l);d.qos=i.payloadMessage.qos,d.destinationName=i.payloadMessage.destinationName,i.payloadMessage.duplicate&&(d.duplicate=!0),i.payloadMessage.retained&&(d.retained=!0),r.payloadMessage=d;break;default:throw Error(a(s.INVALID_STORED_DATA,[e,t]))}0===e.indexOf("Sent:"+this._localKey)?(r.payloadMessage.duplicate=!0,this._sentMessages[r.messageIdentifier]=r):0===e.indexOf("Received:"+this._localKey)&&(this._receivedMessages[r.messageIdentifier]=r)},E.prototype._process_queue=function(){for(var e=null;e=this._msg_queue.pop();)this._socket_send(e),this._notify_msg_sent[e]&&(this._notify_msg_sent[e](),delete this._notify_msg_sent[e])},E.prototype._requires_ack=function(e){var t=Object.keys(this._sentMessages).length;if(t>this.maxMessageIdentifier)throw Error("Too many messages:"+t);for(;void 0!==this._sentMessages[this._message_identifier];)this._message_identifier++;e.messageIdentifier=this._message_identifier,this._sentMessages[e.messageIdentifier]=e,e.type===o.PUBLISH&&this.store("Sent:",e),this._message_identifier===this.maxMessageIdentifier&&(this._message_identifier=1)},E.prototype._on_socket_open=function(){var e=new h(o.CONNECT,this.connectOptions);e.clientId=this.clientId,this._socket_send(e)},E.prototype._on_socket_message=function(e){this._trace("Client._on_socket_message",e.data);for(var t=this._deframeMessages(e.data),n=0;n<t.length;n+=1)this._handleMessage(t[n])},E.prototype._deframeMessages=function(e){var t=new Uint8Array(e),n=[];if(this.receiveBuffer){var o=new Uint8Array(this.receiveBuffer.length+t.length);o.set(this.receiveBuffer),o.set(t,this.receiveBuffer.length),t=o,delete this.receiveBuffer}try{for(var i=0;i<t.length;){var r=f(t,i),c=r[0];if(i=r[1],null===c)break;n.push(c)}i<t.length&&(this.receiveBuffer=t.subarray(i))}catch(e){var u="undefined"==e.hasOwnProperty("stack")?e.stack.toString():"No Error Stack Available";return void this._disconnected(s.INTERNAL_ERROR.code,a(s.INTERNAL_ERROR,[e.message,u]))}return n},E.prototype._handleMessage=function(e){this._trace("Client._handleMessage",e);try{switch(e.type){case o.CONNACK:if(this._connectTimeout.cancel(),this._reconnectTimeout&&this._reconnectTimeout.cancel(),this.connectOptions.cleanSession){for(var t in this._sentMessages){var i=this._sentMessages[t];n.removeItem("Sent:"+this._localKey+i.messageIdentifier)}for(var t in this._sentMessages={},this._receivedMessages){var r=this._receivedMessages[t];n.removeItem("Received:"+this._localKey+r.messageIdentifier)}this._receivedMessages={}}if(0!==e.returnCode){this._disconnected(s.CONNACK_RETURNCODE.code,a(s.CONNACK_RETURNCODE,[e.returnCode,c[e.returnCode]]));break}this.connected=!0,this.connectOptions.uris&&(this.hostIndex=this.connectOptions.uris.length);var u=[];for(var l in this._sentMessages)this._sentMessages.hasOwnProperty(l)&&u.push(this._sentMessages[l]);if(this._buffered_msg_queue.length>0)for(var f=null;f=this._buffered_msg_queue.pop();)u.push(f),this.onMessageDelivered&&(this._notify_msg_sent[f]=this.onMessageDelivered(f.payloadMessage));u=u.sort(function(e,t){return e.sequence-t.sequence});for(var p=0,d=u.length;p<d;p++){if((i=u[p]).type==o.PUBLISH&&i.pubRecReceived){var y=new h(o.PUBREL,{messageIdentifier:i.messageIdentifier});this._schedule_message(y)}else this._schedule_message(i)}this.connectOptions.onSuccess&&this.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});var v=!1;this._reconnecting&&(v=!0,this._reconnectInterval=1,this._reconnecting=!1),this._connected(v,this._wsuri),this._process_queue();break;case o.PUBLISH:this._receivePublish(e);break;case o.PUBACK:(i=this._sentMessages[e.messageIdentifier])&&(delete this._sentMessages[e.messageIdentifier],n.removeItem("Sent:"+this._localKey+e.messageIdentifier),this.onMessageDelivered&&this.onMessageDelivered(i.payloadMessage));break;case o.PUBREC:if(i=this._sentMessages[e.messageIdentifier]){i.pubRecReceived=!0;y=new h(o.PUBREL,{messageIdentifier:e.messageIdentifier});this.store("Sent:",i),this._schedule_message(y)}break;case o.PUBREL:r=this._receivedMessages[e.messageIdentifier];n.removeItem("Received:"+this._localKey+e.messageIdentifier),r&&(this._receiveMessage(r),delete this._receivedMessages[e.messageIdentifier]);var g=new h(o.PUBCOMP,{messageIdentifier:e.messageIdentifier});this._schedule_message(g);break;case o.PUBCOMP:i=this._sentMessages[e.messageIdentifier];delete this._sentMessages[e.messageIdentifier],n.removeItem("Sent:"+this._localKey+e.messageIdentifier),this.onMessageDelivered&&this.onMessageDelivered(i.payloadMessage);break;case o.SUBACK:(i=this._sentMessages[e.messageIdentifier])&&(i.timeOut&&i.timeOut.cancel(),128===e.returnCode[0]?i.onFailure&&i.onFailure(e.returnCode):i.onSuccess&&i.onSuccess(e.returnCode),delete this._sentMessages[e.messageIdentifier]);break;case o.UNSUBACK:(i=this._sentMessages[e.messageIdentifier])&&(i.timeOut&&i.timeOut.cancel(),i.callback&&i.callback(),delete this._sentMessages[e.messageIdentifier]);break;case o.PINGRESP:this.sendPinger.reset();break;case o.DISCONNECT:this._disconnected(s.INVALID_MQTT_MESSAGE_TYPE.code,a(s.INVALID_MQTT_MESSAGE_TYPE,[e.type]));break;default:this._disconnected(s.INVALID_MQTT_MESSAGE_TYPE.code,a(s.INVALID_MQTT_MESSAGE_TYPE,[e.type]))}}catch(e){var _="undefined"==e.hasOwnProperty("stack")?e.stack.toString():"No Error Stack Available";return void this._disconnected(s.INTERNAL_ERROR.code,a(s.INTERNAL_ERROR,[e.message,_]))}},E.prototype._on_socket_error=function(e){this._reconnecting||this._disconnected(s.SOCKET_ERROR.code,a(s.SOCKET_ERROR,[e.data]))},E.prototype._on_socket_close=function(){this._reconnecting||this._disconnected(s.SOCKET_CLOSE.code,a(s.SOCKET_CLOSE))},E.prototype._socket_send=function(e){if(1==e.type){var t=this._traceMask(e,"password");this._trace("Client._socket_send",t)}else this._trace("Client._socket_send",e);this.socket.send(e.encode()),this.sendPinger.reset()},E.prototype._receivePublish=function(e){switch(e.payloadMessage.qos){case"undefined":case 0:this._receiveMessage(e);break;case 1:var t=new h(o.PUBACK,{messageIdentifier:e.messageIdentifier});this._schedule_message(t),this._receiveMessage(e);break;case 2:this._receivedMessages[e.messageIdentifier]=e,this.store("Received:",e);var n=new h(o.PUBREC,{messageIdentifier:e.messageIdentifier});this._schedule_message(n);break;default:throw Error("Invaild qos="+e.payloadMessage.qos)}},E.prototype._receiveMessage=function(e){this.onMessageArrived&&this.onMessageArrived(e.payloadMessage)},E.prototype._connected=function(e,t){this.onConnected&&this.onConnected(e,t)},E.prototype._reconnect=function(){this._trace("Client._reconnect"),this.connected||(this._reconnecting=!0,this.sendPinger.cancel(),this.receivePinger.cancel(),this._reconnectInterval<128&&(this._reconnectInterval=2*this._reconnectInterval),this.connectOptions.uris?(this.hostIndex=0,this._doConnect(this.connectOptions.uris[0])):this._doConnect(this.uri))},E.prototype._disconnected=function(e,t){if(this._trace("Client._disconnected",e,t),void 0!==e&&this._reconnecting)this._reconnectTimeout=new C(this,this._reconnectInterval,this._reconnect);else if(this.sendPinger.cancel(),this.receivePinger.cancel(),this._connectTimeout&&(this._connectTimeout.cancel(),this._connectTimeout=null),this._msg_queue=[],this._buffered_msg_queue=[],this._notify_msg_sent={},this.socket&&(this.socket.onopen=null,this.socket.onmessage=null,this.socket.onerror=null,this.socket.onclose=null,1===this.socket.readyState&&this.socket.close(),delete this.socket),this.connectOptions.uris&&this.hostIndex<this.connectOptions.uris.length-1)this.hostIndex++,this._doConnect(this.connectOptions.uris[this.hostIndex]);else if(void 0===e&&(e=s.OK.code,t=a(s.OK)),this.connected){if(this.connected=!1,this.onConnectionLost&&this.onConnectionLost({errorCode:e,errorMessage:t,reconnect:this.connectOptions.reconnect,uri:this._wsuri}),e!==s.OK.code&&this.connectOptions.reconnect)return this._reconnectInterval=1,void this._reconnect()}else 4===this.connectOptions.mqttVersion&&!1===this.connectOptions.mqttVersionExplicit?(this._trace("Failed to connect V4, dropping back to V3"),this.connectOptions.mqttVersion=3,this.connectOptions.uris?(this.hostIndex=0,this._doConnect(this.connectOptions.uris[0])):this._doConnect(this.uri)):this.connectOptions.onFailure&&this.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext,errorCode:e,errorMessage:t})},E.prototype._trace=function(){if(this.traceFunction){var e=Array.prototype.slice.call(arguments);for(var t in e)void 0!==e[t]&&e.splice(t,1,JSON.stringify(e[t]));var n=e.join("");this.traceFunction({severity:"Debug",message:n})}if(null!==this._traceBuffer){t=0;for(var o=arguments.length;t<o;t++)this._traceBuffer.length==this._MAX_TRACE_ENTRIES&&this._traceBuffer.shift(),0===t?this._traceBuffer.push(arguments[t]):void 0===arguments[t]?this._traceBuffer.push(arguments[t]):this._traceBuffer.push("  "+JSON.stringify(arguments[t]))}},E.prototype._traceMask=function(e,t){var n={};for(var o in e)e.hasOwnProperty(o)&&(n[o]=o==t?"******":e[o]);return n};var w=function(e){var t,n;if(!("string"==typeof e||e instanceof ArrayBuffer||ArrayBuffer.isView(e)&&!(e instanceof DataView)))throw a(s.INVALID_ARGUMENT,[e,"newPayload"]);t=e;var o=0,i=!1,r=!1;Object.defineProperties(this,{payloadString:{enumerable:!0,get:function(){return"string"==typeof t?t:_(t,0,t.length)}},payloadBytes:{enumerable:!0,get:function(){if("string"==typeof t){var e=new ArrayBuffer(v(t)),n=new Uint8Array(e);return g(t,n,0),n}return t}},destinationName:{enumerable:!0,get:function(){return n},set:function(e){if("string"!=typeof e)throw new Error(a(s.INVALID_ARGUMENT,[e,"newDestinationName"]));n=e}},qos:{enumerable:!0,get:function(){return o},set:function(e){if(0!==e&&1!==e&&2!==e)throw new Error("Invalid argument:"+e);o=e}},retained:{enumerable:!0,get:function(){return i},set:function(e){if("boolean"!=typeof e)throw new Error(a(s.INVALID_ARGUMENT,[e,"newRetained"]));i=e}},topic:{enumerable:!0,get:function(){return n},set:function(e){n=e}},duplicate:{enumerable:!0,get:function(){return r},set:function(e){r=e}}})};return{Client:function(e,t,n,o){var r;if("string"!=typeof e)throw new Error(a(s.INVALID_TYPE,[typeof e,"host"]));if(2==arguments.length){o=t;var c=(r=e).match(/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/);if(!c)throw new Error(a(s.INVALID_ARGUMENT,[e,"host"]));e=c[4]||c[2],t=parseInt(c[7]),n=c[8]}else{if(3==arguments.length&&(o=n,n="/mqtt"),"number"!=typeof t||t<0)throw new Error(a(s.INVALID_TYPE,[typeof t,"port"]));if("string"!=typeof n)throw new Error(a(s.INVALID_TYPE,[typeof n,"path"]));var u=-1!==e.indexOf(":")&&"["!==e.slice(0,1)&&"]"!==e.slice(-1);r="ws://"+(u?"["+e+"]":e)+":"+t+n}for(var l=0,h=0;h<o.length;h++){var f=o.charCodeAt(h);55296<=f&&f<=56319&&h++,l++}if("string"!=typeof o||l>65535)throw new Error(a(s.INVALID_ARGUMENT,[o,"clientId"]));var p=new E(r,e,t,n,o);Object.defineProperties(this,{host:{get:function(){return e},set:function(){throw new Error(a(s.UNSUPPORTED_OPERATION))}},port:{get:function(){return t},set:function(){throw new Error(a(s.UNSUPPORTED_OPERATION))}},path:{get:function(){return n},set:function(){throw new Error(a(s.UNSUPPORTED_OPERATION))}},uri:{get:function(){return r},set:function(){throw new Error(a(s.UNSUPPORTED_OPERATION))}},clientId:{get:function(){return p.clientId},set:function(){throw new Error(a(s.UNSUPPORTED_OPERATION))}},onConnected:{get:function(){return p.onConnected},set:function(e){if("function"!=typeof e)throw new Error(a(s.INVALID_TYPE,[typeof e,"onConnected"]));p.onConnected=e}},disconnectedPublishing:{get:function(){return p.disconnectedPublishing},set:function(e){p.disconnectedPublishing=e}},disconnectedBufferSize:{get:function(){return p.disconnectedBufferSize},set:function(e){p.disconnectedBufferSize=e}},onConnectionLost:{get:function(){return p.onConnectionLost},set:function(e){if("function"!=typeof e)throw new Error(a(s.INVALID_TYPE,[typeof e,"onConnectionLost"]));p.onConnectionLost=e}},onMessageDelivered:{get:function(){return p.onMessageDelivered},set:function(e){if("function"!=typeof e)throw new Error(a(s.INVALID_TYPE,[typeof e,"onMessageDelivered"]));p.onMessageDelivered=e}},onMessageArrived:{get:function(){return p.onMessageArrived},set:function(e){if("function"!=typeof e)throw new Error(a(s.INVALID_TYPE,[typeof e,"onMessageArrived"]));p.onMessageArrived=e}},trace:{get:function(){return p.traceFunction},set:function(e){if("function"!=typeof e)throw new Error(a(s.INVALID_TYPE,[typeof e,"onTrace"]));p.traceFunction=e}}}),this.connect=function(e){if(i(e=e||{},{timeout:"number",userName:"string",password:"string",willMessage:"object",keepAliveInterval:"number",cleanSession:"boolean",useSSL:"boolean",invocationContext:"object",onSuccess:"function",onFailure:"function",hosts:"object",ports:"object",reconnect:"boolean",mqttVersion:"number",mqttVersionExplicit:"boolean",uris:"object"}),void 0===e.keepAliveInterval&&(e.keepAliveInterval=60),e.mqttVersion>4||e.mqttVersion<3)throw new Error(a(s.INVALID_ARGUMENT,[e.mqttVersion,"connectOptions.mqttVersion"]));if(void 0===e.mqttVersion?(e.mqttVersionExplicit=!1,e.mqttVersion=4):e.mqttVersionExplicit=!0,void 0!==e.password&&void 0===e.userName)throw new Error(a(s.INVALID_ARGUMENT,[e.password,"connectOptions.password"]));if(e.willMessage){if(!(e.willMessage instanceof w))throw new Error(a(s.INVALID_TYPE,[e.willMessage,"connectOptions.willMessage"]));if(e.willMessage.stringPayload=null,void 0===e.willMessage.destinationName)throw new Error(a(s.INVALID_TYPE,[typeof e.willMessage.destinationName,"connectOptions.willMessage.destinationName"]))}if(void 0===e.cleanSession&&(e.cleanSession=!0),e.hosts){if(!(e.hosts instanceof Array))throw new Error(a(s.INVALID_ARGUMENT,[e.hosts,"connectOptions.hosts"]));if(e.hosts.length<1)throw new Error(a(s.INVALID_ARGUMENT,[e.hosts,"connectOptions.hosts"]));for(var t=!1,o=0;o<e.hosts.length;o++){if("string"!=typeof e.hosts[o])throw new Error(a(s.INVALID_TYPE,[typeof e.hosts[o],"connectOptions.hosts["+o+"]"]));if(/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/.test(e.hosts[o])){if(0===o)t=!0;else if(!t)throw new Error(a(s.INVALID_ARGUMENT,[e.hosts[o],"connectOptions.hosts["+o+"]"]))}else if(t)throw new Error(a(s.INVALID_ARGUMENT,[e.hosts[o],"connectOptions.hosts["+o+"]"]))}if(t)e.uris=e.hosts;else{if(!e.ports)throw new Error(a(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));if(!(e.ports instanceof Array))throw new Error(a(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));if(e.hosts.length!==e.ports.length)throw new Error(a(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));for(e.uris=[],o=0;o<e.hosts.length;o++){if("number"!=typeof e.ports[o]||e.ports[o]<0)throw new Error(a(s.INVALID_TYPE,[typeof e.ports[o],"connectOptions.ports["+o+"]"]));var c=e.hosts[o],u=e.ports[o],l=-1!==c.indexOf(":");r="ws://"+(l?"["+c+"]":c)+":"+u+n,e.uris.push(r)}}}p.connect(e)},this.subscribe=function(e,t){if("string"!=typeof e&&e.constructor!==Array)throw new Error("Invalid argument:"+e);if(i(t=t||{},{qos:"number",invocationContext:"object",onSuccess:"function",onFailure:"function",timeout:"number"}),t.timeout&&!t.onFailure)throw new Error("subscribeOptions.timeout specified with no onFailure callback.");if(void 0!==t.qos&&0!==t.qos&&1!==t.qos&&2!==t.qos)throw new Error(a(s.INVALID_ARGUMENT,[t.qos,"subscribeOptions.qos"]));p.subscribe(e,t)},this.unsubscribe=function(e,t){if("string"!=typeof e&&e.constructor!==Array)throw new Error("Invalid argument:"+e);if(i(t=t||{},{invocationContext:"object",onSuccess:"function",onFailure:"function",timeout:"number"}),t.timeout&&!t.onFailure)throw new Error("unsubscribeOptions.timeout specified with no onFailure callback.");p.unsubscribe(e,t)},this.send=function(e,t,n,o){var i;if(0===arguments.length)throw new Error("Invalid argument.length");if(1==arguments.length){if(!(e instanceof w)&&"string"!=typeof e)throw new Error("Invalid argument:"+typeof e);if(void 0===(i=e).destinationName)throw new Error(a(s.INVALID_ARGUMENT,[i.destinationName,"Message.destinationName"]));p.send(i)}else(i=new w(t)).destinationName=e,arguments.length>=3&&(i.qos=n),arguments.length>=4&&(i.retained=o),p.send(i)},this.publish=function(e,t,n,o){var i;if(0===arguments.length)throw new Error("Invalid argument.length");if(1==arguments.length){if(!(e instanceof w)&&"string"!=typeof e)throw new Error("Invalid argument:"+typeof e);if(void 0===(i=e).destinationName)throw new Error(a(s.INVALID_ARGUMENT,[i.destinationName,"Message.destinationName"]));p.send(i)}else(i=new w(t)).destinationName=e,arguments.length>=3&&(i.qos=n),arguments.length>=4&&(i.retained=o),p.send(i)},this.disconnect=function(){p.disconnect()},this.getTraceLog=function(){return p.getTraceLog()},this.startTrace=function(){p.startTrace()},this.stopTrace=function(){p.stopTrace()},this.isConnected=function(){return p.connected}},Message:w}}(void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},e.exports=n()}).call(this,n(1))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,