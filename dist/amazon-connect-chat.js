!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r;!function(){"use strict";var i={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function o(e){return function(e,t){var n,r,s,a,c,u,l,h,p,f=1,d=e.length,g="";for(r=0;r<d;r++)if("string"==typeof e[r])g+=e[r];else if("object"==typeof e[r]){if((a=e[r]).keys)for(n=t[f],s=0;s<a.keys.length;s++){if(null==n)throw new Error(o('[sprintf] Cannot access property "%s" of undefined value "%s"',a.keys[s],a.keys[s-1]));n=n[a.keys[s]]}else n=a.param_no?t[a.param_no]:t[f++];if(i.not_type.test(a.type)&&i.not_primitive.test(a.type)&&n instanceof Function&&(n=n()),i.numeric_arg.test(a.type)&&"number"!=typeof n&&isNaN(n))throw new TypeError(o("[sprintf] expecting number but found %T",n));switch(i.number.test(a.type)&&(h=n>=0),a.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,a.width?parseInt(a.width):0);break;case"e":n=a.precision?parseFloat(n).toExponential(a.precision):parseFloat(n).toExponential();break;case"f":n=a.precision?parseFloat(n).toFixed(a.precision):parseFloat(n);break;case"g":n=a.precision?String(Number(n.toPrecision(a.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=a.precision?n.substring(0,a.precision):n;break;case"t":n=String(!!n),n=a.precision?n.substring(0,a.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=a.precision?n.substring(0,a.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=a.precision?n.substring(0,a.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}i.json.test(a.type)?g+=n:(!i.number.test(a.type)||h&&!a.sign?p="":(p=h?"+":"-",n=n.toString().replace(i.sign,"")),u=a.pad_char?"0"===a.pad_char?"0":a.pad_char.charAt(1):" ",l=a.width-(p+n).length,c=a.width&&l>0?u.repeat(l):"",g+=a.align?p+n+c:"0"===u?p+c+n:c+p+n)}return g}(function(e){if(a[e])return a[e];var t,n=e,r=[],o=0;for(;n;){if(null!==(t=i.text.exec(n)))r.push(t[0]);else if(null!==(t=i.modulo.exec(n)))r.push("%");else{if(null===(t=i.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){o|=1;var s=[],c=t[2],u=[];if(null===(u=i.key.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(s.push(u[1]);""!==(c=c.substring(u[0].length));)if(null!==(u=i.key_access.exec(c)))s.push(u[1]);else{if(null===(u=i.index_access.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");s.push(u[1])}t[2]=s}else o|=2;if(3===o)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");r.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return a[e]=r}(e),arguments)}function s(e,t){return o.apply(null,[e].concat(t||[]))}var a=Object.create(null);t.sprintf=o,t.vsprintf=s,"undefined"!=typeof window&&(window.sprintf=o,window.vsprintf=s,void 0===(r=function(){return{sprintf:o,vsprintf:s}}.call(t,n,t,e))||(e.exports=r))}()},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}function a(e){var t="function"==typeof Map?new Map:void 0;return(a=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return c(e,arguments,l(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),u(r,e)})(e)}function c(e,t,n){return(c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&u(i,n.prototype),i}).apply(null,arguments)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var h=function(e){function t(e){var n;return i(this,t),(n=o(this,l(t).call(this,e))).name="ValueError",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,e),t}(a(Error)),p=function(e){function t(e){var n;return i(this,t),(n=o(this,l(t).call(this,e))).name="UnImplementedMethod",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,e),t}(a(Error)),f=function(e){function t(e,n){var r;return i(this,t),(r=o(this,l(t).call(this,e))).name="IllegalArgument",r.argument=n,console.log("EXCEPTION: "+r.name+" MESSAGE: "+r.message),r}return s(t,e),t}(a(Error)),d=function(e){function t(e){var n;return i(this,t),(n=o(this,l(t).call(this,e))).name="IllegalState",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return s(t,e),t}(a(Error)),g=(a(Error),function(e,t,n){var r=new XMLHttpRequest;r.open(e.method||"GET",e.url),e.headers&&Object.keys(e.headers).forEach((function(t){r.setRequestHeader(t,e.headers[t])})),r.onload=function(){r.status>=200&&r.status<300?t(r):n(r)},r.onerror=function(){return n(r)},r.send(e.body)});function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var v=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"update",value:function(e){var t=e||{};this.region=t.region||this.region,this.endpointOverride=t.endpoint||this.endpointOverride,this.reconnect=!1!==t.reconnect}},{key:"getRegion",value:function(){return this.region}},{key:"getEndpointOverride",value:function(){return this.endpointOverride}}])&&m(t.prototype,n),r&&m(t,r),e}()),y="/contact/chat/participant/connection-details",b="post",w={"us-west-2":{invokeUrl:"https://eap1w93j0k.execute-api.us-west-2.amazonaws.com/prod"},"us-east-1":{invokeUrl:"https://4agcjusx3k.execute-api.us-east-1.amazonaws.com/prod"},"ap-southeast-2":{invokeUrl:"https://v4u8oq0cve.execute-api.ap-southeast-2.amazonaws.com/prod"},"ap-northeast-1":{invokeUrl:"https://3fidunfyz7.execute-api.ap-northeast-1.amazonaws.com/prod"},"eu-central-1":{invokeUrl:"https://1gynaarm3e.execute-api.eu-central-1.amazonaws.com/prod"}},_=30,S=60,E={AGENT:"AGENT",CUSTOMER:"CUSTOMER"},C="INCOMING_MESSAGE",k="INCOMING_TYPING",I="CONNECTION_ESTABLISHED",T="CONNECTION_LOST",A="CONNECTION_BROKEN",R={textPlain:"text/plain",connectionAcknowledged:"application/vnd.amazon.connect.event.connection.acknowledged",typing:"application/vnd.amazonaws.connect.event.typing",participantJoined:"application/vnd.amazonaws.connect.event.participant.joined",participantLeft:"application/vnd.amazonaws.connect.event.participant.left",transferSucceeded:"application/vnd.amazonaws.connect.event.transfer.succeeded",transferFailed:"application/vnd.amazonaws.connect.event.transfer.failed",chatEnded:"application/vnd.amazonaws.connect.event.chat.ended"},x=15,P="ASCENDING",O="BACKWARD",N="NULL",L="CLIENT_LOGGER",M="DEBUG",D="us-west-2",q={interval:3e3,maxRetries:5},U={interval:3e3,maxRetries:5},j=n(1);function B(e){return(B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var F={assertTrue:function(e,t){if(!e)throw new h(t)},assertNotNull:function(e,t){return F.assertTrue(null!==e&&void 0!==B(e),Object(j.sprintf)("%s must be provided",t||"A value")),e},now:function(){return(new Date).getTime()},isString:function(e){return"string"==typeof e},randomId:function(){return Object(j.sprintf)("%s-%s",F.now(),Math.random().toString(36).slice(2))},assertIsNonEmptyString:function(e,t){if(!e||"string"!=typeof e)throw new f(t+" is not a non-empty string!")},assertIsList:function(e,t){if(!Array.isArray(e))throw new f(t+" is not an array")},assertIsEnum:function(e,t,n){var r;for(r=0;r<t.length;r++)if(t[r]===e)return;throw new f(n+" passed is not valid. Allowed values are: "+t)},makeEnum:function(e){var t={};return e.forEach((function(e){var n=e.replace(/\.?([a-z]+)_?/g,(function(e,t){return t.toUpperCase()+"_"})).replace(/_$/,"");t[n]=e})),t},contains:function(e,t){return e instanceof Array?null!==F.find(e,(function(e){return e===t})):t in e},find:function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return e[n];return null},containsValue:function(e,t){return e instanceof Array?null!==F.find(e,(function(e){return e===t})):null!==F.find(F.values(e),(function(e){return e===t}))},isFunction:function(e){return!!(e&&e.constructor&&e.call&&e.apply)},values:function(e){var t=[];for(var n in F.assertNotNull(e,"map"),e)t.push(e[n]);return t},isObject:function(e){return!("object"!==B(e)||null===e)},assertIsObject:function(e,t){if(!F.isObject(e))throw new f(t+" is not an object!")},delay:function(e){return new Promise((function(t){return setTimeout(t,e)}))},asyncWhileInterval:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,o=new Date;return t(r)?e(r).catch((function(i){var s=Math.max(0,n-(new Date).valueOf()+o.valueOf());return F.delay(s).then((function(){return F.asyncWhileInterval(e,t,n,r+1,i)}))})):Promise.reject(i||new Error("async while aborted"))}},H=F;function z(e){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function V(e,t){return!t||"object"!==z(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function W(e){return(W=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function G(e,t){return(G=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function K(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function X(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Y(e,t,n){return t&&X(e.prototype,t),n&&X(e,n),e}var J=function(){function e(){K(this,e)}return Y(e,[{key:"debug",value:function(e){}},{key:"info",value:function(e){}},{key:"warn",value:function(e){}},{key:"error",value:function(e){}}]),e}(),Q={DEBUG:10,INFO:20,WARN:30,ERROR:40},$=function(){function e(){K(this,e),this.updateLoggerConfig(),this.consoleLoggerWrapper=te()}return Y(e,[{key:"writeToClientLogger",value:function(e,t){if(this.hasClientLogger())switch(e){case Q.DEBUG:return this._clientLogger.debug(t);case Q.INFO:return this._clientLogger.info(t);case Q.WARN:return this._clientLogger.warn(t);case Q.ERROR:return this._clientLogger.error(t)}}},{key:"isLevelEnabled",value:function(e){return e>=this._level}},{key:"hasClientLogger",value:function(){return null!==this._clientLogger}},{key:"getLogger",value:function(e){var t=e.prefix||"";return this._logsDestination===M?this.consoleLoggerWrapper:new ee(t)}},{key:"updateLoggerConfig",value:function(e){var t=e||{};this._level=t.level||Q.INFO,this._clientLogger=t.logger||null,this._logsDestination=N,t.debug&&(this._logsDestination=M),t.logger&&(this._logsDestination=L)}}]),e}(),Z=function(){function e(){K(this,e)}return Y(e,[{key:"debug",value:function(){}},{key:"info",value:function(){}},{key:"warn",value:function(){}},{key:"error",value:function(){}}]),e}(),ee=function(e){function t(e){var n;return K(this,t),(n=V(this,W(t).call(this))).prefix=e||"",n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&G(e,t)}(t,e),Y(t,[{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(Q.DEBUG,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(Q.INFO,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(Q.WARN,t)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(Q.ERROR,t)}},{key:"_shouldLog",value:function(e){return ne.hasClientLogger()&&ne.isLevelEnabled(e)}},{key:"_writeToClientLogger",value:function(e,t){ne.writeToClientLogger(e,t)}},{key:"_log",value:function(e,t){if(this._shouldLog(e)){var n=this._convertToSingleStatement(t);this._writeToClientLogger(e,n)}}},{key:"_convertToSingleStatement",value:function(e){var t="";this.prefix&&(t+=this.prefix+" ");for(var n=0;n<e.length;n++){var r=e[n];t+=this._convertToString(r)+" "}return t}},{key:"_convertToString",value:function(e){try{if(!e)return"";if(H.isString(e))return e;if(H.isObject(e)&&H.isFunction(e.toString)){var t=e.toString();if("[object Object]"!==t)return t}return JSON.stringify(e)}catch(t){return console.error("Error while converting argument to string",e,t),""}}}]),t}(Z),te=function(){var e=new Z;return e.debug=console.debug.bind(window.console),e.info=console.info.bind(window.console),e.warn=console.warn.bind(window.console),e.error=console.error.bind(window.console),e},ne=new $;n(7);function re(e){return(re="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ie(e,t){return!t||"object"!==re(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function oe(e){return(oe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function se(e,t){return(se=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ae(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ce(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ue(e,t,n){return t&&ce(e.prototype,t),n&&ce(e,n),e}var le=function(){function e(){ae(this,e),this.clientCache={}}return ue(e,[{key:"getCachedClient",value:function(e){var t=Object.assign({},e),n=e.region||v.getRegion()||D;if(t.region=n,this.clientCache[n])return this.clientCache[n];var r=this._createAwsClient(t);return this.clientCache[n]=r,r}},{key:"_createAwsClient",value:function(e){var t=e.region,n=v.getEndpointOverride(),r=w[t];return n&&(r.invokeUrl=n),new he({endpoint:r.invokeUrl,region:t})}}]),e}(),he=function(e){function t(e){var n;ae(this,t),n=ie(this,oe(t).call(this));var r=new AWS.Credentials("",""),i=new AWS.Config({region:e.region,endpoint:e.endpoint,credentials:r});return n.chatClient=new AWS.ConnectParticipant(i),n.callHttpClient=g,n.invokeUrl=e.endpoint,n.logger=ne.getLogger({prefix:"ChatClient"}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&se(e,t)}(t,e),ue(t,[{key:"createParticipantConnection",value:function(e,t){var n=this,r={Type:t,ParticipantToken:e},i=n.chatClient.createParticipantConnection(r);return n._sendRequest(i).then((function(e){return n.logger.info("successfully create connection request"),e})).catch((function(e){return n.logger.error("error when creating connection request"),Promise.reject(e)}))}},{key:"disconnectParticipant",value:function(e){var t=this,n={ConnectionToken:e},r=t.chatClient.disconnectParticipant(n);return t._sendRequest(r).then((function(e){return t.logger.info("successfully disconnect participant"),e})).catch((function(e){return t.logger.error("error when disconnecting participant"),Promise.reject(e)}))}},{key:"getTranscript",value:function(e,t){var n=this,r={MaxResults:t.maxResults,NextToken:t.nextToken,ScanDirection:t.scanDirection,SortOrder:t.sortOrder,StartPosition:{Id:t.startPosition.id,AbsoluteTime:t.startPosition.absoluteTime,MostRecent:t.startPosition.mostRecent},ConnectionToken:e};t.contactId&&(r.ContactId=t.contactId);var i=n.chatClient.getTranscript(r);return n._sendRequest(i).then((function(e){return n.logger.info("successfully get transcript"),e})).catch((function(e){return n.logger.error("error when getting transcript"),Promise.reject(e)}))}},{key:"sendMessage",value:function(e,t,n){var r=this,i={Content:t,ContentType:n,ConnectionToken:e},o=r.chatClient.sendMessage(i);return r._sendRequest(o).then((function(e){return r.logger.info("successfully send message"),e})).catch((function(e){return r.logger.error("error when sending message"),Promise.reject(e)}))}},{key:"sendEvent",value:function(e,t,n){var r=this,i={ConnectionToken:e,ContentType:t,Content:n},o=r.chatClient.sendEvent(i);return r._sendRequest(o).then((function(e){return r.logger.info("successfully send event"),e})).catch((function(e){return r.logger.error("error when sending event"),Promise.reject(e)}))}},{key:"_sendRequest",value:function(e){return new Promise((function(t,n){e.on("success",(function(e){t(e)})).on("error",(function(e){n(e)})).send()}))}},{key:"createConnectionDetails",value:function(e){var t={method:b,headers:{},url:this.invokeUrl+y,body:{}};return t.headers["x-amzn-connect-participant-token"]=e,this._callHttpClient(t)}},{key:"_callHttpClient",value:function(e){var t=this;return e.headers=Object.assign({"Content-Type":"application/json",Accept:"application/json"},e.headers),e.body=JSON.stringify(e.body),new Promise((function(n,r){t.callHttpClient(e,(function(e){var t={};t.data=JSON.parse(e.responseText),n(t)}),(function(e){var n={};n.statusText=e.statusText;try{n.error=JSON.parse(e.responseText)}catch(e){t.logger.warn("invalid json error from server"),n.error=null}r(n)}))}))}}]),t}(function(){function e(){ae(this,e)}return ue(e,[{key:"sendMessage",value:function(e,t,n){throw new p("sendTextMessage in ChatClient")}},{key:"disconnectParticipant",value:function(e){throw new p("disconnectParticipant in ChatClient")}},{key:"sendEvent",value:function(e,t,n){throw new p("sendEvent in ChatClient")}},{key:"createConnectionDetails",value:function(e){throw new p("reconnectChat in ChatClient")}},{key:"createParticipantConnection",value:function(e,t){throw new p("createConnection in ChatClient")}}]),e}()),pe=new le;function fe(e){return(fe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function de(e,t){return!t||"object"!==fe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ge(e){return(ge=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function me(e,t){return(me=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ve(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ye(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function be(e,t,n){return t&&ye(e.prototype,t),n&&ye(e,n),e}var we=function(e){function t(){return ve(this,t),de(this,ge(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&me(e,t)}(t,e),be(t,[{key:"validateChatDetails",value:function(e){H.assertIsObject(e,"chatDetails"),H.assertIsNonEmptyString(e.contactId,"chatDetails.contactId"),H.assertIsNonEmptyString(e.participantId,"chatDetails.participantId"),e.connectionDetails?(H.assertIsObject(e.connectionDetails,"chatDetails.connectionDetails"),H.assertIsNonEmptyString(e.connectionDetails.PreSignedConnectionUrl,"chatDetails.connectionDetails.PreSignedConnectionUrl"),H.assertIsNonEmptyString(e.connectionDetails.ConnectionId,"chatDetails.connectionDetails.ConnectionId"),H.assertIsNonEmptyString(e.connectionDetails.connectionToken,"chatDetails.connectionDetails.connectionToken")):H.assertIsNonEmptyString(e.participantToken,"chatDetails.participantToken")}},{key:"validateInitiateChatResponse",value:function(){return!0}}]),t}(function(){function e(){ve(this,e)}return be(e,[{key:"validateNewControllerDetails",value:function(e){return!0}},{key:"validateSendMessage",value:function(e){if(!H.isString(e.message))throw new f(e.message+"is not a valid message");this.validateContentType(e.contentType)}},{key:"validateContentType",value:function(e){H.assertIsEnum(e,Object.values(R),"contentType")}},{key:"validateConnectChat",value:function(e){return!0}},{key:"validateLogger",value:function(e){H.assertIsObject(e,"logger"),["debug","info","warn","error"].forEach((function(t){if(!H.isFunction(e[t]))throw new f(t+" should be a valid function on the passed logger object!")}))}},{key:"validateSendEvent",value:function(e){this.validateContentType(e.contentType)}},{key:"validateGetMessages",value:function(e){return!0}}]),e}());function _e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Se={NeverStarted:"NeverStarted",Starting:"Starting",Connected:"Connected",ConnectionLost:"ConnectionLost",Ended:"Ended"},Ee="ConnectionLost",Ce="ConnectionGained",ke="Ended",Ie="IncomingMessage",Te="IOT",Ae="LPC",Re="WEBSOCKET",xe="CONNECTION_CREDENTIALS",Pe=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.connectionDetailsProvider=t,this.isStarted=!1}var t,n,r;return t=e,(n=[{key:"startConnectionTokenPolling",value:function(){var e=this;this.interval=setInterval((function(){e.connectionDetailsProvider.fetchConnectionToken()}),432e5)}},{key:"start",value:function(){this.isStarted||(this.isStarted=!0,this.startConnectionTokenPolling())}},{key:"end",value:function(){clearInterval(this.interval)}},{key:"getConnectionToken",value:function(){return this.connectionDetailsProvider.connectionToken}}])&&_e(t.prototype,n),r&&_e(t,r),e}(),Oe=function(e,t,n){this.subMap=e,this.id=H.randomId(),this.eventName=t,this.f=n};Oe.prototype.unsubscribe=function(){this.subMap.unsubscribe(this.eventName,this.id)};var Ne=function(){this.subIdMap={},this.subEventNameMap={}};Ne.prototype.subscribe=function(e,t){var n=new Oe(this,e,t);this.subIdMap[n.id]=n;var r=this.subEventNameMap[e]||[];return r.push(n),this.subEventNameMap[e]=r,function(){return n.unsubscribe()}},Ne.prototype.unsubscribe=function(e,t){H.contains(this.subEventNameMap,e)&&(this.subEventNameMap[e]=this.subEventNameMap[e].filter((function(e){return e.id!==t})),this.subEventNameMap[e].length<1&&delete this.subEventNameMap[e]),H.contains(this.subIdMap,t)&&delete this.subIdMap[t]},Ne.prototype.getAllSubscriptions=function(){return H.values(this.subEventNameMap).reduce((function(e,t){return e.concat(t)}),[])},Ne.prototype.getSubscriptions=function(e){return this.subEventNameMap[e]||[]};var Le=function(e){var t=e||{};this.subMap=new Ne,this.logEvents=t.logEvents||!1};function Me(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Le.prototype.subscribe=function(e,t){return H.assertNotNull(e,"eventName"),H.assertNotNull(t,"f"),H.assertTrue(H.isFunction(t),"f must be a function"),this.subMap.subscribe(e,t)},Le.prototype.subscribeAll=function(e){return H.assertNotNull(e,"f"),H.assertTrue(H.isFunction(e),"f must be a function"),this.subMap.subscribe("<<all>>",e)},Le.prototype.getSubscriptions=function(e){return this.subMap.getSubscriptions(e)},Le.prototype.trigger=function(e,t){H.assertNotNull(e,"eventName");var n=this,r=this.subMap.getSubscriptions("<<all>>"),i=this.subMap.getSubscriptions(e);r.concat(i).forEach((function(r){try{r.f(t||null,e,n)}catch(e){}}))},Le.prototype.triggerAsync=function(e,t){var n=this;setTimeout((function(){return n.trigger(e,t)}),0)},Le.prototype.bridge=function(){var e=this;return function(t,n){e.trigger(n,t)}},Le.prototype.unsubscribeAll=function(){this.subMap.getAllSubscriptions().forEach((function(e){e.unsubscribe()}))};var De=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.chatClient=r,this.participantToken=n||null,this.connectionDetails=t||null,this.connectionToken=null,this.connectionType=null,this.firstCall=!0}var t,n,r;return t=e,(n=[{key:"init",value:function(){var e=this;return this.participantToken?this._fetchConnectionDetails().then((function(){return e.connectionDetails})):this.connectionDetails?Promise.resolve().then((function(){return e._handlePresetConnectionDetails(),e.connectionDetails})):Promise.reject("Fatal: Cannot get connection details.")}},{key:"fetchConnectionDetails",value:function(){var e=this;return this.firstCall?(this.firstCall=!1,Promise.resolve(this.connectionDetails)):this.participantToken?this._fetchConnectionDetails().then((function(){return e.connectionDetails})):Promise.reject("Fatal: Cannot use static connection details more than once.")}},{key:"fetchConnectionToken",value:function(){var e=this;return this.firstCall?(this.firstCall=!1,Promise.resolve(this.connectionToken)):this.participantToken?this._fetchConnectionDetails().then((function(){return e.connectionToken})):Promise.reject("Fatal: Cannot use static connection details more than once.")}},{key:"_handlePresetConnectionDetails",value:function(){this.connectionType=Te,this.connectionToken=this.connectionDetails.connectionToken,this.connectionDetails={connectionId:this.connectionDetails.ConnectionId,preSignedConnectionUrl:this.connectionDetails.PreSignedConnectionUrl}}},{key:"_handleCreateParticipantConnectionResponse",value:function(e){this.connectionType=Ae,this.connectionToken=e.ConnectionCredentials.ConnectionToken,this.connectionDetails={connectionId:null,preSignedConnectionUrl:e.Websocket.Url}}},{key:"_handleCreateConnectionDetailsResponse",value:function(e){e.PreSignedConnectionUrl?this.connectionType=e.PreSignedConnectionUrl.includes(".iot.")?Te:Ae:this.connectionType=e.connectionId?Te:Ae,this.connectionToken=e.ParticipantCredentials.ConnectionAuthenticationToken,this.connectionDetails={connectionId:e.ConnectionId,preSignedConnectionUrl:e.PreSignedConnectionUrl}}},{key:"_fetchConnectionDetails",value:function(){var e=this;return this.chatClient.createParticipantConnection(this.participantToken,[Re,xe]).then((function(t){return null!==t.data.Websocket.Url&&t.data.Websocket.Url.includes(".iot.")?e.chatClient.createConnectionDetails(e.participantToken).then((function(t){return e._handleCreateConnectionDetailsResponse(t.data)})).catch((function(e){return Promise.reject({reason:"Failed to fetch connectionDetails with createConnectionDetails",_debug:e})})):e._handleCreateParticipantConnectionResponse(t.data)})).catch((function(e){return Promise.reject({reason:"Failed to fetch connectionDetails with createParticipantConnection",_debug:e})}))}}])&&Me(t.prototype,n),r&&Me(t,r),e}(),qe=n(4),Ue=n.n(qe);function je(e){return(je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Be(e){return(Be=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Fe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function He(e,t){return(He=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ze(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ve(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function We(e,t,n){return t&&Ve(e.prototype,t),n&&Ve(e,n),e}var Ge=function(){function e(){ze(this,e)}return We(e,[{key:"connect",value:function(e){throw new p("connect in IotClient")}},{key:"disconnect",value:function(){throw new p("connect in IotClient")}},{key:"subscribe",value:function(e,t){throw new p("connect in IotClient")}},{key:"unsubscribe",value:function(e,t){throw new p("connect in IotClient")}}]),e}(),Ke=Object.freeze({NeverConnected:"NeverConnected",Connecting:"Connecting",Connected:"Connected",Disconnected:"Disconnected"}),Xe=Object.freeze({MESSAGE:"Message",DISCONNECTED:"Disconnected"}),Ye=function(e){function t(e){var n;ze(this,t),(n=function(e,t){return!t||"object"!==je(t)&&"function"!=typeof t?Fe(e):t}(this,Be(t).call(this))).preSignedUrl=e.preSignedUrl,n.connectionId=e.connectionId,n.status=Ke.NeverConnected,n.pahoClient=new Ue.a.Client(n.preSignedUrl,n.connectionId);var r=Fe(n);return n.pahoClient.onMessageArrived=function(e){r._messageArrivedCallback(e)},n.pahoClient.onConnectionLost=function(e){r._connectionLostCallBack(e)},n.pahoClient.onMessageArrived=function(e){r._messageArrivedCallback(e)},n.callback=e.callback,n.neverConnected=!0,n._subscribedTopics=[],n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&He(e,t)}(t,e),We(t,[{key:"connect",value:function(e){var t=this;return new Promise((function(n,r){e.onSuccess=function(e){t.neverConnected=!1,t._onConnectSuccess(e),n({})},e.onFailure=function(e){var n={reason:e};t._onConnectFailure(n),r(n)},t.status=Ke.Connecting,t.pahoClient.connect(e)}))}},{key:"_connectionLostCallBack",value:function(e){console.warn("Connection lost: ",e);var t={reason:e};this._subscribedTopics=[],this.status!==Ke.Disconnected&&(this.status=Ke.Disconnected,this.callback(Xe.DISCONNECTED,t))}},{key:"_messageArrivedCallback",value:function(e){var t={topic:e.topic,qos:e.qos,payloadString:e.payloadString};this.callback(Xe.MESSAGE,t)}},{key:"_onConnectSuccess",value:function(e){this.status=Ke.Connected}},{key:"_onConnectFailure",value:function(e){this.neverConnected?this.status=Ke.NeverConnected:this.status=Ke.Disconnected}},{key:"disconnect",value:function(){this._subscribedTopics=[],this.status=Ke.Disconnected,this.pahoClient.disconnect()}},{key:"subscribe",value:function(e,t){var n=this;return new Promise((function(r,i){t.onSuccess=function(t){n._subscribeSuccess(e,t);var i={topic:e,qos:t.grantedQos};r(i)},t.onFailure=function(t){i({topic:e,error:t})},n.pahoClient.subscribe(e,t)}))}},{key:"_addToTopics",value:function(e){this._subscribedTopics.indexOf(e)>=0||this._subscribedTopics.push(e)}},{key:"_subscribeSuccess",value:function(e,t){this._addToTopics(e)}},{key:"getSubscribedTopics",value:function(){return this._subscribedTopics.slice(0)}},{key:"unsubscribe",value:function(e,t){var n=this;return new Promise((function(r,i){t.onSuccess=function(t){var i={topic:e,response:t};n._unsubscribeSuccess(e,i),r(i)},t.onFailure=function(t){i({topic:e,error:t})},n.pahoClient.unsubscribe(e,t)}))}},{key:"_unsubscribeSuccess",value:function(e,t){this._subscribedTopics=this._subscribedTopics.filter((function(t){return t!==e}))}},{key:"getStatus",value:function(){return this.status}}]),t}(Ge);function Je(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Qe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $e(e,t,n){return t&&Qe(e.prototype,t),n&&Qe(e,n),e}function Ze(e){return(Ze="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var et=function(){function e(){Je(this,e)}return $e(e,[{key:"onOnline",value:function(){}},{key:"onOffline",value:function(){}},{key:"isOnline",value:function(){return!0}},{key:"whenOnline",value:function(){return Promise.resolve()}}]),e}(),tt=function(){function e(){var t=this;Je(this,e),this.eventBus=new Le,this.onlinePromise=null,window.addEventListener("online",(function(){t.eventBus.trigger("online")})),window.addEventListener("offline",(function(){t.eventBus.trigger("offline")}))}return $e(e,[{key:"onOnline",value:function(e){return this.eventBus.subscribe("online",e)}},{key:"onOffline",value:function(e){return this.eventBus.subscribe("offline",e)}},{key:"isOnline",value:function(){return window.navigator.onLine}},{key:"whenOnline",value:function(){var e=this;return this.isOnline()?Promise.resolve():(this.onlinePromise||(this.onlinePromise=new Promise((function(t){var n=e.onOnline((function(){e.onlinePromise=null,n(),t()}))}))),this.onlinePromise)}}]),e}(),nt="object"===("undefined"==typeof window?"undefined":Ze(window))&&window.navigator&&window.addEventListener?new tt:new et;function rt(e){return(rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function it(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ot(e,t){return!t||"object"!==rt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function st(e,t,n){return(st="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=at(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function at(e){return(at=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ct(e,t){return(ct=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ut=function(e){function t(e,n,r){var i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(i=ot(this,at(t).call(this,n))).logger=ne.getLogger({prefix:"ContactId-"+e+": "}),i.status=Se.NeverStarted,i.eventBus=new Le,i._unsubscribeFunctions=[],i.reconnectConfig=r,i._connectCalledAtleastOnce=!1,i._setNetworkEventHandlers(),i}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ct(e,t)}(t,e),n=t,(r=[{key:"start",value:function(){if(st(at(t.prototype),"start",this).call(this),this.status!==Se.NeverStarted)throw new d("Connection helper started twice!!");return this.status=Se.Starting,this._initiateConnectWithRetry()}},{key:"end",value:function(){st(at(t.prototype),"end",this).call(this),this._handleBrokenConnection({reason:"user action"}),this.iotConnection&&this.iotConnection.disconnect()}},{key:"getStatus",value:function(){return this.status}},{key:"_initIotConnection",value:function(e){this.iotConnection=new Ye({preSignedUrl:e.preSignedConnectionUrl,connectionId:e.connectionId,callback:this._handleIotEvent.bind(this)})}},{key:"_connect",value:function(){var e=this;return this._connectCalledAtleastOnce=!0,this.connectionDetailsProvider.fetchConnectionDetails().then(this._initIotConnection.bind(this)).then((function(){var t={useSSL:!0,keepAliveInterval:_,reconnect:!1,mqttVersion:4,timeout:S};return new Promise((function(n,r){e.iotConnection.connect(t).then((function(t){e._subscribe(n,r,t)})).catch((function(t){e._connectFailed(r,t)}))}))}))}},{key:"_connectFailed",value:function(e,t){e({connectSuccess:!1,reason:"ConnectionToBrokerFailed",details:t})}},{key:"_subscribe",value:function(e,t){var n=this;this.iotConnection.subscribe(this.connectionDetailsProvider.connectionDetails.connectionId,{qos:1}).then((function(t){n._postSubscribe(e,t)})).catch((function(e){n._subscribeFailed(t,e)}))}},{key:"_postSubscribe",value:function(e,t){e({details:t,connectSuccess:!0})}},{key:"_subscribeFailed",value:function(e,t){var n={connectSuccess:!1,details:t,reason:"SubscribtionToTopicFailed"};this.iotConnection.disconnect(),e(n)}},{key:"_handleIotEvent",value:function(e,t){switch(e){case Xe.MESSAGE:this.logger.debug("Received incoming data",t.payloadString);try{var n=JSON.parse(t.payloadString);this.eventBus.trigger(Ie,n)}catch(e){this.logger.error("Wrong message format: ",t.payloadString)}break;case Xe.DISCONNECTED:v.reconnect&&0!==t.reason.errorCode?this._handleLostConnection(t):this._handleBrokenConnection(t)}}},{key:"_initiateConnectWithRetry",value:function(){var e=this;return this._initiateConnectPromise||(this._initiateConnectPromise=H.asyncWhileInterval((function(t){return e.logger.info("Connect - ".concat(t,". try")),e._connect()}),(function(t){return t<e.reconnectConfig.maxRetries&&e._canConnect()}),this.reconnectConfig.interval).then((function(){e.logger.info("Connect - Success"),e._handleGainedConnection()})).catch((function(t){return e.logger.info("Connect - Failed"),nt.isOnline()?(e._handleBrokenConnection(t),e.iotConnection&&e.iotConnection.disconnect()):e.state!==Se.ConnectionLost&&e._handleLostConnection(t),Promise.reject(t)})).finally((function(){e._initiateConnectPromise=null}))),this._initiateConnectPromise}},{key:"_canConnect",value:function(){return nt.isOnline()&&(this.status===Se.ConnectionLost||this.status===Se.Starting)}},{key:"_handleBrokenConnection",value:function(e){this.status!==Se.Ended&&(this.status=Se.Ended,this._unsubscribeFunctions.forEach((function(e){return e()})),this.eventBus.trigger(ke,e))}},{key:"_handleLostConnection",value:function(e){this.status=Se.ConnectionLost,this.eventBus.trigger(Ee,e),nt.isOnline()&&this._initiateConnectWithRetry().catch((function(){}))}},{key:"_handleGainedConnection",value:function(){this.status=Se.Connected,this.eventBus.trigger(Ce,{})}},{key:"_setNetworkEventHandlers",value:function(){var e=this,t=nt.onOnline((function(){e._connectCalledAtleastOnce&&e._canConnect()&&e._initiateConnectWithRetry().catch((function(){}))}));this._unsubscribeFunctions.push(t)}},{key:"onEnded",value:function(e){return this.eventBus.subscribe(ke,e)}},{key:"onConnectionLost",value:function(e){return this.eventBus.subscribe(Ee,e)}},{key:"onConnectionGain",value:function(e){return this.eventBus.subscribe(Ce,e)}},{key:"onMessage",value:function(e){return this.eventBus.subscribe(Ie,e)}}])&&it(n.prototype,r),i&&it(n,i),t}(Pe);function lt(e){return(lt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ht(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function pt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ft(e,t,n){return t&&pt(e.prototype,t),n&&pt(e,n),e}function dt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function gt(e,t,n){return(gt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=mt(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function mt(e){return(mt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function vt(e,t){return(vt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var yt=function(e){function t(e,n,r){var i;return ht(this,t),(i=function(e,t){return!t||"object"!==lt(t)&&"function"!=typeof t?dt(e):t}(this,mt(t).call(this,n))).cleanUpBaseInstance=!r,t.baseInstance||(t.baseInstance=new bt(n,r)),i.initialContactId=e,i.eventBus=new Le,i.subscriptions=[t.baseInstance.onEnded(i.handleEnded.bind(dt(i))),t.baseInstance.onConnectionGain(i.handleConnectionGain.bind(dt(i))),t.baseInstance.onConnectionLost(i.handleConnectionLost.bind(dt(i))),t.baseInstance.onMessage(i.handleMessage.bind(dt(i)))],i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&vt(e,t)}(t,e),ft(t,[{key:"start",value:function(){return gt(mt(t.prototype),"start",this).call(this),t.baseInstance.start()}},{key:"end",value:function(){gt(mt(t.prototype),"end",this).call(this),this.eventBus.unsubscribeAll(),this.subscriptions.forEach((function(e){return e()})),t.baseInstance&&this.cleanUpBaseInstance&&(t.baseInstance.end(),t.baseInstance=null)}},{key:"getStatus",value:function(){return t.baseInstance.getStatus()}},{key:"onEnded",value:function(e){return this.eventBus.subscribe(ke,e)}},{key:"handleEnded",value:function(){this.eventBus.trigger(ke,{})}},{key:"onConnectionGain",value:function(e){return this.eventBus.subscribe(Ce,e)}},{key:"handleConnectionGain",value:function(){this.eventBus.trigger(Ce,{})}},{key:"onConnectionLost",value:function(e){return this.eventBus.subscribe(Ee,e)}},{key:"handleConnectionLost",value:function(){this.eventBus.trigger(Ee,{})}},{key:"onMessage",value:function(e){return this.eventBus.subscribe(Ie,e)}},{key:"handleMessage",value:function(e){e.InitialContactId===this.initialContactId&&this.eventBus.trigger(Ie,e)}}]),t}(Pe);yt.baseInstance=null;var bt=function(){function e(t,n){ht(this,e),this.status=Se.NeverStarted,this.eventBus=new Le,this.logger=ne.getLogger({prefix:"LPC WebSockets: "}),this.initWebsocketManager(n,t)}return ft(e,[{key:"initWebsocketManager",value:function(e,t){this.websocketManager=e||connect.WebSocketManager.create(),this.websocketManager.subscribeTopics(["aws/chat"]),this.subscriptions=[this.websocketManager.onMessage("aws/chat",this.handleMessage.bind(this)),this.websocketManager.onConnectionGain(this.handleConnectionGain.bind(this)),this.websocketManager.onConnectionLost(this.handleConnectionLost.bind(this)),this.websocketManager.onInitFailure(this.handleEnded.bind(this))],e||this.websocketManager.init((function(){return t.fetchConnectionDetails().then((function(e){return{webSocketTransport:{url:e.preSignedConnectionUrl,transportLifeTimeInSeconds:7140}}}))}))}},{key:"end",value:function(){this.websocketManager.closeWebSocket(),this.eventBus.unsubscribeAll(),this.subscriptions.forEach((function(e){return e()}))}},{key:"start",value:function(){return this.status===Se.NeverStarted&&(this.status=Se.Starting),Promise.resolve()}},{key:"onEnded",value:function(e){return this.eventBus.subscribe(ke,e)}},{key:"handleEnded",value:function(){this.status=Se.Ended,this.eventBus.trigger(ke,{})}},{key:"onConnectionGain",value:function(e){return this.eventBus.subscribe(Ce,e)}},{key:"handleConnectionGain",value:function(){this.status=Se.Connected,this.eventBus.trigger(Ce,{})}},{key:"onConnectionLost",value:function(e){return this.eventBus.subscribe(Ee,e)}},{key:"handleConnectionLost",value:function(){this.status=Se.ConnectionLost,this.eventBus.trigger(Ee,{})}},{key:"onMessage",value:function(e){return this.eventBus.subscribe(Ie,e)}},{key:"handleMessage",value:function(e){var t;try{t=JSON.parse(e.content),this.eventBus.trigger(Ie,t)}catch(t){this.logger.error("Wrong message format: ",e)}}}]),e}(),wt=yt;function _t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var St=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"get",value:function(e){var t=e.contactId,n=e.initialContactId,r=e.connectionDetails,i=e.participantToken,o=e.chatClient,s=e.websocketManager,a=e.reconnectConfig,c=new De(r,i,o);return c.init().then((function(){return c.connectionType===Ae?new wt(n,c,s):c.connectionType===Te?new ut(t,c,a):void 0}))}}])&&_t(t.prototype,n),r&&_t(t,r),e}());function Et(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Ct="NeverEstablished",kt="Establishing",It="Established",Tt="Broken",At=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.logger=ne.getLogger({prefix:"ContactId-"+t.chatDetails.contactId+": "}),this.argsValidator=new we,this.pubsub=new Le,this.sessionType=t.sessionType,this.connectionDetails=t.chatDetails.connectionDetails,this.initialContactId=t.chatDetails.initialContactId,this.contactId=t.chatDetails.contactId,this.participantId=t.chatDetails.participantId,this.chatClient=t.chatClient,this.participantToken=t.chatDetails.participantToken,this.websocketManager=t.websocketManager,this._participantDisconnected=!1,this.sessionMetadata={}}var t,n,r;return t=e,(n=[{key:"subscribe",value:function(e,t){this.pubsub.subscribe(e,t),this.logger.info("Subscribed successfully to eventName: ",e)}},{key:"handleRequestSuccess",value:function(e,t,n){var r=this;return function(i){return i.metadata=e,r.logger.debug("".concat(n," successful! Response: "),i," / Request: ",t),i}}},{key:"handleRequestFailure",value:function(e,t,n){var r=this;return function(i){return i.metadata=e,r.logger.debug("".concat(n," failed! Error: "),i," / Request: ",t),Promise.reject(i)}}},{key:"sendMessage",value:function(e){var t=e.metadata||null;this.argsValidator.validateSendMessage(e);var n=this.connectionHelper.getConnectionToken();return this.chatClient.sendMessage(n,e.message,e.contentType).then(this.handleRequestSuccess(t,e,"sendMessage")).catch(this.handleRequestFailure(t,e,"sendMessage"))}},{key:"sendEvent",value:function(e){var t=e.metadata||null;this.argsValidator.validateSendEvent(e);var n=this.connectionHelper.getConnectionToken(),r=e.content||null;return this.chatClient.sendEvent(n,e.contentType,r).then(this.handleRequestSuccess(t,e,"sendEvent")).catch(this.handleRequestFailure(t,e,"sendEvent"))}},{key:"getTranscript",value:function(e){var t=e.metadata||null,n={startPosition:e.startPosition||{},scanDirection:e.scanDirection||O,sortOrder:e.sortOrder||P,maxResults:e.maxResults||x};e.nextToken&&(n.nextToken=e.nextToken),e.contactId&&(n.contactId=e.contactId);var r=this.connectionHelper.getConnectionToken();return this.chatClient.getTranscript(r,n).then(this.handleRequestSuccess(t,n,"getTranscript")).catch(this.handleRequestFailure(t,n,"getTranscript"))}},{key:"connect",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.sessionMetadata=e.metadata||null,this.argsValidator.validateConnectChat(e),St.get({contactId:this.contactId,initialContactId:this.initialContactId,connectionDetails:this.connectionDetails,participantToken:this.participantToken,chatClient:this.chatClient,websocketManager:this.websocketManager,reconnectConfig:this.sessionType===E.AGENT?q:U}).then(this._initConnectionHelper.bind(this)).then(this._onConnectSuccess.bind(this),this._onConnectFailure.bind(this))}},{key:"_initConnectionHelper",value:function(e){return this.connectionHelper=e,this.connectionHelper.onEnded(this._handleEndedConnection.bind(this)),this.connectionHelper.onConnectionLost(this._handleLostConnection.bind(this)),this.connectionHelper.onConnectionGain(this._handleGainedConnection.bind(this)),this.connectionHelper.onMessage(this._handleIncomingMessage.bind(this)),this.connectionHelper.start()}},{key:"_handleEndedConnection",value:function(e){this._forwardChatEvent(A,{data:e,chatDetails:this.getChatDetails()})}},{key:"_handleLostConnection",value:function(e){this._forwardChatEvent(T,{data:e,chatDetails:this.getChatDetails()})}},{key:"_handleGainedConnection",value:function(e){this._forwardChatEvent(I,{data:e,chatDetails:this.getChatDetails()})}},{key:"_handleIncomingMessage",value:function(e){try{var t=e.ContentType===R.typing?k:C;this._forwardChatEvent(t,{data:e,chatDetails:this.getChatDetails()})}catch(t){this.logger.error("Error occured while handling message from Connection. eventData: ",e," Causing exception: ",t)}}},{key:"_forwardChatEvent",value:function(e,t){this.logger.debug("Triggering event for subscribers:",e,t),this.pubsub.triggerAsync(e,t)}},{key:"_onConnectSuccess",value:function(e){this.logger.info("Connect successful!");var t={_debug:e,connectSuccess:!0,connectCalled:!0,metadata:this.sessionMetadata},n=Object.assign({chatDetails:this.getChatDetails()},t);return this.pubsub.triggerAsync(I,n),this._shouldAcknowledgeContact()&&this.sendEvent({contentType:R.connectionAcknowledged}),t}},{key:"_onConnectFailure",value:function(e){var t={_debug:e,connectSuccess:!1,connectCalled:!0,metadata:this.sessionMetadata};return this.logger.error("Connect Failed with data: ",t),Promise.reject(t)}},{key:"_shouldAcknowledgeContact",value:function(){return this.sessionType===E.AGENT}},{key:"breakConnection",value:function(){return this.connectionHelper?this.connectionHelper.end():Promise.resolve()}},{key:"cleanUpOnParticipantDisconnect",value:function(){this.pubsub.unsubscribeAll()}},{key:"disconnectParticipant",value:function(){var e=this,t=this.connectionHelper.getConnectionToken();return this.chatClient.disconnectParticipant(t).then((function(t){return e.logger.info("disconnect participant successful"),e._participantDisconnected=!0,e.cleanUpOnParticipantDisconnect(),e.breakConnection(),t}),(function(t){return e.logger.error("disconnect participant failed with error: ",t),Promise.reject(t)}))}},{key:"getChatDetails",value:function(){return{initialContactId:this.initialContactId,contactId:this.contactId,participantId:this.participantId,participantToken:this.participantToken,connectionDetails:this.connectionDetails}}},{key:"_convertConnectionHelperStatus",value:function(e){switch(e){case Se.NeverStarted:return Ct;case Se.Starting:return kt;case Se.Ended:case Se.ConnectionLost:return Tt;case Se.Connected:return It}this.logger.error("Reached invalid state. Unknown connectionHelperStatus: ",e)}},{key:"getConnectionStatus",value:function(){return this._convertConnectionHelperStatus(this.connectionHelper.getStatus())}}])&&Et(t.prototype,n),r&&Et(t,r),e}();function Rt(e){return(Rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function xt(e,t){return!t||"object"!==Rt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Pt(e){return(Pt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ot(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Nt(e,t)}function Nt(e,t){return(Nt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Lt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Mt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Dt(e,t,n){return t&&Mt(e.prototype,t),n&&Mt(e,n),e}n.d(t,"a",(function(){return Ht}));var qt=function(e){function t(){var e;return Lt(this,t),(e=xt(this,Pt(t).call(this))).argsValidator=new we,e}return Ot(t,e),Dt(t,[{key:"createChatSession",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,i=this._createChatController(e,t,n,r);if(e===E.AGENT)return new jt(i);if(e===E.CUSTOMER)return new Bt(i);throw new f("Unkown value for session type, Allowed values are: "+Object.values(E),e)}},{key:"_createChatController",value:function(e,t,n,r){var i={sessionType:e,chatDetails:this._normalizeChatDetails(t),chatClient:pe.getCachedClient(n),websocketManager:r};return new At(i)}},{key:"_normalizeChatDetails",value:function(e){var t={};if(e.participantToken||e.ParticipantToken)return t.participantId=e.ParticipantId||e.participantId,t.contactId=e.ContactId||e.contactId,t.initialContactId=e.InitialContactId||e.initialContactId||t.contactId,t.participantToken=e.ParticipantToken||e.participantToken,this.argsValidator.validateChatDetails(t),t;if(e.ChatConnectionAttributes&&e.ChatConnectionAttributes.ParticipantCredentials){this.argsValidator.validateInitiateChatResponse(e);var n={};return n.connectionToken=e.ChatConnectionAttributes.ParticipantCredentials.ConnectionAuthenticationToken,n.ConnectionId=e.ChatConnectionAttributes.ConnectionId,n.PreSignedConnectionUrl=e.ChatConnectionAttributes.PreSignedConnectionUrl,t.connectionDetails=n,t.participantId=e.ParticipantId,t.contactId=e.ContactId,t.initialContactId=e.ContactId,t}return this.argsValidator.validateChatDetails(e),e}}]),t}(function(){function e(){Lt(this,e)}return Dt(e,[{key:"createAgentChatController",value:function(e,t){throw new p("createAgentChatController in ChatControllerFactory.")}},{key:"createCustomerChatController",value:function(e,t){throw new p("createCustomerChatController in ChatControllerFactory.")}}]),e}()),Ut=function(){function e(t){Lt(this,e),this.controller=t}return Dt(e,[{key:"onMessage",value:function(e){this.controller.subscribe(C,e)}},{key:"onTyping",value:function(e){this.controller.subscribe(k,e)}},{key:"onConnectionBroken",value:function(e){this.controller.subscribe(A,e)}},{key:"onConnectionEstablished",value:function(e){this.controller.subscribe(I,e)}},{key:"sendMessage",value:function(e){return this.controller.sendMessage(e)}},{key:"connect",value:function(e){return this.controller.connect(e)}},{key:"sendEvent",value:function(e){return this.controller.sendEvent(e)}},{key:"getTranscript",value:function(e){return this.controller.getTranscript(e)}},{key:"getChatDetails",value:function(){return this.controller.getChatDetails()}}]),e}(),jt=function(e){function t(e){return Lt(this,t),xt(this,Pt(t).call(this,e))}return Ot(t,e),Dt(t,[{key:"cleanUpOnParticipantDisconnect",value:function(){return this.controller.cleanUpOnParticipantDisconnect()}}]),t}(Ut),Bt=function(e){function t(e){return Lt(this,t),xt(this,Pt(t).call(this,e))}return Ot(t,e),Dt(t,[{key:"disconnectParticipant",value:function(){return this.controller.disconnectParticipant()}}]),t}(Ut),Ft=new qt,Ht={create:function(e){var t=e.options||{},n=e.type||E.AGENT;return Ft.createChatSession(n,e.chatDetails,t,e.websocketManager)},setGlobalConfig:function(e){var t=e.loggerConfig;v.update(e),ne.updateLoggerConfig(t)},LogLevel:Q,Logger:J,SessionTypes:E}},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){(function(e,r){var i,o,s;function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}s=function(){return function(e){var t,n=e.localStorage||(t={},{setItem:function(e,n){t[e]=n},getItem:function(e){return t[e]},removeItem:function(e){delete t[e]}}),r={CONNECT:1,CONNACK:2,PUBLISH:3,PUBACK:4,PUBREC:5,PUBREL:6,PUBCOMP:7,SUBSCRIBE:8,SUBACK:9,UNSUBSCRIBE:10,UNSUBACK:11,PINGREQ:12,PINGRESP:13,DISCONNECT:14},i=function(e,t){for(var n in e)if(e.hasOwnProperty(n)){if(!t.hasOwnProperty(n)){var r="Unknown property, "+n+". Valid properties are:";for(var i in t)t.hasOwnProperty(i)&&(r=r+" "+i);throw new Error(r)}if(a(e[n])!==t[n])throw new Error(u(s.INVALID_TYPE,[a(e[n]),n]))}},o=function(e,t){return function(){return e.apply(t,arguments)}},s={OK:{code:0,text:"AMQJSC0000I OK."},CONNECT_TIMEOUT:{code:1,text:"AMQJSC0001E Connect timed out."},SUBSCRIBE_TIMEOUT:{code:2,text:"AMQJS0002E Subscribe timed out."},UNSUBSCRIBE_TIMEOUT:{code:3,text:"AMQJS0003E Unsubscribe timed out."},PING_TIMEOUT:{code:4,text:"AMQJS0004E Ping timed out."},INTERNAL_ERROR:{code:5,text:"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}"},CONNACK_RETURNCODE:{code:6,text:"AMQJS0006E Bad Connack return code:{0} {1}."},SOCKET_ERROR:{code:7,text:"AMQJS0007E Socket error:{0}."},SOCKET_CLOSE:{code:8,text:"AMQJS0008I Socket closed."},MALFORMED_UTF:{code:9,text:"AMQJS0009E Malformed UTF data:{0} {1} {2}."},UNSUPPORTED:{code:10,text:"AMQJS0010E {0} is not supported by this browser."},INVALID_STATE:{code:11,text:"AMQJS0011E Invalid state {0}."},INVALID_TYPE:{code:12,text:"AMQJS0012E Invalid type {0} for {1}."},INVALID_ARGUMENT:{code:13,text:"AMQJS0013E Invalid argument {0} for {1}."},UNSUPPORTED_OPERATION:{code:14,text:"AMQJS0014E Unsupported operation."},INVALID_STORED_DATA:{code:15,text:"AMQJS0015E Invalid data in local storage key={0} value={1}."},INVALID_MQTT_MESSAGE_TYPE:{code:16,text:"AMQJS0016E Invalid MQTT message type {0}."},MALFORMED_UNICODE:{code:17,text:"AMQJS0017E Malformed Unicode string:{0} {1}."},BUFFER_FULL:{code:18,text:"AMQJS0018E Message buffer is full, maximum buffer size: {0}."}},c={0:"Connection Accepted",1:"Connection Refused: unacceptable protocol version",2:"Connection Refused: identifier rejected",3:"Connection Refused: server unavailable",4:"Connection Refused: bad user name or password",5:"Connection Refused: not authorized"},u=function(e,t){var n=e.text;if(t)for(var r,i,o=0;o<t.length;o++)if(r="{"+o+"}",(i=n.indexOf(r))>0){var s=n.substring(0,i),a=n.substring(i+r.length);n=s+t[o]+a}return n},l=[0,6,77,81,73,115,100,112,3],h=[0,4,77,81,84,84,4],p=function(e,t){for(var n in this.type=e,t)t.hasOwnProperty(n)&&(this[n]=t[n])};function f(e,t){var n,i=t,o=e[t],s=o>>4,a=o&=15;t+=1;var c=0,u=1;do{if(t==e.length)return[null,i];c+=(127&(n=e[t++]))*u,u*=128}while(0!=(128&n));var l=t+c;if(l>e.length)return[null,i];var h=new p(s);switch(s){case r.CONNACK:1&e[t++]&&(h.sessionPresent=!0),h.returnCode=e[t++];break;case r.PUBLISH:var f=a>>1&3,d=m(e,t),g=b(e,t+=2,d);t+=d,f>0&&(h.messageIdentifier=m(e,t),t+=2);var v=new E(e.subarray(t,l));1==(1&a)&&(v.retained=!0),8==(8&a)&&(v.duplicate=!0),v.qos=f,v.destinationName=g,h.payloadMessage=v;break;case r.PUBACK:case r.PUBREC:case r.PUBREL:case r.PUBCOMP:case r.UNSUBACK:h.messageIdentifier=m(e,t);break;case r.SUBACK:h.messageIdentifier=m(e,t),t+=2,h.returnCode=e.subarray(t,l)}return[h,l]}function d(e,t,n){return t[n++]=e>>8,t[n++]=e%256,n}function g(e,t,n,r){return y(e,n,r=d(t,n,r)),r+t}function m(e,t){return 256*e[t]+e[t+1]}function v(e){for(var t=0,n=0;n<e.length;n++){var r=e.charCodeAt(n);r>2047?(55296<=r&&r<=56319&&(n++,t++),t+=3):r>127?t+=2:t++}return t}function y(e,t,n){for(var r=n,i=0;i<e.length;i++){var o=e.charCodeAt(i);if(55296<=o&&o<=56319){var a=e.charCodeAt(++i);if(isNaN(a))throw new Error(u(s.MALFORMED_UNICODE,[o,a]));o=a-56320+(o-55296<<10)+65536}o<=127?t[r++]=o:o<=2047?(t[r++]=o>>6&31|192,t[r++]=63&o|128):o<=65535?(t[r++]=o>>12&15|224,t[r++]=o>>6&63|128,t[r++]=63&o|128):(t[r++]=o>>18&7|240,t[r++]=o>>12&63|128,t[r++]=o>>6&63|128,t[r++]=63&o|128)}return t}function b(e,t,n){for(var r,i="",o=t;o<t+n;){var a=e[o++];if(a<128)r=a;else{var c=e[o++]-128;if(c<0)throw new Error(u(s.MALFORMED_UTF,[a.toString(16),c.toString(16),""]));if(a<224)r=64*(a-192)+c;else{var l=e[o++]-128;if(l<0)throw new Error(u(s.MALFORMED_UTF,[a.toString(16),c.toString(16),l.toString(16)]));if(a<240)r=4096*(a-224)+64*c+l;else{var h=e[o++]-128;if(h<0)throw new Error(u(s.MALFORMED_UTF,[a.toString(16),c.toString(16),l.toString(16),h.toString(16)]));if(!(a<248))throw new Error(u(s.MALFORMED_UTF,[a.toString(16),c.toString(16),l.toString(16),h.toString(16)]));r=262144*(a-240)+4096*c+64*l+h}}}r>65535&&(r-=65536,i+=String.fromCharCode(55296+(r>>10)),r=56320+(1023&r)),i+=String.fromCharCode(r)}return i}p.prototype.encode=function(){var e,t=(15&this.type)<<4,n=0,i=[],o=0;switch(void 0!==this.messageIdentifier&&(n+=2),this.type){case r.CONNECT:switch(this.mqttVersion){case 3:n+=l.length+3;break;case 4:n+=h.length+3}n+=v(this.clientId)+2,void 0!==this.willMessage&&(n+=v(this.willMessage.destinationName)+2,(e=this.willMessage.payloadBytes)instanceof Uint8Array||(e=new Uint8Array(a)),n+=e.byteLength+2),void 0!==this.userName&&(n+=v(this.userName)+2),void 0!==this.password&&(n+=v(this.password)+2);break;case r.SUBSCRIBE:t|=2;for(var s=0;s<this.topics.length;s++)i[s]=v(this.topics[s]),n+=i[s]+2;n+=this.requestedQos.length;break;case r.UNSUBSCRIBE:for(t|=2,s=0;s<this.topics.length;s++)i[s]=v(this.topics[s]),n+=i[s]+2;break;case r.PUBREL:t|=2;break;case r.PUBLISH:this.payloadMessage.duplicate&&(t|=8),t=t|=this.payloadMessage.qos<<1,this.payloadMessage.retained&&(t|=1),n+=(o=v(this.payloadMessage.destinationName))+2;var a=this.payloadMessage.payloadBytes;n+=a.byteLength,a instanceof ArrayBuffer?a=new Uint8Array(a):a instanceof Uint8Array||(a=new Uint8Array(a.buffer));break;case r.DISCONNECT:}var c=function(e){var t=new Array(1),n=0;do{var r=e%128;(e>>=7)>0&&(r|=128),t[n++]=r}while(e>0&&n<4);return t}(n),u=c.length+1,p=new ArrayBuffer(n+u),f=new Uint8Array(p);if(f[0]=t,f.set(c,1),this.type==r.PUBLISH)u=g(this.payloadMessage.destinationName,o,f,u);else if(this.type==r.CONNECT){switch(this.mqttVersion){case 3:f.set(l,u),u+=l.length;break;case 4:f.set(h,u),u+=h.length}var m=0;this.cleanSession&&(m=2),void 0!==this.willMessage&&(m|=4,m|=this.willMessage.qos<<3,this.willMessage.retained&&(m|=32)),void 0!==this.userName&&(m|=128),void 0!==this.password&&(m|=64),f[u++]=m,u=d(this.keepAliveInterval,f,u)}switch(void 0!==this.messageIdentifier&&(u=d(this.messageIdentifier,f,u)),this.type){case r.CONNECT:u=g(this.clientId,v(this.clientId),f,u),void 0!==this.willMessage&&(u=g(this.willMessage.destinationName,v(this.willMessage.destinationName),f,u),u=d(e.byteLength,f,u),f.set(e,u),u+=e.byteLength),void 0!==this.userName&&(u=g(this.userName,v(this.userName),f,u)),void 0!==this.password&&(u=g(this.password,v(this.password),f,u));break;case r.PUBLISH:f.set(a,u);break;case r.SUBSCRIBE:for(s=0;s<this.topics.length;s++)u=g(this.topics[s],i[s],f,u),f[u++]=this.requestedQos[s];break;case r.UNSUBSCRIBE:for(s=0;s<this.topics.length;s++)u=g(this.topics[s],i[s],f,u)}return p};var w=function(e,t){this._client=e,this._keepAliveInterval=1e3*t,this.isReset=!1;var n=new p(r.PINGREQ).encode(),i=function(e){return function(){return o.apply(e)}},o=function(){this.isReset?(this.isReset=!1,this._client._trace("Pinger.doPing","send PINGREQ"),this._client.socket.send(n),this.timeout=setTimeout(i(this),this._keepAliveInterval)):(this._client._trace("Pinger.doPing","Timed out"),this._client._disconnected(s.PING_TIMEOUT.code,u(s.PING_TIMEOUT)))};this.reset=function(){this.isReset=!0,clearTimeout(this.timeout),this._keepAliveInterval>0&&(this.timeout=setTimeout(i(this),this._keepAliveInterval))},this.cancel=function(){clearTimeout(this.timeout)}},_=function(e,t,n,r){t||(t=30),this.timeout=setTimeout(function(e,t,n){return function(){return e.apply(t,n)}}(n,e,r),1e3*t),this.cancel=function(){clearTimeout(this.timeout)}},S=function(t,r,i,o,a){if(!("WebSocket"in e&&null!==e.WebSocket))throw new Error(u(s.UNSUPPORTED,["WebSocket"]));if(!("ArrayBuffer"in e&&null!==e.ArrayBuffer))throw new Error(u(s.UNSUPPORTED,["ArrayBuffer"]));for(var c in this._trace("Paho.Client",t,r,i,o,a),this.host=r,this.port=i,this.path=o,this.uri=t,this.clientId=a,this._wsuri=null,this._localKey=r+":"+i+("/mqtt"!=o?":"+o:"")+":"+a+":",this._msg_queue=[],this._buffered_msg_queue=[],this._sentMessages={},this._receivedMessages={},this._notify_msg_sent={},this._message_identifier=1,this._sequence=0,n)0!==c.indexOf("Sent:"+this._localKey)&&0!==c.indexOf("Received:"+this._localKey)||this.restore(c)};S.prototype.host=null,S.prototype.port=null,S.prototype.path=null,S.prototype.uri=null,S.prototype.clientId=null,S.prototype.socket=null,S.prototype.connected=!1,S.prototype.maxMessageIdentifier=65536,S.prototype.connectOptions=null,S.prototype.hostIndex=null,S.prototype.onConnected=null,S.prototype.onConnectionLost=null,S.prototype.onMessageDelivered=null,S.prototype.onMessageArrived=null,S.prototype.traceFunction=null,S.prototype._msg_queue=null,S.prototype._buffered_msg_queue=null,S.prototype._connectTimeout=null,S.prototype.sendPinger=null,S.prototype.receivePinger=null,S.prototype._reconnectInterval=1,S.prototype._reconnecting=!1,S.prototype._reconnectTimeout=null,S.prototype.disconnectedPublishing=!1,S.prototype.disconnectedBufferSize=5e3,S.prototype.receiveBuffer=null,S.prototype._traceBuffer=null,S.prototype._MAX_TRACE_ENTRIES=100,S.prototype.connect=function(e){var t=this._traceMask(e,"password");if(this._trace("Client.connect",t,this.socket,this.connected),this.connected)throw new Error(u(s.INVALID_STATE,["already connected"]));if(this.socket)throw new Error(u(s.INVALID_STATE,["already connected"]));this._reconnecting&&(this._reconnectTimeout.cancel(),this._reconnectTimeout=null,this._reconnecting=!1),this.connectOptions=e,this._reconnectInterval=1,this._reconnecting=!1,e.uris?(this.hostIndex=0,this._doConnect(e.uris[0])):this._doConnect(this.uri)},S.prototype.subscribe=function(e,t){if(this._trace("Client.subscribe",e,t),!this.connected)throw new Error(u(s.INVALID_STATE,["not connected"]));var n=new p(r.SUBSCRIBE);n.topics=e.constructor===Array?e:[e],void 0===t.qos&&(t.qos=0),n.requestedQos=[];for(var i=0;i<n.topics.length;i++)n.requestedQos[i]=t.qos;t.onSuccess&&(n.onSuccess=function(e){t.onSuccess({invocationContext:t.invocationContext,grantedQos:e})}),t.onFailure&&(n.onFailure=function(e){t.onFailure({invocationContext:t.invocationContext,errorCode:e,errorMessage:u(e)})}),t.timeout&&(n.timeOut=new _(this,t.timeout,t.onFailure,[{invocationContext:t.invocationContext,errorCode:s.SUBSCRIBE_TIMEOUT.code,errorMessage:u(s.SUBSCRIBE_TIMEOUT)}])),this._requires_ack(n),this._schedule_message(n)},S.prototype.unsubscribe=function(e,t){if(this._trace("Client.unsubscribe",e,t),!this.connected)throw new Error(u(s.INVALID_STATE,["not connected"]));var n=new p(r.UNSUBSCRIBE);n.topics=e.constructor===Array?e:[e],t.onSuccess&&(n.callback=function(){t.onSuccess({invocationContext:t.invocationContext})}),t.timeout&&(n.timeOut=new _(this,t.timeout,t.onFailure,[{invocationContext:t.invocationContext,errorCode:s.UNSUBSCRIBE_TIMEOUT.code,errorMessage:u(s.UNSUBSCRIBE_TIMEOUT)}])),this._requires_ack(n),this._schedule_message(n)},S.prototype.send=function(e){this._trace("Client.send",e);var t=new p(r.PUBLISH);if(t.payloadMessage=e,this.connected)e.qos>0?this._requires_ack(t):this.onMessageDelivered&&(this._notify_msg_sent[t]=this.onMessageDelivered(t.payloadMessage)),this._schedule_message(t);else{if(!this._reconnecting||!this.disconnectedPublishing)throw new Error(u(s.INVALID_STATE,["not connected"]));if(Object.keys(this._sentMessages).length+this._buffered_msg_queue.length>this.disconnectedBufferSize)throw new Error(u(s.BUFFER_FULL,[this.disconnectedBufferSize]));e.qos>0?this._requires_ack(t):(t.sequence=++this._sequence,this._buffered_msg_queue.unshift(t))}},S.prototype.disconnect=function(){if(this._trace("Client.disconnect"),this._reconnecting&&(this._reconnectTimeout.cancel(),this._reconnectTimeout=null,this._reconnecting=!1),!this.socket)throw new Error(u(s.INVALID_STATE,["not connecting or connected"]));var e=new p(r.DISCONNECT);this._notify_msg_sent[e]=o(this._disconnected,this),this._schedule_message(e)},S.prototype.getTraceLog=function(){if(null!==this._traceBuffer){for(var e in this._trace("Client.getTraceLog",new Date),this._trace("Client.getTraceLog in flight messages",this._sentMessages.length),this._sentMessages)this._trace("_sentMessages ",e,this._sentMessages[e]);for(var e in this._receivedMessages)this._trace("_receivedMessages ",e,this._receivedMessages[e]);return this._traceBuffer}},S.prototype.startTrace=function(){null===this._traceBuffer&&(this._traceBuffer=[]),this._trace("Client.startTrace",new Date,"@VERSION@-@BUILDLEVEL@")},S.prototype.stopTrace=function(){delete this._traceBuffer},S.prototype._doConnect=function(e){if(this.connectOptions.useSSL){var t=e.split(":");t[0]="wss",e=t.join(":")}this._wsuri=e,this.connected=!1,this.connectOptions.mqttVersion<4?this.socket=new WebSocket(e,["mqttv3.1"]):this.socket=new WebSocket(e,["mqtt"]),this.socket.binaryType="arraybuffer",this.socket.onopen=o(this._on_socket_open,this),this.socket.onmessage=o(this._on_socket_message,this),this.socket.onerror=o(this._on_socket_error,this),this.socket.onclose=o(this._on_socket_close,this),this.sendPinger=new w(this,this.connectOptions.keepAliveInterval),this.receivePinger=new w(this,this.connectOptions.keepAliveInterval),this._connectTimeout&&(this._connectTimeout.cancel(),this._connectTimeout=null),this._connectTimeout=new _(this,this.connectOptions.timeout,this._disconnected,[s.CONNECT_TIMEOUT.code,u(s.CONNECT_TIMEOUT)])},S.prototype._schedule_message=function(e){this._msg_queue.unshift(e),this.connected&&this._process_queue()},S.prototype.store=function(e,t){var i={type:t.type,messageIdentifier:t.messageIdentifier,version:1};switch(t.type){case r.PUBLISH:t.pubRecReceived&&(i.pubRecReceived=!0),i.payloadMessage={};for(var o="",a=t.payloadMessage.payloadBytes,c=0;c<a.length;c++)a[c]<=15?o=o+"0"+a[c].toString(16):o+=a[c].toString(16);i.payloadMessage.payloadHex=o,i.payloadMessage.qos=t.payloadMessage.qos,i.payloadMessage.destinationName=t.payloadMessage.destinationName,t.payloadMessage.duplicate&&(i.payloadMessage.duplicate=!0),t.payloadMessage.retained&&(i.payloadMessage.retained=!0),0===e.indexOf("Sent:")&&(void 0===t.sequence&&(t.sequence=++this._sequence),i.sequence=t.sequence);break;default:throw Error(u(s.INVALID_STORED_DATA,[e+this._localKey+t.messageIdentifier,i]))}n.setItem(e+this._localKey+t.messageIdentifier,JSON.stringify(i))},S.prototype.restore=function(e){var t=n.getItem(e),i=JSON.parse(t),o=new p(i.type,i);switch(i.type){case r.PUBLISH:for(var a=i.payloadMessage.payloadHex,c=new ArrayBuffer(a.length/2),l=new Uint8Array(c),h=0;a.length>=2;){var f=parseInt(a.substring(0,2),16);a=a.substring(2,a.length),l[h++]=f}var d=new E(l);d.qos=i.payloadMessage.qos,d.destinationName=i.payloadMessage.destinationName,i.payloadMessage.duplicate&&(d.duplicate=!0),i.payloadMessage.retained&&(d.retained=!0),o.payloadMessage=d;break;default:throw Error(u(s.INVALID_STORED_DATA,[e,t]))}0===e.indexOf("Sent:"+this._localKey)?(o.payloadMessage.duplicate=!0,this._sentMessages[o.messageIdentifier]=o):0===e.indexOf("Received:"+this._localKey)&&(this._receivedMessages[o.messageIdentifier]=o)},S.prototype._process_queue=function(){for(var e=null;e=this._msg_queue.pop();)this._socket_send(e),this._notify_msg_sent[e]&&(this._notify_msg_sent[e](),delete this._notify_msg_sent[e])},S.prototype._requires_ack=function(e){var t=Object.keys(this._sentMessages).length;if(t>this.maxMessageIdentifier)throw Error("Too many messages:"+t);for(;void 0!==this._sentMessages[this._message_identifier];)this._message_identifier++;e.messageIdentifier=this._message_identifier,this._sentMessages[e.messageIdentifier]=e,e.type===r.PUBLISH&&this.store("Sent:",e),this._message_identifier===this.maxMessageIdentifier&&(this._message_identifier=1)},S.prototype._on_socket_open=function(){var e=new p(r.CONNECT,this.connectOptions);e.clientId=this.clientId,this._socket_send(e)},S.prototype._on_socket_message=function(e){this._trace("Client._on_socket_message",e.data);for(var t=this._deframeMessages(e.data),n=0;n<t.length;n+=1)this._handleMessage(t[n])},S.prototype._deframeMessages=function(e){var t=new Uint8Array(e),n=[];if(this.receiveBuffer){var r=new Uint8Array(this.receiveBuffer.length+t.length);r.set(this.receiveBuffer),r.set(t,this.receiveBuffer.length),t=r,delete this.receiveBuffer}try{for(var i=0;i<t.length;){var o=f(t,i),a=o[0];if(i=o[1],null===a)break;n.push(a)}i<t.length&&(this.receiveBuffer=t.subarray(i))}catch(e){var c="undefined"==e.hasOwnProperty("stack")?e.stack.toString():"No Error Stack Available";return void this._disconnected(s.INTERNAL_ERROR.code,u(s.INTERNAL_ERROR,[e.message,c]))}return n},S.prototype._handleMessage=function(e){this._trace("Client._handleMessage",e);try{switch(e.type){case r.CONNACK:if(this._connectTimeout.cancel(),this._reconnectTimeout&&this._reconnectTimeout.cancel(),this.connectOptions.cleanSession){for(var t in this._sentMessages){var i=this._sentMessages[t];n.removeItem("Sent:"+this._localKey+i.messageIdentifier)}for(var t in this._sentMessages={},this._receivedMessages){var o=this._receivedMessages[t];n.removeItem("Received:"+this._localKey+o.messageIdentifier)}this._receivedMessages={}}if(0!==e.returnCode){this._disconnected(s.CONNACK_RETURNCODE.code,u(s.CONNACK_RETURNCODE,[e.returnCode,c[e.returnCode]]));break}this.connected=!0,this.connectOptions.uris&&(this.hostIndex=this.connectOptions.uris.length);var a=[];for(var l in this._sentMessages)this._sentMessages.hasOwnProperty(l)&&a.push(this._sentMessages[l]);if(this._buffered_msg_queue.length>0)for(var h=null;h=this._buffered_msg_queue.pop();)a.push(h),this.onMessageDelivered&&(this._notify_msg_sent[h]=this.onMessageDelivered(h.payloadMessage));a=a.sort((function(e,t){return e.sequence-t.sequence}));for(var f=0,d=a.length;f<d;f++)if((i=a[f]).type==r.PUBLISH&&i.pubRecReceived){var g=new p(r.PUBREL,{messageIdentifier:i.messageIdentifier});this._schedule_message(g)}else this._schedule_message(i);this.connectOptions.onSuccess&&this.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});var m=!1;this._reconnecting&&(m=!0,this._reconnectInterval=1,this._reconnecting=!1),this._connected(m,this._wsuri),this._process_queue();break;case r.PUBLISH:this._receivePublish(e);break;case r.PUBACK:(i=this._sentMessages[e.messageIdentifier])&&(delete this._sentMessages[e.messageIdentifier],n.removeItem("Sent:"+this._localKey+e.messageIdentifier),this.onMessageDelivered&&this.onMessageDelivered(i.payloadMessage));break;case r.PUBREC:(i=this._sentMessages[e.messageIdentifier])&&(i.pubRecReceived=!0,g=new p(r.PUBREL,{messageIdentifier:e.messageIdentifier}),this.store("Sent:",i),this._schedule_message(g));break;case r.PUBREL:o=this._receivedMessages[e.messageIdentifier],n.removeItem("Received:"+this._localKey+e.messageIdentifier),o&&(this._receiveMessage(o),delete this._receivedMessages[e.messageIdentifier]);var v=new p(r.PUBCOMP,{messageIdentifier:e.messageIdentifier});this._schedule_message(v);break;case r.PUBCOMP:i=this._sentMessages[e.messageIdentifier],delete this._sentMessages[e.messageIdentifier],n.removeItem("Sent:"+this._localKey+e.messageIdentifier),this.onMessageDelivered&&this.onMessageDelivered(i.payloadMessage);break;case r.SUBACK:(i=this._sentMessages[e.messageIdentifier])&&(i.timeOut&&i.timeOut.cancel(),128===e.returnCode[0]?i.onFailure&&i.onFailure(e.returnCode):i.onSuccess&&i.onSuccess(e.returnCode),delete this._sentMessages[e.messageIdentifier]);break;case r.UNSUBACK:(i=this._sentMessages[e.messageIdentifier])&&(i.timeOut&&i.timeOut.cancel(),i.callback&&i.callback(),delete this._sentMessages[e.messageIdentifier]);break;case r.PINGRESP:this.sendPinger.reset();break;case r.DISCONNECT:this._disconnected(s.INVALID_MQTT_MESSAGE_TYPE.code,u(s.INVALID_MQTT_MESSAGE_TYPE,[e.type]));break;default:this._disconnected(s.INVALID_MQTT_MESSAGE_TYPE.code,u(s.INVALID_MQTT_MESSAGE_TYPE,[e.type]))}}catch(e){var y="undefined"==e.hasOwnProperty("stack")?e.stack.toString():"No Error Stack Available";return void this._disconnected(s.INTERNAL_ERROR.code,u(s.INTERNAL_ERROR,[e.message,y]))}},S.prototype._on_socket_error=function(e){this._reconnecting||this._disconnected(s.SOCKET_ERROR.code,u(s.SOCKET_ERROR,[e.data]))},S.prototype._on_socket_close=function(){this._reconnecting||this._disconnected(s.SOCKET_CLOSE.code,u(s.SOCKET_CLOSE))},S.prototype._socket_send=function(e){if(1==e.type){var t=this._traceMask(e,"password");this._trace("Client._socket_send",t)}else this._trace("Client._socket_send",e);this.socket.send(e.encode()),this.sendPinger.reset()},S.prototype._receivePublish=function(e){switch(e.payloadMessage.qos){case"undefined":case 0:this._receiveMessage(e);break;case 1:var t=new p(r.PUBACK,{messageIdentifier:e.messageIdentifier});this._schedule_message(t),this._receiveMessage(e);break;case 2:this._receivedMessages[e.messageIdentifier]=e,this.store("Received:",e);var n=new p(r.PUBREC,{messageIdentifier:e.messageIdentifier});this._schedule_message(n);break;default:throw Error("Invaild qos="+e.payloadMessage.qos)}},S.prototype._receiveMessage=function(e){this.onMessageArrived&&this.onMessageArrived(e.payloadMessage)},S.prototype._connected=function(e,t){this.onConnected&&this.onConnected(e,t)},S.prototype._reconnect=function(){this._trace("Client._reconnect"),this.connected||(this._reconnecting=!0,this.sendPinger.cancel(),this.receivePinger.cancel(),this._reconnectInterval<128&&(this._reconnectInterval=2*this._reconnectInterval),this.connectOptions.uris?(this.hostIndex=0,this._doConnect(this.connectOptions.uris[0])):this._doConnect(this.uri))},S.prototype._disconnected=function(e,t){if(this._trace("Client._disconnected",e,t),void 0!==e&&this._reconnecting)this._reconnectTimeout=new _(this,this._reconnectInterval,this._reconnect);else if(this.sendPinger.cancel(),this.receivePinger.cancel(),this._connectTimeout&&(this._connectTimeout.cancel(),this._connectTimeout=null),this._msg_queue=[],this._buffered_msg_queue=[],this._notify_msg_sent={},this.socket&&(this.socket.onopen=null,this.socket.onmessage=null,this.socket.onerror=null,this.socket.onclose=null,1===this.socket.readyState&&this.socket.close(),delete this.socket),this.connectOptions.uris&&this.hostIndex<this.connectOptions.uris.length-1)this.hostIndex++,this._doConnect(this.connectOptions.uris[this.hostIndex]);else if(void 0===e&&(e=s.OK.code,t=u(s.OK)),this.connected){if(this.connected=!1,this.onConnectionLost&&this.onConnectionLost({errorCode:e,errorMessage:t,reconnect:this.connectOptions.reconnect,uri:this._wsuri}),e!==s.OK.code&&this.connectOptions.reconnect)return this._reconnectInterval=1,void this._reconnect()}else 4===this.connectOptions.mqttVersion&&!1===this.connectOptions.mqttVersionExplicit?(this._trace("Failed to connect V4, dropping back to V3"),this.connectOptions.mqttVersion=3,this.connectOptions.uris?(this.hostIndex=0,this._doConnect(this.connectOptions.uris[0])):this._doConnect(this.uri)):this.connectOptions.onFailure&&this.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext,errorCode:e,errorMessage:t})},S.prototype._trace=function(){if(this.traceFunction){var e=Array.prototype.slice.call(arguments);for(var t in e)void 0!==e[t]&&e.splice(t,1,JSON.stringify(e[t]));var n=e.join("");this.traceFunction({severity:"Debug",message:n})}if(null!==this._traceBuffer){t=0;for(var r=arguments.length;t<r;t++)this._traceBuffer.length==this._MAX_TRACE_ENTRIES&&this._traceBuffer.shift(),0===t?this._traceBuffer.push(arguments[t]):void 0===arguments[t]?this._traceBuffer.push(arguments[t]):this._traceBuffer.push("  "+JSON.stringify(arguments[t]))}},S.prototype._traceMask=function(e,t){var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=r==t?"******":e[r]);return n};var E=function(e){var t,n;if(!("string"==typeof e||e instanceof ArrayBuffer||ArrayBuffer.isView(e)&&!(e instanceof DataView)))throw u(s.INVALID_ARGUMENT,[e,"newPayload"]);t=e;var r=0,i=!1,o=!1;Object.defineProperties(this,{payloadString:{enumerable:!0,get:function(){return"string"==typeof t?t:b(t,0,t.length)}},payloadBytes:{enumerable:!0,get:function(){if("string"==typeof t){var e=new ArrayBuffer(v(t)),n=new Uint8Array(e);return y(t,n,0),n}return t}},destinationName:{enumerable:!0,get:function(){return n},set:function(e){if("string"!=typeof e)throw new Error(u(s.INVALID_ARGUMENT,[e,"newDestinationName"]));n=e}},qos:{enumerable:!0,get:function(){return r},set:function(e){if(0!==e&&1!==e&&2!==e)throw new Error("Invalid argument:"+e);r=e}},retained:{enumerable:!0,get:function(){return i},set:function(e){if("boolean"!=typeof e)throw new Error(u(s.INVALID_ARGUMENT,[e,"newRetained"]));i=e}},topic:{enumerable:!0,get:function(){return n},set:function(e){n=e}},duplicate:{enumerable:!0,get:function(){return o},set:function(e){o=e}}})};return{Client:function(e,t,n,r){var o;if("string"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"host"]));if(2==arguments.length){r=t;var c=(o=e).match(/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/);if(!c)throw new Error(u(s.INVALID_ARGUMENT,[e,"host"]));e=c[4]||c[2],t=parseInt(c[7]),n=c[8]}else{if(3==arguments.length&&(r=n,n="/mqtt"),"number"!=typeof t||t<0)throw new Error(u(s.INVALID_TYPE,[a(t),"port"]));if("string"!=typeof n)throw new Error(u(s.INVALID_TYPE,[a(n),"path"]));var l=-1!==e.indexOf(":")&&"["!==e.slice(0,1)&&"]"!==e.slice(-1);o="ws://"+(l?"["+e+"]":e)+":"+t+n}for(var h=0,p=0;p<r.length;p++){var f=r.charCodeAt(p);55296<=f&&f<=56319&&p++,h++}if("string"!=typeof r||h>65535)throw new Error(u(s.INVALID_ARGUMENT,[r,"clientId"]));var d=new S(o,e,t,n,r);Object.defineProperties(this,{host:{get:function(){return e},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},port:{get:function(){return t},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},path:{get:function(){return n},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},uri:{get:function(){return o},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},clientId:{get:function(){return d.clientId},set:function(){throw new Error(u(s.UNSUPPORTED_OPERATION))}},onConnected:{get:function(){return d.onConnected},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"onConnected"]));d.onConnected=e}},disconnectedPublishing:{get:function(){return d.disconnectedPublishing},set:function(e){d.disconnectedPublishing=e}},disconnectedBufferSize:{get:function(){return d.disconnectedBufferSize},set:function(e){d.disconnectedBufferSize=e}},onConnectionLost:{get:function(){return d.onConnectionLost},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"onConnectionLost"]));d.onConnectionLost=e}},onMessageDelivered:{get:function(){return d.onMessageDelivered},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"onMessageDelivered"]));d.onMessageDelivered=e}},onMessageArrived:{get:function(){return d.onMessageArrived},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"onMessageArrived"]));d.onMessageArrived=e}},trace:{get:function(){return d.traceFunction},set:function(e){if("function"!=typeof e)throw new Error(u(s.INVALID_TYPE,[a(e),"onTrace"]));d.traceFunction=e}}}),this.connect=function(e){if(i(e=e||{},{timeout:"number",userName:"string",password:"string",willMessage:"object",keepAliveInterval:"number",cleanSession:"boolean",useSSL:"boolean",invocationContext:"object",onSuccess:"function",onFailure:"function",hosts:"object",ports:"object",reconnect:"boolean",mqttVersion:"number",mqttVersionExplicit:"boolean",uris:"object"}),void 0===e.keepAliveInterval&&(e.keepAliveInterval=60),e.mqttVersion>4||e.mqttVersion<3)throw new Error(u(s.INVALID_ARGUMENT,[e.mqttVersion,"connectOptions.mqttVersion"]));if(void 0===e.mqttVersion?(e.mqttVersionExplicit=!1,e.mqttVersion=4):e.mqttVersionExplicit=!0,void 0!==e.password&&void 0===e.userName)throw new Error(u(s.INVALID_ARGUMENT,[e.password,"connectOptions.password"]));if(e.willMessage){if(!(e.willMessage instanceof E))throw new Error(u(s.INVALID_TYPE,[e.willMessage,"connectOptions.willMessage"]));if(e.willMessage.stringPayload=null,void 0===e.willMessage.destinationName)throw new Error(u(s.INVALID_TYPE,[a(e.willMessage.destinationName),"connectOptions.willMessage.destinationName"]))}if(void 0===e.cleanSession&&(e.cleanSession=!0),e.hosts){if(!(e.hosts instanceof Array))throw new Error(u(s.INVALID_ARGUMENT,[e.hosts,"connectOptions.hosts"]));if(e.hosts.length<1)throw new Error(u(s.INVALID_ARGUMENT,[e.hosts,"connectOptions.hosts"]));for(var t=!1,r=0;r<e.hosts.length;r++){if("string"!=typeof e.hosts[r])throw new Error(u(s.INVALID_TYPE,[a(e.hosts[r]),"connectOptions.hosts["+r+"]"]));if(/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/.test(e.hosts[r])){if(0===r)t=!0;else if(!t)throw new Error(u(s.INVALID_ARGUMENT,[e.hosts[r],"connectOptions.hosts["+r+"]"]))}else if(t)throw new Error(u(s.INVALID_ARGUMENT,[e.hosts[r],"connectOptions.hosts["+r+"]"]))}if(t)e.uris=e.hosts;else{if(!e.ports)throw new Error(u(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));if(!(e.ports instanceof Array))throw new Error(u(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));if(e.hosts.length!==e.ports.length)throw new Error(u(s.INVALID_ARGUMENT,[e.ports,"connectOptions.ports"]));for(e.uris=[],r=0;r<e.hosts.length;r++){if("number"!=typeof e.ports[r]||e.ports[r]<0)throw new Error(u(s.INVALID_TYPE,[a(e.ports[r]),"connectOptions.ports["+r+"]"]));var c=e.hosts[r],l=e.ports[r],h=-1!==c.indexOf(":");o="ws://"+(h?"["+c+"]":c)+":"+l+n,e.uris.push(o)}}}d.connect(e)},this.subscribe=function(e,t){if("string"!=typeof e&&e.constructor!==Array)throw new Error("Invalid argument:"+e);if(i(t=t||{},{qos:"number",invocationContext:"object",onSuccess:"function",onFailure:"function",timeout:"number"}),t.timeout&&!t.onFailure)throw new Error("subscribeOptions.timeout specified with no onFailure callback.");if(void 0!==t.qos&&0!==t.qos&&1!==t.qos&&2!==t.qos)throw new Error(u(s.INVALID_ARGUMENT,[t.qos,"subscribeOptions.qos"]));d.subscribe(e,t)},this.unsubscribe=function(e,t){if("string"!=typeof e&&e.constructor!==Array)throw new Error("Invalid argument:"+e);if(i(t=t||{},{invocationContext:"object",onSuccess:"function",onFailure:"function",timeout:"number"}),t.timeout&&!t.onFailure)throw new Error("unsubscribeOptions.timeout specified with no onFailure callback.");d.unsubscribe(e,t)},this.send=function(e,t,n,r){var i;if(0===arguments.length)throw new Error("Invalid argument.length");if(1==arguments.length){if(!(e instanceof E)&&"string"!=typeof e)throw new Error("Invalid argument:"+a(e));if(void 0===(i=e).destinationName)throw new Error(u(s.INVALID_ARGUMENT,[i.destinationName,"Message.destinationName"]));d.send(i)}else(i=new E(t)).destinationName=e,arguments.length>=3&&(i.qos=n),arguments.length>=4&&(i.retained=r),d.send(i)},this.publish=function(e,t,n,r){var i;if(0===arguments.length)throw new Error("Invalid argument.length");if(1==arguments.length){if(!(e instanceof E)&&"string"!=typeof e)throw new Error("Invalid argument:"+a(e));if(void 0===(i=e).destinationName)throw new Error(u(s.INVALID_ARGUMENT,[i.destinationName,"Message.destinationName"]));d.send(i)}else(i=new E(t)).destinationName=e,arguments.length>=3&&(i.qos=n),arguments.length>=4&&(i.retained=r),d.send(i)},this.disconnect=function(){d.disconnect()},this.getTraceLog=function(){return d.getTraceLog()},this.startTrace=function(){d.startTrace()},this.stopTrace=function(){d.stopTrace()},this.isConnected=function(){return d.connected}},Message:E}}(void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},"object"===a(t)&&"object"===a(r)?r.exports=s():void 0===(o="function"==typeof(i=s)?i.call(t,n,t,r):i)||(r.exports=o)}).call(this,n(0),n(8)(e))},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"ChatSession",(function(){return i}));n(6);var r=n(2);e.connect=e.connect||{},connect.ChatSession=r.a;var i=r.a}.call(this,n(0))},function(e,t){!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";var r=n(1);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o={assertTrue:function(e,t){if(!e)throw new Error(t)},assertNotNull:function(e,t){return o.assertTrue(null!==e&&void 0!==i(e),Object(r.sprintf)("%s must be provided",t||"A value")),e},isString:function(e){return"string"==typeof e},assertIsNonEmptyString:function(e,t){if(!e||"string"!=typeof e)throw new Error(t+" is not a non-empty string!")},assertIsList:function(e,t){if(!Array.isArray(e))throw new Error(t+" is not an array")},assertIsEnum:function(e,t,n){var r;for(r=0;r<t.length;r++)if(t[r]===e)return;throw new Error(n+" passed is not valid. Allowed values are: "+t)},makeEnum:function(e){var t={};return e.forEach((function(e){var n=e.replace(/\.?([a-z]+)_?/g,(function(e,t){return t.toUpperCase()+"_"})).replace(/_$/,"");t[n]=e})),t},isFunction:function(e){return!!(e&&e.constructor&&e.call&&e.apply)},isObject:function(e){return!("object"!==i(e)||null===e)}};o.isString=function(e){return"string"==typeof e},o.isNumber=function(e){return"number"==typeof e};var s=new RegExp("^(wss://)\\w*");o.validWSUrl=function(e){return s.test(e)},o.assertIsObject=function(e,t){if(!o.isObject(e))throw new Error(t+" is not an object!")};var a=o,c="DEBUG",u="aws/subscribe",l="aws/heartbeat";function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t,n){return t&&g(e.prototype,t),n&&g(e,n),e}var v=function(){function e(){d(this,e)}return m(e,[{key:"debug",value:function(e){}},{key:"info",value:function(e){}},{key:"warn",value:function(e){}},{key:"error",value:function(e){}}]),e}(),y={DEBUG:10,INFO:20,WARN:30,ERROR:40},b=function(){function e(){d(this,e),this.updateLoggerConfig(),this.consoleLoggerWrapper=S()}return m(e,[{key:"writeToClientLogger",value:function(e,t){if(this.hasClientLogger())switch(e){case y.DEBUG:return this._clientLogger.debug(t);case y.INFO:return this._clientLogger.info(t);case y.WARN:return this._clientLogger.warn(t);case y.ERROR:return this._clientLogger.error(t)}}},{key:"isLevelEnabled",value:function(e){return e>=this._level}},{key:"hasClientLogger",value:function(){return null!==this._clientLogger}},{key:"getLogger",value:function(e){var t=e.prefix||"";return this._logsDestination===c?this.consoleLoggerWrapper:new _(t)}},{key:"updateLoggerConfig",value:function(e){var t=e||{};this._level=t.level||y.INFO,this._clientLogger=t.logger||null,this._logsDestination="NULL",t.debug&&(this._logsDestination=c),t.logger&&(this._logsDestination="CLIENT_LOGGER")}}]),e}(),w=function(){function e(){d(this,e)}return m(e,[{key:"debug",value:function(){}},{key:"info",value:function(){}},{key:"warn",value:function(){}},{key:"error",value:function(){}}]),e}(),_=function(e){function t(e){var n;return d(this,t),(n=function(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}(this,p(t).call(this))).prefix=e||"",n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,w),m(t,[{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(y.DEBUG,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(y.INFO,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(y.WARN,t)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(y.ERROR,t)}},{key:"_shouldLog",value:function(e){return E.hasClientLogger()&&E.isLevelEnabled(e)}},{key:"_writeToClientLogger",value:function(e,t){E.writeToClientLogger(e,t)}},{key:"_log",value:function(e,t){if(this._shouldLog(e)){var n=this._convertToSingleStatement(t);this._writeToClientLogger(e,n)}}},{key:"_convertToSingleStatement",value:function(e){var t="";this.prefix&&(t+=this.prefix+" ");for(var n=0;n<e.length;n++){var r=e[n];t+=this._convertToString(r)+" "}return t}},{key:"_convertToString",value:function(e){try{if(!e)return"";if(a.isString(e))return e;if(a.isObject(e)&&a.isFunction(e.toString)){var t=e.toString();if("[object Object]"!==t)return t}return JSON.stringify(e)}catch(t){return console.error("Error while converting argument to string",e,t),""}}}]),t}(),S=function(){var e=new w;return e.debug=console.debug,e.info=console.info,e.warn=console.warn,e.error=console.error,e},E=new b;n.d(t,"a",(function(){return k}));var C=function(){var e=E.getLogger({}),t=null,n={reconnectWebSocket:!1,websocketInitFailed:!1,linearConnectAttempt:0,exponentialConnectAttempt:0,exponentialBackOffTime:1,exponentialTimeoutHandle:null,lifeTimeTimeoutHandle:null},r={pendingResponse:!1,intervalHandle:null},i={initFailure:new Set,getWebSocketTransport:null,subscriptionUpdate:new Set,subscriptionFailure:new Set,topic:new Map,allMessage:new Set,connectionGain:new Set,connectionLost:new Set},o={connConfig:null,promiseHandle:null,promiseCompleted:!1},s={subscribed:new Set,pending:new Set},c=new Set([u,"aws/unsubscribe",l]),h=navigator.onLine,p=setInterval((function(){h!==navigator.onLine&&(h=navigator.onLine)&&(!t||t.readyState>1)&&(e.info("Network online, Connecting to websocket"),I())}),250),f=function(e,t){e.forEach((function(e){e(t)}))},d=function(){if(r.pendingResponse)return e.warn("Heartbeat response not received"),clearInterval(r.intervalHandle),r.pendingResponse=!1,void _();e.debug("Sending heartbeat"),t.send(C(l)),r.pendingResponse=!0},g=function(){n.linearConnectAttempt=0,n.exponentialConnectAttempt=0,n.exponentialBackOffTime=1,r.pendingResponse=!1,n.reconnectWebSocket=!1,clearTimeout(n.lifeTimeTimeoutHandle),clearInterval(r.intervalHandle),clearTimeout(n.exponentialTimeoutHandle)},m=function(){try{if(e.info("WebSocket connection established!"),f(i.connectionGain),g(),s.subscribed.size>0||s.pending.size>0){var a=Array.from(s.subscribed.values());a=a.concat(Array.from(s.pending.values())),s.subscribed.clear(),t.send(C(u,{topics:a}))}d(),r.intervalHandle=setInterval(d,1e4),n.lifeTimeTimeoutHandle=setTimeout((function(){e.debug("Starting scheduled WebSocket manager reconnect"),_()}),1e3*o.connConfig.webSocketTransport.transportLifeTimeInSeconds)}catch(t){e.error("Error after establishing web socket connection, error: ",t)}},v=function(t){n.linearConnectAttempt<=1&&f(i.connectionLost),e.info("Socket connection is closed. event: ",t),n.reconnectWebSocket&&T()},y=function(t){e.error("WebSocketManager Error, error_event: ",t),_()},b=function(t){e.debug("Message received from webSocket server",t.data);var n=JSON.parse(t.data);switch(n.topic){case u:"success"===n.content.status?(n.content.topics.forEach((function(e){s.subscribed.add(e),s.pending.delete(e)})),f(i.subscriptionUpdate,n)):f(i.subscriptionFailure,n);break;case l:e.debug("Heartbeat response received"),r.pendingResponse=!1;break;default:if(n.topic){if(0===i.allMessage.size&&0===i.topic.size)return void e.warn("No registered callback listener for Topic: ",n);f(i.allMessage,n),i.topic.has(n.topic)&&f(i.topic.get(n.topic),n)}else n.message?e.warn("WebSocketManager Message Error, error: ",n):e.warn("Invalid incoming message, error: ",n)}},w=function(e){return!(!t||t.readyState===WebSocket.CLOSED||(t.close(1e3,e),0))},_=function(){h?(clearTimeout(n.lifeTimeTimeoutHandle),clearInterval(r.intervalHandle),n.linearConnectAttempt<3?(n.linearConnectAttempt++,e.debug("Starting Consecutive WebSocket reconnect, Attempt : "+n.linearConnectAttempt),n.reconnectWebSocket=!0,I()):n.exponentialConnectAttempt<5?(n.exponentialConnectAttempt++,n.exponentialBackOffTime*=2,e.debug("Starting Exponential WebSocket reconnect, Attempt : "+n.exponentialConnectAttempt+" with delay "+n.exponentialBackOffTime+" sec."),o.promiseCompleted=!1,o.connConfig=null,n.exponentialTimeoutHandle=setTimeout((function(){n.reconnectWebSocket=!0,I()}),1e3*n.exponentialBackOffTime)):o.promiseCompleted&&(e.error("Could not connect to WebSocket after several attempts"),S())):w("Network Offline, Closing WebSocket Manager")},S=function(){g(),w("Terminating WebSocket Manager"),e.error("WebSocket Initialization failed"),n.websocketInitFailed=!0,clearInterval(p),f(i.initFailure)},C=function(e,t){return JSON.stringify({topic:e,content:t})},k=function(t){return!!(a.isObject(t)&&a.isObject(t.webSocketTransport)&&a.isString(t.webSocketTransport.url)&&a.validWSUrl(t.webSocketTransport.url)&&a.isNumber(t.webSocketTransport.transportLifeTimeInSeconds)&&t.webSocketTransport.transportLifeTimeInSeconds>=3600)||(e.error("Invalid WebSocket Connection Configuration",t),!1)},I=function(){n.websocketInitFailed||(o.connConfig=null,o.promiseCompleted=!1,o.promiseHandle=i.getWebSocketTransport(),o.promiseHandle.then((function(t){o.promiseCompleted=!0,e.debug("Successfully fetched webSocket connection configuration"),k(t)?(o.connConfig=t,h&&(w("Restarting WebSocket Manager")||T())):S()}),(function(t){o.promiseCompleted=!0,e.error("Failed to fetch webSocket connection configuration",t),_()})))},T=function(){if(!n.websocketInitFailed){e.debug("Initializing Websocket Manager");try{k(o.connConfig)?((t=new WebSocket(o.connConfig.webSocketTransport.url)).addEventListener("open",m),t.addEventListener("message",b),t.addEventListener("error",y),t.addEventListener("close",v)):o.promiseCompleted&&S()}catch(t){e.error("Error Initializing web-socket-manager",t),S()}}};this.init=function(t){a.assertTrue(a.isFunction(t),"transportHandle must be a function"),null===i.getWebSocketTransport?(i.getWebSocketTransport=t,I()):e.warn("Web Socket Manager was already initialized")},this.onInitFailure=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.initFailure.add(e),n.websocketInitFailed&&e(),function(){return i.initFailure.delete(e)}},this.onConnectionGain=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.connectionGain.add(e),t&&t.readyState===WebSocket.OPEN&&e(),function(){return i.connectionGain.delete(e)}},this.onConnectionLost=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.connectionLost.add(e),t&&t.readyState===WebSocket.CLOSED&&e(),function(){return i.connectionLost.delete(e)}},this.onSubscriptionUpdate=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.subscriptionUpdate.add(e),function(){return i.subscriptionUpdate.delete(e)}},this.onSubscriptionFailure=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.subscriptionFailure.add(e),function(){return i.subscriptionFailure.delete(e)}},this.onMessage=function(e,t){return a.assertNotNull(e,"topicName"),a.assertTrue(a.isFunction(t),"cb must be a function"),i.topic.has(e)?i.topic.get(e).add(t):i.topic.set(e,new Set([t])),function(){return i.topic.get(e).delete(t)}},this.onAllMessage=function(e){return a.assertTrue(a.isFunction(e),"cb must be a function"),i.allMessage.add(e),function(){return i.allMessage.delete(e)}},this.subscribeTopics=function(e){a.assertNotNull(e,"topics"),a.assertIsList(e),e.forEach((function(e){s.pending.add(e)})),t&&t.readyState===WebSocket.OPEN&&t.send(C(u,{topics:e}))},this.sendMessage=function(n){if(a.assertIsObject(n,"payload"),void 0===n.topic||c.has(n.topic))e.warn("Cannot send message, Invalid topic",n);else{try{n=JSON.stringify(n)}catch(t){return void e.warn("Error stringify message",n)}t&&t.readyState===WebSocket.OPEN?(e.debug("WebSocketManager sending message",n),t.send(n)):e.warn("Cannot send message, web socket connection is not open")}},this.closeWebSocket=function(){g(),clearInterval(p),w("User request to close WebSocket")}},k={create:function(){return new C},setGlobalConfig:function(e){var t=e.loggerConfig;E.updateLoggerConfig(t)},LogLevel:y,Logger:v}},function(e,t,n){var r;!function(){"use strict";var i={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function o(e){return function(e,t){var n,r,s,a,c,u,l,h,p,f=1,d=e.length,g="";for(r=0;r<d;r++)if("string"==typeof e[r])g+=e[r];else if("object"==typeof e[r]){if((a=e[r]).keys)for(n=t[f],s=0;s<a.keys.length;s++){if(null==n)throw new Error(o('[sprintf] Cannot access property "%s" of undefined value "%s"',a.keys[s],a.keys[s-1]));n=n[a.keys[s]]}else n=a.param_no?t[a.param_no]:t[f++];if(i.not_type.test(a.type)&&i.not_primitive.test(a.type)&&n instanceof Function&&(n=n()),i.numeric_arg.test(a.type)&&"number"!=typeof n&&isNaN(n))throw new TypeError(o("[sprintf] expecting number but found %T",n));switch(i.number.test(a.type)&&(h=n>=0),a.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,a.width?parseInt(a.width):0);break;case"e":n=a.precision?parseFloat(n).toExponential(a.precision):parseFloat(n).toExponential();break;case"f":n=a.precision?parseFloat(n).toFixed(a.precision):parseFloat(n);break;case"g":n=a.precision?String(Number(n.toPrecision(a.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=a.precision?n.substring(0,a.precision):n;break;case"t":n=String(!!n),n=a.precision?n.substring(0,a.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=a.precision?n.substring(0,a.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=a.precision?n.substring(0,a.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}i.json.test(a.type)?g+=n:(!i.number.test(a.type)||h&&!a.sign?p="":(p=h?"+":"-",n=n.toString().replace(i.sign,"")),u=a.pad_char?"0"===a.pad_char?"0":a.pad_char.charAt(1):" ",l=a.width-(p+n).length,c=a.width&&l>0?u.repeat(l):"",g+=a.align?p+n+c:"0"===u?p+c+n:c+p+n)}return g}(function(e){if(a[e])return a[e];for(var t,n=e,r=[],o=0;n;){if(null!==(t=i.text.exec(n)))r.push(t[0]);else if(null!==(t=i.modulo.exec(n)))r.push("%");else{if(null===(t=i.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){o|=1;var s=[],c=t[2],u=[];if(null===(u=i.key.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(s.push(u[1]);""!==(c=c.substring(u[0].length));)if(null!==(u=i.key_access.exec(c)))s.push(u[1]);else{if(null===(u=i.index_access.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");s.push(u[1])}t[2]=s}else o|=2;if(3===o)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");r.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return a[e]=r}(e),arguments)}function s(e,t){return o.apply(null,[e].concat(t||[]))}var a=Object.create(null);t.sprintf=o,t.vsprintf=s,"undefined"!=typeof window&&(window.sprintf=o,window.vsprintf=s,void 0===(r=function(){return{sprintf:o,vsprintf:s}}.call(t,n,t,e))||(e.exports=r))}()},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"WebSocketManager",(function(){return i}));var r=n(0);e.connect=e.connect||{},connect.WebSocketManager=r.a;var i=r.a}.call(this,n(3))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n}])},function(e,t,n){(function(e){var t,r;function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function e(n,r,i){function o(a,c){if(!r[a]){if(!n[a]){if(!c&&"function"==typeof t&&t)return t(a,!0);if(s)return s(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var l=r[a]={exports:{}};n[a][0].call(l.exports,(function(e){return o(n[a][1][e]||e)}),l,l.exports,e,n,r,i)}return r[a].exports}for(var s="function"==typeof t&&t,a=0;a<i.length;a++)o(i[a]);return o}({1:[function(e,t,n){t.exports={version:"2.0",metadata:{apiVersion:"2014-06-30",endpointPrefix:"cognito-identity",jsonVersion:"1.1",protocol:"json",serviceFullName:"Amazon Cognito Identity",serviceId:"Cognito Identity",signatureVersion:"v4",targetPrefix:"AWSCognitoIdentityService",uid:"cognito-identity-2014-06-30"},operations:{CreateIdentityPool:{input:{type:"structure",required:["IdentityPoolName","AllowUnauthenticatedIdentities"],members:{IdentityPoolName:{},AllowUnauthenticatedIdentities:{type:"boolean"},SupportedLoginProviders:{shape:"S4"},DeveloperProviderName:{},OpenIdConnectProviderARNs:{shape:"S8"},CognitoIdentityProviders:{shape:"Sa"},SamlProviderARNs:{shape:"Sf"},IdentityPoolTags:{shape:"Sg"}}},output:{shape:"Sj"}},DeleteIdentities:{input:{type:"structure",required:["IdentityIdsToDelete"],members:{IdentityIdsToDelete:{type:"list",member:{}}}},output:{type:"structure",members:{UnprocessedIdentityIds:{type:"list",member:{type:"structure",members:{IdentityId:{},ErrorCode:{}}}}}}},DeleteIdentityPool:{input:{type:"structure",required:["IdentityPoolId"],members:{IdentityPoolId:{}}}},DescribeIdentity:{input:{type:"structure",required:["IdentityId"],members:{IdentityId:{}}},output:{shape:"Su"}},DescribeIdentityPool:{input:{type:"structure",required:["IdentityPoolId"],members:{IdentityPoolId:{}}},output:{shape:"Sj"}},GetCredentialsForIdentity:{input:{type:"structure",required:["IdentityId"],members:{IdentityId:{},Logins:{shape:"Sz"},CustomRoleArn:{}}},output:{type:"structure",members:{IdentityId:{},Credentials:{type:"structure",members:{AccessKeyId:{},SecretKey:{},SessionToken:{},Expiration:{type:"timestamp"}}}}}},GetId:{input:{type:"structure",required:["IdentityPoolId"],members:{AccountId:{},IdentityPoolId:{},Logins:{shape:"Sz"}}},output:{type:"structure",members:{IdentityId:{}}}},GetIdentityPoolRoles:{input:{type:"structure",required:["IdentityPoolId"],members:{IdentityPoolId:{}}},output:{type:"structure",members:{IdentityPoolId:{},Roles:{shape:"S1b"},RoleMappings:{shape:"S1d"}}}},GetOpenIdToken:{input:{type:"structure",required:["IdentityId"],members:{IdentityId:{},Logins:{shape:"Sz"}}},output:{type:"structure",members:{IdentityId:{},Token:{}}}},GetOpenIdTokenForDeveloperIdentity:{input:{type:"structure",required:["IdentityPoolId","Logins"],members:{IdentityPoolId:{},IdentityId:{},Logins:{shape:"Sz"},TokenDuration:{type:"long"}}},output:{type:"structure",members:{IdentityId:{},Token:{}}}},ListIdentities:{input:{type:"structure",required:["IdentityPoolId","MaxResults"],members:{IdentityPoolId:{},MaxResults:{type:"integer"},NextToken:{},HideDisabled:{type:"boolean"}}},output:{type:"structure",members:{IdentityPoolId:{},Identities:{type:"list",member:{shape:"Su"}},NextToken:{}}}},ListIdentityPools:{input:{type:"structure",required:["MaxResults"],members:{MaxResults:{type:"integer"},NextToken:{}}},output:{type:"structure",members:{IdentityPools:{type:"list",member:{type:"structure",members:{IdentityPoolId:{},IdentityPoolName:{}}}},NextToken:{}}}},ListTagsForResource:{input:{type:"structure",required:["ResourceArn"],members:{ResourceArn:{}}},output:{type:"structure",members:{Tags:{shape:"Sg"}}}},LookupDeveloperIdentity:{input:{type:"structure",required:["IdentityPoolId"],members:{IdentityPoolId:{},IdentityId:{},DeveloperUserIdentifier:{},MaxResults:{type:"integer"},NextToken:{}}},output:{type:"structure",members:{IdentityId:{},DeveloperUserIdentifierList:{type:"list",member:{}},NextToken:{}}}},MergeDeveloperIdentities:{input:{type:"structure",required:["SourceUserIdentifier","DestinationUserIdentifier","DeveloperProviderName","IdentityPoolId"],members:{SourceUserIdentifier:{},DestinationUserIdentifier:{},DeveloperProviderName:{},IdentityPoolId:{}}},output:{type:"structure",members:{IdentityId:{}}}},SetIdentityPoolRoles:{input:{type:"structure",required:["IdentityPoolId","Roles"],members:{IdentityPoolId:{},Roles:{shape:"S1b"},RoleMappings:{shape:"S1d"}}}},TagResource:{input:{type:"structure",required:["ResourceArn"],members:{ResourceArn:{},Tags:{shape:"Sg"}}},output:{type:"structure",members:{}}},UnlinkDeveloperIdentity:{input:{type:"structure",required:["IdentityId","IdentityPoolId","DeveloperProviderName","DeveloperUserIdentifier"],members:{IdentityId:{},IdentityPoolId:{},DeveloperProviderName:{},DeveloperUserIdentifier:{}}}},UnlinkIdentity:{input:{type:"structure",required:["IdentityId","Logins","LoginsToRemove"],members:{IdentityId:{},Logins:{shape:"Sz"},LoginsToRemove:{shape:"Sv"}}}},UntagResource:{input:{type:"structure",required:["ResourceArn"],members:{ResourceArn:{},TagKeys:{type:"list",member:{}}}},output:{type:"structure",members:{}}},UpdateIdentityPool:{input:{shape:"Sj"},output:{shape:"Sj"}}},shapes:{S4:{type:"map",key:{},value:{}},S8:{type:"list",member:{}},Sa:{type:"list",member:{type:"structure",members:{ProviderName:{},ClientId:{},ServerSideTokenCheck:{type:"boolean"}}}},Sf:{type:"list",member:{}},Sg:{type:"map",key:{},value:{}},Sj:{type:"structure",required:["IdentityPoolId","IdentityPoolName","AllowUnauthenticatedIdentities"],members:{IdentityPoolId:{},IdentityPoolName:{},AllowUnauthenticatedIdentities:{type:"boolean"},SupportedLoginProviders:{shape:"S4"},DeveloperProviderName:{},OpenIdConnectProviderARNs:{shape:"S8"},CognitoIdentityProviders:{shape:"Sa"},SamlProviderARNs:{shape:"Sf"},IdentityPoolTags:{shape:"Sg"}}},Su:{type:"structure",members:{IdentityId:{},Logins:{shape:"Sv"},CreationDate:{type:"timestamp"},LastModifiedDate:{type:"timestamp"}}},Sv:{type:"list",member:{}},Sz:{type:"map",key:{},value:{}},S1b:{type:"map",key:{},value:{}},S1d:{type:"map",key:{},value:{type:"structure",required:["Type"],members:{Type:{},AmbiguousRoleResolution:{},RulesConfiguration:{type:"structure",required:["Rules"],members:{Rules:{type:"list",member:{type:"structure",required:["Claim","MatchType","Value","RoleARN"],members:{Claim:{},MatchType:{},Value:{},RoleARN:{}}}}}}}}}}}},{}],2:[function(e,t,n){t.exports={pagination:{}}},{}],3:[function(e,t,n){t.exports={version:"2.0",metadata:{apiVersion:"2018-09-07",endpointPrefix:"participant.connect",jsonVersion:"1.1",protocol:"rest-json",serviceAbbreviation:"Amazon Connect Participant",serviceFullName:"Amazon Connect Participant Service",serviceId:"ConnectParticipant",signatureVersion:"v4",signingName:"execute-api",uid:"connectparticipant-2018-09-07"},operations:{CreateParticipantConnection:{http:{requestUri:"/participant/connection"},input:{type:"structure",required:["Type","ParticipantToken"],members:{Type:{type:"list",member:{}},ParticipantToken:{location:"header",locationName:"X-Amz-Bearer"}}},output:{type:"structure",members:{Websocket:{type:"structure",members:{Url:{},ConnectionExpiry:{}}},ConnectionCredentials:{type:"structure",members:{ConnectionToken:{},Expiry:{}}}}}},DisconnectParticipant:{http:{requestUri:"/participant/disconnect"},input:{type:"structure",required:["ConnectionToken"],members:{ClientToken:{idempotencyToken:!0},ConnectionToken:{location:"header",locationName:"X-Amz-Bearer"}}},output:{type:"structure",members:{}}},GetTranscript:{http:{requestUri:"/participant/transcript"},input:{type:"structure",required:["ConnectionToken"],members:{ContactId:{},MaxResults:{type:"integer"},NextToken:{},ScanDirection:{},SortOrder:{},StartPosition:{type:"structure",members:{Id:{},AbsoluteTime:{},MostRecent:{type:"integer"}}},ConnectionToken:{location:"header",locationName:"X-Amz-Bearer"}}},output:{type:"structure",members:{InitialContactId:{},Transcript:{type:"list",member:{type:"structure",members:{AbsoluteTime:{},Content:{},ContentType:{},Id:{},Type:{},ParticipantId:{},DisplayName:{},ParticipantRole:{}}}},NextToken:{}}}},SendEvent:{http:{requestUri:"/participant/event"},input:{type:"structure",required:["ContentType","ConnectionToken"],members:{ContentType:{},Content:{},ClientToken:{idempotencyToken:!0},ConnectionToken:{location:"header",locationName:"X-Amz-Bearer"}}},output:{type:"structure",members:{Id:{},AbsoluteTime:{}}}},SendMessage:{http:{requestUri:"/participant/message"},input:{type:"structure",required:["ContentType","Content","ConnectionToken"],members:{ContentType:{},Content:{},ClientToken:{idempotencyToken:!0},ConnectionToken:{location:"header",locationName:"X-Amz-Bearer"}}},output:{type:"structure",members:{Id:{},AbsoluteTime:{}}}}},shapes:{}}},{}],4:[function(e,t,n){t.exports={pagination:{GetTranscript:{input_token:"NextToken",output_token:"NextToken",limit_key:"MaxResults"}}}},{}],5:[function(e,t,n){t.exports={acm:{name:"ACM",cors:!0},apigateway:{name:"APIGateway",cors:!0},applicationautoscaling:{prefix:"application-autoscaling",name:"ApplicationAutoScaling",cors:!0},appstream:{name:"AppStream"},autoscaling:{name:"AutoScaling",cors:!0},batch:{name:"Batch"},budgets:{name:"Budgets"},clouddirectory:{name:"CloudDirectory",versions:["2016-05-10*"]},cloudformation:{name:"CloudFormation",cors:!0},cloudfront:{name:"CloudFront",versions:["2013-05-12*","2013-11-11*","2014-05-31*","2014-10-21*","2014-11-06*","2015-04-17*","2015-07-27*","2015-09-17*","2016-01-13*","2016-01-28*","2016-08-01*","2016-08-20*","2016-09-07*","2016-09-29*","2016-11-25*","2017-03-25*","2017-10-30*","2018-06-18*","2018-11-05*"],cors:!0},cloudhsm:{name:"CloudHSM",cors:!0},cloudsearch:{name:"CloudSearch"},cloudsearchdomain:{name:"CloudSearchDomain"},cloudtrail:{name:"CloudTrail",cors:!0},cloudwatch:{prefix:"monitoring",name:"CloudWatch",cors:!0},cloudwatchevents:{prefix:"events",name:"CloudWatchEvents",versions:["2014-02-03*"],cors:!0},cloudwatchlogs:{prefix:"logs",name:"CloudWatchLogs",cors:!0},codebuild:{name:"CodeBuild",cors:!0},codecommit:{name:"CodeCommit",cors:!0},codedeploy:{name:"CodeDeploy",cors:!0},codepipeline:{name:"CodePipeline",cors:!0},cognitoidentity:{prefix:"cognito-identity",name:"CognitoIdentity",cors:!0},cognitoidentityserviceprovider:{prefix:"cognito-idp",name:"CognitoIdentityServiceProvider",cors:!0},cognitosync:{prefix:"cognito-sync",name:"CognitoSync",cors:!0},configservice:{prefix:"config",name:"ConfigService",cors:!0},cur:{name:"CUR",cors:!0},datapipeline:{name:"DataPipeline"},devicefarm:{name:"DeviceFarm",cors:!0},directconnect:{name:"DirectConnect",cors:!0},directoryservice:{prefix:"ds",name:"DirectoryService"},discovery:{name:"Discovery"},dms:{name:"DMS"},dynamodb:{name:"DynamoDB",cors:!0},dynamodbstreams:{prefix:"streams.dynamodb",name:"DynamoDBStreams",cors:!0},ec2:{name:"EC2",versions:["2013-06-15*","2013-10-15*","2014-02-01*","2014-05-01*","2014-06-15*","2014-09-01*","2014-10-01*","2015-03-01*","2015-04-15*","2015-10-01*","2016-04-01*","2016-09-15*"],cors:!0},ecr:{name:"ECR",cors:!0},ecs:{name:"ECS",cors:!0},efs:{prefix:"elasticfilesystem",name:"EFS",cors:!0},elasticache:{name:"ElastiCache",versions:["2012-11-15*","2014-03-24*","2014-07-15*","2014-09-30*"],cors:!0},elasticbeanstalk:{name:"ElasticBeanstalk",cors:!0},elb:{prefix:"elasticloadbalancing",name:"ELB",cors:!0},elbv2:{prefix:"elasticloadbalancingv2",name:"ELBv2",cors:!0},emr:{prefix:"elasticmapreduce",name:"EMR",cors:!0},es:{name:"ES"},elastictranscoder:{name:"ElasticTranscoder",cors:!0},firehose:{name:"Firehose",cors:!0},gamelift:{name:"GameLift",cors:!0},glacier:{name:"Glacier"},health:{name:"Health"},iam:{name:"IAM",cors:!0},importexport:{name:"ImportExport"},inspector:{name:"Inspector",versions:["2015-08-18*"],cors:!0},iot:{name:"Iot",cors:!0},iotdata:{prefix:"iot-data",name:"IotData",cors:!0},kinesis:{name:"Kinesis",cors:!0},kinesisanalytics:{name:"KinesisAnalytics"},kms:{name:"KMS",cors:!0},lambda:{name:"Lambda",cors:!0},lexruntime:{prefix:"runtime.lex",name:"LexRuntime",cors:!0},lightsail:{name:"Lightsail"},machinelearning:{name:"MachineLearning",cors:!0},marketplacecommerceanalytics:{name:"MarketplaceCommerceAnalytics",cors:!0},marketplacemetering:{prefix:"meteringmarketplace",name:"MarketplaceMetering"},mturk:{prefix:"mturk-requester",name:"MTurk",cors:!0},mobileanalytics:{name:"MobileAnalytics",cors:!0},opsworks:{name:"OpsWorks",cors:!0},opsworkscm:{name:"OpsWorksCM"},organizations:{name:"Organizations"},pinpoint:{name:"Pinpoint"},polly:{name:"Polly",cors:!0},rds:{name:"RDS",versions:["2014-09-01*"],cors:!0},redshift:{name:"Redshift",cors:!0},rekognition:{name:"Rekognition",cors:!0},resourcegroupstaggingapi:{name:"ResourceGroupsTaggingAPI"},route53:{name:"Route53",cors:!0},route53domains:{name:"Route53Domains",cors:!0},s3:{name:"S3",dualstackAvailable:!0,cors:!0},s3control:{name:"S3Control",dualstackAvailable:!0},servicecatalog:{name:"ServiceCatalog",cors:!0},ses:{prefix:"email",name:"SES",cors:!0},shield:{name:"Shield"},simpledb:{prefix:"sdb",name:"SimpleDB"},sms:{name:"SMS"},snowball:{name:"Snowball"},sns:{name:"SNS",cors:!0},sqs:{name:"SQS",cors:!0},ssm:{name:"SSM",cors:!0},storagegateway:{name:"StorageGateway",cors:!0},stepfunctions:{prefix:"states",name:"StepFunctions"},sts:{name:"STS",cors:!0},support:{name:"Support"},swf:{name:"SWF"},xray:{name:"XRay",cors:!0},waf:{name:"WAF",cors:!0},wafregional:{prefix:"waf-regional",name:"WAFRegional"},workdocs:{name:"WorkDocs",cors:!0},workspaces:{name:"WorkSpaces"},codestar:{name:"CodeStar"},lexmodelbuildingservice:{prefix:"lex-models",name:"LexModelBuildingService",cors:!0},marketplaceentitlementservice:{prefix:"entitlement.marketplace",name:"MarketplaceEntitlementService"},athena:{name:"Athena"},greengrass:{name:"Greengrass"},dax:{name:"DAX"},migrationhub:{prefix:"AWSMigrationHub",name:"MigrationHub"},cloudhsmv2:{name:"CloudHSMV2"},glue:{name:"Glue"},mobile:{name:"Mobile"},pricing:{name:"Pricing",cors:!0},costexplorer:{prefix:"ce",name:"CostExplorer",cors:!0},mediaconvert:{name:"MediaConvert"},medialive:{name:"MediaLive"},mediapackage:{name:"MediaPackage"},mediastore:{name:"MediaStore"},mediastoredata:{prefix:"mediastore-data",name:"MediaStoreData",cors:!0},appsync:{name:"AppSync"},guardduty:{name:"GuardDuty"},mq:{name:"MQ"},comprehend:{name:"Comprehend",cors:!0},iotjobsdataplane:{prefix:"iot-jobs-data",name:"IoTJobsDataPlane"},kinesisvideoarchivedmedia:{prefix:"kinesis-video-archived-media",name:"KinesisVideoArchivedMedia",cors:!0},kinesisvideomedia:{prefix:"kinesis-video-media",name:"KinesisVideoMedia",cors:!0},kinesisvideo:{name:"KinesisVideo",cors:!0},sagemakerruntime:{prefix:"runtime.sagemaker",name:"SageMakerRuntime"},sagemaker:{name:"SageMaker"},translate:{name:"Translate",cors:!0},resourcegroups:{prefix:"resource-groups",name:"ResourceGroups",cors:!0},alexaforbusiness:{name:"AlexaForBusiness"},cloud9:{name:"Cloud9"},serverlessapplicationrepository:{prefix:"serverlessrepo",name:"ServerlessApplicationRepository"},servicediscovery:{name:"ServiceDiscovery"},workmail:{name:"WorkMail"},autoscalingplans:{prefix:"autoscaling-plans",name:"AutoScalingPlans"},transcribeservice:{prefix:"transcribe",name:"TranscribeService"},connect:{name:"Connect"},acmpca:{prefix:"acm-pca",name:"ACMPCA"},fms:{name:"FMS"},secretsmanager:{name:"SecretsManager",cors:!0},iotanalytics:{name:"IoTAnalytics",cors:!0},iot1clickdevicesservice:{prefix:"iot1click-devices",name:"IoT1ClickDevicesService"},iot1clickprojects:{prefix:"iot1click-projects",name:"IoT1ClickProjects"},pi:{name:"PI"},neptune:{name:"Neptune"},mediatailor:{name:"MediaTailor"},eks:{name:"EKS"},macie:{name:"Macie"},dlm:{name:"DLM"},signer:{name:"Signer"},chime:{name:"Chime"},pinpointemail:{prefix:"pinpoint-email",name:"PinpointEmail"},ram:{name:"RAM"},route53resolver:{name:"Route53Resolver"},pinpointsmsvoice:{prefix:"sms-voice",name:"PinpointSMSVoice"},quicksight:{name:"QuickSight"},rdsdataservice:{prefix:"rds-data",name:"RDSDataService"},amplify:{name:"Amplify"},datasync:{name:"DataSync"},robomaker:{name:"RoboMaker"},transfer:{name:"Transfer"},globalaccelerator:{name:"GlobalAccelerator"},comprehendmedical:{name:"ComprehendMedical",cors:!0},kinesisanalyticsv2:{name:"KinesisAnalyticsV2"},mediaconnect:{name:"MediaConnect"},fsx:{name:"FSx"},securityhub:{name:"SecurityHub"},appmesh:{name:"AppMesh",versions:["2018-10-01*"]},licensemanager:{prefix:"license-manager",name:"LicenseManager"},kafka:{name:"Kafka"},apigatewaymanagementapi:{name:"ApiGatewayManagementApi"},apigatewayv2:{name:"ApiGatewayV2"},docdb:{name:"DocDB"},backup:{name:"Backup"},worklink:{name:"WorkLink"},textract:{name:"Textract"},managedblockchain:{name:"ManagedBlockchain"},mediapackagevod:{prefix:"mediapackage-vod",name:"MediaPackageVod"},groundstation:{name:"GroundStation"},iotthingsgraph:{name:"IoTThingsGraph"},iotevents:{name:"IoTEvents"},ioteventsdata:{prefix:"iotevents-data",name:"IoTEventsData"},personalize:{name:"Personalize",cors:!0},personalizeevents:{prefix:"personalize-events",name:"PersonalizeEvents",cors:!0},personalizeruntime:{prefix:"personalize-runtime",name:"PersonalizeRuntime",cors:!0},applicationinsights:{prefix:"application-insights",name:"ApplicationInsights"},servicequotas:{prefix:"service-quotas",name:"ServiceQuotas"},ec2instanceconnect:{prefix:"ec2-instance-connect",name:"EC2InstanceConnect"},eventbridge:{name:"EventBridge"},lakeformation:{name:"LakeFormation"},forecastservice:{prefix:"forecast",name:"ForecastService",cors:!0},forecastqueryservice:{prefix:"forecastquery",name:"ForecastQueryService",cors:!0},qldb:{name:"QLDB"},qldbsession:{prefix:"qldb-session",name:"QLDBSession"},workmailmessageflow:{name:"WorkMailMessageFlow"},connectparticipant:{name:"ConnectParticipant"}}},{}],6:[function(e,t,n){t.exports={version:"2.0",metadata:{apiVersion:"2011-06-15",endpointPrefix:"sts",globalEndpoint:"sts.amazonaws.com",protocol:"query",serviceAbbreviation:"AWS STS",serviceFullName:"AWS Security Token Service",serviceId:"STS",signatureVersion:"v4",uid:"sts-2011-06-15",xmlNamespace:"https://sts.amazonaws.com/doc/2011-06-15/"},operations:{AssumeRole:{input:{type:"structure",required:["RoleArn","RoleSessionName"],members:{RoleArn:{},RoleSessionName:{},PolicyArns:{shape:"S4"},Policy:{},DurationSeconds:{type:"integer"},ExternalId:{},SerialNumber:{},TokenCode:{}}},output:{resultWrapper:"AssumeRoleResult",type:"structure",members:{Credentials:{shape:"Sc"},AssumedRoleUser:{shape:"Sh"},PackedPolicySize:{type:"integer"}}}},AssumeRoleWithSAML:{input:{type:"structure",required:["RoleArn","PrincipalArn","SAMLAssertion"],members:{RoleArn:{},PrincipalArn:{},SAMLAssertion:{},PolicyArns:{shape:"S4"},Policy:{},DurationSeconds:{type:"integer"}}},output:{resultWrapper:"AssumeRoleWithSAMLResult",type:"structure",members:{Credentials:{shape:"Sc"},AssumedRoleUser:{shape:"Sh"},PackedPolicySize:{type:"integer"},Subject:{},SubjectType:{},Issuer:{},Audience:{},NameQualifier:{}}}},AssumeRoleWithWebIdentity:{input:{type:"structure",required:["RoleArn","RoleSessionName","WebIdentityToken"],members:{RoleArn:{},RoleSessionName:{},WebIdentityToken:{},ProviderId:{},PolicyArns:{shape:"S4"},Policy:{},DurationSeconds:{type:"integer"}}},output:{resultWrapper:"AssumeRoleWithWebIdentityResult",type:"structure",members:{Credentials:{shape:"Sc"},SubjectFromWebIdentityToken:{},AssumedRoleUser:{shape:"Sh"},PackedPolicySize:{type:"integer"},Provider:{},Audience:{}}}},DecodeAuthorizationMessage:{input:{type:"structure",required:["EncodedMessage"],members:{EncodedMessage:{}}},output:{resultWrapper:"DecodeAuthorizationMessageResult",type:"structure",members:{DecodedMessage:{}}}},GetAccessKeyInfo:{input:{type:"structure",required:["AccessKeyId"],members:{AccessKeyId:{}}},output:{resultWrapper:"GetAccessKeyInfoResult",type:"structure",members:{Account:{}}}},GetCallerIdentity:{input:{type:"structure",members:{}},output:{resultWrapper:"GetCallerIdentityResult",type:"structure",members:{UserId:{},Account:{},Arn:{}}}},GetFederationToken:{input:{type:"structure",required:["Name"],members:{Name:{},Policy:{},PolicyArns:{shape:"S4"},DurationSeconds:{type:"integer"}}},output:{resultWrapper:"GetFederationTokenResult",type:"structure",members:{Credentials:{shape:"Sc"},FederatedUser:{type:"structure",required:["FederatedUserId","Arn"],members:{FederatedUserId:{},Arn:{}}},PackedPolicySize:{type:"integer"}}}},GetSessionToken:{input:{type:"structure",members:{DurationSeconds:{type:"integer"},SerialNumber:{},TokenCode:{}}},output:{resultWrapper:"GetSessionTokenResult",type:"structure",members:{Credentials:{shape:"Sc"}}}}},shapes:{S4:{type:"list",member:{type:"structure",members:{arn:{}}}},Sc:{type:"structure",required:["AccessKeyId","SecretAccessKey","SessionToken","Expiration"],members:{AccessKeyId:{},SecretAccessKey:{},SessionToken:{},Expiration:{type:"timestamp"}}},Sh:{type:"structure",required:["AssumedRoleId","Arn"],members:{AssumedRoleId:{},Arn:{}}}}}},{}],7:[function(e,t,n){arguments[4][2][0].apply(n,arguments)},{dup:2}],8:[function(e,t,n){e("../lib/node_loader");var r=e("../lib/core"),i=r.Service,o=r.apiLoader;o.services.cognitoidentity={},r.CognitoIdentity=i.defineService("cognitoidentity",["2014-06-30"]),e("../lib/services/cognitoidentity"),Object.defineProperty(o.services.cognitoidentity,"2014-06-30",{get:function(){var t=e("../apis/cognito-identity-2014-06-30.min.json");return t.paginators=e("../apis/cognito-identity-2014-06-30.paginators.json").pagination,t},enumerable:!0,configurable:!0}),t.exports=r.CognitoIdentity},{"../apis/cognito-identity-2014-06-30.min.json":1,"../apis/cognito-identity-2014-06-30.paginators.json":2,"../lib/core":19,"../lib/node_loader":17,"../lib/services/cognitoidentity":61}],9:[function(e,t,n){e("../lib/node_loader");var r=e("../lib/core"),i=r.Service,o=r.apiLoader;o.services.sts={},r.STS=i.defineService("sts",["2011-06-15"]),e("../lib/services/sts"),Object.defineProperty(o.services.sts,"2011-06-15",{get:function(){var t=e("../apis/sts-2011-06-15.min.json");return t.paginators=e("../apis/sts-2011-06-15.paginators.json").pagination,t},enumerable:!0,configurable:!0}),t.exports=r.STS},{"../apis/sts-2011-06-15.min.json":6,"../apis/sts-2011-06-15.paginators.json":7,"../lib/core":19,"../lib/node_loader":17,"../lib/services/sts":62}],10:[function(e,t,n){function r(e,t){if(!r.services.hasOwnProperty(e))throw new Error("InvalidService: Failed to load api for "+e);return r.services[e][t]}r.services={},t.exports=r},{}],11:[function(e,t,n){var r=e("./browserHmac"),i=e("./browserMd5"),o=e("./browserSha1"),s=e("./browserSha256");t.exports={createHash:function(e){if("md5"===(e=e.toLowerCase()))return new i;if("sha256"===e)return new s;if("sha1"===e)return new o;throw new Error("Hash algorithm "+e+" is not supported in the browser SDK")},createHmac:function(e,t){if("md5"===(e=e.toLowerCase()))return new r(i,t);if("sha256"===e)return new r(s,t);if("sha1"===e)return new r(o,t);throw new Error("HMAC algorithm "+e+" is not supported in the browser SDK")},createSign:function(){throw new Error("createSign is not implemented in the browser")}}},{"./browserHmac":13,"./browserMd5":14,"./browserSha1":15,"./browserSha256":16}],12:[function(e,t,n){var r=e("buffer/").Buffer;"undefined"!=typeof ArrayBuffer&&void 0===ArrayBuffer.isView&&(ArrayBuffer.isView=function(e){return i.indexOf(Object.prototype.toString.call(e))>-1});var i=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]","[object DataView]"];t.exports={isEmptyData:function(e){return"string"==typeof e?0===e.length:0===e.byteLength},convertToBuffer:function(e){return"string"==typeof e&&(e=new r(e,"utf8")),ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e)}}},{"buffer/":81}],13:[function(e,t,n){var r=e("./browserHashUtils");function i(e,t){this.hash=new e,this.outer=new e;var n=function(e,t){var n=r.convertToBuffer(t);if(n.byteLength>e.BLOCK_SIZE){var i=new e;i.update(n),n=i.digest()}var o=new Uint8Array(e.BLOCK_SIZE);return o.set(n),o}(e,t),i=new Uint8Array(e.BLOCK_SIZE);i.set(n);for(var o=0;o<e.BLOCK_SIZE;o++)n[o]^=54,i[o]^=92;this.hash.update(n),this.outer.update(i);for(o=0;o<n.byteLength;o++)n[o]=0}t.exports=i,i.prototype.update=function(e){if(r.isEmptyData(e)||this.error)return this;try{this.hash.update(r.convertToBuffer(e))}catch(e){this.error=e}return this},i.prototype.digest=function(e){return this.outer.finished||this.outer.update(this.hash.digest()),this.outer.digest(e)}},{"./browserHashUtils":12}],14:[function(e,t,n){var r=e("./browserHashUtils"),i=e("buffer/").Buffer,o=64;function s(){this.state=[1732584193,4023233417,2562383102,271733878],this.buffer=new DataView(new ArrayBuffer(o)),this.bufferLength=0,this.bytesHashed=0,this.finished=!1}function a(e,t,n,r,i,o){return((t=(t+e&4294967295)+(r+o&4294967295)&4294967295)<<i|t>>>32-i)+n&4294967295}function c(e,t,n,r,i,o,s){return a(t&n|~t&r,e,t,i,o,s)}function u(e,t,n,r,i,o,s){return a(t&r|n&~r,e,t,i,o,s)}function l(e,t,n,r,i,o,s){return a(t^n^r,e,t,i,o,s)}function h(e,t,n,r,i,o,s){return a(n^(t|~r),e,t,i,o,s)}t.exports=s,s.BLOCK_SIZE=o,s.prototype.update=function(e){if(r.isEmptyData(e))return this;if(this.finished)throw new Error("Attempted to update an already finished hash.");var t=r.convertToBuffer(e),n=0,i=t.byteLength;for(this.bytesHashed+=i;i>0;)this.buffer.setUint8(this.bufferLength++,t[n++]),i--,this.bufferLength===o&&(this.hashBuffer(),this.bufferLength=0);return this},s.prototype.digest=function(e){if(!this.finished){var t=this.buffer,n=this.bufferLength,r=8*this.bytesHashed;if(t.setUint8(this.bufferLength++,128),n%o>=o-8){for(var s=this.bufferLength;s<o;s++)t.setUint8(s,0);this.hashBuffer(),this.bufferLength=0}for(s=this.bufferLength;s<o-8;s++)t.setUint8(s,0);t.setUint32(o-8,r>>>0,!0),t.setUint32(o-4,Math.floor(r/4294967296),!0),this.hashBuffer(),this.finished=!0}var a=new DataView(new ArrayBuffer(16));for(s=0;s<4;s++)a.setUint32(4*s,this.state[s],!0);var c=new i(a.buffer,a.byteOffset,a.byteLength);return e?c.toString(e):c},s.prototype.hashBuffer=function(){var e=this.buffer,t=this.state,n=t[0],r=t[1],i=t[2],o=t[3];n=c(n,r,i,o,e.getUint32(0,!0),7,3614090360),o=c(o,n,r,i,e.getUint32(4,!0),12,3905402710),i=c(i,o,n,r,e.getUint32(8,!0),17,606105819),r=c(r,i,o,n,e.getUint32(12,!0),22,3250441966),n=c(n,r,i,o,e.getUint32(16,!0),7,4118548399),o=c(o,n,r,i,e.getUint32(20,!0),12,1200080426),i=c(i,o,n,r,e.getUint32(24,!0),17,2821735955),r=c(r,i,o,n,e.getUint32(28,!0),22,4249261313),n=c(n,r,i,o,e.getUint32(32,!0),7,1770035416),o=c(o,n,r,i,e.getUint32(36,!0),12,2336552879),i=c(i,o,n,r,e.getUint32(40,!0),17,4294925233),r=c(r,i,o,n,e.getUint32(44,!0),22,2304563134),n=c(n,r,i,o,e.getUint32(48,!0),7,1804603682),o=c(o,n,r,i,e.getUint32(52,!0),12,4254626195),i=c(i,o,n,r,e.getUint32(56,!0),17,2792965006),n=u(n,r=c(r,i,o,n,e.getUint32(60,!0),22,1236535329),i,o,e.getUint32(4,!0),5,4129170786),o=u(o,n,r,i,e.getUint32(24,!0),9,3225465664),i=u(i,o,n,r,e.getUint32(44,!0),14,643717713),r=u(r,i,o,n,e.getUint32(0,!0),20,3921069994),n=u(n,r,i,o,e.getUint32(20,!0),5,3593408605),o=u(o,n,r,i,e.getUint32(40,!0),9,38016083),i=u(i,o,n,r,e.getUint32(60,!0),14,3634488961),r=u(r,i,o,n,e.getUint32(16,!0),20,3889429448),n=u(n,r,i,o,e.getUint32(36,!0),5,568446438),o=u(o,n,r,i,e.getUint32(56,!0),9,3275163606),i=u(i,o,n,r,e.getUint32(12,!0),14,4107603335),r=u(r,i,o,n,e.getUint32(32,!0),20,1163531501),n=u(n,r,i,o,e.getUint32(52,!0),5,2850285829),o=u(o,n,r,i,e.getUint32(8,!0),9,4243563512),i=u(i,o,n,r,e.getUint32(28,!0),14,1735328473),n=l(n,r=u(r,i,o,n,e.getUint32(48,!0),20,2368359562),i,o,e.getUint32(20,!0),4,4294588738),o=l(o,n,r,i,e.getUint32(32,!0),11,2272392833),i=l(i,o,n,r,e.getUint32(44,!0),16,1839030562),r=l(r,i,o,n,e.getUint32(56,!0),23,4259657740),n=l(n,r,i,o,e.getUint32(4,!0),4,2763975236),o=l(o,n,r,i,e.getUint32(16,!0),11,1272893353),i=l(i,o,n,r,e.getUint32(28,!0),16,4139469664),r=l(r,i,o,n,e.getUint32(40,!0),23,3200236656),n=l(n,r,i,o,e.getUint32(52,!0),4,681279174),o=l(o,n,r,i,e.getUint32(0,!0),11,3936430074),i=l(i,o,n,r,e.getUint32(12,!0),16,3572445317),r=l(r,i,o,n,e.getUint32(24,!0),23,76029189),n=l(n,r,i,o,e.getUint32(36,!0),4,3654602809),o=l(o,n,r,i,e.getUint32(48,!0),11,3873151461),i=l(i,o,n,r,e.getUint32(60,!0),16,530742520),n=h(n,r=l(r,i,o,n,e.getUint32(8,!0),23,3299628645),i,o,e.getUint32(0,!0),6,4096336452),o=h(o,n,r,i,e.getUint32(28,!0),10,1126891415),i=h(i,o,n,r,e.getUint32(56,!0),15,2878612391),r=h(r,i,o,n,e.getUint32(20,!0),21,4237533241),n=h(n,r,i,o,e.getUint32(48,!0),6,1700485571),o=h(o,n,r,i,e.getUint32(12,!0),10,2399980690),i=h(i,o,n,r,e.getUint32(40,!0),15,4293915773),r=h(r,i,o,n,e.getUint32(4,!0),21,2240044497),n=h(n,r,i,o,e.getUint32(32,!0),6,1873313359),o=h(o,n,r,i,e.getUint32(60,!0),10,4264355552),i=h(i,o,n,r,e.getUint32(24,!0),15,2734768916),r=h(r,i,o,n,e.getUint32(52,!0),21,1309151649),n=h(n,r,i,o,e.getUint32(16,!0),6,4149444226),o=h(o,n,r,i,e.getUint32(44,!0),10,3174756917),i=h(i,o,n,r,e.getUint32(8,!0),15,718787259),r=h(r,i,o,n,e.getUint32(36,!0),21,3951481745),t[0]=n+t[0]&4294967295,t[1]=r+t[1]&4294967295,t[2]=i+t[2]&4294967295,t[3]=o+t[3]&4294967295}},{"./browserHashUtils":12,"buffer/":81}],15:[function(e,t,n){var r=e("buffer/").Buffer,i=e("./browserHashUtils");new Uint32Array([1518500249,1859775393,-1894007588,-899497514]),Math.pow(2,53);function o(){this.h0=1732584193,this.h1=4023233417,this.h2=2562383102,this.h3=271733878,this.h4=3285377520,this.block=new Uint32Array(80),this.offset=0,this.shift=24,this.totalLength=0}t.exports=o,o.BLOCK_SIZE=64,o.prototype.update=function(e){if(this.finished)throw new Error("Attempted to update an already finished hash.");if(i.isEmptyData(e))return this;var t=(e=i.convertToBuffer(e)).length;this.totalLength+=8*t;for(var n=0;n<t;n++)this.write(e[n]);return this},o.prototype.write=function(e){this.block[this.offset]|=(255&e)<<this.shift,this.shift?this.shift-=8:(this.offset++,this.shift=24),16===this.offset&&this.processBlock()},o.prototype.digest=function(e){this.write(128),(this.offset>14||14===this.offset&&this.shift<24)&&this.processBlock(),this.offset=14,this.shift=24,this.write(0),this.write(0),this.write(this.totalLength>0xffffffffff?this.totalLength/1099511627776:0),this.write(this.totalLength>4294967295?this.totalLength/4294967296:0);for(var t=24;t>=0;t-=8)this.write(this.totalLength>>t);var n=new r(20),i=new DataView(n.buffer);return i.setUint32(0,this.h0,!1),i.setUint32(4,this.h1,!1),i.setUint32(8,this.h2,!1),i.setUint32(12,this.h3,!1),i.setUint32(16,this.h4,!1),e?n.toString(e):n},o.prototype.processBlock=function(){for(var e=16;e<80;e++){var t=this.block[e-3]^this.block[e-8]^this.block[e-14]^this.block[e-16];this.block[e]=t<<1|t>>>31}var n,r,i=this.h0,o=this.h1,s=this.h2,a=this.h3,c=this.h4;for(e=0;e<80;e++){e<20?(n=a^o&(s^a),r=1518500249):e<40?(n=o^s^a,r=1859775393):e<60?(n=o&s|a&(o|s),r=2400959708):(n=o^s^a,r=3395469782);var u=(i<<5|i>>>27)+n+c+r+(0|this.block[e]);c=a,a=s,s=o<<30|o>>>2,o=i,i=u}for(this.h0=this.h0+i|0,this.h1=this.h1+o|0,this.h2=this.h2+s|0,this.h3=this.h3+a|0,this.h4=this.h4+c|0,this.offset=0,e=0;e<16;e++)this.block[e]=0}},{"./browserHashUtils":12,"buffer/":81}],16:[function(e,t,n){var r=e("buffer/").Buffer,i=e("./browserHashUtils"),o=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),s=Math.pow(2,53)-1;function a(){this.state=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.temp=new Int32Array(64),this.buffer=new Uint8Array(64),this.bufferLength=0,this.bytesHashed=0,this.finished=!1}t.exports=a,a.BLOCK_SIZE=64,a.prototype.update=function(e){if(this.finished)throw new Error("Attempted to update an already finished hash.");if(i.isEmptyData(e))return this;var t=0,n=(e=i.convertToBuffer(e)).byteLength;if(this.bytesHashed+=n,8*this.bytesHashed>s)throw new Error("Cannot hash more than 2^53 - 1 bits");for(;n>0;)this.buffer[this.bufferLength++]=e[t++],n--,64===this.bufferLength&&(this.hashBuffer(),this.bufferLength=0);return this},a.prototype.digest=function(e){if(!this.finished){var t=8*this.bytesHashed,n=new DataView(this.buffer.buffer,this.buffer.byteOffset,this.buffer.byteLength),i=this.bufferLength;if(n.setUint8(this.bufferLength++,128),i%64>=56){for(var o=this.bufferLength;o<64;o++)n.setUint8(o,0);this.hashBuffer(),this.bufferLength=0}for(o=this.bufferLength;o<56;o++)n.setUint8(o,0);n.setUint32(56,Math.floor(t/4294967296),!0),n.setUint32(60,t),this.hashBuffer(),this.finished=!0}var s=new r(32);for(o=0;o<8;o++)s[4*o]=this.state[o]>>>24&255,s[4*o+1]=this.state[o]>>>16&255,s[4*o+2]=this.state[o]>>>8&255,s[4*o+3]=this.state[o]>>>0&255;return e?s.toString(e):s},a.prototype.hashBuffer=function(){for(var e=this.buffer,t=this.state,n=t[0],r=t[1],i=t[2],s=t[3],a=t[4],c=t[5],u=t[6],l=t[7],h=0;h<64;h++){if(h<16)this.temp[h]=(255&e[4*h])<<24|(255&e[4*h+1])<<16|(255&e[4*h+2])<<8|255&e[4*h+3];else{var p=this.temp[h-2],f=(p>>>17|p<<15)^(p>>>19|p<<13)^p>>>10,d=((p=this.temp[h-15])>>>7|p<<25)^(p>>>18|p<<14)^p>>>3;this.temp[h]=(f+this.temp[h-7]|0)+(d+this.temp[h-16]|0)}var g=(((a>>>6|a<<26)^(a>>>11|a<<21)^(a>>>25|a<<7))+(a&c^~a&u)|0)+(l+(o[h]+this.temp[h]|0)|0)|0,m=((n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10))+(n&r^n&i^r&i)|0;l=u,u=c,c=a,a=s+g|0,s=i,i=r,r=n,n=g+m|0}t[0]+=n,t[1]+=r,t[2]+=i,t[3]+=s,t[4]+=a,t[5]+=c,t[6]+=u,t[7]+=l}},{"./browserHashUtils":12,"buffer/":81}],17:[function(e,t,n){(function(n){var r=e("./util");r.crypto.lib=e("./browserCryptoLib"),r.Buffer=e("buffer/").Buffer,r.url=e("url/"),r.querystring=e("querystring/"),r.realClock=e("./realclock/browserClock"),r.environment="js",r.createEventStream=e("./event-stream/buffered-create-event-stream").createEventStream,r.isBrowser=function(){return!0},r.isNode=function(){return!1};var i=e("./core");if(t.exports=i,e("./credentials"),e("./credentials/credential_provider_chain"),e("./credentials/temporary_credentials"),e("./credentials/chainable_temporary_credentials"),e("./credentials/web_identity_credentials"),e("./credentials/cognito_identity_credentials"),e("./credentials/saml_credentials"),i.XML.Parser=e("./xml/browser_parser"),e("./http/xhr"),void 0===n)n={browser:!0}}).call(this,e("_process"))},{"./browserCryptoLib":11,"./core":19,"./credentials":20,"./credentials/chainable_temporary_credentials":21,"./credentials/cognito_identity_credentials":22,"./credentials/credential_provider_chain":23,"./credentials/saml_credentials":24,"./credentials/temporary_credentials":25,"./credentials/web_identity_credentials":26,"./event-stream/buffered-create-event-stream":28,"./http/xhr":36,"./realclock/browserClock":53,"./util":72,"./xml/browser_parser":73,_process:86,"buffer/":81,"querystring/":93,"url/":95}],18:[function(e,t,n){var r,i=e("./core");e("./credentials"),e("./credentials/credential_provider_chain"),i.Config=i.util.inherit({constructor:function(e){void 0===e&&(e={}),e=this.extractCredentials(e),i.util.each.call(this,this.keys,(function(t,n){this.set(t,e[t],n)}))},getCredentials:function(e){var t,n=this;function r(t){e(t,t?null:n.credentials)}function o(e,t){return new i.util.error(t||new Error,{code:"CredentialsError",message:e,name:"CredentialsError"})}n.credentials?"function"==typeof n.credentials.get?n.credentials.get((function(e){e&&(e=o("Could not load credentials from "+n.credentials.constructor.name,e)),r(e)})):(t=null,n.credentials.accessKeyId&&n.credentials.secretAccessKey||(t=o("Missing credentials")),r(t)):n.credentialProvider?n.credentialProvider.resolve((function(e,t){e&&(e=o("Could not load credentials from any providers",e)),n.credentials=t,r(e)})):r(o("No credentials to load"))},update:function(e,t){t=t||!1,e=this.extractCredentials(e),i.util.each.call(this,e,(function(e,n){(t||Object.prototype.hasOwnProperty.call(this.keys,e)||i.Service.hasService(e))&&this.set(e,n)}))},loadFromPath:function(e){this.clear();var t=JSON.parse(i.util.readFileSync(e)),n=new i.FileSystemCredentials(e),r=new i.CredentialProviderChain;return r.providers.unshift(n),r.resolve((function(e,n){if(e)throw e;t.credentials=n})),this.constructor(t),this},clear:function(){i.util.each.call(this,this.keys,(function(e){delete this[e]})),this.set("credentials",void 0),this.set("credentialProvider",void 0)},set:function(e,t,n){void 0===t?(void 0===n&&(n=this.keys[e]),this[e]="function"==typeof n?n.call(this):n):"httpOptions"===e&&this[e]?this[e]=i.util.merge(this[e],t):this[e]=t},keys:{credentials:null,credentialProvider:null,region:null,logger:null,apiVersions:{},apiVersion:null,endpoint:void 0,httpOptions:{timeout:12e4},maxRetries:void 0,maxRedirects:10,paramValidation:!0,sslEnabled:!0,s3ForcePathStyle:!1,s3BucketEndpoint:!1,s3DisableBodySigning:!0,computeChecksums:!0,convertResponseTypes:!0,correctClockSkew:!1,customUserAgent:null,dynamoDbCrc32:!0,systemClockOffset:0,signatureVersion:null,signatureCache:!0,retryDelayOptions:{},useAccelerateEndpoint:!1,clientSideMonitoring:!1,endpointDiscoveryEnabled:!1,endpointCacheSize:1e3,hostPrefixEnabled:!0,stsRegionalEndpoints:null},extractCredentials:function(e){return e.accessKeyId&&e.secretAccessKey&&((e=i.util.copy(e)).credentials=new i.Credentials(e)),e},setPromisesDependency:function(e){r=e,null===e&&"function"==typeof Promise&&(r=Promise);var t=[i.Request,i.Credentials,i.CredentialProviderChain];i.S3&&(t.push(i.S3),i.S3.ManagedUpload&&t.push(i.S3.ManagedUpload)),i.util.addPromises(t,r)},getPromisesDependency:function(){return r}}),i.config=new i.Config},{"./core":19,"./credentials":20,"./credentials/credential_provider_chain":23}],19:[function(e,t,n){var r={util:e("./util")};({}).toString(),t.exports=r,r.util.update(r,{VERSION:"2.556.0",Signers:{},Protocol:{Json:e("./protocol/json"),Query:e("./protocol/query"),Rest:e("./protocol/rest"),RestJson:e("./protocol/rest_json"),RestXml:e("./protocol/rest_xml")},XML:{Builder:e("./xml/builder"),Parser:null},JSON:{Builder:e("./json/builder"),Parser:e("./json/parser")},Model:{Api:e("./model/api"),Operation:e("./model/operation"),Shape:e("./model/shape"),Paginator:e("./model/paginator"),ResourceWaiter:e("./model/resource_waiter")},apiLoader:e("./api_loader"),EndpointCache:e("../vendor/endpoint-cache").EndpointCache}),e("./sequential_executor"),e("./service"),e("./config"),e("./http"),e("./event_listeners"),e("./request"),e("./response"),e("./resource_waiter"),e("./signers/request_signer"),e("./param_validator"),r.events=new r.SequentialExecutor,r.util.memoizedProperty(r,"endpointCache",(function(){return new r.EndpointCache(r.config.endpointCacheSize)}),!0)},{"../vendor/endpoint-cache":104,"./api_loader":10,"./config":18,"./event_listeners":34,"./http":35,"./json/builder":37,"./json/parser":38,"./model/api":39,"./model/operation":41,"./model/paginator":42,"./model/resource_waiter":43,"./model/shape":44,"./param_validator":45,"./protocol/json":47,"./protocol/query":48,"./protocol/rest":49,"./protocol/rest_json":50,"./protocol/rest_xml":51,"./request":56,"./resource_waiter":57,"./response":58,"./sequential_executor":59,"./service":60,"./signers/request_signer":64,"./util":72,"./xml/builder":74}],20:[function(e,t,n){var r=e("./core");r.Credentials=r.util.inherit({constructor:function(){if(r.util.hideProperties(this,["secretAccessKey"]),this.expired=!1,this.expireTime=null,this.refreshCallbacks=[],1===arguments.length&&"object"===i(arguments[0])){var e=arguments[0].credentials||arguments[0];this.accessKeyId=e.accessKeyId,this.secretAccessKey=e.secretAccessKey,this.sessionToken=e.sessionToken}else this.accessKeyId=arguments[0],this.secretAccessKey=arguments[1],this.sessionToken=arguments[2]},expiryWindow:15,needsRefresh:function(){var e=r.util.date.getDate().getTime(),t=new Date(e+1e3*this.expiryWindow);return!!(this.expireTime&&t>this.expireTime)||(this.expired||!this.accessKeyId||!this.secretAccessKey)},get:function(e){var t=this;this.needsRefresh()?this.refresh((function(n){n||(t.expired=!1),e&&e(n)})):e&&e()},refresh:function(e){this.expired=!1,e()},coalesceRefresh:function(e,t){var n=this;1===n.refreshCallbacks.push(e)&&n.load((function(e){r.util.arrayEach(n.refreshCallbacks,(function(n){t?n(e):r.util.defer((function(){n(e)}))})),n.refreshCallbacks.length=0}))},load:function(e){e()}}),r.Credentials.addPromisesToClass=function(e){this.prototype.getPromise=r.util.promisifyMethod("get",e),this.prototype.refreshPromise=r.util.promisifyMethod("refresh",e)},r.Credentials.deletePromisesFromClass=function(){delete this.prototype.getPromise,delete this.prototype.refreshPromise},r.util.addPromises(r.Credentials)},{"./core":19}],21:[function(e,t,n){var r=e("../core"),i=e("../../clients/sts");r.ChainableTemporaryCredentials=r.util.inherit(r.Credentials,{constructor:function(e){r.Credentials.call(this),e=e||{},this.errorCode="ChainableTemporaryCredentialsProviderFailure",this.expired=!0,this.tokenCodeFn=null;var t=r.util.copy(e.params)||{};if(t.RoleArn&&(t.RoleSessionName=t.RoleSessionName||"temporary-credentials"),t.SerialNumber){if(!e.tokenCodeFn||"function"!=typeof e.tokenCodeFn)throw new r.util.error(new Error("tokenCodeFn must be a function when params.SerialNumber is given"),{code:this.errorCode});this.tokenCodeFn=e.tokenCodeFn}var n=r.util.merge({params:t,credentials:e.masterCredentials||r.config.credentials},e.stsConfig||{});this.service=new i(n)},refresh:function(e){this.coalesceRefresh(e||r.util.fn.callback)},load:function(e){var t=this,n=t.service.config.params.RoleArn?"assumeRole":"getSessionToken";this.getTokenCode((function(r,i){var o={};r?e(r):(i&&(o.TokenCode=i),t.service[n](o,(function(n,r){n||t.service.credentialsFrom(r,t),e(n)})))}))},getTokenCode:function(e){var t=this;this.tokenCodeFn?this.tokenCodeFn(this.service.config.params.SerialNumber,(function(n,i){if(n){var o=n;return n instanceof Error&&(o=n.message),void e(r.util.error(new Error("Error fetching MFA token: "+o),{code:t.errorCode}))}e(null,i)})):e(null)}})},{"../../clients/sts":9,"../core":19}],22:[function(e,t,n){var r=e("../core"),o=e("../../clients/cognitoidentity"),s=e("../../clients/sts");r.CognitoIdentityCredentials=r.util.inherit(r.Credentials,{localStorageKey:{id:"aws.cognito.identity-id.",providers:"aws.cognito.identity-providers."},constructor:function(e,t){r.Credentials.call(this),this.expired=!0,this.params=e,this.data=null,this._identityId=null,this._clientConfig=r.util.copy(t||{}),this.loadCachedId();var n=this;Object.defineProperty(this,"identityId",{get:function(){return n.loadCachedId(),n._identityId||n.params.IdentityId},set:function(e){n._identityId=e}})},refresh:function(e){this.coalesceRefresh(e||r.util.fn.callback)},load:function(e){var t=this;t.createClients(),t.data=null,t._identityId=null,t.getId((function(n){n?(t.clearIdOnNotAuthorized(n),e(n)):t.params.RoleArn?t.getCredentialsFromSTS(e):t.getCredentialsForIdentity(e)}))},clearCachedId:function(){this._identityId=null,delete this.params.IdentityId;var e=this.params.IdentityPoolId,t=this.params.LoginId||"";delete this.storage[this.localStorageKey.id+e+t],delete this.storage[this.localStorageKey.providers+e+t]},clearIdOnNotAuthorized:function(e){"NotAuthorizedException"==e.code&&this.clearCachedId()},getId:function(e){var t=this;if("string"==typeof t.params.IdentityId)return e(null,t.params.IdentityId);t.cognito.getId((function(n,r){!n&&r.IdentityId?(t.params.IdentityId=r.IdentityId,e(null,r.IdentityId)):e(n)}))},loadCredentials:function(e,t){e&&t&&(t.expired=!1,t.accessKeyId=e.Credentials.AccessKeyId,t.secretAccessKey=e.Credentials.SecretKey,t.sessionToken=e.Credentials.SessionToken,t.expireTime=e.Credentials.Expiration)},getCredentialsForIdentity:function(e){var t=this;t.cognito.getCredentialsForIdentity((function(n,r){n?t.clearIdOnNotAuthorized(n):(t.cacheId(r),t.data=r,t.loadCredentials(t.data,t)),e(n)}))},getCredentialsFromSTS:function(e){var t=this;t.cognito.getOpenIdToken((function(n,r){n?(t.clearIdOnNotAuthorized(n),e(n)):(t.cacheId(r),t.params.WebIdentityToken=r.Token,t.webIdentityCredentials.refresh((function(n){n||(t.data=t.webIdentityCredentials.data,t.sts.credentialsFrom(t.data,t)),e(n)})))}))},loadCachedId:function(){if(r.util.isBrowser()&&!this.params.IdentityId){var e=this.getStorage("id");if(e&&this.params.Logins){var t=Object.keys(this.params.Logins);0!==(this.getStorage("providers")||"").split(",").filter((function(e){return-1!==t.indexOf(e)})).length&&(this.params.IdentityId=e)}else e&&(this.params.IdentityId=e)}},createClients:function(){var e=this._clientConfig;if(this.webIdentityCredentials=this.webIdentityCredentials||new r.WebIdentityCredentials(this.params,e),!this.cognito){var t=r.util.merge({},e);t.params=this.params,this.cognito=new o(t)}this.sts=this.sts||new s(e)},cacheId:function(e){this._identityId=e.IdentityId,this.params.IdentityId=this._identityId,r.util.isBrowser()&&(this.setStorage("id",e.IdentityId),this.params.Logins&&this.setStorage("providers",Object.keys(this.params.Logins).join(",")))},getStorage:function(e){return this.storage[this.localStorageKey[e]+this.params.IdentityPoolId+(this.params.LoginId||"")]},setStorage:function(e,t){try{this.storage[this.localStorageKey[e]+this.params.IdentityPoolId+(this.params.LoginId||"")]=t}catch(e){}},storage:function(){try{var e=r.util.isBrowser()&&null!==window.localStorage&&"object"===i(window.localStorage)?window.localStorage:{};return e["aws.test-storage"]="foobar",delete e["aws.test-storage"],e}catch(e){return{}}}()})},{"../../clients/cognitoidentity":8,"../../clients/sts":9,"../core":19}],23:[function(e,t,n){var r=e("../core");r.CredentialProviderChain=r.util.inherit(r.Credentials,{constructor:function(e){this.providers=e||r.CredentialProviderChain.defaultProviders.slice(0),this.resolveCallbacks=[]},resolve:function(e){var t=this;if(0===t.providers.length)return e(new Error("No providers")),t;if(1===t.resolveCallbacks.push(e)){var n=0,i=t.providers.slice(0);!function e(o,s){if(!o&&s||n===i.length)return r.util.arrayEach(t.resolveCallbacks,(function(e){e(o,s)})),void(t.resolveCallbacks.length=0);var a=i[n++];(s="function"==typeof a?a.call():a).get?s.get((function(t){e(t,t?null:s)})):e(null,s)}()}return t}}),r.CredentialProviderChain.defaultProviders=[],r.CredentialProviderChain.addPromisesToClass=function(e){this.prototype.resolvePromise=r.util.promisifyMethod("resolve",e)},r.CredentialProviderChain.deletePromisesFromClass=function(){delete this.prototype.resolvePromise},r.util.addPromises(r.CredentialProviderChain)},{"../core":19}],24:[function(e,t,n){var r=e("../core"),i=e("../../clients/sts");r.SAMLCredentials=r.util.inherit(r.Credentials,{constructor:function(e){r.Credentials.call(this),this.expired=!0,this.params=e},refresh:function(e){this.coalesceRefresh(e||r.util.fn.callback)},load:function(e){var t=this;t.createClients(),t.service.assumeRoleWithSAML((function(n,r){n||t.service.credentialsFrom(r,t),e(n)}))},createClients:function(){this.service=this.service||new i({params:this.params})}})},{"../../clients/sts":9,"../core":19}],25:[function(e,t,n){var r=e("../core"),i=e("../../clients/sts");r.TemporaryCredentials=r.util.inherit(r.Credentials,{constructor:function(e,t){r.Credentials.call(this),this.loadMasterCredentials(t),this.expired=!0,this.params=e||{},this.params.RoleArn&&(this.params.RoleSessionName=this.params.RoleSessionName||"temporary-credentials")},refresh:function(e){this.coalesceRefresh(e||r.util.fn.callback)},load:function(e){var t=this;t.createClients(),t.masterCredentials.get((function(){t.service.config.credentials=t.masterCredentials,(t.params.RoleArn?t.service.assumeRole:t.service.getSessionToken).call(t.service,(function(n,r){n||t.service.credentialsFrom(r,t),e(n)}))}))},loadMasterCredentials:function(e){for(this.masterCredentials=e||r.config.credentials;this.masterCredentials.masterCredentials;)this.masterCredentials=this.masterCredentials.masterCredentials;"function"!=typeof this.masterCredentials.get&&(this.masterCredentials=new r.Credentials(this.masterCredentials))},createClients:function(){this.service=this.service||new i({params:this.params})}})},{"../../clients/sts":9,"../core":19}],26:[function(e,t,n){var r=e("../core"),i=e("../../clients/sts");r.WebIdentityCredentials=r.util.inherit(r.Credentials,{constructor:function(e,t){r.Credentials.call(this),this.expired=!0,this.params=e,this.params.RoleSessionName=this.params.RoleSessionName||"web-identity",this.data=null,this._clientConfig=r.util.copy(t||{})},refresh:function(e){this.coalesceRefresh(e||r.util.fn.callback)},load:function(e){var t=this;t.createClients(),t.service.assumeRoleWithWebIdentity((function(n,r){t.data=null,n||(t.data=r,t.service.credentialsFrom(r,t)),e(n)}))},createClients:function(){if(!this.service){var e=r.util.merge({},this._clientConfig);e.params=this.params,this.service=new i(e)}}})},{"../../clients/sts":9,"../core":19}],27:[function(e,t,n){(function(n){var r=e("./core"),i=e("./util"),o=["AWS_ENABLE_ENDPOINT_DISCOVERY","AWS_ENDPOINT_DISCOVERY_ENABLED"];function s(e){var t=e.service,n=t.api||{},r=(n.operations,{});return t.config.region&&(r.region=t.config.region),n.serviceId&&(r.serviceId=n.serviceId),t.config.credentials.accessKeyId&&(r.accessKeyId=t.config.credentials.accessKeyId),r}function a(e,t){var n={};return function e(t,n,r){r&&null!=n&&"structure"===r.type&&r.required&&r.required.length>0&&i.arrayEach(r.required,(function(i){var o=r.members[i];if(!0===o.endpointDiscoveryId){var s=o.isLocationName?o.name:i;t[s]=String(n[i])}else e(t,n[i],o)}))}(n,e.params,t),n}function c(e){var t=e.service,n=t.api,o=n.operations?n.operations[e.operation]:void 0,c=a(e,o?o.input:void 0),u=s(e);Object.keys(c).length>0&&(u=i.update(u,c),o&&(u.operation=o.name));var l=r.endpointCache.get(u);if(!l||1!==l.length||""!==l[0].Address)if(l&&l.length>0)e.httpRequest.updateEndpoint(l[0].Address);else{var p=t.makeRequest(n.endpointOperation,{Operation:o.name,Identifiers:c});h(p),p.removeListener("validate",r.EventListeners.Core.VALIDATE_PARAMETERS),p.removeListener("retry",r.EventListeners.Core.RETRY_CHECK),r.endpointCache.put(u,[{Address:"",CachePeriodInMinutes:1}]),p.send((function(e,t){t&&t.Endpoints?r.endpointCache.put(u,t.Endpoints):e&&r.endpointCache.put(u,[{Address:"",CachePeriodInMinutes:1}])}))}}var u={};function l(e,t){var n=e.service,o=n.api,c=o.operations?o.operations[e.operation]:void 0,l=c?c.input:void 0,p=a(e,l),f=s(e);Object.keys(p).length>0&&(f=i.update(f,p),c&&(f.operation=c.name));var d=r.EndpointCache.getKeyString(f),g=r.endpointCache.get(d);if(g&&1===g.length&&""===g[0].Address)return u[d]||(u[d]=[]),void u[d].push({request:e,callback:t});if(g&&g.length>0)e.httpRequest.updateEndpoint(g[0].Address),t();else{var m=n.makeRequest(o.endpointOperation,{Operation:c.name,Identifiers:p});m.removeListener("validate",r.EventListeners.Core.VALIDATE_PARAMETERS),h(m),r.endpointCache.put(d,[{Address:"",CachePeriodInMinutes:60}]),m.send((function(n,o){if(n){var s={code:"EndpointDiscoveryException",message:"Request cannot be fulfilled without specifying an endpoint",retryable:!1};if(e.response.error=i.error(n,s),r.endpointCache.remove(f),u[d]){var a=u[d];i.arrayEach(a,(function(e){e.request.response.error=i.error(n,s),e.callback()})),delete u[d]}}else if(o&&(r.endpointCache.put(d,o.Endpoints),e.httpRequest.updateEndpoint(o.Endpoints[0].Address),u[d])){a=u[d];i.arrayEach(a,(function(e){e.request.httpRequest.updateEndpoint(o.Endpoints[0].Address),e.callback()})),delete u[d]}t()}))}}function h(e){var t=e.service.api.apiVersion;t&&!e.httpRequest.headers["x-amz-api-version"]&&(e.httpRequest.headers["x-amz-api-version"]=t)}function p(e){var t=e.error,n=e.httpResponse;if(t&&("InvalidEndpointException"===t.code||421===n.statusCode)){var o=e.request,c=o.service.api.operations||{},u=a(o,c[o.operation]?c[o.operation].input:void 0),l=s(o);Object.keys(u).length>0&&(l=i.update(l,u),c[o.operation]&&(l.operation=c[o.operation].name)),r.endpointCache.remove(l)}}function f(e){return["false","0"].indexOf(e)>=0}t.exports={discoverEndpoint:function(e,t){var s=e.service||{};if(function(e){if(e._originalConfig&&e._originalConfig.endpoint&&!0===e._originalConfig.endpointDiscoveryEnabled)throw i.error(new Error,{code:"ConfigurationException",message:"Custom endpoint is supplied; endpointDiscoveryEnabled must not be true."});var t=r.config[e.serviceIdentifier]||{};return Boolean(r.config.endpoint||t.endpoint||e._originalConfig&&e._originalConfig.endpoint)}(s)||e.isPresigned())return t();if(!function(e){if(!0===(e.service||{}).config.endpointDiscoveryEnabled)return!0;if(i.isBrowser())return!1;for(var t=0;t<o.length;t++){var s=o[t];if(Object.prototype.hasOwnProperty.call(n.env,s)){if(""===n.env[s]||void 0===n.env[s])throw i.error(new Error,{code:"ConfigurationException",message:"environmental variable "+s+" cannot be set to nothing"});if(!f(n.env[s]))return!0}}var a={};try{a=r.util.iniLoader?r.util.iniLoader.loadFrom({isConfig:!0,filename:n.env[r.util.sharedConfigFileEnv]}):{}}catch(e){}var c=a[n.env.AWS_PROFILE||r.util.defaultProfile]||{};if(Object.prototype.hasOwnProperty.call(c,"endpoint_discovery_enabled")){if(void 0===c.endpoint_discovery_enabled)throw i.error(new Error,{code:"ConfigurationException",message:"config file entry 'endpoint_discovery_enabled' cannot be set to nothing"});if(!f(c.endpoint_discovery_enabled))return!0}return!1}(e))return t();e.httpRequest.appendToUserAgent("endpoint-discovery");var a=(s.api.operations||{})[e.operation];switch(a?a.endpointDiscoveryRequired:"NULL"){case"OPTIONAL":c(e),e.addNamedListener("INVALIDATE_CACHED_ENDPOINTS","extractError",p),t();break;case"REQUIRED":e.addNamedListener("INVALIDATE_CACHED_ENDPOINTS","extractError",p),l(e,t);break;case"NULL":default:t()}},requiredDiscoverEndpoint:l,optionalDiscoverEndpoint:c,marshallCustomIdentifiers:a,getCacheKey:s,invalidateCachedEndpoint:p}}).call(this,e("_process"))},{"./core":19,"./util":72,_process:86}],28:[function(e,t,n){var r=e("../event-stream/event-message-chunker").eventMessageChunker,i=e("./parse-event").parseEvent;t.exports={createEventStream:function(e,t,n){for(var o=r(e),s=[],a=0;a<o.length;a++)s.push(i(t,o[a],n));return s}}},{"../event-stream/event-message-chunker":29,"./parse-event":31}],29:[function(e,t,n){t.exports={eventMessageChunker:function(e){for(var t=[],n=0;n<e.length;){var r=e.readInt32BE(n),i=e.slice(n,r+n);n+=r,t.push(i)}return t}}},{}],30:[function(e,t,n){var r=e("../core").util,i=r.buffer.toBuffer;function o(e){if(8!==e.length)throw new Error("Int64 buffers must be exactly 8 bytes");r.Buffer.isBuffer(e)||(e=i(e)),this.bytes=e}function s(e){for(var t=0;t<8;t++)e[t]^=255;for(t=7;t>-1&&(e[t]++,0===e[t]);t--);}o.fromNumber=function(e){if(e>0x8000000000000000||e<-0x8000000000000000)throw new Error(e+" is too large (or, if negative, too small) to represent as an Int64");for(var t=new Uint8Array(8),n=7,r=Math.abs(Math.round(e));n>-1&&r>0;n--,r/=256)t[n]=r;return e<0&&s(t),new o(t)},o.prototype.valueOf=function(){var e=this.bytes.slice(0),t=128&e[0];return t&&s(e),parseInt(e.toString("hex"),16)*(t?-1:1)},o.prototype.toString=function(){return String(this.valueOf())},t.exports={Int64:o}},{"../core":19}],31:[function(e,t,n){var r=e("./parse-message").parseMessage;t.exports={parseEvent:function(e,t,n){var i=r(t),o=i.headers[":message-type"];if(o){if("error"===o.value)throw function(e){var t=e.headers[":error-code"],n=e.headers[":error-message"],r=new Error(n.value||n);return r.code=r.name=t.value||t,r}(i);if("event"!==o.value)return}var s=i.headers[":event-type"],a=n.members[s.value];if(a){var c={},u=a.eventPayloadMemberName;if(u){var l=a.members[u];"binary"===l.type?c[u]=i.body:c[u]=e.parse(i.body.toString(),l)}for(var h=a.eventHeaderMemberNames,p=0;p<h.length;p++){var f=h[p];i.headers[f]&&(c[f]=a.members[f].toType(i.headers[f].value))}var d={};return d[s.value]=c,d}}}},{"./parse-message":32}],32:[function(e,t,n){var r=e("./int64").Int64,i=e("./split-message").splitMessage,o="boolean",s="byte",a="short",c="integer",u="long",l="binary",h="string",p="timestamp",f="uuid";function d(e){for(var t={},n=0;n<e.length;){var i=e.readUInt8(n++),d=e.slice(n,n+i).toString();switch(n+=i,e.readUInt8(n++)){case 0:t[d]={type:o,value:!0};break;case 1:t[d]={type:o,value:!1};break;case 2:t[d]={type:s,value:e.readInt8(n++)};break;case 3:t[d]={type:a,value:e.readInt16BE(n)},n+=2;break;case 4:t[d]={type:c,value:e.readInt32BE(n)},n+=4;break;case 5:t[d]={type:u,value:new r(e.slice(n,n+8))},n+=8;break;case 6:var g=e.readUInt16BE(n);n+=2,t[d]={type:l,value:e.slice(n,n+g)},n+=g;break;case 7:var m=e.readUInt16BE(n);n+=2,t[d]={type:h,value:e.slice(n,n+m).toString()},n+=m;break;case 8:t[d]={type:p,value:new Date(new r(e.slice(n,n+8)).valueOf())},n+=8;break;case 9:var v=e.slice(n,n+16).toString("hex");n+=16,t[d]={type:f,value:v.substr(0,8)+"-"+v.substr(8,4)+"-"+v.substr(12,4)+"-"+v.substr(16,4)+"-"+v.substr(20)};break;default:throw new Error("Unrecognized header type tag")}}return t}t.exports={parseMessage:function(e){var t=i(e);return{headers:d(t.headers),body:t.body}}}},{"./int64":30,"./split-message":33}],33:[function(e,t,n){var r=e("../core").util,i=r.buffer.toBuffer,o=4,s=2*o,a=4,c=s+2*a;t.exports={splitMessage:function(e){if(r.Buffer.isBuffer(e)||(e=i(e)),e.length<c)throw new Error("Provided message too short to accommodate event stream message overhead");if(e.length!==e.readUInt32BE(0))throw new Error("Reported message length does not match received message length");var t=e.readUInt32BE(s);if(t!==r.crypto.crc32(e.slice(0,s)))throw new Error("The prelude checksum specified in the message ("+t+") does not match the calculated CRC32 checksum.");var n=e.readUInt32BE(e.length-a);if(n!==r.crypto.crc32(e.slice(0,e.length-a)))throw new Error("The message checksum did not match the expected value of "+n);var u=s+a,l=u+e.readUInt32BE(o);return{headers:e.slice(u,l),body:e.slice(l,e.length-a)}}}},{"../core":19}],34:[function(e,t,n){var r=e("./core"),i=e("./sequential_executor"),o=e("./discover_endpoint").discoverEndpoint;r.EventListeners={Core:{}},r.EventListeners={Core:(new i).addNamedListeners((function(e,t){t("VALIDATE_CREDENTIALS","validate",(function(e,t){if(!e.service.api.signatureVersion&&!e.service.config.signatureVersion)return t();e.service.config.getCredentials((function(n){n&&(e.response.error=r.util.error(n,{code:"CredentialsError",message:"Missing credentials in config"})),t()}))})),e("VALIDATE_REGION","validate",(function(e){e.service.config.region||e.service.isGlobalEndpoint||(e.response.error=r.util.error(new Error,{code:"ConfigError",message:"Missing region in config"}))})),e("BUILD_IDEMPOTENCY_TOKENS","validate",(function(e){if(e.service.api.operations){var t=e.service.api.operations[e.operation];if(t){var n=t.idempotentMembers;if(n.length){for(var i=r.util.copy(e.params),o=0,s=n.length;o<s;o++)i[n[o]]||(i[n[o]]=r.util.uuid.v4());e.params=i}}}})),e("VALIDATE_PARAMETERS","validate",(function(e){if(e.service.api.operations){var t=e.service.api.operations[e.operation].input,n=e.service.config.paramValidation;new r.ParamValidator(n).validate(t,e.params)}})),t("COMPUTE_SHA256","afterBuild",(function(e,t){if(e.haltHandlersOnError(),e.service.api.operations){var n=e.service.api.operations[e.operation],i=n?n.authtype:"";if(!e.service.api.signatureVersion&&!i&&!e.service.config.signatureVersion)return t();if(e.service.getSignerClass(e)===r.Signers.V4){var o=e.httpRequest.body||"";if(i.indexOf("unsigned-body")>=0)return e.httpRequest.headers["X-Amz-Content-Sha256"]="UNSIGNED-PAYLOAD",t();r.util.computeSha256(o,(function(n,r){n?t(n):(e.httpRequest.headers["X-Amz-Content-Sha256"]=r,t())}))}else t()}})),e("SET_CONTENT_LENGTH","afterBuild",(function(e){var t=function(e){if(!e.service.api.operations)return"";var t=e.service.api.operations[e.operation];return t?t.authtype:""}(e),n=r.util.getRequestPayloadShape(e);if(void 0===e.httpRequest.headers["Content-Length"])try{var i=r.util.string.byteLength(e.httpRequest.body);e.httpRequest.headers["Content-Length"]=i}catch(r){if(n&&n.isStreaming){if(n.requiresLength)throw r;if(t.indexOf("unsigned-body")>=0)return void(e.httpRequest.headers["Transfer-Encoding"]="chunked");throw r}throw r}})),e("SET_HTTP_HOST","afterBuild",(function(e){e.httpRequest.headers.Host=e.httpRequest.endpoint.host})),e("RESTART","restart",(function(){var e=this.response.error;e&&e.retryable&&(this.httpRequest=new r.HttpRequest(this.service.endpoint,this.service.region),this.response.retryCount<this.service.config.maxRetries?this.response.retryCount++:this.response.error=null)}));t("DISCOVER_ENDPOINT","sign",o,!0),t("SIGN","sign",(function(e,t){var n=e.service,r=(e.service.api.operations||{})[e.operation],i=r?r.authtype:"";if(!n.api.signatureVersion&&!i&&!n.config.signatureVersion)return t();n.config.getCredentials((function(i,o){if(i)return e.response.error=i,t();try{var s=n.getSkewCorrectedDate(),a=new(n.getSignerClass(e))(e.httpRequest,n.api.signingName||n.api.endpointPrefix,{signatureCache:n.config.signatureCache,operation:r,signatureVersion:n.api.signatureVersion});a.setServiceClientId(n._clientId),delete e.httpRequest.headers.Authorization,delete e.httpRequest.headers.Date,delete e.httpRequest.headers["X-Amz-Date"],a.addAuthorization(o,s),e.signedAt=s}catch(t){e.response.error=t}t()}))})),e("VALIDATE_RESPONSE","validateResponse",(function(e){this.service.successfulResponse(e,this)?(e.data={},e.error=null):(e.data=null,e.error=r.util.error(new Error,{code:"UnknownError",message:"An unknown error occurred."}))})),t("SEND","send",(function(e,t){function n(n){e.httpResponse.stream=n;var i=e.request.httpRequest.stream,o=e.request.service,s=o.api,a=e.request.operation,c=s.operations[a]||{};n.on("headers",(function(i,s,a){if(e.request.emit("httpHeaders",[i,s,e,a]),!e.httpResponse.streaming)if(2===r.HttpClient.streamsApiVersion){if(c.hasEventOutput&&o.successfulResponse(e))return e.request.emit("httpDone"),void t();n.on("readable",(function(){var t=n.read();null!==t&&e.request.emit("httpData",[t,e])}))}else n.on("data",(function(t){e.request.emit("httpData",[t,e])}))})),n.on("end",(function(){if(!i||!i.didCallback){if(2===r.HttpClient.streamsApiVersion&&c.hasEventOutput&&o.successfulResponse(e))return;e.request.emit("httpDone"),t()}}))}function i(n){if("RequestAbortedError"!==n.code){var i="TimeoutError"===n.code?n.code:"NetworkingError";n=r.util.error(n,{code:i,region:e.request.httpRequest.region,hostname:e.request.httpRequest.endpoint.hostname,retryable:!0})}e.error=n,e.request.emit("httpError",[e.error,e],(function(){t()}))}function o(){var t,o=r.HttpClient.getInstance(),s=e.request.service.config.httpOptions||{};try{var a=o.handleRequest(e.request.httpRequest,s,n,i);(t=a).on("sendProgress",(function(t){e.request.emit("httpUploadProgress",[t,e])})),t.on("receiveProgress",(function(t){e.request.emit("httpDownloadProgress",[t,e])}))}catch(e){i(e)}}e.httpResponse._abortCallback=t,e.error=null,e.data=null,(e.request.service.getSkewCorrectedDate()-this.signedAt)/1e3>=600?this.emit("sign",[this],(function(e){e?t(e):o()})):o()})),e("HTTP_HEADERS","httpHeaders",(function(e,t,n,i){n.httpResponse.statusCode=e,n.httpResponse.statusMessage=i,n.httpResponse.headers=t,n.httpResponse.body=r.util.buffer.toBuffer(""),n.httpResponse.buffers=[],n.httpResponse.numBytes=0;var o=t.date||t.Date,s=n.request.service;if(o){var a=Date.parse(o);s.config.correctClockSkew&&s.isClockSkewed(a)&&s.applyClockOffset(a)}})),e("HTTP_DATA","httpData",(function(e,t){if(e){if(r.util.isNode()){t.httpResponse.numBytes+=e.length;var n=t.httpResponse.headers["content-length"],i={loaded:t.httpResponse.numBytes,total:n};t.request.emit("httpDownloadProgress",[i,t])}t.httpResponse.buffers.push(r.util.buffer.toBuffer(e))}})),e("HTTP_DONE","httpDone",(function(e){if(e.httpResponse.buffers&&e.httpResponse.buffers.length>0){var t=r.util.buffer.concat(e.httpResponse.buffers);e.httpResponse.body=t}delete e.httpResponse.numBytes,delete e.httpResponse.buffers})),e("FINALIZE_ERROR","retry",(function(e){e.httpResponse.statusCode&&(e.error.statusCode=e.httpResponse.statusCode,void 0===e.error.retryable&&(e.error.retryable=this.service.retryableError(e.error,this)))})),e("INVALIDATE_CREDENTIALS","retry",(function(e){if(e.error)switch(e.error.code){case"RequestExpired":case"ExpiredTokenException":case"ExpiredToken":e.error.retryable=!0,e.request.service.config.credentials.expired=!0}})),e("EXPIRED_SIGNATURE","retry",(function(e){var t=e.error;t&&"string"==typeof t.code&&"string"==typeof t.message&&t.code.match(/Signature/)&&t.message.match(/expired/)&&(e.error.retryable=!0)})),e("CLOCK_SKEWED","retry",(function(e){e.error&&this.service.clockSkewError(e.error)&&this.service.config.correctClockSkew&&(e.error.retryable=!0)})),e("REDIRECT","retry",(function(e){e.error&&e.error.statusCode>=300&&e.error.statusCode<400&&e.httpResponse.headers.location&&(this.httpRequest.endpoint=new r.Endpoint(e.httpResponse.headers.location),this.httpRequest.headers.Host=this.httpRequest.endpoint.host,e.error.redirect=!0,e.error.retryable=!0)})),e("RETRY_CHECK","retry",(function(e){e.error&&(e.error.redirect&&e.redirectCount<e.maxRedirects?e.error.retryDelay=0:e.retryCount<e.maxRetries&&(e.error.retryDelay=this.service.retryDelays(e.retryCount)||0))})),t("RESET_RETRY_STATE","afterRetry",(function(e,t){var n,r=!1;e.error&&(n=e.error.retryDelay||0,e.error.retryable&&e.retryCount<e.maxRetries?(e.retryCount++,r=!0):e.error.redirect&&e.redirectCount<e.maxRedirects&&(e.redirectCount++,r=!0)),r?(e.error=null,setTimeout(t,n)):t()}))})),CorePost:(new i).addNamedListeners((function(e){e("EXTRACT_REQUEST_ID","extractData",r.util.extractRequestId),e("EXTRACT_REQUEST_ID","extractError",r.util.extractRequestId),e("ENOTFOUND_ERROR","httpError",(function(e){if("NetworkingError"===e.code&&"ENOTFOUND"===e.errno){var t="Inaccessible host: `"+e.hostname+"'. This service may not be available in the `"+e.region+"' region.";this.response.error=r.util.error(new Error(t),{code:"UnknownEndpoint",region:e.region,hostname:e.hostname,retryable:!0,originalError:e})}}))})),Logger:(new i).addNamedListeners((function(t){t("LOG_REQUEST","complete",(function(t){var n=t.request,i=n.service.config.logger;if(i){var o=function(){var o=(t.request.service.getSkewCorrectedDate().getTime()-n.startTime.getTime())/1e3,s=!!i.isTTY,a=t.httpResponse.statusCode,c=n.params;n.service.api.operations&&n.service.api.operations[n.operation]&&n.service.api.operations[n.operation].input&&(c=function e(t,n){if(!n)return n;switch(t.type){case"structure":var i={};return r.util.each(n,(function(n,r){Object.prototype.hasOwnProperty.call(t.members,n)?i[n]=e(t.members[n],r):i[n]=r})),i;case"list":var o=[];return r.util.arrayEach(n,(function(n,r){o.push(e(t.member,n))})),o;case"map":var s={};return r.util.each(n,(function(n,r){s[n]=e(t.value,r)})),s;default:return t.isSensitive?"***SensitiveInformation***":n}}(n.service.api.operations[n.operation].input,n.params));var u=e("util").inspect(c,!0,null),l="";return s&&(l+="[33m"),l+="[AWS "+n.service.serviceIdentifier+" "+a,l+=" "+o.toString()+"s "+t.retryCount+" retries]",s&&(l+="[0;1m"),l+=" "+r.util.string.lowerFirst(n.operation),l+="("+u+")",s&&(l+="[0m"),l}();"function"==typeof i.log?i.log(o):"function"==typeof i.write&&i.write(o+"\n")}}))})),Json:(new i).addNamedListeners((function(t){var n=e("./protocol/json");t("BUILD","build",n.buildRequest),t("EXTRACT_DATA","extractData",n.extractData),t("EXTRACT_ERROR","extractError",n.extractError)})),Rest:(new i).addNamedListeners((function(t){var n=e("./protocol/rest");t("BUILD","build",n.buildRequest),t("EXTRACT_DATA","extractData",n.extractData),t("EXTRACT_ERROR","extractError",n.extractError)})),RestJson:(new i).addNamedListeners((function(t){var n=e("./protocol/rest_json");t("BUILD","build",n.buildRequest),t("EXTRACT_DATA","extractData",n.extractData),t("EXTRACT_ERROR","extractError",n.extractError)})),RestXml:(new i).addNamedListeners((function(t){var n=e("./protocol/rest_xml");t("BUILD","build",n.buildRequest),t("EXTRACT_DATA","extractData",n.extractData),t("EXTRACT_ERROR","extractError",n.extractError)})),Query:(new i).addNamedListeners((function(t){var n=e("./protocol/query");t("BUILD","build",n.buildRequest),t("EXTRACT_DATA","extractData",n.extractData),t("EXTRACT_ERROR","extractError",n.extractError)}))}},{"./core":19,"./discover_endpoint":27,"./protocol/json":47,"./protocol/query":48,"./protocol/rest":49,"./protocol/rest_json":50,"./protocol/rest_xml":51,"./sequential_executor":59,util:98}],35:[function(e,t,n){var r=e("./core"),i=r.util.inherit;r.Endpoint=i({constructor:function(e,t){if(r.util.hideProperties(this,["slashes","auth","hash","search","query"]),null==e)throw new Error("Invalid endpoint: "+e);if("string"!=typeof e)return r.util.copy(e);e.match(/^http/)||(e=((t&&void 0!==t.sslEnabled?t.sslEnabled:r.config.sslEnabled)?"https":"http")+"://"+e);r.util.update(this,r.util.urlParse(e)),this.port?this.port=parseInt(this.port,10):this.port="https:"===this.protocol?443:80}}),r.HttpRequest=i({constructor:function(e,t){e=new r.Endpoint(e),this.method="POST",this.path=e.path||"/",this.headers={},this.body="",this.endpoint=e,this.region=t,this._userAgent="",this.setUserAgent()},setUserAgent:function(){this._userAgent=this.headers[this.getUserAgentHeaderName()]=r.util.userAgent()},getUserAgentHeaderName:function(){return(r.util.isBrowser()?"X-Amz-":"")+"User-Agent"},appendToUserAgent:function(e){"string"==typeof e&&e&&(this._userAgent+=" "+e),this.headers[this.getUserAgentHeaderName()]=this._userAgent},getUserAgent:function(){return this._userAgent},pathname:function(){return this.path.split("?",1)[0]},search:function(){var e=this.path.split("?",2)[1];return e?(e=r.util.queryStringParse(e),r.util.queryParamsToString(e)):""},updateEndpoint:function(e){var t=new r.Endpoint(e);this.endpoint=t,this.path=t.path||"/"}}),r.HttpResponse=i({constructor:function(){this.statusCode=void 0,this.headers={},this.body=void 0,this.streaming=!1,this.stream=null},createUnbufferedStream:function(){return this.streaming=!0,this.stream}}),r.HttpClient=i({}),r.HttpClient.getInstance=function(){return void 0===this.singleton&&(this.singleton=new this),this.singleton}},{"./core":19}],36:[function(e,t,n){var r=e("../core"),o=e("events").EventEmitter;e("../http"),r.XHRClient=r.util.inherit({handleRequest:function(e,t,n,s){var a=this,c=e.endpoint,u=new o,l=c.protocol+"//"+c.hostname;80!==c.port&&443!==c.port&&(l+=":"+c.port),l+=e.path;var h=new XMLHttpRequest,p=!1;e.stream=h,h.addEventListener("readystatechange",(function(){try{if(0===h.status)return}catch(e){return}this.readyState>=this.HEADERS_RECEIVED&&!p&&(u.statusCode=h.status,u.headers=a.parseHeaders(h.getAllResponseHeaders()),u.emit("headers",u.statusCode,u.headers,h.statusText),p=!0),this.readyState===this.DONE&&a.finishRequest(h,u)}),!1),h.upload.addEventListener("progress",(function(e){u.emit("sendProgress",e)})),h.addEventListener("progress",(function(e){u.emit("receiveProgress",e)}),!1),h.addEventListener("timeout",(function(){s(r.util.error(new Error("Timeout"),{code:"TimeoutError"}))}),!1),h.addEventListener("error",(function(){s(r.util.error(new Error("Network Failure"),{code:"NetworkingError"}))}),!1),h.addEventListener("abort",(function(){s(r.util.error(new Error("Request aborted"),{code:"RequestAbortedError"}))}),!1),n(u),h.open(e.method,l,!1!==t.xhrAsync),r.util.each(e.headers,(function(e,t){"Content-Length"!==e&&"User-Agent"!==e&&"Host"!==e&&h.setRequestHeader(e,t)})),t.timeout&&!1!==t.xhrAsync&&(h.timeout=t.timeout),t.xhrWithCredentials&&(h.withCredentials=!0);try{h.responseType="arraybuffer"}catch(e){}try{e.body?h.send(e.body):h.send()}catch(t){if(!e.body||"object"!==i(e.body.buffer))throw t;h.send(e.body.buffer)}return u},parseHeaders:function(e){var t={};return r.util.arrayEach(e.split(/\r?\n/),(function(e){var n=e.split(":",1)[0],r=e.substring(n.length+2);n.length>0&&(t[n.toLowerCase()]=r)})),t},finishRequest:function(e,t){var n;if("arraybuffer"===e.responseType&&e.response){var i=e.response;n=new r.util.Buffer(i.byteLength);for(var o=new Uint8Array(i),s=0;s<n.length;++s)n[s]=o[s]}try{n||"string"!=typeof e.responseText||(n=new r.util.Buffer(e.responseText))}catch(e){}n&&t.emit("data",n),t.emit("end")}}),r.HttpClient.prototype=r.XHRClient.prototype,r.HttpClient.streamsApiVersion=1},{"../core":19,"../http":35,events:82}],37:[function(e,t,n){var r=e("../util");function i(){}function o(e,t){if(t&&null!=e)switch(t.type){case"structure":return function(e,t){var n={};return r.each(e,(function(e,r){var i=t.members[e];if(i){if("body"!==i.location)return;var s=i.isLocationName?i.name:e,a=o(r,i);void 0!==a&&(n[s]=a)}})),n}(e,t);case"map":return function(e,t){var n={};return r.each(e,(function(e,r){var i=o(r,t.value);void 0!==i&&(n[e]=i)})),n}(e,t);case"list":return function(e,t){var n=[];return r.arrayEach(e,(function(e){var r=o(e,t.member);void 0!==r&&n.push(r)})),n}(e,t);default:return function(e,t){return t.toWireFormat(e)}(e,t)}}i.prototype.build=function(e,t){return JSON.stringify(o(e,t))},t.exports=i},{"../util":72}],38:[function(e,t,n){var r=e("../util");function i(){}function o(e,t){if(t&&void 0!==e)switch(t.type){case"structure":return function(e,t){if(null==e)return;var n={},i=t.members;return r.each(i,(function(t,r){var i=r.isLocationName?r.name:t;if(Object.prototype.hasOwnProperty.call(e,i)){var s=o(e[i],r);void 0!==s&&(n[t]=s)}})),n}(e,t);case"map":return function(e,t){if(null==e)return;var n={};return r.each(e,(function(e,r){var i=o(r,t.value);n[e]=void 0===i?null:i})),n}(e,t);case"list":return function(e,t){if(null==e)return;var n=[];return r.arrayEach(e,(function(e){var r=o(e,t.member);void 0===r?n.push(null):n.push(r)})),n}(e,t);default:return function(e,t){return t.toType(e)}(e,t)}}i.prototype.parse=function(e,t){return o(JSON.parse(e),t)},t.exports=i},{"../util":72}],39:[function(e,t,n){var r=e("./collection"),i=e("./operation"),o=e("./shape"),s=e("./paginator"),a=e("./resource_waiter"),c=e("../util"),u=c.property,l=c.memoizedProperty;t.exports=function(e,t){var n=this;e=e||{},(t=t||{}).api=this,e.metadata=e.metadata||{},u(this,"isApi",!0,!1),u(this,"apiVersion",e.metadata.apiVersion),u(this,"endpointPrefix",e.metadata.endpointPrefix),u(this,"signingName",e.metadata.signingName),u(this,"globalEndpoint",e.metadata.globalEndpoint),u(this,"signatureVersion",e.metadata.signatureVersion),u(this,"jsonVersion",e.metadata.jsonVersion),u(this,"targetPrefix",e.metadata.targetPrefix),u(this,"protocol",e.metadata.protocol),u(this,"timestampFormat",e.metadata.timestampFormat),u(this,"xmlNamespaceUri",e.metadata.xmlNamespace),u(this,"abbreviation",e.metadata.serviceAbbreviation),u(this,"fullName",e.metadata.serviceFullName),u(this,"serviceId",e.metadata.serviceId),l(this,"className",(function(){var t=e.metadata.serviceAbbreviation||e.metadata.serviceFullName;return t?("ElasticLoadBalancing"===(t=t.replace(/^Amazon|AWS\s*|\(.*|\s+|\W+/g,""))&&(t="ELB"),t):null})),u(this,"operations",new r(e.operations,t,(function(e,n){return new i(e,n,t)}),c.string.lowerFirst,(function(e,t){!0===t.endpointoperation&&u(n,"endpointOperation",c.string.lowerFirst(e))}))),u(this,"shapes",new r(e.shapes,t,(function(e,n){return o.create(n,t)}))),u(this,"paginators",new r(e.paginators,t,(function(e,n){return new s(e,n,t)}))),u(this,"waiters",new r(e.waiters,t,(function(e,n){return new a(e,n,t)}),c.string.lowerFirst)),t.documentation&&(u(this,"documentation",e.documentation),u(this,"documentationUrl",e.documentationUrl))}},{"../util":72,"./collection":40,"./operation":41,"./paginator":42,"./resource_waiter":43,"./shape":44}],40:[function(e,t,n){var r=e("../util").memoizedProperty;function i(e,t,n,i){r(this,i(e),(function(){return n(e,t)}))}t.exports=function(e,t,n,r,o){for(var s in r=r||String,e)Object.prototype.hasOwnProperty.call(e,s)&&(i.call(this,s,e[s],n,r),o&&o(s,e[s]))}},{"../util":72}],41:[function(e,t,n){var r=e("./shape"),i=e("../util"),o=i.property,s=i.memoizedProperty;t.exports=function(e,t,n){var i=this;n=n||{},o(this,"name",t.name||e),o(this,"api",n.api,!1),t.http=t.http||{},o(this,"endpoint",t.endpoint),o(this,"httpMethod",t.http.method||"POST"),o(this,"httpPath",t.http.requestUri||"/"),o(this,"authtype",t.authtype||""),o(this,"endpointDiscoveryRequired",t.endpointdiscovery?t.endpointdiscovery.required?"REQUIRED":"OPTIONAL":"NULL"),s(this,"input",(function(){return t.input?r.create(t.input,n):new r.create({type:"structure"},n)})),s(this,"output",(function(){return t.output?r.create(t.output,n):new r.create({type:"structure"},n)})),s(this,"errors",(function(){var e=[];if(!t.errors)return null;for(var i=0;i<t.errors.length;i++)e.push(r.create(t.errors[i],n));return e})),s(this,"paginator",(function(){return n.api.paginators[e]})),n.documentation&&(o(this,"documentation",t.documentation),o(this,"documentationUrl",t.documentationUrl)),s(this,"idempotentMembers",(function(){var e=[],t=i.input,n=t.members;if(!t.members)return e;for(var r in n)n.hasOwnProperty(r)&&!0===n[r].isIdempotent&&e.push(r);return e})),s(this,"hasEventOutput",(function(){return function(e){var t=e.members,n=e.payload;if(!e.members)return!1;if(n){return t[n].isEventStream}for(var r in t)if(!t.hasOwnProperty(r)&&!0===t[r].isEventStream)return!0;return!1}(i.output)}))}},{"../util":72,"./shape":44}],42:[function(e,t,n){var r=e("../util").property;t.exports=function(e,t){r(this,"inputToken",t.input_token),r(this,"limitKey",t.limit_key),r(this,"moreResults",t.more_results),r(this,"outputToken",t.output_token),r(this,"resultKey",t.result_key)}},{"../util":72}],43:[function(e,t,n){var r=e("../util"),i=r.property;t.exports=function(e,t,n){n=n||{},i(this,"name",e),i(this,"api",n.api,!1),t.operation&&i(this,"operation",r.string.lowerFirst(t.operation));var o=this;["type","description","delay","maxAttempts","acceptors"].forEach((function(e){var n=t[e];n&&i(o,e,n)}))}},{"../util":72}],44:[function(e,t,n){var r=e("./collection"),o=e("../util");function s(e,t,n){null!=n&&o.property.apply(this,arguments)}function a(e,t){e.constructor.prototype[t]||o.memoizedProperty.apply(this,arguments)}function c(e,t,n){t=t||{},s(this,"shape",e.shape),s(this,"api",t.api,!1),s(this,"type",e.type),s(this,"enum",e.enum),s(this,"min",e.min),s(this,"max",e.max),s(this,"pattern",e.pattern),s(this,"location",e.location||this.location||"body"),s(this,"name",this.name||e.xmlName||e.queryName||e.locationName||n),s(this,"isStreaming",e.streaming||this.isStreaming||!1),s(this,"requiresLength",e.requiresLength,!1),s(this,"isComposite",e.isComposite||!1),s(this,"isShape",!0,!1),s(this,"isQueryName",Boolean(e.queryName),!1),s(this,"isLocationName",Boolean(e.locationName),!1),s(this,"isIdempotent",!0===e.idempotencyToken),s(this,"isJsonValue",!0===e.jsonvalue),s(this,"isSensitive",!0===e.sensitive||e.prototype&&!0===e.prototype.sensitive),s(this,"isEventStream",Boolean(e.eventstream),!1),s(this,"isEvent",Boolean(e.event),!1),s(this,"isEventPayload",Boolean(e.eventpayload),!1),s(this,"isEventHeader",Boolean(e.eventheader),!1),s(this,"isTimestampFormatSet",Boolean(e.timestampFormat)||e.prototype&&!0===e.prototype.isTimestampFormatSet,!1),s(this,"endpointDiscoveryId",Boolean(e.endpointdiscoveryid),!1),s(this,"hostLabel",Boolean(e.hostLabel),!1),t.documentation&&(s(this,"documentation",e.documentation),s(this,"documentationUrl",e.documentationUrl)),e.xmlAttribute&&s(this,"isXmlAttribute",e.xmlAttribute||!1),s(this,"defaultValue",null),this.toWireFormat=function(e){return null==e?"":e},this.toType=function(e){return e}}function u(e){c.apply(this,arguments),s(this,"isComposite",!0),e.flattened&&s(this,"flattened",e.flattened||!1)}function l(e,t){var n=this,o=null,l=!this.isShape;u.apply(this,arguments),l&&(s(this,"defaultValue",(function(){return{}})),s(this,"members",{}),s(this,"memberNames",[]),s(this,"required",[]),s(this,"isRequired",(function(){return!1}))),e.members&&(s(this,"members",new r(e.members,t,(function(e,n){return c.create(n,t,e)}))),a(this,"memberNames",(function(){return e.xmlOrder||Object.keys(e.members)})),e.event&&(a(this,"eventPayloadMemberName",(function(){for(var e=n.members,t=n.memberNames,r=0,i=t.length;r<i;r++)if(e[t[r]].isEventPayload)return t[r]})),a(this,"eventHeaderMemberNames",(function(){for(var e=n.members,t=n.memberNames,r=[],i=0,o=t.length;i<o;i++)e[t[i]].isEventHeader&&r.push(t[i]);return r})))),e.required&&(s(this,"required",e.required),s(this,"isRequired",(function(t){if(!o){o={};for(var n=0;n<e.required.length;n++)o[e.required[n]]=!0}return o[t]}),!1,!0)),s(this,"resultWrapper",e.resultWrapper||null),e.payload&&s(this,"payload",e.payload),"string"==typeof e.xmlNamespace?s(this,"xmlNamespaceUri",e.xmlNamespace):"object"===i(e.xmlNamespace)&&(s(this,"xmlNamespacePrefix",e.xmlNamespace.prefix),s(this,"xmlNamespaceUri",e.xmlNamespace.uri))}function h(e,t){var n=this,r=!this.isShape;if(u.apply(this,arguments),r&&s(this,"defaultValue",(function(){return[]})),e.member&&a(this,"member",(function(){return c.create(e.member,t)})),this.flattened){var i=this.name;a(this,"name",(function(){return n.member.name||i}))}}function p(e,t){var n=!this.isShape;u.apply(this,arguments),n&&(s(this,"defaultValue",(function(){return{}})),s(this,"key",c.create({type:"string"},t)),s(this,"value",c.create({type:"string"},t))),e.key&&a(this,"key",(function(){return c.create(e.key,t)})),e.value&&a(this,"value",(function(){return c.create(e.value,t)}))}function f(){c.apply(this,arguments);var e=["rest-xml","query","ec2"];this.toType=function(t){return t=this.api&&e.indexOf(this.api.protocol)>-1?t||"":t,this.isJsonValue?JSON.parse(t):t&&"function"==typeof t.toString?t.toString():t},this.toWireFormat=function(e){return this.isJsonValue?JSON.stringify(e):e}}function d(){c.apply(this,arguments),this.toType=function(e){var t=o.base64.decode(e);if(this.isSensitive&&o.isNode()&&"function"==typeof o.Buffer.alloc){var n=o.Buffer.alloc(t.length,t);t.fill(0),t=n}return t},this.toWireFormat=o.base64.encode}function g(){d.apply(this,arguments)}function m(){c.apply(this,arguments),this.toType=function(e){return"boolean"==typeof e?e:null==e?null:"true"===e}}c.normalizedTypes={character:"string",double:"float",long:"integer",short:"integer",biginteger:"integer",bigdecimal:"float",blob:"binary"},c.types={structure:l,list:h,map:p,boolean:m,timestamp:function(e){var t=this;if(c.apply(this,arguments),e.timestampFormat)s(this,"timestampFormat",e.timestampFormat);else if(t.isTimestampFormatSet&&this.timestampFormat)s(this,"timestampFormat",this.timestampFormat);else if("header"===this.location)s(this,"timestampFormat","rfc822");else if("querystring"===this.location)s(this,"timestampFormat","iso8601");else if(this.api)switch(this.api.protocol){case"json":case"rest-json":s(this,"timestampFormat","unixTimestamp");break;case"rest-xml":case"query":case"ec2":s(this,"timestampFormat","iso8601")}this.toType=function(e){return null==e?null:"function"==typeof e.toUTCString?e:"string"==typeof e||"number"==typeof e?o.date.parseTimestamp(e):null},this.toWireFormat=function(e){return o.date.format(e,t.timestampFormat)}},float:function(){c.apply(this,arguments),this.toType=function(e){return null==e?null:parseFloat(e)},this.toWireFormat=this.toType},integer:function(){c.apply(this,arguments),this.toType=function(e){return null==e?null:parseInt(e,10)},this.toWireFormat=this.toType},string:f,base64:g,binary:d},c.resolve=function(e,t){if(e.shape){var n=t.api.shapes[e.shape];if(!n)throw new Error("Cannot find shape reference: "+e.shape);return n}return null},c.create=function(e,t,n){if(e.isShape)return e;var r=c.resolve(e,t);if(r){var i=Object.keys(e);t.documentation||(i=i.filter((function(e){return!e.match(/documentation/)})));var o=function(){r.constructor.call(this,e,t,n)};return o.prototype=r,new o}e.type||(e.members?e.type="structure":e.member?e.type="list":e.key?e.type="map":e.type="string");var s=e.type;if(c.normalizedTypes[e.type]&&(e.type=c.normalizedTypes[e.type]),c.types[e.type])return new c.types[e.type](e,t,n);throw new Error("Unrecognized shape type: "+s)},c.shapes={StructureShape:l,ListShape:h,MapShape:p,StringShape:f,BooleanShape:m,Base64Shape:g},t.exports=c},{"../util":72,"./collection":40}],45:[function(e,t,n){var r=e("./core");r.ParamValidator=r.util.inherit({constructor:function(e){!0!==e&&void 0!==e||(e={min:!0}),this.validation=e},validate:function(e,t,n){if(this.errors=[],this.validateMember(e,t||{},n||"params"),this.errors.length>1){var i=this.errors.join("\n* ");throw i="There were "+this.errors.length+" validation errors:\n* "+i,r.util.error(new Error(i),{code:"MultipleValidationErrors",errors:this.errors})}if(1===this.errors.length)throw this.errors[0];return!0},fail:function(e,t){this.errors.push(r.util.error(new Error(t),{code:e}))},validateStructure:function(e,t,n){var r;this.validateType(t,n,["object"],"structure");for(var i=0;e.required&&i<e.required.length;i++){var o=t[r=e.required[i]];null==o&&this.fail("MissingRequiredParameter","Missing required key '"+r+"' in "+n)}for(r in t)if(Object.prototype.hasOwnProperty.call(t,r)){var s=t[r],a=e.members[r];if(void 0!==a){var c=[n,r].join(".");this.validateMember(a,s,c)}else this.fail("UnexpectedParameter","Unexpected key '"+r+"' found in "+n)}return!0},validateMember:function(e,t,n){switch(e.type){case"structure":return this.validateStructure(e,t,n);case"list":return this.validateList(e,t,n);case"map":return this.validateMap(e,t,n);default:return this.validateScalar(e,t,n)}},validateList:function(e,t,n){if(this.validateType(t,n,[Array])){this.validateRange(e,t.length,n,"list member count");for(var r=0;r<t.length;r++)this.validateMember(e.member,t[r],n+"["+r+"]")}},validateMap:function(e,t,n){if(this.validateType(t,n,["object"],"map")){var r=0;for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(this.validateMember(e.key,i,n+"[key='"+i+"']"),this.validateMember(e.value,t[i],n+"['"+i+"']"),r++);this.validateRange(e,r,n,"map member count")}},validateScalar:function(e,t,n){switch(e.type){case null:case void 0:case"string":return this.validateString(e,t,n);case"base64":case"binary":return this.validatePayload(t,n);case"integer":case"float":return this.validateNumber(e,t,n);case"boolean":return this.validateType(t,n,["boolean"]);case"timestamp":return this.validateType(t,n,[Date,/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/,"number"],"Date object, ISO-8601 string, or a UNIX timestamp");default:return this.fail("UnkownType","Unhandled type "+e.type+" for "+n)}},validateString:function(e,t,n){var r=["string"];e.isJsonValue&&(r=r.concat(["number","object","boolean"])),null!==t&&this.validateType(t,n,r)&&(this.validateEnum(e,t,n),this.validateRange(e,t.length,n,"string length"),this.validatePattern(e,t,n),this.validateUri(e,t,n))},validateUri:function(e,t,n){"uri"===e.location&&0===t.length&&this.fail("UriParameterError",'Expected uri parameter to have length >= 1, but found "'+t+'" for '+n)},validatePattern:function(e,t,n){this.validation.pattern&&void 0!==e.pattern&&(new RegExp(e.pattern).test(t)||this.fail("PatternMatchError",'Provided value "'+t+'" does not match regex pattern /'+e.pattern+"/ for "+n))},validateRange:function(e,t,n,r){this.validation.min&&void 0!==e.min&&t<e.min&&this.fail("MinRangeError","Expected "+r+" >= "+e.min+", but found "+t+" for "+n),this.validation.max&&void 0!==e.max&&t>e.max&&this.fail("MaxRangeError","Expected "+r+" <= "+e.max+", but found "+t+" for "+n)},validateEnum:function(e,t,n){this.validation.enum&&void 0!==e.enum&&-1===e.enum.indexOf(t)&&this.fail("EnumError","Found string value of "+t+", but expected "+e.enum.join("|")+" for "+n)},validateType:function(e,t,n,o){if(null==e)return!1;for(var s=!1,a=0;a<n.length;a++){if("string"==typeof n[a]){if(i(e)===n[a])return!0}else if(n[a]instanceof RegExp){if((e||"").toString().match(n[a]))return!0}else{if(e instanceof n[a])return!0;if(r.util.isType(e,n[a]))return!0;o||s||(n=n.slice()),n[a]=r.util.typeName(n[a])}s=!0}var c=o;c||(c=n.join(", ").replace(/,([^,]+)$/,", or$1"));var u=c.match(/^[aeiou]/i)?"n":"";return this.fail("InvalidParameterType","Expected "+t+" to be a"+u+" "+c),!1},validateNumber:function(e,t,n){if(null!=t){if("string"==typeof t){var r=parseFloat(t);r.toString()===t&&(t=r)}this.validateType(t,n,["number"])&&this.validateRange(e,t,n,"numeric value")}},validatePayload:function(e,t){if(null!=e&&"string"!=typeof e&&(!e||"number"!=typeof e.byteLength)){if(r.util.isNode()){var n=r.util.stream.Stream;if(r.util.Buffer.isBuffer(e)||e instanceof n)return}else if(void 0!==("undefined"==typeof Blob?"undefined":i(Blob))&&e instanceof Blob)return;var o=["Buffer","Stream","File","Blob","ArrayBuffer","DataView"];if(e)for(var s=0;s<o.length;s++){if(r.util.isType(e,o[s]))return;if(r.util.typeName(e.constructor)===o[s])return}this.fail("InvalidParameterType","Expected "+t+" to be a string, Buffer, Stream, Blob, or typed array object")}}})},{"./core":19}],46:[function(e,t,n){var r=e("../util"),i=e("../core");t.exports={populateHostPrefix:function(e){if(!e.service.config.hostPrefixEnabled)return e;var t,n,o,s=e.service.api.operations[e.operation];if(function(e){var t=e.service.api,n=t.operations[e.operation],i=t.endpointOperation&&t.endpointOperation===r.string.lowerFirst(n.name);return"NULL"!==n.endpointDiscoveryRequired||!0===i}(e))return e;if(s.endpoint&&s.endpoint.hostPrefix){var a=function(e,t,n){return r.each(n.members,(function(n,i){if(!0===i.hostLabel){if("string"!=typeof t[n]||""===t[n])throw r.error(new Error,{message:"Parameter "+n+" should be a non-empty string.",code:"InvalidParameter"});var o=new RegExp("\\{"+n+"\\}","g");e=e.replace(o,t[n])}})),e}(s.endpoint.hostPrefix,e.params,s.input);!function(e,t){e.host&&(e.host=t+e.host);e.hostname&&(e.hostname=t+e.hostname)}(e.httpRequest.endpoint,a),t=e.httpRequest.endpoint.hostname,n=t.split("."),o=/^[a-zA-Z0-9]{1}$|^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]$/,r.arrayEach(n,(function(e){if(!e.length||e.length<1||e.length>63)throw r.error(new Error,{code:"ValidationError",message:"Hostname label length should be between 1 to 63 characters, inclusive."});if(!o.test(e))throw i.util.error(new Error,{code:"ValidationError",message:e+" is not hostname compatible."})}))}return e}}},{"../core":19,"../util":72}],47:[function(e,t,n){var r=e("../util"),i=e("../json/builder"),o=e("../json/parser"),s=e("./helpers").populateHostPrefix;t.exports={buildRequest:function(e){var t=e.httpRequest,n=e.service.api,r=n.targetPrefix+"."+n.operations[e.operation].name,o=n.jsonVersion||"1.0",a=n.operations[e.operation].input,c=new i;1===o&&(o="1.0"),t.body=c.build(e.params||{},a),t.headers["Content-Type"]="application/x-amz-json-"+o,t.headers["X-Amz-Target"]=r,s(e)},extractError:function(e){var t={},n=e.httpResponse;if(t.code=n.headers["x-amzn-errortype"]||"UnknownError","string"==typeof t.code&&(t.code=t.code.split(":")[0]),n.body.length>0)try{var i=JSON.parse(n.body.toString());(i.__type||i.code)&&(t.code=(i.__type||i.code).split("#").pop()),"RequestEntityTooLarge"===t.code?t.message="Request body must be less than 1 MB":t.message=i.message||i.Message||null}catch(i){t.statusCode=n.statusCode,t.message=n.statusMessage}else t.statusCode=n.statusCode,t.message=n.statusCode.toString();e.error=r.error(new Error,t)},extractData:function(e){var t=e.httpResponse.body.toString()||"{}";if(!1===e.request.service.config.convertResponseTypes)e.data=JSON.parse(t);else{var n=e.request.service.api.operations[e.request.operation].output||{},r=new o;e.data=r.parse(t,n)}}}},{"../json/builder":37,"../json/parser":38,"../util":72,"./helpers":46}],48:[function(e,t,n){var r=e("../core"),i=e("../util"),o=e("../query/query_param_serializer"),s=e("../model/shape"),a=e("./helpers").populateHostPrefix;t.exports={buildRequest:function(e){var t=e.service.api.operations[e.operation],n=e.httpRequest;n.headers["Content-Type"]="application/x-www-form-urlencoded; charset=utf-8",n.params={Version:e.service.api.apiVersion,Action:t.name},(new o).serialize(e.params,t.input,(function(e,t){n.params[e]=t})),n.body=i.queryParamsToString(n.params),a(e)},extractError:function(e){var t,n=e.httpResponse.body.toString();if(n.match("<UnknownOperationException"))t={Code:"UnknownOperation",Message:"Unknown operation "+e.request.operation};else try{t=(new r.XML.Parser).parse(n)}catch(n){t={Code:e.httpResponse.statusCode,Message:e.httpResponse.statusMessage}}t.requestId&&!e.requestId&&(e.requestId=t.requestId),t.Errors&&(t=t.Errors),t.Error&&(t=t.Error),t.Code?e.error=i.error(new Error,{code:t.Code,message:t.Message}):e.error=i.error(new Error,{code:e.httpResponse.statusCode,message:null})},extractData:function(e){var t=e.request,n=t.service.api.operations[t.operation].output||{},o=n;if(o.resultWrapper){var a=s.create({type:"structure"});a.members[o.resultWrapper]=n,a.memberNames=[o.resultWrapper],i.property(n,"name",n.resultWrapper),n=a}var c=new r.XML.Parser;if(n&&n.members&&!n.members._XAMZRequestId){var u=s.create({type:"string"},{api:{protocol:"query"}},"requestId");n.members._XAMZRequestId=u}var l=c.parse(e.httpResponse.body.toString(),n);e.requestId=l._XAMZRequestId||l.requestId,l._XAMZRequestId&&delete l._XAMZRequestId,o.resultWrapper&&l[o.resultWrapper]&&(i.update(l,l[o.resultWrapper]),delete l[o.resultWrapper]),e.data=l}}},{"../core":19,"../model/shape":44,"../query/query_param_serializer":52,"../util":72,"./helpers":46}],49:[function(e,t,n){var r=e("../util"),i=e("./helpers").populateHostPrefix;function o(e,t,n,i){var o=[e,t].join("/");o=o.replace(/\/+/g,"/");var s={},a=!1;if(r.each(n.members,(function(e,t){var n=i[e];if(null!=n)if("uri"===t.location){var c=new RegExp("\\{"+t.name+"(\\+)?\\}");o=o.replace(c,(function(e,t){return(t?r.uriEscapePath:r.uriEscape)(String(n))}))}else"querystring"===t.location&&(a=!0,"list"===t.type?s[t.name]=n.map((function(e){return r.uriEscape(t.member.toWireFormat(e).toString())})):"map"===t.type?r.each(n,(function(e,t){Array.isArray(t)?s[e]=t.map((function(e){return r.uriEscape(String(e))})):s[e]=r.uriEscape(String(t))})):s[t.name]=r.uriEscape(t.toWireFormat(n).toString()))})),a){o+=o.indexOf("?")>=0?"&":"?";var c=[];r.arrayEach(Object.keys(s).sort(),(function(e){Array.isArray(s[e])||(s[e]=[s[e]]);for(var t=0;t<s[e].length;t++)c.push(r.uriEscape(String(e))+"="+s[e][t])})),o+=c.join("&")}return o}t.exports={buildRequest:function(e){!function(e){e.httpRequest.method=e.service.api.operations[e.operation].httpMethod}(e),function(e){var t=e.service.api.operations[e.operation],n=t.input,r=o(e.httpRequest.endpoint.path,t.httpPath,n,e.params);e.httpRequest.path=r}(e),function(e){var t=e.service.api.operations[e.operation];r.each(t.input.members,(function(t,n){var i=e.params[t];null!=i&&("headers"===n.location&&"map"===n.type?r.each(i,(function(t,r){e.httpRequest.headers[n.name+t]=r})):"header"===n.location&&(i=n.toWireFormat(i).toString(),n.isJsonValue&&(i=r.base64.encode(i)),e.httpRequest.headers[n.name]=i))}))}(e),i(e)},extractError:function(){},extractData:function(e){var t=e.request,n={},i=e.httpResponse,o=t.service.api.operations[t.operation].output,s={};r.each(i.headers,(function(e,t){s[e.toLowerCase()]=t})),r.each(o.members,(function(e,t){var o=(t.name||e).toLowerCase();if("headers"===t.location&&"map"===t.type){n[e]={};var a=t.isLocationName?t.name:"",c=new RegExp("^"+a+"(.+)","i");r.each(i.headers,(function(t,r){var i=t.match(c);null!==i&&(n[e][i[1]]=r)}))}else if("header"===t.location){if(void 0!==s[o]){var u=t.isJsonValue?r.base64.decode(s[o]):s[o];n[e]=t.toType(u)}}else"statusCode"===t.location&&(n[e]=parseInt(i.statusCode,10))})),e.data=n},generateURI:o}},{"../util":72,"./helpers":46}],50:[function(e,t,n){var r=e("../util"),i=e("./rest"),o=e("./json"),s=e("../json/builder"),a=e("../json/parser");function c(e,t){e.service.api.operations[e.operation].input;if(!e.httpRequest.headers["Content-Type"]){var n=t?"binary/octet-stream":"application/json";e.httpRequest.headers["Content-Type"]=n}}t.exports={buildRequest:function(e){i.buildRequest(e),["HEAD","DELETE"].indexOf(e.httpRequest.method)<0&&function(e){var t=new s,n=e.service.api.operations[e.operation].input;if(n.payload){var r,i=n.members[n.payload];if(void 0===(r=e.params[n.payload]))return;"structure"===i.type?(e.httpRequest.body=t.build(r,i),c(e)):(e.httpRequest.body=r,("binary"===i.type||i.isStreaming)&&c(e,!0))}else{var o=t.build(e.params,n);"{}"===o&&"GET"===e.httpRequest.method||(e.httpRequest.body=o),c(e)}}(e)},extractError:function(e){o.extractError(e)},extractData:function(e){i.extractData(e);var t=e.request,n=t.service.api.operations[t.operation],s=t.service.api.operations[t.operation].output||{};if(n.hasEventOutput,s.payload){var c=s.members[s.payload],u=e.httpResponse.body;if(c.isEventStream)l=new a,e.data[payload]=r.createEventStream(2===AWS.HttpClient.streamsApiVersion?e.httpResponse.stream:u,l,c);else if("structure"===c.type||"list"===c.type){var l=new a;e.data[s.payload]=l.parse(u,c)}else"binary"===c.type||c.isStreaming?e.data[s.payload]=u:e.data[s.payload]=c.toType(u)}else{var h=e.data;o.extractData(e),e.data=r.merge(h,e.data)}}}},{"../json/builder":37,"../json/parser":38,"../util":72,"./json":47,"./rest":49}],51:[function(e,t,n){var r=e("../core"),i=e("../util"),o=e("./rest");t.exports={buildRequest:function(e){o.buildRequest(e),["GET","HEAD"].indexOf(e.httpRequest.method)<0&&function(e){var t=e.service.api.operations[e.operation].input,n=new r.XML.Builder,o=e.params,s=t.payload;if(s){var a=t.members[s];if(void 0===(o=o[s]))return;if("structure"===a.type){var c=a.name;e.httpRequest.body=n.toXML(o,a,c,!0)}else e.httpRequest.body=o}else e.httpRequest.body=n.toXML(o,t,t.name||t.shape||i.string.upperFirst(e.operation)+"Request")}(e)},extractError:function(e){var t;o.extractError(e);try{t=(new r.XML.Parser).parse(e.httpResponse.body.toString())}catch(n){t={Code:e.httpResponse.statusCode,Message:e.httpResponse.statusMessage}}t.Errors&&(t=t.Errors),t.Error&&(t=t.Error),t.Code?e.error=i.error(new Error,{code:t.Code,message:t.Message}):e.error=i.error(new Error,{code:e.httpResponse.statusCode,message:null})},extractData:function(e){var t;o.extractData(e);var n=e.request,s=e.httpResponse.body,a=n.service.api.operations[n.operation],c=a.output,u=(a.hasEventOutput,c.payload);if(u){var l=c.members[u];l.isEventStream?(t=new r.XML.Parser,e.data[u]=i.createEventStream(2===r.HttpClient.streamsApiVersion?e.httpResponse.stream:e.httpResponse.body,t,l)):"structure"===l.type?(t=new r.XML.Parser,e.data[u]=t.parse(s.toString(),l)):"binary"===l.type||l.isStreaming?e.data[u]=s:e.data[u]=l.toType(s)}else if(s.length>0){var h=(t=new r.XML.Parser).parse(s.toString(),c);i.update(e.data,h)}}}},{"../core":19,"../util":72,"./rest":49}],52:[function(e,t,n){var r=e("../util");function i(){}function o(e){return e.isQueryName||"ec2"!==e.api.protocol?e.name:e.name[0].toUpperCase()+e.name.substr(1)}function s(e,t,n,i){r.each(n.members,(function(n,r){var s=t[n];if(null!=s){var c=o(r);a(c=e?e+"."+c:c,s,r,i)}}))}function a(e,t,n,i){null!=t&&("structure"===n.type?s(e,t,n,i):"list"===n.type?function(e,t,n,i){var s=n.member||{};0!==t.length?r.arrayEach(t,(function(t,r){var c="."+(r+1);if("ec2"===n.api.protocol)c+="";else if(n.flattened){if(s.name){var u=e.split(".");u.pop(),u.push(o(s)),e=u.join(".")}}else c="."+(s.name?s.name:"member")+c;a(e+c,t,s,i)})):i.call(this,e,null)}(e,t,n,i):"map"===n.type?function(e,t,n,i){var o=1;r.each(t,(function(t,r){var s=(n.flattened?".":".entry.")+o+++".",c=s+(n.key.name||"key"),u=s+(n.value.name||"value");a(e+c,t,n.key,i),a(e+u,r,n.value,i)}))}(e,t,n,i):i(e,n.toWireFormat(t).toString()))}i.prototype.serialize=function(e,t,n){s("",e,t,n)},t.exports=i},{"../util":72}],53:[function(e,t,n){t.exports={now:function(){return"undefined"!=typeof performance&&"function"==typeof performance.now?performance.now():Date.now()}}},{}],54:[function(e,t,n){var r=e("./util"),i=e("./region_config_data.json");function o(e,t){r.each(t,(function(t,n){"globalEndpoint"!==t&&(void 0!==e.config[t]&&null!==e.config[t]||(e.config[t]=n))}))}t.exports=function(e){for(var t=function(e){var t=e.config.region,n=function(e){if(!e)return null;var t=e.split("-");return t.length<3?null:t.slice(0,t.length-2).join("-")+"-*"}(t),r=e.api.endpointPrefix;return[[t,r],[n,r],[t,"*"],[n,"*"],["*",r],["*","*"]].map((function(e){return e[0]&&e[1]?e.join("/"):null}))}(e),n=0;n<t.length;n++){var s=t[n];if(s&&Object.prototype.hasOwnProperty.call(i.rules,s)){var a=i.rules[s];return"string"==typeof a&&(a=i.patterns[a]),e.config.useDualstack&&r.isDualstackAvailable(e)&&((a=r.copy(a)).endpoint="{service}.dualstack.{region}.amazonaws.com"),e.isGlobalEndpoint=!!a.globalEndpoint,a.signatureVersion||(a.signatureVersion="v4"),void o(e,a)}}}},{"./region_config_data.json":55,"./util":72}],55:[function(e,t,n){t.exports={rules:{"*/*":{endpoint:"{service}.{region}.amazonaws.com"},"cn-*/*":{endpoint:"{service}.{region}.amazonaws.com.cn"},"*/budgets":"globalSSL","*/cloudfront":"globalSSL","*/iam":"globalSSL","*/sts":"globalSSL","*/importexport":{endpoint:"{service}.amazonaws.com",signatureVersion:"v2",globalEndpoint:!0},"*/route53":{endpoint:"https://{service}.amazonaws.com",signatureVersion:"v3https",globalEndpoint:!0},"*/waf":"globalSSL","us-gov-*/iam":"globalGovCloud","us-gov-*/sts":{endpoint:"{service}.{region}.amazonaws.com"},"us-gov-west-1/s3":"s3signature","us-west-1/s3":"s3signature","us-west-2/s3":"s3signature","eu-west-1/s3":"s3signature","ap-southeast-1/s3":"s3signature","ap-southeast-2/s3":"s3signature","ap-northeast-1/s3":"s3signature","sa-east-1/s3":"s3signature","us-east-1/s3":{endpoint:"{service}.amazonaws.com",signatureVersion:"s3"},"us-east-1/sdb":{endpoint:"{service}.amazonaws.com",signatureVersion:"v2"},"*/sdb":{endpoint:"{service}.{region}.amazonaws.com",signatureVersion:"v2"}},patterns:{globalSSL:{endpoint:"https://{service}.amazonaws.com",globalEndpoint:!0},globalGovCloud:{endpoint:"{service}.us-gov.amazonaws.com"},s3signature:{endpoint:"{service}.{region}.amazonaws.com",signatureVersion:"s3"}}}},{}],56:[function(e,t,n){(function(t){var n=e("./core"),r=e("./state_machine"),i=n.util.inherit,o=n.util.domain,s=e("jmespath"),a={success:1,error:1,complete:1};var c=new r;c.setupStates=function(){var e=function(e,t){var n=this;n._haltHandlersOnError=!1,n.emit(n._asm.currentState,(function(e){if(e)if(r=n,Object.prototype.hasOwnProperty.call(a,r._asm.currentState)){if(!(o&&n.domain instanceof o.Domain))throw e;e.domainEmitter=n,e.domain=n.domain,e.domainThrown=!1,n.domain.emit("error",e)}else n.response.error=e,t(e);else t(n.response.error);var r}))};this.addState("validate","build","error",e),this.addState("build","afterBuild","restart",e),this.addState("afterBuild","sign","restart",e),this.addState("sign","send","retry",e),this.addState("retry","afterRetry","afterRetry",e),this.addState("afterRetry","sign","error",e),this.addState("send","validateResponse","retry",e),this.addState("validateResponse","extractData","extractError",e),this.addState("extractError","extractData","retry",e),this.addState("extractData","success","retry",e),this.addState("restart","build","error",e),this.addState("success","complete","complete",e),this.addState("error","complete","complete",e),this.addState("complete",null,null,e)},c.setupStates(),n.Request=i({constructor:function(e,t,i){var s=e.endpoint,a=e.config.region,u=e.config.customUserAgent;e.isGlobalEndpoint&&(a="us-east-1"),this.domain=o&&o.active,this.service=e,this.operation=t,this.params=i||{},this.httpRequest=new n.HttpRequest(s,a),this.httpRequest.appendToUserAgent(u),this.startTime=e.getSkewCorrectedDate(),this.response=new n.Response(this),this._asm=new r(c.states,"validate"),this._haltHandlersOnError=!1,n.SequentialExecutor.call(this),this.emit=this.emitEvent},send:function(e){return e&&(this.httpRequest.appendToUserAgent("callback"),this.on("complete",(function(t){e.call(t,t.error,t.data)}))),this.runTo(),this.response},build:function(e){return this.runTo("send",e)},runTo:function(e,t){return this._asm.runTo(e,t,this),this},abort:function(){return this.removeAllListeners("validateResponse"),this.removeAllListeners("extractError"),this.on("validateResponse",(function(e){e.error=n.util.error(new Error("Request aborted by user"),{code:"RequestAbortedError",retryable:!1})})),this.httpRequest.stream&&!this.httpRequest.stream.didCallback&&(this.httpRequest.stream.abort(),this.httpRequest._abortCallback?this.httpRequest._abortCallback():this.removeAllListeners("send")),this},eachPage:function(e){e=n.util.fn.makeAsync(e,3),this.on("complete",(function t(r){e.call(r,r.error,r.data,(function(i){!1!==i&&(r.hasNextPage()?r.nextPage().on("complete",t).send():e.call(r,null,null,n.util.fn.noop))}))})).send()},eachItem:function(e){var t=this;this.eachPage((function(r,i){if(r)return e(r,null);if(null===i)return e(null,null);var o=t.service.paginationConfig(t.operation).resultKey;Array.isArray(o)&&(o=o[0]);var a=s.search(i,o),c=!0;return n.util.arrayEach(a,(function(t){if(!1===(c=e(null,t)))return n.util.abort})),c}))},isPageable:function(){return!!this.service.paginationConfig(this.operation)},createReadStream:function(){var e=n.util.stream,r=this,i=null;return 2===n.HttpClient.streamsApiVersion?(i=new e.PassThrough,t.nextTick((function(){r.send()}))):((i=new e.Stream).readable=!0,i.sent=!1,i.on("newListener",(function(e){i.sent||"data"!==e||(i.sent=!0,t.nextTick((function(){r.send()})))}))),this.on("error",(function(e){i.emit("error",e)})),this.on("httpHeaders",(function(t,o,s){if(t<300){r.removeListener("httpData",n.EventListeners.Core.HTTP_DATA),r.removeListener("httpError",n.EventListeners.Core.HTTP_ERROR),r.on("httpError",(function(e){s.error=e,s.error.retryable=!1}));var a,c=!1;if("HEAD"!==r.httpRequest.method&&(a=parseInt(o["content-length"],10)),void 0!==a&&!isNaN(a)&&a>=0){c=!0;var u=0}var l=function(){c&&u!==a?i.emit("error",n.util.error(new Error("Stream content length mismatch. Received "+u+" of "+a+" bytes."),{code:"StreamContentLengthMismatch"})):2===n.HttpClient.streamsApiVersion?i.end():i.emit("end")},h=s.httpResponse.createUnbufferedStream();if(2===n.HttpClient.streamsApiVersion)if(c){var p=new e.PassThrough;p._write=function(t){return t&&t.length&&(u+=t.length),e.PassThrough.prototype._write.apply(this,arguments)},p.on("end",l),i.on("error",(function(e){c=!1,h.unpipe(p),p.emit("end"),p.end()})),h.pipe(p).pipe(i,{end:!1})}else h.pipe(i);else c&&h.on("data",(function(e){e&&e.length&&(u+=e.length)})),h.on("data",(function(e){i.emit("data",e)})),h.on("end",l);h.on("error",(function(e){c=!1,i.emit("error",e)}))}})),i},emitEvent:function(e,t,r){"function"==typeof t&&(r=t,t=null),r||(r=function(){}),t||(t=this.eventParameters(e,this.response)),n.SequentialExecutor.prototype.emit.call(this,e,t,(function(e){e&&(this.response.error=e),r.call(this,e)}))},eventParameters:function(e){switch(e){case"restart":case"validate":case"sign":case"build":case"afterValidate":case"afterBuild":return[this];case"error":return[this.response.error,this.response];default:return[this.response]}},presign:function(e,t){return t||"function"!=typeof e||(t=e,e=null),(new n.Signers.Presign).sign(this.toGet(),e,t)},isPresigned:function(){return Object.prototype.hasOwnProperty.call(this.httpRequest.headers,"presigned-expires")},toUnauthenticated:function(){return this._unAuthenticated=!0,this.removeListener("validate",n.EventListeners.Core.VALIDATE_CREDENTIALS),this.removeListener("sign",n.EventListeners.Core.SIGN),this},toGet:function(){return"query"!==this.service.api.protocol&&"ec2"!==this.service.api.protocol||(this.removeListener("build",this.buildAsGet),this.addListener("build",this.buildAsGet)),this},buildAsGet:function(e){e.httpRequest.method="GET",e.httpRequest.path=e.service.endpoint.path+"?"+e.httpRequest.body,e.httpRequest.body="",delete e.httpRequest.headers["Content-Length"],delete e.httpRequest.headers["Content-Type"]},haltHandlersOnError:function(){this._haltHandlersOnError=!0}}),n.Request.addPromisesToClass=function(e){this.prototype.promise=function(){var t=this;return this.httpRequest.appendToUserAgent("promise"),new e((function(e,n){t.on("complete",(function(t){t.error?n(t.error):e(Object.defineProperty(t.data||{},"$response",{value:t}))})),t.runTo()}))}},n.Request.deletePromisesFromClass=function(){delete this.prototype.promise},n.util.addPromises(n.Request),n.util.mixin(n.Request,n.SequentialExecutor)}).call(this,e("_process"))},{"./core":19,"./state_machine":71,_process:86,jmespath:85}],57:[function(e,t,n){var r=e("./core"),i=r.util.inherit,o=e("jmespath");function s(e){var t=e.request._waiter,n=t.config.acceptors,r=!1,i="retry";n.forEach((function(n){if(!r){var o=t.matchers[n.matcher];o&&o(e,n.expected,n.argument)&&(r=!0,i=n.state)}})),!r&&e.error&&(i="failure"),"success"===i?t.setSuccess(e):t.setError(e,"retry"===i)}r.ResourceWaiter=i({constructor:function(e,t){this.service=e,this.state=t,this.loadWaiterConfig(this.state)},service:null,state:null,config:null,matchers:{path:function(e,t,n){try{var r=o.search(e.data,n)}catch(e){return!1}return o.strictDeepEqual(r,t)},pathAll:function(e,t,n){try{var r=o.search(e.data,n)}catch(e){return!1}Array.isArray(r)||(r=[r]);var i=r.length;if(!i)return!1;for(var s=0;s<i;s++)if(!o.strictDeepEqual(r[s],t))return!1;return!0},pathAny:function(e,t,n){try{var r=o.search(e.data,n)}catch(e){return!1}Array.isArray(r)||(r=[r]);for(var i=r.length,s=0;s<i;s++)if(o.strictDeepEqual(r[s],t))return!0;return!1},status:function(e,t){var n=e.httpResponse.statusCode;return"number"==typeof n&&n===t},error:function(e,t){return"string"==typeof t&&e.error?t===e.error.code:t===!!e.error}},listeners:(new r.SequentialExecutor).addNamedListeners((function(e){e("RETRY_CHECK","retry",(function(e){var t=e.request._waiter;e.error&&"ResourceNotReady"===e.error.code&&(e.error.retryDelay=1e3*(t.config.delay||0))})),e("CHECK_OUTPUT","extractData",s),e("CHECK_ERROR","extractError",s)})),wait:function(e,t){"function"==typeof e&&(t=e,e=void 0),e&&e.$waiter&&("number"==typeof(e=r.util.copy(e)).$waiter.delay&&(this.config.delay=e.$waiter.delay),"number"==typeof e.$waiter.maxAttempts&&(this.config.maxAttempts=e.$waiter.maxAttempts),delete e.$waiter);var n=this.service.makeRequest(this.config.operation,e);return n._waiter=this,n.response.maxRetries=this.config.maxAttempts,n.addListeners(this.listeners),t&&n.send(t),n},setSuccess:function(e){e.error=null,e.data=e.data||{},e.request.removeAllListeners("extractData")},setError:function(e,t){e.data=null,e.error=r.util.error(e.error||new Error,{code:"ResourceNotReady",message:"Resource is not in the state "+this.state,retryable:t})},loadWaiterConfig:function(e){if(!this.service.api.waiters[e])throw new r.util.error(new Error,{code:"StateNotFoundError",message:"State "+e+" not found."});this.config=r.util.copy(this.service.api.waiters[e])}})},{"./core":19,jmespath:85}],58:[function(e,t,n){var r=e("./core"),i=r.util.inherit,o=e("jmespath");r.Response=i({constructor:function(e){this.request=e,this.data=null,this.error=null,this.retryCount=0,this.redirectCount=0,this.httpResponse=new r.HttpResponse,e&&(this.maxRetries=e.service.numRetries(),this.maxRedirects=e.service.config.maxRedirects)},nextPage:function(e){var t,n=this.request.service,i=this.request.operation;try{t=n.paginationConfig(i,!0)}catch(e){this.error=e}if(!this.hasNextPage()){if(e)e(this.error,null);else if(this.error)throw this.error;return null}var o=r.util.copy(this.request.params);if(this.nextPageTokens){var s=t.inputToken;"string"==typeof s&&(s=[s]);for(var a=0;a<s.length;a++)o[s[a]]=this.nextPageTokens[a];return n.makeRequest(this.request.operation,o,e)}return e?e(null,null):null},hasNextPage:function(){return this.cacheNextPageTokens(),!!this.nextPageTokens||void 0===this.nextPageTokens&&void 0},cacheNextPageTokens:function(){if(Object.prototype.hasOwnProperty.call(this,"nextPageTokens"))return this.nextPageTokens;this.nextPageTokens=void 0;var e=this.request.service.paginationConfig(this.request.operation);if(!e)return this.nextPageTokens;if(this.nextPageTokens=null,e.moreResults&&!o.search(this.data,e.moreResults))return this.nextPageTokens;var t=e.outputToken;return"string"==typeof t&&(t=[t]),r.util.arrayEach.call(this,t,(function(e){var t=o.search(this.data,e);t&&(this.nextPageTokens=this.nextPageTokens||[],this.nextPageTokens.push(t))})),this.nextPageTokens}})},{"./core":19,jmespath:85}],59:[function(e,t,n){var r=e("./core");r.SequentialExecutor=r.util.inherit({constructor:function(){this._events={}},listeners:function(e){return this._events[e]?this._events[e].slice(0):[]},on:function(e,t,n){return this._events[e]?n?this._events[e].unshift(t):this._events[e].push(t):this._events[e]=[t],this},onAsync:function(e,t,n){return t._isAsync=!0,this.on(e,t,n)},removeListener:function(e,t){var n=this._events[e];if(n){for(var r=n.length,i=-1,o=0;o<r;++o)n[o]===t&&(i=o);i>-1&&n.splice(i,1)}return this},removeAllListeners:function(e){return e?delete this._events[e]:this._events={},this},emit:function(e,t,n){n||(n=function(){});var r=this.listeners(e),i=r.length;return this.callListeners(r,t,n),i>0},callListeners:function(e,t,n,i){var o=this,s=i||null;function a(i){if(i&&(s=r.util.error(s||new Error,i),o._haltHandlersOnError))return n.call(o,s);o.callListeners(e,t,n,s)}for(;e.length>0;){var c=e.shift();if(c._isAsync)return void c.apply(o,t.concat([a]));try{c.apply(o,t)}catch(e){s=r.util.error(s||new Error,e)}if(s&&o._haltHandlersOnError)return void n.call(o,s)}n.call(o,s)},addListeners:function(e){var t=this;return e._events&&(e=e._events),r.util.each(e,(function(e,n){"function"==typeof n&&(n=[n]),r.util.arrayEach(n,(function(n){t.on(e,n)}))})),t},addNamedListener:function(e,t,n,r){return this[e]=n,this.addListener(t,n,r),this},addNamedAsyncListener:function(e,t,n,r){return n._isAsync=!0,this.addNamedListener(e,t,n,r)},addNamedListeners:function(e){var t=this;return e((function(){t.addNamedListener.apply(t,arguments)}),(function(){t.addNamedAsyncListener.apply(t,arguments)})),this}}),r.SequentialExecutor.prototype.addListener=r.SequentialExecutor.prototype.on,t.exports=r.SequentialExecutor},{"./core":19}],60:[function(e,t,n){(function(n){var r=e("./core"),o=e("./model/api"),s=e("./region_config"),a=r.util.inherit,c=0;r.Service=a({constructor:function(e){if(!this.loadServiceClass)throw r.util.error(new Error,"Service must be constructed with `new' operator");var t=this.loadServiceClass(e||{});if(t){var n=r.util.copy(e),i=new t(e);return Object.defineProperty(i,"_originalConfig",{get:function(){return n},enumerable:!1,configurable:!0}),i._clientId=++c,i}this.initialize(e)},initialize:function(e){var t=r.config[this.serviceIdentifier];if(this.config=new r.Config(r.config),t&&this.config.update(t,!0),e&&this.config.update(e,!0),this.validateService(),this.config.endpoint||s(this),this.config.endpoint=this.endpointFromTemplate(this.config.endpoint),this.setEndpoint(this.config.endpoint),r.SequentialExecutor.call(this),r.Service.addDefaultMonitoringListeners(this),(this.config.clientSideMonitoring||r.Service._clientSideMonitoring)&&this.publisher){var i=this.publisher;this.addNamedListener("PUBLISH_API_CALL","apiCall",(function(e){n.nextTick((function(){i.eventHandler(e)}))})),this.addNamedListener("PUBLISH_API_ATTEMPT","apiCallAttempt",(function(e){n.nextTick((function(){i.eventHandler(e)}))}))}},validateService:function(){},loadServiceClass:function(e){var t=e;if(r.util.isEmpty(this.api)){if(t.apiConfig)return r.Service.defineServiceApi(this.constructor,t.apiConfig);if(this.constructor.services){(t=new r.Config(r.config)).update(e,!0);var n=t.apiVersions[this.constructor.serviceIdentifier];return n=n||t.apiVersion,this.getLatestServiceClass(n)}return null}return null},getLatestServiceClass:function(e){return e=this.getLatestServiceVersion(e),null===this.constructor.services[e]&&r.Service.defineServiceApi(this.constructor,e),this.constructor.services[e]},getLatestServiceVersion:function(e){if(!this.constructor.services||0===this.constructor.services.length)throw new Error("No services defined on "+this.constructor.serviceIdentifier);if(e?r.util.isType(e,Date)&&(e=r.util.date.iso8601(e).split("T")[0]):e="latest",Object.hasOwnProperty(this.constructor.services,e))return e;for(var t=Object.keys(this.constructor.services).sort(),n=null,i=t.length-1;i>=0;i--)if("*"!==t[i][t[i].length-1]&&(n=t[i]),t[i].substr(0,10)<=e)return n;throw new Error("Could not find "+this.constructor.serviceIdentifier+" API to satisfy version constraint `"+e+"'")},api:{},defaultRetryCount:3,customizeRequests:function(e){if(e){if("function"!=typeof e)throw new Error("Invalid callback type '"+i(e)+"' provided in customizeRequests");this.customRequestHandler=e}else this.customRequestHandler=null},makeRequest:function(e,t,n){if("function"==typeof t&&(n=t,t=null),t=t||{},this.config.params){var i=this.api.operations[e];i&&(t=r.util.copy(t),r.util.each(this.config.params,(function(e,n){i.input.members[e]&&(void 0!==t[e]&&null!==t[e]||(t[e]=n))})))}var o=new r.Request(this,e,t);return this.addAllRequestListeners(o),this.attachMonitoringEmitter(o),n&&o.send(n),o},makeUnauthenticatedRequest:function(e,t,n){"function"==typeof t&&(n=t,t={});var r=this.makeRequest(e,t).toUnauthenticated();return n?r.send(n):r},waitFor:function(e,t,n){return new r.ResourceWaiter(this,e).wait(t,n)},addAllRequestListeners:function(e){for(var t=[r.events,r.EventListeners.Core,this.serviceInterface(),r.EventListeners.CorePost],n=0;n<t.length;n++)t[n]&&e.addListeners(t[n]);this.config.paramValidation||e.removeListener("validate",r.EventListeners.Core.VALIDATE_PARAMETERS),this.config.logger&&e.addListeners(r.EventListeners.Logger),this.setupRequestListeners(e),"function"==typeof this.constructor.prototype.customRequestHandler&&this.constructor.prototype.customRequestHandler(e),Object.prototype.hasOwnProperty.call(this,"customRequestHandler")&&"function"==typeof this.customRequestHandler&&this.customRequestHandler(e)},apiCallEvent:function(e){var t=e.service.api.operations[e.operation],n={Type:"ApiCall",Api:t?t.name:e.operation,Version:1,Service:e.service.api.serviceId||e.service.api.endpointPrefix,Region:e.httpRequest.region,MaxRetriesExceeded:0,UserAgent:e.httpRequest.getUserAgent()},r=e.response;if(r.httpResponse.statusCode&&(n.FinalHttpStatusCode=r.httpResponse.statusCode),r.error){var i=r.error;r.httpResponse.statusCode>299?(i.code&&(n.FinalAwsException=i.code),i.message&&(n.FinalAwsExceptionMessage=i.message)):((i.code||i.name)&&(n.FinalSdkException=i.code||i.name),i.message&&(n.FinalSdkExceptionMessage=i.message))}return n},apiAttemptEvent:function(e){var t=e.service.api.operations[e.operation],n={Type:"ApiCallAttempt",Api:t?t.name:e.operation,Version:1,Service:e.service.api.serviceId||e.service.api.endpointPrefix,Fqdn:e.httpRequest.endpoint.hostname,UserAgent:e.httpRequest.getUserAgent()},r=e.response;return r.httpResponse.statusCode&&(n.HttpStatusCode=r.httpResponse.statusCode),!e._unAuthenticated&&e.service.config.credentials&&e.service.config.credentials.accessKeyId&&(n.AccessKey=e.service.config.credentials.accessKeyId),r.httpResponse.headers?(e.httpRequest.headers["x-amz-security-token"]&&(n.SessionToken=e.httpRequest.headers["x-amz-security-token"]),r.httpResponse.headers["x-amzn-requestid"]&&(n.XAmznRequestId=r.httpResponse.headers["x-amzn-requestid"]),r.httpResponse.headers["x-amz-request-id"]&&(n.XAmzRequestId=r.httpResponse.headers["x-amz-request-id"]),r.httpResponse.headers["x-amz-id-2"]&&(n.XAmzId2=r.httpResponse.headers["x-amz-id-2"]),n):n},attemptFailEvent:function(e){var t=this.apiAttemptEvent(e),n=e.response,r=n.error;return n.httpResponse.statusCode>299?(r.code&&(t.AwsException=r.code),r.message&&(t.AwsExceptionMessage=r.message)):((r.code||r.name)&&(t.SdkException=r.code||r.name),r.message&&(t.SdkExceptionMessage=r.message)),t},attachMonitoringEmitter:function(e){var t,n,i,o,s,a,c=0,u=this;e.on("validate",(function(){o=r.util.realClock.now(),a=Date.now()}),!0),e.on("sign",(function(){n=r.util.realClock.now(),t=Date.now(),s=e.httpRequest.region,c++}),!0),e.on("validateResponse",(function(){i=Math.round(r.util.realClock.now()-n)})),e.addNamedListener("API_CALL_ATTEMPT","success",(function(){var n=u.apiAttemptEvent(e);n.Timestamp=t,n.AttemptLatency=i>=0?i:0,n.Region=s,u.emit("apiCallAttempt",[n])})),e.addNamedListener("API_CALL_ATTEMPT_RETRY","retry",(function(){var o=u.attemptFailEvent(e);o.Timestamp=t,i=i||Math.round(r.util.realClock.now()-n),o.AttemptLatency=i>=0?i:0,o.Region=s,u.emit("apiCallAttempt",[o])})),e.addNamedListener("API_CALL","complete",(function(){var t=u.apiCallEvent(e);if(t.AttemptCount=c,!(t.AttemptCount<=0)){t.Timestamp=a;var n=Math.round(r.util.realClock.now()-o);t.Latency=n>=0?n:0;var i=e.response;"number"==typeof i.retryCount&&"number"==typeof i.maxRetries&&i.retryCount>=i.maxRetries&&(t.MaxRetriesExceeded=1),u.emit("apiCall",[t])}}))},setupRequestListeners:function(e){},getSignerClass:function(e){var t,n=null,i="";e&&(i=(n=(e.service.api.operations||{})[e.operation]||null)?n.authtype:"");return t=this.config.signatureVersion?this.config.signatureVersion:"v4"===i||"v4-unsigned-body"===i?"v4":this.api.signatureVersion,r.Signers.RequestSigner.getVersion(t)},serviceInterface:function(){switch(this.api.protocol){case"ec2":case"query":return r.EventListeners.Query;case"json":return r.EventListeners.Json;case"rest-json":return r.EventListeners.RestJson;case"rest-xml":return r.EventListeners.RestXml}if(this.api.protocol)throw new Error("Invalid service `protocol' "+this.api.protocol+" in API config")},successfulResponse:function(e){return e.httpResponse.statusCode<300},numRetries:function(){return void 0!==this.config.maxRetries?this.config.maxRetries:this.defaultRetryCount},retryDelays:function(e){return r.util.calculateRetryDelay(e,this.config.retryDelayOptions)},retryableError:function(e){return!!this.timeoutError(e)||(!!this.networkingError(e)||(!!this.expiredCredentialsError(e)||(!!this.throttledError(e)||e.statusCode>=500)))},networkingError:function(e){return"NetworkingError"===e.code},timeoutError:function(e){return"TimeoutError"===e.code},expiredCredentialsError:function(e){return"ExpiredTokenException"===e.code},clockSkewError:function(e){switch(e.code){case"RequestTimeTooSkewed":case"RequestExpired":case"InvalidSignatureException":case"SignatureDoesNotMatch":case"AuthFailure":case"RequestInTheFuture":return!0;default:return!1}},getSkewCorrectedDate:function(){return new Date(Date.now()+this.config.systemClockOffset)},applyClockOffset:function(e){e&&(this.config.systemClockOffset=e-Date.now())},isClockSkewed:function(e){if(e)return Math.abs(this.getSkewCorrectedDate().getTime()-e)>=3e4},throttledError:function(e){if(429===e.statusCode)return!0;switch(e.code){case"ProvisionedThroughputExceededException":case"Throttling":case"ThrottlingException":case"RequestLimitExceeded":case"RequestThrottled":case"RequestThrottledException":case"TooManyRequestsException":case"TransactionInProgressException":return!0;default:return!1}},endpointFromTemplate:function(e){if("string"!=typeof e)return e;var t=e;return t=(t=(t=t.replace(/\{service\}/g,this.api.endpointPrefix)).replace(/\{region\}/g,this.config.region)).replace(/\{scheme\}/g,this.config.sslEnabled?"https":"http")},setEndpoint:function(e){this.endpoint=new r.Endpoint(e,this.config)},paginationConfig:function(e,t){var n=this.api.operations[e].paginator;if(!n){if(t){var i=new Error;throw r.util.error(i,"No pagination configuration for "+e)}return null}return n}}),r.util.update(r.Service,{defineMethods:function(e){r.util.each(e.prototype.api.operations,(function(t){e.prototype[t]||("none"===e.prototype.api.operations[t].authtype?e.prototype[t]=function(e,n){return this.makeUnauthenticatedRequest(t,e,n)}:e.prototype[t]=function(e,n){return this.makeRequest(t,e,n)})}))},defineService:function(e,t,n){r.Service._serviceMap[e]=!0,Array.isArray(t)||(n=t,t=[]);var i=a(r.Service,n||{});if("string"==typeof e){r.Service.addVersions(i,t);var o=i.serviceIdentifier||e;i.serviceIdentifier=o}else i.prototype.api=e,r.Service.defineMethods(i);if(r.SequentialExecutor.call(this.prototype),!this.prototype.publisher&&r.util.clientSideMonitoring){var s=r.util.clientSideMonitoring.Publisher,c=(0,r.util.clientSideMonitoring.configProvider)();this.prototype.publisher=new s(c),c.enabled&&(r.Service._clientSideMonitoring=!0)}return r.SequentialExecutor.call(i.prototype),r.Service.addDefaultMonitoringListeners(i.prototype),i},addVersions:function(e,t){Array.isArray(t)||(t=[t]),e.services=e.services||{};for(var n=0;n<t.length;n++)void 0===e.services[t[n]]&&(e.services[t[n]]=null);e.apiVersions=Object.keys(e.services).sort()},defineServiceApi:function(e,t,n){var i=a(e,{serviceIdentifier:e.serviceIdentifier});function s(e){e.isApi?i.prototype.api=e:i.prototype.api=new o(e)}if("string"==typeof t){if(n)s(n);else try{s(r.apiLoader(e.serviceIdentifier,t))}catch(n){throw r.util.error(n,{message:"Could not find API configuration "+e.serviceIdentifier+"-"+t})}Object.prototype.hasOwnProperty.call(e.services,t)||(e.apiVersions=e.apiVersions.concat(t).sort()),e.services[t]=i}else s(t);return r.Service.defineMethods(i),i},hasService:function(e){return Object.prototype.hasOwnProperty.call(r.Service._serviceMap,e)},addDefaultMonitoringListeners:function(e){e.addNamedListener("MONITOR_EVENTS_BUBBLE","apiCallAttempt",(function(t){var n=Object.getPrototypeOf(e);n._events&&n.emit("apiCallAttempt",[t])})),e.addNamedListener("CALL_EVENTS_BUBBLE","apiCall",(function(t){var n=Object.getPrototypeOf(e);n._events&&n.emit("apiCall",[t])}))},_serviceMap:{}}),r.util.mixin(r.Service,r.SequentialExecutor),t.exports=r.Service}).call(this,e("_process"))},{"./core":19,"./model/api":39,"./region_config":54,_process:86}],61:[function(e,t,n){var r=e("../core");r.util.update(r.CognitoIdentity.prototype,{getOpenIdToken:function(e,t){return this.makeUnauthenticatedRequest("getOpenIdToken",e,t)},getId:function(e,t){return this.makeUnauthenticatedRequest("getId",e,t)},getCredentialsForIdentity:function(e,t){return this.makeUnauthenticatedRequest("getCredentialsForIdentity",e,t)}})},{"../core":19}],62:[function(e,t,n){(function(t){var n=e("../core"),r=e("../region_config");n.util.update(n.STS.prototype,{credentialsFrom:function(e,t){return e?(t||(t=new n.TemporaryCredentials),t.expired=!1,t.accessKeyId=e.Credentials.AccessKeyId,t.secretAccessKey=e.Credentials.SecretAccessKey,t.sessionToken=e.Credentials.SessionToken,t.expireTime=e.Credentials.Expiration,t):null},assumeRoleWithWebIdentity:function(e,t){return this.makeUnauthenticatedRequest("assumeRoleWithWebIdentity",e,t)},assumeRoleWithSAML:function(e,t){return this.makeUnauthenticatedRequest("assumeRoleWithSAML",e,t)},validateRegionalEndpointsFlagValue:function(e,t){if(!("string"==typeof e&&["legacy","regional"].indexOf(e.toLowerCase())>=0))throw n.util.error(new Error,t);this.config.stsRegionalEndpoints=e.toLowerCase()},validateRegionalEndpointsFlag:function(){var e=this.config;if(e.stsRegionalEndpoints&&this.validateRegionalEndpointsFlagValue(e.stsRegionalEndpoints,{code:"InvalidConfiguration",message:'invalid "stsRegionalEndpoints" configuration. Expect "legacy"  or "regional". Got "'+e.stsRegionalEndpoints+'".'}),n.util.isNode()){if(Object.prototype.hasOwnProperty.call(t.env,"AWS_STS_REGIONAL_ENDPOINTS")){var r=t.env.AWS_STS_REGIONAL_ENDPOINTS;this.validateRegionalEndpointsFlagValue(r,{code:"InvalidEnvironmentalVariable",message:'invalid AWS_STS_REGIONAL_ENDPOINTS environmental variable. Expect "legacy"  or "regional". Got "'+t.env.AWS_STS_REGIONAL_ENDPOINTS+'".'})}var i={};try{i=n.util.getProfilesFromSharedConfig(n.util.iniLoader)[t.env.AWS_PROFILE||n.util.defaultProfile]}catch(e){}if(i&&Object.prototype.hasOwnProperty.call(i,"sts_regional_endpoints")){var o=i.sts_regional_endpoints;this.validateRegionalEndpointsFlagValue(o,{code:"InvalidConfiguration",message:'invalid sts_regional_endpoints profile config. Expect "legacy"  or "regional". Got "'+i.sts_regional_endpoints+'".'})}}},optInRegionalEndpoint:function(){this.validateRegionalEndpointsFlag();var e=this.config;if("regional"===e.stsRegionalEndpoints){if(r(this),!this.isGlobalEndpoint)return;if(this.isGlobalEndpoint=!1,!e.region)throw n.util.error(new Error,{code:"ConfigError",message:"Missing region in config"});var t=e.endpoint.indexOf(".amazonaws.com");e.endpoint=e.endpoint.substring(0,t)+"."+e.region+e.endpoint.substring(t)}},validateService:function(){this.optInRegionalEndpoint()}})}).call(this,e("_process"))},{"../core":19,"../region_config":54,_process:86}],63:[function(e,t,n){var r=e("../core"),i=r.util.inherit,o="presigned-expires";function s(e){var t=e.httpRequest.headers[o],n=e.service.getSignerClass(e);if(delete e.httpRequest.headers["User-Agent"],delete e.httpRequest.headers["X-Amz-User-Agent"],n===r.Signers.V4){if(t>604800){throw r.util.error(new Error,{code:"InvalidExpiryTime",message:"Presigning does not support expiry time greater than a week with SigV4 signing.",retryable:!1})}e.httpRequest.headers[o]=t}else{if(n!==r.Signers.S3)throw r.util.error(new Error,{message:"Presigning only supports S3 or SigV4 signing.",code:"UnsupportedSigner",retryable:!1});var i=e.service?e.service.getSkewCorrectedDate():r.util.date.getDate();e.httpRequest.headers[o]=parseInt(r.util.date.unixTimestamp(i)+t,10).toString()}}function a(e){var t=e.httpRequest.endpoint,n=r.util.urlParse(e.httpRequest.path),i={};n.search&&(i=r.util.queryStringParse(n.search.substr(1)));var s=e.httpRequest.headers.Authorization.split(" ");if("AWS"===s[0])s=s[1].split(":"),i.AWSAccessKeyId=s[0],i.Signature=s[1],r.util.each(e.httpRequest.headers,(function(e,t){e===o&&(e="Expires"),0===e.indexOf("x-amz-meta-")&&(delete i[e],e=e.toLowerCase()),i[e]=t})),delete e.httpRequest.headers[o],delete i.Authorization,delete i.Host;else if("AWS4-HMAC-SHA256"===s[0]){s.shift();var a=s.join(" ").match(/Signature=(.*?)(?:,|\s|\r?\n|$)/)[1];i["X-Amz-Signature"]=a,delete i.Expires}t.pathname=n.pathname,t.search=r.util.queryParamsToString(i)}r.Signers.Presign=i({sign:function(e,t,n){if(e.httpRequest.headers[o]=t||3600,e.on("build",s),e.on("sign",a),e.removeListener("afterBuild",r.EventListeners.Core.SET_CONTENT_LENGTH),e.removeListener("afterBuild",r.EventListeners.Core.COMPUTE_SHA256),e.emit("beforePresign",[e]),!n){if(e.build(),e.response.error)throw e.response.error;return r.util.urlFormat(e.httpRequest.endpoint)}e.build((function(){this.response.error?n(this.response.error):n(null,r.util.urlFormat(e.httpRequest.endpoint))}))}}),t.exports=r.Signers.Presign},{"../core":19}],64:[function(e,t,n){var r=e("../core"),i=r.util.inherit;r.Signers.RequestSigner=i({constructor:function(e){this.request=e},setServiceClientId:function(e){this.serviceClientId=e},getServiceClientId:function(){return this.serviceClientId}}),r.Signers.RequestSigner.getVersion=function(e){switch(e){case"v2":return r.Signers.V2;case"v3":return r.Signers.V3;case"s3v4":case"v4":return r.Signers.V4;case"s3":return r.Signers.S3;case"v3https":return r.Signers.V3Https}throw new Error("Unknown signing version "+e)},e("./v2"),e("./v3"),e("./v3https"),e("./v4"),e("./s3"),e("./presign")},{"../core":19,"./presign":63,"./s3":65,"./v2":66,"./v3":67,"./v3https":68,"./v4":69}],65:[function(e,t,n){var r=e("../core"),i=r.util.inherit;r.Signers.S3=i(r.Signers.RequestSigner,{subResources:{acl:1,accelerate:1,analytics:1,cors:1,lifecycle:1,delete:1,inventory:1,location:1,logging:1,metrics:1,notification:1,partNumber:1,policy:1,requestPayment:1,replication:1,restore:1,tagging:1,torrent:1,uploadId:1,uploads:1,versionId:1,versioning:1,versions:1,website:1},responseHeaders:{"response-content-type":1,"response-content-language":1,"response-expires":1,"response-cache-control":1,"response-content-disposition":1,"response-content-encoding":1},addAuthorization:function(e,t){this.request.headers["presigned-expires"]||(this.request.headers["X-Amz-Date"]=r.util.date.rfc822(t)),e.sessionToken&&(this.request.headers["x-amz-security-token"]=e.sessionToken);var n=this.sign(e.secretAccessKey,this.stringToSign()),i="AWS "+e.accessKeyId+":"+n;this.request.headers.Authorization=i},stringToSign:function(){var e=this.request,t=[];t.push(e.method),t.push(e.headers["Content-MD5"]||""),t.push(e.headers["Content-Type"]||""),t.push(e.headers["presigned-expires"]||"");var n=this.canonicalizedAmzHeaders();return n&&t.push(n),t.push(this.canonicalizedResource()),t.join("\n")},canonicalizedAmzHeaders:function(){var e=[];r.util.each(this.request.headers,(function(t){t.match(/^x-amz-/i)&&e.push(t)})),e.sort((function(e,t){return e.toLowerCase()<t.toLowerCase()?-1:1}));var t=[];return r.util.arrayEach.call(this,e,(function(e){t.push(e.toLowerCase()+":"+String(this.request.headers[e]))})),t.join("\n")},canonicalizedResource:function(){var e=this.request,t=e.path.split("?"),n=t[0],i=t[1],o="";if(e.virtualHostedBucket&&(o+="/"+e.virtualHostedBucket),o+=n,i){var s=[];r.util.arrayEach.call(this,i.split("&"),(function(e){var t=e.split("=")[0],n=e.split("=")[1];if(this.subResources[t]||this.responseHeaders[t]){var r={name:t};void 0!==n&&(this.subResources[t]?r.value=n:r.value=decodeURIComponent(n)),s.push(r)}})),s.sort((function(e,t){return e.name<t.name?-1:1})),s.length&&(i=[],r.util.arrayEach(s,(function(e){void 0===e.value?i.push(e.name):i.push(e.name+"="+e.value)})),o+="?"+i.join("&"))}return o},sign:function(e,t){return r.util.crypto.hmac(e,t,"base64","sha1")}}),t.exports=r.Signers.S3},{"../core":19}],66:[function(e,t,n){var r=e("../core"),i=r.util.inherit;r.Signers.V2=i(r.Signers.RequestSigner,{addAuthorization:function(e,t){t||(t=r.util.date.getDate());var n=this.request;n.params.Timestamp=r.util.date.iso8601(t),n.params.SignatureVersion="2",n.params.SignatureMethod="HmacSHA256",n.params.AWSAccessKeyId=e.accessKeyId,e.sessionToken&&(n.params.SecurityToken=e.sessionToken),delete n.params.Signature,n.params.Signature=this.signature(e),n.body=r.util.queryParamsToString(n.params),n.headers["Content-Length"]=n.body.length},signature:function(e){return r.util.crypto.hmac(e.secretAccessKey,this.stringToSign(),"base64")},stringToSign:function(){var e=[];return e.push(this.request.method),e.push(this.request.endpoint.host.toLowerCase()),e.push(this.request.pathname()),e.push(r.util.queryParamsToString(this.request.params)),e.join("\n")}}),t.exports=r.Signers.V2},{"../core":19}],67:[function(e,t,n){var r=e("../core"),i=r.util.inherit;r.Signers.V3=i(r.Signers.RequestSigner,{addAuthorization:function(e,t){var n=r.util.date.rfc822(t);this.request.headers["X-Amz-Date"]=n,e.sessionToken&&(this.request.headers["x-amz-security-token"]=e.sessionToken),this.request.headers["X-Amzn-Authorization"]=this.authorization(e,n)},authorization:function(e){return"AWS3 AWSAccessKeyId="+e.accessKeyId+",Algorithm=HmacSHA256,SignedHeaders="+this.signedHeaders()+",Signature="+this.signature(e)},signedHeaders:function(){var e=[];return r.util.arrayEach(this.headersToSign(),(function(t){e.push(t.toLowerCase())})),e.sort().join(";")},canonicalHeaders:function(){var e=this.request.headers,t=[];return r.util.arrayEach(this.headersToSign(),(function(n){t.push(n.toLowerCase().trim()+":"+String(e[n]).trim())})),t.sort().join("\n")+"\n"},headersToSign:function(){var e=[];return r.util.each(this.request.headers,(function(t){("Host"===t||"Content-Encoding"===t||t.match(/^X-Amz/i))&&e.push(t)})),e},signature:function(e){return r.util.crypto.hmac(e.secretAccessKey,this.stringToSign(),"base64")},stringToSign:function(){var e=[];return e.push(this.request.method),e.push("/"),e.push(""),e.push(this.canonicalHeaders()),e.push(this.request.body),r.util.crypto.sha256(e.join("\n"))}}),t.exports=r.Signers.V3},{"../core":19}],68:[function(e,t,n){var r=e("../core"),i=r.util.inherit;e("./v3"),r.Signers.V3Https=i(r.Signers.V3,{authorization:function(e){return"AWS3-HTTPS AWSAccessKeyId="+e.accessKeyId+",Algorithm=HmacSHA256,Signature="+this.signature(e)},stringToSign:function(){return this.request.headers["X-Amz-Date"]}}),t.exports=r.Signers.V3Https},{"../core":19,"./v3":67}],69:[function(e,t,n){var r=e("../core"),i=e("./v4_credentials"),o=r.util.inherit;r.Signers.V4=o(r.Signers.RequestSigner,{constructor:function(e,t,n){r.Signers.RequestSigner.call(this,e),this.serviceName=t,n=n||{},this.signatureCache="boolean"!=typeof n.signatureCache||n.signatureCache,this.operation=n.operation,this.signatureVersion=n.signatureVersion},algorithm:"AWS4-HMAC-SHA256",addAuthorization:function(e,t){var n=r.util.date.iso8601(t).replace(/[:\-]|\.\d{3}/g,"");this.isPresigned()?this.updateForPresigned(e,n):this.addHeaders(e,n),this.request.headers.Authorization=this.authorization(e,n)},addHeaders:function(e,t){this.request.headers["X-Amz-Date"]=t,e.sessionToken&&(this.request.headers["x-amz-security-token"]=e.sessionToken)},updateForPresigned:function(e,t){var n=this.credentialString(t),i={"X-Amz-Date":t,"X-Amz-Algorithm":this.algorithm,"X-Amz-Credential":e.accessKeyId+"/"+n,"X-Amz-Expires":this.request.headers["presigned-expires"],"X-Amz-SignedHeaders":this.signedHeaders()};e.sessionToken&&(i["X-Amz-Security-Token"]=e.sessionToken),this.request.headers["Content-Type"]&&(i["Content-Type"]=this.request.headers["Content-Type"]),this.request.headers["Content-MD5"]&&(i["Content-MD5"]=this.request.headers["Content-MD5"]),this.request.headers["Cache-Control"]&&(i["Cache-Control"]=this.request.headers["Cache-Control"]),r.util.each.call(this,this.request.headers,(function(e,t){if("presigned-expires"!==e&&this.isSignableHeader(e)){var n=e.toLowerCase();0===n.indexOf("x-amz-meta-")?i[n]=t:0===n.indexOf("x-amz-")&&(i[e]=t)}}));var o=this.request.path.indexOf("?")>=0?"&":"?";this.request.path+=o+r.util.queryParamsToString(i)},authorization:function(e,t){var n=[],r=this.credentialString(t);return n.push(this.algorithm+" Credential="+e.accessKeyId+"/"+r),n.push("SignedHeaders="+this.signedHeaders()),n.push("Signature="+this.signature(e,t)),n.join(", ")},signature:function(e,t){var n=i.getSigningKey(e,t.substr(0,8),this.request.region,this.serviceName,this.signatureCache);return r.util.crypto.hmac(n,this.stringToSign(t),"hex")},stringToSign:function(e){var t=[];return t.push("AWS4-HMAC-SHA256"),t.push(e),t.push(this.credentialString(e)),t.push(this.hexEncodedHash(this.canonicalString())),t.join("\n")},canonicalString:function(){var e=[],t=this.request.pathname();return"s3"!==this.serviceName&&"s3v4"!==this.signatureVersion&&(t=r.util.uriEscapePath(t)),e.push(this.request.method),e.push(t),e.push(this.request.search()),e.push(this.canonicalHeaders()+"\n"),e.push(this.signedHeaders()),e.push(this.hexEncodedBodyHash()),e.join("\n")},canonicalHeaders:function(){var e=[];r.util.each.call(this,this.request.headers,(function(t,n){e.push([t,n])})),e.sort((function(e,t){return e[0].toLowerCase()<t[0].toLowerCase()?-1:1}));var t=[];return r.util.arrayEach.call(this,e,(function(e){var n=e[0].toLowerCase();if(this.isSignableHeader(n)){var i=e[1];if(null==i||"function"!=typeof i.toString)throw r.util.error(new Error("Header "+n+" contains invalid value"),{code:"InvalidHeader"});t.push(n+":"+this.canonicalHeaderValues(i.toString()))}})),t.join("\n")},canonicalHeaderValues:function(e){return e.replace(/\s+/g," ").replace(/^\s+|\s+$/g,"")},signedHeaders:function(){var e=[];return r.util.each.call(this,this.request.headers,(function(t){t=t.toLowerCase(),this.isSignableHeader(t)&&e.push(t)})),e.sort().join(";")},credentialString:function(e){return i.createScope(e.substr(0,8),this.request.region,this.serviceName)},hexEncodedHash:function(e){return r.util.crypto.sha256(e,"hex")},hexEncodedBodyHash:function(){var e=this.request;return this.isPresigned()&&"s3"===this.serviceName&&!e.body?"UNSIGNED-PAYLOAD":e.headers["X-Amz-Content-Sha256"]?e.headers["X-Amz-Content-Sha256"]:this.hexEncodedHash(this.request.body||"")},unsignableHeaders:["authorization","content-type","content-length","user-agent","presigned-expires","expect","x-amzn-trace-id"],isSignableHeader:function(e){return 0===e.toLowerCase().indexOf("x-amz-")||this.unsignableHeaders.indexOf(e)<0},isPresigned:function(){return!!this.request.headers["presigned-expires"]}}),t.exports=r.Signers.V4},{"../core":19,"./v4_credentials":70}],70:[function(e,t,n){var r=e("../core"),i={},o=[],s="aws4_request";t.exports={createScope:function(e,t,n){return[e.substr(0,8),t,n,s].join("/")},getSigningKey:function(e,t,n,a,c){var u=[r.util.crypto.hmac(e.secretAccessKey,e.accessKeyId,"base64"),t,n,a].join("_");if((c=!1!==c)&&u in i)return i[u];var l=r.util.crypto.hmac("AWS4"+e.secretAccessKey,t,"buffer"),h=r.util.crypto.hmac(l,n,"buffer"),p=r.util.crypto.hmac(h,a,"buffer"),f=r.util.crypto.hmac(p,s,"buffer");return c&&(i[u]=f,o.push(u),o.length>50&&delete i[o.shift()]),f},emptyCache:function(){i={},o=[]}}},{"../core":19}],71:[function(e,t,n){function r(e,t){this.currentState=t||null,this.states=e||{}}r.prototype.runTo=function(e,t,n,r){"function"==typeof e&&(r=n,n=t,t=e,e=null);var i=this,o=i.states[i.currentState];o.fn.call(n||i,r,(function(r){if(r){if(!o.fail)return t?t.call(n,r):null;i.currentState=o.fail}else{if(!o.accept)return t?t.call(n):null;i.currentState=o.accept}if(i.currentState===e)return t?t.call(n,r):null;i.runTo(e,t,n,r)}))},r.prototype.addState=function(e,t,n,r){return"function"==typeof t?(r=t,t=null,n=null):"function"==typeof n&&(r=n,n=null),this.currentState||(this.currentState=e),this.states[e]={accept:t,fail:n,fn:r},this},t.exports=r},{}],72:[function(e,t,n){(function(n,r){var o,s={environment:"nodejs",engine:function(){if(s.isBrowser()&&"undefined"!=typeof navigator)return navigator.userAgent;var e=n.platform+"/"+n.version;return n.env.AWS_EXECUTION_ENV&&(e+=" exec-env/"+n.env.AWS_EXECUTION_ENV),e},userAgent:function(){var t=s.environment,n="aws-sdk-"+t+"/"+e("./core").VERSION;return"nodejs"===t&&(n+=" "+s.engine()),n},uriEscape:function(e){var t=encodeURIComponent(e);return t=(t=t.replace(/[^A-Za-z0-9_.~\-%]+/g,escape)).replace(/[*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))},uriEscapePath:function(e){var t=[];return s.arrayEach(e.split("/"),(function(e){t.push(s.uriEscape(e))})),t.join("/")},urlParse:function(e){return s.url.parse(e)},urlFormat:function(e){return s.url.format(e)},queryStringParse:function(e){return s.querystring.parse(e)},queryParamsToString:function(e){var t=[],n=s.uriEscape,r=Object.keys(e).sort();return s.arrayEach(r,(function(r){var i=e[r],o=n(r),a=o+"=";if(Array.isArray(i)){var c=[];s.arrayEach(i,(function(e){c.push(n(e))})),a=o+"="+c.sort().join("&"+o+"=")}else null!=i&&(a=o+"="+n(i));t.push(a)})),t.join("&")},readFileSync:function(t){return s.isBrowser()?null:e("fs").readFileSync(t,"utf-8")},base64:{encode:function(e){if("number"==typeof e)throw s.error(new Error("Cannot base64 encode number "+e));return null==e?e:s.buffer.toBuffer(e).toString("base64")},decode:function(e){if("number"==typeof e)throw s.error(new Error("Cannot base64 decode number "+e));return null==e?e:s.buffer.toBuffer(e,"base64")}},buffer:{toBuffer:function(e,t){return"function"==typeof s.Buffer.from&&s.Buffer.from!==Uint8Array.from?s.Buffer.from(e,t):new s.Buffer(e,t)},alloc:function(e,t,n){if("number"!=typeof e)throw new Error("size passed to alloc must be a number.");if("function"==typeof s.Buffer.alloc)return s.Buffer.alloc(e,t,n);var r=new s.Buffer(e);return void 0!==t&&"function"==typeof r.fill&&r.fill(t,void 0,void 0,n),r},toStream:function(e){s.Buffer.isBuffer(e)||(e=s.buffer.toBuffer(e));var t=new s.stream.Readable,n=0;return t._read=function(r){if(n>=e.length)return t.push(null);var i=n+r;i>e.length&&(i=e.length),t.push(e.slice(n,i)),n=i},t},concat:function(e){var t,n,r=0,i=0;for(n=0;n<e.length;n++)r+=e[n].length;for(t=s.buffer.alloc(r),n=0;n<e.length;n++)e[n].copy(t,i),i+=e[n].length;return t}},string:{byteLength:function(t){if(null==t)return 0;if("string"==typeof t&&(t=s.buffer.toBuffer(t)),"number"==typeof t.byteLength)return t.byteLength;if("number"==typeof t.length)return t.length;if("number"==typeof t.size)return t.size;if("string"==typeof t.path)return e("fs").lstatSync(t.path).size;throw s.error(new Error("Cannot determine length of "+t),{object:t})},upperFirst:function(e){return e[0].toUpperCase()+e.substr(1)},lowerFirst:function(e){return e[0].toLowerCase()+e.substr(1)}},ini:{parse:function(e){var t,n={};return s.arrayEach(e.split(/\r?\n/),(function(e){var r=(e=e.split(/(^|\s)[;#]/)[0]).match(/^\s*\[([^\[\]]+)\]\s*$/);if(r)t=r[1];else if(t){var i=e.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);i&&(n[t]=n[t]||{},n[t][i[1]]=i[2])}})),n}},fn:{noop:function(){},callback:function(e){if(e)throw e},makeAsync:function(e,t){return t&&t<=e.length?e:function(){var t=Array.prototype.slice.call(arguments,0),n=t.pop(),r=e.apply(null,t);n(r)}}},date:{getDate:function(){return o||(o=e("./core")),o.config.systemClockOffset?new Date((new Date).getTime()+o.config.systemClockOffset):new Date},iso8601:function(e){return void 0===e&&(e=s.date.getDate()),e.toISOString().replace(/\.\d{3}Z$/,"Z")},rfc822:function(e){return void 0===e&&(e=s.date.getDate()),e.toUTCString()},unixTimestamp:function(e){return void 0===e&&(e=s.date.getDate()),e.getTime()/1e3},from:function(e){return"number"==typeof e?new Date(1e3*e):new Date(e)},format:function(e,t){return t||(t="iso8601"),s.date[t](s.date.from(e))},parseTimestamp:function(e){if("number"==typeof e)return new Date(1e3*e);if(e.match(/^\d+$/))return new Date(1e3*e);if(e.match(/^\d{4}/))return new Date(e);if(e.match(/^\w{3},/))return new Date(e);throw s.error(new Error("unhandled timestamp format: "+e),{code:"TimestampParserError"})}},crypto:{crc32Table:[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],crc32:function(e){var t=s.crypto.crc32Table,n=-1;"string"==typeof e&&(e=s.buffer.toBuffer(e));for(var r=0;r<e.length;r++){n=n>>>8^t[255&(n^e.readUInt8(r))]}return(-1^n)>>>0},hmac:function(e,t,n,r){return n||(n="binary"),"buffer"===n&&(n=void 0),r||(r="sha256"),"string"==typeof t&&(t=s.buffer.toBuffer(t)),s.crypto.lib.createHmac(r,e).update(t).digest(n)},md5:function(e,t,n){return s.crypto.hash("md5",e,t,n)},sha256:function(e,t,n){return s.crypto.hash("sha256",e,t,n)},hash:function(e,t,n,r){var o=s.crypto.createHash(e);n||(n="binary"),"buffer"===n&&(n=void 0),"string"==typeof t&&(t=s.buffer.toBuffer(t));var a=s.arraySliceFn(t),c=s.Buffer.isBuffer(t);if(s.isBrowser()&&"undefined"!=typeof ArrayBuffer&&t&&t.buffer instanceof ArrayBuffer&&(c=!0),r&&"object"===i(t)&&"function"==typeof t.on&&!c)t.on("data",(function(e){o.update(e)})),t.on("error",(function(e){r(e)})),t.on("end",(function(){r(null,o.digest(n))}));else{if(!r||!a||c||"undefined"==typeof FileReader){s.isBrowser()&&"object"===i(t)&&!c&&(t=new s.Buffer(new Uint8Array(t)));var u=o.update(t).digest(n);return r&&r(null,u),u}var l=0,h=new FileReader;h.onerror=function(){r(new Error("Failed to read data."))},h.onload=function(){var e=new s.Buffer(new Uint8Array(h.result));o.update(e),l+=e.length,h._continueReading()},h._continueReading=function(){if(l>=t.size)r(null,o.digest(n));else{var e=l+524288;e>t.size&&(e=t.size),h.readAsArrayBuffer(a.call(t,l,e))}},h._continueReading()}},toHex:function(e){for(var t=[],n=0;n<e.length;n++)t.push(("0"+e.charCodeAt(n).toString(16)).substr(-2,2));return t.join("")},createHash:function(e){return s.crypto.lib.createHash(e)}},abort:{},each:function(e,t){for(var n in e){if(Object.prototype.hasOwnProperty.call(e,n))if(t.call(this,n,e[n])===s.abort)break}},arrayEach:function(e,t){for(var n in e){if(Object.prototype.hasOwnProperty.call(e,n))if(t.call(this,e[n],parseInt(n,10))===s.abort)break}},update:function(e,t){return s.each(t,(function(t,n){e[t]=n})),e},merge:function(e,t){return s.update(s.copy(e),t)},copy:function(e){if(null==e)return e;var t={};for(var n in e)t[n]=e[n];return t},isEmpty:function(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0},arraySliceFn:function(e){var t=e.slice||e.webkitSlice||e.mozSlice;return"function"==typeof t?t:null},isType:function(e,t){return"function"==typeof t&&(t=s.typeName(t)),Object.prototype.toString.call(e)==="[object "+t+"]"},typeName:function(e){if(Object.prototype.hasOwnProperty.call(e,"name"))return e.name;var t=e.toString(),n=t.match(/^\s*function (.+)\(/);return n?n[1]:t},error:function(e,t){var n=null;return"string"==typeof e.message&&""!==e.message&&("string"==typeof t||t&&t.message)&&((n=s.copy(e)).message=e.message),e.message=e.message||null,"string"==typeof t?e.message=t:"object"===i(t)&&null!==t&&(s.update(e,t),t.message&&(e.message=t.message),(t.code||t.name)&&(e.code=t.code||t.name),t.stack&&(e.stack=t.stack)),"function"==typeof Object.defineProperty&&(Object.defineProperty(e,"name",{writable:!0,enumerable:!1}),Object.defineProperty(e,"message",{enumerable:!0})),e.name=t&&t.name||e.name||e.code||"Error",e.time=new Date,n&&(e.originalError=n),e},inherit:function(e,t){var n=null;if(void 0===t)t=e,e=Object,n={};else{var r=function(){};r.prototype=e.prototype,n=new r}return t.constructor===Object&&(t.constructor=function(){if(e!==Object)return e.apply(this,arguments)}),t.constructor.prototype=n,s.update(t.constructor.prototype,t),t.constructor.__super__=e,t.constructor},mixin:function(){for(var e=arguments[0],t=1;t<arguments.length;t++)for(var n in arguments[t].prototype){var r=arguments[t].prototype[n];"constructor"!==n&&(e.prototype[n]=r)}return e},hideProperties:function(e,t){"function"==typeof Object.defineProperty&&s.arrayEach(t,(function(t){Object.defineProperty(e,t,{enumerable:!1,writable:!0,configurable:!0})}))},property:function(e,t,n,r,i){var o={configurable:!0,enumerable:void 0===r||r};"function"!=typeof n||i?(o.value=n,o.writable=!0):o.get=n,Object.defineProperty(e,t,o)},memoizedProperty:function(e,t,n,r){var i=null;s.property(e,t,(function(){return null===i&&(i=n()),i}),r)},hoistPayloadMember:function(e){var t=e.request,n=t.operation,r=t.service.api.operations[n],i=r.output;if(i.payload&&!r.hasEventOutput){var o=i.members[i.payload],a=e.data[i.payload];"structure"===o.type&&s.each(a,(function(t,n){s.property(e.data,t,n,!1)}))}},computeSha256:function(t,n){if(s.isNode()){var r=s.stream.Stream,i=e("fs");if("function"==typeof r&&t instanceof r){if("string"!=typeof t.path)return n(new Error("Non-file stream objects are not supported with SigV4"));var o={};"number"==typeof t.start&&(o.start=t.start),"number"==typeof t.end&&(o.end=t.end),t=i.createReadStream(t.path,o)}}s.crypto.sha256(t,"hex",(function(e,t){e?n(e):n(null,t)}))},isClockSkewed:function(e){if(e)return s.property(o.config,"isClockSkewed",Math.abs((new Date).getTime()-e)>=3e5,!1),o.config.isClockSkewed},applyClockOffset:function(e){e&&(o.config.systemClockOffset=e-(new Date).getTime())},extractRequestId:function(e){var t=e.httpResponse.headers["x-amz-request-id"]||e.httpResponse.headers["x-amzn-requestid"];!t&&e.data&&e.data.ResponseMetadata&&(t=e.data.ResponseMetadata.RequestId),t&&(e.requestId=t),e.error&&(e.error.requestId=t)},addPromises:function(e,t){var n=!1;void 0===t&&o&&o.config&&(t=o.config.getPromisesDependency()),void 0===t&&"undefined"!=typeof Promise&&(t=Promise),"function"!=typeof t&&(n=!0),Array.isArray(e)||(e=[e]);for(var r=0;r<e.length;r++){var i=e[r];n?i.deletePromisesFromClass&&i.deletePromisesFromClass():i.addPromisesToClass&&i.addPromisesToClass(t)}},promisifyMethod:function(e,t){return function(){var n=this,r=Array.prototype.slice.call(arguments);return new t((function(t,i){r.push((function(e,n){e?i(e):t(n)})),n[e].apply(n,r)}))}},isDualstackAvailable:function(t){if(!t)return!1;var n=e("../apis/metadata.json");return"string"!=typeof t&&(t=t.serviceIdentifier),!("string"!=typeof t||!n.hasOwnProperty(t))&&!!n[t].dualstackAvailable},calculateRetryDelay:function(e,t){t||(t={});var n=t.customBackoff||null;if("function"==typeof n)return n(e);var r="number"==typeof t.base?t.base:100;return Math.random()*(Math.pow(2,e)*r)},handleRequestWithRetries:function(e,t,n){t||(t={});var r=o.HttpClient.getInstance(),i=t.httpOptions||{},a=0,c=function(e){var r=t.maxRetries||0;if(e&&"TimeoutError"===e.code&&(e.retryable=!0),e&&e.retryable&&a<r){a++;var i=s.calculateRetryDelay(a,t.retryDelayOptions);setTimeout(u,i+(e.retryAfter||0))}else n(e)},u=function(){var t="";r.handleRequest(e,i,(function(e){e.on("data",(function(e){t+=e.toString()})),e.on("end",(function(){var r=e.statusCode;if(r<300)n(null,t);else{var i=1e3*parseInt(e.headers["retry-after"],10)||0,o=s.error(new Error,{retryable:r>=500||429===r});i&&o.retryable&&(o.retryAfter=i),c(o)}}))}),c)};o.util.defer(u)},uuid:{v4:function(){return e("uuid").v4()}},convertPayloadToString:function(e){var t=e.request,n=t.operation,r=t.service.api.operations[n].output||{};r.payload&&e.data[r.payload]&&(e.data[r.payload]=e.data[r.payload].toString())},defer:function(e){"object"===i(n)&&"function"==typeof n.nextTick?n.nextTick(e):"function"==typeof r?r(e):setTimeout(e,0)},getRequestPayloadShape:function(e){var t=e.service.api.operations;if(t){var n=(t||{})[e.operation];if(n&&n.input&&n.input.payload)return n.input.members[n.input.payload]}},getProfilesFromSharedConfig:function(e,t){var r={},i={};if(n.env[s.configOptInEnv])i=e.loadFrom({isConfig:!0,filename:n.env[s.sharedConfigFileEnv]});for(var o=e.loadFrom({filename:t||n.env[s.configOptInEnv]&&n.env[s.sharedCredentialsFileEnv]}),a=0,c=Object.keys(i);a<c.length;a++)r[c[a]]=i[c[a]];for(a=0,c=Object.keys(o);a<c.length;a++)r[c[a]]=o[c[a]];return r},defaultProfile:"default",configOptInEnv:"AWS_SDK_LOAD_CONFIG",sharedCredentialsFileEnv:"AWS_SHARED_CREDENTIALS_FILE",sharedConfigFileEnv:"AWS_CONFIG_FILE",imdsDisabledEnv:"AWS_EC2_METADATA_DISABLED"};t.exports=s}).call(this,e("_process"),e("timers").setImmediate)},{"../apis/metadata.json":5,"./core":19,_process:86,fs:80,timers:94,uuid:99}],73:[function(e,t,n){var r=e("../util"),i=e("../model/shape");function o(){}function s(e,t){for(var n=e.getElementsByTagName(t),r=0,i=n.length;r<i;r++)if(n[r].parentNode===e)return n[r]}function a(e,t){switch(t||(t={}),t.type){case"structure":return c(e,t);case"map":return function(e,t){var n={},r=t.key.name||"key",i=t.value.name||"value",o=t.flattened?t.name:"entry",c=e.firstElementChild;for(;c;){if(c.nodeName===o){var u=s(c,r).textContent,l=s(c,i);n[u]=a(l,t.value)}c=c.nextElementSibling}return n}(e,t);case"list":return function(e,t){var n=[],r=t.flattened?t.name:t.member.name||"member",i=e.firstElementChild;for(;i;)i.nodeName===r&&n.push(a(i,t.member)),i=i.nextElementSibling;return n}(e,t);case void 0:case null:return function(e){if(null==e)return"";if(!e.firstElementChild)return null===e.parentNode.parentNode?{}:0===e.childNodes.length?"":e.textContent;var t={type:"structure",members:{}},n=e.firstElementChild;for(;n;){var r=n.nodeName;Object.prototype.hasOwnProperty.call(t.members,r)?t.members[r].type="list":t.members[r]={name:r},n=n.nextElementSibling}return c(e,t)}(e);default:return function(e,t){if(e.getAttribute){var n=e.getAttribute("encoding");"base64"===n&&(t=new i.create({type:n}))}var r=e.textContent;""===r&&(r=null);return"function"==typeof t.toType?t.toType(r):r}(e,t)}}function c(e,t){var n={};return null===e?n:(r.each(t.members,(function(t,r){if(r.isXmlAttribute){if(Object.prototype.hasOwnProperty.call(e.attributes,r.name)){var i=e.attributes[r.name].value;n[t]=a({textContent:i},r)}}else{var o=r.flattened?e:s(e,r.name);o?n[t]=a(o,r):r.flattened||"list"!==r.type||(n[t]=r.defaultValue)}})),n)}o.prototype.parse=function(e,t){if(""===e.replace(/^\s+/,""))return{};var n,i;try{if(window.DOMParser){try{n=(new DOMParser).parseFromString(e,"text/xml")}catch(e){throw r.error(new Error("Parse error in document"),{originalError:e,code:"XMLParserError",retryable:!0})}if(null===n.documentElement)throw r.error(new Error("Cannot parse empty document."),{code:"XMLParserError",retryable:!0});var o=n.getElementsByTagName("parsererror")[0];if(o&&(o.parentNode===n||"body"===o.parentNode.nodeName||o.parentNode.parentNode===n||"body"===o.parentNode.parentNode.nodeName)){var c=o.getElementsByTagName("div")[0]||o;throw r.error(new Error(c.textContent||"Parser error in document"),{code:"XMLParserError",retryable:!0})}}else{if(!window.ActiveXObject)throw new Error("Cannot load XML parser");if((n=new window.ActiveXObject("Microsoft.XMLDOM")).async=!1,!n.loadXML(e))throw r.error(new Error("Parse error in document"),{code:"XMLParserError",retryable:!0})}}catch(e){i=e}if(n&&n.documentElement&&!i){var u=a(n.documentElement,t),l=s(n.documentElement,"ResponseMetadata");return l&&(u.ResponseMetadata=a(l,{})),u}if(i)throw r.error(i||new Error,{code:"XMLParserError",retryable:!0});return{}},t.exports=o},{"../model/shape":44,"../util":72}],74:[function(e,t,n){var r=e("../util"),i=e("./xml-node").XmlNode,o=e("./xml-text").XmlText;function s(){}function a(e,t,n){switch(n.type){case"structure":return function(e,t,n){r.arrayEach(n.memberNames,(function(r){var o=n.members[r];if("body"===o.location){var s=t[r],u=o.name;if(null!=s)if(o.isXmlAttribute)e.addAttribute(u,s);else if(o.flattened)a(e,s,o);else{var l=new i(u);e.addChildNode(l),c(l,o),a(l,s,o)}}}))}(e,t,n);case"map":return function(e,t,n){var o=n.key.name||"key",s=n.value.name||"value";r.each(t,(function(t,r){var c=new i(n.flattened?n.name:"entry");e.addChildNode(c);var u=new i(o),l=new i(s);c.addChildNode(u),c.addChildNode(l),a(u,t,n.key),a(l,r,n.value)}))}(e,t,n);case"list":return function(e,t,n){n.flattened?r.arrayEach(t,(function(t){var r=n.member.name||n.name,o=new i(r);e.addChildNode(o),a(o,t,n.member)})):r.arrayEach(t,(function(t){var r=n.member.name||"member",o=new i(r);e.addChildNode(o),a(o,t,n.member)}))}(e,t,n);default:return function(e,t,n){e.addChildNode(new o(n.toWireFormat(t)))}(e,t,n)}}function c(e,t,n){var r,i="xmlns";t.xmlNamespaceUri?(r=t.xmlNamespaceUri,t.xmlNamespacePrefix&&(i+=":"+t.xmlNamespacePrefix)):n&&t.api.xmlNamespaceUri&&(r=t.api.xmlNamespaceUri),r&&e.addAttribute(i,r)}s.prototype.toXML=function(e,t,n,r){var o=new i(n);return c(o,t,!0),a(o,e,t),o.children.length>0||r?o.toString():""},t.exports=s},{"../util":72,"./xml-node":77,"./xml-text":78}],75:[function(e,t,n){t.exports={escapeAttribute:function(e){return e.replace(/&/g,"&amp;").replace(/'/g,"&apos;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")}}},{}],76:[function(e,t,n){t.exports={escapeElement:function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}}},{}],77:[function(e,t,n){var r=e("./escape-attribute").escapeAttribute;function i(e,t){void 0===t&&(t=[]),this.name=e,this.children=t,this.attributes={}}i.prototype.addAttribute=function(e,t){return this.attributes[e]=t,this},i.prototype.addChildNode=function(e){return this.children.push(e),this},i.prototype.removeAttribute=function(e){return delete this.attributes[e],this},i.prototype.toString=function(){for(var e=Boolean(this.children.length),t="<"+this.name,n=this.attributes,i=0,o=Object.keys(n);i<o.length;i++){var s=o[i],a=n[s];null!=a&&(t+=" "+s+'="'+r(""+a)+'"')}return t+(e?">"+this.children.map((function(e){return e.toString()})).join("")+"</"+this.name+">":"/>")},t.exports={XmlNode:i}},{"./escape-attribute":75}],78:[function(e,t,n){var r=e("./escape-element").escapeElement;function i(e){this.value=e}i.prototype.toString=function(){return r(""+this.value)},t.exports={XmlText:i}},{"./escape-element":76}],79:[function(e,t,n){"use strict";n.byteLength=function(e){var t=u(e),n=t[0],r=t[1];return 3*(n+r)/4-r},n.toByteArray=function(e){var t,n,r=u(e),s=r[0],a=r[1],c=new o(function(e,t,n){return 3*(t+n)/4-n}(0,s,a)),l=0,h=a>0?s-4:s;for(n=0;n<h;n+=4)t=i[e.charCodeAt(n)]<<18|i[e.charCodeAt(n+1)]<<12|i[e.charCodeAt(n+2)]<<6|i[e.charCodeAt(n+3)],c[l++]=t>>16&255,c[l++]=t>>8&255,c[l++]=255&t;2===a&&(t=i[e.charCodeAt(n)]<<2|i[e.charCodeAt(n+1)]>>4,c[l++]=255&t);1===a&&(t=i[e.charCodeAt(n)]<<10|i[e.charCodeAt(n+1)]<<4|i[e.charCodeAt(n+2)]>>2,c[l++]=t>>8&255,c[l++]=255&t);return c},n.fromByteArray=function(e){for(var t,n=e.length,i=n%3,o=[],s=0,a=n-i;s<a;s+=16383)o.push(l(e,s,s+16383>a?a:s+16383));1===i?(t=e[n-1],o.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],o.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,c=s.length;a<c;++a)r[a]=s[a],i[s.charCodeAt(a)]=a;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function l(e,t,n){for(var i,o,s=[],a=t;a<n;a+=3)i=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},{}],80:[function(e,t,n){},{}],81:[function(t,n,r){(function(e,n){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */"use strict";var i=t("base64-js"),o=t("ieee754"),s=t("isarray");function a(){return n.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function c(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return n.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=n.prototype:(null===e&&(e=new n(t)),e.length=t),e}function n(e,t,r){if(!(n.TYPED_ARRAY_SUPPORT||this instanceof n))return new n(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return u(this,e,t,r)}function u(e,t,r,i){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,i){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(i||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===i?new Uint8Array(t):void 0===i?new Uint8Array(t,r):new Uint8Array(t,r,i);n.TYPED_ARRAY_SUPPORT?(e=t).__proto__=n.prototype:e=p(e,t);return e}(e,t,r,i):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!n.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var i=0|d(t,r),o=(e=c(e,i)).write(t,r);o!==i&&(e=e.slice(0,o));return e}(e,t,r):function(e,t){if(n.isBuffer(t)){var r=0|f(t.length);return 0===(e=c(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(i=t.length)!=i?c(e,0):p(e,t);if("Buffer"===t.type&&s(t.data))return p(e,t.data)}var i;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(l(t),e=c(e,t<0?0:0|f(t)),!n.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function p(e,t){var n=t.length<0?0:0|f(t.length);e=c(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function f(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function d(e,t){if(n.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var i=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return F(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return H(e).length;default:if(i)return F(e).length;t=(""+t).toLowerCase(),i=!0}}function g(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return x(this,t,n);case"utf8":case"utf-8":return I(this,t,n);case"ascii":return A(this,t,n);case"latin1":case"binary":return R(this,t,n);case"base64":return k(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function m(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function v(e,t,r,i,o){if(0===e.length)return-1;if("string"==typeof r?(i=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=n.from(t,i)),n.isBuffer(t))return 0===t.length?-1:y(e,t,r,i,o);if("number"==typeof t)return t&=255,n.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):y(e,[t],r,i,o);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,r,i){var o,s=1,a=e.length,c=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;s=2,a/=2,c/=2,n/=2}function u(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){var l=-1;for(o=n;o<a;o++)if(u(e,o)===u(t,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===c)return l*s}else-1!==l&&(o-=o-l),l=-1}else for(n+c>a&&(n=a-c),o=n;o>=0;o--){for(var h=!0,p=0;p<c;p++)if(u(e,o+p)!==u(t,p)){h=!1;break}if(h)return o}return-1}function b(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[n+s]=a}return s}function w(e,t,n,r){return z(F(t,e.length-n),e,n,r)}function _(e,t,n,r){return z(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function S(e,t,n,r){return _(e,t,n,r)}function E(e,t,n,r){return z(H(t),e,n,r)}function C(e,t,n,r){return z(function(e,t){for(var n,r,i,o=[],s=0;s<e.length&&!((t-=2)<0);++s)n=e.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(t,e.length-n),e,n,r)}function k(e,t,n){return 0===t&&n===e.length?i.fromByteArray(e):i.fromByteArray(e.slice(t,n))}function I(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var o,s,a,c,u=e[i],l=null,h=u>239?4:u>223?3:u>191?2:1;if(i+h<=n)switch(h){case 1:u<128&&(l=u);break;case 2:128==(192&(o=e[i+1]))&&(c=(31&u)<<6|63&o)>127&&(l=c);break;case 3:o=e[i+1],s=e[i+2],128==(192&o)&&128==(192&s)&&(c=(15&u)<<12|(63&o)<<6|63&s)>2047&&(c<55296||c>57343)&&(l=c);break;case 4:o=e[i+1],s=e[i+2],a=e[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(c=(15&u)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&c<1114112&&(l=c)}null===l?(l=65533,h=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),i+=h}return function(e){var t=e.length;if(t<=T)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=T));return n}(r)}r.Buffer=n,r.SlowBuffer=function(e){+e!=e&&(e=0);return n.alloc(+e)},r.INSPECT_MAX_BYTES=50,n.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),r.kMaxLength=a(),n.poolSize=8192,n._augment=function(e){return e.__proto__=n.prototype,e},n.from=function(e,t,n){return u(null,e,t,n)},n.TYPED_ARRAY_SUPPORT&&(n.prototype.__proto__=Uint8Array.prototype,n.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&n[Symbol.species]===n&&Object.defineProperty(n,Symbol.species,{value:null,configurable:!0})),n.alloc=function(e,t,n){return function(e,t,n,r){return l(t),t<=0?c(e,t):void 0!==n?"string"==typeof r?c(e,t).fill(n,r):c(e,t).fill(n):c(e,t)}(null,e,t,n)},n.allocUnsafe=function(e){return h(null,e)},n.allocUnsafeSlow=function(e){return h(null,e)},n.isBuffer=function(e){return!(null==e||!e._isBuffer)},n.compare=function(e,t){if(!n.isBuffer(e)||!n.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,i=t.length,o=0,s=Math.min(r,i);o<s;++o)if(e[o]!==t[o]){r=e[o],i=t[o];break}return r<i?-1:i<r?1:0},n.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},n.concat=function(e,t){if(!s(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return n.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var i=n.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var a=e[r];if(!n.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(i,o),o+=a.length}return i},n.byteLength=d,n.prototype._isBuffer=!0,n.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)m(this,t,t+1);return this},n.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},n.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},n.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?I(this,0,e):g.apply(this,arguments)},n.prototype.equals=function(e){if(!n.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===n.compare(this,e)},n.prototype.inspect=function(){var e="",t=r.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},n.prototype.compare=function(e,t,r,i,o){if(!n.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===i&&(i=0),void 0===o&&(o=this.length),t<0||r>e.length||i<0||o>this.length)throw new RangeError("out of range index");if(i>=o&&t>=r)return 0;if(i>=o)return-1;if(t>=r)return 1;if(this===e)return 0;for(var s=(o>>>=0)-(i>>>=0),a=(r>>>=0)-(t>>>=0),c=Math.min(s,a),u=this.slice(i,o),l=e.slice(t,r),h=0;h<c;++h)if(u[h]!==l[h]){s=u[h],a=l[h];break}return s<a?-1:a<s?1:0},n.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},n.prototype.indexOf=function(e,t,n){return v(this,e,t,n,!0)},n.prototype.lastIndexOf=function(e,t,n){return v(this,e,t,n,!1)},n.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return b(this,e,t,n);case"utf8":case"utf-8":return w(this,e,t,n);case"ascii":return _(this,e,t,n);case"latin1":case"binary":return S(this,e,t,n);case"base64":return E(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},n.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var T=4096;function A(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function R(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function x(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=t;o<n;++o)i+=B(e[o]);return i}function P(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function O(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function N(e,t,r,i,o,s){if(!n.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<s)throw new RangeError('"value" argument is out of bounds');if(r+i>e.length)throw new RangeError("Index out of range")}function L(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-n,2);i<o;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function M(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-n,4);i<o;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function D(e,t,n,r,i,o){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function q(e,t,n,r,i){return i||D(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function U(e,t,n,r,i){return i||D(e,0,n,8),o.write(e,t,n,r,52,8),n+8}n.prototype.slice=function(e,t){var r,i=this.length;if((e=~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),(t=void 0===t?i:~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),t<e&&(t=e),n.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=n.prototype;else{var o=t-e;r=new n(o,void 0);for(var s=0;s<o;++s)r[s]=this[s+e]}return r},n.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r},n.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=this[e+--t],i=1;t>0&&(i*=256);)r+=this[e+--t]*i;return r},n.prototype.readUInt8=function(e,t){return t||O(e,1,this.length),this[e]},n.prototype.readUInt16LE=function(e,t){return t||O(e,2,this.length),this[e]|this[e+1]<<8},n.prototype.readUInt16BE=function(e,t){return t||O(e,2,this.length),this[e]<<8|this[e+1]},n.prototype.readUInt32LE=function(e,t){return t||O(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},n.prototype.readUInt32BE=function(e,t){return t||O(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},n.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*t)),r},n.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=t,i=1,o=this[e+--r];r>0&&(i*=256);)o+=this[e+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},n.prototype.readInt8=function(e,t){return t||O(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},n.prototype.readInt16LE=function(e,t){t||O(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},n.prototype.readInt16BE=function(e,t){t||O(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},n.prototype.readInt32LE=function(e,t){return t||O(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},n.prototype.readInt32BE=function(e,t){return t||O(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},n.prototype.readFloatLE=function(e,t){return t||O(e,4,this.length),o.read(this,e,!0,23,4)},n.prototype.readFloatBE=function(e,t){return t||O(e,4,this.length),o.read(this,e,!1,23,4)},n.prototype.readDoubleLE=function(e,t){return t||O(e,8,this.length),o.read(this,e,!0,52,8)},n.prototype.readDoubleBE=function(e,t){return t||O(e,8,this.length),o.read(this,e,!1,52,8)},n.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[t]=255&e;++o<n&&(i*=256);)this[t+o]=e/i&255;return t+n},n.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+n},n.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,1,255,0),n.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},n.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,2,65535,0),n.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},n.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,2,65535,0),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},n.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,4,4294967295,0),n.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):M(this,e,t,!0),t+4},n.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,4,4294967295,0),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):M(this,e,t,!1),t+4},n.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);N(this,e,t,n,i-1,-i)}var o=0,s=1,a=0;for(this[t]=255&e;++o<n&&(s*=256);)e<0&&0===a&&0!==this[t+o-1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},n.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);N(this,e,t,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[t+o]=255&e;--o>=0&&(s*=256);)e<0&&0===a&&0!==this[t+o+1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},n.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,1,127,-128),n.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},n.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,2,32767,-32768),n.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},n.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,2,32767,-32768),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},n.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,4,2147483647,-2147483648),n.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):M(this,e,t,!0),t+4},n.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||N(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):M(this,e,t,!1),t+4},n.prototype.writeFloatLE=function(e,t,n){return q(this,e,t,!0,n)},n.prototype.writeFloatBE=function(e,t,n){return q(this,e,t,!1,n)},n.prototype.writeDoubleLE=function(e,t,n){return U(this,e,t,!0,n)},n.prototype.writeDoubleBE=function(e,t,n){return U(this,e,t,!1,n)},n.prototype.copy=function(e,t,r,i){if(r||(r=0),i||0===i||(i=this.length),t>=e.length&&(t=e.length),t||(t=0),i>0&&i<r&&(i=r),i===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-t<i-r&&(i=e.length-t+r);var o,s=i-r;if(this===e&&r<t&&t<i)for(o=s-1;o>=0;--o)e[o+t]=this[o+r];else if(s<1e3||!n.TYPED_ARRAY_SUPPORT)for(o=0;o<s;++o)e[o+t]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+s),t);return s},n.prototype.fill=function(e,t,r,i){if("string"==typeof e){if("string"==typeof t?(i=t,t=0,r=this.length):"string"==typeof r&&(i=r,r=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!n.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var s;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(s=t;s<r;++s)this[s]=e;else{var a=n.isBuffer(e)?e:F(new n(e,i).toString()),c=a.length;for(s=0;s<r-t;++s)this[s+t]=a[s%c]}return this};var j=/[^+\/0-9A-Za-z-_]/g;function B(e){return e<16?"0"+e.toString(16):e.toString(16)}function F(e,t){var n;t=t||1/0;for(var r=e.length,i=null,o=[],s=0;s<r;++s){if((n=e.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function H(e){return i.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(j,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function z(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}}).call(this,void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t("buffer").Buffer)},{"base64-js":79,buffer:81,ieee754:83,isarray:84}],82:[function(e,t,n){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function o(e){return"function"==typeof e}function s(e){return"object"===i(e)&&null!==e}function a(e){return void 0===e}t.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},r.prototype.emit=function(e){var t,n,r,i,c,u;if(this._events||(this._events={}),"error"===e&&(!this._events.error||s(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var l=new Error('Uncaught, unspecified "error" event. ('+t+")");throw l.context=t,l}if(a(n=this._events[e]))return!1;if(o(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:i=Array.prototype.slice.call(arguments,1),n.apply(this,i)}else if(s(n))for(i=Array.prototype.slice.call(arguments,1),r=(u=n.slice()).length,c=0;c<r;c++)u[c].apply(this,i);return!0},r.prototype.addListener=function(e,t){var n;if(!o(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,o(t.listener)?t.listener:t),this._events[e]?s(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,s(this._events[e])&&!this._events[e].warned&&(n=a(this._maxListeners)?r.defaultMaxListeners:this._maxListeners)&&n>0&&this._events[e].length>n&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(e,t){if(!o(t))throw TypeError("listener must be a function");var n=!1;function r(){this.removeListener(e,r),n||(n=!0,t.apply(this,arguments))}return r.listener=t,this.on(e,r),this},r.prototype.removeListener=function(e,t){var n,r,i,a;if(!o(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(i=(n=this._events[e]).length,r=-1,n===t||o(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(s(n)){for(a=i;a-- >0;)if(n[a]===t||n[a].listener&&n[a].listener===t){r=a;break}if(r<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(r,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},r.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(o(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},r.prototype.listeners=function(e){return this._events&&this._events[e]?o(this._events[e])?[this._events[e]]:this._events[e].slice():[]},r.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(o(t))return 1;if(t)return t.length}return 0},r.listenerCount=function(e,t){return e.listenerCount(t)}},{}],83:[function(e,t,n){n.read=function(e,t,n,r,i){var o,s,a=8*i-r-1,c=(1<<a)-1,u=c>>1,l=-7,h=n?i-1:0,p=n?-1:1,f=e[t+h];for(h+=p,o=f&(1<<-l)-1,f>>=-l,l+=a;l>0;o=256*o+e[t+h],h+=p,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=r;l>0;s=256*s+e[t+h],h+=p,l-=8);if(0===o)o=1-u;else{if(o===c)return s?NaN:1/0*(f?-1:1);s+=Math.pow(2,r),o-=u}return(f?-1:1)*s*Math.pow(2,o-r)},n.write=function(e,t,n,r,i,o){var s,a,c,u=8*o-i-1,l=(1<<u)-1,h=l>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,f=r?0:o-1,d=r?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-s))<1&&(s--,c*=2),(t+=s+h>=1?p/c:p*Math.pow(2,1-h))*c>=2&&(s++,c/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(t*c-1)*Math.pow(2,i),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;e[n+f]=255&a,f+=d,a/=256,i-=8);for(s=s<<i|a,u+=i;u>0;e[n+f]=255&s,f+=d,s/=256,u-=8);e[n+f-d]|=128*g}},{}],84:[function(e,t,n){var r={}.toString;t.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},{}],85:[function(e,t,n){!function(e){"use strict";function t(e){return null!==e&&"[object Array]"===Object.prototype.toString.call(e)}function n(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)}function r(e,i){if(e===i)return!0;if(Object.prototype.toString.call(e)!==Object.prototype.toString.call(i))return!1;if(!0===t(e)){if(e.length!==i.length)return!1;for(var o=0;o<e.length;o++)if(!1===r(e[o],i[o]))return!1;return!0}if(!0===n(e)){var s={};for(var a in e)if(hasOwnProperty.call(e,a)){if(!1===r(e[a],i[a]))return!1;s[a]=!0}for(var c in i)if(hasOwnProperty.call(i,c)&&!0!==s[c])return!1;return!0}return!1}function i(e){if(""===e||!1===e||null===e)return!0;if(t(e)&&0===e.length)return!0;if(n(e)){for(var r in e)if(e.hasOwnProperty(r))return!1;return!0}return!1}var o;o="function"==typeof String.prototype.trimLeft?function(e){return e.trimLeft()}:function(e){return e.match(/^\s*(.*)/)[1]};var s=0,a=1,c=2,u=3,l=4,h=6,p=8,f=9,d={".":"Dot","*":"Star",",":"Comma",":":"Colon","{":"Lbrace","}":"Rbrace","]":"Rbracket","(":"Lparen",")":"Rparen","@":"Current"},g={"<":!0,">":!0,"=":!0,"!":!0},m={" ":!0,"\t":!0,"\n":!0};function v(e){return e>="0"&&e<="9"||"-"===e}function y(){}y.prototype={tokenize:function(e){var t,n,r,i,o=[];for(this._current=0;this._current<e.length;)if((i=e[this._current])>="a"&&i<="z"||i>="A"&&i<="Z"||"_"===i)t=this._current,n=this._consumeUnquotedIdentifier(e),o.push({type:"UnquotedIdentifier",value:n,start:t});else if(void 0!==d[e[this._current]])o.push({type:d[e[this._current]],value:e[this._current],start:this._current}),this._current++;else if(v(e[this._current]))r=this._consumeNumber(e),o.push(r);else if("["===e[this._current])r=this._consumeLBracket(e),o.push(r);else if('"'===e[this._current])t=this._current,n=this._consumeQuotedIdentifier(e),o.push({type:"QuotedIdentifier",value:n,start:t});else if("'"===e[this._current])t=this._current,n=this._consumeRawStringLiteral(e),o.push({type:"Literal",value:n,start:t});else if("`"===e[this._current]){t=this._current;var s=this._consumeLiteral(e);o.push({type:"Literal",value:s,start:t})}else if(void 0!==g[e[this._current]])o.push(this._consumeOperator(e));else if(void 0!==m[e[this._current]])this._current++;else if("&"===e[this._current])t=this._current,this._current++,"&"===e[this._current]?(this._current++,o.push({type:"And",value:"&&",start:t})):o.push({type:"Expref",value:"&",start:t});else{if("|"!==e[this._current]){var a=new Error("Unknown character:"+e[this._current]);throw a.name="LexerError",a}t=this._current,this._current++,"|"===e[this._current]?(this._current++,o.push({type:"Or",value:"||",start:t})):o.push({type:"Pipe",value:"|",start:t})}return o},_consumeUnquotedIdentifier:function(e){var t,n=this._current;for(this._current++;this._current<e.length&&((t=e[this._current])>="a"&&t<="z"||t>="A"&&t<="Z"||t>="0"&&t<="9"||"_"===t);)this._current++;return e.slice(n,this._current)},_consumeQuotedIdentifier:function(e){var t=this._current;this._current++;for(var n=e.length;'"'!==e[this._current]&&this._current<n;){var r=this._current;"\\"!==e[r]||"\\"!==e[r+1]&&'"'!==e[r+1]?r++:r+=2,this._current=r}return this._current++,JSON.parse(e.slice(t,this._current))},_consumeRawStringLiteral:function(e){var t=this._current;this._current++;for(var n=e.length;"'"!==e[this._current]&&this._current<n;){var r=this._current;"\\"!==e[r]||"\\"!==e[r+1]&&"'"!==e[r+1]?r++:r+=2,this._current=r}return this._current++,e.slice(t+1,this._current-1).replace("\\'","'")},_consumeNumber:function(e){var t=this._current;this._current++;for(var n=e.length;v(e[this._current])&&this._current<n;)this._current++;return{type:"Number",value:parseInt(e.slice(t,this._current)),start:t}},_consumeLBracket:function(e){var t=this._current;return this._current++,"?"===e[this._current]?(this._current++,{type:"Filter",value:"[?",start:t}):"]"===e[this._current]?(this._current++,{type:"Flatten",value:"[]",start:t}):{type:"Lbracket",value:"[",start:t}},_consumeOperator:function(e){var t=this._current,n=e[t];return this._current++,"!"===n?"="===e[this._current]?(this._current++,{type:"NE",value:"!=",start:t}):{type:"Not",value:"!",start:t}:"<"===n?"="===e[this._current]?(this._current++,{type:"LTE",value:"<=",start:t}):{type:"LT",value:"<",start:t}:">"===n?"="===e[this._current]?(this._current++,{type:"GTE",value:">=",start:t}):{type:"GT",value:">",start:t}:"="===n&&"="===e[this._current]?(this._current++,{type:"EQ",value:"==",start:t}):void 0},_consumeLiteral:function(e){this._current++;for(var t,n=this._current,r=e.length;"`"!==e[this._current]&&this._current<r;){var i=this._current;"\\"!==e[i]||"\\"!==e[i+1]&&"`"!==e[i+1]?i++:i+=2,this._current=i}var s=o(e.slice(n,this._current));return s=s.replace("\\`","`"),t=this._looksLikeJSON(s)?JSON.parse(s):JSON.parse('"'+s+'"'),this._current++,t},_looksLikeJSON:function(e){if(""===e)return!1;if('[{"'.indexOf(e[0])>=0)return!0;if(["true","false","null"].indexOf(e)>=0)return!0;if(!("-0123456789".indexOf(e[0])>=0))return!1;try{return JSON.parse(e),!0}catch(e){return!1}}};var b={};function w(){}function _(e){this.runtime=e}function S(e){this._interpreter=e,this.functionTable={abs:{_func:this._functionAbs,_signature:[{types:[s]}]},avg:{_func:this._functionAvg,_signature:[{types:[p]}]},ceil:{_func:this._functionCeil,_signature:[{types:[s]}]},contains:{_func:this._functionContains,_signature:[{types:[c,u]},{types:[a]}]},ends_with:{_func:this._functionEndsWith,_signature:[{types:[c]},{types:[c]}]},floor:{_func:this._functionFloor,_signature:[{types:[s]}]},length:{_func:this._functionLength,_signature:[{types:[c,u,l]}]},map:{_func:this._functionMap,_signature:[{types:[h]},{types:[u]}]},max:{_func:this._functionMax,_signature:[{types:[p,f]}]},merge:{_func:this._functionMerge,_signature:[{types:[l],variadic:!0}]},max_by:{_func:this._functionMaxBy,_signature:[{types:[u]},{types:[h]}]},sum:{_func:this._functionSum,_signature:[{types:[p]}]},starts_with:{_func:this._functionStartsWith,_signature:[{types:[c]},{types:[c]}]},min:{_func:this._functionMin,_signature:[{types:[p,f]}]},min_by:{_func:this._functionMinBy,_signature:[{types:[u]},{types:[h]}]},type:{_func:this._functionType,_signature:[{types:[a]}]},keys:{_func:this._functionKeys,_signature:[{types:[l]}]},values:{_func:this._functionValues,_signature:[{types:[l]}]},sort:{_func:this._functionSort,_signature:[{types:[f,p]}]},sort_by:{_func:this._functionSortBy,_signature:[{types:[u]},{types:[h]}]},join:{_func:this._functionJoin,_signature:[{types:[c]},{types:[f]}]},reverse:{_func:this._functionReverse,_signature:[{types:[c,u]}]},to_array:{_func:this._functionToArray,_signature:[{types:[a]}]},to_string:{_func:this._functionToString,_signature:[{types:[a]}]},to_number:{_func:this._functionToNumber,_signature:[{types:[a]}]},not_null:{_func:this._functionNotNull,_signature:[{types:[a],variadic:!0}]}}}b.EOF=0,b.UnquotedIdentifier=0,b.QuotedIdentifier=0,b.Rbracket=0,b.Rparen=0,b.Comma=0,b.Rbrace=0,b.Number=0,b.Current=0,b.Expref=0,b.Pipe=1,b.Or=2,b.And=3,b.EQ=5,b.GT=5,b.LT=5,b.GTE=5,b.LTE=5,b.NE=5,b.Flatten=9,b.Star=20,b.Filter=21,b.Dot=40,b.Not=45,b.Lbrace=50,b.Lbracket=55,b.Lparen=60,w.prototype={parse:function(e){this._loadTokens(e),this.index=0;var t=this.expression(0);if("EOF"!==this._lookahead(0)){var n=this._lookaheadToken(0),r=new Error("Unexpected token type: "+n.type+", value: "+n.value);throw r.name="ParserError",r}return t},_loadTokens:function(e){var t=(new y).tokenize(e);t.push({type:"EOF",value:"",start:e.length}),this.tokens=t},expression:function(e){var t=this._lookaheadToken(0);this._advance();for(var n=this.nud(t),r=this._lookahead(0);e<b[r];)this._advance(),n=this.led(r,n),r=this._lookahead(0);return n},_lookahead:function(e){return this.tokens[this.index+e].type},_lookaheadToken:function(e){return this.tokens[this.index+e]},_advance:function(){this.index++},nud:function(e){var t,n;switch(e.type){case"Literal":return{type:"Literal",value:e.value};case"UnquotedIdentifier":return{type:"Field",name:e.value};case"QuotedIdentifier":var r={type:"Field",name:e.value};if("Lparen"===this._lookahead(0))throw new Error("Quoted identifier not allowed for function names.");return r;case"Not":return{type:"NotExpression",children:[t=this.expression(b.Not)]};case"Star":return t=null,{type:"ValueProjection",children:[{type:"Identity"},t="Rbracket"===this._lookahead(0)?{type:"Identity"}:this._parseProjectionRHS(b.Star)]};case"Filter":return this.led(e.type,{type:"Identity"});case"Lbrace":return this._parseMultiselectHash();case"Flatten":return{type:"Projection",children:[{type:"Flatten",children:[{type:"Identity"}]},t=this._parseProjectionRHS(b.Flatten)]};case"Lbracket":return"Number"===this._lookahead(0)||"Colon"===this._lookahead(0)?(t=this._parseIndexExpression(),this._projectIfSlice({type:"Identity"},t)):"Star"===this._lookahead(0)&&"Rbracket"===this._lookahead(1)?(this._advance(),this._advance(),{type:"Projection",children:[{type:"Identity"},t=this._parseProjectionRHS(b.Star)]}):this._parseMultiselectList();case"Current":return{type:"Current"};case"Expref":return{type:"ExpressionReference",children:[n=this.expression(b.Expref)]};case"Lparen":for(var i=[];"Rparen"!==this._lookahead(0);)"Current"===this._lookahead(0)?(n={type:"Current"},this._advance()):n=this.expression(0),i.push(n);return this._match("Rparen"),i[0];default:this._errorToken(e)}},led:function(e,t){var n;switch(e){case"Dot":var r=b.Dot;return"Star"!==this._lookahead(0)?{type:"Subexpression",children:[t,n=this._parseDotRHS(r)]}:(this._advance(),{type:"ValueProjection",children:[t,n=this._parseProjectionRHS(r)]});case"Pipe":return{type:"Pipe",children:[t,n=this.expression(b.Pipe)]};case"Or":return{type:"OrExpression",children:[t,n=this.expression(b.Or)]};case"And":return{type:"AndExpression",children:[t,n=this.expression(b.And)]};case"Lparen":for(var i,o=t.name,s=[];"Rparen"!==this._lookahead(0);)"Current"===this._lookahead(0)?(i={type:"Current"},this._advance()):i=this.expression(0),"Comma"===this._lookahead(0)&&this._match("Comma"),s.push(i);return this._match("Rparen"),{type:"Function",name:o,children:s};case"Filter":var a=this.expression(0);return this._match("Rbracket"),{type:"FilterProjection",children:[t,n="Flatten"===this._lookahead(0)?{type:"Identity"}:this._parseProjectionRHS(b.Filter),a]};case"Flatten":return{type:"Projection",children:[{type:"Flatten",children:[t]},this._parseProjectionRHS(b.Flatten)]};case"EQ":case"NE":case"GT":case"GTE":case"LT":case"LTE":return this._parseComparator(t,e);case"Lbracket":var c=this._lookaheadToken(0);return"Number"===c.type||"Colon"===c.type?(n=this._parseIndexExpression(),this._projectIfSlice(t,n)):(this._match("Star"),this._match("Rbracket"),{type:"Projection",children:[t,n=this._parseProjectionRHS(b.Star)]});default:this._errorToken(this._lookaheadToken(0))}},_match:function(e){if(this._lookahead(0)!==e){var t=this._lookaheadToken(0),n=new Error("Expected "+e+", got: "+t.type);throw n.name="ParserError",n}this._advance()},_errorToken:function(e){var t=new Error("Invalid token ("+e.type+'): "'+e.value+'"');throw t.name="ParserError",t},_parseIndexExpression:function(){if("Colon"===this._lookahead(0)||"Colon"===this._lookahead(1))return this._parseSliceExpression();var e={type:"Index",value:this._lookaheadToken(0).value};return this._advance(),this._match("Rbracket"),e},_projectIfSlice:function(e,t){var n={type:"IndexExpression",children:[e,t]};return"Slice"===t.type?{type:"Projection",children:[n,this._parseProjectionRHS(b.Star)]}:n},_parseSliceExpression:function(){for(var e=[null,null,null],t=0,n=this._lookahead(0);"Rbracket"!==n&&t<3;){if("Colon"===n)t++,this._advance();else{if("Number"!==n){var r=this._lookahead(0),i=new Error("Syntax error, unexpected token: "+r.value+"("+r.type+")");throw i.name="Parsererror",i}e[t]=this._lookaheadToken(0).value,this._advance()}n=this._lookahead(0)}return this._match("Rbracket"),{type:"Slice",children:e}},_parseComparator:function(e,t){return{type:"Comparator",name:t,children:[e,this.expression(b[t])]}},_parseDotRHS:function(e){var t=this._lookahead(0);return["UnquotedIdentifier","QuotedIdentifier","Star"].indexOf(t)>=0?this.expression(e):"Lbracket"===t?(this._match("Lbracket"),this._parseMultiselectList()):"Lbrace"===t?(this._match("Lbrace"),this._parseMultiselectHash()):void 0},_parseProjectionRHS:function(e){var t;if(b[this._lookahead(0)]<10)t={type:"Identity"};else if("Lbracket"===this._lookahead(0))t=this.expression(e);else if("Filter"===this._lookahead(0))t=this.expression(e);else{if("Dot"!==this._lookahead(0)){var n=this._lookaheadToken(0),r=new Error("Sytanx error, unexpected token: "+n.value+"("+n.type+")");throw r.name="ParserError",r}this._match("Dot"),t=this._parseDotRHS(e)}return t},_parseMultiselectList:function(){for(var e=[];"Rbracket"!==this._lookahead(0);){var t=this.expression(0);if(e.push(t),"Comma"===this._lookahead(0)&&(this._match("Comma"),"Rbracket"===this._lookahead(0)))throw new Error("Unexpected token Rbracket")}return this._match("Rbracket"),{type:"MultiSelectList",children:e}},_parseMultiselectHash:function(){for(var e,t,n,r=[],i=["UnquotedIdentifier","QuotedIdentifier"];;){if(e=this._lookaheadToken(0),i.indexOf(e.type)<0)throw new Error("Expecting an identifier token, got: "+e.type);if(t=e.value,this._advance(),this._match("Colon"),n={type:"KeyValuePair",name:t,value:this.expression(0)},r.push(n),"Comma"===this._lookahead(0))this._match("Comma");else if("Rbrace"===this._lookahead(0)){this._match("Rbrace");break}}return{type:"MultiSelectHash",children:r}}},_.prototype={search:function(e,t){return this.visit(e,t)},visit:function(e,o){var s,a,c,u,l,h,p,f,d;switch(e.type){case"Field":return null===o?null:n(o)?void 0===(h=o[e.name])?null:h:null;case"Subexpression":for(c=this.visit(e.children[0],o),d=1;d<e.children.length;d++)if(null===(c=this.visit(e.children[1],c)))return null;return c;case"IndexExpression":return p=this.visit(e.children[0],o),this.visit(e.children[1],p);case"Index":if(!t(o))return null;var g=e.value;return g<0&&(g=o.length+g),void 0===(c=o[g])&&(c=null),c;case"Slice":if(!t(o))return null;var m=e.children.slice(0),v=this.computeSliceParams(o.length,m),y=v[0],b=v[1],w=v[2];if(c=[],w>0)for(d=y;d<b;d+=w)c.push(o[d]);else for(d=y;d>b;d+=w)c.push(o[d]);return c;case"Projection":var _=this.visit(e.children[0],o);if(!t(_))return null;for(f=[],d=0;d<_.length;d++)null!==(a=this.visit(e.children[1],_[d]))&&f.push(a);return f;case"ValueProjection":if(!n(_=this.visit(e.children[0],o)))return null;f=[];var S=function(e){for(var t=Object.keys(e),n=[],r=0;r<t.length;r++)n.push(e[t[r]]);return n}(_);for(d=0;d<S.length;d++)null!==(a=this.visit(e.children[1],S[d]))&&f.push(a);return f;case"FilterProjection":if(!t(_=this.visit(e.children[0],o)))return null;var E=[],C=[];for(d=0;d<_.length;d++)i(s=this.visit(e.children[2],_[d]))||E.push(_[d]);for(var k=0;k<E.length;k++)null!==(a=this.visit(e.children[1],E[k]))&&C.push(a);return C;case"Comparator":switch(u=this.visit(e.children[0],o),l=this.visit(e.children[1],o),e.name){case"EQ":c=r(u,l);break;case"NE":c=!r(u,l);break;case"GT":c=u>l;break;case"GTE":c=u>=l;break;case"LT":c=u<l;break;case"LTE":c=u<=l;break;default:throw new Error("Unknown comparator: "+e.name)}return c;case"Flatten":var I=this.visit(e.children[0],o);if(!t(I))return null;var T=[];for(d=0;d<I.length;d++)t(a=I[d])?T.push.apply(T,a):T.push(a);return T;case"Identity":return o;case"MultiSelectList":if(null===o)return null;for(f=[],d=0;d<e.children.length;d++)f.push(this.visit(e.children[d],o));return f;case"MultiSelectHash":if(null===o)return null;var A;for(f={},d=0;d<e.children.length;d++)f[(A=e.children[d]).name]=this.visit(A.value,o);return f;case"OrExpression":return i(s=this.visit(e.children[0],o))&&(s=this.visit(e.children[1],o)),s;case"AndExpression":return!0===i(u=this.visit(e.children[0],o))?u:this.visit(e.children[1],o);case"NotExpression":return i(u=this.visit(e.children[0],o));case"Literal":return e.value;case"Pipe":return p=this.visit(e.children[0],o),this.visit(e.children[1],p);case"Current":return o;case"Function":var R=[];for(d=0;d<e.children.length;d++)R.push(this.visit(e.children[d],o));return this.runtime.callFunction(e.name,R);case"ExpressionReference":var x=e.children[0];return x.jmespathType="Expref",x;default:throw new Error("Unknown node type: "+e.type)}},computeSliceParams:function(e,t){var n=t[0],r=t[1],i=t[2],o=[null,null,null];if(null===i)i=1;else if(0===i){var s=new Error("Invalid slice, step cannot be 0");throw s.name="RuntimeError",s}var a=i<0;return n=null===n?a?e-1:0:this.capSliceRange(e,n,i),r=null===r?a?-1:e:this.capSliceRange(e,r,i),o[0]=n,o[1]=r,o[2]=i,o},capSliceRange:function(e,t,n){return t<0?(t+=e)<0&&(t=n<0?-1:0):t>=e&&(t=n<0?e-1:e),t}},S.prototype={callFunction:function(e,t){var n=this.functionTable[e];if(void 0===n)throw new Error("Unknown function: "+e+"()");return this._validateArgs(e,t,n._signature),n._func.call(this,t)},_validateArgs:function(e,t,n){var r,i,o,s;if(n[n.length-1].variadic){if(t.length<n.length)throw r=1===n.length?" argument":" arguments",new Error("ArgumentError: "+e+"() takes at least"+n.length+r+" but received "+t.length)}else if(t.length!==n.length)throw r=1===n.length?" argument":" arguments",new Error("ArgumentError: "+e+"() takes "+n.length+r+" but received "+t.length);for(var a=0;a<n.length;a++){s=!1,i=n[a].types,o=this._getTypeName(t[a]);for(var c=0;c<i.length;c++)if(this._typeMatches(o,i[c],t[a])){s=!0;break}if(!s)throw new Error("TypeError: "+e+"() expected argument "+(a+1)+" to be type "+i+" but received type "+o+" instead.")}},_typeMatches:function(e,t,n){if(t===a)return!0;if(t!==f&&t!==p&&t!==u)return e===t;if(t===u)return e===u;if(e===u){var r;t===p?r=s:t===f&&(r=c);for(var i=0;i<n.length;i++)if(!this._typeMatches(this._getTypeName(n[i]),r,n[i]))return!1;return!0}},_getTypeName:function(e){switch(Object.prototype.toString.call(e)){case"[object String]":return c;case"[object Number]":return s;case"[object Array]":return u;case"[object Boolean]":return 5;case"[object Null]":return 7;case"[object Object]":return"Expref"===e.jmespathType?h:l}},_functionStartsWith:function(e){return 0===e[0].lastIndexOf(e[1])},_functionEndsWith:function(e){var t=e[0],n=e[1];return-1!==t.indexOf(n,t.length-n.length)},_functionReverse:function(e){if(this._getTypeName(e[0])===c){for(var t=e[0],n="",r=t.length-1;r>=0;r--)n+=t[r];return n}var i=e[0].slice(0);return i.reverse(),i},_functionAbs:function(e){return Math.abs(e[0])},_functionCeil:function(e){return Math.ceil(e[0])},_functionAvg:function(e){for(var t=0,n=e[0],r=0;r<n.length;r++)t+=n[r];return t/n.length},_functionContains:function(e){return e[0].indexOf(e[1])>=0},_functionFloor:function(e){return Math.floor(e[0])},_functionLength:function(e){return n(e[0])?Object.keys(e[0]).length:e[0].length},_functionMap:function(e){for(var t=[],n=this._interpreter,r=e[0],i=e[1],o=0;o<i.length;o++)t.push(n.visit(r,i[o]));return t},_functionMerge:function(e){for(var t={},n=0;n<e.length;n++){var r=e[n];for(var i in r)t[i]=r[i]}return t},_functionMax:function(e){if(e[0].length>0){if(this._getTypeName(e[0][0])===s)return Math.max.apply(Math,e[0]);for(var t=e[0],n=t[0],r=1;r<t.length;r++)n.localeCompare(t[r])<0&&(n=t[r]);return n}return null},_functionMin:function(e){if(e[0].length>0){if(this._getTypeName(e[0][0])===s)return Math.min.apply(Math,e[0]);for(var t=e[0],n=t[0],r=1;r<t.length;r++)t[r].localeCompare(n)<0&&(n=t[r]);return n}return null},_functionSum:function(e){for(var t=0,n=e[0],r=0;r<n.length;r++)t+=n[r];return t},_functionType:function(e){switch(this._getTypeName(e[0])){case s:return"number";case c:return"string";case u:return"array";case l:return"object";case 5:return"boolean";case h:return"expref";case 7:return"null"}},_functionKeys:function(e){return Object.keys(e[0])},_functionValues:function(e){for(var t=e[0],n=Object.keys(t),r=[],i=0;i<n.length;i++)r.push(t[n[i]]);return r},_functionJoin:function(e){var t=e[0];return e[1].join(t)},_functionToArray:function(e){return this._getTypeName(e[0])===u?e[0]:[e[0]]},_functionToString:function(e){return this._getTypeName(e[0])===c?e[0]:JSON.stringify(e[0])},_functionToNumber:function(e){var t,n=this._getTypeName(e[0]);return n===s?e[0]:n!==c||(t=+e[0],isNaN(t))?null:t},_functionNotNull:function(e){for(var t=0;t<e.length;t++)if(7!==this._getTypeName(e[t]))return e[t];return null},_functionSort:function(e){var t=e[0].slice(0);return t.sort(),t},_functionSortBy:function(e){var t=e[0].slice(0);if(0===t.length)return t;var n=this._interpreter,r=e[1],i=this._getTypeName(n.visit(r,t[0]));if([s,c].indexOf(i)<0)throw new Error("TypeError");for(var o=this,a=[],u=0;u<t.length;u++)a.push([u,t[u]]);a.sort((function(e,t){var s=n.visit(r,e[1]),a=n.visit(r,t[1]);if(o._getTypeName(s)!==i)throw new Error("TypeError: expected "+i+", received "+o._getTypeName(s));if(o._getTypeName(a)!==i)throw new Error("TypeError: expected "+i+", received "+o._getTypeName(a));return s>a?1:s<a?-1:e[0]-t[0]}));for(var l=0;l<a.length;l++)t[l]=a[l][1];return t},_functionMaxBy:function(e){for(var t,n,r=e[1],i=e[0],o=this.createKeyFunction(r,[s,c]),a=-1/0,u=0;u<i.length;u++)(n=o(i[u]))>a&&(a=n,t=i[u]);return t},_functionMinBy:function(e){for(var t,n,r=e[1],i=e[0],o=this.createKeyFunction(r,[s,c]),a=1/0,u=0;u<i.length;u++)(n=o(i[u]))<a&&(a=n,t=i[u]);return t},createKeyFunction:function(e,t){var n=this,r=this._interpreter;return function(i){var o=r.visit(e,i);if(t.indexOf(n._getTypeName(o))<0){var s="TypeError: expected one of "+t+", received "+n._getTypeName(o);throw new Error(s)}return o}}},e.tokenize=function(e){return(new y).tokenize(e)},e.compile=function(e){return(new w).parse(e)},e.search=function(e,t){var n=new w,r=new S,i=new _(r);r._interpreter=i;var o=n.parse(t);return i.search(o,e)},e.strictDeepEqual=r}(void 0===n?this.jmespath={}:n)},{}],86:[function(e,t,n){var r,i,o=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(r===setTimeout)return setTimeout(e,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(e){r=s}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}}();var u,l=[],h=!1,p=-1;function f(){h&&u&&(h=!1,u.length?l=u.concat(l):p=-1,l.length&&d())}function d(){if(!h){var e=c(f);h=!0;for(var t=l.length;t;){for(u=l,l=[];++p<t;)u&&u[p].run();p=-1,t=l.length}u=null,h=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new g(e,t)),1!==l.length||h||c(d)},g.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},{}],87:[function(t,o,s){(function(e){!function(t){var a="object"==i(s)&&s&&!s.nodeType&&s,c="object"==i(o)&&o&&!o.nodeType&&o,u="object"==i(e)&&e;u.global!==u&&u.window!==u&&u.self!==u||(t=u);var l,h,p=2147483647,f=36,d=1,g=26,m=38,v=700,y=72,b=128,w="-",_=/^xn--/,S=/[^\x20-\x7E]/,E=/[\x2E\u3002\uFF0E\uFF61]/g,C={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},k=f-d,I=Math.floor,T=String.fromCharCode;function A(e){throw RangeError(C[e])}function R(e,t){for(var n=e.length,r=[];n--;)r[n]=t(e[n]);return r}function x(e,t){var n=e.split("@"),r="";return n.length>1&&(r=n[0]+"@",e=n[1]),r+R((e=e.replace(E,".")).split("."),t).join(".")}function P(e){for(var t,n,r=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(n=e.charCodeAt(i++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),i--):r.push(t);return r}function O(e){return R(e,(function(e){var t="";return e>65535&&(t+=T((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=T(e)})).join("")}function N(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function L(e,t,n){var r=0;for(e=n?I(e/v):e>>1,e+=I(e/t);e>k*g>>1;r+=f)e=I(e/k);return I(r+(k+1)*e/(e+m))}function M(e){var t,n,r,i,o,s,a,c,u,l,h,m=[],v=e.length,_=0,S=b,E=y;for((n=e.lastIndexOf(w))<0&&(n=0),r=0;r<n;++r)e.charCodeAt(r)>=128&&A("not-basic"),m.push(e.charCodeAt(r));for(i=n>0?n+1:0;i<v;){for(o=_,s=1,a=f;i>=v&&A("invalid-input"),((c=(h=e.charCodeAt(i++))-48<10?h-22:h-65<26?h-65:h-97<26?h-97:f)>=f||c>I((p-_)/s))&&A("overflow"),_+=c*s,!(c<(u=a<=E?d:a>=E+g?g:a-E));a+=f)s>I(p/(l=f-u))&&A("overflow"),s*=l;E=L(_-o,t=m.length+1,0==o),I(_/t)>p-S&&A("overflow"),S+=I(_/t),_%=t,m.splice(_++,0,S)}return O(m)}function D(e){var t,n,r,i,o,s,a,c,u,l,h,m,v,_,S,E=[];for(m=(e=P(e)).length,t=b,n=0,o=y,s=0;s<m;++s)(h=e[s])<128&&E.push(T(h));for(r=i=E.length,i&&E.push(w);r<m;){for(a=p,s=0;s<m;++s)(h=e[s])>=t&&h<a&&(a=h);for(a-t>I((p-n)/(v=r+1))&&A("overflow"),n+=(a-t)*v,t=a,s=0;s<m;++s)if((h=e[s])<t&&++n>p&&A("overflow"),h==t){for(c=n,u=f;!(c<(l=u<=o?d:u>=o+g?g:u-o));u+=f)S=c-l,_=f-l,E.push(T(N(l+S%_,0))),c=I(S/_);E.push(T(N(c,0))),o=L(n,v,r==i),n=0,++r}++n,++t}return E.join("")}if(l={version:"1.3.2",ucs2:{decode:P,encode:O},decode:M,encode:D,toASCII:function(e){return x(e,(function(e){return S.test(e)?"xn--"+D(e):e}))},toUnicode:function(e){return x(e,(function(e){return _.test(e)?M(e.slice(4).toLowerCase()):e}))}},"object"==i(n(3))&&n(3))void 0===(r=function(){return l}.call(s,n,s,o))||(o.exports=r);else if(a&&c)if(o.exports==a)c.exports=l;else for(h in l)l.hasOwnProperty(h)&&(a[h]=l[h]);else t.punycode=l}(this)}).call(this,void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],88:[function(e,t,n){"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.exports=function(e,t,n,o){t=t||"&",n=n||"=";var s={};if("string"!=typeof e||0===e.length)return s;var a=/\+/g;e=e.split(t);var c=1e3;o&&"number"==typeof o.maxKeys&&(c=o.maxKeys);var u=e.length;c>0&&u>c&&(u=c);for(var l=0;l<u;++l){var h,p,f,d,g=e[l].replace(a,"%20"),m=g.indexOf(n);m>=0?(h=g.substr(0,m),p=g.substr(m+1)):(h=g,p=""),f=decodeURIComponent(h),d=decodeURIComponent(p),r(s,f)?i(s[f])?s[f].push(d):s[f]=[s[f],d]:s[f]=d}return s};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},{}],89:[function(e,t,n){"use strict";var r=function(e){switch(i(e)){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};t.exports=function(e,t,n,c){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"===i(e)?s(a(e),(function(i){var a=encodeURIComponent(r(i))+n;return o(e[i])?s(e[i],(function(e){return a+encodeURIComponent(r(e))})).join(t):a+encodeURIComponent(r(e[i]))})).join(t):c?encodeURIComponent(r(c))+n+encodeURIComponent(r(e)):""};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function s(e,t){if(e.map)return e.map(t);for(var n=[],r=0;r<e.length;r++)n.push(t(e[r],r));return n}var a=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}},{}],90:[function(e,t,n){"use strict";n.decode=n.parse=e("./decode"),n.encode=n.stringify=e("./encode")},{"./decode":88,"./encode":89}],91:[function(e,t,n){"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.exports=function(e,t,n,i){t=t||"&",n=n||"=";var o={};if("string"!=typeof e||0===e.length)return o;var s=/\+/g;e=e.split(t);var a=1e3;i&&"number"==typeof i.maxKeys&&(a=i.maxKeys);var c=e.length;a>0&&c>a&&(c=a);for(var u=0;u<c;++u){var l,h,p,f,d=e[u].replace(s,"%20"),g=d.indexOf(n);g>=0?(l=d.substr(0,g),h=d.substr(g+1)):(l=d,h=""),p=decodeURIComponent(l),f=decodeURIComponent(h),r(o,p)?Array.isArray(o[p])?o[p].push(f):o[p]=[o[p],f]:o[p]=f}return o}},{}],92:[function(e,t,n){"use strict";var r=function(e){switch(i(e)){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};t.exports=function(e,t,n,o){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"===i(e)?Object.keys(e).map((function(i){var o=encodeURIComponent(r(i))+n;return Array.isArray(e[i])?e[i].map((function(e){return o+encodeURIComponent(r(e))})).join(t):o+encodeURIComponent(r(e[i]))})).join(t):o?encodeURIComponent(r(o))+n+encodeURIComponent(r(e)):""}},{}],93:[function(e,t,n){arguments[4][90][0].apply(n,arguments)},{"./decode":91,"./encode":92,dup:90}],94:[function(e,t,n){(function(t,r){var i=e("process/browser.js").nextTick,o=Function.prototype.apply,s=Array.prototype.slice,a={},c=0;function u(e,t){this._id=e,this._clearFn=t}n.setTimeout=function(){return new u(o.call(setTimeout,window,arguments),clearTimeout)},n.setInterval=function(){return new u(o.call(setInterval,window,arguments),clearInterval)},n.clearTimeout=n.clearInterval=function(e){e.close()},u.prototype.unref=u.prototype.ref=function(){},u.prototype.close=function(){this._clearFn.call(window,this._id)},n.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},n.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},n._unrefActive=n.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n.setImmediate="function"==typeof t?t:function(e){var t=c++,r=!(arguments.length<2)&&s.call(arguments,1);return a[t]=!0,i((function(){a[t]&&(r?e.apply(null,r):e.call(null),n.clearImmediate(t))})),t},n.clearImmediate="function"==typeof r?r:function(e){delete a[e]}}).call(this,e("timers").setImmediate,e("timers").clearImmediate)},{"process/browser.js":86,timers:94}],95:[function(e,t,n){var r=e("punycode");function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}n.parse=y,n.resolve=function(e,t){return y(e,!1,!0).resolve(t)},n.resolveObject=function(e,t){return e?y(e,!1,!0).resolveObject(t):t},n.format=function(e){b(e)&&(e=y(e));return e instanceof o?e.format():o.prototype.format.call(e)},n.Url=o;var s=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,c=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(c),l=["%","/","?",";","#"].concat(u),h=["/","?","#"],p=/^[a-z0-9A-Z_-]{0,63}$/,f=/^([a-z0-9A-Z_-]{0,63})(.*)$/,d={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},m={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},v=e("querystring");function y(e,t,n){if(e&&w(e)&&e instanceof o)return e;var r=new o;return r.parse(e,t,n),r}function b(e){return"string"==typeof e}function w(e){return"object"===i(e)&&null!==e}function _(e){return null===e}o.prototype.parse=function(e,t,n){if(!b(e))throw new TypeError("Parameter 'url' must be a string, not "+i(e));var o=e;o=o.trim();var a=s.exec(o);if(a){var c=(a=a[0]).toLowerCase();this.protocol=c,o=o.substr(a.length)}if(n||a||o.match(/^\/\/[^@\/]+@[^@\/]+/)){var y="//"===o.substr(0,2);!y||a&&g[a]||(o=o.substr(2),this.slashes=!0)}if(!g[a]&&(y||a&&!m[a])){for(var w,_,S=-1,E=0;E<h.length;E++){-1!==(C=o.indexOf(h[E]))&&(-1===S||C<S)&&(S=C)}-1!==(_=-1===S?o.lastIndexOf("@"):o.lastIndexOf("@",S))&&(w=o.slice(0,_),o=o.slice(_+1),this.auth=decodeURIComponent(w)),S=-1;for(E=0;E<l.length;E++){var C;-1!==(C=o.indexOf(l[E]))&&(-1===S||C<S)&&(S=C)}-1===S&&(S=o.length),this.host=o.slice(0,S),o=o.slice(S),this.parseHost(),this.hostname=this.hostname||"";var k="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!k)for(var I=this.hostname.split(/\./),T=(E=0,I.length);E<T;E++){var A=I[E];if(A&&!A.match(p)){for(var R="",x=0,P=A.length;x<P;x++)A.charCodeAt(x)>127?R+="x":R+=A[x];if(!R.match(p)){var O=I.slice(0,E),N=I.slice(E+1),L=A.match(f);L&&(O.push(L[1]),N.unshift(L[2])),N.length&&(o="/"+N.join(".")+o),this.hostname=O.join(".");break}}}if(this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),!k){var M=this.hostname.split("."),D=[];for(E=0;E<M.length;++E){var q=M[E];D.push(q.match(/[^A-Za-z0-9_-]/)?"xn--"+r.encode(q):q)}this.hostname=D.join(".")}var U=this.port?":"+this.port:"",j=this.hostname||"";this.host=j+U,this.href+=this.host,k&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==o[0]&&(o="/"+o))}if(!d[c])for(E=0,T=u.length;E<T;E++){var B=u[E],F=encodeURIComponent(B);F===B&&(F=escape(B)),o=o.split(B).join(F)}var H=o.indexOf("#");-1!==H&&(this.hash=o.substr(H),o=o.slice(0,H));var z=o.indexOf("?");if(-1!==z?(this.search=o.substr(z),this.query=o.substr(z+1),t&&(this.query=v.parse(this.query)),o=o.slice(0,z)):t&&(this.search="",this.query={}),o&&(this.pathname=o),m[c]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){U=this.pathname||"",q=this.search||"";this.path=U+q}return this.href=this.format(),this},o.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",r=this.hash||"",i=!1,o="";this.host?i=e+this.host:this.hostname&&(i=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&w(this.query)&&Object.keys(this.query).length&&(o=v.stringify(this.query));var s=this.search||o&&"?"+o||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||m[t])&&!1!==i?(i="//"+(i||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):i||(i=""),r&&"#"!==r.charAt(0)&&(r="#"+r),s&&"?"!==s.charAt(0)&&(s="?"+s),t+i+(n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(s=s.replace("#","%23"))+r},o.prototype.resolve=function(e){return this.resolveObject(y(e,!1,!0)).format()},o.prototype.resolveObject=function(e){if(b(e)){var t=new o;t.parse(e,!1,!0),e=t}var n=new o;if(Object.keys(this).forEach((function(e){n[e]=this[e]}),this),n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol)return Object.keys(e).forEach((function(t){"protocol"!==t&&(n[t]=e[t])})),m[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n;if(e.protocol&&e.protocol!==n.protocol){if(!m[e.protocol])return Object.keys(e).forEach((function(t){n[t]=e[t]})),n.href=n.format(),n;if(n.protocol=e.protocol,e.host||g[e.protocol])n.pathname=e.pathname;else{for(var r=(e.pathname||"").split("/");r.length&&!(e.host=r.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==r[0]&&r.unshift(""),r.length<2&&r.unshift(""),n.pathname=r.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var i=n.pathname||"",s=n.search||"";n.path=i+s}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var a=n.pathname&&"/"===n.pathname.charAt(0),c=e.host||e.pathname&&"/"===e.pathname.charAt(0),u=c||a||n.host&&e.pathname,l=u,h=n.pathname&&n.pathname.split("/")||[],p=(r=e.pathname&&e.pathname.split("/")||[],n.protocol&&!m[n.protocol]);if(p&&(n.hostname="",n.port=null,n.host&&(""===h[0]?h[0]=n.host:h.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===r[0]?r[0]=e.host:r.unshift(e.host)),e.host=null),u=u&&(""===r[0]||""===h[0])),c)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,h=r;else if(r.length)h||(h=[]),h.pop(),h=h.concat(r),n.search=e.search,n.query=e.query;else if(null!=e.search){if(p)n.hostname=n.host=h.shift(),(w=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=w.shift(),n.host=n.hostname=w.shift());return n.search=e.search,n.query=e.query,_(n.pathname)&&_(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n}if(!h.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var f=h.slice(-1)[0],d=(n.host||e.host)&&("."===f||".."===f)||""===f,v=0,y=h.length;y>=0;y--)"."==(f=h[y])?h.splice(y,1):".."===f?(h.splice(y,1),v++):v&&(h.splice(y,1),v--);if(!u&&!l)for(;v--;v)h.unshift("..");!u||""===h[0]||h[0]&&"/"===h[0].charAt(0)||h.unshift(""),d&&"/"!==h.join("/").substr(-1)&&h.push("");var w,S=""===h[0]||h[0]&&"/"===h[0].charAt(0);p&&(n.hostname=n.host=S?"":h.length?h.shift():"",(w=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=w.shift(),n.host=n.hostname=w.shift()));return(u=u||n.host&&h.length)&&!S&&h.unshift(""),h.length?n.pathname=h.join("/"):(n.pathname=null,n.path=null),_(n.pathname)&&_(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},o.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},{punycode:87,querystring:90}],96:[function(e,t,n){"function"==typeof Object.create?t.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},{}],97:[function(e,t,n){t.exports=function(e){return e&&"object"===i(e)&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},{}],98:[function(t,n,r){(function(e,n){var o=/%[sdj%]/g;r.format=function(e){if(!y(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(c(arguments[n]));return t.join(" ")}n=1;for(var r=arguments,i=r.length,s=String(e).replace(o,(function(e){if("%%"===e)return"%";if(n>=i)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}})),a=r[n];n<i;a=r[++n])m(a)||!_(a)?s+=" "+a:s+=" "+c(a);return s},r.deprecate=function(t,i){if(b(n.process))return function(){return r.deprecate(t,i).apply(this,arguments)};if(!0===e.noDeprecation)return t;var o=!1;return function(){if(!o){if(e.throwDeprecation)throw new Error(i);e.traceDeprecation?console.trace(i):console.error(i),o=!0}return t.apply(this,arguments)}};var s,a={};function c(e,t){var n={seen:[],stylize:l};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),g(t)?n.showHidden=t:t&&r._extend(n,t),b(n.showHidden)&&(n.showHidden=!1),b(n.depth)&&(n.depth=2),b(n.colors)&&(n.colors=!1),b(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=u),h(n,e,n.depth)}function u(e,t){var n=c.styles[t];return n?"["+c.colors[n][0]+"m"+e+"["+c.colors[n][1]+"m":e}function l(e,t){return e}function h(e,t,n){if(e.customInspect&&t&&C(t.inspect)&&t.inspect!==r.inspect&&(!t.constructor||t.constructor.prototype!==t)){var i=t.inspect(n,e);return y(i)||(i=h(e,i,n)),i}var o=function(e,t){if(b(t))return e.stylize("undefined","undefined");if(y(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}if(v(t))return e.stylize(""+t,"number");if(g(t))return e.stylize(""+t,"boolean");if(m(t))return e.stylize("null","null")}(e,t);if(o)return o;var s=Object.keys(t),a=function(e){var t={};return e.forEach((function(e,n){t[e]=!0})),t}(s);if(e.showHidden&&(s=Object.getOwnPropertyNames(t)),E(t)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return p(t);if(0===s.length){if(C(t)){var c=t.name?": "+t.name:"";return e.stylize("[Function"+c+"]","special")}if(w(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(S(t))return e.stylize(Date.prototype.toString.call(t),"date");if(E(t))return p(t)}var u,l="",_=!1,k=["{","}"];(d(t)&&(_=!0,k=["[","]"]),C(t))&&(l=" [Function"+(t.name?": "+t.name:"")+"]");return w(t)&&(l=" "+RegExp.prototype.toString.call(t)),S(t)&&(l=" "+Date.prototype.toUTCString.call(t)),E(t)&&(l=" "+p(t)),0!==s.length||_&&0!=t.length?n<0?w(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),u=_?function(e,t,n,r,i){for(var o=[],s=0,a=t.length;s<a;++s)R(t,String(s))?o.push(f(e,t,n,r,String(s),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(f(e,t,n,r,i,!0))})),o}(e,t,n,a,s):s.map((function(r){return f(e,t,n,a,r,_)})),e.seen.pop(),function(e,t,n){if(e.reduce((function(e,t){return t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1];return n[0]+t+" "+e.join(", ")+" "+n[1]}(u,l,k)):k[0]+l+k[1]}function p(e){return"["+Error.prototype.toString.call(e)+"]"}function f(e,t,n,r,i,o){var s,a,c;if((c=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?a=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(a=e.stylize("[Setter]","special")),R(r,i)||(s="["+i+"]"),a||(e.seen.indexOf(c.value)<0?(a=m(n)?h(e,c.value,null):h(e,c.value,n-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+a.split("\n").map((function(e){return"   "+e})).join("\n")):a=e.stylize("[Circular]","special")),b(s)){if(o&&i.match(/^\d+$/))return a;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+a}function d(e){return Array.isArray(e)}function g(e){return"boolean"==typeof e}function m(e){return null===e}function v(e){return"number"==typeof e}function y(e){return"string"==typeof e}function b(e){return void 0===e}function w(e){return _(e)&&"[object RegExp]"===k(e)}function _(e){return"object"===i(e)&&null!==e}function S(e){return _(e)&&"[object Date]"===k(e)}function E(e){return _(e)&&("[object Error]"===k(e)||e instanceof Error)}function C(e){return"function"==typeof e}function k(e){return Object.prototype.toString.call(e)}function I(e){return e<10?"0"+e.toString(10):e.toString(10)}r.debuglog=function(t){if(b(s)&&(s=e.env.NODE_DEBUG||""),t=t.toUpperCase(),!a[t])if(new RegExp("\\b"+t+"\\b","i").test(s)){var n=e.pid;a[t]=function(){var e=r.format.apply(r,arguments);console.error("%s %d: %s",t,n,e)}}else a[t]=function(){};return a[t]},r.inspect=c,c.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},c.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},r.isArray=d,r.isBoolean=g,r.isNull=m,r.isNullOrUndefined=function(e){return null==e},r.isNumber=v,r.isString=y,r.isSymbol=function(e){return"symbol"===i(e)},r.isUndefined=b,r.isRegExp=w,r.isObject=_,r.isDate=S,r.isError=E,r.isFunction=C,r.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"===i(e)||void 0===e},r.isBuffer=t("./support/isBuffer");var T=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function A(){var e=new Date,t=[I(e.getHours()),I(e.getMinutes()),I(e.getSeconds())].join(":");return[e.getDate(),T[e.getMonth()],t].join(" ")}function R(e,t){return Object.prototype.hasOwnProperty.call(e,t)}r.log=function(){console.log("%s - %s",A(),r.format.apply(r,arguments))},r.inherits=t("inherits"),r._extend=function(e,t){if(!t||!_(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}}).call(this,t("_process"),void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./support/isBuffer":97,_process:86,inherits:96}],99:[function(e,t,n){var r=e("./v1"),i=e("./v4"),o=i;o.v1=r,o.v4=i,t.exports=o},{"./v1":102,"./v4":103}],100:[function(e,t,n){for(var r=[],i=0;i<256;++i)r[i]=(i+256).toString(16).substr(1);t.exports=function(e,t){var n=t||0,i=r;return[i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]]].join("")}},{}],101:[function(e,t,n){var r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(r){var i=new Uint8Array(16);t.exports=function(){return r(i),i}}else{var o=new Array(16);t.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),o[t]=e>>>((3&t)<<3)&255;return o}}},{}],102:[function(e,t,n){var r,i,o=e("./lib/rng"),s=e("./lib/bytesToUuid"),a=0,c=0;t.exports=function(e,t,n){var u=t&&n||0,l=t||[],h=(e=e||{}).node||r,p=void 0!==e.clockseq?e.clockseq:i;if(null==h||null==p){var f=o();null==h&&(h=r=[1|f[0],f[1],f[2],f[3],f[4],f[5]]),null==p&&(p=i=16383&(f[6]<<8|f[7]))}var d=void 0!==e.msecs?e.msecs:(new Date).getTime(),g=void 0!==e.nsecs?e.nsecs:c+1,m=d-a+(g-c)/1e4;if(m<0&&void 0===e.clockseq&&(p=p+1&16383),(m<0||d>a)&&void 0===e.nsecs&&(g=0),g>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=d,c=g,i=p;var v=(1e4*(268435455&(d+=122192928e5))+g)%4294967296;l[u++]=v>>>24&255,l[u++]=v>>>16&255,l[u++]=v>>>8&255,l[u++]=255&v;var y=d/4294967296*1e4&268435455;l[u++]=y>>>8&255,l[u++]=255&y,l[u++]=y>>>24&15|16,l[u++]=y>>>16&255,l[u++]=p>>>8|128,l[u++]=255&p;for(var b=0;b<6;++b)l[u+b]=h[b];return t||s(l)}},{"./lib/bytesToUuid":100,"./lib/rng":101}],103:[function(e,t,n){var r=e("./lib/rng"),i=e("./lib/bytesToUuid");t.exports=function(e,t,n){var o=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var s=(e=e||{}).random||(e.rng||r)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t)for(var a=0;a<16;++a)t[o+a]=s[a];return t||i(s)}},{"./lib/bytesToUuid":100,"./lib/rng":101}],104:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./utils/LRU"),i=1e3,o=function(){function e(e){void 0===e&&(e=i),this.maxSize=e,this.cache=new r.LRUCache(e)}return Object.defineProperty(e.prototype,"size",{get:function(){return this.cache.length},enumerable:!0,configurable:!0}),e.prototype.put=function(t,n){var r="string"!=typeof t?e.getKeyString(t):t,i=this.populateValue(n);this.cache.put(r,i)},e.prototype.get=function(t){var n="string"!=typeof t?e.getKeyString(t):t,r=Date.now(),i=this.cache.get(n);if(i)for(var o=0;o<i.length;o++){if(i[o].Expire<r)return void this.cache.remove(n)}return i},e.getKeyString=function(e){for(var t=[],n=Object.keys(e).sort(),r=0;r<n.length;r++){var i=n[r];void 0!==e[i]&&t.push(e[i])}return t.join(" ")},e.prototype.populateValue=function(e){var t=Date.now();return e.map((function(e){return{Address:e.Address||"",Expire:t+60*(e.CachePeriodInMinutes||1)*1e3}}))},e.prototype.empty=function(){this.cache.empty()},e.prototype.remove=function(t){var n="string"!=typeof t?e.getKeyString(t):t;this.cache.remove(n)},e}();n.EndpointCache=o},{"./utils/LRU":105}],105:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(e,t){this.key=e,this.value=t},i=function(){function e(e){if(this.nodeMap={},this.size=0,"number"!=typeof e||e<1)throw new Error("Cache size can only be positive number");this.sizeLimit=e}return Object.defineProperty(e.prototype,"length",{get:function(){return this.size},enumerable:!0,configurable:!0}),e.prototype.prependToList=function(e){this.headerNode?(this.headerNode.prev=e,e.next=this.headerNode):this.tailNode=e,this.headerNode=e,this.size++},e.prototype.removeFromTail=function(){if(this.tailNode){var e=this.tailNode,t=e.prev;return t&&(t.next=void 0),e.prev=void 0,this.tailNode=t,this.size--,e}},e.prototype.detachFromList=function(e){this.headerNode===e&&(this.headerNode=e.next),this.tailNode===e&&(this.tailNode=e.prev),e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),e.next=void 0,e.prev=void 0,this.size--},e.prototype.get=function(e){if(this.nodeMap[e]){var t=this.nodeMap[e];return this.detachFromList(t),this.prependToList(t),t.value}},e.prototype.remove=function(e){if(this.nodeMap[e]){var t=this.nodeMap[e];this.detachFromList(t),delete this.nodeMap[e]}},e.prototype.put=function(e,t){if(this.nodeMap[e])this.remove(e);else if(this.size===this.sizeLimit){var n=this.removeFromTail().key;delete this.nodeMap[n]}var i=new r(e,t);this.nodeMap[e]=i,this.prependToList(i)},e.prototype.empty=function(){for(var e=Object.keys(this.nodeMap),t=0;t<e.length;t++){var n=e[t],r=this.nodeMap[n];this.detachFromList(r),delete this.nodeMap[n]}},e}();n.LRUCache=i},{}],106:[function(e,t,n){e("./browser_loader");var r=e("./core");"undefined"!=typeof window&&(window.AWS=r),void 0!==t&&(t.exports=r),"undefined"!=typeof self&&(self.AWS=r),Object.prototype.hasOwnProperty.call(r,"ConnectParticipant")||(r.apiLoader.services.connectparticipant={},r.ConnectParticipant=r.Service.defineService("connectparticipant",["2018-09-07"])),r.apiLoader.services.connectparticipant["2018-09-07"]=e("../apis/connectparticipant-2018-09-07.min"),r.apiLoader.services.connectparticipant["2018-09-07"].paginators=e("../apis/connectparticipant-2018-09-07.paginators").pagination,Object.prototype.hasOwnProperty.call(r,"STS")||(r.apiLoader.services.sts={},r.STS=r.Service.defineService("sts",["2011-06-15"]),e("./services/sts"))},{"../apis/connectparticipant-2018-09-07.min":3,"../apis/connectparticipant-2018-09-07.paginators":4,"../apis/sts-2011-06-15.min":6,"./browser_loader":17,"./core":19,"./services/sts":62}]},{},[106])}).call(this,n(0))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ByaW50Zi1qcy9zcmMvc3ByaW50Zi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9leGNlcHRpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvWG1sSHR0cENsaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2xvYmFsQ29uZmlnLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9sb2cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY2hhdEFyZ3NWYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29ubmVjdGlvbkhlbHBlcnMvYmFzZUNvbm5lY3Rpb25IZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXZlbnRidXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29ubmVjdGlvbkhlbHBlcnMvY29ubmVjdGlvbkRldGFpbHNQcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3BhaG9NcXR0Q2xpZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL25ldHdvcmtJbmZvLmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2Nvbm5lY3Rpb25IZWxwZXJzL0lvdENvbm5lY3Rpb25IZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29ubmVjdGlvbkhlbHBlcnMvTHBjQ29ubmVjdGlvbkhlbHBlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb25uZWN0aW9uSGVscGVycy9jb25uZWN0aW9uSGVscGVyUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY2hhdENvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY2hhdFNlc3Npb24uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWhvLW1xdHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW16bi9hbWF6b24tY29ubmVjdC13ZWJzb2NrZXQtbWFuYWdlci9kaXN0L2FtYXpvbi1jb25uZWN0LXdlYnNvY2tldC1tYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvYXdzLWNsaWVudC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZyIsInRoaXMiLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJyZSIsIm5vdF9zdHJpbmciLCJub3RfYm9vbCIsIm5vdF90eXBlIiwibm90X3ByaW1pdGl2ZSIsIm51bWJlciIsIm51bWVyaWNfYXJnIiwianNvbiIsIm5vdF9qc29uIiwidGV4dCIsIm1vZHVsbyIsInBsYWNlaG9sZGVyIiwia2V5X2FjY2VzcyIsImluZGV4X2FjY2VzcyIsInNpZ24iLCJzcHJpbnRmIiwicGFyc2VfdHJlZSIsImFyZ3YiLCJhcmciLCJrIiwicGgiLCJwYWQiLCJwYWRfY2hhcmFjdGVyIiwicGFkX2xlbmd0aCIsImlzX3Bvc2l0aXZlIiwiY3Vyc29yIiwidHJlZV9sZW5ndGgiLCJsZW5ndGgiLCJvdXRwdXQiLCJrZXlzIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJwYXJhbV9ubyIsInRlc3QiLCJ0eXBlIiwiaXNOYU4iLCJUeXBlRXJyb3IiLCJwYXJzZUludCIsInRvU3RyaW5nIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiSlNPTiIsInN0cmluZ2lmeSIsIndpZHRoIiwicHJlY2lzaW9uIiwicGFyc2VGbG9hdCIsInRvRXhwb25lbnRpYWwiLCJ0b0ZpeGVkIiwiTnVtYmVyIiwidG9QcmVjaXNpb24iLCJzdWJzdHJpbmciLCJzbGljZSIsInRvTG93ZXJDYXNlIiwidmFsdWVPZiIsInRvVXBwZXJDYXNlIiwicmVwbGFjZSIsInBhZF9jaGFyIiwiY2hhckF0IiwicmVwZWF0IiwiYWxpZ24iLCJzcHJpbnRmX2Zvcm1hdCIsImZtdCIsInNwcmludGZfY2FjaGUiLCJtYXRjaCIsIl9mbXQiLCJhcmdfbmFtZXMiLCJleGVjIiwicHVzaCIsIlN5bnRheEVycm9yIiwiZmllbGRfbGlzdCIsInJlcGxhY2VtZW50X2ZpZWxkIiwiZmllbGRfbWF0Y2giLCJzcHJpbnRmX3BhcnNlIiwiYXJndW1lbnRzIiwidnNwcmludGYiLCJhcHBseSIsImNvbmNhdCIsIlZhbHVlRXJyb3IiLCJtZXNzYWdlIiwiY29uc29sZSIsImxvZyIsIlVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24iLCJJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24iLCJhcmd1bWVudCIsIklsbGVnYWxTdGF0ZUV4Y2VwdGlvbiIsIm1ha2VIdHRwUmVxdWVzdCIsIm9iaiIsInN1Y2Nlc3MiLCJmYWlsdXJlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwibWV0aG9kIiwidXJsIiwiaGVhZGVycyIsImZvckVhY2giLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25sb2FkIiwic3RhdHVzIiwib25lcnJvciIsInNlbmQiLCJib2R5IiwiR2xvYmFsQ29uZmlnIiwiY29uZmlnSW5wdXQiLCJjb25maWciLCJyZWdpb24iLCJlbmRwb2ludE92ZXJyaWRlIiwiZW5kcG9pbnQiLCJyZWNvbm5lY3QiLCJSRVNPVVJDRV9QQVRIIiwiSFRUUF9NRVRIT0RTIiwiUkVHSU9OX0NPTkZJRyIsImludm9rZVVybCIsIk1RVFRfQ09OU1RBTlRTIiwiU0VTU0lPTl9UWVBFUyIsIkFHRU5UIiwiQ1VTVE9NRVIiLCJDSEFUX0VWRU5UUyIsIkNPTlRFTlRfVFlQRSIsInRleHRQbGFpbiIsImNvbm5lY3Rpb25BY2tub3dsZWRnZWQiLCJ0eXBpbmciLCJwYXJ0aWNpcGFudEpvaW5lZCIsInBhcnRpY2lwYW50TGVmdCIsInRyYW5zZmVyU3VjY2VlZGVkIiwidHJhbnNmZXJGYWlsZWQiLCJjaGF0RW5kZWQiLCJUUkFOU0NSSVBUX0RFRkFVTFRfUEFSQU1TIiwiTE9HU19ERVNUSU5BVElPTiIsIlJFR0lPTlMiLCJBR0VOVF9SRUNPTk5FQ1RfQ09ORklHIiwiaW50ZXJ2YWwiLCJtYXhSZXRyaWVzIiwiQ1VTVE9NRVJfUkVDT05ORUNUX0NPTkZJRyIsIlV0aWxzIiwicHJlbWlzZSIsImFzc2VydFRydWUiLCJEYXRlIiwiZ2V0VGltZSIsIm5vdyIsIk1hdGgiLCJyYW5kb20iLCJBcnJheSIsImlzQXJyYXkiLCJhbGxvd2VkVmFsdWVzIiwidmFsdWVzIiwiZW51bU9iaiIsIngiLCJ5IiwiZmluZCIsInYiLCJhcnJheSIsInByZWRpY2F0ZSIsImNvbnN0cnVjdG9yIiwibWFwIiwiYXNzZXJ0Tm90TnVsbCIsImlzT2JqZWN0IiwibXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJmIiwiY291bnQiLCJlcnJvciIsImRlbGF5IiwibWF4IiwidGhlbiIsImFzeW5jV2hpbGVJbnRlcnZhbCIsInJlamVjdCIsIkxvZ2dlciIsImRhdGEiLCJMb2dMZXZlbCIsIkRFQlVHIiwiSU5GTyIsIldBUk4iLCJFUlJPUiIsIkxvZ01hbmFnZXJJbXBsIiwidXBkYXRlTG9nZ2VyQ29uZmlnIiwiY29uc29sZUxvZ2dlcldyYXBwZXIiLCJjcmVhdGVDb25zb2xlTG9nZ2VyIiwibGV2ZWwiLCJsb2dTdGF0ZW1lbnQiLCJoYXNDbGllbnRMb2dnZXIiLCJfY2xpZW50TG9nZ2VyIiwiZGVidWciLCJpbmZvIiwid2FybiIsIl9sZXZlbCIsIm9wdGlvbnMiLCJwcmVmaXgiLCJfbG9nc0Rlc3RpbmF0aW9uIiwiTG9nZ2VyV3JhcHBlckltcGwiLCJpbnB1dENvbmZpZyIsImxvZ2dlciIsIkxvZ2dlcldyYXBwZXIiLCJhcmdzIiwiX2xvZyIsIkxvZ01hbmFnZXIiLCJpc0xldmVsRW5hYmxlZCIsIndyaXRlVG9DbGllbnRMb2dnZXIiLCJfc2hvdWxkTG9nIiwiX2NvbnZlcnRUb1NpbmdsZVN0YXRlbWVudCIsIl93cml0ZVRvQ2xpZW50TG9nZ2VyIiwiaW5kZXgiLCJfY29udmVydFRvU3RyaW5nIiwiaXNTdHJpbmciLCJpc0Z1bmN0aW9uIiwidG9TdHJpbmdSZXN1bHQiLCJDaGF0Q2xpZW50RmFjdG9yeUltcGwiLCJjbGllbnRDYWNoZSIsIm9wdGlvbnNJbnB1dCIsImFzc2lnbiIsImdldFJlZ2lvbiIsImNsaWVudCIsIl9jcmVhdGVBd3NDbGllbnQiLCJnZXRFbmRwb2ludE92ZXJyaWRlIiwic3RhZ2VDb25maWciLCJBV1NDaGF0Q2xpZW50IiwiY3JlZHMiLCJBV1MiLCJDcmVkZW50aWFscyIsIkNvbmZpZyIsImNyZWRlbnRpYWxzIiwiY2hhdENsaWVudCIsIkNvbm5lY3RQYXJ0aWNpcGFudCIsImNhbGxIdHRwQ2xpZW50IiwiZ2V0TG9nZ2VyIiwicGFydGljaXBhbnRUb2tlbiIsInNlbGYiLCJwYXJhbXMiLCJUeXBlIiwiUGFydGljaXBhbnRUb2tlbiIsImNyZWF0ZVBhcnRpY2lwYW50Q29ubmVjdGlvblJlcXVlc3QiLCJjcmVhdGVQYXJ0aWNpcGFudENvbm5lY3Rpb24iLCJfc2VuZFJlcXVlc3QiLCJyZXMiLCJlcnIiLCJjb25uZWN0aW9uVG9rZW4iLCJDb25uZWN0aW9uVG9rZW4iLCJkaXNjb25uZWN0UGFydGljaXBhbnRSZXF1ZXN0IiwiZGlzY29ubmVjdFBhcnRpY2lwYW50IiwiTWF4UmVzdWx0cyIsIm1heFJlc3VsdHMiLCJOZXh0VG9rZW4iLCJuZXh0VG9rZW4iLCJTY2FuRGlyZWN0aW9uIiwic2NhbkRpcmVjdGlvbiIsIlNvcnRPcmRlciIsInNvcnRPcmRlciIsIlN0YXJ0UG9zaXRpb24iLCJJZCIsInN0YXJ0UG9zaXRpb24iLCJpZCIsIkFic29sdXRlVGltZSIsImFic29sdXRlVGltZSIsIk1vc3RSZWNlbnQiLCJtb3N0UmVjZW50IiwiY29udGFjdElkIiwiQ29udGFjdElkIiwiZ2V0VHJhbnNjcmlwdFJlcXVlc3QiLCJnZXRUcmFuc2NyaXB0IiwiY29udGVudCIsImNvbnRlbnRUeXBlIiwiQ29udGVudCIsIkNvbnRlbnRUeXBlIiwic2VuZE1lc3NhZ2VSZXF1ZXN0Iiwic2VuZE1lc3NhZ2UiLCJzZW5kRXZlbnRSZXF1ZXN0Iiwic2VuZEV2ZW50IiwicmVxdWVzdCIsIm9uIiwicmVxdWVzdElucHV0IiwiX2NhbGxIdHRwQ2xpZW50IiwiQWNjZXB0IiwicmVzcG9uc2VPYmplY3QiLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsImVycm9yT2JqZWN0Iiwic3RhdHVzVGV4dCIsIkNoYXRDbGllbnRGYWN0b3J5IiwiQ2hhdFNlcnZpY2VBcmdzVmFsaWRhdG9yIiwiY2hhdERldGFpbHMiLCJhc3NlcnRJc09iamVjdCIsImFzc2VydElzTm9uRW1wdHlTdHJpbmciLCJwYXJ0aWNpcGFudElkIiwiY29ubmVjdGlvbkRldGFpbHMiLCJQcmVTaWduZWRDb25uZWN0aW9uVXJsIiwiQ29ubmVjdGlvbklkIiwidmFsaWRhdGVDb250ZW50VHlwZSIsImFzc2VydElzRW51bSIsIm1ldGhvZE5hbWUiLCJDb25uZWN0aW9uSGVscGVyU3RhdHVzIiwiTmV2ZXJTdGFydGVkIiwiU3RhcnRpbmciLCJDb25uZWN0ZWQiLCJDb25uZWN0aW9uTG9zdCIsIkVuZGVkIiwiQ29ubmVjdGlvbkhlbHBlckV2ZW50cyIsIkNvbm5lY3Rpb25UeXBlIiwiQ29ubmVjdGlvbkluZm9UeXBlIiwiQmFzZUNvbm5lY3Rpb25IZWxwZXIiLCJjb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyIiwiaXNTdGFydGVkIiwic2V0SW50ZXJ2YWwiLCJmZXRjaENvbm5lY3Rpb25Ub2tlbiIsInN0YXJ0Q29ubmVjdGlvblRva2VuUG9sbGluZyIsImNsZWFySW50ZXJ2YWwiLCJTdWJzY3JpcHRpb24iLCJzdWJNYXAiLCJldmVudE5hbWUiLCJyYW5kb21JZCIsInVuc3Vic2NyaWJlIiwiU3Vic2NyaXB0aW9uTWFwIiwic3ViSWRNYXAiLCJzdWJFdmVudE5hbWVNYXAiLCJzdWJzY3JpYmUiLCJzdWIiLCJzdWJMaXN0Iiwic3ViSWQiLCJjb250YWlucyIsImZpbHRlciIsImdldEFsbFN1YnNjcmlwdGlvbnMiLCJyZWR1Y2UiLCJhIiwiYiIsImdldFN1YnNjcmlwdGlvbnMiLCJFdmVudEJ1cyIsInBhcmFtc0luIiwibG9nRXZlbnRzIiwic3Vic2NyaWJlQWxsIiwidHJpZ2dlciIsImFsbEV2ZW50U3VicyIsImV2ZW50U3VicyIsInRyaWdnZXJBc3luYyIsImJyaWRnZSIsImV2ZW50IiwidW5zdWJzY3JpYmVBbGwiLCJDb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyIiwiY29ubmVjdGlvblR5cGUiLCJmaXJzdENhbGwiLCJfZmV0Y2hDb25uZWN0aW9uRGV0YWlscyIsIl9oYW5kbGVQcmVzZXRDb25uZWN0aW9uRGV0YWlscyIsImNvbm5lY3Rpb25JZCIsInByZVNpZ25lZENvbm5lY3Rpb25VcmwiLCJDb25uZWN0aW9uQ3JlZGVudGlhbHMiLCJXZWJzb2NrZXQiLCJVcmwiLCJpbmNsdWRlcyIsIlBhcnRpY2lwYW50Q3JlZGVudGlhbHMiLCJDb25uZWN0aW9uQXV0aGVudGljYXRpb25Ub2tlbiIsInJlc3BvbnNlIiwiY3JlYXRlQ29ubmVjdGlvbkRldGFpbHMiLCJfaGFuZGxlQ3JlYXRlQ29ubmVjdGlvbkRldGFpbHNSZXNwb25zZSIsInJlYXNvbiIsIl9kZWJ1ZyIsIl9oYW5kbGVDcmVhdGVQYXJ0aWNpcGFudENvbm5lY3Rpb25SZXNwb25zZSIsIk1RVFRDbGllbnQiLCJjb25uZWN0T3B0aW9ucyIsInRvcGljIiwic3Vic2NyaWJlT3B0aW9ucyIsInVuc3Vic2NyaWJlT3B0aW9ucyIsIk1xdHRDb25uZWN0aW9uU3RhdHVzIiwiZnJlZXplIiwiTmV2ZXJDb25uZWN0ZWQiLCJDb25uZWN0aW5nIiwiRGlzY29ubmVjdGVkIiwiTXF0dEV2ZW50cyIsIk1FU1NBR0UiLCJESVNDT05ORUNURUQiLCJQYWhvTXF0dENsaWVudCIsInByZVNpZ25lZFVybCIsInBhaG9DbGllbnQiLCJQYWhvIiwiQ2xpZW50Iiwib25NZXNzYWdlQXJyaXZlZCIsIl9tZXNzYWdlQXJyaXZlZENhbGxiYWNrIiwib25Db25uZWN0aW9uTG9zdCIsIl9jb25uZWN0aW9uTG9zdENhbGxCYWNrIiwiY2FsbGJhY2siLCJuZXZlckNvbm5lY3RlZCIsIl9zdWJzY3JpYmVkVG9waWNzIiwib25TdWNjZXNzIiwiX29uQ29ubmVjdFN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJlcnJvckRldGFpbHMiLCJfb25Db25uZWN0RmFpbHVyZSIsImNvbm5lY3QiLCJpbmNvbWluZ01lc3NhZ2UiLCJxb3MiLCJwYXlsb2FkU3RyaW5nIiwiZGlzY29ubmVjdCIsIl9zdWJzY3JpYmVTdWNjZXNzIiwiZ3JhbnRlZFFvcyIsImluZGV4T2YiLCJfYWRkVG9Ub3BpY3MiLCJfdW5zdWJzY3JpYmVTdWNjZXNzIiwiRHVtbXlOZXR3b3JrSW5mbyIsIkJyb3dzZXJOZXR3b3JrSW5mbyIsImV2ZW50QnVzIiwib25saW5lUHJvbWlzZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVyIiwibmF2aWdhdG9yIiwib25MaW5lIiwiaXNPbmxpbmUiLCJvbk9ubGluZSIsIk5ldHdvcmtJbmZvIiwiSW90Q29ubmVjdGlvbkhlbHBlciIsInJlY29ubmVjdENvbmZpZyIsIl91bnN1YnNjcmliZUZ1bmN0aW9ucyIsIl9jb25uZWN0Q2FsbGVkQXRsZWFzdE9uY2UiLCJfc2V0TmV0d29ya0V2ZW50SGFuZGxlcnMiLCJfaW5pdGlhdGVDb25uZWN0V2l0aFJldHJ5IiwiX2hhbmRsZUJyb2tlbkNvbm5lY3Rpb24iLCJpb3RDb25uZWN0aW9uIiwiX2hhbmRsZUlvdEV2ZW50IiwiZmV0Y2hDb25uZWN0aW9uRGV0YWlscyIsIl9pbml0SW90Q29ubmVjdGlvbiIsInVzZVNTTCIsImtlZXBBbGl2ZUludGVydmFsIiwibXF0dFZlcnNpb24iLCJ0aW1lb3V0IiwiX3N1YnNjcmliZSIsIl9jb25uZWN0RmFpbGVkIiwiY29ubmVjdEVycm9yIiwiY29ubmVjdFN1Y2Nlc3MiLCJkZXRhaWxzIiwiX3Bvc3RTdWJzY3JpYmUiLCJfc3Vic2NyaWJlRmFpbGVkIiwic3Vic2NyaWJlUmVzcG9uc2UiLCJzdWJzY3JpYmVFcnJvciIsImV2ZW50VHlwZSIsImV2ZW50RGF0YSIsImluY29taW5nRGF0YSIsImVycm9yQ29kZSIsIl9oYW5kbGVMb3N0Q29ubmVjdGlvbiIsIl9pbml0aWF0ZUNvbm5lY3RQcm9taXNlIiwiX2Nvbm5lY3QiLCJfY2FuQ29ubmVjdCIsIl9oYW5kbGVHYWluZWRDb25uZWN0aW9uIiwic3RhdGUiLCJMcGNDb25uZWN0aW9uSGVscGVyIiwiaW5pdGlhbENvbnRhY3RJZCIsIndlYnNvY2tldE1hbmFnZXIiLCJjbGVhblVwQmFzZUluc3RhbmNlIiwiYmFzZUluc3RhbmNlIiwiTFBDQ29ubmVjdGlvbkhlbHBlckJhc2UiLCJzdWJzY3JpcHRpb25zIiwib25FbmRlZCIsImhhbmRsZUVuZGVkIiwib25Db25uZWN0aW9uR2FpbiIsImhhbmRsZUNvbm5lY3Rpb25HYWluIiwiaGFuZGxlQ29ubmVjdGlvbkxvc3QiLCJvbk1lc3NhZ2UiLCJoYW5kbGVNZXNzYWdlIiwic3RhcnQiLCJlbmQiLCJnZXRTdGF0dXMiLCJJbml0aWFsQ29udGFjdElkIiwiaW5pdFdlYnNvY2tldE1hbmFnZXIiLCJXZWJTb2NrZXRNYW5hZ2VyIiwic3Vic2NyaWJlVG9waWNzIiwib25Jbml0RmFpbHVyZSIsImluaXQiLCJ3ZWJTb2NrZXRUcmFuc3BvcnQiLCJ0cmFuc3BvcnRMaWZlVGltZUluU2Vjb25kcyIsImNsb3NlV2ViU29ja2V0IiwicGFyc2VkTWVzc2FnZSIsIk5ldHdvcmtMaW5rU3RhdHVzIiwiQ2hhdENvbnRyb2xsZXIiLCJhcmdzVmFsaWRhdG9yIiwicHVic3ViIiwic2Vzc2lvblR5cGUiLCJfcGFydGljaXBhbnREaXNjb25uZWN0ZWQiLCJzZXNzaW9uTWV0YWRhdGEiLCJtZXRhZGF0YSIsInJlcXVlc3ROYW1lIiwidmFsaWRhdGVTZW5kTWVzc2FnZSIsImNvbm5lY3Rpb25IZWxwZXIiLCJnZXRDb25uZWN0aW9uVG9rZW4iLCJoYW5kbGVSZXF1ZXN0U3VjY2VzcyIsImhhbmRsZVJlcXVlc3RGYWlsdXJlIiwidmFsaWRhdGVTZW5kRXZlbnQiLCJpbnB1dEFyZ3MiLCJ2YWxpZGF0ZUNvbm5lY3RDaGF0IiwiY29ubmVjdGlvbkhlbHBlclByb3ZpZGVyIiwiX2luaXRDb25uZWN0aW9uSGVscGVyIiwiX2hhbmRsZUVuZGVkQ29ubmVjdGlvbiIsIl9oYW5kbGVJbmNvbWluZ01lc3NhZ2UiLCJfZm9yd2FyZENoYXRFdmVudCIsImdldENoYXREZXRhaWxzIiwiY29ubmVjdENhbGxlZCIsIl9zaG91bGRBY2tub3dsZWRnZUNvbnRhY3QiLCJjbGVhblVwT25QYXJ0aWNpcGFudERpc2Nvbm5lY3QiLCJicmVha0Nvbm5lY3Rpb24iLCJjb25uZWN0aW9uSGVscGVyU3RhdHVzIiwiX2NvbnZlcnRDb25uZWN0aW9uSGVscGVyU3RhdHVzIiwiUGVyc2lzdGVudENvbm5lY3Rpb25BbmRDaGF0U2VydmljZVNlc3Npb25GYWN0b3J5IiwiY2hhdENvbnRyb2xsZXIiLCJfY3JlYXRlQ2hhdENvbnRyb2xsZXIiLCJBZ2VudENoYXRTZXNzaW9uIiwiQ3VzdG9tZXJDaGF0U2Vzc2lvbiIsImNoYXREZXRhaWxzSW5wdXQiLCJfbm9ybWFsaXplQ2hhdERldGFpbHMiLCJnZXRDYWNoZWRDbGllbnQiLCJQYXJ0aWNpcGFudElkIiwidmFsaWRhdGVDaGF0RGV0YWlscyIsIkNoYXRDb25uZWN0aW9uQXR0cmlidXRlcyIsInZhbGlkYXRlSW5pdGlhdGVDaGF0UmVzcG9uc2UiLCJwYXJ0aWNpcGFudFR5cGUiLCJDaGF0U2Vzc2lvbiIsImNvbnRyb2xsZXIiLCJDSEFUX1NFU1NJT05fRkFDVE9SWSIsIkNoYXRTZXNzaW9uT2JqZWN0IiwiY3JlYXRlQ2hhdFNlc3Npb24iLCJzZXRHbG9iYWxDb25maWciLCJsb2dnZXJDb25maWciLCJ1cGRhdGUiLCJTZXNzaW9uVHlwZXMiLCJfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyIsImZhY3RvcnkiLCJnbG9iYWwiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiaXRlbSIsImdldEl0ZW0iLCJyZW1vdmVJdGVtIiwiTUVTU0FHRV9UWVBFIiwiQ09OTkVDVCIsIkNPTk5BQ0siLCJQVUJMSVNIIiwiUFVCQUNLIiwiUFVCUkVDIiwiUFVCUkVMIiwiUFVCQ09NUCIsIlNVQlNDUklCRSIsIlNVQkFDSyIsIlVOU1VCU0NSSUJFIiwiVU5TVUJBQ0siLCJQSU5HUkVRIiwiUElOR1JFU1AiLCJESVNDT05ORUNUIiwidmFsaWRhdGUiLCJlcnJvclN0ciIsInZhbGlkS2V5IiwiZm9ybWF0IiwiSU5WQUxJRF9UWVBFIiwic2NvcGUiLCJPSyIsImNvZGUiLCJDT05ORUNUX1RJTUVPVVQiLCJTVUJTQ1JJQkVfVElNRU9VVCIsIlVOU1VCU0NSSUJFX1RJTUVPVVQiLCJQSU5HX1RJTUVPVVQiLCJJTlRFUk5BTF9FUlJPUiIsIkNPTk5BQ0tfUkVUVVJOQ09ERSIsIlNPQ0tFVF9FUlJPUiIsIlNPQ0tFVF9DTE9TRSIsIk1BTEZPUk1FRF9VVEYiLCJVTlNVUFBPUlRFRCIsIklOVkFMSURfU1RBVEUiLCJJTlZBTElEX0FSR1VNRU5UIiwiVU5TVVBQT1JURURfT1BFUkFUSU9OIiwiSU5WQUxJRF9TVE9SRURfREFUQSIsIklOVkFMSURfTVFUVF9NRVNTQUdFX1RZUEUiLCJNQUxGT1JNRURfVU5JQ09ERSIsIkJVRkZFUl9GVUxMIiwiQ09OTkFDS19SQyIsIjAiLCIxIiwiMiIsIjMiLCI0IiwiNSIsInN1YnN0aXR1dGlvbnMiLCJmaWVsZCIsInBhcnQxIiwicGFydDIiLCJNcXR0UHJvdG9JZGVudGlmaWVydjMiLCJNcXR0UHJvdG9JZGVudGlmaWVydjQiLCJXaXJlTWVzc2FnZSIsImRlY29kZU1lc3NhZ2UiLCJpbnB1dCIsInBvcyIsImRpZ2l0Iiwic3RhcnRpbmdQb3MiLCJmaXJzdCIsIm1lc3NhZ2VJbmZvIiwicmVtTGVuZ3RoIiwibXVsdGlwbGllciIsImVuZFBvcyIsIndpcmVNZXNzYWdlIiwic2Vzc2lvblByZXNlbnQiLCJyZXR1cm5Db2RlIiwibGVuIiwicmVhZFVpbnQxNiIsInRvcGljTmFtZSIsInBhcnNlVVRGOCIsIm1lc3NhZ2VJZGVudGlmaWVyIiwiTWVzc2FnZSIsInN1YmFycmF5IiwicmV0YWluZWQiLCJkdXBsaWNhdGUiLCJkZXN0aW5hdGlvbk5hbWUiLCJwYXlsb2FkTWVzc2FnZSIsIndyaXRlVWludDE2IiwiYnVmZmVyIiwib2Zmc2V0Iiwid3JpdGVTdHJpbmciLCJ1dGY4TGVuZ3RoIiwic3RyaW5nVG9VVEY4IiwiVVRGOExlbmd0aCIsImNoYXJDb2RlIiwiY2hhckNvZGVBdCIsImxvd0NoYXJDb2RlIiwidXRmMTYiLCJieXRlMSIsImJ5dGUyIiwiYnl0ZTMiLCJieXRlNCIsImVuY29kZSIsIndpbGxNZXNzYWdlUGF5bG9hZEJ5dGVzIiwidG9waWNTdHJMZW5ndGgiLCJkZXN0aW5hdGlvbk5hbWVMZW5ndGgiLCJjbGllbnRJZCIsIndpbGxNZXNzYWdlIiwicGF5bG9hZEJ5dGVzIiwiVWludDhBcnJheSIsImJ5dGVMZW5ndGgiLCJ1c2VyTmFtZSIsInBhc3N3b3JkIiwidG9waWNzIiwicmVxdWVzdGVkUW9zIiwiQXJyYXlCdWZmZXIiLCJtYmkiLCJudW1CeXRlcyIsImVuY29kZU1CSSIsImJ5dGVTdHJlYW0iLCJzZXQiLCJjb25uZWN0RmxhZ3MiLCJjbGVhblNlc3Npb24iLCJQaW5nZXIiLCJfY2xpZW50IiwiX2tlZXBBbGl2ZUludGVydmFsIiwiaXNSZXNldCIsInBpbmdSZXEiLCJkb1RpbWVvdXQiLCJwaW5nZXIiLCJkb1BpbmciLCJfdHJhY2UiLCJzb2NrZXQiLCJfZGlzY29ubmVjdGVkIiwicmVzZXQiLCJjbGVhclRpbWVvdXQiLCJjYW5jZWwiLCJUaW1lb3V0IiwidGltZW91dFNlY29uZHMiLCJhY3Rpb24iLCJDbGllbnRJbXBsIiwidXJpIiwiaG9zdCIsInBvcnQiLCJwYXRoIiwiV2ViU29ja2V0IiwiX3dzdXJpIiwiX2xvY2FsS2V5IiwiX21zZ19xdWV1ZSIsIl9idWZmZXJlZF9tc2dfcXVldWUiLCJfc2VudE1lc3NhZ2VzIiwiX3JlY2VpdmVkTWVzc2FnZXMiLCJfbm90aWZ5X21zZ19zZW50IiwiX21lc3NhZ2VfaWRlbnRpZmllciIsIl9zZXF1ZW5jZSIsInJlc3RvcmUiLCJjb25uZWN0ZWQiLCJtYXhNZXNzYWdlSWRlbnRpZmllciIsImhvc3RJbmRleCIsIm9uQ29ubmVjdGVkIiwib25NZXNzYWdlRGVsaXZlcmVkIiwidHJhY2VGdW5jdGlvbiIsIl9jb25uZWN0VGltZW91dCIsInNlbmRQaW5nZXIiLCJyZWNlaXZlUGluZ2VyIiwiX3JlY29ubmVjdEludGVydmFsIiwiX3JlY29ubmVjdGluZyIsIl9yZWNvbm5lY3RUaW1lb3V0IiwiZGlzY29ubmVjdGVkUHVibGlzaGluZyIsImRpc2Nvbm5lY3RlZEJ1ZmZlclNpemUiLCJyZWNlaXZlQnVmZmVyIiwiX3RyYWNlQnVmZmVyIiwiX01BWF9UUkFDRV9FTlRSSUVTIiwiY29ubmVjdE9wdGlvbnNNYXNrZWQiLCJfdHJhY2VNYXNrIiwidXJpcyIsIl9kb0Nvbm5lY3QiLCJpbnZvY2F0aW9uQ29udGV4dCIsImVycm9yTWVzc2FnZSIsInRpbWVPdXQiLCJfcmVxdWlyZXNfYWNrIiwiX3NjaGVkdWxlX21lc3NhZ2UiLCJzZXF1ZW5jZSIsInVuc2hpZnQiLCJnZXRUcmFjZUxvZyIsInN0YXJ0VHJhY2UiLCJzdG9wVHJhY2UiLCJ3c3VybCIsInVyaVBhcnRzIiwic3BsaXQiLCJqb2luIiwiYmluYXJ5VHlwZSIsIm9ub3BlbiIsIl9vbl9zb2NrZXRfb3BlbiIsIm9ubWVzc2FnZSIsIl9vbl9zb2NrZXRfbWVzc2FnZSIsIl9vbl9zb2NrZXRfZXJyb3IiLCJvbmNsb3NlIiwiX29uX3NvY2tldF9jbG9zZSIsIl9wcm9jZXNzX3F1ZXVlIiwic3RvcmUiLCJzdG9yZWRNZXNzYWdlIiwidmVyc2lvbiIsInB1YlJlY1JlY2VpdmVkIiwiaGV4IiwibWVzc2FnZUJ5dGVzIiwicGF5bG9hZEhleCIsInBvcCIsIl9zb2NrZXRfc2VuZCIsIm1lc3NhZ2VDb3VudCIsIm1lc3NhZ2VzIiwiX2RlZnJhbWVNZXNzYWdlcyIsIl9oYW5kbGVNZXNzYWdlIiwiYnl0ZUFycmF5IiwibmV3RGF0YSIsInJlc3VsdCIsImVycm9yU3RhY2siLCJzdGFjayIsInNlbnRNZXNzYWdlIiwicmVjZWl2ZWRNZXNzYWdlIiwic2VxdWVuY2VkTWVzc2FnZXMiLCJtc2dJZCIsIm1zZyIsInNvcnQiLCJwdWJSZWxNZXNzYWdlIiwicmVjb25uZWN0ZWQiLCJfY29ubmVjdGVkIiwiX3JlY2VpdmVQdWJsaXNoIiwiX3JlY2VpdmVNZXNzYWdlIiwicHViQ29tcE1lc3NhZ2UiLCJ3aXJlTWVzc2FnZU1hc2tlZCIsInB1YkFja01lc3NhZ2UiLCJwdWJSZWNNZXNzYWdlIiwiX3JlY29ubmVjdCIsImVycm9yVGV4dCIsInJlYWR5U3RhdGUiLCJjbG9zZSIsIm1xdHRWZXJzaW9uRXhwbGljaXQiLCJzcGxpY2UiLCJyZWNvcmQiLCJzZXZlcml0eSIsInNoaWZ0IiwidHJhY2VPYmplY3QiLCJtYXNrZWQiLCJ0cmFjZU9iamVjdE1hc2tlZCIsImF0dHIiLCJuZXdQYXlsb2FkIiwicGF5bG9hZCIsImlzVmlldyIsIkRhdGFWaWV3IiwiZGVmaW5lUHJvcGVydGllcyIsIm5ld0Rlc3RpbmF0aW9uTmFtZSIsIm5ld1FvcyIsIm5ld1JldGFpbmVkIiwibmV3VG9waWMiLCJuZXdEdXBsaWNhdGUiLCJpcHY2QWRkU0JyYWNrZXQiLCJjbGllbnRJZExlbmd0aCIsIm5ld09uQ29ubmVjdGVkIiwibmV3RGlzY29ubmVjdGVkUHVibGlzaGluZyIsIm5ld0Rpc2Nvbm5lY3RlZEJ1ZmZlclNpemUiLCJuZXdPbkNvbm5lY3Rpb25Mb3N0IiwibmV3T25NZXNzYWdlRGVsaXZlcmVkIiwibmV3T25NZXNzYWdlQXJyaXZlZCIsInRyYWNlIiwiaG9zdHMiLCJwb3J0cyIsInN0cmluZ1BheWxvYWQiLCJ1c2luZ1VSSXMiLCJpcHY2IiwicHVibGlzaCIsImlzQ29ubmVjdGVkIiwiZGVmaW5lIiwiZGVmYXVsdCIsIml0ZXJhdG9yIiwiYXNzZXJ0SXNMaXN0IiwibWFrZUVudW0iLCJpc051bWJlciIsIlJlZ0V4cCIsInZhbGlkV1NVcmwiLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiaCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiUyIsInciLCJfIiwiTyIsIkMiLCJUIiwiUmVmZXJlbmNlRXJyb3IiLCJMIiwiRSIsInJlY29ubmVjdFdlYlNvY2tldCIsIndlYnNvY2tldEluaXRGYWlsZWQiLCJsaW5lYXJDb25uZWN0QXR0ZW1wdCIsImV4cG9uZW50aWFsQ29ubmVjdEF0dGVtcHQiLCJleHBvbmVudGlhbEJhY2tPZmZUaW1lIiwiZXhwb25lbnRpYWxUaW1lb3V0SGFuZGxlIiwibGlmZVRpbWVUaW1lb3V0SGFuZGxlIiwicGVuZGluZ1Jlc3BvbnNlIiwiaW50ZXJ2YWxIYW5kbGUiLCJpbml0RmFpbHVyZSIsIlNldCIsImdldFdlYlNvY2tldFRyYW5zcG9ydCIsInN1YnNjcmlwdGlvblVwZGF0ZSIsInN1YnNjcmlwdGlvbkZhaWx1cmUiLCJNYXAiLCJhbGxNZXNzYWdlIiwiY29ubmVjdGlvbkdhaW4iLCJjb25uZWN0aW9uTG9zdCIsImNvbm5Db25maWciLCJwcm9taXNlSGFuZGxlIiwicHJvbWlzZUNvbXBsZXRlZCIsInN1YnNjcmliZWQiLCJwZW5kaW5nIiwidSIsInNpemUiLCJmcm9tIiwiY2xlYXIiLCJhZGQiLCJkZWxldGUiLCJoYXMiLCJDTE9TRUQiLCJPUEVOIiwib25TdWJzY3JpcHRpb25VcGRhdGUiLCJvblN1YnNjcmlwdGlvbkZhaWx1cmUiLCJvbkFsbE1lc3NhZ2UiLCJyZXF1aXJlIiwiNiIsIjciLCI4IiwiU2VydmljZSIsImFwaUxvYWRlciIsInNlcnZpY2VzIiwiQ29nbml0b0lkZW50aXR5IiwiZGVmaW5lU2VydmljZSIsIm1vZGVsIiwicGFnaW5hdG9ycyIsInBhZ2luYXRpb24iLCI5IiwiU1RTIiwiMTAiLCJzdmMiLCIxMSIsIkhtYWMiLCJNZDUiLCJTaGExIiwiU2hhMjU2IiwiY3JlYXRlSGFzaCIsImFsZyIsImNyZWF0ZUhtYWMiLCJjcmVhdGVTaWduIiwiMTIiLCJCdWZmZXIiLCJ2aWV3U3RyaW5ncyIsImlzRW1wdHlEYXRhIiwiY29udmVydFRvQnVmZmVyIiwiYnl0ZU9mZnNldCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiMTMiLCJoYXNoVXRpbHMiLCJoYXNoQ3RvciIsInNlY3JldCIsImhhc2giLCJvdXRlciIsImlubmVyIiwiQkxPQ0tfU0laRSIsImJ1ZmZlckhhc2giLCJkaWdlc3QiLCJidWZmZXJGcm9tU2VjcmV0IiwidG9IYXNoIiwiZW5jb2RpbmciLCJmaW5pc2hlZCIsIjE0IiwiYnVmZmVyTGVuZ3RoIiwiYnl0ZXNIYXNoZWQiLCJjbW4iLCJxIiwiZmYiLCJnZyIsImhoIiwiaWkiLCJzb3VyY2VEYXRhIiwicG9zaXRpb24iLCJzZXRVaW50OCIsImhhc2hCdWZmZXIiLCJ1bmRlY29yYXRlZExlbmd0aCIsImJpdHNIYXNoZWQiLCJzZXRVaW50MzIiLCJmbG9vciIsIm91dCIsImJ1ZmYiLCJnZXRVaW50MzIiLCIxNSIsIlVpbnQzMkFycmF5IiwicG93IiwiaDAiLCJoMSIsImgyIiwiaDMiLCJoNCIsImJsb2NrIiwidG90YWxMZW5ndGgiLCJ3cml0ZSIsImJ5dGUiLCJwcm9jZXNzQmxvY2siLCJvdXRWaWV3IiwidGVtcCIsIjE2IiwiS0VZIiwiTUFYX0hBU0hBQkxFX0xFTkdUSCIsIkludDMyQXJyYXkiLCJidWZmZXJWaWV3Iiwic3RhdGUwIiwic3RhdGUxIiwic3RhdGUyIiwic3RhdGUzIiwic3RhdGU0Iiwic3RhdGU1Iiwic3RhdGU2Iiwic3RhdGU3IiwidDFfMSIsInQyXzEiLCJ0MSIsInQyIiwiMTciLCJwcm9jZXNzIiwidXRpbCIsImNyeXB0byIsImxpYiIsInF1ZXJ5c3RyaW5nIiwicmVhbENsb2NrIiwiZW52aXJvbm1lbnQiLCJjcmVhdGVFdmVudFN0cmVhbSIsImlzQnJvd3NlciIsImlzTm9kZSIsIlhNTCIsIlBhcnNlciIsImJyb3dzZXIiLCIxOCIsIlByb21pc2VzRGVwZW5kZW5jeSIsImluaGVyaXQiLCJleHRyYWN0Q3JlZGVudGlhbHMiLCJlYWNoIiwiZ2V0Q3JlZGVudGlhbHMiLCJmaW5pc2giLCJjcmVkRXJyb3IiLCJhY2Nlc3NLZXlJZCIsInNlY3JldEFjY2Vzc0tleSIsImNyZWRlbnRpYWxQcm92aWRlciIsImFsbG93VW5rbm93bktleXMiLCJoYXNTZXJ2aWNlIiwibG9hZEZyb21QYXRoIiwicmVhZEZpbGVTeW5jIiwiZmlsZVN5c3RlbUNyZWRzIiwiRmlsZVN5c3RlbUNyZWRlbnRpYWxzIiwiY2hhaW4iLCJDcmVkZW50aWFsUHJvdmlkZXJDaGFpbiIsInByb3ZpZGVycyIsImRlZmF1bHRWYWx1ZSIsIm1lcmdlIiwiYXBpVmVyc2lvbnMiLCJhcGlWZXJzaW9uIiwiaHR0cE9wdGlvbnMiLCJtYXhSZWRpcmVjdHMiLCJwYXJhbVZhbGlkYXRpb24iLCJzc2xFbmFibGVkIiwiczNGb3JjZVBhdGhTdHlsZSIsInMzQnVja2V0RW5kcG9pbnQiLCJzM0Rpc2FibGVCb2R5U2lnbmluZyIsImNvbXB1dGVDaGVja3N1bXMiLCJjb252ZXJ0UmVzcG9uc2VUeXBlcyIsImNvcnJlY3RDbG9ja1NrZXciLCJjdXN0b21Vc2VyQWdlbnQiLCJkeW5hbW9EYkNyYzMyIiwic3lzdGVtQ2xvY2tPZmZzZXQiLCJzaWduYXR1cmVWZXJzaW9uIiwic2lnbmF0dXJlQ2FjaGUiLCJyZXRyeURlbGF5T3B0aW9ucyIsInVzZUFjY2VsZXJhdGVFbmRwb2ludCIsImNsaWVudFNpZGVNb25pdG9yaW5nIiwiZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkIiwiZW5kcG9pbnRDYWNoZVNpemUiLCJob3N0UHJlZml4RW5hYmxlZCIsInN0c1JlZ2lvbmFsRW5kcG9pbnRzIiwiY29weSIsInNldFByb21pc2VzRGVwZW5kZW5jeSIsImRlcCIsImNvbnN0cnVjdG9ycyIsIlJlcXVlc3QiLCJTMyIsIk1hbmFnZWRVcGxvYWQiLCJhZGRQcm9taXNlcyIsImdldFByb21pc2VzRGVwZW5kZW5jeSIsIjE5IiwiVkVSU0lPTiIsIlNpZ25lcnMiLCJQcm90b2NvbCIsIkpzb24iLCJRdWVyeSIsIlJlc3QiLCJSZXN0SnNvbiIsIlJlc3RYbWwiLCJCdWlsZGVyIiwiTW9kZWwiLCJBcGkiLCJPcGVyYXRpb24iLCJTaGFwZSIsIlBhZ2luYXRvciIsIlJlc291cmNlV2FpdGVyIiwiRW5kcG9pbnRDYWNoZSIsImV2ZW50cyIsIlNlcXVlbnRpYWxFeGVjdXRvciIsIm1lbW9pemVkUHJvcGVydHkiLCIyMCIsImhpZGVQcm9wZXJ0aWVzIiwiZXhwaXJlZCIsImV4cGlyZVRpbWUiLCJyZWZyZXNoQ2FsbGJhY2tzIiwic2Vzc2lvblRva2VuIiwiZXhwaXJ5V2luZG93IiwibmVlZHNSZWZyZXNoIiwiY3VycmVudFRpbWUiLCJkYXRlIiwiZ2V0RGF0ZSIsImFkanVzdGVkVGltZSIsInJlZnJlc2giLCJjb2FsZXNjZVJlZnJlc2giLCJzeW5jIiwibG9hZCIsImFycmF5RWFjaCIsImRlZmVyIiwiYWRkUHJvbWlzZXNUb0NsYXNzIiwiUHJvbWlzZURlcGVuZGVuY3kiLCJnZXRQcm9taXNlIiwicHJvbWlzaWZ5TWV0aG9kIiwicmVmcmVzaFByb21pc2UiLCJkZWxldGVQcm9taXNlc0Zyb21DbGFzcyIsIjIxIiwiQ2hhaW5hYmxlVGVtcG9yYXJ5Q3JlZGVudGlhbHMiLCJ0b2tlbkNvZGVGbiIsIlJvbGVBcm4iLCJSb2xlU2Vzc2lvbk5hbWUiLCJTZXJpYWxOdW1iZXIiLCJtYXN0ZXJDcmVkZW50aWFscyIsInN0c0NvbmZpZyIsInNlcnZpY2UiLCJmbiIsIm9wZXJhdGlvbiIsImdldFRva2VuQ29kZSIsInRva2VuQ29kZSIsIlRva2VuQ29kZSIsImNyZWRlbnRpYWxzRnJvbSIsInRva2VuIiwiMjIiLCJDb2duaXRvSWRlbnRpdHlDcmVkZW50aWFscyIsImxvY2FsU3RvcmFnZUtleSIsImNsaWVudENvbmZpZyIsIl9pZGVudGl0eUlkIiwiX2NsaWVudENvbmZpZyIsImxvYWRDYWNoZWRJZCIsIklkZW50aXR5SWQiLCJpZGVudGl0eUlkIiwiY3JlYXRlQ2xpZW50cyIsImdldElkIiwiY2xlYXJJZE9uTm90QXV0aG9yaXplZCIsImdldENyZWRlbnRpYWxzRnJvbVNUUyIsImdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHkiLCJjbGVhckNhY2hlZElkIiwicG9vbElkIiwiSWRlbnRpdHlQb29sSWQiLCJsb2dpbklkIiwiTG9naW5JZCIsInN0b3JhZ2UiLCJjb2duaXRvIiwibG9hZENyZWRlbnRpYWxzIiwiQWNjZXNzS2V5SWQiLCJTZWNyZXRLZXkiLCJTZXNzaW9uVG9rZW4iLCJFeHBpcmF0aW9uIiwiY2FjaGVJZCIsImdldE9wZW5JZFRva2VuIiwiV2ViSWRlbnRpdHlUb2tlbiIsIlRva2VuIiwid2ViSWRlbnRpdHlDcmVkZW50aWFscyIsIndlYkVyciIsInN0cyIsImdldFN0b3JhZ2UiLCJMb2dpbnMiLCJhY3R1YWxQcm92aWRlcnMiLCJXZWJJZGVudGl0eUNyZWRlbnRpYWxzIiwiY29nbml0b0NvbmZpZyIsInNldFN0b3JhZ2UiLCJ2YWwiLCIyMyIsImRlZmF1bHRQcm92aWRlcnMiLCJyZXNvbHZlQ2FsbGJhY2tzIiwicmVzb2x2ZU5leHQiLCJwcm92aWRlciIsImdldEVyciIsInJlc29sdmVQcm9taXNlIiwiMjQiLCJTQU1MQ3JlZGVudGlhbHMiLCJhc3N1bWVSb2xlV2l0aFNBTUwiLCIyNSIsIlRlbXBvcmFyeUNyZWRlbnRpYWxzIiwibG9hZE1hc3RlckNyZWRlbnRpYWxzIiwiYXNzdW1lUm9sZSIsImdldFNlc3Npb25Ub2tlbiIsIjI2IiwiYXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eSIsIjI3IiwiZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkRW52cyIsImdldENhY2hlS2V5IiwiYXBpIiwiaWRlbnRpZmllcnMiLCJvcGVyYXRpb25zIiwic2VydmljZUlkIiwibWFyc2hhbGxDdXN0b21JZGVudGlmaWVycyIsInNoYXBlIiwibWFyc2hhbGxDdXN0b21JZGVudGlmaWVyc0hlbHBlciIsInJlcXVpcmVkIiwibWVtYmVyU2hhcGUiLCJtZW1iZXJzIiwiZW5kcG9pbnREaXNjb3ZlcnlJZCIsImxvY2F0aW9uTmFtZSIsImlzTG9jYXRpb25OYW1lIiwib3B0aW9uYWxEaXNjb3ZlckVuZHBvaW50Iiwib3BlcmF0aW9uTW9kZWwiLCJjYWNoZUtleSIsImVuZHBvaW50cyIsImVuZHBvaW50Q2FjaGUiLCJBZGRyZXNzIiwiaHR0cFJlcXVlc3QiLCJ1cGRhdGVFbmRwb2ludCIsImVuZHBvaW50UmVxdWVzdCIsIm1ha2VSZXF1ZXN0IiwiZW5kcG9pbnRPcGVyYXRpb24iLCJJZGVudGlmaWVycyIsImFkZEFwaVZlcnNpb25IZWFkZXIiLCJyZW1vdmVMaXN0ZW5lciIsIkV2ZW50TGlzdGVuZXJzIiwiQ29yZSIsIlZBTElEQVRFX1BBUkFNRVRFUlMiLCJSRVRSWV9DSEVDSyIsInB1dCIsIkNhY2hlUGVyaW9kSW5NaW51dGVzIiwiRW5kcG9pbnRzIiwicmVxdWVzdFF1ZXVlIiwicmVxdWlyZWREaXNjb3ZlckVuZHBvaW50IiwiZG9uZSIsImlucHV0U2hhcGUiLCJjYWNoZUtleVN0ciIsImdldEtleVN0cmluZyIsImVycm9yUGFyYW1zIiwicmV0cnlhYmxlIiwicmVtb3ZlIiwicGVuZGluZ1JlcXVlc3RzIiwicmVxdWVzdENvbnRleHQiLCJpbnZhbGlkYXRlQ2FjaGVkRW5kcG9pbnRzIiwiaHR0cFJlc3BvbnNlIiwic3RhdHVzQ29kZSIsImlzRmFsc3kiLCJkaXNjb3ZlckVuZHBvaW50IiwiX29yaWdpbmFsQ29uZmlnIiwic3ZjQ29uZmlnIiwic2VydmljZUlkZW50aWZpZXIiLCJCb29sZWFuIiwiaGFzQ3VzdG9tRW5kcG9pbnQiLCJpc1ByZXNpZ25lZCIsImVudiIsImNvbmZpZ0ZpbGUiLCJpbmlMb2FkZXIiLCJsb2FkRnJvbSIsImlzQ29uZmlnIiwiZmlsZW5hbWUiLCJzaGFyZWRDb25maWdGaWxlRW52Iiwic2hhcmVkRmlsZUNvbmZpZyIsIkFXU19QUk9GSUxFIiwiZGVmYXVsdFByb2ZpbGUiLCJlbmRwb2ludF9kaXNjb3ZlcnlfZW5hYmxlZCIsImlzRW5kcG9pbnREaXNjb3ZlcnlBcHBsaWNhYmxlIiwiYXBwZW5kVG9Vc2VyQWdlbnQiLCJlbmRwb2ludERpc2NvdmVyeVJlcXVpcmVkIiwiYWRkTmFtZWRMaXN0ZW5lciIsImludmFsaWRhdGVDYWNoZWRFbmRwb2ludCIsIjI4IiwiZXZlbnRNZXNzYWdlQ2h1bmtlciIsInBhcnNlRXZlbnQiLCJwYXJzZXIiLCJldmVudE1lc3NhZ2VzIiwiMjkiLCJyZWFkSW50MzJCRSIsIjMwIiwidG9CdWZmZXIiLCJJbnQ2NCIsImJ5dGVzIiwiaXNCdWZmZXIiLCJuZWdhdGUiLCJmcm9tTnVtYmVyIiwicmVtYWluaW5nIiwiYWJzIiwicm91bmQiLCJuZWdhdGl2ZSIsIjMxIiwicGFyc2VNZXNzYWdlIiwibWVzc2FnZVR5cGUiLCJwYXJzZUVycm9yIiwiZXZlbnRNb2RlbCIsImV2ZW50UGF5bG9hZE1lbWJlck5hbWUiLCJwYXlsb2FkU2hhcGUiLCJldmVudEhlYWRlck5hbWVzIiwiZXZlbnRIZWFkZXJNZW1iZXJOYW1lcyIsInRvVHlwZSIsIjMyIiwic3BsaXRNZXNzYWdlIiwiQk9PTEVBTl9UQUciLCJCWVRFX1RBRyIsIlNIT1JUX1RBRyIsIklOVF9UQUciLCJMT05HX1RBRyIsIkJJTkFSWV9UQUciLCJTVFJJTkdfVEFHIiwiVElNRVNUQU1QX1RBRyIsIlVVSURfVEFHIiwicGFyc2VIZWFkZXJzIiwibmFtZUxlbmd0aCIsInJlYWRVSW50OCIsInJlYWRJbnQ4IiwicmVhZEludDE2QkUiLCJiaW5hcnlMZW5ndGgiLCJyZWFkVUludDE2QkUiLCJzdHJpbmdMZW5ndGgiLCJ1dWlkQ2hhcnMiLCJzdWJzdHIiLCJwYXJzZWQiLCIzMyIsIlBSRUxVREVfTUVNQkVSX0xFTkdUSCIsIlBSRUxVREVfTEVOR1RIIiwiQ0hFQ0tTVU1fTEVOR1RIIiwiTUlOSU1VTV9NRVNTQUdFX0xFTkdUSCIsInJlYWRVSW50MzJCRSIsImV4cGVjdGVkUHJlbHVkZUNoZWNrc3VtIiwiY3JjMzIiLCJleHBlY3RlZE1lc3NhZ2VDaGVja3N1bSIsImhlYWRlcnNTdGFydCIsImhlYWRlcnNFbmQiLCIzNCIsIkRJU0NPVkVSX0VORFBPSU5UIiwiYWRkTmFtZWRMaXN0ZW5lcnMiLCJhZGRBc3luYyIsInJlcSIsImlzR2xvYmFsRW5kcG9pbnQiLCJpZGVtcG90ZW50TWVtYmVycyIsImlMZW4iLCJ1dWlkIiwidjQiLCJydWxlcyIsInZhbGlkYXRpb24iLCJQYXJhbVZhbGlkYXRvciIsImhhbHRIYW5kbGVyc09uRXJyb3IiLCJhdXRodHlwZSIsImdldFNpZ25lckNsYXNzIiwiVjQiLCJjb21wdXRlU2hhMjU2Iiwic2hhIiwiZ2V0T3BlcmF0aW9uQXV0aHR5cGUiLCJwYXlsb2FkTWVtYmVyIiwiZ2V0UmVxdWVzdFBheWxvYWRTaGFwZSIsInN0cmluZyIsImlzU3RyZWFtaW5nIiwicmVxdWlyZXNMZW5ndGgiLCJIdHRwUmVxdWVzdCIsInJldHJ5Q291bnQiLCJnZXRTa2V3Q29ycmVjdGVkRGF0ZSIsInNpZ25lciIsInNpZ25pbmdOYW1lIiwiZW5kcG9pbnRQcmVmaXgiLCJzZXRTZXJ2aWNlQ2xpZW50SWQiLCJfY2xpZW50SWQiLCJhZGRBdXRob3JpemF0aW9uIiwic2lnbmVkQXQiLCJyZXNwIiwic3VjY2Vzc2Z1bFJlc3BvbnNlIiwiaHR0cFJlc3AiLCJzdHJlYW0iLCJvcGVyYXRpb25OYW1lIiwic3RhdHVzTWVzc2FnZSIsImVtaXQiLCJzdHJlYW1pbmciLCJIdHRwQ2xpZW50Iiwic3RyZWFtc0FwaVZlcnNpb24iLCJoYXNFdmVudE91dHB1dCIsInJlYWQiLCJkaWRDYWxsYmFjayIsImVyckNvZGUiLCJob3N0bmFtZSIsImV4ZWN1dGVTZW5kIiwiaHR0cCIsImdldEluc3RhbmNlIiwiaGFuZGxlUmVxdWVzdCIsIl9hYm9ydENhbGxiYWNrIiwiYnVmZmVycyIsImRhdGVIZWFkZXIiLCJzZXJ2ZXJUaW1lIiwiaXNDbG9ja1NrZXdlZCIsImFwcGx5Q2xvY2tPZmZzZXQiLCJjaHVuayIsInRvdGFsIiwicHJvZ3Jlc3MiLCJsb2FkZWQiLCJyZXRyeWFibGVFcnJvciIsImNsb2NrU2tld0Vycm9yIiwiRW5kcG9pbnQiLCJyZWRpcmVjdCIsInJlZGlyZWN0Q291bnQiLCJyZXRyeURlbGF5IiwicmV0cnlEZWxheXMiLCJ3aWxsUmV0cnkiLCJDb3JlUG9zdCIsImV4dHJhY3RSZXF1ZXN0SWQiLCJlcnJubyIsIm9yaWdpbmFsRXJyb3IiLCJsaW5lIiwiZGVsdGEiLCJzdGFydFRpbWUiLCJhbnNpIiwiaXNUVFkiLCJjZW5zb3JlZFBhcmFtcyIsImZpbHRlclNlbnNpdGl2ZUxvZyIsInN0cnVjdCIsInN1YlNoYXBlTmFtZSIsInN1YlNoYXBlIiwibGlzdCIsIm1lbWJlciIsImlzU2Vuc2l0aXZlIiwiaW5zcGVjdCIsImxvd2VyRmlyc3QiLCJidWlsZE1lc3NhZ2UiLCJidWlsZFJlcXVlc3QiLCJleHRyYWN0RGF0YSIsImV4dHJhY3RFcnJvciIsIjM1IiwidXJsUGFyc2UiLCJwcm90b2NvbCIsIl91c2VyQWdlbnQiLCJzZXRVc2VyQWdlbnQiLCJnZXRVc2VyQWdlbnRIZWFkZXJOYW1lIiwidXNlckFnZW50IiwiYWdlbnRQYXJ0aWFsIiwiZ2V0VXNlckFnZW50IiwicGF0aG5hbWUiLCJzZWFyY2giLCJxdWVyeSIsInF1ZXJ5U3RyaW5nUGFyc2UiLCJxdWVyeVBhcmFtc1RvU3RyaW5nIiwiZW5kcG9pbnRTdHIiLCJuZXdFbmRwb2ludCIsIkh0dHBSZXNwb25zZSIsImNyZWF0ZVVuYnVmZmVyZWRTdHJlYW0iLCJzaW5nbGV0b24iLCIzNiIsIkV2ZW50RW1pdHRlciIsIlhIUkNsaWVudCIsImVyckNhbGxiYWNrIiwiZW1pdHRlciIsImhyZWYiLCJoZWFkZXJzRW1pdHRlZCIsIkhFQURFUlNfUkVDRUlWRUQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJET05FIiwiZmluaXNoUmVxdWVzdCIsInVwbG9hZCIsImV2dCIsInhockFzeW5jIiwieGhyV2l0aENyZWRlbnRpYWxzIiwid2l0aENyZWRlbnRpYWxzIiwicmVzcG9uc2VUeXBlIiwicmF3SGVhZGVycyIsImFiIiwidmlldyIsIjM3IiwiSnNvbkJ1aWxkZXIiLCJ0cmFuc2xhdGUiLCJzdHJ1Y3R1cmUiLCJsb2NhdGlvbiIsInRyYW5zbGF0ZVN0cnVjdHVyZSIsInRyYW5zbGF0ZU1hcCIsInRyYW5zbGF0ZUxpc3QiLCJ0b1dpcmVGb3JtYXQiLCJ0cmFuc2xhdGVTY2FsYXIiLCJidWlsZCIsIjM4IiwiSnNvblBhcnNlciIsInNoYXBlTWVtYmVycyIsIjM5IiwiQ29sbGVjdGlvbiIsImdsb2JhbEVuZHBvaW50IiwianNvblZlcnNpb24iLCJ0YXJnZXRQcmVmaXgiLCJ0aW1lc3RhbXBGb3JtYXQiLCJ4bWxOYW1lc3BhY2UiLCJzZXJ2aWNlQWJicmV2aWF0aW9uIiwic2VydmljZUZ1bGxOYW1lIiwiZW5kcG9pbnRvcGVyYXRpb24iLCJzaGFwZXMiLCJwYWdpbmF0b3IiLCJ3YWl0ZXJzIiwid2FpdGVyIiwiZG9jdW1lbnRhdGlvbiIsImRvY3VtZW50YXRpb25VcmwiLCI0MCIsIm1lbW9pemUiLCJuYW1lVHIiLCJpdGVyYWJsZSIsIjQxIiwicmVxdWVzdFVyaSIsImVuZHBvaW50ZGlzY292ZXJ5IiwiZXJyb3JzIiwiaXNJZGVtcG90ZW50IiwidG9wTGV2ZWxTaGFwZSIsImlzRXZlbnRTdHJlYW0iLCJoYXNFdmVudFN0cmVhbSIsIjQyIiwiaW5wdXRfdG9rZW4iLCJsaW1pdF9rZXkiLCJtb3JlX3Jlc3VsdHMiLCJvdXRwdXRfdG9rZW4iLCJyZXN1bHRfa2V5IiwiNDMiLCI0NCIsIm1lbWJlck5hbWUiLCJtaW4iLCJwYXR0ZXJuIiwieG1sTmFtZSIsInF1ZXJ5TmFtZSIsImlzQ29tcG9zaXRlIiwiaWRlbXBvdGVuY3lUb2tlbiIsImpzb252YWx1ZSIsInNlbnNpdGl2ZSIsImV2ZW50c3RyZWFtIiwiZXZlbnRwYXlsb2FkIiwiZXZlbnRoZWFkZXIiLCJpc1RpbWVzdGFtcEZvcm1hdFNldCIsImVuZHBvaW50ZGlzY292ZXJ5aWQiLCJob3N0TGFiZWwiLCJ4bWxBdHRyaWJ1dGUiLCJDb21wb3NpdGVTaGFwZSIsImZsYXR0ZW5lZCIsIlN0cnVjdHVyZVNoYXBlIiwicmVxdWlyZWRNYXAiLCJmaXJzdEluaXQiLCJpc1NoYXBlIiwieG1sT3JkZXIiLCJtZW1iZXJOYW1lcyIsImlzRXZlbnRQYXlsb2FkIiwiaXNFdmVudEhlYWRlciIsInJlc3VsdFdyYXBwZXIiLCJMaXN0U2hhcGUiLCJvbGROYW1lIiwiTWFwU2hhcGUiLCJTdHJpbmdTaGFwZSIsIm51bGxMZXNzUHJvdG9jb2xzIiwiaXNKc29uVmFsdWUiLCJCaW5hcnlTaGFwZSIsImJ1ZiIsImJhc2U2NCIsImRlY29kZSIsImFsbG9jIiwic2VjdXJlQnVmIiwiZmlsbCIsIkJhc2U2NFNoYXBlIiwiQm9vbGVhblNoYXBlIiwibm9ybWFsaXplZFR5cGVzIiwiY2hhcmFjdGVyIiwiZG91YmxlIiwibG9uZyIsInNob3J0IiwiYmlnaW50ZWdlciIsImJpZ2RlY2ltYWwiLCJibG9iIiwidHlwZXMiLCJ0b1VUQ1N0cmluZyIsInBhcnNlVGltZXN0YW1wIiwicmVmU2hhcGUiLCJmaWx0ZXJlZEtleXMiLCJJbmxpbmVTaGFwZSIsIm9yaWdUeXBlIiwiNDUiLCJjb250ZXh0IiwidmFsaWRhdGVNZW1iZXIiLCJmYWlsIiwidmFsaWRhdGVTdHJ1Y3R1cmUiLCJwYXJhbU5hbWUiLCJ2YWxpZGF0ZVR5cGUiLCJwYXJhbVZhbHVlIiwibWVtYmVyQ29udGV4dCIsInBhcmFtIiwidmFsaWRhdGVMaXN0IiwidmFsaWRhdGVNYXAiLCJ2YWxpZGF0ZVNjYWxhciIsInZhbGlkYXRlUmFuZ2UiLCJtYXBDb3VudCIsInZhbGlkYXRlU3RyaW5nIiwidmFsaWRhdGVQYXlsb2FkIiwidmFsaWRhdGVOdW1iZXIiLCJ2YWxpZFR5cGVzIiwidmFsaWRhdGVFbnVtIiwidmFsaWRhdGVQYXR0ZXJuIiwidmFsaWRhdGVVcmkiLCJkZXNjcmlwdG9yIiwiYWNjZXB0ZWRUeXBlcyIsImZvdW5kSW52YWxpZFR5cGUiLCJpc1R5cGUiLCJ0eXBlTmFtZSIsImFjY2VwdGVkVHlwZSIsInZvd2VsIiwiY2FzdGVkVmFsdWUiLCJTdHJlYW0iLCJCbG9iIiwiNDYiLCJwb3B1bGF0ZUhvc3RQcmVmaXgiLCJsYWJlbHMiLCJob3N0UGF0dGVybiIsImlzRW5kcG9pbnRPcGVyYXRpb24iLCJoYXNFbmRwb2ludERpc2NvdmVyIiwiaG9zdFByZWZpeCIsImhvc3RQcmVmaXhOb3RhdGlvbiIsInJlZ2V4IiwiZXhwYW5kSG9zdFByZWZpeCIsInByZXBlbmRFbmRwb2ludFByZWZpeCIsImxhYmVsIiwiNDciLCJ0YXJnZXQiLCJidWlsZGVyIiwiX190eXBlIiwiNDgiLCJRdWVyeVBhcmFtU2VyaWFsaXplciIsIlZlcnNpb24iLCJBY3Rpb24iLCJzZXJpYWxpemUiLCJDb2RlIiwicmVxdWVzdElkIiwiRXJyb3JzIiwib3JpZ1J1bGVzIiwidG1wIiwiX1hBTVpSZXF1ZXN0SWQiLCJyZXF1ZXN0SWRTaGFwZSIsIjQ5IiwiZ2VuZXJhdGVVUkkiLCJlbmRwb2ludFBhdGgiLCJvcGVyYXRpb25QYXRoIiwicXVlcnlTdHJpbmciLCJxdWVyeVN0cmluZ1NldCIsInBsdXMiLCJ1cmlFc2NhcGVQYXRoIiwidXJpRXNjYXBlIiwicGFydHMiLCJodHRwTWV0aG9kIiwicG9wdWxhdGVNZXRob2QiLCJodHRwUGF0aCIsInBvcHVsYXRlVVJJIiwibWVtYmVyVmFsdWUiLCJwb3B1bGF0ZUhlYWRlcnMiLCJoZWFkZXIiLCI1MCIsImFwcGx5Q29udGVudFR5cGVIZWFkZXIiLCJpc0JpbmFyeSIsInBvcHVsYXRlQm9keSIsIjUxIiwicm9vdEVsZW1lbnQiLCJ0b1hNTCIsInVwcGVyRmlyc3QiLCI1MiIsInVjZmlyc3QiLCJpc1F1ZXJ5TmFtZSIsInNlcmlhbGl6ZVN0cnVjdHVyZSIsInNlcmlhbGl6ZU1lbWJlciIsIm1lbWJlclJ1bGVzIiwic3VmZml4Iiwic2VyaWFsaXplTGlzdCIsImtleU5hbWUiLCJ2YWx1ZU5hbWUiLCJzZXJpYWxpemVNYXAiLCI1MyIsInBlcmZvcm1hbmNlIiwiNTQiLCJyZWdpb25Db25maWciLCJhcHBseUNvbmZpZyIsInJlZ2lvblByZWZpeCIsImdlbmVyYXRlUmVnaW9uUHJlZml4IiwiZGVyaXZlZEtleXMiLCJwYXR0ZXJucyIsInVzZUR1YWxzdGFjayIsImlzRHVhbHN0YWNrQXZhaWxhYmxlIiwiNTUiLCI1NiIsIkFjY2VwdG9yU3RhdGVNYWNoaW5lIiwiZG9tYWluIiwiam1lc3BhdGgiLCJoYXJkRXJyb3JTdGF0ZXMiLCJjb21wbGV0ZSIsImZzbSIsInNldHVwU3RhdGVzIiwidHJhbnNpdGlvbiIsIl9oYWx0SGFuZGxlcnNPbkVycm9yIiwiX2FzbSIsImN1cnJlbnRTdGF0ZSIsIm1hY2hpbmUiLCJEb21haW4iLCJkb21haW5FbWl0dGVyIiwiZG9tYWluVGhyb3duIiwiYWRkU3RhdGUiLCJhY3RpdmUiLCJSZXNwb25zZSIsInN0YXRlcyIsImVtaXRFdmVudCIsInJ1blRvIiwiYWJvcnQiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlYWNoUGFnZSIsIm1ha2VBc3luYyIsIndyYXBwZWRDYWxsYmFjayIsImhhc05leHRQYWdlIiwibmV4dFBhZ2UiLCJub29wIiwiZWFjaEl0ZW0iLCJyZXN1bHRLZXkiLCJwYWdpbmF0aW9uQ29uZmlnIiwiaXRlbXMiLCJjb250aW51ZUl0ZXJhdGlvbiIsImlzUGFnZWFibGUiLCJjcmVhdGVSZWFkU3RyZWFtIiwic3RyZWFtcyIsIlBhc3NUaHJvdWdoIiwibmV4dFRpY2siLCJyZWFkYWJsZSIsInNlbnQiLCJIVFRQX0RBVEEiLCJIVFRQX0VSUk9SIiwiZXhwZWN0ZWRMZW4iLCJzaG91bGRDaGVja0NvbnRlbnRMZW5ndGgiLCJyZWNlaXZlZExlbiIsImNoZWNrQ29udGVudExlbmd0aEFuZEVtaXQiLCJodHRwU3RyZWFtIiwibGVuZ3RoQWNjdW11bGF0b3IiLCJfd3JpdGUiLCJ1bnBpcGUiLCJwaXBlIiwiZXZlbnRQYXJhbWV0ZXJzIiwicHJlc2lnbiIsImV4cGlyZXMiLCJQcmVzaWduIiwidG9HZXQiLCJ0b1VuYXV0aGVudGljYXRlZCIsIl91bkF1dGhlbnRpY2F0ZWQiLCJWQUxJREFURV9DUkVERU5USUFMUyIsIlNJR04iLCJidWlsZEFzR2V0IiwiYWRkTGlzdGVuZXIiLCJwcm9taXNlIiwibWl4aW4iLCI1NyIsIkNIRUNLX0FDQ0VQVE9SUyIsIl93YWl0ZXIiLCJhY2NlcHRvcnMiLCJhY2NlcHRvck1hdGNoZWQiLCJhY2NlcHRvciIsIm1hdGNoZXIiLCJtYXRjaGVycyIsImV4cGVjdGVkIiwic2V0U3VjY2VzcyIsInNldEVycm9yIiwibG9hZFdhaXRlckNvbmZpZyIsInN0cmljdERlZXBFcXVhbCIsInBhdGhBbGwiLCJyZXN1bHRzIiwibnVtUmVzdWx0cyIsImluZCIsInBhdGhBbnkiLCJsaXN0ZW5lcnMiLCJ3YWl0IiwiJHdhaXRlciIsIm1heEF0dGVtcHRzIiwiYWRkTGlzdGVuZXJzIiwiNTgiLCJudW1SZXRyaWVzIiwibmV4dFBhZ2VUb2tlbnMiLCJpbnB1dFRva2VucyIsImlucHV0VG9rZW4iLCJjYWNoZU5leHRQYWdlVG9rZW5zIiwibW9yZVJlc3VsdHMiLCJleHBycyIsIm91dHB1dFRva2VuIiwiZXhwciIsIjU5IiwiX2V2ZW50cyIsImxpc3RlbmVyIiwidG9IZWFkIiwib25Bc3luYyIsIl9pc0FzeW5jIiwiZXZlbnRBcmdzIiwiZG9uZUNhbGxiYWNrIiwiY2FsbExpc3RlbmVycyIsInByZXZFcnJvciIsImNhbGxOZXh0TGlzdGVuZXIiLCJjYWxsYmFja3MiLCJhZGROYW1lZEFzeW5jTGlzdGVuZXIiLCI2MCIsImNsaWVudENvdW50IiwibG9hZFNlcnZpY2VDbGFzcyIsIlNlcnZpY2VDbGFzcyIsIm9yaWdpbmFsQ29uZmlnIiwiaW5pdGlhbGl6ZSIsInZhbGlkYXRlU2VydmljZSIsImVuZHBvaW50RnJvbVRlbXBsYXRlIiwic2V0RW5kcG9pbnQiLCJhZGREZWZhdWx0TW9uaXRvcmluZ0xpc3RlbmVycyIsIl9jbGllbnRTaWRlTW9uaXRvcmluZyIsInB1Ymxpc2hlciIsImV2ZW50SGFuZGxlciIsInNlcnZpY2VDb25maWciLCJpc0VtcHR5IiwiYXBpQ29uZmlnIiwiZGVmaW5lU2VydmljZUFwaSIsImdldExhdGVzdFNlcnZpY2VDbGFzcyIsImdldExhdGVzdFNlcnZpY2VWZXJzaW9uIiwiaXNvODYwMSIsInNlbGVjdGVkVmVyc2lvbiIsImRlZmF1bHRSZXRyeUNvdW50IiwiY3VzdG9taXplUmVxdWVzdHMiLCJjdXN0b21SZXF1ZXN0SGFuZGxlciIsImFkZEFsbFJlcXVlc3RMaXN0ZW5lcnMiLCJhdHRhY2hNb25pdG9yaW5nRW1pdHRlciIsIm1ha2VVbmF1dGhlbnRpY2F0ZWRSZXF1ZXN0Iiwid2FpdEZvciIsInNlcnZpY2VJbnRlcmZhY2UiLCJzZXR1cFJlcXVlc3RMaXN0ZW5lcnMiLCJhcGlDYWxsRXZlbnQiLCJtb25pdG9yaW5nRXZlbnQiLCJSZWdpb24iLCJNYXhSZXRyaWVzRXhjZWVkZWQiLCJVc2VyQWdlbnQiLCJGaW5hbEh0dHBTdGF0dXNDb2RlIiwiRmluYWxBd3NFeGNlcHRpb24iLCJGaW5hbEF3c0V4Y2VwdGlvbk1lc3NhZ2UiLCJGaW5hbFNka0V4Y2VwdGlvbiIsIkZpbmFsU2RrRXhjZXB0aW9uTWVzc2FnZSIsImFwaUF0dGVtcHRFdmVudCIsIkZxZG4iLCJIdHRwU3RhdHVzQ29kZSIsIkFjY2Vzc0tleSIsIlhBbXpuUmVxdWVzdElkIiwiWEFtelJlcXVlc3RJZCIsIlhBbXpJZDIiLCJhdHRlbXB0RmFpbEV2ZW50IiwiQXdzRXhjZXB0aW9uIiwiQXdzRXhjZXB0aW9uTWVzc2FnZSIsIlNka0V4Y2VwdGlvbiIsIlNka0V4Y2VwdGlvbk1lc3NhZ2UiLCJhdHRlbXB0VGltZXN0YW1wIiwiYXR0ZW1wdFN0YXJ0UmVhbFRpbWUiLCJhdHRlbXB0TGF0ZW5jeSIsImNhbGxTdGFydFJlYWxUaW1lIiwiY2FsbFRpbWVzdGFtcCIsImF0dGVtcHRDb3VudCIsIlRpbWVzdGFtcCIsIkF0dGVtcHRMYXRlbmN5IiwiQXR0ZW1wdENvdW50IiwibGF0ZW5jeSIsIkxhdGVuY3kiLCJSZXF1ZXN0U2lnbmVyIiwiZ2V0VmVyc2lvbiIsImNhbGN1bGF0ZVJldHJ5RGVsYXkiLCJ0aW1lb3V0RXJyb3IiLCJuZXR3b3JraW5nRXJyb3IiLCJleHBpcmVkQ3JlZGVudGlhbHNFcnJvciIsInRocm90dGxlZEVycm9yIiwibmV3U2VydmVyVGltZSIsInRocm93RXhjZXB0aW9uIiwiZGVmaW5lTWV0aG9kcyIsInZlcnNpb25zIiwiZmVhdHVyZXMiLCJfc2VydmljZU1hcCIsImFkZFZlcnNpb25zIiwiaWRlbnRpZmllciIsIlB1Ymxpc2hlciIsInB1Ymxpc2hlckNvbmZpZyIsImNvbmZpZ1Byb3ZpZGVyIiwiZW5hYmxlZCIsInN1cGVyY2xhc3MiLCJzZXRBcGkiLCJpc0FwaSIsImF0dGFjaE9uIiwiYmFzZUNsYXNzIiwiNjEiLCI2MiIsIlNlY3JldEFjY2Vzc0tleSIsInZhbGlkYXRlUmVnaW9uYWxFbmRwb2ludHNGbGFnVmFsdWUiLCJjb25maWdWYWx1ZSIsImVycm9yT3B0aW9ucyIsInZhbGlkYXRlUmVnaW9uYWxFbmRwb2ludHNGbGFnIiwiZW52RmxhZyIsInByb2ZpbGUiLCJnZXRQcm9maWxlc0Zyb21TaGFyZWRDb25maWciLCJmaWxlRmxhZyIsIm9wdEluUmVnaW9uYWxFbmRwb2ludCIsImluc2VydFBvaW50IiwiNjMiLCJleHBpcmVzSGVhZGVyIiwic2lnbmVkVXJsQnVpbGRlciIsInNpZ25lckNsYXNzIiwidW5peFRpbWVzdGFtcCIsInNpZ25lZFVybFNpZ25lciIsInBhcnNlZFVybCIsInF1ZXJ5UGFyYW1zIiwiYXV0aCIsInNpZ25hdHVyZSIsIlNFVF9DT05URU5UX0xFTkdUSCIsIkNPTVBVVEVfU0hBMjU2IiwidXJsRm9ybWF0IiwiNjQiLCJzZXJ2aWNlQ2xpZW50SWQiLCJnZXRTZXJ2aWNlQ2xpZW50SWQiLCJWMiIsIlYzIiwiVjNIdHRwcyIsIjY1Iiwic3ViUmVzb3VyY2VzIiwicmVzcG9uc2VIZWFkZXJzIiwicmZjODIyIiwic3RyaW5nVG9TaWduIiwiY2Fub25pY2FsaXplZEFtekhlYWRlcnMiLCJjYW5vbmljYWxpemVkUmVzb3VyY2UiLCJhbXpIZWFkZXJzIiwicmVzb3VyY2UiLCJ2aXJ0dWFsSG9zdGVkQnVja2V0IiwicmVzb3VyY2VzIiwic3VicmVzb3VyY2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJobWFjIiwiNjYiLCJTaWduYXR1cmVWZXJzaW9uIiwiU2lnbmF0dXJlTWV0aG9kIiwiQVdTQWNjZXNzS2V5SWQiLCJTZWN1cml0eVRva2VuIiwiU2lnbmF0dXJlIiwiNjciLCJkYXRldGltZSIsImF1dGhvcml6YXRpb24iLCJzaWduZWRIZWFkZXJzIiwiaGVhZGVyc1RvU2lnbiIsImNhbm9uaWNhbEhlYWRlcnMiLCJ0cmltIiwic2hhMjU2IiwiNjgiLCI2OSIsInY0Q3JlZGVudGlhbHMiLCJzZXJ2aWNlTmFtZSIsImFsZ29yaXRobSIsInVwZGF0ZUZvclByZXNpZ25lZCIsImFkZEhlYWRlcnMiLCJjcmVkU3RyaW5nIiwiY3JlZGVudGlhbFN0cmluZyIsInFzIiwiaXNTaWduYWJsZUhlYWRlciIsImxvd2VyS2V5Iiwic2VwIiwic2lnbmluZ0tleSIsImdldFNpZ25pbmdLZXkiLCJoZXhFbmNvZGVkSGFzaCIsImNhbm9uaWNhbFN0cmluZyIsImhleEVuY29kZWRCb2R5SGFzaCIsImNhbm9uaWNhbEhlYWRlclZhbHVlcyIsImNyZWF0ZVNjb3BlIiwidW5zaWduYWJsZUhlYWRlcnMiLCI3MCIsImNhY2hlZFNlY3JldCIsImNhY2hlUXVldWUiLCJ2NElkZW50aWZpZXIiLCJzaG91bGRDYWNoZSIsImtEYXRlIiwia1JlZ2lvbiIsImtTZXJ2aWNlIiwiZW1wdHlDYWNoZSIsIjcxIiwiZmluYWxTdGF0ZSIsImJpbmRPYmplY3QiLCJpbnB1dEVycm9yIiwiYWNjZXB0IiwiYWNjZXB0U3RhdGUiLCJmYWlsU3RhdGUiLCI3MiIsInNldEltbWVkaWF0ZSIsImVuZ2luZSIsInBsYXRmb3JtIiwiQVdTX0VYRUNVVElPTl9FTlYiLCJhZ2VudCIsImVuY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZSIsImNoIiwicGFydCIsInNvcnRlZEtleXMiLCJlbmFtZSIsInZhbHMiLCJ0b1N0cmVhbSIsIlJlYWRhYmxlIiwiX3JlYWQiLCJsc3RhdFN5bmMiLCJpbmkiLCJjdXJyZW50U2VjdGlvbiIsInNlY3Rpb24iLCJleHBlY3RlZEFyZ3MiLCJ0b0lTT1N0cmluZyIsImZvcm1hdHRlciIsImNyYzMyVGFibGUiLCJ0YmwiLCJjcmMiLCJtZDUiLCJzbGljZUZuIiwiYXJyYXlTbGljZUZuIiwiRmlsZVJlYWRlciIsInJlYWRlciIsIl9jb250aW51ZVJlYWRpbmciLCJiYWNrIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJ0b0hleCIsIml0ZXJGdW5jdGlvbiIsImlkeCIsIm9iajEiLCJvYmoyIiwiZHVwZSIsInByb3AiLCJ3ZWJraXRTbGljZSIsIm1velNsaWNlIiwic3RyIiwidGltZSIsImtsYXNzIiwibmV3T2JqZWN0IiwiY3RvciIsIl9fc3VwZXJfXyIsInByb3BzIiwiaXNWYWx1ZSIsIm9wdHMiLCJjYWNoZWRWYWx1ZSIsImhvaXN0UGF5bG9hZE1lbWJlciIsInJlc3BvbnNlUGF5bG9hZCIsImZzIiwic2V0dGluZ3MiLCJSZXNwb25zZU1ldGFkYXRhIiwiUmVxdWVzdElkIiwiZGVsZXRlUHJvbWlzZXMiLCJkdWFsc3RhY2tBdmFpbGFibGUiLCJjdXN0b21CYWNrb2ZmIiwiYmFzZSIsImhhbmRsZVJlcXVlc3RXaXRoUmV0cmllcyIsImNiIiwic2VuZFJlcXVlc3QiLCJyZXRyeUFmdGVyIiwiY29udmVydFBheWxvYWRUb1N0cmluZyIsInByb2ZpbGVzIiwicHJvZmlsZXNGcm9tQ29uZmlnIiwiY29uZmlnT3B0SW5FbnYiLCJwcm9maWxlc0Zyb21DcmVkcyIsInNoYXJlZENyZWRlbnRpYWxzRmlsZUVudiIsInByb2ZpbGVOYW1lcyIsImltZHNEaXNhYmxlZEVudiIsIjczIiwiRG9tWG1sUGFyc2VyIiwiZ2V0RWxlbWVudEJ5VGFnTmFtZSIsInhtbCIsInRhZyIsImVsZW1lbnRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwYXJlbnROb2RlIiwicGFyc2VYbWwiLCJwYXJzZVN0cnVjdHVyZSIsInhtbEtleSIsInhtbFZhbHVlIiwidGFnTmFtZSIsImNoaWxkIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJub2RlTmFtZSIsInRleHRDb250ZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwicGFyc2VNYXAiLCJwYXJzZUxpc3QiLCJjaGlsZE5vZGVzIiwicGFyc2VVbmtub3duIiwiZ2V0QXR0cmlidXRlIiwicGFyc2VTY2FsYXIiLCJpc1htbEF0dHJpYnV0ZSIsImF0dHJpYnV0ZXMiLCJ4bWxDaGlsZCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInN5bnRheEVycm9yIiwiZG9jdW1lbnRFbGVtZW50IiwiaXNFcnJvciIsImVycm9yRWxlbWVudCIsIkFjdGl2ZVhPYmplY3QiLCJhc3luYyIsImxvYWRYTUwiLCI3NCIsIlhtbE5vZGUiLCJYbWxUZXh0IiwiWG1sQnVpbGRlciIsImFkZEF0dHJpYnV0ZSIsImVsZW1lbnQiLCJhZGRDaGlsZE5vZGUiLCJhcHBseU5hbWVzcGFjZXMiLCJlbnRyeSIsImVudHJ5S2V5IiwiZW50cnlWYWx1ZSIsInNlcmlhbGl6ZVNjYWxhciIsImlzUm9vdCIsInhtbE5hbWVzcGFjZVVyaSIsInhtbE5hbWVzcGFjZVByZWZpeCIsIm5vRW1wdHkiLCJjaGlsZHJlbiIsIjc1IiwiZXNjYXBlQXR0cmlidXRlIiwiNzYiLCJlc2NhcGVFbGVtZW50IiwiNzciLCJyZW1vdmVBdHRyaWJ1dGUiLCJoYXNDaGlsZHJlbiIsInhtbFRleHQiLCJhdHRyaWJ1dGVOYW1lcyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGUiLCI3OCIsIjc5IiwiYjY0IiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRvQnl0ZUFycmF5IiwiYXJyIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwiZnJvbUJ5dGVBcnJheSIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsImxlbjIiLCJlbmNvZGVDaHVuayIsImxvb2t1cCIsIm51bSIsIjgwIiwiODEiLCJpZWVlNzU0Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiUmFuZ2VFcnJvciIsImVuY29kaW5nT3JPZmZzZXQiLCJhbGxvY1Vuc2FmZSIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwiZnJvbVN0cmluZyIsImNoZWNrZWQiLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic2xvd1RvU3RyaW5nIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaiIsImhleFdyaXRlIiwic3RyTGVuIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZm9vIiwidHlwZWRBcnJheVN1cHBvcnQiLCJwb29sU2l6ZSIsIl9hdWdtZW50Iiwic3BlY2llcyIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJlcXVhbHMiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaXNGaW5pdGUiLCJ0b0pTT04iLCJfYXJyIiwicmV0IiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkSW50TEUiLCJyZWFkSW50QkUiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQzMkxFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJzcmMiLCJkc3QiLCI4MiIsIl9tYXhMaXN0ZW5lcnMiLCJpc1VuZGVmaW5lZCIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJzZXRNYXhMaXN0ZW5lcnMiLCJlciIsIm5ld0xpc3RlbmVyIiwid2FybmVkIiwib25jZSIsImZpcmVkIiwibGlzdGVuZXJDb3VudCIsImV2bGlzdGVuZXIiLCI4MyIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJMTjIiLCI4NCIsIjg1Iiwic2Vjb25kIiwia2V5c1NlZW4iLCJrZXkyIiwiaXNGYWxzZSIsInRyaW1MZWZ0IiwiVFlQRV9OVU1CRVIiLCJUWVBFX0FOWSIsIlRZUEVfU1RSSU5HIiwiVFlQRV9BUlJBWSIsIlRZUEVfT0JKRUNUIiwiVFlQRV9FWFBSRUYiLCJUWVBFX0FSUkFZX05VTUJFUiIsIlRZUEVfQVJSQVlfU1RSSU5HIiwiYmFzaWNUb2tlbnMiLCJvcGVyYXRvclN0YXJ0VG9rZW4iLCJza2lwQ2hhcnMiLCJpc051bSIsIkxleGVyIiwidG9rZW5pemUiLCJ0b2tlbnMiLCJfY3VycmVudCIsIl9jb25zdW1lVW5xdW90ZWRJZGVudGlmaWVyIiwiX2NvbnN1bWVOdW1iZXIiLCJfY29uc3VtZUxCcmFja2V0IiwiX2NvbnN1bWVRdW90ZWRJZGVudGlmaWVyIiwiX2NvbnN1bWVSYXdTdHJpbmdMaXRlcmFsIiwibGl0ZXJhbCIsIl9jb25zdW1lTGl0ZXJhbCIsIl9jb25zdW1lT3BlcmF0b3IiLCJtYXhMZW5ndGgiLCJjdXJyZW50Iiwic3RhcnRpbmdDaGFyIiwibGl0ZXJhbFN0cmluZyIsIl9sb29rc0xpa2VKU09OIiwiZXgiLCJiaW5kaW5nUG93ZXIiLCJUcmVlSW50ZXJwcmV0ZXIiLCJydW50aW1lIiwiUnVudGltZSIsImludGVycHJldGVyIiwiX2ludGVycHJldGVyIiwiZnVuY3Rpb25UYWJsZSIsIl9mdW5jIiwiX2Z1bmN0aW9uQWJzIiwiX3NpZ25hdHVyZSIsImF2ZyIsIl9mdW5jdGlvbkF2ZyIsImNlaWwiLCJfZnVuY3Rpb25DZWlsIiwiX2Z1bmN0aW9uQ29udGFpbnMiLCJfZnVuY3Rpb25FbmRzV2l0aCIsIl9mdW5jdGlvbkZsb29yIiwiX2Z1bmN0aW9uTGVuZ3RoIiwiX2Z1bmN0aW9uTWFwIiwiX2Z1bmN0aW9uTWF4IiwiX2Z1bmN0aW9uTWVyZ2UiLCJ2YXJpYWRpYyIsIl9mdW5jdGlvbk1heEJ5Iiwic3VtIiwiX2Z1bmN0aW9uU3VtIiwiX2Z1bmN0aW9uU3RhcnRzV2l0aCIsIl9mdW5jdGlvbk1pbiIsIl9mdW5jdGlvbk1pbkJ5IiwiX2Z1bmN0aW9uVHlwZSIsIl9mdW5jdGlvbktleXMiLCJfZnVuY3Rpb25WYWx1ZXMiLCJfZnVuY3Rpb25Tb3J0IiwiX2Z1bmN0aW9uU29ydEJ5IiwiX2Z1bmN0aW9uSm9pbiIsInJldmVyc2UiLCJfZnVuY3Rpb25SZXZlcnNlIiwiX2Z1bmN0aW9uVG9BcnJheSIsIl9mdW5jdGlvblRvU3RyaW5nIiwiX2Z1bmN0aW9uVG9OdW1iZXIiLCJfZnVuY3Rpb25Ob3ROdWxsIiwiZXhwcmVzc2lvbiIsIl9sb2FkVG9rZW5zIiwiYXN0IiwiX2xvb2thaGVhZCIsIl9sb29rYWhlYWRUb2tlbiIsInJicCIsImxlZnRUb2tlbiIsIl9hZHZhbmNlIiwibGVmdCIsIm51ZCIsImN1cnJlbnRUb2tlbiIsImxlZCIsInJpZ2h0Iiwibm9kZSIsIk5vdCIsIl9wYXJzZVByb2plY3Rpb25SSFMiLCJTdGFyIiwiX3BhcnNlTXVsdGlzZWxlY3RIYXNoIiwiRmxhdHRlbiIsIl9wYXJzZUluZGV4RXhwcmVzc2lvbiIsIl9wcm9qZWN0SWZTbGljZSIsIl9wYXJzZU11bHRpc2VsZWN0TGlzdCIsIkV4cHJlZiIsIl9tYXRjaCIsIl9lcnJvclRva2VuIiwidG9rZW5OYW1lIiwiRG90IiwiX3BhcnNlRG90UkhTIiwiUGlwZSIsIk9yIiwiQW5kIiwiY29uZGl0aW9uIiwiRmlsdGVyIiwiX3BhcnNlQ29tcGFyYXRvciIsInRva2VuVHlwZSIsIl9wYXJzZVNsaWNlRXhwcmVzc2lvbiIsImluZGV4RXhwciIsImNvbXBhcmF0b3IiLCJsb29rYWhlYWQiLCJleHByZXNzaW9ucyIsImtleVRva2VuIiwicGFpcnMiLCJpZGVudGlmaWVyVHlwZXMiLCJ2aXNpdCIsIm1hdGNoZWQiLCJjb2xsZWN0ZWQiLCJzbGljZVBhcmFtcyIsImNvbXB1dGVkIiwiY29tcHV0ZVNsaWNlUGFyYW1zIiwic3RvcCIsInN0ZXAiLCJvYmpWYWx1ZXMiLCJmaWx0ZXJlZCIsImZpbmFsUmVzdWx0cyIsIm9yaWdpbmFsIiwibWVyZ2VkIiwicmVzb2x2ZWRBcmdzIiwiY2FsbEZ1bmN0aW9uIiwicmVmTm9kZSIsImptZXNwYXRoVHlwZSIsImFycmF5TGVuZ3RoIiwic3RlcFZhbHVlTmVnYXRpdmUiLCJjYXBTbGljZVJhbmdlIiwiYWN0dWFsVmFsdWUiLCJmdW5jdGlvbkVudHJ5IiwiX3ZhbGlkYXRlQXJncyIsInBsdXJhbGl6ZWQiLCJjdXJyZW50U3BlYyIsImFjdHVhbFR5cGUiLCJ0eXBlTWF0Y2hlZCIsIl9nZXRUeXBlTmFtZSIsIl90eXBlTWF0Y2hlcyIsImFyZ1ZhbHVlIiwic3VidHlwZSIsInNlYXJjaFN0ciIsIm9yaWdpbmFsU3RyIiwicmV2ZXJzZWRTdHIiLCJyZXZlcnNlZEFycmF5IiwiaW5wdXRBcnJheSIsIm1hcHBlZCIsImV4cHJlZk5vZGUiLCJtYXhFbGVtZW50IiwibG9jYWxlQ29tcGFyZSIsIm1pbkVsZW1lbnQiLCJsaXN0VG9TdW0iLCJqb2luQ2hhciIsImNvbnZlcnRlZFZhbHVlIiwic29ydGVkQXJyYXkiLCJyZXF1aXJlZFR5cGUiLCJkZWNvcmF0ZWQiLCJleHByQSIsImV4cHJCIiwibWF4UmVjb3JkIiwicmVzb2x2ZWRBcnJheSIsImtleUZ1bmN0aW9uIiwiY3JlYXRlS2V5RnVuY3Rpb24iLCJtYXhOdW1iZXIiLCJtaW5SZWNvcmQiLCJtaW5OdW1iZXIiLCJhbGxvd2VkVHlwZXMiLCJjb21waWxlIiwiODYiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsInRpdGxlIiwib2ZmIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiODciLCJyb290IiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJmcmVlR2xvYmFsIiwicHVueWNvZGUiLCJtYXhJbnQiLCJ0TWluIiwidE1heCIsInNrZXciLCJkYW1wIiwiaW5pdGlhbEJpYXMiLCJpbml0aWFsTiIsImRlbGltaXRlciIsInJlZ2V4UHVueWNvZGUiLCJyZWdleE5vbkFTQ0lJIiwicmVnZXhTZXBhcmF0b3JzIiwiYmFzZU1pbnVzVE1pbiIsInN0cmluZ0Zyb21DaGFyQ29kZSIsIm1hcERvbWFpbiIsInVjczJkZWNvZGUiLCJleHRyYSIsImNvdW50ZXIiLCJ1Y3MyZW5jb2RlIiwiZGlnaXRUb0Jhc2ljIiwiZmxhZyIsImFkYXB0IiwibnVtUG9pbnRzIiwiZmlyc3RUaW1lIiwiYmFzaWMiLCJvbGRpIiwiYmFzZU1pbnVzVCIsImlucHV0TGVuZ3RoIiwiYmlhcyIsImhhbmRsZWRDUENvdW50IiwiYmFzaWNMZW5ndGgiLCJjdXJyZW50VmFsdWUiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJxTWludXNUIiwiODgiLCJlcSIsInJlZ2V4cCIsIm1heEtleXMiLCJrc3RyIiwidnN0ciIsInhzIiwiODkiLCJzdHJpbmdpZnlQcmltaXRpdmUiLCJvYmplY3RLZXlzIiwia3MiLCI5MCIsIjkxIiwiOTIiLCI5MyIsIjk0IiwiY2xlYXJJbW1lZGlhdGUiLCJpbW1lZGlhdGVJZHMiLCJuZXh0SW1tZWRpYXRlSWQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsIl9vblRpbWVvdXQiLCI5NSIsInNsYXNoZXMiLCJzb3VyY2UiLCJyZWxhdGl2ZSIsInJlc29sdmVPYmplY3QiLCJwcm90b2NvbFBhdHRlcm4iLCJwb3J0UGF0dGVybiIsInVud2lzZSIsImF1dG9Fc2NhcGUiLCJub25Ib3N0Q2hhcnMiLCJob3N0RW5kaW5nQ2hhcnMiLCJob3N0bmFtZVBhcnRQYXR0ZXJuIiwiaG9zdG5hbWVQYXJ0U3RhcnQiLCJ1bnNhZmVQcm90b2NvbCIsImhvc3RsZXNzUHJvdG9jb2wiLCJzbGFzaGVkUHJvdG9jb2wiLCJwYXJzZVF1ZXJ5U3RyaW5nIiwic2xhc2hlc0Rlbm90ZUhvc3QiLCJpc051bGwiLCJyZXN0IiwicHJvdG8iLCJsb3dlclByb3RvIiwiYXRTaWduIiwiaG9zdEVuZCIsImhlYyIsInBhcnNlSG9zdCIsImlwdjZIb3N0bmFtZSIsImhvc3RwYXJ0cyIsIm5ld3BhcnQiLCJ2YWxpZFBhcnRzIiwibm90SG9zdCIsImJpdCIsImRvbWFpbkFycmF5IiwibmV3T3V0IiwiYWUiLCJlc2MiLCJxbSIsInJlbCIsInJlbFBhdGgiLCJpc1NvdXJjZUFicyIsImlzUmVsQWJzIiwibXVzdEVuZEFicyIsInJlbW92ZUFsbERvdHMiLCJzcmNQYXRoIiwicHN5Y2hvdGljIiwiYXV0aEluSG9zdCIsImxhc3QiLCJoYXNUcmFpbGluZ1NsYXNoIiwidXAiLCJpc0Fic29sdXRlIiwiOTYiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJUZW1wQ3RvciIsIjk3IiwiOTgiLCJmb3JtYXRSZWdFeHAiLCJvYmplY3RzIiwiZGVwcmVjYXRlIiwibm9EZXByZWNhdGlvbiIsInRocm93RGVwcmVjYXRpb24iLCJ0cmFjZURlcHJlY2F0aW9uIiwiZGVidWdFbnZpcm9uIiwiZGVidWdzIiwiY3R4Iiwic2VlbiIsInN0eWxpemUiLCJzdHlsaXplTm9Db2xvciIsImRlcHRoIiwiY29sb3JzIiwiaXNCb29sZWFuIiwic2hvd0hpZGRlbiIsIl9leHRlbmQiLCJjdXN0b21JbnNwZWN0Iiwic3R5bGl6ZVdpdGhDb2xvciIsImZvcm1hdFZhbHVlIiwic3R5bGVUeXBlIiwic3R5bGUiLCJzdHlsZXMiLCJyZWN1cnNlVGltZXMiLCJwcmltaXRpdmUiLCJzaW1wbGUiLCJmb3JtYXRQcmltaXRpdmUiLCJ2aXNpYmxlS2V5cyIsImFycmF5VG9IYXNoIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImZvcm1hdEVycm9yIiwiaXNSZWdFeHAiLCJpc0RhdGUiLCJicmFjZXMiLCJmb3JtYXRQcm9wZXJ0eSIsImZvcm1hdEFycmF5IiwicHJldiIsImN1ciIsIm51bUxpbmVzRXN0IiwicmVkdWNlVG9TaW5nbGVTdHJpbmciLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiYXIiLCJvYmplY3RUb1N0cmluZyIsImRlYnVnbG9nIiwiTk9ERV9ERUJVRyIsInBpZCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNTeW1ib2wiLCJpc1ByaW1pdGl2ZSIsIm1vbnRocyIsInRpbWVzdGFtcCIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNb250aCIsImluaGVyaXRzIiwib3JpZ2luIiwiOTkiLCJ2MSIsIjEwMCIsImJ5dGVUb0hleCIsImJ0aCIsIjEwMSIsImdldFJhbmRvbVZhbHVlcyIsIm1zQ3J5cHRvIiwicm5kczgiLCJybmRzIiwiMTAyIiwiX25vZGVJZCIsIl9jbG9ja3NlcSIsInJuZyIsImJ5dGVzVG9VdWlkIiwiX2xhc3RNU2VjcyIsIl9sYXN0TlNlY3MiLCJjbG9ja3NlcSIsInNlZWRCeXRlcyIsIm5zZWNzIiwiZHQiLCJ0bCIsInRtaCIsIjEwMyIsIjEwNCIsIkxSVV8xIiwiQ0FDSEVfU0laRSIsIm1heFNpemUiLCJjYWNoZSIsIkxSVUNhY2hlIiwia2V5U3RyaW5nIiwiZW5kcG9pbnRSZWNvcmQiLCJwb3B1bGF0ZVZhbHVlIiwicmVjb3JkcyIsIkV4cGlyZSIsImlkZW50aWZpZXJOYW1lcyIsImlkZW50aWZpZXJOYW1lIiwiZW1wdHkiLCIxMDUiLCJMaW5rZWRMaXN0Tm9kZSIsIm5vZGVNYXAiLCJzaXplTGltaXQiLCJwcmVwZW5kVG9MaXN0IiwiaGVhZGVyTm9kZSIsIm5leHQiLCJ0YWlsTm9kZSIsInJlbW92ZUZyb21UYWlsIiwicHJldk5vZGUiLCJkZXRhY2hGcm9tTGlzdCIsImtleV8xIiwibmV3Tm9kZSIsIjEwNiIsIndlYnBhY2tQb2x5ZmlsbCIsInBhdGhzIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFB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ZVosRUFBUSxTQUFVLENBQ3ZDYSxZQUFZLEVBQ1pDLElBQUssV0FDSixPQUFPZCxFQUFPRSxLQUdoQlMsT0FBT0MsZUFBZVosRUFBUSxLQUFNLENBQ25DYSxZQUFZLEVBQ1pDLElBQUssV0FDSixPQUFPZCxFQUFPQyxLQUdoQkQsRUFBT3FwRixnQkFBa0IsR0FFbkJycEYiLCJmaWxlIjoiYW1hem9uLWNvbm5lY3QtY2hhdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA1KTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIi8qIGdsb2JhbCB3aW5kb3csIGV4cG9ydHMsIGRlZmluZSAqL1xuXG4hZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnXG5cbiAgICB2YXIgcmUgPSB7XG4gICAgICAgIG5vdF9zdHJpbmc6IC9bXnNdLyxcbiAgICAgICAgbm90X2Jvb2w6IC9bXnRdLyxcbiAgICAgICAgbm90X3R5cGU6IC9bXlRdLyxcbiAgICAgICAgbm90X3ByaW1pdGl2ZTogL1tedl0vLFxuICAgICAgICBudW1iZXI6IC9bZGllZmddLyxcbiAgICAgICAgbnVtZXJpY19hcmc6IC9bYmNkaWVmZ3V4WF0vLFxuICAgICAgICBqc29uOiAvW2pdLyxcbiAgICAgICAgbm90X2pzb246IC9bXmpdLyxcbiAgICAgICAgdGV4dDogL15bXlxceDI1XSsvLFxuICAgICAgICBtb2R1bG86IC9eXFx4MjV7Mn0vLFxuICAgICAgICBwbGFjZWhvbGRlcjogL15cXHgyNSg/OihbMS05XVxcZCopXFwkfFxcKChbXildKylcXCkpPyhcXCspPygwfCdbXiRdKT8oLSk/KFxcZCspPyg/OlxcLihcXGQrKSk/KFtiLWdpam9zdFR1dnhYXSkvLFxuICAgICAgICBrZXk6IC9eKFthLXpfXVthLXpfXFxkXSopL2ksXG4gICAgICAgIGtleV9hY2Nlc3M6IC9eXFwuKFthLXpfXVthLXpfXFxkXSopL2ksXG4gICAgICAgIGluZGV4X2FjY2VzczogL15cXFsoXFxkKylcXF0vLFxuICAgICAgICBzaWduOiAvXlsrLV0vXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3ByaW50ZihrZXkpIHtcbiAgICAgICAgLy8gYGFyZ3VtZW50c2AgaXMgbm90IGFuIGFycmF5LCBidXQgc2hvdWxkIGJlIGZpbmUgZm9yIHRoaXMgY2FsbFxuICAgICAgICByZXR1cm4gc3ByaW50Zl9mb3JtYXQoc3ByaW50Zl9wYXJzZShrZXkpLCBhcmd1bWVudHMpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdnNwcmludGYoZm10LCBhcmd2KSB7XG4gICAgICAgIHJldHVybiBzcHJpbnRmLmFwcGx5KG51bGwsIFtmbXRdLmNvbmNhdChhcmd2IHx8IFtdKSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzcHJpbnRmX2Zvcm1hdChwYXJzZV90cmVlLCBhcmd2KSB7XG4gICAgICAgIHZhciBjdXJzb3IgPSAxLCB0cmVlX2xlbmd0aCA9IHBhcnNlX3RyZWUubGVuZ3RoLCBhcmcsIG91dHB1dCA9ICcnLCBpLCBrLCBwaCwgcGFkLCBwYWRfY2hhcmFjdGVyLCBwYWRfbGVuZ3RoLCBpc19wb3NpdGl2ZSwgc2lnblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdHJlZV9sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJzZV90cmVlW2ldID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIG91dHB1dCArPSBwYXJzZV90cmVlW2ldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgcGFyc2VfdHJlZVtpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBwaCA9IHBhcnNlX3RyZWVbaV0gLy8gY29udmVuaWVuY2UgcHVycG9zZXMgb25seVxuICAgICAgICAgICAgICAgIGlmIChwaC5rZXlzKSB7IC8vIGtleXdvcmQgYXJndW1lbnRcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndltjdXJzb3JdXG4gICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBwaC5rZXlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJnID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihzcHJpbnRmKCdbc3ByaW50Zl0gQ2Fubm90IGFjY2VzcyBwcm9wZXJ0eSBcIiVzXCIgb2YgdW5kZWZpbmVkIHZhbHVlIFwiJXNcIicsIHBoLmtleXNba10sIHBoLmtleXNbay0xXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmdbcGgua2V5c1trXV1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwaC5wYXJhbV9ubykgeyAvLyBwb3NpdGlvbmFsIGFyZ3VtZW50IChleHBsaWNpdClcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndltwaC5wYXJhbV9ub11cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IC8vIHBvc2l0aW9uYWwgYXJndW1lbnQgKGltcGxpY2l0KVxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd2W2N1cnNvcisrXVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZS5ub3RfdHlwZS50ZXN0KHBoLnR5cGUpICYmIHJlLm5vdF9wcmltaXRpdmUudGVzdChwaC50eXBlKSAmJiBhcmcgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcoKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZS5udW1lcmljX2FyZy50ZXN0KHBoLnR5cGUpICYmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyAmJiBpc05hTihhcmcpKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHNwcmludGYoJ1tzcHJpbnRmXSBleHBlY3RpbmcgbnVtYmVyIGJ1dCBmb3VuZCAlVCcsIGFyZykpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJlLm51bWJlci50ZXN0KHBoLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzX3Bvc2l0aXZlID0gYXJnID49IDBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBoLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYic6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwYXJzZUludChhcmcsIDEwKS50b1N0cmluZygyKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGFyZywgMTApKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2knOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGFyc2VJbnQoYXJnLCAxMClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2onOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gSlNPTi5zdHJpbmdpZnkoYXJnLCBudWxsLCBwaC53aWR0aCA/IHBhcnNlSW50KHBoLndpZHRoKSA6IDApXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBoLnByZWNpc2lvbiA/IHBhcnNlRmxvYXQoYXJnKS50b0V4cG9uZW50aWFsKHBoLnByZWNpc2lvbikgOiBwYXJzZUZsb2F0KGFyZykudG9FeHBvbmVudGlhbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBoLnByZWNpc2lvbiA/IHBhcnNlRmxvYXQoYXJnKS50b0ZpeGVkKHBoLnByZWNpc2lvbikgOiBwYXJzZUZsb2F0KGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGgucHJlY2lzaW9uID8gU3RyaW5nKE51bWJlcihhcmcudG9QcmVjaXNpb24ocGgucHJlY2lzaW9uKSkpIDogcGFyc2VGbG9hdChhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdvJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwYXJzZUludChhcmcsIDEwKSA+Pj4gMCkudG9TdHJpbmcoOClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gU3RyaW5nKGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwaC5wcmVjaXNpb24gPyBhcmcuc3Vic3RyaW5nKDAsIHBoLnByZWNpc2lvbikgOiBhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IFN0cmluZyghIWFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwaC5wcmVjaXNpb24gPyBhcmcuc3Vic3RyaW5nKDAsIHBoLnByZWNpc2lvbikgOiBhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdUJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGgucHJlY2lzaW9uID8gYXJnLnN1YnN0cmluZygwLCBwaC5wcmVjaXNpb24pIDogYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwYXJzZUludChhcmcsIDEwKSA+Pj4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndic6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGgucHJlY2lzaW9uID8gYXJnLnN1YnN0cmluZygwLCBwaC5wcmVjaXNpb24pIDogYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAneCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGFyc2VJbnQoYXJnLCAxMCkgPj4+IDApLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnWCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGFyc2VJbnQoYXJnLCAxMCkgPj4+IDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmUuanNvbi50ZXN0KHBoLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBhcmdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZS5udW1iZXIudGVzdChwaC50eXBlKSAmJiAoIWlzX3Bvc2l0aXZlIHx8IHBoLnNpZ24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduID0gaXNfcG9zaXRpdmUgPyAnKycgOiAnLSdcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy50b1N0cmluZygpLnJlcGxhY2UocmUuc2lnbiwgJycpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduID0gJydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYWRfY2hhcmFjdGVyID0gcGgucGFkX2NoYXIgPyBwaC5wYWRfY2hhciA9PT0gJzAnID8gJzAnIDogcGgucGFkX2NoYXIuY2hhckF0KDEpIDogJyAnXG4gICAgICAgICAgICAgICAgICAgIHBhZF9sZW5ndGggPSBwaC53aWR0aCAtIChzaWduICsgYXJnKS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgcGFkID0gcGgud2lkdGggPyAocGFkX2xlbmd0aCA+IDAgPyBwYWRfY2hhcmFjdGVyLnJlcGVhdChwYWRfbGVuZ3RoKSA6ICcnKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBwaC5hbGlnbiA/IHNpZ24gKyBhcmcgKyBwYWQgOiAocGFkX2NoYXJhY3RlciA9PT0gJzAnID8gc2lnbiArIHBhZCArIGFyZyA6IHBhZCArIHNpZ24gKyBhcmcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXRcbiAgICB9XG5cbiAgICB2YXIgc3ByaW50Zl9jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuICAgIGZ1bmN0aW9uIHNwcmludGZfcGFyc2UoZm10KSB7XG4gICAgICAgIGlmIChzcHJpbnRmX2NhY2hlW2ZtdF0pIHtcbiAgICAgICAgICAgIHJldHVybiBzcHJpbnRmX2NhY2hlW2ZtdF1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfZm10ID0gZm10LCBtYXRjaCwgcGFyc2VfdHJlZSA9IFtdLCBhcmdfbmFtZXMgPSAwXG4gICAgICAgIHdoaWxlIChfZm10KSB7XG4gICAgICAgICAgICBpZiAoKG1hdGNoID0gcmUudGV4dC5leGVjKF9mbXQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcnNlX3RyZWUucHVzaChtYXRjaFswXSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChtYXRjaCA9IHJlLm1vZHVsby5leGVjKF9mbXQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcnNlX3RyZWUucHVzaCgnJScpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgobWF0Y2ggPSByZS5wbGFjZWhvbGRlci5leGVjKF9mbXQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaFsyXSkge1xuICAgICAgICAgICAgICAgICAgICBhcmdfbmFtZXMgfD0gMVxuICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGRfbGlzdCA9IFtdLCByZXBsYWNlbWVudF9maWVsZCA9IG1hdGNoWzJdLCBmaWVsZF9tYXRjaCA9IFtdXG4gICAgICAgICAgICAgICAgICAgIGlmICgoZmllbGRfbWF0Y2ggPSByZS5rZXkuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKHJlcGxhY2VtZW50X2ZpZWxkID0gcmVwbGFjZW1lbnRfZmllbGQuc3Vic3RyaW5nKGZpZWxkX21hdGNoWzBdLmxlbmd0aCkpICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZmllbGRfbWF0Y2ggPSByZS5rZXlfYWNjZXNzLmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChmaWVsZF9tYXRjaCA9IHJlLmluZGV4X2FjY2Vzcy5leGVjKHJlcGxhY2VtZW50X2ZpZWxkKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfbGlzdC5wdXNoKGZpZWxkX21hdGNoWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdbc3ByaW50Zl0gZmFpbGVkIHRvIHBhcnNlIG5hbWVkIGFyZ3VtZW50IGtleScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdbc3ByaW50Zl0gZmFpbGVkIHRvIHBhcnNlIG5hbWVkIGFyZ3VtZW50IGtleScpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0gPSBmaWVsZF9saXN0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcmdfbmFtZXMgfD0gMlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYXJnX25hbWVzID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW3NwcmludGZdIG1peGluZyBwb3NpdGlvbmFsIGFuZCBuYW1lZCBwbGFjZWhvbGRlcnMgaXMgbm90ICh5ZXQpIHN1cHBvcnRlZCcpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcGFyc2VfdHJlZS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogbWF0Y2hbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbV9ubzogICAgbWF0Y2hbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlzOiAgICAgICAgbWF0Y2hbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduOiAgICAgICAgbWF0Y2hbM10sXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRfY2hhcjogICAgbWF0Y2hbNF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbjogICAgICAgbWF0Y2hbNV0sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogICAgICAgbWF0Y2hbNl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVjaXNpb246ICAgbWF0Y2hbN10sXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAgICAgICAgbWF0Y2hbOF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignW3NwcmludGZdIHVuZXhwZWN0ZWQgcGxhY2Vob2xkZXInKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2ZtdCA9IF9mbXQuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3ByaW50Zl9jYWNoZVtmbXRdID0gcGFyc2VfdHJlZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGV4cG9ydCB0byBlaXRoZXIgYnJvd3NlciBvciBub2RlLmpzXG4gICAgICovXG4gICAgLyogZXNsaW50LWRpc2FibGUgcXVvdGUtcHJvcHMgKi9cbiAgICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGV4cG9ydHNbJ3NwcmludGYnXSA9IHNwcmludGZcbiAgICAgICAgZXhwb3J0c1sndnNwcmludGYnXSA9IHZzcHJpbnRmXG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3aW5kb3dbJ3NwcmludGYnXSA9IHNwcmludGZcbiAgICAgICAgd2luZG93Wyd2c3ByaW50ZiddID0gdnNwcmludGZcblxuICAgICAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbJ2FtZCddKSB7XG4gICAgICAgICAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgJ3NwcmludGYnOiBzcHJpbnRmLFxuICAgICAgICAgICAgICAgICAgICAndnNwcmludGYnOiB2c3ByaW50ZlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBxdW90ZS1wcm9wcyAqL1xufSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4iLCJjbGFzcyBWYWx1ZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gXCJWYWx1ZUVycm9yXCI7XG4gICAgY29uc29sZS5sb2coXCJFWENFUFRJT046IFwiICsgdGhpcy5uYW1lICsgXCIgTUVTU0FHRTogXCIgKyB0aGlzLm1lc3NhZ2UpO1xuICB9XG59XG5cbmNsYXNzIFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24gZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSBcIlVuSW1wbGVtZW50ZWRNZXRob2RcIjtcbiAgICBjb25zb2xlLmxvZyhcIkVYQ0VQVElPTjogXCIgKyB0aGlzLm5hbWUgKyBcIiBNRVNTQUdFOiBcIiArIHRoaXMubWVzc2FnZSk7XG4gIH1cbn1cblxuY2xhc3MgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBhcmd1bWVudCkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiSWxsZWdhbEFyZ3VtZW50XCI7XG4gICAgdGhpcy5hcmd1bWVudCA9IGFyZ3VtZW50O1xuICAgIGNvbnNvbGUubG9nKFwiRVhDRVBUSU9OOiBcIiArIHRoaXMubmFtZSArIFwiIE1FU1NBR0U6IFwiICsgdGhpcy5tZXNzYWdlKTtcbiAgfVxufVxuXG5jbGFzcyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24gZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSBcIklsbGVnYWxTdGF0ZVwiO1xuICAgIGNvbnNvbGUubG9nKFwiRVhDRVBUSU9OOiBcIiArIHRoaXMubmFtZSArIFwiIE1FU1NBR0U6IFwiICsgdGhpcy5tZXNzYWdlKTtcbiAgfVxufVxuXG5jbGFzcyBJbGxlZ2FsSnNvbkV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgYXJncykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiSWxsZWdhbFN0YXRlXCI7XG4gICAgdGhpcy5jYXVzZUV4Y2VwdGlvbiA9IGFyZ3MuY2F1c2VFeGNlcHRpb247XG4gICAgdGhpcy5vcmlnaW5hbEpzb25TdHJpbmcgPSBhcmdzLm9yaWdpbmFsSnNvblN0cmluZztcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIFwiRVhDRVBUSU9OOiBcIiArXG4gICAgICAgIHRoaXMubmFtZSArXG4gICAgICAgIFwiIE1FU1NBR0U6IFwiICtcbiAgICAgICAgdGhpcy5tZXNzYWdlICtcbiAgICAgICAgXCIgY2F1c2U6IFwiICtcbiAgICAgICAgdGhpcy5jYXVzZUV4Y2VwdGlvblxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgVW5JbXBsZW1lbnRlZE1ldGhvZEV4Y2VwdGlvbixcbiAgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uLFxuICBJbGxlZ2FsU3RhdGVFeGNlcHRpb24sXG4gIElsbGVnYWxKc29uRXhjZXB0aW9uLFxuICBWYWx1ZUVycm9yXG59O1xuIiwidmFyIG1ha2VIdHRwUmVxdWVzdCA9IChvYmosIHN1Y2Nlc3MsIGZhaWx1cmUpID0+IHtcbiAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICB4aHIub3BlbihvYmoubWV0aG9kIHx8IFwiR0VUXCIsIG9iai51cmwpO1xuICBpZiAob2JqLmhlYWRlcnMpIHtcbiAgICBPYmplY3Qua2V5cyhvYmouaGVhZGVycykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCBvYmouaGVhZGVyc1trZXldKTtcbiAgICB9KTtcbiAgfVxuICB4aHIub25sb2FkID0gKCkgPT4ge1xuICAgIGlmICh4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwKSB7XG4gICAgICBzdWNjZXNzKHhocik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZhaWx1cmUoeGhyKTtcbiAgICB9XG4gIH07XG4gIHhoci5vbmVycm9yID0gKCkgPT4gZmFpbHVyZSh4aHIpO1xuICB4aHIuc2VuZChvYmouYm9keSk7XG59O1xuXG5leHBvcnQgeyBtYWtlSHR0cFJlcXVlc3QgfTtcbiIsImNsYXNzIEdsb2JhbENvbmZpZ0ltcGwge1xuICB1cGRhdGUoY29uZmlnSW5wdXQpIHtcbiAgICB2YXIgY29uZmlnID0gY29uZmlnSW5wdXQgfHwge307XG4gICAgdGhpcy5yZWdpb24gPSBjb25maWcucmVnaW9uIHx8IHRoaXMucmVnaW9uO1xuICAgIHRoaXMuZW5kcG9pbnRPdmVycmlkZSA9IGNvbmZpZy5lbmRwb2ludCB8fCB0aGlzLmVuZHBvaW50T3ZlcnJpZGU7XG4gICAgdGhpcy5yZWNvbm5lY3QgPSBjb25maWcucmVjb25uZWN0ID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcbiAgfVxuXG4gIGdldFJlZ2lvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZWdpb247XG4gIH1cblxuICBnZXRFbmRwb2ludE92ZXJyaWRlKCkge1xuICAgIHJldHVybiB0aGlzLmVuZHBvaW50T3ZlcnJpZGU7XG4gIH1cbn1cblxuY29uc3QgR2xvYmFsQ29uZmlnID0gbmV3IEdsb2JhbENvbmZpZ0ltcGwoKTtcblxuZXhwb3J0IHsgR2xvYmFsQ29uZmlnIH07XG4iLCIvL1BsYWNlaG9sZGVyXG5leHBvcnQgY29uc3QgQ0hBVF9DT05GSUdVUkFUSU9OUyA9IHtcbiAgQ09OQ1VSUkVOVF9DSEFUUzogMTBcbn07XG5cbmV4cG9ydCBjb25zdCBQQVJUSUNJUEFOVF9UT0tFTl9IRUFERVIgPSBcIngtYW16bi1jb25uZWN0LXBhcnRpY2lwYW50LXRva2VuXCI7XG5leHBvcnQgY29uc3QgQVVUSF9IRUFERVIgPSBcIlgtQW16LUJlYXJlclwiO1xuXG5leHBvcnQgY29uc3QgUkVTT1VSQ0VfUEFUSCA9IHtcbiAgQ09OTkVDVElPTl9ERVRBSUxTOiBcIi9jb250YWN0L2NoYXQvcGFydGljaXBhbnQvY29ubmVjdGlvbi1kZXRhaWxzXCIsXG4gIE1FU1NBR0U6IFwiL3BhcnRpY2lwYW50L21lc3NhZ2VcIixcbiAgVFJBTlNDUklQVDogXCIvcGFydGljaXBhbnQvdHJhbnNjcmlwdFwiLFxuICBFVkVOVDogXCIvcGFydGljaXBhbnQvZXZlbnRcIixcbiAgRElTQ09OTkVDVDogXCIvcGFydGljaXBhbnQvZGlzY29ubmVjdFwiLFxuICBQQVJUSUNJUEFOVF9DT05ORUNUSU9OOiBcIi9wYXJ0aWNpcGFudC9jb25uZWN0aW9uXCJcbn07XG5cbmV4cG9ydCBjb25zdCBIVFRQX01FVEhPRFMgPSB7XG4gIFBPU1Q6IFwicG9zdFwiXG59O1xuXG5leHBvcnQgY29uc3QgUkVHSU9OX0NPTkZJRyA9IHtcbiAgXCJ1cy13ZXN0LTJcIjoge1xuICAgIGludm9rZVVybDogXCJodHRwczovL2VhcDF3OTNqMGsuZXhlY3V0ZS1hcGkudXMtd2VzdC0yLmFtYXpvbmF3cy5jb20vcHJvZFwiXG4gIH0sXG4gIFwidXMtZWFzdC0xXCI6IHtcbiAgICBpbnZva2VVcmw6IFwiaHR0cHM6Ly80YWdjanVzeDNrLmV4ZWN1dGUtYXBpLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tL3Byb2RcIlxuICB9LFxuICBcImFwLXNvdXRoZWFzdC0yXCI6IHtcbiAgICBpbnZva2VVcmw6XG4gICAgICBcImh0dHBzOi8vdjR1OG9xMGN2ZS5leGVjdXRlLWFwaS5hcC1zb3V0aGVhc3QtMi5hbWF6b25hd3MuY29tL3Byb2RcIlxuICB9LFxuICBcImFwLW5vcnRoZWFzdC0xXCI6IHtcbiAgICBpbnZva2VVcmw6XG4gICAgICBcImh0dHBzOi8vM2ZpZHVuZnl6Ny5leGVjdXRlLWFwaS5hcC1ub3J0aGVhc3QtMS5hbWF6b25hd3MuY29tL3Byb2RcIlxuICB9LFxuICBcImV1LWNlbnRyYWwtMVwiOiB7XG4gICAgaW52b2tlVXJsOiBcImh0dHBzOi8vMWd5bmFhcm0zZS5leGVjdXRlLWFwaS5ldS1jZW50cmFsLTEuYW1hem9uYXdzLmNvbS9wcm9kXCJcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IE1RVFRfQ09OU1RBTlRTID0ge1xuICBLRUVQX0FMSVZFOiAzMCxcbiAgQ09OTkVDVF9USU1FT1VUOiA2MFxufTtcblxuZXhwb3J0IGNvbnN0IFNFU1NJT05fVFlQRVMgPSB7XG4gIEFHRU5UOiBcIkFHRU5UXCIsXG4gIENVU1RPTUVSOiBcIkNVU1RPTUVSXCJcbn07XG5cbmV4cG9ydCBjb25zdCBDSEFUX0VWRU5UUyA9IHtcbiAgSU5DT01JTkdfTUVTU0FHRTogXCJJTkNPTUlOR19NRVNTQUdFXCIsXG4gIElOQ09NSU5HX1RZUElORzogXCJJTkNPTUlOR19UWVBJTkdcIixcbiAgQ09OTkVDVElPTl9FU1RBQkxJU0hFRDogXCJDT05ORUNUSU9OX0VTVEFCTElTSEVEXCIsXG4gIENPTk5FQ1RJT05fTE9TVDogXCJDT05ORUNUSU9OX0xPU1RcIixcbiAgQ09OTkVDVElPTl9CUk9LRU46IFwiQ09OTkVDVElPTl9CUk9LRU5cIixcbiAgQ09OTkVDVElPTl9BQ0s6IFwiQ09OTkVDVElPTl9BQ0tcIlxufTtcblxuZXhwb3J0IGNvbnN0IENPTlRFTlRfVFlQRSA9IHtcbiAgdGV4dFBsYWluOiBcInRleHQvcGxhaW5cIixcbiAgY29ubmVjdGlvbkFja25vd2xlZGdlZDogXCJhcHBsaWNhdGlvbi92bmQuYW1hem9uLmNvbm5lY3QuZXZlbnQuY29ubmVjdGlvbi5hY2tub3dsZWRnZWRcIixcbiAgdHlwaW5nOiBcImFwcGxpY2F0aW9uL3ZuZC5hbWF6b25hd3MuY29ubmVjdC5ldmVudC50eXBpbmdcIixcbiAgcGFydGljaXBhbnRKb2luZWQ6IFwiYXBwbGljYXRpb24vdm5kLmFtYXpvbmF3cy5jb25uZWN0LmV2ZW50LnBhcnRpY2lwYW50LmpvaW5lZFwiLFxuICBwYXJ0aWNpcGFudExlZnQ6IFwiYXBwbGljYXRpb24vdm5kLmFtYXpvbmF3cy5jb25uZWN0LmV2ZW50LnBhcnRpY2lwYW50LmxlZnRcIixcbiAgdHJhbnNmZXJTdWNjZWVkZWQ6IFwiYXBwbGljYXRpb24vdm5kLmFtYXpvbmF3cy5jb25uZWN0LmV2ZW50LnRyYW5zZmVyLnN1Y2NlZWRlZFwiLFxuICB0cmFuc2ZlckZhaWxlZDogXCJhcHBsaWNhdGlvbi92bmQuYW1hem9uYXdzLmNvbm5lY3QuZXZlbnQudHJhbnNmZXIuZmFpbGVkXCIsXG4gIGNoYXRFbmRlZDogXCJhcHBsaWNhdGlvbi92bmQuYW1hem9uYXdzLmNvbm5lY3QuZXZlbnQuY2hhdC5lbmRlZFwiXG59O1xuXG5leHBvcnQgY29uc3QgRVZFTlQgPSBcIkVWRU5UXCI7XG5leHBvcnQgY29uc3QgTUVTU0FHRSA9IFwiTUVTU0FHRVwiO1xuXG5leHBvcnQgY29uc3QgVFJBTlNDUklQVF9ERUZBVUxUX1BBUkFNUyA9IHtcbiAgTUFYX1JFU1VMVFM6IDE1LFxuICBTT1JUX09SREVSOiBcIkFTQ0VORElOR1wiLFxuICBTQ0FOX0RJUkVDVElPTjogXCJCQUNLV0FSRFwiXG59O1xuXG5leHBvcnQgY29uc3QgTE9HU19ERVNUSU5BVElPTiA9IHtcbiAgTlVMTDogXCJOVUxMXCIsXG4gIENMSUVOVF9MT0dHRVI6IFwiQ0xJRU5UX0xPR0dFUlwiLFxuICBERUJVRzogXCJERUJVR1wiXG59O1xuXG5leHBvcnQgY29uc3QgUkVHSU9OUyA9IHtcbiAgcGR4OiBcInVzLXdlc3QtMlwiLFxuICBpYWQ6IFwidXMtZWFzdC0xXCIsXG4gIHN5ZDogXCJhcC1zb3V0aGVhc3QtMlwiLFxuICBucnQ6IFwiYXAtbm9ydGhlYXN0LTFcIixcbiAgZnJhOiBcImV1LWNlbnRyYWwtMVwiXG59O1xuXG5leHBvcnQgY29uc3QgQUdFTlRfUkVDT05ORUNUX0NPTkZJRyA9IHtcbiAgaW50ZXJ2YWw6IDMwMDAsXG4gIG1heFJldHJpZXM6IDVcbn07XG5cbmV4cG9ydCBjb25zdCBDVVNUT01FUl9SRUNPTk5FQ1RfQ09ORklHID0ge1xuICBpbnRlcnZhbDogMzAwMCxcbiAgbWF4UmV0cmllczogNVxufTtcblxuZXhwb3J0IGNvbnN0IENPTk5FQ1RJT05fVE9LRU5fUE9MTElOR19JTlRFUlZBTCA9IDEwMDAgKiA2MCAqIDYwICogMTI7XG5cbmV4cG9ydCBjb25zdCBUUkFOU1BPUlRfTElGRVRJTUVfSU5fU0VDT05EUyA9IDcxNDA7IC8vIDExOSBtaW5zXG4iLCJpbXBvcnQgeyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gfSBmcm9tIFwiLi9jb3JlL2V4Y2VwdGlvbnNcIjtcbmltcG9ydCB7IFZhbHVlRXJyb3IgfSBmcm9tIFwiLi9jb3JlL2V4Y2VwdGlvbnNcIjtcbmltcG9ydCB7IHNwcmludGYgfSBmcm9tIFwic3ByaW50Zi1qc1wiO1xuY29uc3QgVXRpbHMgPSB7fTtcblxuLyoqXG4gKiBBc3NlcnRzIHRoYXQgYSBwcmVtaXNlIGlzIHRydWUuXG4gKi9cblV0aWxzLmFzc2VydFRydWUgPSBmdW5jdGlvbihwcmVtaXNlLCBtZXNzYWdlKSB7XG4gIGlmICghcHJlbWlzZSkge1xuICAgIHRocm93IG5ldyBWYWx1ZUVycm9yKG1lc3NhZ2UpO1xuICB9XG59O1xuXG4vKipcbiAqIEFzc2VydHMgdGhhdCBhIHZhbHVlIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZC5cbiAqL1xuVXRpbHMuYXNzZXJ0Tm90TnVsbCA9IGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gIFV0aWxzLmFzc2VydFRydWUoXG4gICAgdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgc3ByaW50ZihcIiVzIG11c3QgYmUgcHJvdmlkZWRcIiwgbmFtZSB8fCBcIkEgdmFsdWVcIilcbiAgKTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuVXRpbHMubm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbn07XG5cblV0aWxzLmlzU3RyaW5nID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbn07XG5cbi8qKlxuICogR2VuZXJhdGUgYSByYW5kb20gSUQgY29uc2lzdGluZyBvZiB0aGUgY3VycmVudCB0aW1lc3RhbXBcbiAqIGFuZCBhIHJhbmRvbSBiYXNlLTM2IG51bWJlciBiYXNlZCBvbiBNYXRoLnJhbmRvbSgpLlxuICovXG5VdGlscy5yYW5kb21JZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gc3ByaW50ZihcbiAgICBcIiVzLSVzXCIsXG4gICAgVXRpbHMubm93KCksXG4gICAgTWF0aC5yYW5kb20oKVxuICAgICAgLnRvU3RyaW5nKDM2KVxuICAgICAgLnNsaWNlKDIpXG4gICk7XG59O1xuXG5VdGlscy5hc3NlcnRJc05vbkVtcHR5U3RyaW5nID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oa2V5ICsgXCIgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyFcIik7XG4gIH1cbn07XG5cblV0aWxzLmFzc2VydElzTGlzdCA9IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oa2V5ICsgXCIgaXMgbm90IGFuIGFycmF5XCIpO1xuICB9XG59O1xuXG5VdGlscy5hc3NlcnRJc0VudW0gPSBmdW5jdGlvbih2YWx1ZSwgYWxsb3dlZFZhbHVlcywga2V5KSB7XG4gIHZhciBpO1xuICBmb3IgKGkgPSAwOyBpIDwgYWxsb3dlZFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhbGxvd2VkVmFsdWVzW2ldID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKFxuICAgIGtleSArIFwiIHBhc3NlZCBpcyBub3QgdmFsaWQuIFwiICsgXCJBbGxvd2VkIHZhbHVlcyBhcmU6IFwiICsgYWxsb3dlZFZhbHVlc1xuICApO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhbiBlbnVtIGZyb20gdGhlIGdpdmVuIGxpc3Qgb2YgbG93ZXItY2FzZSBlbnVtIHZhbHVlcyxcbiAqIHdoZXJlIHRoZSBlbnVtIGtleXMgd2lsbCBiZSB1cHBlciBjYXNlLlxuICpcbiAqIENvbnZlcnNpb24gZnJvbSBwYXNjYWwgY2FzZSBiYXNlZCBvbiBjb2RlIGZyb20gaGVyZTpcbiAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzA1MjEyMjRcbiAqL1xuVXRpbHMubWFrZUVudW0gPSBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIGVudW1PYmogPSB7fTtcblxuICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBrZXkgPSB2YWx1ZVxuICAgICAgLnJlcGxhY2UoL1xcLj8oW2Etel0rKV8/L2csIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIHkudG9VcHBlckNhc2UoKSArIFwiX1wiO1xuICAgICAgfSlcbiAgICAgIC5yZXBsYWNlKC9fJC8sIFwiXCIpO1xuXG4gICAgZW51bU9ialtrZXldID0gdmFsdWU7XG4gIH0pO1xuXG4gIHJldHVybiBlbnVtT2JqO1xufTtcblxuVXRpbHMuY29udGFpbnMgPSBmdW5jdGlvbihvYmosIHZhbHVlKSB7XG4gIGlmIChvYmogaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHJldHVybiAoXG4gICAgICBVdGlscy5maW5kKG9iaiwgZnVuY3Rpb24odikge1xuICAgICAgICByZXR1cm4gdiA9PT0gdmFsdWU7XG4gICAgICB9KSAhPT0gbnVsbFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlIGluIG9iajtcbiAgfVxufTtcblxuVXRpbHMuZmluZCA9IGZ1bmN0aW9uKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIgeCA9IDA7IHggPCBhcnJheS5sZW5ndGg7IHgrKykge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbeF0pKSB7XG4gICAgICByZXR1cm4gYXJyYXlbeF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5VdGlscy5jb250YWluc1ZhbHVlID0gZnVuY3Rpb24ob2JqLCB2YWx1ZSkge1xuICBpZiAob2JqIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgVXRpbHMuZmluZChvYmosIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgcmV0dXJuIHYgPT09IHZhbHVlO1xuICAgICAgfSkgIT09IG51bGxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXG4gICAgICBVdGlscy5maW5kKFV0aWxzLnZhbHVlcyhvYmopLCBmdW5jdGlvbih2KSB7XG4gICAgICAgIHJldHVybiB2ID09PSB2YWx1ZTtcbiAgICAgIH0pICE9PSBudWxsXG4gICAgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgY2FsbGFibGUgZnVuY3Rpb24gdHlwZS5cbiAqIEJvcnJvd2VkIGZyb20gVW5kZXJzY29yZS5qcy5cbiAqL1xuVXRpbHMuaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKG9iaikge1xuICByZXR1cm4gISEob2JqICYmIG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY2FsbCAmJiBvYmouYXBwbHkpO1xufTtcblxuLyoqXG4gKiBHZXQgYSBsaXN0IG9mIHZhbHVlcyBmcm9tIGEgSmF2YXNjcmlwdCBvYmplY3QgdXNlZFxuICogYXMgYSBoYXNoIG1hcC5cbiAqL1xuVXRpbHMudmFsdWVzID0gZnVuY3Rpb24obWFwKSB7XG4gIHZhciB2YWx1ZXMgPSBbXTtcblxuICBVdGlscy5hc3NlcnROb3ROdWxsKG1hcCwgXCJtYXBcIik7XG5cbiAgZm9yICh2YXIgayBpbiBtYXApIHtcbiAgICB2YWx1ZXMucHVzaChtYXBba10pO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlcztcbn07XG5cblV0aWxzLmlzT2JqZWN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuICEodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlID09PSBudWxsKTtcbn07XG5cblV0aWxzLmFzc2VydElzT2JqZWN0ID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICBpZiAoIVV0aWxzLmlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oa2V5ICsgXCIgaXMgbm90IGFuIG9iamVjdCFcIik7XG4gIH1cbn07XG5cblV0aWxzLmRlbGF5ID0gKG1zKSA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcblxuVXRpbHMuYXN5bmNXaGlsZUludGVydmFsID0gZnVuY3Rpb24oZiwgcHJlZGljYXRlLCBpbnRlcnZhbCwgY291bnQ9MCwgZXJyb3I9bnVsbCkge1xuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICBpZiAocHJlZGljYXRlKGNvdW50KSkge1xuICAgIHJldHVybiBmKGNvdW50KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgY29uc3QgZGVsYXkgPSBNYXRoLm1heCgwLCBpbnRlcnZhbCAtIChuZXcgRGF0ZSgpKS52YWx1ZU9mKCkgKyBub3cudmFsdWVPZigpKTtcbiAgICAgIHJldHVybiBVdGlsc1xuICAgICAgICAuZGVsYXkoZGVsYXkpXG4gICAgICAgIC50aGVuKCgpID0+IFV0aWxzLmFzeW5jV2hpbGVJbnRlcnZhbChmLCBwcmVkaWNhdGUsIGludGVydmFsLCBjb3VudCArIDEsIGUpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IgfHwgbmV3IEVycm9yKFwiYXN5bmMgd2hpbGUgYWJvcnRlZFwiKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFV0aWxzO1xuIiwiaW1wb3J0IFV0aWxzIGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBMT0dTX0RFU1RJTkFUSU9OIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMqL1xuY2xhc3MgTG9nZ2VyIHtcbiAgZGVidWcoZGF0YSkge31cblxuICBpbmZvKGRhdGEpIHt9XG5cbiAgd2FybihkYXRhKSB7fVxuXG4gIGVycm9yKGRhdGEpIHt9XG59XG4vKmVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMqL1xuXG5jb25zdCBMb2dMZXZlbCA9IHtcbiAgREVCVUc6IDEwLFxuICBJTkZPOiAyMCxcbiAgV0FSTjogMzAsXG4gIEVSUk9SOiA0MFxufTtcblxuY2xhc3MgTG9nTWFuYWdlckltcGwge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnVwZGF0ZUxvZ2dlckNvbmZpZygpO1xuICAgIHRoaXMuY29uc29sZUxvZ2dlcldyYXBwZXIgPSBjcmVhdGVDb25zb2xlTG9nZ2VyKCk7XG4gIH1cblxuICB3cml0ZVRvQ2xpZW50TG9nZ2VyKGxldmVsLCBsb2dTdGF0ZW1lbnQpIHtcbiAgICBpZiAoIXRoaXMuaGFzQ2xpZW50TG9nZ2VyKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpdGNoIChsZXZlbCkge1xuICAgICAgY2FzZSBMb2dMZXZlbC5ERUJVRzpcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudExvZ2dlci5kZWJ1Zyhsb2dTdGF0ZW1lbnQpO1xuICAgICAgY2FzZSBMb2dMZXZlbC5JTkZPOlxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50TG9nZ2VyLmluZm8obG9nU3RhdGVtZW50KTtcbiAgICAgIGNhc2UgTG9nTGV2ZWwuV0FSTjpcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudExvZ2dlci53YXJuKGxvZ1N0YXRlbWVudCk7XG4gICAgICBjYXNlIExvZ0xldmVsLkVSUk9SOlxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50TG9nZ2VyLmVycm9yKGxvZ1N0YXRlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgaXNMZXZlbEVuYWJsZWQobGV2ZWwpIHtcbiAgICByZXR1cm4gbGV2ZWwgPj0gdGhpcy5fbGV2ZWw7XG4gIH1cblxuICBoYXNDbGllbnRMb2dnZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudExvZ2dlciAhPT0gbnVsbDtcbiAgfVxuXG4gIGdldExvZ2dlcihvcHRpb25zKSB7XG4gICAgdmFyIHByZWZpeCA9IG9wdGlvbnMucHJlZml4IHx8IFwiXCI7XG4gICAgaWYgKHRoaXMuX2xvZ3NEZXN0aW5hdGlvbiA9PT0gTE9HU19ERVNUSU5BVElPTi5ERUJVRykge1xuICAgICAgcmV0dXJuIHRoaXMuY29uc29sZUxvZ2dlcldyYXBwZXI7XG4gICAgfVxuICAgIHJldHVybiBuZXcgTG9nZ2VyV3JhcHBlckltcGwocHJlZml4KTtcbiAgfVxuXG4gIHVwZGF0ZUxvZ2dlckNvbmZpZyhpbnB1dENvbmZpZykge1xuICAgIHZhciBjb25maWcgPSBpbnB1dENvbmZpZyB8fCB7fTtcbiAgICB0aGlzLl9sZXZlbCA9IGNvbmZpZy5sZXZlbCB8fCBMb2dMZXZlbC5JTkZPO1xuICAgIHRoaXMuX2NsaWVudExvZ2dlciA9IGNvbmZpZy5sb2dnZXIgfHwgbnVsbDtcbiAgICB0aGlzLl9sb2dzRGVzdGluYXRpb24gPSBMT0dTX0RFU1RJTkFUSU9OLk5VTEw7XG4gICAgaWYgKGNvbmZpZy5kZWJ1Zykge1xuICAgICAgdGhpcy5fbG9nc0Rlc3RpbmF0aW9uID0gTE9HU19ERVNUSU5BVElPTi5ERUJVRztcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5sb2dnZXIpIHtcbiAgICAgIHRoaXMuX2xvZ3NEZXN0aW5hdGlvbiA9IExPR1NfREVTVElOQVRJT04uQ0xJRU5UX0xPR0dFUjtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgTG9nZ2VyV3JhcHBlciB7XG4gIGRlYnVnKCkge31cblxuICBpbmZvKCkge31cblxuICB3YXJuKCkge31cblxuICBlcnJvcigpIHt9XG59XG5cbmNsYXNzIExvZ2dlcldyYXBwZXJJbXBsIGV4dGVuZHMgTG9nZ2VyV3JhcHBlciB7XG4gIGNvbnN0cnVjdG9yKHByZWZpeCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5wcmVmaXggPSBwcmVmaXggfHwgXCJcIjtcbiAgfVxuXG4gIGRlYnVnKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9sb2coTG9nTGV2ZWwuREVCVUcsIGFyZ3MpO1xuICB9XG5cbiAgaW5mbyguLi5hcmdzKSB7XG4gICAgdGhpcy5fbG9nKExvZ0xldmVsLklORk8sIGFyZ3MpO1xuICB9XG5cbiAgd2FybiguLi5hcmdzKSB7XG4gICAgdGhpcy5fbG9nKExvZ0xldmVsLldBUk4sIGFyZ3MpO1xuICB9XG5cbiAgZXJyb3IoLi4uYXJncykge1xuICAgIHRoaXMuX2xvZyhMb2dMZXZlbC5FUlJPUiwgYXJncyk7XG4gIH1cblxuICBfc2hvdWxkTG9nKGxldmVsKSB7XG4gICAgcmV0dXJuIExvZ01hbmFnZXIuaGFzQ2xpZW50TG9nZ2VyKCkgJiYgTG9nTWFuYWdlci5pc0xldmVsRW5hYmxlZChsZXZlbCk7XG4gIH1cblxuICBfd3JpdGVUb0NsaWVudExvZ2dlcihsZXZlbCwgbG9nU3RhdGVtZW50KSB7XG4gICAgTG9nTWFuYWdlci53cml0ZVRvQ2xpZW50TG9nZ2VyKGxldmVsLCBsb2dTdGF0ZW1lbnQpO1xuICB9XG5cbiAgX2xvZyhsZXZlbCwgYXJncykge1xuICAgIGlmICh0aGlzLl9zaG91bGRMb2cobGV2ZWwpKSB7XG4gICAgICB2YXIgbG9nU3RhdGVtZW50ID0gdGhpcy5fY29udmVydFRvU2luZ2xlU3RhdGVtZW50KGFyZ3MpO1xuICAgICAgdGhpcy5fd3JpdGVUb0NsaWVudExvZ2dlcihsZXZlbCwgbG9nU3RhdGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBfY29udmVydFRvU2luZ2xlU3RhdGVtZW50KGFyZ3MpIHtcbiAgICB2YXIgbG9nU3RhdGVtZW50ID0gXCJcIjtcbiAgICBpZiAodGhpcy5wcmVmaXgpIHtcbiAgICAgIGxvZ1N0YXRlbWVudCArPSB0aGlzLnByZWZpeCArIFwiIFwiO1xuICAgIH1cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgYXJncy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBhcmcgPSBhcmdzW2luZGV4XTtcbiAgICAgIGxvZ1N0YXRlbWVudCArPSB0aGlzLl9jb252ZXJ0VG9TdHJpbmcoYXJnKSArIFwiIFwiO1xuICAgIH1cbiAgICByZXR1cm4gbG9nU3RhdGVtZW50O1xuICB9XG5cbiAgX2NvbnZlcnRUb1N0cmluZyhhcmcpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFhcmcpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICB9XG4gICAgICBpZiAoVXRpbHMuaXNTdHJpbmcoYXJnKSkge1xuICAgICAgICByZXR1cm4gYXJnO1xuICAgICAgfVxuICAgICAgaWYgKFV0aWxzLmlzT2JqZWN0KGFyZykgJiYgVXRpbHMuaXNGdW5jdGlvbihhcmcudG9TdHJpbmcpKSB7XG4gICAgICAgIHZhciB0b1N0cmluZ1Jlc3VsdCA9IGFyZy50b1N0cmluZygpO1xuICAgICAgICBpZiAodG9TdHJpbmdSZXN1bHQgIT09IFwiW29iamVjdCBPYmplY3RdXCIpIHtcbiAgICAgICAgICByZXR1cm4gdG9TdHJpbmdSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igd2hpbGUgY29udmVydGluZyBhcmd1bWVudCB0byBzdHJpbmdcIiwgYXJnLCBlcnJvcik7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gIH1cbn1cblxudmFyIGNyZWF0ZUNvbnNvbGVMb2dnZXIgPSAoKSA9PiB7XG4gIHZhciBsb2dnZXIgPSBuZXcgTG9nZ2VyV3JhcHBlcigpO1xuICBsb2dnZXIuZGVidWcgPSBjb25zb2xlLmRlYnVnLmJpbmQod2luZG93LmNvbnNvbGUpO1xuICBsb2dnZXIuaW5mbyA9IGNvbnNvbGUuaW5mby5iaW5kKHdpbmRvdy5jb25zb2xlKTtcbiAgbG9nZ2VyLndhcm4gPSBjb25zb2xlLndhcm4uYmluZCh3aW5kb3cuY29uc29sZSk7XG4gIGxvZ2dlci5lcnJvciA9IGNvbnNvbGUuZXJyb3IuYmluZCh3aW5kb3cuY29uc29sZSk7XG4gIHJldHVybiBsb2dnZXI7XG59O1xuXG5jb25zdCBMb2dNYW5hZ2VyID0gbmV3IExvZ01hbmFnZXJJbXBsKCk7XG5cbmV4cG9ydCB7IExvZ01hbmFnZXIsIExvZ2dlciwgTG9nTGV2ZWwgfTtcbiIsImltcG9ydCB7IFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24gfSBmcm9tIFwiLi4vY29yZS9leGNlcHRpb25zXCI7XG5pbXBvcnQgeyBtYWtlSHR0cFJlcXVlc3QgfSBmcm9tIFwiLi9YbWxIdHRwQ2xpZW50XCI7XG5pbXBvcnQgeyBHbG9iYWxDb25maWcgfSBmcm9tIFwiLi4vZ2xvYmFsQ29uZmlnXCI7XG5pbXBvcnQge1xuICBSRVNPVVJDRV9QQVRILFxuICBIVFRQX01FVEhPRFMsXG4gIFJFR0lPTl9DT05GSUcsXG4gIFJFR0lPTlMsXG4gIFBBUlRJQ0lQQU5UX1RPS0VOX0hFQURFUlxufSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBMb2dNYW5hZ2VyIH0gZnJvbSBcIi4uL2xvZ1wiO1xuaW1wb3J0IHsgQ29ubmVjdFBhcnRpY2lwYW50IH0gZnJvbSBcIi4vYXdzLWNsaWVudFwiO1xuXG5jbGFzcyBDaGF0Q2xpZW50RmFjdG9yeUltcGwge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNsaWVudENhY2hlID0ge307XG4gIH1cblxuICBnZXRDYWNoZWRDbGllbnQob3B0aW9uc0lucHV0KSB7XG4gICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zSW5wdXQpO1xuICAgIHZhciByZWdpb24gPSBvcHRpb25zSW5wdXQucmVnaW9uIHx8IEdsb2JhbENvbmZpZy5nZXRSZWdpb24oKSB8fCBSRUdJT05TLnBkeDtcbiAgICBvcHRpb25zLnJlZ2lvbiA9IHJlZ2lvbjtcbiAgICBpZiAodGhpcy5jbGllbnRDYWNoZVtyZWdpb25dKSB7XG4gICAgICByZXR1cm4gdGhpcy5jbGllbnRDYWNoZVtyZWdpb25dO1xuICAgIH1cbiAgICB2YXIgY2xpZW50ID0gdGhpcy5fY3JlYXRlQXdzQ2xpZW50KG9wdGlvbnMpO1xuICAgIHRoaXMuY2xpZW50Q2FjaGVbcmVnaW9uXSA9IGNsaWVudDtcbiAgICByZXR1cm4gY2xpZW50O1xuICB9XG5cbiAgX2NyZWF0ZUF3c0NsaWVudChvcHRpb25zKSB7XG4gICAgdmFyIHJlZ2lvbiA9IG9wdGlvbnMucmVnaW9uO1xuICAgIHZhciBlbmRwb2ludE92ZXJyaWRlID0gR2xvYmFsQ29uZmlnLmdldEVuZHBvaW50T3ZlcnJpZGUoKTtcbiAgICB2YXIgc3RhZ2VDb25maWcgPSBSRUdJT05fQ09ORklHW3JlZ2lvbl07XG4gICAgaWYgKGVuZHBvaW50T3ZlcnJpZGUpIHtcbiAgICAgIHN0YWdlQ29uZmlnLmludm9rZVVybCA9IGVuZHBvaW50T3ZlcnJpZGU7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQVdTQ2hhdENsaWVudCh7XG4gICAgICBlbmRwb2ludDogc3RhZ2VDb25maWcuaW52b2tlVXJsLFxuICAgICAgcmVnaW9uOiByZWdpb25cbiAgICB9KTtcbiAgfVxufVxuXG4vKmVzbGludC1kaXNhYmxlKi9cbmNsYXNzIENoYXRDbGllbnQge1xuICBzZW5kTWVzc2FnZShwYXJ0aWNpcGFudFRva2VuLCBtZXNzYWdlLCB0eXBlKSB7XG4gICAgdGhyb3cgbmV3IFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24oXCJzZW5kVGV4dE1lc3NhZ2UgaW4gQ2hhdENsaWVudFwiKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RQYXJ0aWNpcGFudChwYXJ0aWNpcGFudFRva2VuKSB7XG4gICAgdGhyb3cgbmV3IFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24oXCJkaXNjb25uZWN0UGFydGljaXBhbnQgaW4gQ2hhdENsaWVudFwiKTtcbiAgfVxuXG4gIHNlbmRFdmVudChjb25uZWN0aW9uVG9rZW4sIGNvbnRlbnRUeXBlLCBjb250ZW50KSB7XG4gICAgdGhyb3cgbmV3IFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24oXCJzZW5kRXZlbnQgaW4gQ2hhdENsaWVudFwiKTtcbiAgfVxuXG4gIGNyZWF0ZUNvbm5lY3Rpb25EZXRhaWxzKHBhcnRpY2lwYW50VG9rZW4pIHtcbiAgICB0aHJvdyBuZXcgVW5JbXBsZW1lbnRlZE1ldGhvZEV4Y2VwdGlvbihcInJlY29ubmVjdENoYXQgaW4gQ2hhdENsaWVudFwiKTtcbiAgfVxuXG4gIGNyZWF0ZVBhcnRpY2lwYW50Q29ubmVjdGlvbihwYXJ0aWNpcGFudFRva2VuLCB0eXBlKSB7XG4gICAgdGhyb3cgbmV3IFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24oXCJjcmVhdGVDb25uZWN0aW9uIGluIENoYXRDbGllbnRcIik7XG4gIH1cbn1cbi8qZXNsaW50LWVuYWJsZSovXG5cbnZhciBjcmVhdGVEZWZhdWx0SGVhZGVycyA9ICgpID0+ICh7XG4gIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiXG59KTtcblxuY2xhc3MgQVdTQ2hhdENsaWVudCBleHRlbmRzIENoYXRDbGllbnQge1xuICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB2YXIgY3JlZHMgPSBuZXcgQVdTLkNyZWRlbnRpYWxzKCcnLCcnKTtcbiAgICB2YXIgY29uZmlnID0gbmV3IEFXUy5Db25maWcoe1xuICAgICAgcmVnaW9uOiBhcmdzLnJlZ2lvbixcbiAgICAgIGVuZHBvaW50OiBhcmdzLmVuZHBvaW50LFxuICAgICAgY3JlZGVudGlhbHM6IGNyZWRzXG4gICAgfSk7XG4gICAgdGhpcy5jaGF0Q2xpZW50ID0gbmV3IEFXUy5Db25uZWN0UGFydGljaXBhbnQoY29uZmlnKTtcbiAgICB0aGlzLmNhbGxIdHRwQ2xpZW50ID0gbWFrZUh0dHBSZXF1ZXN0O1xuICAgIHRoaXMuaW52b2tlVXJsID0gYXJncy5lbmRwb2ludDtcbiAgICB0aGlzLmxvZ2dlciA9IExvZ01hbmFnZXIuZ2V0TG9nZ2VyKHsgcHJlZml4OiBcIkNoYXRDbGllbnRcIiB9KTtcbiAgfVxuXG4gIGNyZWF0ZVBhcnRpY2lwYW50Q29ubmVjdGlvbihwYXJ0aWNpcGFudFRva2VuLCB0eXBlKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgVHlwZTogdHlwZSxcbiAgICAgICAgUGFydGljaXBhbnRUb2tlbjogcGFydGljaXBhbnRUb2tlblxuICAgICAgfTtcbiAgICAgIHZhciBjcmVhdGVQYXJ0aWNpcGFudENvbm5lY3Rpb25SZXF1ZXN0ID0gc2VsZi5jaGF0Q2xpZW50LmNyZWF0ZVBhcnRpY2lwYW50Q29ubmVjdGlvbihcbiAgICAgICAgcGFyYW1zXG4gICAgICApO1xuICAgICAgcmV0dXJuIHNlbGYuX3NlbmRSZXF1ZXN0KGNyZWF0ZVBhcnRpY2lwYW50Q29ubmVjdGlvblJlcXVlc3QpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKFwic3VjY2Vzc2Z1bGx5IGNyZWF0ZSBjb25uZWN0aW9uIHJlcXVlc3RcIik7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKFwiZXJyb3Igd2hlbiBjcmVhdGluZyBjb25uZWN0aW9uIHJlcXVlc3RcIik7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gIH1cblxuICBkaXNjb25uZWN0UGFydGljaXBhbnQoY29ubmVjdGlvblRva2VuKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgQ29ubmVjdGlvblRva2VuOiBjb25uZWN0aW9uVG9rZW5cbiAgICAgIH07XG5cbiAgICAgIHZhciBkaXNjb25uZWN0UGFydGljaXBhbnRSZXF1ZXN0ID0gc2VsZi5jaGF0Q2xpZW50LmRpc2Nvbm5lY3RQYXJ0aWNpcGFudChcbiAgICAgICAgcGFyYW1zXG4gICAgICApO1xuICAgICAgcmV0dXJuIHNlbGYuX3NlbmRSZXF1ZXN0KGRpc2Nvbm5lY3RQYXJ0aWNpcGFudFJlcXVlc3QpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKFwic3VjY2Vzc2Z1bGx5IGRpc2Nvbm5lY3QgcGFydGljaXBhbnRcIik7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKFwiZXJyb3Igd2hlbiBkaXNjb25uZWN0aW5nIHBhcnRpY2lwYW50XCIpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZ2V0VHJhbnNjcmlwdChjb25uZWN0aW9uVG9rZW4sIGFyZ3MpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHtcbiAgICBNYXhSZXN1bHRzOiBhcmdzLm1heFJlc3VsdHMsXG4gICAgTmV4dFRva2VuOiBhcmdzLm5leHRUb2tlbixcbiAgICBTY2FuRGlyZWN0aW9uOiBhcmdzLnNjYW5EaXJlY3Rpb24sXG4gICAgU29ydE9yZGVyOiBhcmdzLnNvcnRPcmRlcixcbiAgICBTdGFydFBvc2l0aW9uOiB7XG4gICAgICBJZDogYXJncy5zdGFydFBvc2l0aW9uLmlkLFxuICAgICAgQWJzb2x1dGVUaW1lOiBhcmdzLnN0YXJ0UG9zaXRpb24uYWJzb2x1dGVUaW1lLFxuICAgICAgTW9zdFJlY2VudDogYXJncy5zdGFydFBvc2l0aW9uLm1vc3RSZWNlbnRcbiAgICB9LFxuICAgIENvbm5lY3Rpb25Ub2tlbjogY29ubmVjdGlvblRva2VuXG4gICAgfTtcbiAgICBpZiAoYXJncy5jb250YWN0SWQpIHtcbiAgICAgIHBhcmFtcy5Db250YWN0SWQgPSBhcmdzLmNvbnRhY3RJZDtcbiAgICB9XG4gICAgdmFyIGdldFRyYW5zY3JpcHRSZXF1ZXN0ID0gc2VsZi5jaGF0Q2xpZW50LmdldFRyYW5zY3JpcHQocGFyYW1zKTtcbiAgICByZXR1cm4gc2VsZi5fc2VuZFJlcXVlc3QoZ2V0VHJhbnNjcmlwdFJlcXVlc3QpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgc2VsZi5sb2dnZXIuaW5mbyhcInN1Y2Nlc3NmdWxseSBnZXQgdHJhbnNjcmlwdFwiKTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoXCJlcnJvciB3aGVuIGdldHRpbmcgdHJhbnNjcmlwdFwiKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgIH0pO1xuICB9XG5cbiAgc2VuZE1lc3NhZ2UoY29ubmVjdGlvblRva2VuLCBjb250ZW50LCBjb250ZW50VHlwZSkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIENvbnRlbnQ6IGNvbnRlbnQsXG4gICAgICAgIENvbnRlbnRUeXBlOiBjb250ZW50VHlwZSxcbiAgICAgICAgQ29ubmVjdGlvblRva2VuOiBjb25uZWN0aW9uVG9rZW5cbiAgICAgIH07XG4gICAgICB2YXIgc2VuZE1lc3NhZ2VSZXF1ZXN0ID0gc2VsZi5jaGF0Q2xpZW50LnNlbmRNZXNzYWdlKHBhcmFtcyk7XG4gICAgICByZXR1cm4gc2VsZi5fc2VuZFJlcXVlc3Qoc2VuZE1lc3NhZ2VSZXF1ZXN0KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhcInN1Y2Nlc3NmdWxseSBzZW5kIG1lc3NhZ2VcIik7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKFwiZXJyb3Igd2hlbiBzZW5kaW5nIG1lc3NhZ2VcIik7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gIH1cblxuICBzZW5kRXZlbnQoY29ubmVjdGlvblRva2VuLCBjb250ZW50VHlwZSwgY29udGVudCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIENvbm5lY3Rpb25Ub2tlbjogY29ubmVjdGlvblRva2VuLFxuICAgICAgICBDb250ZW50VHlwZTogY29udGVudFR5cGUsXG4gICAgICAgIENvbnRlbnQ6IGNvbnRlbnRcbiAgICAgIH07XG4gICAgICB2YXIgc2VuZEV2ZW50UmVxdWVzdCA9IHNlbGYuY2hhdENsaWVudC5zZW5kRXZlbnQocGFyYW1zKTtcbiAgICAgIHJldHVybiBzZWxmLl9zZW5kUmVxdWVzdChzZW5kRXZlbnRSZXF1ZXN0KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhcInN1Y2Nlc3NmdWxseSBzZW5kIGV2ZW50XCIpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihcImVycm9yIHdoZW4gc2VuZGluZyBldmVudFwiKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgfVxuXG4gIF9zZW5kUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHJlcXVlc3RcbiAgICAgICAgLm9uKFwic3VjY2Vzc1wiLCBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICByZXNvbHZlKHJlcyk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcImVycm9yXCIsIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KVxuICAgICAgICAuc2VuZCgpO1xuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlQ29ubmVjdGlvbkRldGFpbHMocGFydGljaXBhbnRUb2tlbikge1xuICAgIHZhciByZXF1ZXN0SW5wdXQgPSB7XG4gICAgICBtZXRob2Q6IEhUVFBfTUVUSE9EUy5QT1NULFxuICAgICAgaGVhZGVyczoge30sXG4gICAgICB1cmw6IHRoaXMuaW52b2tlVXJsICsgUkVTT1VSQ0VfUEFUSC5DT05ORUNUSU9OX0RFVEFJTFMsXG4gICAgICBib2R5OiB7fVxuICAgIH07XG4gICAgcmVxdWVzdElucHV0LmhlYWRlcnNbUEFSVElDSVBBTlRfVE9LRU5fSEVBREVSXSA9IHBhcnRpY2lwYW50VG9rZW47XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxIdHRwQ2xpZW50KHJlcXVlc3RJbnB1dCk7XG4gIH1cblxuICBfY2FsbEh0dHBDbGllbnQocmVxdWVzdElucHV0KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJlcXVlc3RJbnB1dC5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIGNyZWF0ZURlZmF1bHRIZWFkZXJzKCksXG4gICAgICByZXF1ZXN0SW5wdXQuaGVhZGVyc1xuICAgICk7XG4gICAgcmVxdWVzdElucHV0LmJvZHkgPSBKU09OLnN0cmluZ2lmeShyZXF1ZXN0SW5wdXQuYm9keSk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHN1Y2Nlc3MgPSByZXF1ZXN0ID0+IHtcbiAgICAgICAgdmFyIHJlc3BvbnNlT2JqZWN0ID0ge307XG4gICAgICAgIHJlc3BvbnNlT2JqZWN0LmRhdGEgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgcmVzb2x2ZShyZXNwb25zZU9iamVjdCk7XG4gICAgICB9O1xuICAgICAgdmFyIGZhaWx1cmUgPSByZXF1ZXN0ID0+IHtcbiAgICAgICAgdmFyIGVycm9yT2JqZWN0ID0ge307XG4gICAgICAgIGVycm9yT2JqZWN0LnN0YXR1c1RleHQgPSByZXF1ZXN0LnN0YXR1c1RleHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZXJyb3JPYmplY3QuZXJyb3IgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm4oXCJpbnZhbGlkIGpzb24gZXJyb3IgZnJvbSBzZXJ2ZXJcIik7XG4gICAgICAgICAgZXJyb3JPYmplY3QuZXJyb3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdChlcnJvck9iamVjdCk7XG4gICAgICB9O1xuICAgICAgc2VsZi5jYWxsSHR0cENsaWVudChyZXF1ZXN0SW5wdXQsIHN1Y2Nlc3MsIGZhaWx1cmUpO1xuICAgIH0pO1xuICB9XG59XG5cbnZhciBDaGF0Q2xpZW50RmFjdG9yeSA9IG5ldyBDaGF0Q2xpZW50RmFjdG9yeUltcGwoKTtcbmV4cG9ydCB7IENoYXRDbGllbnRGYWN0b3J5IH07XG4iLCJpbXBvcnQgVXRpbHMgZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gfSBmcm9tIFwiLi9leGNlcHRpb25zXCI7XG5pbXBvcnQgeyBDT05URU5UX1RZUEUgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmNsYXNzIENoYXRDb250cm9sbGVyQXJnc1ZhbGlkYXRvciB7XG4gIC8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMqL1xuICB2YWxpZGF0ZU5ld0NvbnRyb2xsZXJEZXRhaWxzKGNoYXREZXRhaWxzKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyplc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzKi9cblxuICB2YWxpZGF0ZVNlbmRNZXNzYWdlKGFyZ3MpIHtcbiAgICBpZiAoIVV0aWxzLmlzU3RyaW5nKGFyZ3MubWVzc2FnZSkpIHtcbiAgICAgIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oYXJncy5tZXNzYWdlICsgXCJpcyBub3QgYSB2YWxpZCBtZXNzYWdlXCIpO1xuICAgIH1cbiAgICB0aGlzLnZhbGlkYXRlQ29udGVudFR5cGUoYXJncy5jb250ZW50VHlwZSk7XG4gIH1cblxuICB2YWxpZGF0ZUNvbnRlbnRUeXBlKGNvbnRlbnRUeXBlKSB7XG4gICAgVXRpbHMuYXNzZXJ0SXNFbnVtKGNvbnRlbnRUeXBlLCBPYmplY3QudmFsdWVzKENPTlRFTlRfVFlQRSksIFwiY29udGVudFR5cGVcIik7IFxuICB9XG5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG4gIHZhbGlkYXRlQ29ubmVjdENoYXQoYXJncykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyovXG5cbiAgdmFsaWRhdGVMb2dnZXIobG9nZ2VyKSB7XG4gICAgVXRpbHMuYXNzZXJ0SXNPYmplY3QobG9nZ2VyLCBcImxvZ2dlclwiKTtcbiAgICBbXCJkZWJ1Z1wiLCBcImluZm9cIiwgXCJ3YXJuXCIsIFwiZXJyb3JcIl0uZm9yRWFjaChtZXRob2ROYW1lID0+IHtcbiAgICAgIGlmICghVXRpbHMuaXNGdW5jdGlvbihsb2dnZXJbbWV0aG9kTmFtZV0pKSB7XG4gICAgICAgIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oXG4gICAgICAgICAgbWV0aG9kTmFtZSArXG4gICAgICAgICAgICBcIiBzaG91bGQgYmUgYSB2YWxpZCBmdW5jdGlvbiBvbiB0aGUgcGFzc2VkIGxvZ2dlciBvYmplY3QhXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhbGlkYXRlU2VuZEV2ZW50KGFyZ3MpIHtcbiAgICB0aGlzLnZhbGlkYXRlQ29udGVudFR5cGUoYXJncy5jb250ZW50VHlwZSk7XG4gIH1cblxuICAvLyBUT0RPOiBOb3Qgc3VyZSBhYm91dCB0aGlzIEFQSS5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG4gIHZhbGlkYXRlR2V0TWVzc2FnZXMoYXJncykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyovXG59XG5cbmNsYXNzIENoYXRTZXJ2aWNlQXJnc1ZhbGlkYXRvciBleHRlbmRzIENoYXRDb250cm9sbGVyQXJnc1ZhbGlkYXRvciB7XG4gIHZhbGlkYXRlQ2hhdERldGFpbHMoY2hhdERldGFpbHMpIHtcbiAgICBVdGlscy5hc3NlcnRJc09iamVjdChjaGF0RGV0YWlscywgXCJjaGF0RGV0YWlsc1wiKTtcbiAgICBVdGlscy5hc3NlcnRJc05vbkVtcHR5U3RyaW5nKFxuICAgICAgY2hhdERldGFpbHMuY29udGFjdElkLFxuICAgICAgXCJjaGF0RGV0YWlscy5jb250YWN0SWRcIlxuICAgICk7XG4gICAgVXRpbHMuYXNzZXJ0SXNOb25FbXB0eVN0cmluZyhcbiAgICAgIGNoYXREZXRhaWxzLnBhcnRpY2lwYW50SWQsXG4gICAgICBcImNoYXREZXRhaWxzLnBhcnRpY2lwYW50SWRcIlxuICAgICk7XG4gICAgaWYgKGNoYXREZXRhaWxzLmNvbm5lY3Rpb25EZXRhaWxzKSB7XG4gICAgICBVdGlscy5hc3NlcnRJc09iamVjdChcbiAgICAgICAgY2hhdERldGFpbHMuY29ubmVjdGlvbkRldGFpbHMsXG4gICAgICAgIFwiY2hhdERldGFpbHMuY29ubmVjdGlvbkRldGFpbHNcIlxuICAgICAgKTtcbiAgICAgIFV0aWxzLmFzc2VydElzTm9uRW1wdHlTdHJpbmcoXG4gICAgICAgIGNoYXREZXRhaWxzLmNvbm5lY3Rpb25EZXRhaWxzLlByZVNpZ25lZENvbm5lY3Rpb25VcmwsXG4gICAgICAgIFwiY2hhdERldGFpbHMuY29ubmVjdGlvbkRldGFpbHMuUHJlU2lnbmVkQ29ubmVjdGlvblVybFwiXG4gICAgICApO1xuICAgICAgVXRpbHMuYXNzZXJ0SXNOb25FbXB0eVN0cmluZyhcbiAgICAgICAgY2hhdERldGFpbHMuY29ubmVjdGlvbkRldGFpbHMuQ29ubmVjdGlvbklkLFxuICAgICAgICBcImNoYXREZXRhaWxzLmNvbm5lY3Rpb25EZXRhaWxzLkNvbm5lY3Rpb25JZFwiXG4gICAgICApO1xuICAgICAgVXRpbHMuYXNzZXJ0SXNOb25FbXB0eVN0cmluZyhcbiAgICAgICAgY2hhdERldGFpbHMuY29ubmVjdGlvbkRldGFpbHMuY29ubmVjdGlvblRva2VuLFxuICAgICAgICBcImNoYXREZXRhaWxzLmNvbm5lY3Rpb25EZXRhaWxzLmNvbm5lY3Rpb25Ub2tlblwiXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBVdGlscy5hc3NlcnRJc05vbkVtcHR5U3RyaW5nKFxuICAgICAgICBjaGF0RGV0YWlscy5wYXJ0aWNpcGFudFRva2VuLFxuICAgICAgICBcImNoYXREZXRhaWxzLnBhcnRpY2lwYW50VG9rZW5cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB2YWxpZGF0ZUluaXRpYXRlQ2hhdFJlc3BvbnNlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCB7IENoYXRTZXJ2aWNlQXJnc1ZhbGlkYXRvciB9O1xuIiwiaW1wb3J0IHsgQ09OTkVDVElPTl9UT0tFTl9QT0xMSU5HX0lOVEVSVkFMIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCBDb25uZWN0aW9uSGVscGVyU3RhdHVzID0ge1xuICBOZXZlclN0YXJ0ZWQ6IFwiTmV2ZXJTdGFydGVkXCIsXG4gIFN0YXJ0aW5nOiBcIlN0YXJ0aW5nXCIsXG4gIENvbm5lY3RlZDogXCJDb25uZWN0ZWRcIixcbiAgQ29ubmVjdGlvbkxvc3Q6IFwiQ29ubmVjdGlvbkxvc3RcIixcbiAgRW5kZWQ6IFwiRW5kZWRcIlxufTtcblxuY29uc3QgQ29ubmVjdGlvbkhlbHBlckV2ZW50cyA9IHtcbiAgQ29ubmVjdGlvbkxvc3Q6IFwiQ29ubmVjdGlvbkxvc3RcIiwgLy8gZXZlbnQgZGF0YSBpczoge3JlYXNvbjogLi4ufVxuICBDb25uZWN0aW9uR2FpbmVkOiBcIkNvbm5lY3Rpb25HYWluZWRcIiwgLy8gZXZlbnQgZGF0YSBpczoge3JlYXNvbjogLi4ufVxuICBFbmRlZDogXCJFbmRlZFwiLCAvLyBldmVudCBkYXRhIGlzOiB7cmVhc29uOiAuLi59XG4gIEluY29taW5nTWVzc2FnZTogXCJJbmNvbWluZ01lc3NhZ2VcIiAvLyBldmVudCBkYXRhIGlzOiB7cGF5bG9hZFN0cmluZzogLi4ufVxufTtcblxuY29uc3QgQ29ubmVjdGlvblR5cGUgPSB7XG4gIElPVDogJ0lPVCcsXG4gIExQQzogJ0xQQydcbn07XG5cbmNvbnN0IENvbm5lY3Rpb25JbmZvVHlwZSA9IHtcbiAgV0VCU09DS0VUOiBcIldFQlNPQ0tFVFwiLFxuICBDT05ORUNUSU9OX0NSRURFTlRJQUxTOiBcIkNPTk5FQ1RJT05fQ1JFREVOVElBTFNcIlxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZUNvbm5lY3Rpb25IZWxwZXIge1xuICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyKSB7XG4gICAgdGhpcy5jb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyID0gY29ubmVjdGlvbkRldGFpbHNQcm92aWRlcjtcbiAgICB0aGlzLmlzU3RhcnRlZCA9IGZhbHNlO1xuICB9XG5cbiAgc3RhcnRDb25uZWN0aW9uVG9rZW5Qb2xsaW5nKCkge1xuICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzUHJvdmlkZXIuZmV0Y2hDb25uZWN0aW9uVG9rZW4oKTtcbiAgICB9LCBDT05ORUNUSU9OX1RPS0VOX1BPTExJTkdfSU5URVJWQUwpO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgaWYgKHRoaXMuaXNTdGFydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaXNTdGFydGVkID0gdHJ1ZTtcbiAgICB0aGlzLnN0YXJ0Q29ubmVjdGlvblRva2VuUG9sbGluZygpO1xuICB9XG5cbiAgZW5kKCkge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XG4gIH1cblxuICBnZXRDb25uZWN0aW9uVG9rZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbkRldGFpbHNQcm92aWRlci5jb25uZWN0aW9uVG9rZW47XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgQ29ubmVjdGlvbkhlbHBlclN0YXR1cyxcbiAgQ29ubmVjdGlvbkhlbHBlckV2ZW50cyxcbiAgQ29ubmVjdGlvblR5cGUsXG4gIENvbm5lY3Rpb25JbmZvVHlwZVxufTtcbiIsImltcG9ydCBVdGlscyBmcm9tIFwiLi4vdXRpbHNcIjtcblxuY29uc3QgQUxMX0VWRU5UUyA9IFwiPDxhbGw+PlwiO1xuXG4vKipcbiAqIEFuIG9iamVjdCByZXByZXNlbnRpbmcgYW4gZXZlbnQgc3Vic2NyaXB0aW9uIGluIGFuIEV2ZW50QnVzLlxuICovXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24oc3ViTWFwLCBldmVudE5hbWUsIGYpIHtcbiAgdGhpcy5zdWJNYXAgPSBzdWJNYXA7XG4gIHRoaXMuaWQgPSBVdGlscy5yYW5kb21JZCgpO1xuICB0aGlzLmV2ZW50TmFtZSA9IGV2ZW50TmFtZTtcbiAgdGhpcy5mID0gZjtcbn07XG5cbi8qKlxuICogVW5zdWJzY3JpYmUgdGhlIGhhbmRsZXIgb2YgdGhpcyBzdWJzY3JpcHRpb24gZnJvbSB0aGUgRXZlbnRCdXNcbiAqIGZyb20gd2hpY2ggaXQgd2FzIGNyZWF0ZWQuXG4gKi9cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdWJNYXAudW5zdWJzY3JpYmUodGhpcy5ldmVudE5hbWUsIHRoaXMuaWQpO1xufTtcblxuLyoqXG4gKiBBIG1hcCBvZiBldmVudCBzdWJzY3JpcHRpb25zLCB1c2VkIGJ5IHRoZSBFdmVudEJ1cy5cbiAqL1xudmFyIFN1YnNjcmlwdGlvbk1hcCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnN1YklkTWFwID0ge307XG4gIHRoaXMuc3ViRXZlbnROYW1lTWFwID0ge307XG59O1xuXG4vKipcbiAqIEFkZCBhIHN1YnNjcmlwdGlvbiBmb3IgdGhlIG5hbWVkIGV2ZW50LiAgQ3JlYXRlcyBhIG5ldyBTdWJzY3JpcHRpb25cbiAqIG9iamVjdCBhbmQgcmV0dXJucyBpdC4gIFRoaXMgb2JqZWN0IGNhbiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlLlxuICovXG5TdWJzY3JpcHRpb25NYXAucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgZikge1xuICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLCBldmVudE5hbWUsIGYpO1xuXG4gIHRoaXMuc3ViSWRNYXBbc3ViLmlkXSA9IHN1YjtcbiAgdmFyIHN1Ykxpc3QgPSB0aGlzLnN1YkV2ZW50TmFtZU1hcFtldmVudE5hbWVdIHx8IFtdO1xuICBzdWJMaXN0LnB1c2goc3ViKTtcbiAgdGhpcy5zdWJFdmVudE5hbWVNYXBbZXZlbnROYW1lXSA9IHN1Ykxpc3Q7XG4gIHJldHVybiAoKSA9PiBzdWIudW5zdWJzY3JpYmUoKTtcbn07XG5cbi8qKlxuICogVW5zdWJzY3JpYmUgYSBzdWJzY3JpcHRpb24gbWF0Y2hpbmcgdGhlIGdpdmVuIGV2ZW50IG5hbWUgYW5kIGlkLlxuICovXG5TdWJzY3JpcHRpb25NYXAucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24oZXZlbnROYW1lLCBzdWJJZCkge1xuICBpZiAoVXRpbHMuY29udGFpbnModGhpcy5zdWJFdmVudE5hbWVNYXAsIGV2ZW50TmFtZSkpIHtcbiAgICB0aGlzLnN1YkV2ZW50TmFtZU1hcFtldmVudE5hbWVdID0gdGhpcy5zdWJFdmVudE5hbWVNYXBbZXZlbnROYW1lXS5maWx0ZXIoXG4gICAgICBmdW5jdGlvbihzKSB7XG4gICAgICAgIHJldHVybiBzLmlkICE9PSBzdWJJZDtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKHRoaXMuc3ViRXZlbnROYW1lTWFwW2V2ZW50TmFtZV0ubGVuZ3RoIDwgMSkge1xuICAgICAgZGVsZXRlIHRoaXMuc3ViRXZlbnROYW1lTWFwW2V2ZW50TmFtZV07XG4gICAgfVxuICB9XG5cbiAgaWYgKFV0aWxzLmNvbnRhaW5zKHRoaXMuc3ViSWRNYXAsIHN1YklkKSkge1xuICAgIGRlbGV0ZSB0aGlzLnN1YklkTWFwW3N1YklkXTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgYSBsaXN0IG9mIGFsbCBzdWJzY3JpcHRpb25zIGluIHRoZSBzdWJzY3JpcHRpb24gbWFwLlxuICovXG5TdWJzY3JpcHRpb25NYXAucHJvdG90eXBlLmdldEFsbFN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFV0aWxzLnZhbHVlcyh0aGlzLnN1YkV2ZW50TmFtZU1hcCkucmVkdWNlKGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYS5jb25jYXQoYik7XG4gIH0sIFtdKTtcbn07XG5cbi8qKlxuICogR2V0IGEgbGlzdCBvZiBzdWJzY3JpcHRpb25zIGZvciB0aGUgZ2l2ZW4gZXZlbnQgbmFtZSwgb3IgYW4gZW1wdHlcbiAqIGxpc3QgaWYgdGhlcmUgYXJlIG5vIHN1YnNjcmlwdGlvbnMuXG4gKi9cblN1YnNjcmlwdGlvbk1hcC5wcm90b3R5cGUuZ2V0U3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICByZXR1cm4gdGhpcy5zdWJFdmVudE5hbWVNYXBbZXZlbnROYW1lXSB8fCBbXTtcbn07XG5cbi8qKlxuICogQW4gb2JqZWN0IHdoaWNoIG1haW50YWlucyBhIG1hcCBvZiBzdWJzY3JpcHRpb25zIGFuZCBzZXJ2ZXMgYXMgdGhlXG4gKiBtZWNoYW5pc20gZm9yIHRyaWdnZXJpbmcgZXZlbnRzIHRvIGJlIGhhbmRsZWQgYnkgc3Vic2NyaWJlcnMuXG4gKi9cbnZhciBFdmVudEJ1cyA9IGZ1bmN0aW9uKHBhcmFtc0luKSB7XG4gIHZhciBwYXJhbXMgPSBwYXJhbXNJbiB8fCB7fTtcblxuICB0aGlzLnN1Yk1hcCA9IG5ldyBTdWJzY3JpcHRpb25NYXAoKTtcbiAgdGhpcy5sb2dFdmVudHMgPSBwYXJhbXMubG9nRXZlbnRzIHx8IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gdGhlIG5hbWVkIGV2ZW50LiAgUmV0dXJucyBhIG5ldyBTdWJzY3JpcHRpb24gb2JqZWN0XG4gKiB3aGljaCBjYW4gYmUgdXNlZCB0byB1bnN1YnNjcmliZS5cbiAqL1xuRXZlbnRCdXMucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgZikge1xuICBVdGlscy5hc3NlcnROb3ROdWxsKGV2ZW50TmFtZSwgXCJldmVudE5hbWVcIik7XG4gIFV0aWxzLmFzc2VydE5vdE51bGwoZiwgXCJmXCIpO1xuICBVdGlscy5hc3NlcnRUcnVlKFV0aWxzLmlzRnVuY3Rpb24oZiksIFwiZiBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gIHJldHVybiB0aGlzLnN1Yk1hcC5zdWJzY3JpYmUoZXZlbnROYW1lLCBmKTtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlIGEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGFsbCBldmVudHMuXG4gKi9cbkV2ZW50QnVzLnByb3RvdHlwZS5zdWJzY3JpYmVBbGwgPSBmdW5jdGlvbihmKSB7XG4gIFV0aWxzLmFzc2VydE5vdE51bGwoZiwgXCJmXCIpO1xuICBVdGlscy5hc3NlcnRUcnVlKFV0aWxzLmlzRnVuY3Rpb24oZiksIFwiZiBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gIHJldHVybiB0aGlzLnN1Yk1hcC5zdWJzY3JpYmUoQUxMX0VWRU5UUywgZik7XG59O1xuXG4vKipcbiAqIEdldCBhIGxpc3Qgb2Ygc3Vic2NyaXB0aW9ucyBmb3IgdGhlIGdpdmVuIGV2ZW50IG5hbWUsIG9yIGFuIGVtcHR5XG4gKiBsaXN0IGlmIHRoZXJlIGFyZSBubyBzdWJzY3JpcHRpb25zLlxuICovXG5FdmVudEJ1cy5wcm90b3R5cGUuZ2V0U3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICByZXR1cm4gdGhpcy5zdWJNYXAuZ2V0U3Vic2NyaXB0aW9ucyhldmVudE5hbWUpO1xufTtcblxuLyoqXG4gKiBUcmlnZ2VyIHRoZSBnaXZlbiBldmVudCB3aXRoIHRoZSBnaXZlbiBkYXRhLiAgQWxsIG1ldGhvZHMgc3Vic2NyaWJlZFxuICogdG8gdGhpcyBldmVudCB3aWxsIGJlIGNhbGxlZCBhbmQgYXJlIHByb3ZpZGVkIHdpdGggdGhlIGdpdmVuIGFyYml0cmFyeVxuICogZGF0YSBvYmplY3QgYW5kIHRoZSBuYW1lIG9mIHRoZSBldmVudCwgaW4gdGhhdCBvcmRlci5cbiAqL1xuRXZlbnRCdXMucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbihldmVudE5hbWUsIGRhdGEpIHtcbiAgVXRpbHMuYXNzZXJ0Tm90TnVsbChldmVudE5hbWUsIFwiZXZlbnROYW1lXCIpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBhbGxFdmVudFN1YnMgPSB0aGlzLnN1Yk1hcC5nZXRTdWJzY3JpcHRpb25zKEFMTF9FVkVOVFMpO1xuICB2YXIgZXZlbnRTdWJzID0gdGhpcy5zdWJNYXAuZ2V0U3Vic2NyaXB0aW9ucyhldmVudE5hbWUpO1xuXG4gIC8vIGlmICh0aGlzLmxvZ0V2ZW50cyAmJiAoZXZlbnROYW1lICE9PSBjb25uZWN0LkV2ZW50VHlwZS5MT0cgJiYgZXZlbnROYW1lICE9PSBjb25uZWN0LkV2ZW50VHlwZS5NQVNURVJfUkVTUE9OU0UgJiYgZXZlbnROYW1lICE9PSBjb25uZWN0LkV2ZW50VHlwZS5BUElfTUVUUklDKSkge1xuICAvLyAgICBjb25uZWN0LmdldExvZygpLnRyYWNlKFwiUHVibGlzaGluZyBldmVudDogJXNcIiwgZXZlbnROYW1lKTtcbiAgLy8gfVxuXG4gIGFsbEV2ZW50U3Vicy5jb25jYXQoZXZlbnRTdWJzKS5mb3JFYWNoKGZ1bmN0aW9uKHN1Yikge1xuICAgIHRyeSB7XG4gICAgICBzdWIuZihkYXRhIHx8IG51bGwsIGV2ZW50TmFtZSwgc2VsZik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gICBjb25uZWN0XG4gICAgICAvLyAgICAgLmdldExvZygpXG4gICAgICAvLyAgICAgLmVycm9yKFwiJyVzJyBldmVudCBoYW5kbGVyIGZhaWxlZC5cIiwgZXZlbnROYW1lKVxuICAgICAgLy8gICAgIC53aXRoRXhjZXB0aW9uKGUpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIFRyaWdnZXIgdGhlIGdpdmVuIGV2ZW50IHdpdGggdGhlIGdpdmVuIGRhdGEuICBBbGwgbWV0aG9kcyBzdWJzY3JpYmVkXG4gKiB0byB0aGlzIGV2ZW50IHdpbGwgYmUgY2FsbGVkIGFuZCBhcmUgcHJvdmlkZWQgd2l0aCB0aGUgZ2l2ZW4gYXJiaXRyYXJ5XG4gKiBkYXRhIG9iamVjdCBhbmQgdGhlIG5hbWUgb2YgdGhlIGV2ZW50LCBpbiB0aGF0IG9yZGVyLlxuICovXG5FdmVudEJ1cy5wcm90b3R5cGUudHJpZ2dlckFzeW5jID0gZnVuY3Rpb24oZXZlbnROYW1lLCBkYXRhKSB7XG4gIHNldFRpbWVvdXQoKCkgPT4gdGhpcy50cmlnZ2VyKGV2ZW50TmFtZSwgZGF0YSksIDApO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgY2xvc3VyZSB3aGljaCBicmlkZ2VzIGFuIGV2ZW50IGZyb20gYW5vdGhlciBFdmVudEJ1cyB0byB0aGlzIGJ1cy5cbiAqXG4gKiBVc2FnZTpcbiAqIGNvbmR1aXQub25VcHN0cmVhbShcIk15RXZlbnRcIiwgYnVzLmJyaWRnZSgpKTtcbiAqL1xuRXZlbnRCdXMucHJvdG90eXBlLmJyaWRnZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJldHVybiBmdW5jdGlvbihkYXRhLCBldmVudCkge1xuICAgIHNlbGYudHJpZ2dlcihldmVudCwgZGF0YSk7XG4gIH07XG59O1xuXG4vKipcbiAqIFVuc3Vic2NyaWJlIGFsbCBldmVudHMgaW4gdGhlIGV2ZW50IGJ1cy5cbiAqL1xuRXZlbnRCdXMucHJvdG90eXBlLnVuc3Vic2NyaWJlQWxsID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc3ViTWFwLmdldEFsbFN1YnNjcmlwdGlvbnMoKS5mb3JFYWNoKGZ1bmN0aW9uKHN1Yikge1xuICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICB9KTtcbn07XG5cbmV4cG9ydCB7IEV2ZW50QnVzIH07XG4iLCJpbXBvcnQgeyBDb25uZWN0aW9uVHlwZSwgQ29ubmVjdGlvbkluZm9UeXBlIH0gZnJvbSBcIi4vYmFzZUNvbm5lY3Rpb25IZWxwZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29ubmVjdGlvbkRldGFpbHNQcm92aWRlciB7XG5cbiAgY29uc3RydWN0b3IoY29ubmVjdGlvbkRldGFpbHMsIHBhcnRpY2lwYW50VG9rZW4sIGNoYXRDbGllbnQpIHtcbiAgICB0aGlzLmNoYXRDbGllbnQgPSBjaGF0Q2xpZW50O1xuICAgIHRoaXMucGFydGljaXBhbnRUb2tlbiA9IHBhcnRpY2lwYW50VG9rZW4gfHwgbnVsbDtcbiAgICB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzID0gY29ubmVjdGlvbkRldGFpbHMgfHwgbnVsbDtcbiAgICB0aGlzLmNvbm5lY3Rpb25Ub2tlbiA9IG51bGw7XG4gICAgdGhpcy5jb25uZWN0aW9uVHlwZSA9IG51bGw7XG4gICAgdGhpcy5maXJzdENhbGwgPSB0cnVlO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICBpZiAodGhpcy5wYXJ0aWNpcGFudFRva2VuKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmV0Y2hDb25uZWN0aW9uRGV0YWlscygpLnRoZW4oKCkgPT4gdGhpcy5jb25uZWN0aW9uRGV0YWlscyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbm5lY3Rpb25EZXRhaWxzKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuX2hhbmRsZVByZXNldENvbm5lY3Rpb25EZXRhaWxzKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcIkZhdGFsOiBDYW5ub3QgZ2V0IGNvbm5lY3Rpb24gZGV0YWlscy5cIik7XG4gICAgfVxuICB9XG5cbiAgZmV0Y2hDb25uZWN0aW9uRGV0YWlscygpIHtcbiAgICAvLyBUbyBub3Qgd2FzdGUgdGhlIGZpcnN0IHJlcXVlc3Qgd2UgaGF2ZSB0byBtYWtlIGluIG9yZGVyIHRvIGRldGVybWluZSBJT1QgdnMuIExQQ1xuICAgIC8vIHdlIHJldHVybiB0aGUgYWxyZWFkeSBmZXRjaGVkIGNvbm5lY3Rpb25EZXRhaWxzIGlmIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGxcbiAgICBpZiAodGhpcy5maXJzdENhbGwpIHtcbiAgICAgIHRoaXMuZmlyc3RDYWxsID0gZmFsc2U7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29ubmVjdGlvbkRldGFpbHMpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wYXJ0aWNpcGFudFRva2VuKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmV0Y2hDb25uZWN0aW9uRGV0YWlscygpLnRoZW4oKCkgPT4gdGhpcy5jb25uZWN0aW9uRGV0YWlscyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcIkZhdGFsOiBDYW5ub3QgdXNlIHN0YXRpYyBjb25uZWN0aW9uIGRldGFpbHMgbW9yZSB0aGFuIG9uY2UuXCIpO1xuICAgIH1cbiAgfVxuXG4gIGZldGNoQ29ubmVjdGlvblRva2VuKCkge1xuICAgIC8vIFRvIG5vdCB3YXN0ZSB0aGUgZmlyc3QgcmVxdWVzdCB3ZSBoYXZlIHRvIG1ha2UgaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIElPVCB2cy4gTFBDXG4gICAgLy8gd2UgcmV0dXJuIHRoZSBhbHJlYWR5IGZldGNoZWQgY29ubmVjdGlvbkRldGFpbHMgaWYgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbFxuICAgIGlmICh0aGlzLmZpcnN0Q2FsbCkge1xuICAgICAgdGhpcy5maXJzdENhbGwgPSBmYWxzZTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5jb25uZWN0aW9uVG9rZW4pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wYXJ0aWNpcGFudFRva2VuKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmV0Y2hDb25uZWN0aW9uRGV0YWlscygpLnRoZW4oKCkgPT4gdGhpcy5jb25uZWN0aW9uVG9rZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJGYXRhbDogQ2Fubm90IHVzZSBzdGF0aWMgY29ubmVjdGlvbiBkZXRhaWxzIG1vcmUgdGhhbiBvbmNlLlwiKTtcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlUHJlc2V0Q29ubmVjdGlvbkRldGFpbHMoKSB7XG4gICAgdGhpcy5jb25uZWN0aW9uVHlwZSA9IENvbm5lY3Rpb25UeXBlLklPVDtcbiAgICB0aGlzLmNvbm5lY3Rpb25Ub2tlbiA9IHRoaXMuY29ubmVjdGlvbkRldGFpbHMuY29ubmVjdGlvblRva2VuO1xuICAgIHRoaXMuY29ubmVjdGlvbkRldGFpbHMgPSB7XG4gICAgICBjb25uZWN0aW9uSWQ6IHRoaXMuY29ubmVjdGlvbkRldGFpbHMuQ29ubmVjdGlvbklkLFxuICAgICAgcHJlU2lnbmVkQ29ubmVjdGlvblVybDogdGhpcy5jb25uZWN0aW9uRGV0YWlscy5QcmVTaWduZWRDb25uZWN0aW9uVXJsXG4gICAgfTtcbiAgfVxuXG4gIF9oYW5kbGVDcmVhdGVQYXJ0aWNpcGFudENvbm5lY3Rpb25SZXNwb25zZShjb25uZWN0aW9uRGV0YWlscykge1xuICAgIHRoaXMuY29ubmVjdGlvblR5cGUgPSBDb25uZWN0aW9uVHlwZS5MUEM7XG4gICAgdGhpcy5jb25uZWN0aW9uVG9rZW4gPSBjb25uZWN0aW9uRGV0YWlscy5Db25uZWN0aW9uQ3JlZGVudGlhbHMuQ29ubmVjdGlvblRva2VuO1xuICAgIHRoaXMuY29ubmVjdGlvbkRldGFpbHMgPSB7XG4gICAgICBjb25uZWN0aW9uSWQ6IG51bGwsXG4gICAgICBwcmVTaWduZWRDb25uZWN0aW9uVXJsOiBjb25uZWN0aW9uRGV0YWlscy5XZWJzb2NrZXQuVXJsXG4gICAgfTtcbiAgfVxuXG4gIF9oYW5kbGVDcmVhdGVDb25uZWN0aW9uRGV0YWlsc1Jlc3BvbnNlKGNvbm5lY3Rpb25EZXRhaWxzKSB7XG4gICAgaWYgKGNvbm5lY3Rpb25EZXRhaWxzLlByZVNpZ25lZENvbm5lY3Rpb25VcmwpIHtcbiAgICAgIHRoaXMuY29ubmVjdGlvblR5cGUgPSBjb25uZWN0aW9uRGV0YWlscy5QcmVTaWduZWRDb25uZWN0aW9uVXJsLmluY2x1ZGVzKFwiLmlvdC5cIikgPyBDb25uZWN0aW9uVHlwZS5JT1QgOiBDb25uZWN0aW9uVHlwZS5MUEM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29ubmVjdGlvblR5cGUgPSBjb25uZWN0aW9uRGV0YWlscy5jb25uZWN0aW9uSWQgPyBDb25uZWN0aW9uVHlwZS5JT1QgOiBDb25uZWN0aW9uVHlwZS5MUEM7XG4gICAgfVxuICAgIHRoaXMuY29ubmVjdGlvblRva2VuID0gY29ubmVjdGlvbkRldGFpbHMuUGFydGljaXBhbnRDcmVkZW50aWFscy5Db25uZWN0aW9uQXV0aGVudGljYXRpb25Ub2tlbjtcbiAgICB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzID0ge1xuICAgICAgY29ubmVjdGlvbklkOiBjb25uZWN0aW9uRGV0YWlscy5Db25uZWN0aW9uSWQsXG4gICAgICBwcmVTaWduZWRDb25uZWN0aW9uVXJsOiBjb25uZWN0aW9uRGV0YWlscy5QcmVTaWduZWRDb25uZWN0aW9uVXJsXG4gICAgfTtcbiAgfVxuXG4gIF9mZXRjaENvbm5lY3Rpb25EZXRhaWxzKCkge1xuICAgIC8vSWYgd2UgYXJlIHVzaW5nIExQQywgcGluZyB0aGUgbmV3IEFQSS4gT3RoZXJ3aXNlLCBuZWVkIHRvIHVzZSB0aGUgb2xkIEFQSSB0byByZXRyaWV2ZSBjb25uZWN0aW9uSWQuXG4gICAgcmV0dXJuIHRoaXMuY2hhdENsaWVudFxuICAgICAgLmNyZWF0ZVBhcnRpY2lwYW50Q29ubmVjdGlvbih0aGlzLnBhcnRpY2lwYW50VG9rZW4sIFtDb25uZWN0aW9uSW5mb1R5cGUuV0VCU09DS0VULCBDb25uZWN0aW9uSW5mb1R5cGUuQ09OTkVDVElPTl9DUkVERU5USUFMU10gKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGlmIChyZXNwb25zZS5kYXRhLldlYnNvY2tldC5VcmwhPT1udWxsICYmIHJlc3BvbnNlLmRhdGEuV2Vic29ja2V0LlVybC5pbmNsdWRlcyhcIi5pb3QuXCIpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2hhdENsaWVudFxuICAgICAgICAgICAgLmNyZWF0ZUNvbm5lY3Rpb25EZXRhaWxzKHRoaXMucGFydGljaXBhbnRUb2tlbilcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHRoaXMuX2hhbmRsZUNyZWF0ZUNvbm5lY3Rpb25EZXRhaWxzUmVzcG9uc2UocmVzcG9uc2UuZGF0YSkpXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoe1xuICAgICAgICAgICAgICAgIHJlYXNvbjogXCJGYWlsZWQgdG8gZmV0Y2ggY29ubmVjdGlvbkRldGFpbHMgd2l0aCBjcmVhdGVDb25uZWN0aW9uRGV0YWlsc1wiLFxuICAgICAgICAgICAgICAgIF9kZWJ1ZzogZXJyb3JcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlQ3JlYXRlUGFydGljaXBhbnRDb25uZWN0aW9uUmVzcG9uc2UocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoe1xuICAgICAgICAgIHJlYXNvbjogXCJGYWlsZWQgdG8gZmV0Y2ggY29ubmVjdGlvbkRldGFpbHMgd2l0aCBjcmVhdGVQYXJ0aWNpcGFudENvbm5lY3Rpb25cIixcbiAgICAgICAgICBfZGVidWc6IGVycm9yXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb25cbn0gZnJvbSBcIi4uL2NvcmUvZXhjZXB0aW9uc1wiO1xuXG5pbXBvcnQgUGFobyBmcm9tIFwiLi4vcGFoby1tcXR0XCI7XG5cblxuLy8gV2hhdCBpcyB0aGUgZXhwZWN0YXRpb24gZnJvbSB0aGlzIGNsYXNzP1xuLy8gVGhpcyBzaG91bGQgcHJvdmlkZSBhbiBpbnRlcmZhY2UgZm9yIGNvbm5lY3RpbmcgKyBzdWJzY3JpYmluZyAmJiBkaXNjb25uZWN0aW5nICsgdW5zdWJzY3JpYmluZyB0byBlbmRwb2ludCArIHRvcGljLlxuLy8gVGhpcyBjbGFzcyBzaG91bGQgY2FsbCBiYWNrXG4vKmVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzKi9cbmNsYXNzIE1RVFRDbGllbnQge1xuICAvKipcbiAgICogQHBhcmFtIGNvbm5lY3Rpb25PcHRpb25zIChvYmplY3QpIC1cbiAgICogICAgICBjb25uZWN0T3B0aW9ucy51c2VTU0wgLSBpZiBwcmVzZW50IGFuZCB0cnVlLCB1c2UgYW4gU1NMIFdlYnNvY2tldCBjb25uZWN0aW9uLlxuICAgKiAgICAgIGNvbm5lY3RPcHRpb25zLmtlZXBBbGl2ZUludGVydmFsIC0gdGhlIHNlcnZlciBkaXNjb25uZWN0cyB0aGlzIGNsaWVudCBpZiB0aGVyZSBpcyBubyBhY3Rpdml0eSBmb3IgdGhpcyBudW1iZXIgb2Ygc2Vjb25kcy5cbiAgICogICAgICBjb25uZWN0T3B0aW9ucy5yZWNvbm5lY3QgLSBTZXRzIHdoZXRoZXIgdGhlIGNsaWVudCB3aWxsIGF1dG9tYXRpY2FsbHkgYXR0ZW1wdCB0byByZWNvbm5lY3RcbiAgICogICAgICBjb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvbiAtIFRoZSB2ZXJzaW9uIG9mIE1RVFQgdG8gdXNlIHRvIGNvbm5lY3QgdG8gdGhlIE1RVFQgQnJva2VyLlxuICAgKiAgICAgIGNvbm5lY3RPcHRpb25zLnRpbWVvdXQgLSBJZiB0aGUgY29ubmVjdCBoYXMgbm90IHN1Y2NlZWRlZCB3aXRoaW4gdGhpcyBudW1iZXIgb2Ygc2Vjb25kcywgaXQgaXMgZGVlbWVkIHRvIGhhdmUgZmFpbGVkLlxuICAgKlxuICAgKiBAcmV0dXJucyBhIFByb21pc2Ugb2JqZWN0IC1cbiAgICogICAgICByZXNwb25zZSA9IHt9XG4gICAqICAgICAgZXJyb3IgPSB7XCJyZWFzb25cIjoge30gLy8gSW1wbGVtZW50YXRpb24gc3BlY2lmaWNcbiAgICogICAgICAgICAgfVxuICAgKi9cbiAgY29ubmVjdChjb25uZWN0T3B0aW9ucykge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFwiY29ubmVjdCBpbiBJb3RDbGllbnRcIik7XG4gIH1cblxuICBkaXNjb25uZWN0KCkge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFwiY29ubmVjdCBpbiBJb3RDbGllbnRcIik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHN1YnNjcmliZU9wdGlvbnMgKG9iamVjdCkgLVxuICAgKiAgICAgIHN1YnNjcmliZU9wdGlvbnMucW9zIC0gdGhlIG1haXhpbXVtIHFvcyBvZiBhbnkgcHVibGljYXRpb25zIHNlbnQgYXMgYSByZXN1bHQgb2YgbWFraW5nIHRoaXMgc3Vic2NyaXB0aW9uLlxuICAgKiAgICAgIGNvbm5lY3RPcHRpb25zLnRpbWVvdXQgLSB3aGljaCwgaWYgcHJlc2VudCwgZGV0ZXJtaW5lcyB0aGUgbnVtYmVyIG9mIHNlY29uZHMgYWZ0ZXIgd2hpY2ggdGhlIG9uRmFpbHVyZSBjYWxiYWNrIGlzIGNhbGxlZC5cbiAgICogICAgICAgICAgVGhlIHByZXNlbmNlIG9mIGEgdGltZW91dCBkb2VzIG5vdCBwcmV2ZW50IHRoZSBvblN1Y2Nlc3MgY2FsbGJhY2sgZnJvbSBiZWluZyBjYWxsZWQgd2hlbiB0aGUgc3Vic2NyaWJlIGNvbXBsZXRlcy5cbiAgICpcbiAgICogQHJldHVybnMgYSBQcm9taXNlIG9iamVjdCAtXG4gICAqICAgICAgcmVzcG9uc2UgPSB7XCJ0b3BpY1wiOiA8c3RyaW5nPixcbiAgICogICAgICAgICAgICAgICAgICBcInFvc1wiOiBxb3MsXG4gICAqICAgICAgfVxuICAgKiAgICAgIGVycm9yID0ge1widG9waWNcIjogPHN0cmluZz4sXG4gICAqICAgICAgICAgIFwiZXJyb3JcIjoge30gLy8gSW1wbGVtZW50YXRpb24gc3BlY2lmaWNcbiAgICogICAgICB9XG4gICAqL1xuICBzdWJzY3JpYmUodG9waWMsIHN1YnNjcmliZU9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgVW5JbXBsZW1lbnRlZE1ldGhvZEV4Y2VwdGlvbihcImNvbm5lY3QgaW4gSW90Q2xpZW50XCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBzdWJzY3JpYmVPcHRpb25zIChvYmplY3QpIC1cbiAgICogICAgICBjb25uZWN0T3B0aW9ucy50aW1lb3V0IC0gd2hpY2gsIGlmIHByZXNlbnQsIGRldGVybWluZXMgdGhlIG51bWJlciBvZiBzZWNvbmRzIGFmdGVyIHdoaWNoIHRoZSBvbkZhaWx1cmUgY2FsbGJhY2sgaXMgY2FsbGVkLlxuICAgKiAgICAgICAgICBUaGUgcHJlc2VuY2Ugb2YgYSB0aW1lb3V0IGRvZXMgbm90IHByZXZlbnQgdGhlIG9uU3VjY2VzcyBjYWxsYmFjayBmcm9tIGJlaW5nIGNhbGxlZCB3aGVuIHRoZSB1bnN1YnNjcmliZSBjb21wbGV0ZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSBvYmplY3QgLVxuICAgKiAgICAgIHJlc3BvbnNlID0ge1widG9waWNcIjogPHN0cmluZz4sXG4gICAqICAgICAgICAgICAgICAgICAgXCJxb3NcIjogcW9zLFxuICAgKiAgICAgIH1cbiAgICogICAgICBlcnJvciA9IHtcInRvcGljXCI6IDxzdHJpbmc+LFxuICAgKiAgICAgICAgICBcImVycm9yXCI6IHt9IC8vIEltcGxlbWVudGF0aW9uIHNwZWNpZmljXG4gICAqICAgICAgfVxuICAgKlxuICAgKi9cbiAgdW5zdWJzY3JpYmUodG9waWMsIHVuc3Vic2NyaWJlT3B0aW9ucykge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFwiY29ubmVjdCBpbiBJb3RDbGllbnRcIik7XG4gIH1cbn1cbi8qZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyovXG5cbnZhciBNcXR0Q29ubmVjdGlvblN0YXR1cyA9IE9iamVjdC5mcmVlemUoe1xuICBOZXZlckNvbm5lY3RlZDogXCJOZXZlckNvbm5lY3RlZFwiLFxuICBDb25uZWN0aW5nOiBcIkNvbm5lY3RpbmdcIixcbiAgQ29ubmVjdGVkOiBcIkNvbm5lY3RlZFwiLFxuICBEaXNjb25uZWN0ZWQ6IFwiRGlzY29ubmVjdGVkXCJcbn0pO1xuXG52YXIgTXF0dEV2ZW50cyA9IE9iamVjdC5mcmVlemUoe1xuICBNRVNTQUdFOiBcIk1lc3NhZ2VcIiwgLy8gdG9waWMsIHFvcywgcGF5bG9hZFN0cmluZ1xuICBESVNDT05ORUNURUQ6IFwiRGlzY29ubmVjdGVkXCIsIC8vIHJlYXNvbjogcGFob09iamVjdC8gXCJUaW1lT3V0SW5SZWNvbm5lY3RcIlxufSk7IC8vIHt9XG5cbmNsYXNzIFBhaG9NcXR0Q2xpZW50IGV4dGVuZHMgTVFUVENsaWVudCB7XG4gIGNvbnN0cnVjdG9yKGFyZ3MpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucHJlU2lnbmVkVXJsID0gYXJncy5wcmVTaWduZWRVcmw7XG4gICAgdGhpcy5jb25uZWN0aW9uSWQgPSBhcmdzLmNvbm5lY3Rpb25JZDtcbiAgICB0aGlzLnN0YXR1cyA9IE1xdHRDb25uZWN0aW9uU3RhdHVzLk5ldmVyQ29ubmVjdGVkO1xuICAgIHRoaXMucGFob0NsaWVudCA9IG5ldyBQYWhvLkNsaWVudCh0aGlzLnByZVNpZ25lZFVybCwgdGhpcy5jb25uZWN0aW9uSWQpO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLnBhaG9DbGllbnQub25NZXNzYWdlQXJyaXZlZCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIHNlbGYuX21lc3NhZ2VBcnJpdmVkQ2FsbGJhY2sobWVzc2FnZSk7XG4gICAgfTtcbiAgICB0aGlzLnBhaG9DbGllbnQub25Db25uZWN0aW9uTG9zdCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHNlbGYuX2Nvbm5lY3Rpb25Mb3N0Q2FsbEJhY2soZGF0YSk7XG4gICAgfTtcbiAgICB0aGlzLnBhaG9DbGllbnQub25NZXNzYWdlQXJyaXZlZCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIHNlbGYuX21lc3NhZ2VBcnJpdmVkQ2FsbGJhY2sobWVzc2FnZSk7XG4gICAgfTtcbiAgICB0aGlzLmNhbGxiYWNrID0gYXJncy5jYWxsYmFjaztcbiAgICB0aGlzLm5ldmVyQ29ubmVjdGVkID0gdHJ1ZTtcbiAgICB0aGlzLl9zdWJzY3JpYmVkVG9waWNzID0gW107XG4gIH1cblxuICBjb25uZWN0KGNvbm5lY3RPcHRpb25zKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGNvbm5lY3RPcHRpb25zLm9uU3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIHNlbGYubmV2ZXJDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgc2VsZi5fb25Db25uZWN0U3VjY2VzcyhyZXNwb25zZSk7XG4gICAgICAgIHJlc29sdmUoe30pO1xuICAgICAgfTtcbiAgICAgIGNvbm5lY3RPcHRpb25zLm9uRmFpbHVyZSA9IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHZhciBlcnJvckRldGFpbHMgPSB7XG4gICAgICAgICAgcmVhc29uOiBlcnJvclxuICAgICAgICB9O1xuICAgICAgICBzZWxmLl9vbkNvbm5lY3RGYWlsdXJlKGVycm9yRGV0YWlscyk7XG4gICAgICAgIHJlamVjdChlcnJvckRldGFpbHMpO1xuICAgICAgfTtcbiAgICAgIHNlbGYuc3RhdHVzID0gTXF0dENvbm5lY3Rpb25TdGF0dXMuQ29ubmVjdGluZztcbiAgICAgIHNlbGYucGFob0NsaWVudC5jb25uZWN0KGNvbm5lY3RPcHRpb25zKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9jb25uZWN0aW9uTG9zdENhbGxCYWNrKGVycm9yKSB7XG4gICAgY29uc29sZS53YXJuKFwiQ29ubmVjdGlvbiBsb3N0OiBcIiwgZXJyb3IpO1xuICAgIHZhciBkYXRhID0ge1xuICAgICAgcmVhc29uOiBlcnJvclxuICAgIH07XG4gICAgdGhpcy5fc3Vic2NyaWJlZFRvcGljcyA9IFtdO1xuICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gTXF0dENvbm5lY3Rpb25TdGF0dXMuRGlzY29ubmVjdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc3RhdHVzID0gTXF0dENvbm5lY3Rpb25TdGF0dXMuRGlzY29ubmVjdGVkO1xuICAgIHRoaXMuY2FsbGJhY2soTXF0dEV2ZW50cy5ESVNDT05ORUNURUQsIGRhdGEpO1xuICB9XG5cbiAgX21lc3NhZ2VBcnJpdmVkQ2FsbGJhY2sobWVzc2FnZSkge1xuICAgIHZhciBpbmNvbWluZ01lc3NhZ2UgPSB7XG4gICAgICB0b3BpYzogbWVzc2FnZS50b3BpYyxcbiAgICAgIHFvczogbWVzc2FnZS5xb3MsXG4gICAgICBwYXlsb2FkU3RyaW5nOiBtZXNzYWdlLnBheWxvYWRTdHJpbmdcbiAgICB9O1xuICAgIHRoaXMuY2FsbGJhY2soTXF0dEV2ZW50cy5NRVNTQUdFLCBpbmNvbWluZ01lc3NhZ2UpO1xuICB9XG5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG4gIF9vbkNvbm5lY3RTdWNjZXNzKHJlc3BvbnNlKSB7XG4gICAgLyplc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzKi9cbiAgICB0aGlzLnN0YXR1cyA9IE1xdHRDb25uZWN0aW9uU3RhdHVzLkNvbm5lY3RlZDtcbiAgfVxuXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMqL1xuICBfb25Db25uZWN0RmFpbHVyZShlcnJvcikge1xuICAgIC8qZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyovXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmIChzZWxmLm5ldmVyQ29ubmVjdGVkKSB7XG4gICAgICBzZWxmLnN0YXR1cyA9IE1xdHRDb25uZWN0aW9uU3RhdHVzLk5ldmVyQ29ubmVjdGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnN0YXR1cyA9IE1xdHRDb25uZWN0aW9uU3RhdHVzLkRpc2Nvbm5lY3RlZDtcbiAgICB9XG4gIH1cblxuICBkaXNjb25uZWN0KCkge1xuICAgIHRoaXMuX3N1YnNjcmliZWRUb3BpY3MgPSBbXTtcbiAgICB0aGlzLnN0YXR1cyA9IE1xdHRDb25uZWN0aW9uU3RhdHVzLkRpc2Nvbm5lY3RlZDtcbiAgICB0aGlzLnBhaG9DbGllbnQuZGlzY29ubmVjdCgpO1xuICB9XG5cbiAgc3Vic2NyaWJlKHRvcGljLCBzdWJzY3JpYmVPcHRpb25zKSB7XG4gICAgLy8gc2hvdWxkIHdlIGNoZWNrIGlmIHRoaXMgdG9waWMgaXMgYWxyZWFkeSBzdWJzY3JpYmVkP1xuICAgIC8vIE5PLCBsZWF2ZSB0aGlzIGJlaGF2aW91ciB0byBQQUhPIC0gd2hhdGV2ZXIgUEFITyBkb2VzXG4gICAgLy8gaW4gY2FzZSBvZiBkdXBsaWNhdGUgc3Vic2NyaWJlIC0gd2Ugd2lsbCBmb2xsb3cgdGhlIHNhbWUuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHN1YnNjcmliZU9wdGlvbnMub25TdWNjZXNzID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgc2VsZi5fc3Vic2NyaWJlU3VjY2Vzcyh0b3BpYywgcmVzcG9uc2UpO1xuICAgICAgICB2YXIgcmVzcG9uc2VPYmplY3QgPSB7XG4gICAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICAgIHFvczogcmVzcG9uc2UuZ3JhbnRlZFFvc1xuICAgICAgICB9O1xuICAgICAgICByZXNvbHZlKHJlc3BvbnNlT2JqZWN0KTtcbiAgICAgIH07XG4gICAgICBzdWJzY3JpYmVPcHRpb25zLm9uRmFpbHVyZSA9IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHZhciBlcnJvck9iamVjdCA9IHtcbiAgICAgICAgICB0b3BpYzogdG9waWMsXG4gICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH07XG4gICAgICAgIHJlamVjdChlcnJvck9iamVjdCk7XG4gICAgICB9O1xuICAgICAgc2VsZi5wYWhvQ2xpZW50LnN1YnNjcmliZSh0b3BpYywgc3Vic2NyaWJlT3B0aW9ucyk7XG4gICAgfSk7XG4gIH1cblxuICBfYWRkVG9Ub3BpY3ModG9waWMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHNlbGYuX3N1YnNjcmliZWRUb3BpY3MuaW5kZXhPZih0b3BpYykgPj0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZWxmLl9zdWJzY3JpYmVkVG9waWNzLnB1c2godG9waWMpO1xuICB9XG5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG4gIF9zdWJzY3JpYmVTdWNjZXNzKHRvcGljLCByZXNwb25zZSkge1xuICAgIC8qZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyovXG4gICAgdGhpcy5fYWRkVG9Ub3BpY3ModG9waWMpO1xuICB9XG5cbiAgZ2V0U3Vic2NyaWJlZFRvcGljcygpIHtcbiAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlZFRvcGljcy5zbGljZSgwKTtcbiAgfVxuXG4gIHVuc3Vic2NyaWJlKHRvcGljLCB1bnN1YnNjcmliZU9wdGlvbnMpIHtcbiAgICAvLyBzaG91bGQgd2UgY2hlY2sgaWYgdGhpcyB0b3BpYyBpcyBldmVuIHN1YnNjcmliZWQ/XG4gICAgLy8gTk8sIGxlYXZlIHRoaXMgYmVoYXZpb3VyIHRvIFBBSE8gLSB3aGF0ZXZlciBQQUhPIGRvZXNcbiAgICAvLyBpbiBjYXNlIG9mIHVuc3Vic2NyaWJlIG9mIHRvcGljcyBub3QgZXZlbnQgc3Vic2NyaWJlZFxuICAgIC8vIC0gd2Ugd2lsbCBmb2xsb3cgdGhlIHNhbWUuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHVuc3Vic2NyaWJlT3B0aW9ucy5vblN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICB2YXIgcmVzcG9uc2VPYmplY3QgPSB7XG4gICAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZVxuICAgICAgICB9O1xuICAgICAgICBzZWxmLl91bnN1YnNjcmliZVN1Y2Nlc3ModG9waWMsIHJlc3BvbnNlT2JqZWN0KTtcbiAgICAgICAgcmVzb2x2ZShyZXNwb25zZU9iamVjdCk7XG4gICAgICB9O1xuICAgICAgdW5zdWJzY3JpYmVPcHRpb25zLm9uRmFpbHVyZSA9IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHZhciBlcnJvck9iamVjdCA9IHtcbiAgICAgICAgICB0b3BpYzogdG9waWMsXG4gICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH07XG4gICAgICAgIHJlamVjdChlcnJvck9iamVjdCk7XG4gICAgICB9O1xuICAgICAgc2VsZi5wYWhvQ2xpZW50LnVuc3Vic2NyaWJlKHRvcGljLCB1bnN1YnNjcmliZU9wdGlvbnMpO1xuICAgIH0pO1xuICB9XG5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG4gIF91bnN1YnNjcmliZVN1Y2Nlc3ModG9waWMsIHJlc3BvbnNlKSB7XG4gICAgLyplc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzKi9cbiAgICB0aGlzLl9zdWJzY3JpYmVkVG9waWNzID0gdGhpcy5fc3Vic2NyaWJlZFRvcGljcy5maWx0ZXIodCA9PiB0ICE9PSB0b3BpYyk7XG4gIH1cblxuICBnZXRTdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdHVzO1xuICB9XG59XG5cbmV4cG9ydCB7IE1xdHRFdmVudHMsIFBhaG9NcXR0Q2xpZW50IH07XG4iLCJpbXBvcnQgeyBFdmVudEJ1cyB9IGZyb20gXCIuL2V2ZW50YnVzXCI7XG5cbmZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5uYXZpZ2F0b3IgJiYgd2luZG93LmFkZEV2ZW50TGlzdGVuZXI7XG59XG5cbmNsYXNzIER1bW15TmV0d29ya0luZm8ge1xuXG4gIG9uT25saW5lKCkge31cbiAgXG4gIG9uT2ZmbGluZSgpIHt9XG4gIFxuICBpc09ubGluZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBcbiAgd2hlbk9ubGluZSgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbn1cblxuY2xhc3MgQnJvd3Nlck5ldHdvcmtJbmZvIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmV2ZW50QnVzID0gbmV3IEV2ZW50QnVzKCk7XG4gICAgdGhpcy5vbmxpbmVQcm9taXNlID0gbnVsbDtcbiAgICBcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25saW5lJywgKCkgPT4ge1xuICAgICAgdGhpcy5ldmVudEJ1cy50cmlnZ2VyKCdvbmxpbmUnKTtcbiAgICB9KTtcbiAgICBcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsICgpID0+IHtcbiAgICAgIHRoaXMuZXZlbnRCdXMudHJpZ2dlcignb2ZmbGluZScpO1xuICAgIH0pO1xuICB9XG5cbiAgb25PbmxpbmUoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLmV2ZW50QnVzLnN1YnNjcmliZSgnb25saW5lJywgaGFuZGxlcik7XG4gIH1cbiAgXG4gIG9uT2ZmbGluZShoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRCdXMuc3Vic2NyaWJlKCdvZmZsaW5lJywgaGFuZGxlcik7XG4gIH1cbiAgXG4gIGlzT25saW5lKCkge1xuICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLm9uTGluZTtcbiAgfVxuICBcbiAgd2hlbk9ubGluZSgpIHtcbiAgICAgIGlmICh0aGlzLmlzT25saW5lKCkpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLm9ubGluZVByb21pc2UpIHtcbiAgICAgICAgdGhpcy5vbmxpbmVQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgY29uc3QgdW5zdWJzY3JpYmUgPSB0aGlzLm9uT25saW5lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25saW5lUHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm9ubGluZVByb21pc2U7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IE5ldHdvcmtJbmZvID0gaXNCcm93c2VyKCkgPyBuZXcgQnJvd3Nlck5ldHdvcmtJbmZvKCkgOiBuZXcgRHVtbXlOZXR3b3JrSW5mbygpO1xuIiwiaW1wb3J0IHsgUGFob01xdHRDbGllbnQsIE1xdHRFdmVudHMgfSBmcm9tIFwiLi4vLi4vY2xpZW50L3BhaG9NcXR0Q2xpZW50XCI7XG5pbXBvcnQgeyBFdmVudEJ1cyB9IGZyb20gXCIuLi9ldmVudGJ1c1wiO1xuaW1wb3J0IHsgR2xvYmFsQ29uZmlnIH0gZnJvbSBcIi4uLy4uL2dsb2JhbENvbmZpZ1wiO1xuaW1wb3J0IHsgTG9nTWFuYWdlciB9IGZyb20gXCIuLi8uLi9sb2dcIjtcbmltcG9ydCB7IE5ldHdvcmtJbmZvIH0gZnJvbSBcIi4uL25ldHdvcmtJbmZvXCI7XG5pbXBvcnQgeyBNUVRUX0NPTlNUQU5UUyB9IGZyb20gXCIuLi8uLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbiB9IGZyb20gXCIuLi9leGNlcHRpb25zXCI7XG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmltcG9ydCB7XG4gIENvbm5lY3Rpb25IZWxwZXJFdmVudHMsXG4gIENvbm5lY3Rpb25IZWxwZXJTdGF0dXNcbn0gZnJvbSBcIi4vYmFzZUNvbm5lY3Rpb25IZWxwZXJcIjtcbmltcG9ydCBCYXNlQ29ubmVjdGlvbkhlbHBlciBmcm9tIFwiLi9iYXNlQ29ubmVjdGlvbkhlbHBlclwiO1xuXG5jbGFzcyBJb3RDb25uZWN0aW9uSGVscGVyIGV4dGVuZHMgQmFzZUNvbm5lY3Rpb25IZWxwZXIge1xuXG4gIGNvbnN0cnVjdG9yKGNvbnRhY3RJZCwgY29ubmVjdGlvbkRldGFpbHNQcm92aWRlciwgcmVjb25uZWN0Q29uZmlnKSB7XG4gICAgc3VwZXIoY29ubmVjdGlvbkRldGFpbHNQcm92aWRlcik7XG4gICAgdGhpcy5sb2dnZXIgPSBMb2dNYW5hZ2VyLmdldExvZ2dlcih7XG4gICAgICBwcmVmaXg6IFwiQ29udGFjdElkLVwiICsgY29udGFjdElkICsgXCI6IFwiXG4gICAgfSk7XG4gICAgdGhpcy5zdGF0dXMgPSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLk5ldmVyU3RhcnRlZDtcbiAgICB0aGlzLmV2ZW50QnVzID0gbmV3IEV2ZW50QnVzKCk7XG4gICAgdGhpcy5fdW5zdWJzY3JpYmVGdW5jdGlvbnMgPSBbXTtcbiAgICB0aGlzLnJlY29ubmVjdENvbmZpZyA9IHJlY29ubmVjdENvbmZpZztcbiAgICB0aGlzLl9jb25uZWN0Q2FsbGVkQXRsZWFzdE9uY2UgPSBmYWxzZTtcbiAgICB0aGlzLl9zZXROZXR3b3JrRXZlbnRIYW5kbGVycygpO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgc3VwZXIuc3RhcnQoKTtcbiAgICBpZiAodGhpcy5zdGF0dXMgIT09IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuTmV2ZXJTdGFydGVkKSB7XG4gICAgICB0aHJvdyBuZXcgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKFwiQ29ubmVjdGlvbiBoZWxwZXIgc3RhcnRlZCB0d2ljZSEhXCIpO1xuICAgIH1cbiAgICB0aGlzLnN0YXR1cyA9IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuU3RhcnRpbmc7XG4gICAgcmV0dXJuIHRoaXMuX2luaXRpYXRlQ29ubmVjdFdpdGhSZXRyeSgpO1xuICB9XG5cbiAgZW5kKCkge1xuICAgIHN1cGVyLmVuZCgpO1xuICAgIHRoaXMuX2hhbmRsZUJyb2tlbkNvbm5lY3Rpb24oeyByZWFzb246IFwidXNlciBhY3Rpb25cIiB9KTtcbiAgICB0aGlzLmlvdENvbm5lY3Rpb24gJiYgdGhpcy5pb3RDb25uZWN0aW9uLmRpc2Nvbm5lY3QoKTtcbiAgfVxuXG4gIGdldFN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0dXM7XG4gIH1cblxuICBfaW5pdElvdENvbm5lY3Rpb24oY29ubmVjdGlvbkRldGFpbHMpIHtcbiAgICB0aGlzLmlvdENvbm5lY3Rpb24gPSBuZXcgUGFob01xdHRDbGllbnQoe1xuICAgICAgcHJlU2lnbmVkVXJsOiBjb25uZWN0aW9uRGV0YWlscy5wcmVTaWduZWRDb25uZWN0aW9uVXJsLFxuICAgICAgY29ubmVjdGlvbklkOiBjb25uZWN0aW9uRGV0YWlscy5jb25uZWN0aW9uSWQsXG4gICAgICBjYWxsYmFjazogdGhpcy5faGFuZGxlSW90RXZlbnQuYmluZCh0aGlzKVxuICAgIH0pO1xuICB9XG5cbiAgX2Nvbm5lY3QoKSB7XG4gICAgdGhpcy5fY29ubmVjdENhbGxlZEF0bGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyXG4gICAgICAuZmV0Y2hDb25uZWN0aW9uRGV0YWlscygpXG4gICAgICAudGhlbih0aGlzLl9pbml0SW90Q29ubmVjdGlvbi5iaW5kKHRoaXMpKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBjb25zdCBjb25uZWN0T3B0aW9ucyA9IHtcbiAgICAgICAgICB1c2VTU0w6IHRydWUsXG4gICAgICAgICAga2VlcEFsaXZlSW50ZXJ2YWw6IE1RVFRfQ09OU1RBTlRTLktFRVBfQUxJVkUsXG4gICAgICAgICAgcmVjb25uZWN0OiBmYWxzZSxcbiAgICAgICAgICBtcXR0VmVyc2lvbjogNCxcbiAgICAgICAgICB0aW1lb3V0OiBNUVRUX0NPTlNUQU5UUy5DT05ORUNUX1RJTUVPVVRcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICB0aGlzLmlvdENvbm5lY3Rpb25cbiAgICAgICAgICAgIC5jb25uZWN0KGNvbm5lY3RPcHRpb25zKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5fY29ubmVjdEZhaWxlZChyZWplY3QsIGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgX2Nvbm5lY3RGYWlsZWQocmVqZWN0LCBjb25uZWN0RXJyb3IpIHtcbiAgICB2YXIgZXJyb3IgPSB7XG4gICAgICBjb25uZWN0U3VjY2VzczogZmFsc2UsXG4gICAgICByZWFzb246IFwiQ29ubmVjdGlvblRvQnJva2VyRmFpbGVkXCIsXG4gICAgICBkZXRhaWxzOiBjb25uZWN0RXJyb3JcbiAgICB9O1xuICAgIHJlamVjdChlcnJvcik7XG4gIH1cblxuICBfc3Vic2NyaWJlKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNvbnN0IHN1YnNjcmliZU9wdGlvbnMgPSB7XG4gICAgICBxb3M6IDFcbiAgICB9O1xuICAgIHRoaXMuaW90Q29ubmVjdGlvblxuICAgICAgLnN1YnNjcmliZSh0aGlzLmNvbm5lY3Rpb25EZXRhaWxzUHJvdmlkZXIuY29ubmVjdGlvbkRldGFpbHMuY29ubmVjdGlvbklkLCBzdWJzY3JpYmVPcHRpb25zKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICB0aGlzLl9wb3N0U3Vic2NyaWJlKHJlc29sdmUsIHJlc3BvbnNlKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICB0aGlzLl9zdWJzY3JpYmVGYWlsZWQocmVqZWN0LCBlcnJvcik7XG4gICAgICB9KTtcbiAgfVxuXG4gIF9wb3N0U3Vic2NyaWJlKHJlc29sdmUsIHN1YnNjcmliZVJlc3BvbnNlKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICBkZXRhaWxzOiBzdWJzY3JpYmVSZXNwb25zZSxcbiAgICAgIGNvbm5lY3RTdWNjZXNzOiB0cnVlXG4gICAgfTtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIF9zdWJzY3JpYmVGYWlsZWQocmVqZWN0LCBzdWJzY3JpYmVFcnJvcikge1xuICAgIGNvbnN0IGVycm9yID0ge1xuICAgICAgY29ubmVjdFN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZGV0YWlsczogc3Vic2NyaWJlRXJyb3IsXG4gICAgICByZWFzb246IFwiU3Vic2NyaWJ0aW9uVG9Ub3BpY0ZhaWxlZFwiXG4gICAgfTtcbiAgICB0aGlzLmlvdENvbm5lY3Rpb24uZGlzY29ubmVjdCgpO1xuICAgIHJlamVjdChlcnJvcik7XG4gIH1cblxuICBfaGFuZGxlSW90RXZlbnQoZXZlbnRUeXBlLCBldmVudERhdGEpIHtcbiAgICBzd2l0Y2ggKGV2ZW50VHlwZSkge1xuICAgICAgY2FzZSBNcXR0RXZlbnRzLk1FU1NBR0U6XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFwiUmVjZWl2ZWQgaW5jb21pbmcgZGF0YVwiLCBldmVudERhdGEucGF5bG9hZFN0cmluZyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgaW5jb21pbmdEYXRhID0gSlNPTi5wYXJzZShldmVudERhdGEucGF5bG9hZFN0cmluZyk7XG4gICAgICAgICAgdGhpcy5ldmVudEJ1cy50cmlnZ2VyKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuSW5jb21pbmdNZXNzYWdlLCBpbmNvbWluZ0RhdGEpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYFdyb25nIG1lc3NhZ2UgZm9ybWF0OiBgLCBldmVudERhdGEucGF5bG9hZFN0cmluZyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIE1xdHRFdmVudHMuRElTQ09OTkVDVEVEOlxuICAgICAgICBpZiAoR2xvYmFsQ29uZmlnLnJlY29ubmVjdCAmJiBldmVudERhdGEucmVhc29uLmVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgICAgIHRoaXMuX2hhbmRsZUxvc3RDb25uZWN0aW9uKGV2ZW50RGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5faGFuZGxlQnJva2VuQ29ubmVjdGlvbihldmVudERhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIF9pbml0aWF0ZUNvbm5lY3RXaXRoUmV0cnkoKSB7XG4gICAgaWYgKCF0aGlzLl9pbml0aWF0ZUNvbm5lY3RQcm9taXNlKSB7XG4gICAgICB0aGlzLl9pbml0aWF0ZUNvbm5lY3RQcm9taXNlID0gVXRpbHNcbiAgICAgICAgLmFzeW5jV2hpbGVJbnRlcnZhbChcbiAgICAgICAgICAoY291bnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oYENvbm5lY3QgLSAke2NvdW50fS4gdHJ5YCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29ubmVjdCgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgKGNvdW50KSA9PiBjb3VudCA8IHRoaXMucmVjb25uZWN0Q29uZmlnLm1heFJldHJpZXMgJiYgdGhpcy5fY2FuQ29ubmVjdCgpLFxuICAgICAgICAgIHRoaXMucmVjb25uZWN0Q29uZmlnLmludGVydmFsXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oYENvbm5lY3QgLSBTdWNjZXNzYCk7XG4gICAgICAgICAgdGhpcy5faGFuZGxlR2FpbmVkQ29ubmVjdGlvbigpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKGBDb25uZWN0IC0gRmFpbGVkYCk7XG4gICAgICAgICAgaWYgKE5ldHdvcmtJbmZvLmlzT25saW5lKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUJyb2tlbkNvbm5lY3Rpb24oZSk7XG4gICAgICAgICAgICB0aGlzLmlvdENvbm5lY3Rpb24gJiYgdGhpcy5pb3RDb25uZWN0aW9uLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgIT09IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuQ29ubmVjdGlvbkxvc3QpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUxvc3RDb25uZWN0aW9uKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICB0aGlzLl9pbml0aWF0ZUNvbm5lY3RQcm9taXNlID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9pbml0aWF0ZUNvbm5lY3RQcm9taXNlO1xuICB9XG5cbiAgX2NhbkNvbm5lY3QoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIE5ldHdvcmtJbmZvLmlzT25saW5lKCkgJiYgKFxuICAgICAgICB0aGlzLnN0YXR1cyA9PT0gQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5Db25uZWN0aW9uTG9zdCB8fFxuICAgICAgICB0aGlzLnN0YXR1cyA9PT0gQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5TdGFydGluZ1xuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBfaGFuZGxlQnJva2VuQ29ubmVjdGlvbihldmVudERhdGEpIHtcbiAgICBpZiAodGhpcy5zdGF0dXMgPT09IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuRW5kZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zdGF0dXMgPSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLkVuZGVkO1xuICAgIC8vIERvIHdlIGV4cGxpY2l0bHkgaGF2ZSB0byB1bnN1YnNjcmliZSBiZWZvcmUgZGlzY29ubmVjdGluZyBNUVRUP1xuICAgIHRoaXMuX3Vuc3Vic2NyaWJlRnVuY3Rpb25zLmZvckVhY2goZiA9PiBmKCkpO1xuICAgIHRoaXMuZXZlbnRCdXMudHJpZ2dlcihDb25uZWN0aW9uSGVscGVyRXZlbnRzLkVuZGVkLCBldmVudERhdGEpO1xuICB9XG5cbiAgX2hhbmRsZUxvc3RDb25uZWN0aW9uKGV2ZW50RGF0YSkge1xuICAgIHRoaXMuc3RhdHVzID0gQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5Db25uZWN0aW9uTG9zdDtcbiAgICB0aGlzLmV2ZW50QnVzLnRyaWdnZXIoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5Db25uZWN0aW9uTG9zdCwgZXZlbnREYXRhKTtcbiAgICBpZiAoTmV0d29ya0luZm8uaXNPbmxpbmUoKSkge1xuICAgICAgdGhpcy5faW5pdGlhdGVDb25uZWN0V2l0aFJldHJ5KCkuY2F0Y2goKCkgPT4ge30pO1xuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVHYWluZWRDb25uZWN0aW9uKCkge1xuICAgIHRoaXMuc3RhdHVzID0gQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5Db25uZWN0ZWQ7XG4gICAgdGhpcy5ldmVudEJ1cy50cmlnZ2VyKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuQ29ubmVjdGlvbkdhaW5lZCwge30pO1xuICB9XG5cbiAgX3NldE5ldHdvcmtFdmVudEhhbmRsZXJzKCkge1xuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gTmV0d29ya0luZm8ub25PbmxpbmUoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX2Nvbm5lY3RDYWxsZWRBdGxlYXN0T25jZSAmJiB0aGlzLl9jYW5Db25uZWN0KCkpIHtcbiAgICAgICAgdGhpcy5faW5pdGlhdGVDb25uZWN0V2l0aFJldHJ5KCkuY2F0Y2goKCkgPT4ge30pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuX3Vuc3Vic2NyaWJlRnVuY3Rpb25zLnB1c2godW5zdWJzY3JpYmUpO1xuICB9XG5cbiAgb25FbmRlZChoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRCdXMuc3Vic2NyaWJlKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuRW5kZWQsIGhhbmRsZXIpO1xuICB9XG5cbiAgb25Db25uZWN0aW9uTG9zdChoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRCdXMuc3Vic2NyaWJlKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuQ29ubmVjdGlvbkxvc3QsIGhhbmRsZXIpO1xuICB9XG5cbiAgb25Db25uZWN0aW9uR2FpbihoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRCdXMuc3Vic2NyaWJlKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuQ29ubmVjdGlvbkdhaW5lZCwgaGFuZGxlcik7XG4gIH1cblxuICBvbk1lc3NhZ2UoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLmV2ZW50QnVzLnN1YnNjcmliZShDb25uZWN0aW9uSGVscGVyRXZlbnRzLkluY29taW5nTWVzc2FnZSwgaGFuZGxlcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW90Q29ubmVjdGlvbkhlbHBlcjtcbiIsImltcG9ydCB7IEV2ZW50QnVzIH0gZnJvbSBcIi4uL2V2ZW50YnVzXCI7XG5pbXBvcnQgeyBMb2dNYW5hZ2VyIH0gZnJvbSBcIi4uLy4uL2xvZ1wiO1xuaW1wb3J0IHsgVFJBTlNQT1JUX0xJRkVUSU1FX0lOX1NFQ09ORFMgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBcbiAgQ29ubmVjdGlvbkhlbHBlckV2ZW50cyxcbiAgQ29ubmVjdGlvbkhlbHBlclN0YXR1c1xufSBmcm9tIFwiLi9iYXNlQ29ubmVjdGlvbkhlbHBlclwiO1xuaW1wb3J0IEJhc2VDb25uZWN0aW9uSGVscGVyIGZyb20gXCIuL2Jhc2VDb25uZWN0aW9uSGVscGVyXCI7XG5cblxuY2xhc3MgTHBjQ29ubmVjdGlvbkhlbHBlciBleHRlbmRzIEJhc2VDb25uZWN0aW9uSGVscGVyIHtcblxuICBjb25zdHJ1Y3Rvcihpbml0aWFsQ29udGFjdElkLCBjb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyLCB3ZWJzb2NrZXRNYW5hZ2VyKSB7XG4gICAgc3VwZXIoY29ubmVjdGlvbkRldGFpbHNQcm92aWRlcik7XG4gICAgdGhpcy5jbGVhblVwQmFzZUluc3RhbmNlID0gIXdlYnNvY2tldE1hbmFnZXI7XG4gICAgaWYgKCFMcGNDb25uZWN0aW9uSGVscGVyLmJhc2VJbnN0YW5jZSkge1xuICAgICAgTHBjQ29ubmVjdGlvbkhlbHBlci5iYXNlSW5zdGFuY2UgPSBuZXcgTFBDQ29ubmVjdGlvbkhlbHBlckJhc2UoY29ubmVjdGlvbkRldGFpbHNQcm92aWRlciwgd2Vic29ja2V0TWFuYWdlcik7XG4gICAgfVxuICAgIHRoaXMuaW5pdGlhbENvbnRhY3RJZCA9IGluaXRpYWxDb250YWN0SWQ7XG4gICAgdGhpcy5ldmVudEJ1cyA9IG5ldyBFdmVudEJ1cygpO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtcbiAgICAgIExwY0Nvbm5lY3Rpb25IZWxwZXIuYmFzZUluc3RhbmNlLm9uRW5kZWQodGhpcy5oYW5kbGVFbmRlZC5iaW5kKHRoaXMpKSxcbiAgICAgIExwY0Nvbm5lY3Rpb25IZWxwZXIuYmFzZUluc3RhbmNlLm9uQ29ubmVjdGlvbkdhaW4odGhpcy5oYW5kbGVDb25uZWN0aW9uR2Fpbi5iaW5kKHRoaXMpKSxcbiAgICAgIExwY0Nvbm5lY3Rpb25IZWxwZXIuYmFzZUluc3RhbmNlLm9uQ29ubmVjdGlvbkxvc3QodGhpcy5oYW5kbGVDb25uZWN0aW9uTG9zdC5iaW5kKHRoaXMpKSxcbiAgICAgIExwY0Nvbm5lY3Rpb25IZWxwZXIuYmFzZUluc3RhbmNlLm9uTWVzc2FnZSh0aGlzLmhhbmRsZU1lc3NhZ2UuYmluZCh0aGlzKSlcbiAgICBdO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgc3VwZXIuc3RhcnQoKTtcbiAgICByZXR1cm4gTHBjQ29ubmVjdGlvbkhlbHBlci5iYXNlSW5zdGFuY2Uuc3RhcnQoKTtcbiAgfVxuXG4gIGVuZCgpIHtcbiAgICBzdXBlci5lbmQoKTtcbiAgICB0aGlzLmV2ZW50QnVzLnVuc3Vic2NyaWJlQWxsKCk7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goZiA9PiBmKCkpO1xuICAgIGlmIChMcGNDb25uZWN0aW9uSGVscGVyLmJhc2VJbnN0YW5jZSAmJiB0aGlzLmNsZWFuVXBCYXNlSW5zdGFuY2UpIHtcbiAgICAgIExwY0Nvbm5lY3Rpb25IZWxwZXIuYmFzZUluc3RhbmNlLmVuZCgpO1xuICAgICAgTHBjQ29ubmVjdGlvbkhlbHBlci5iYXNlSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGdldFN0YXR1cygpIHtcbiAgICByZXR1cm4gTHBjQ29ubmVjdGlvbkhlbHBlci5iYXNlSW5zdGFuY2UuZ2V0U3RhdHVzKCk7XG4gIH1cblxuICBvbkVuZGVkKGhhbmRsZXIpIHtcbiAgICByZXR1cm4gdGhpcy5ldmVudEJ1cy5zdWJzY3JpYmUoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5FbmRlZCwgaGFuZGxlcik7XG4gIH1cblxuICBoYW5kbGVFbmRlZCgpIHtcbiAgICB0aGlzLmV2ZW50QnVzLnRyaWdnZXIoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5FbmRlZCwge30pO1xuICB9XG5cbiAgb25Db25uZWN0aW9uR2FpbihoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRCdXMuc3Vic2NyaWJlKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuQ29ubmVjdGlvbkdhaW5lZCwgaGFuZGxlcik7XG4gIH1cblxuICBoYW5kbGVDb25uZWN0aW9uR2FpbigpIHtcbiAgICB0aGlzLmV2ZW50QnVzLnRyaWdnZXIoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5Db25uZWN0aW9uR2FpbmVkLCB7fSk7XG4gIH1cblxuICBvbkNvbm5lY3Rpb25Mb3N0KGhhbmRsZXIpIHtcbiAgICByZXR1cm4gdGhpcy5ldmVudEJ1cy5zdWJzY3JpYmUoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5Db25uZWN0aW9uTG9zdCwgaGFuZGxlcik7XG4gIH1cblxuICBoYW5kbGVDb25uZWN0aW9uTG9zdCgpIHtcbiAgICB0aGlzLmV2ZW50QnVzLnRyaWdnZXIoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5Db25uZWN0aW9uTG9zdCwge30pO1xuICB9XG5cbiAgb25NZXNzYWdlKGhhbmRsZXIpIHtcbiAgICByZXR1cm4gdGhpcy5ldmVudEJ1cy5zdWJzY3JpYmUoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5JbmNvbWluZ01lc3NhZ2UsIGhhbmRsZXIpO1xuICB9XG5cbiAgaGFuZGxlTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UuSW5pdGlhbENvbnRhY3RJZCA9PT0gdGhpcy5pbml0aWFsQ29udGFjdElkKSB7XG4gICAgICB0aGlzLmV2ZW50QnVzLnRyaWdnZXIoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5JbmNvbWluZ01lc3NhZ2UsIG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxufVxuTHBjQ29ubmVjdGlvbkhlbHBlci5iYXNlSW5zdGFuY2UgPSBudWxsO1xuXG5cbmNsYXNzIExQQ0Nvbm5lY3Rpb25IZWxwZXJCYXNlIHtcbiAgY29uc3RydWN0b3IoY29ubmVjdGlvbkRldGFpbHNQcm92aWRlciwgd2Vic29ja2V0TWFuYWdlcikge1xuICAgIHRoaXMuc3RhdHVzID0gQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5OZXZlclN0YXJ0ZWQ7XG4gICAgdGhpcy5ldmVudEJ1cyA9IG5ldyBFdmVudEJ1cygpO1xuICAgIHRoaXMubG9nZ2VyID0gTG9nTWFuYWdlci5nZXRMb2dnZXIoe1xuICAgICAgcHJlZml4OiBcIkxQQyBXZWJTb2NrZXRzOiBcIlxuICAgIH0pO1xuICAgIHRoaXMuaW5pdFdlYnNvY2tldE1hbmFnZXIod2Vic29ja2V0TWFuYWdlciwgY29ubmVjdGlvbkRldGFpbHNQcm92aWRlcik7XG4gIH1cblxuICBpbml0V2Vic29ja2V0TWFuYWdlcih3ZWJzb2NrZXRNYW5hZ2VyLCBjb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyKSB7XG4gICAgdGhpcy53ZWJzb2NrZXRNYW5hZ2VyID0gd2Vic29ja2V0TWFuYWdlciB8fCBjb25uZWN0LldlYlNvY2tldE1hbmFnZXIuY3JlYXRlKCk7XG4gICAgdGhpcy53ZWJzb2NrZXRNYW5hZ2VyLnN1YnNjcmliZVRvcGljcyhbXCJhd3MvY2hhdFwiXSk7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW1xuICAgICAgdGhpcy53ZWJzb2NrZXRNYW5hZ2VyLm9uTWVzc2FnZShcImF3cy9jaGF0XCIsIHRoaXMuaGFuZGxlTWVzc2FnZS5iaW5kKHRoaXMpKSxcbiAgICAgIHRoaXMud2Vic29ja2V0TWFuYWdlci5vbkNvbm5lY3Rpb25HYWluKHRoaXMuaGFuZGxlQ29ubmVjdGlvbkdhaW4uYmluZCh0aGlzKSksXG4gICAgICB0aGlzLndlYnNvY2tldE1hbmFnZXIub25Db25uZWN0aW9uTG9zdCh0aGlzLmhhbmRsZUNvbm5lY3Rpb25Mb3N0LmJpbmQodGhpcykpLFxuICAgICAgdGhpcy53ZWJzb2NrZXRNYW5hZ2VyLm9uSW5pdEZhaWx1cmUodGhpcy5oYW5kbGVFbmRlZC5iaW5kKHRoaXMpKVxuICAgIF07XG4gICAgaWYgKCF3ZWJzb2NrZXRNYW5hZ2VyKSB7XG4gICAgICB0aGlzLndlYnNvY2tldE1hbmFnZXIuaW5pdChcbiAgICAgICAgKCkgPT4gY29ubmVjdGlvbkRldGFpbHNQcm92aWRlci5mZXRjaENvbm5lY3Rpb25EZXRhaWxzKClcbiAgICAgICAgICAudGhlbihjb25uZWN0aW9uRGV0YWlscyA9PiAoe1xuICAgICAgICAgICAgd2ViU29ja2V0VHJhbnNwb3J0OiB7XG4gICAgICAgICAgICAgIHVybDogY29ubmVjdGlvbkRldGFpbHMucHJlU2lnbmVkQ29ubmVjdGlvblVybCxcbiAgICAgICAgICAgICAgdHJhbnNwb3J0TGlmZVRpbWVJblNlY29uZHM6IFRSQU5TUE9SVF9MSUZFVElNRV9JTl9TRUNPTkRTXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGVuZCgpIHtcbiAgICB0aGlzLndlYnNvY2tldE1hbmFnZXIuY2xvc2VXZWJTb2NrZXQoKTtcbiAgICB0aGlzLmV2ZW50QnVzLnVuc3Vic2NyaWJlQWxsKCk7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goZiA9PiBmKCkpO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgaWYgKHRoaXMuc3RhdHVzID09PSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLk5ldmVyU3RhcnRlZCkge1xuICAgICAgdGhpcy5zdGF0dXMgPSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLlN0YXJ0aW5nO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBvbkVuZGVkKGhhbmRsZXIpIHtcbiAgICByZXR1cm4gdGhpcy5ldmVudEJ1cy5zdWJzY3JpYmUoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5FbmRlZCwgaGFuZGxlcik7XG4gIH1cblxuICBoYW5kbGVFbmRlZCgpIHtcbiAgICB0aGlzLnN0YXR1cyA9IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuRW5kZWQ7XG4gICAgdGhpcy5ldmVudEJ1cy50cmlnZ2VyKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuRW5kZWQsIHt9KTtcbiAgfVxuXG4gIG9uQ29ubmVjdGlvbkdhaW4oaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLmV2ZW50QnVzLnN1YnNjcmliZShDb25uZWN0aW9uSGVscGVyRXZlbnRzLkNvbm5lY3Rpb25HYWluZWQsIGhhbmRsZXIpO1xuICB9XG5cbiAgaGFuZGxlQ29ubmVjdGlvbkdhaW4oKSB7XG4gICAgdGhpcy5zdGF0dXMgPSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLkNvbm5lY3RlZDtcbiAgICB0aGlzLmV2ZW50QnVzLnRyaWdnZXIoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5Db25uZWN0aW9uR2FpbmVkLCB7fSk7XG4gIH1cblxuICBvbkNvbm5lY3Rpb25Mb3N0KGhhbmRsZXIpIHtcbiAgICByZXR1cm4gdGhpcy5ldmVudEJ1cy5zdWJzY3JpYmUoQ29ubmVjdGlvbkhlbHBlckV2ZW50cy5Db25uZWN0aW9uTG9zdCwgaGFuZGxlcik7XG4gIH1cblxuICBoYW5kbGVDb25uZWN0aW9uTG9zdCgpIHtcbiAgICB0aGlzLnN0YXR1cyA9IENvbm5lY3Rpb25IZWxwZXJTdGF0dXMuQ29ubmVjdGlvbkxvc3Q7XG4gICAgdGhpcy5ldmVudEJ1cy50cmlnZ2VyKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuQ29ubmVjdGlvbkxvc3QsIHt9KTtcbiAgfVxuXG4gIG9uTWVzc2FnZShoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRCdXMuc3Vic2NyaWJlKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuSW5jb21pbmdNZXNzYWdlLCBoYW5kbGVyKTtcbiAgfVxuXG4gIGhhbmRsZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgIGxldCBwYXJzZWRNZXNzYWdlO1xuICAgIHRyeSB7XG4gICAgICBwYXJzZWRNZXNzYWdlID0gSlNPTi5wYXJzZShtZXNzYWdlLmNvbnRlbnQpO1xuICAgICAgdGhpcy5ldmVudEJ1cy50cmlnZ2VyKENvbm5lY3Rpb25IZWxwZXJFdmVudHMuSW5jb21pbmdNZXNzYWdlLCBwYXJzZWRNZXNzYWdlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihgV3JvbmcgbWVzc2FnZSBmb3JtYXQ6IGAsIG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMcGNDb25uZWN0aW9uSGVscGVyO1xuIiwiaW1wb3J0IHsgQ29ubmVjdGlvblR5cGUgfSBmcm9tIFwiLi9iYXNlQ29ubmVjdGlvbkhlbHBlclwiO1xuaW1wb3J0IENvbm5lY3Rpb25EZXRhaWxzUHJvdmlkZXIgZnJvbSBcIi4vY29ubmVjdGlvbkRldGFpbHNQcm92aWRlclwiO1xuXG5pbXBvcnQgSW90Q29ubmVjdGlvbkhlbHBlciBmcm9tIFwiLi9Jb3RDb25uZWN0aW9uSGVscGVyXCI7XG5pbXBvcnQgTHBjQ29ubmVjdGlvbkhlbHBlciBmcm9tIFwiLi9McGNDb25uZWN0aW9uSGVscGVyXCI7XG5cbmNsYXNzIENvbm5lY3Rpb25IZWxwZXJQcm92aWRlciB7XG5cbiAgZ2V0KHtjb250YWN0SWQsIGluaXRpYWxDb250YWN0SWQsIGNvbm5lY3Rpb25EZXRhaWxzLCBwYXJ0aWNpcGFudFRva2VuLCBjaGF0Q2xpZW50LCB3ZWJzb2NrZXRNYW5hZ2VyLCByZWNvbm5lY3RDb25maWd9KSB7XG4gICAgY29uc3QgY29ubmVjdGlvbkRldGFpbHNQcm92aWRlciA9IG5ldyBDb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyKGNvbm5lY3Rpb25EZXRhaWxzLCBwYXJ0aWNpcGFudFRva2VuLCBjaGF0Q2xpZW50KTtcbiAgICByZXR1cm4gY29ubmVjdGlvbkRldGFpbHNQcm92aWRlci5pbml0KCkudGhlbigoKSA9PiB7XG4gICAgICBpZiAoY29ubmVjdGlvbkRldGFpbHNQcm92aWRlci5jb25uZWN0aW9uVHlwZSA9PT0gQ29ubmVjdGlvblR5cGUuTFBDKSB7XG4gICAgICAgIHJldHVybiBuZXcgTHBjQ29ubmVjdGlvbkhlbHBlcihpbml0aWFsQ29udGFjdElkLCBjb25uZWN0aW9uRGV0YWlsc1Byb3ZpZGVyLCB3ZWJzb2NrZXRNYW5hZ2VyKTtcbiAgICAgIH0gZWxzZSBpZiAoY29ubmVjdGlvbkRldGFpbHNQcm92aWRlci5jb25uZWN0aW9uVHlwZSA9PT0gQ29ubmVjdGlvblR5cGUuSU9UKSB7XG4gICAgICAgIHJldHVybiBuZXcgSW90Q29ubmVjdGlvbkhlbHBlcihjb250YWN0SWQsIGNvbm5lY3Rpb25EZXRhaWxzUHJvdmlkZXIsIHJlY29ubmVjdENvbmZpZyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IENvbm5lY3Rpb25IZWxwZXJQcm92aWRlcigpO1xuIiwiaW1wb3J0IHsgQ29ubmVjdGlvbkhlbHBlclN0YXR1cyB9IGZyb20gXCIuL2Nvbm5lY3Rpb25IZWxwZXJzL2Jhc2VDb25uZWN0aW9uSGVscGVyXCI7XG5pbXBvcnQge1xuICBDSEFUX0VWRU5UUyxcbiAgVFJBTlNDUklQVF9ERUZBVUxUX1BBUkFNUyxcbiAgQUdFTlRfUkVDT05ORUNUX0NPTkZJRyxcbiAgQ1VTVE9NRVJfUkVDT05ORUNUX0NPTkZJRyxcbiAgU0VTU0lPTl9UWVBFUyxcbiAgQ09OVEVOVF9UWVBFXG59IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IExvZ01hbmFnZXIgfSBmcm9tIFwiLi4vbG9nXCI7XG5pbXBvcnQgeyBFdmVudEJ1cyB9IGZyb20gXCIuL2V2ZW50YnVzXCI7XG5pbXBvcnQgeyBDaGF0U2VydmljZUFyZ3NWYWxpZGF0b3IgfSBmcm9tIFwiLi9jaGF0QXJnc1ZhbGlkYXRvclwiO1xuaW1wb3J0IGNvbm5lY3Rpb25IZWxwZXJQcm92aWRlciBmcm9tIFwiLi9jb25uZWN0aW9uSGVscGVycy9jb25uZWN0aW9uSGVscGVyUHJvdmlkZXJcIjtcblxudmFyIE5ldHdvcmtMaW5rU3RhdHVzID0ge1xuICBOZXZlckVzdGFibGlzaGVkOiBcIk5ldmVyRXN0YWJsaXNoZWRcIixcbiAgRXN0YWJsaXNoaW5nOiBcIkVzdGFibGlzaGluZ1wiLFxuICBFc3RhYmxpc2hlZDogXCJFc3RhYmxpc2hlZFwiLFxuICBCcm9rZW46IFwiQnJva2VuXCJcbn07XG5cbmNsYXNzIENoYXRDb250cm9sbGVyIHtcblxuICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgdGhpcy5sb2dnZXIgPSBMb2dNYW5hZ2VyLmdldExvZ2dlcih7XG4gICAgICBwcmVmaXg6IFwiQ29udGFjdElkLVwiICsgYXJncy5jaGF0RGV0YWlscy5jb250YWN0SWQgKyBcIjogXCJcbiAgICB9KTtcbiAgICB0aGlzLmFyZ3NWYWxpZGF0b3IgPSBuZXcgQ2hhdFNlcnZpY2VBcmdzVmFsaWRhdG9yKCk7XG4gICAgdGhpcy5wdWJzdWIgPSBuZXcgRXZlbnRCdXMoKTtcbiAgICB0aGlzLnNlc3Npb25UeXBlID0gYXJncy5zZXNzaW9uVHlwZTtcbiAgICB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzID0gYXJncy5jaGF0RGV0YWlscy5jb25uZWN0aW9uRGV0YWlscztcbiAgICB0aGlzLmluaXRpYWxDb250YWN0SWQgPSBhcmdzLmNoYXREZXRhaWxzLmluaXRpYWxDb250YWN0SWQ7XG4gICAgdGhpcy5jb250YWN0SWQgPSBhcmdzLmNoYXREZXRhaWxzLmNvbnRhY3RJZDtcbiAgICB0aGlzLnBhcnRpY2lwYW50SWQgPSBhcmdzLmNoYXREZXRhaWxzLnBhcnRpY2lwYW50SWQ7XG4gICAgdGhpcy5jaGF0Q2xpZW50ID0gYXJncy5jaGF0Q2xpZW50O1xuICAgIHRoaXMucGFydGljaXBhbnRUb2tlbiA9IGFyZ3MuY2hhdERldGFpbHMucGFydGljaXBhbnRUb2tlbjtcbiAgICB0aGlzLndlYnNvY2tldE1hbmFnZXIgPSBhcmdzLndlYnNvY2tldE1hbmFnZXI7XG4gICAgdGhpcy5fcGFydGljaXBhbnREaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnNlc3Npb25NZXRhZGF0YSA9IHt9O1xuICB9XG5cbiAgc3Vic2NyaWJlKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICB0aGlzLnB1YnN1Yi5zdWJzY3JpYmUoZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhcIlN1YnNjcmliZWQgc3VjY2Vzc2Z1bGx5IHRvIGV2ZW50TmFtZTogXCIsIGV2ZW50TmFtZSk7XG4gIH1cblxuICBoYW5kbGVSZXF1ZXN0U3VjY2VzcyhtZXRhZGF0YSwgcmVxdWVzdCwgcmVxdWVzdE5hbWUpIHtcbiAgICByZXR1cm4gcmVzcG9uc2UgPT4ge1xuICAgICAgcmVzcG9uc2UubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGAke3JlcXVlc3ROYW1lfSBzdWNjZXNzZnVsISBSZXNwb25zZTogYCwgcmVzcG9uc2UsIFwiIC8gUmVxdWVzdDogXCIsIHJlcXVlc3QpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH07XG4gIH1cblxuICBoYW5kbGVSZXF1ZXN0RmFpbHVyZShtZXRhZGF0YSwgcmVxdWVzdCwgcmVxdWVzdE5hbWUpIHtcbiAgICByZXR1cm4gZXJyb3IgPT4ge1xuICAgICAgZXJyb3IubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGAke3JlcXVlc3ROYW1lfSBmYWlsZWQhIEVycm9yOiBgLCBlcnJvciwgXCIgLyBSZXF1ZXN0OiBcIiwgcmVxdWVzdCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH07XG4gIH1cblxuICBzZW5kTWVzc2FnZShhcmdzKSB7XG4gICAgY29uc3QgbWV0YWRhdGEgPSBhcmdzLm1ldGFkYXRhIHx8IG51bGw7XG4gICAgdGhpcy5hcmdzVmFsaWRhdG9yLnZhbGlkYXRlU2VuZE1lc3NhZ2UoYXJncyk7XG4gICAgY29uc3QgY29ubmVjdGlvblRva2VuID0gdGhpcy5jb25uZWN0aW9uSGVscGVyLmdldENvbm5lY3Rpb25Ub2tlbigpO1xuICAgIHJldHVybiB0aGlzLmNoYXRDbGllbnRcbiAgICAgIC5zZW5kTWVzc2FnZShjb25uZWN0aW9uVG9rZW4sIGFyZ3MubWVzc2FnZSwgYXJncy5jb250ZW50VHlwZSlcbiAgICAgIC50aGVuKHRoaXMuaGFuZGxlUmVxdWVzdFN1Y2Nlc3MobWV0YWRhdGEsIGFyZ3MsIFwic2VuZE1lc3NhZ2VcIikpXG4gICAgICAuY2F0Y2godGhpcy5oYW5kbGVSZXF1ZXN0RmFpbHVyZShtZXRhZGF0YSwgYXJncywgXCJzZW5kTWVzc2FnZVwiKSk7XG4gIH1cblxuICBzZW5kRXZlbnQoYXJncykge1xuICAgIGNvbnN0IG1ldGFkYXRhID0gYXJncy5tZXRhZGF0YSB8fCBudWxsO1xuICAgIHRoaXMuYXJnc1ZhbGlkYXRvci52YWxpZGF0ZVNlbmRFdmVudChhcmdzKTtcbiAgICBjb25zdCBjb25uZWN0aW9uVG9rZW4gPSB0aGlzLmNvbm5lY3Rpb25IZWxwZXIuZ2V0Q29ubmVjdGlvblRva2VuKCk7XG4gICAgY29uc3QgY29udGVudCA9IGFyZ3MuY29udGVudCB8fCBudWxsO1xuICAgIHJldHVybiB0aGlzLmNoYXRDbGllbnRcbiAgICAgIC5zZW5kRXZlbnQoXG4gICAgICAgIGNvbm5lY3Rpb25Ub2tlbixcbiAgICAgICAgYXJncy5jb250ZW50VHlwZSxcbiAgICAgICAgY29udGVudFxuICAgICAgKVxuICAgICAgLnRoZW4odGhpcy5oYW5kbGVSZXF1ZXN0U3VjY2VzcyhtZXRhZGF0YSwgYXJncywgXCJzZW5kRXZlbnRcIikpXG4gICAgICAuY2F0Y2godGhpcy5oYW5kbGVSZXF1ZXN0RmFpbHVyZShtZXRhZGF0YSwgYXJncywgXCJzZW5kRXZlbnRcIikpO1xuICB9XG5cbiAgZ2V0VHJhbnNjcmlwdChpbnB1dEFyZ3MpIHtcbiAgICBjb25zdCBtZXRhZGF0YSA9IGlucHV0QXJncy5tZXRhZGF0YSB8fCBudWxsO1xuICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICBzdGFydFBvc2l0aW9uOiBpbnB1dEFyZ3Muc3RhcnRQb3NpdGlvbiB8fCB7fSxcbiAgICAgIHNjYW5EaXJlY3Rpb246IGlucHV0QXJncy5zY2FuRGlyZWN0aW9uIHx8IFRSQU5TQ1JJUFRfREVGQVVMVF9QQVJBTVMuU0NBTl9ESVJFQ1RJT04sXG4gICAgICBzb3J0T3JkZXI6IGlucHV0QXJncy5zb3J0T3JkZXIgfHwgVFJBTlNDUklQVF9ERUZBVUxUX1BBUkFNUy5TT1JUX09SREVSLFxuICAgICAgbWF4UmVzdWx0czogaW5wdXRBcmdzLm1heFJlc3VsdHMgfHwgVFJBTlNDUklQVF9ERUZBVUxUX1BBUkFNUy5NQVhfUkVTVUxUUyxcbiAgICB9O1xuICAgIGlmIChpbnB1dEFyZ3MubmV4dFRva2VuKSB7XG4gICAgICBhcmdzLm5leHRUb2tlbiA9IGlucHV0QXJncy5uZXh0VG9rZW47XG4gICAgfVxuICAgIGlmIChpbnB1dEFyZ3MuY29udGFjdElkKSB7XG4gICAgICBhcmdzLmNvbnRhY3RJZCA9IGlucHV0QXJncy5jb250YWN0SWQ7XG4gICAgfVxuICAgIGNvbnN0IGNvbm5lY3Rpb25Ub2tlbiA9IHRoaXMuY29ubmVjdGlvbkhlbHBlci5nZXRDb25uZWN0aW9uVG9rZW4oKTtcbiAgICByZXR1cm4gdGhpcy5jaGF0Q2xpZW50XG4gICAgICAuZ2V0VHJhbnNjcmlwdChjb25uZWN0aW9uVG9rZW4sIGFyZ3MpXG4gICAgICAudGhlbih0aGlzLmhhbmRsZVJlcXVlc3RTdWNjZXNzKG1ldGFkYXRhLCBhcmdzLCBcImdldFRyYW5zY3JpcHRcIikpXG4gICAgICAuY2F0Y2godGhpcy5oYW5kbGVSZXF1ZXN0RmFpbHVyZShtZXRhZGF0YSwgYXJncywgXCJnZXRUcmFuc2NyaXB0XCIpKTtcbiAgfVxuXG4gIGNvbm5lY3QoYXJncz17fSkge1xuICAgIHRoaXMuc2Vzc2lvbk1ldGFkYXRhID0gYXJncy5tZXRhZGF0YSB8fCBudWxsO1xuICAgIHRoaXMuYXJnc1ZhbGlkYXRvci52YWxpZGF0ZUNvbm5lY3RDaGF0KGFyZ3MpO1xuXG4gICAgcmV0dXJuIGNvbm5lY3Rpb25IZWxwZXJQcm92aWRlclxuICAgICAgLmdldCh7XG4gICAgICAgIGNvbnRhY3RJZDogdGhpcy5jb250YWN0SWQsXG4gICAgICAgIGluaXRpYWxDb250YWN0SWQ6IHRoaXMuaW5pdGlhbENvbnRhY3RJZCxcbiAgICAgICAgY29ubmVjdGlvbkRldGFpbHM6IHRoaXMuY29ubmVjdGlvbkRldGFpbHMsXG4gICAgICAgIHBhcnRpY2lwYW50VG9rZW46IHRoaXMucGFydGljaXBhbnRUb2tlbixcbiAgICAgICAgY2hhdENsaWVudDogdGhpcy5jaGF0Q2xpZW50LFxuICAgICAgICB3ZWJzb2NrZXRNYW5hZ2VyOiB0aGlzLndlYnNvY2tldE1hbmFnZXIsXG4gICAgICAgIHJlY29ubmVjdENvbmZpZzogdGhpcy5zZXNzaW9uVHlwZSA9PT0gU0VTU0lPTl9UWVBFUy5BR0VOVCA/IEFHRU5UX1JFQ09OTkVDVF9DT05GSUcgOiBDVVNUT01FUl9SRUNPTk5FQ1RfQ09ORklHXG4gICAgICB9KVxuICAgICAgLnRoZW4oXG4gICAgICAgIHRoaXMuX2luaXRDb25uZWN0aW9uSGVscGVyLmJpbmQodGhpcylcbiAgICAgIClcbiAgICAgIC50aGVuKFxuICAgICAgICB0aGlzLl9vbkNvbm5lY3RTdWNjZXNzLmJpbmQodGhpcyksXG4gICAgICAgIHRoaXMuX29uQ29ubmVjdEZhaWx1cmUuYmluZCh0aGlzKVxuICAgICAgKTtcbiAgfVxuXG4gIF9pbml0Q29ubmVjdGlvbkhlbHBlcihjb25uZWN0aW9uSGVscGVyKSB7XG4gICAgdGhpcy5jb25uZWN0aW9uSGVscGVyID0gY29ubmVjdGlvbkhlbHBlcjtcbiAgICB0aGlzLmNvbm5lY3Rpb25IZWxwZXIub25FbmRlZCh0aGlzLl9oYW5kbGVFbmRlZENvbm5lY3Rpb24uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5jb25uZWN0aW9uSGVscGVyLm9uQ29ubmVjdGlvbkxvc3QodGhpcy5faGFuZGxlTG9zdENvbm5lY3Rpb24uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5jb25uZWN0aW9uSGVscGVyLm9uQ29ubmVjdGlvbkdhaW4odGhpcy5faGFuZGxlR2FpbmVkQ29ubmVjdGlvbi5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmNvbm5lY3Rpb25IZWxwZXIub25NZXNzYWdlKHRoaXMuX2hhbmRsZUluY29taW5nTWVzc2FnZS5iaW5kKHRoaXMpKTtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uSGVscGVyLnN0YXJ0KCk7XG4gIH1cblxuICBfaGFuZGxlRW5kZWRDb25uZWN0aW9uKGV2ZW50RGF0YSkge1xuICAgIHRoaXMuX2ZvcndhcmRDaGF0RXZlbnQoQ0hBVF9FVkVOVFMuQ09OTkVDVElPTl9CUk9LRU4sIHtcbiAgICAgIGRhdGE6IGV2ZW50RGF0YSxcbiAgICAgIGNoYXREZXRhaWxzOiB0aGlzLmdldENoYXREZXRhaWxzKClcbiAgICB9KTtcbiAgfVxuXG4gIF9oYW5kbGVMb3N0Q29ubmVjdGlvbihldmVudERhdGEpIHtcbiAgICB0aGlzLl9mb3J3YXJkQ2hhdEV2ZW50KENIQVRfRVZFTlRTLkNPTk5FQ1RJT05fTE9TVCwge1xuICAgICAgZGF0YTogZXZlbnREYXRhLFxuICAgICAgY2hhdERldGFpbHM6IHRoaXMuZ2V0Q2hhdERldGFpbHMoKVxuICAgIH0pO1xuICB9XG5cbiAgX2hhbmRsZUdhaW5lZENvbm5lY3Rpb24oZXZlbnREYXRhKSB7XG4gICAgdGhpcy5fZm9yd2FyZENoYXRFdmVudChDSEFUX0VWRU5UUy5DT05ORUNUSU9OX0VTVEFCTElTSEVELCB7XG4gICAgICBkYXRhOiBldmVudERhdGEsXG4gICAgICBjaGF0RGV0YWlsczogdGhpcy5nZXRDaGF0RGV0YWlscygpXG4gICAgfSk7XG4gIH1cblxuICBfaGFuZGxlSW5jb21pbmdNZXNzYWdlKGluY29taW5nRGF0YSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBldmVudFR5cGUgPSBpbmNvbWluZ0RhdGEuQ29udGVudFR5cGUgPT09IENPTlRFTlRfVFlQRS50eXBpbmcgPyBDSEFUX0VWRU5UUy5JTkNPTUlOR19UWVBJTkcgOiBDSEFUX0VWRU5UUy5JTkNPTUlOR19NRVNTQUdFO1xuICAgICAgdGhpcy5fZm9yd2FyZENoYXRFdmVudChldmVudFR5cGUsIHtcbiAgICAgICAgZGF0YTogaW5jb21pbmdEYXRhLFxuICAgICAgICBjaGF0RGV0YWlsczogdGhpcy5nZXRDaGF0RGV0YWlscygpXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgXCJFcnJvciBvY2N1cmVkIHdoaWxlIGhhbmRsaW5nIG1lc3NhZ2UgZnJvbSBDb25uZWN0aW9uLiBldmVudERhdGE6IFwiLFxuICAgICAgICBpbmNvbWluZ0RhdGEsXG4gICAgICAgIFwiIENhdXNpbmcgZXhjZXB0aW9uOiBcIixcbiAgICAgICAgZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBfZm9yd2FyZENoYXRFdmVudChldmVudE5hbWUsIGV2ZW50RGF0YSkge1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKFwiVHJpZ2dlcmluZyBldmVudCBmb3Igc3Vic2NyaWJlcnM6XCIsIGV2ZW50TmFtZSwgZXZlbnREYXRhKTtcbiAgICB0aGlzLnB1YnN1Yi50cmlnZ2VyQXN5bmMoZXZlbnROYW1lLCBldmVudERhdGEpO1xuICB9XG5cbiAgX29uQ29ubmVjdFN1Y2Nlc3MocmVzcG9uc2UpIHtcbiAgICB0aGlzLmxvZ2dlci5pbmZvKFwiQ29ubmVjdCBzdWNjZXNzZnVsIVwiKTtcbiAgICBjb25zdCByZXNwb25zZU9iamVjdCA9IHtcbiAgICAgIF9kZWJ1ZzogcmVzcG9uc2UsXG4gICAgICBjb25uZWN0U3VjY2VzczogdHJ1ZSxcbiAgICAgIGNvbm5lY3RDYWxsZWQ6IHRydWUsXG4gICAgICBtZXRhZGF0YTogdGhpcy5zZXNzaW9uTWV0YWRhdGFcbiAgICB9O1xuICAgIGNvbnN0IGV2ZW50RGF0YSA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgY2hhdERldGFpbHM6IHRoaXMuZ2V0Q2hhdERldGFpbHMoKVxuICAgIH0sIHJlc3BvbnNlT2JqZWN0KTtcbiAgICB0aGlzLnB1YnN1Yi50cmlnZ2VyQXN5bmMoQ0hBVF9FVkVOVFMuQ09OTkVDVElPTl9FU1RBQkxJU0hFRCwgZXZlbnREYXRhKTtcblxuICAgIGlmICh0aGlzLl9zaG91bGRBY2tub3dsZWRnZUNvbnRhY3QoKSkge1xuICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICBjb250ZW50VHlwZTogQ09OVEVOVF9UWVBFLmNvbm5lY3Rpb25BY2tub3dsZWRnZWRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZU9iamVjdDtcbiAgfVxuXG4gIF9vbkNvbm5lY3RGYWlsdXJlKGVycm9yKSB7XG4gICAgY29uc3QgZXJyb3JPYmplY3QgPSB7XG4gICAgICBfZGVidWc6IGVycm9yLFxuICAgICAgY29ubmVjdFN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgY29ubmVjdENhbGxlZDogdHJ1ZSxcbiAgICAgIG1ldGFkYXRhOiB0aGlzLnNlc3Npb25NZXRhZGF0YVxuICAgIH07XG4gICAgdGhpcy5sb2dnZXIuZXJyb3IoXCJDb25uZWN0IEZhaWxlZCB3aXRoIGRhdGE6IFwiLCBlcnJvck9iamVjdCk7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yT2JqZWN0KTtcbiAgfVxuXG4gIF9zaG91bGRBY2tub3dsZWRnZUNvbnRhY3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2Vzc2lvblR5cGUgPT09IFNFU1NJT05fVFlQRVMuQUdFTlQ7XG4gIH1cblxuICBicmVha0Nvbm5lY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbkhlbHBlclxuICAgICAgPyB0aGlzLmNvbm5lY3Rpb25IZWxwZXIuZW5kKClcbiAgICAgIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICAvLyBEbyBhbnkgY2xlYW4gdXAgdGhhdCBuZWVkcyB0byBiZSBkb25lIHVwb24gdGhlIHBhcnRpY2lwYW50IGJlaW5nIGRpc2Nvbm5lY3RlZCBmcm9tIHRoZSBjaGF0IC1cbiAgLy8gZGlzY29ubmVjdGVkIGhlcmUgbWVhbnMgdGhhdCB0aGUgcGFydGljaXBhbnQgaXMgbm8gbG9uZ2VyIHBhcnQgb2YgdGhlciBjaGF0LlxuICBjbGVhblVwT25QYXJ0aWNpcGFudERpc2Nvbm5lY3QoKSB7XG4gICAgdGhpcy5wdWJzdWIudW5zdWJzY3JpYmVBbGwoKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RQYXJ0aWNpcGFudCgpIHtcbiAgICBjb25zdCBjb25uZWN0aW9uVG9rZW4gPSB0aGlzLmNvbm5lY3Rpb25IZWxwZXIuZ2V0Q29ubmVjdGlvblRva2VuKCk7XG4gICAgcmV0dXJuIHRoaXMuY2hhdENsaWVudFxuICAgICAgLmRpc2Nvbm5lY3RQYXJ0aWNpcGFudChjb25uZWN0aW9uVG9rZW4pXG4gICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmluZm8oXCJkaXNjb25uZWN0IHBhcnRpY2lwYW50IHN1Y2Nlc3NmdWxcIik7XG4gICAgICAgIHRoaXMuX3BhcnRpY2lwYW50RGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jbGVhblVwT25QYXJ0aWNpcGFudERpc2Nvbm5lY3QoKTtcbiAgICAgICAgdGhpcy5icmVha0Nvbm5lY3Rpb24oKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcImRpc2Nvbm5lY3QgcGFydGljaXBhbnQgZmFpbGVkIHdpdGggZXJyb3I6IFwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICB9KTtcbiAgfVxuXG4gIGdldENoYXREZXRhaWxzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbml0aWFsQ29udGFjdElkOiB0aGlzLmluaXRpYWxDb250YWN0SWQsXG4gICAgICBjb250YWN0SWQ6IHRoaXMuY29udGFjdElkLFxuICAgICAgcGFydGljaXBhbnRJZDogdGhpcy5wYXJ0aWNpcGFudElkLFxuICAgICAgcGFydGljaXBhbnRUb2tlbjogdGhpcy5wYXJ0aWNpcGFudFRva2VuLFxuICAgICAgY29ubmVjdGlvbkRldGFpbHM6IHRoaXMuY29ubmVjdGlvbkRldGFpbHNcbiAgICB9O1xuICB9XG5cbiAgX2NvbnZlcnRDb25uZWN0aW9uSGVscGVyU3RhdHVzKGNvbm5lY3Rpb25IZWxwZXJTdGF0dXMpIHtcbiAgICBzd2l0Y2ggKGNvbm5lY3Rpb25IZWxwZXJTdGF0dXMpIHtcbiAgICAgIGNhc2UgQ29ubmVjdGlvbkhlbHBlclN0YXR1cy5OZXZlclN0YXJ0ZWQ6XG4gICAgICAgIHJldHVybiBOZXR3b3JrTGlua1N0YXR1cy5OZXZlckVzdGFibGlzaGVkO1xuICAgICAgY2FzZSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLlN0YXJ0aW5nOlxuICAgICAgICByZXR1cm4gTmV0d29ya0xpbmtTdGF0dXMuRXN0YWJsaXNoaW5nO1xuICAgICAgY2FzZSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLkVuZGVkOlxuICAgICAgICByZXR1cm4gTmV0d29ya0xpbmtTdGF0dXMuQnJva2VuO1xuICAgICAgY2FzZSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLkNvbm5lY3Rpb25Mb3N0OlxuICAgICAgICByZXR1cm4gTmV0d29ya0xpbmtTdGF0dXMuQnJva2VuO1xuICAgICAgY2FzZSBDb25uZWN0aW9uSGVscGVyU3RhdHVzLkNvbm5lY3RlZDpcbiAgICAgICAgcmV0dXJuIE5ldHdvcmtMaW5rU3RhdHVzLkVzdGFibGlzaGVkO1xuICAgIH1cbiAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgIFwiUmVhY2hlZCBpbnZhbGlkIHN0YXRlLiBVbmtub3duIGNvbm5lY3Rpb25IZWxwZXJTdGF0dXM6IFwiLFxuICAgICAgY29ubmVjdGlvbkhlbHBlclN0YXR1c1xuICAgICk7XG4gIH1cblxuICBnZXRDb25uZWN0aW9uU3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLl9jb252ZXJ0Q29ubmVjdGlvbkhlbHBlclN0YXR1cyhcbiAgICAgIHRoaXMuY29ubmVjdGlvbkhlbHBlci5nZXRTdGF0dXMoKVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IHsgQ2hhdENvbnRyb2xsZXIsIE5ldHdvcmtMaW5rU3RhdHVzIH07XG4iLCJpbXBvcnQge1xuICBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uLFxuICBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb25cbn0gZnJvbSBcIi4vZXhjZXB0aW9uc1wiO1xuaW1wb3J0IHsgQ2hhdENsaWVudEZhY3RvcnkgfSBmcm9tIFwiLi4vY2xpZW50L2NsaWVudFwiO1xuaW1wb3J0IHsgQ2hhdFNlcnZpY2VBcmdzVmFsaWRhdG9yIH0gZnJvbSBcIi4vY2hhdEFyZ3NWYWxpZGF0b3JcIjtcbmltcG9ydCB7IFNFU1NJT05fVFlQRVMsIENIQVRfRVZFTlRTIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgR2xvYmFsQ29uZmlnIH0gZnJvbSBcIi4uL2dsb2JhbENvbmZpZ1wiO1xuaW1wb3J0IHsgQ2hhdENvbnRyb2xsZXIgfSBmcm9tIFwiLi9jaGF0Q29udHJvbGxlclwiO1xuaW1wb3J0IHsgTG9nTWFuYWdlciwgTG9nTGV2ZWwsIExvZ2dlciB9IGZyb20gXCIuLi9sb2dcIjtcblxuY2xhc3MgQ2hhdFNlc3Npb25GYWN0b3J5IHtcbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyovXG5cbiAgY3JlYXRlQWdlbnRDaGF0Q29udHJvbGxlcihjaGF0RGV0YWlscywgcGFydGljaXBhbnRUeXBlKSB7XG4gICAgdGhyb3cgbmV3IFVuSW1wbGVtZW50ZWRNZXRob2RFeGNlcHRpb24oXG4gICAgICBcImNyZWF0ZUFnZW50Q2hhdENvbnRyb2xsZXIgaW4gQ2hhdENvbnRyb2xsZXJGYWN0b3J5LlwiXG4gICAgKTtcbiAgfVxuXG4gIGNyZWF0ZUN1c3RvbWVyQ2hhdENvbnRyb2xsZXIoY2hhdERldGFpbHMsIHBhcnRpY2lwYW50VHlwZSkge1xuICAgIHRocm93IG5ldyBVbkltcGxlbWVudGVkTWV0aG9kRXhjZXB0aW9uKFxuICAgICAgXCJjcmVhdGVDdXN0b21lckNoYXRDb250cm9sbGVyIGluIENoYXRDb250cm9sbGVyRmFjdG9yeS5cIlxuICAgICk7XG4gIH1cbiAgLyplc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzKi9cbn1cblxuY2xhc3MgUGVyc2lzdGVudENvbm5lY3Rpb25BbmRDaGF0U2VydmljZVNlc3Npb25GYWN0b3J5IGV4dGVuZHMgQ2hhdFNlc3Npb25GYWN0b3J5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmFyZ3NWYWxpZGF0b3IgPSBuZXcgQ2hhdFNlcnZpY2VBcmdzVmFsaWRhdG9yKCk7XG4gIH1cblxuICBjcmVhdGVDaGF0U2Vzc2lvbihzZXNzaW9uVHlwZSwgY2hhdERldGFpbHMsIG9wdGlvbnMsIHdlYnNvY2tldE1hbmFnZXI9bnVsbCkge1xuICAgIGNvbnN0IGNoYXRDb250cm9sbGVyID0gdGhpcy5fY3JlYXRlQ2hhdENvbnRyb2xsZXIoc2Vzc2lvblR5cGUsIGNoYXREZXRhaWxzLCBvcHRpb25zLCB3ZWJzb2NrZXRNYW5hZ2VyKTtcbiAgICBpZiAoc2Vzc2lvblR5cGUgPT09IFNFU1NJT05fVFlQRVMuQUdFTlQpIHtcbiAgICAgIHJldHVybiBuZXcgQWdlbnRDaGF0U2Vzc2lvbihjaGF0Q29udHJvbGxlcik7XG4gICAgfSBlbHNlIGlmIChzZXNzaW9uVHlwZSA9PT0gU0VTU0lPTl9UWVBFUy5DVVNUT01FUikge1xuICAgICAgcmV0dXJuIG5ldyBDdXN0b21lckNoYXRTZXNzaW9uKGNoYXRDb250cm9sbGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbihcbiAgICAgICAgXCJVbmtvd24gdmFsdWUgZm9yIHNlc3Npb24gdHlwZSwgQWxsb3dlZCB2YWx1ZXMgYXJlOiBcIiArXG4gICAgICAgICAgT2JqZWN0LnZhbHVlcyhTRVNTSU9OX1RZUEVTKSxcbiAgICAgICAgICBzZXNzaW9uVHlwZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBfY3JlYXRlQ2hhdENvbnRyb2xsZXIoc2Vzc2lvblR5cGUsIGNoYXREZXRhaWxzSW5wdXQsIG9wdGlvbnMsIHdlYnNvY2tldE1hbmFnZXIpIHtcbiAgICB2YXIgY2hhdERldGFpbHMgPSB0aGlzLl9ub3JtYWxpemVDaGF0RGV0YWlscyhjaGF0RGV0YWlsc0lucHV0KTtcbiAgICB2YXIgYXJncyA9IHtcbiAgICAgIHNlc3Npb25UeXBlOiBzZXNzaW9uVHlwZSxcbiAgICAgIGNoYXREZXRhaWxzOiBjaGF0RGV0YWlscyxcbiAgICAgIGNoYXRDbGllbnQ6IENoYXRDbGllbnRGYWN0b3J5LmdldENhY2hlZENsaWVudChvcHRpb25zKSxcbiAgICAgIHdlYnNvY2tldE1hbmFnZXI6IHdlYnNvY2tldE1hbmFnZXJcbiAgICB9O1xuICAgIHJldHVybiBuZXcgQ2hhdENvbnRyb2xsZXIoYXJncyk7XG4gIH1cblxuICBfbm9ybWFsaXplQ2hhdERldGFpbHMoY2hhdERldGFpbHNJbnB1dCkge1xuICAgIHZhciBjaGF0RGV0YWlscyA9IHt9O1xuICAgIGlmIChjaGF0RGV0YWlsc0lucHV0LnBhcnRpY2lwYW50VG9rZW4gfHwgY2hhdERldGFpbHNJbnB1dC5QYXJ0aWNpcGFudFRva2VuKSB7XG4gICAgICBjaGF0RGV0YWlscy5wYXJ0aWNpcGFudElkID0gY2hhdERldGFpbHNJbnB1dC5QYXJ0aWNpcGFudElkIHx8IGNoYXREZXRhaWxzSW5wdXQucGFydGljaXBhbnRJZDtcbiAgICAgIGNoYXREZXRhaWxzLmNvbnRhY3RJZCA9IGNoYXREZXRhaWxzSW5wdXQuQ29udGFjdElkIHx8IGNoYXREZXRhaWxzSW5wdXQuY29udGFjdElkO1xuICAgICAgY2hhdERldGFpbHMuaW5pdGlhbENvbnRhY3RJZCA9IGNoYXREZXRhaWxzSW5wdXQuSW5pdGlhbENvbnRhY3RJZCB8fCBjaGF0RGV0YWlsc0lucHV0LmluaXRpYWxDb250YWN0SWQgfHwgY2hhdERldGFpbHMuY29udGFjdElkO1xuICAgICAgY2hhdERldGFpbHMucGFydGljaXBhbnRUb2tlbiA9IGNoYXREZXRhaWxzSW5wdXQuUGFydGljaXBhbnRUb2tlbiB8fCBjaGF0RGV0YWlsc0lucHV0LnBhcnRpY2lwYW50VG9rZW47XG4gICAgICB0aGlzLmFyZ3NWYWxpZGF0b3IudmFsaWRhdGVDaGF0RGV0YWlscyhjaGF0RGV0YWlscyk7XG4gICAgICByZXR1cm4gY2hhdERldGFpbHM7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGNoYXREZXRhaWxzSW5wdXQuQ2hhdENvbm5lY3Rpb25BdHRyaWJ1dGVzICYmXG4gICAgICBjaGF0RGV0YWlsc0lucHV0LkNoYXRDb25uZWN0aW9uQXR0cmlidXRlcy5QYXJ0aWNpcGFudENyZWRlbnRpYWxzXG4gICAgKSB7XG4gICAgICB0aGlzLmFyZ3NWYWxpZGF0b3IudmFsaWRhdGVJbml0aWF0ZUNoYXRSZXNwb25zZShjaGF0RGV0YWlsc0lucHV0KTtcbiAgICAgIHZhciBjb25uZWN0aW9uRGV0YWlscyA9IHt9O1xuICAgICAgY29ubmVjdGlvbkRldGFpbHMuY29ubmVjdGlvblRva2VuID1cbiAgICAgICAgY2hhdERldGFpbHNJbnB1dC5DaGF0Q29ubmVjdGlvbkF0dHJpYnV0ZXMuUGFydGljaXBhbnRDcmVkZW50aWFscy5Db25uZWN0aW9uQXV0aGVudGljYXRpb25Ub2tlbjtcbiAgICAgIGNvbm5lY3Rpb25EZXRhaWxzLkNvbm5lY3Rpb25JZCA9XG4gICAgICAgIGNoYXREZXRhaWxzSW5wdXQuQ2hhdENvbm5lY3Rpb25BdHRyaWJ1dGVzLkNvbm5lY3Rpb25JZDtcbiAgICAgIGNvbm5lY3Rpb25EZXRhaWxzLlByZVNpZ25lZENvbm5lY3Rpb25VcmwgPVxuICAgICAgICBjaGF0RGV0YWlsc0lucHV0LkNoYXRDb25uZWN0aW9uQXR0cmlidXRlcy5QcmVTaWduZWRDb25uZWN0aW9uVXJsO1xuICAgICAgY2hhdERldGFpbHMuY29ubmVjdGlvbkRldGFpbHMgPSBjb25uZWN0aW9uRGV0YWlscztcbiAgICAgIGNoYXREZXRhaWxzLnBhcnRpY2lwYW50SWQgPSBjaGF0RGV0YWlsc0lucHV0LlBhcnRpY2lwYW50SWQ7XG4gICAgICBjaGF0RGV0YWlscy5jb250YWN0SWQgPSBjaGF0RGV0YWlsc0lucHV0LkNvbnRhY3RJZDtcbiAgICAgIGNoYXREZXRhaWxzLmluaXRpYWxDb250YWN0SWQgPSBjaGF0RGV0YWlsc0lucHV0LkNvbnRhY3RJZDtcbiAgICAgIHJldHVybiBjaGF0RGV0YWlscztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hcmdzVmFsaWRhdG9yLnZhbGlkYXRlQ2hhdERldGFpbHMoY2hhdERldGFpbHNJbnB1dCk7XG4gICAgICByZXR1cm4gY2hhdERldGFpbHNJbnB1dDtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgQ2hhdFNlc3Npb24ge1xuICBjb25zdHJ1Y3Rvcihjb250cm9sbGVyKSB7XG4gICAgdGhpcy5jb250cm9sbGVyID0gY29udHJvbGxlcjtcbiAgfVxuXG4gIG9uTWVzc2FnZShjYWxsYmFjaykge1xuICAgIHRoaXMuY29udHJvbGxlci5zdWJzY3JpYmUoQ0hBVF9FVkVOVFMuSU5DT01JTkdfTUVTU0FHRSwgY2FsbGJhY2spO1xuICB9XG5cbiAgb25UeXBpbmcoY2FsbGJhY2spIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuc3Vic2NyaWJlKENIQVRfRVZFTlRTLklOQ09NSU5HX1RZUElORywgY2FsbGJhY2spO1xuICB9XG5cbiAgb25Db25uZWN0aW9uQnJva2VuKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jb250cm9sbGVyLnN1YnNjcmliZShDSEFUX0VWRU5UUy5DT05ORUNUSU9OX0JST0tFTiwgY2FsbGJhY2spO1xuICB9XG5cbiAgb25Db25uZWN0aW9uRXN0YWJsaXNoZWQoY2FsbGJhY2spIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuc3Vic2NyaWJlKENIQVRfRVZFTlRTLkNPTk5FQ1RJT05fRVNUQUJMSVNIRUQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHNlbmRNZXNzYWdlKGFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sbGVyLnNlbmRNZXNzYWdlKGFyZ3MpO1xuICB9XG5cbiAgY29ubmVjdChhcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbGxlci5jb25uZWN0KGFyZ3MpO1xuICB9XG5cbiAgc2VuZEV2ZW50KGFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sbGVyLnNlbmRFdmVudChhcmdzKTtcbiAgfVxuXG4gIGdldFRyYW5zY3JpcHQoYXJncykge1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2xsZXIuZ2V0VHJhbnNjcmlwdChhcmdzKTtcbiAgfVxuXG4gIGdldENoYXREZXRhaWxzKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2xsZXIuZ2V0Q2hhdERldGFpbHMoKTtcbiAgfVxufVxuXG5jbGFzcyBBZ2VudENoYXRTZXNzaW9uIGV4dGVuZHMgQ2hhdFNlc3Npb24ge1xuICBjb25zdHJ1Y3Rvcihjb250cm9sbGVyKSB7XG4gICAgc3VwZXIoY29udHJvbGxlcik7XG4gIH1cblxuICBjbGVhblVwT25QYXJ0aWNpcGFudERpc2Nvbm5lY3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbGxlci5jbGVhblVwT25QYXJ0aWNpcGFudERpc2Nvbm5lY3QoKTtcbiAgfVxufVxuXG5jbGFzcyBDdXN0b21lckNoYXRTZXNzaW9uIGV4dGVuZHMgQ2hhdFNlc3Npb24ge1xuICBjb25zdHJ1Y3Rvcihjb250cm9sbGVyKSB7XG4gICAgc3VwZXIoY29udHJvbGxlcik7XG4gIH1cblxuICBkaXNjb25uZWN0UGFydGljaXBhbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbGxlci5kaXNjb25uZWN0UGFydGljaXBhbnQoKTtcbiAgfVxufVxuXG5jb25zdCBDSEFUX1NFU1NJT05fRkFDVE9SWSA9IG5ldyBQZXJzaXN0ZW50Q29ubmVjdGlvbkFuZENoYXRTZXJ2aWNlU2Vzc2lvbkZhY3RvcnkoKTtcblxudmFyIHNldEdsb2JhbENvbmZpZyA9IGNvbmZpZyA9PiB7XG4gIHZhciBsb2dnZXJDb25maWcgPSBjb25maWcubG9nZ2VyQ29uZmlnO1xuICBHbG9iYWxDb25maWcudXBkYXRlKGNvbmZpZyk7XG4gIExvZ01hbmFnZXIudXBkYXRlTG9nZ2VyQ29uZmlnKGxvZ2dlckNvbmZpZyk7XG59O1xuXG52YXIgQ2hhdFNlc3Npb25Db25zdHJ1Y3RvciA9IGFyZ3MgPT4ge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3Mub3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSBhcmdzLnR5cGUgfHwgU0VTU0lPTl9UWVBFUy5BR0VOVDtcbiAgcmV0dXJuIENIQVRfU0VTU0lPTl9GQUNUT1JZLmNyZWF0ZUNoYXRTZXNzaW9uKFxuICAgIHR5cGUsXG4gICAgYXJncy5jaGF0RGV0YWlscyxcbiAgICBvcHRpb25zLFxuICAgIGFyZ3Mud2Vic29ja2V0TWFuYWdlclxuICApO1xufTtcblxuY29uc3QgQ2hhdFNlc3Npb25PYmplY3QgPSB7XG4gIGNyZWF0ZTogQ2hhdFNlc3Npb25Db25zdHJ1Y3RvcixcbiAgc2V0R2xvYmFsQ29uZmlnOiBzZXRHbG9iYWxDb25maWcsXG4gIExvZ0xldmVsOiBMb2dMZXZlbCxcbiAgTG9nZ2VyOiBMb2dnZXIsXG4gIFNlc3Npb25UeXBlczogU0VTU0lPTl9UWVBFU1xufTtcblxuZXhwb3J0IHsgQ2hhdFNlc3Npb25PYmplY3QgfTtcbiIsIi8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQmVsb3cgaXMgdGhlIFBhaG8gbXF0dCB2ZXJzaW9uIDEuMC4xXG4vLyBQbGVhc2UgdGVzdCBwcm9wZXJseSBpZiB5b3UgY2hhbmdlIHRoZSB2ZXJzaW9uIG9mIHRoaXMgZmlsZS5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMgSUJNIENvcnAuXG4gKlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFsc1xuICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wXG4gKiBhbmQgRWNsaXBzZSBEaXN0cmlidXRpb24gTGljZW5zZSB2MS4wIHdoaWNoIGFjY29tcGFueSB0aGlzIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiBUaGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSBpcyBhdmFpbGFibGUgYXRcbiAqICAgIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sXG4gKiBhbmQgdGhlIEVjbGlwc2UgRGlzdHJpYnV0aW9uIExpY2Vuc2UgaXMgYXZhaWxhYmxlIGF0XG4gKiAgIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvb3JnL2RvY3VtZW50cy9lZGwtdjEwLnBocC5cbiAqXG4gKiBDb250cmlidXRvcnM6XG4gKiAgICBBbmRyZXcgQmFua3MgLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24gYW5kIGluaXRpYWwgZG9jdW1lbnRhdGlvblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8vIE9ubHkgZXhwb3NlIGEgc2luZ2xlIG9iamVjdCBuYW1lIGluIHRoZSBnbG9iYWwgbmFtZXNwYWNlLlxuLy8gRXZlcnl0aGluZyBtdXN0IGdvIHRocm91Z2ggdGhpcyBtb2R1bGUuIEdsb2JhbCBQYWhvIG1vZHVsZVxuLy8gb25seSBoYXMgYSBzaW5nbGUgcHVibGljIGZ1bmN0aW9uLCBjbGllbnQsIHdoaWNoIHJldHVybnNcbi8vIGEgUGFobyBjbGllbnQgb2JqZWN0IGdpdmVuIGNvbm5lY3Rpb24gZGV0YWlscy5cblxuLyoqXG4gKiBTZW5kIGFuZCByZWNlaXZlIG1lc3NhZ2VzIHVzaW5nIHdlYiBicm93c2Vycy5cbiAqIDxwPlxuICogVGhpcyBwcm9ncmFtbWluZyBpbnRlcmZhY2UgbGV0cyBhIEphdmFTY3JpcHQgY2xpZW50IGFwcGxpY2F0aW9uIHVzZSB0aGUgTVFUVCBWMy4xIG9yXG4gKiBWMy4xLjEgcHJvdG9jb2wgdG8gY29ubmVjdCB0byBhbiBNUVRULXN1cHBvcnRpbmcgbWVzc2FnaW5nIHNlcnZlci5cbiAqXG4gKiBUaGUgZnVuY3Rpb24gc3VwcG9ydGVkIGluY2x1ZGVzOlxuICogPG9sPlxuICogPGxpPkNvbm5lY3RpbmcgdG8gYW5kIGRpc2Nvbm5lY3RpbmcgZnJvbSBhIHNlcnZlci4gVGhlIHNlcnZlciBpcyBpZGVudGlmaWVkIGJ5IGl0cyBob3N0IG5hbWUgYW5kIHBvcnQgbnVtYmVyLlxuICogPGxpPlNwZWNpZnlpbmcgb3B0aW9ucyB0aGF0IHJlbGF0ZSB0byB0aGUgY29tbXVuaWNhdGlvbnMgbGluayB3aXRoIHRoZSBzZXJ2ZXIsXG4gKiBmb3IgZXhhbXBsZSB0aGUgZnJlcXVlbmN5IG9mIGtlZXAtYWxpdmUgaGVhcnRiZWF0cywgYW5kIHdoZXRoZXIgU1NML1RMUyBpcyByZXF1aXJlZC5cbiAqIDxsaT5TdWJzY3JpYmluZyB0byBhbmQgcmVjZWl2aW5nIG1lc3NhZ2VzIGZyb20gTVFUVCBUb3BpY3MuXG4gKiA8bGk+UHVibGlzaGluZyBtZXNzYWdlcyB0byBNUVRUIFRvcGljcy5cbiAqIDwvb2w+XG4gKiA8cD5cbiAqIFRoZSBBUEkgY29uc2lzdHMgb2YgdHdvIG1haW4gb2JqZWN0czpcbiAqIDxkbD5cbiAqIDxkdD48Yj57QGxpbmsgUGFoby5DbGllbnR9PC9iPjwvZHQ+XG4gKiA8ZGQ+VGhpcyBjb250YWlucyBtZXRob2RzIHRoYXQgcHJvdmlkZSB0aGUgZnVuY3Rpb25hbGl0eSBvZiB0aGUgQVBJLFxuICogaW5jbHVkaW5nIHByb3Zpc2lvbiBvZiBjYWxsYmFja3MgdGhhdCBub3RpZnkgdGhlIGFwcGxpY2F0aW9uIHdoZW4gYSBtZXNzYWdlXG4gKiBhcnJpdmVzIGZyb20gb3IgaXMgZGVsaXZlcmVkIHRvIHRoZSBtZXNzYWdpbmcgc2VydmVyLFxuICogb3Igd2hlbiB0aGUgc3RhdHVzIG9mIGl0cyBjb25uZWN0aW9uIHRvIHRoZSBtZXNzYWdpbmcgc2VydmVyIGNoYW5nZXMuPC9kZD5cbiAqIDxkdD48Yj57QGxpbmsgUGFoby5NZXNzYWdlfTwvYj48L2R0PlxuICogPGRkPlRoaXMgZW5jYXBzdWxhdGVzIHRoZSBwYXlsb2FkIG9mIHRoZSBtZXNzYWdlIGFsb25nIHdpdGggdmFyaW91cyBhdHRyaWJ1dGVzXG4gKiBhc3NvY2lhdGVkIHdpdGggaXRzIGRlbGl2ZXJ5LCBpbiBwYXJ0aWN1bGFyIHRoZSBkZXN0aW5hdGlvbiB0byB3aGljaCBpdCBoYXNcbiAqIGJlZW4gKG9yIGlzIGFib3V0IHRvIGJlKSBzZW50LjwvZGQ+XG4gKiA8L2RsPlxuICogPHA+XG4gKiBUaGUgcHJvZ3JhbW1pbmcgaW50ZXJmYWNlIHZhbGlkYXRlcyBwYXJhbWV0ZXJzIHBhc3NlZCB0byBpdCwgYW5kIHdpbGwgdGhyb3dcbiAqIGFuIEVycm9yIGNvbnRhaW5pbmcgYW4gZXJyb3IgbWVzc2FnZSBpbnRlbmRlZCBmb3IgZGV2ZWxvcGVyIHVzZSwgaWYgaXQgZGV0ZWN0c1xuICogYW4gZXJyb3Igd2l0aCBhbnkgcGFyYW1ldGVyLlxuICogPHA+XG4gKiBFeGFtcGxlOlxuICpcbiAqIDxjb2RlPjxwcmU+XG52YXIgY2xpZW50ID0gbmV3IFBhaG8uTVFUVC5DbGllbnQobG9jYXRpb24uaG9zdG5hbWUsIE51bWJlcihsb2NhdGlvbi5wb3J0KSwgXCJjbGllbnRJZFwiKTtcbmNsaWVudC5vbkNvbm5lY3Rpb25Mb3N0ID0gb25Db25uZWN0aW9uTG9zdDtcbmNsaWVudC5vbk1lc3NhZ2VBcnJpdmVkID0gb25NZXNzYWdlQXJyaXZlZDtcbmNsaWVudC5jb25uZWN0KHtvblN1Y2Nlc3M6b25Db25uZWN0fSk7XG5cbmZ1bmN0aW9uIG9uQ29ubmVjdCgpIHtcbiAgLy8gT25jZSBhIGNvbm5lY3Rpb24gaGFzIGJlZW4gbWFkZSwgbWFrZSBhIHN1YnNjcmlwdGlvbiBhbmQgc2VuZCBhIG1lc3NhZ2UuXG4gIGNvbnNvbGUubG9nKFwib25Db25uZWN0XCIpO1xuICBjbGllbnQuc3Vic2NyaWJlKFwiL1dvcmxkXCIpO1xuICB2YXIgbWVzc2FnZSA9IG5ldyBQYWhvLk1RVFQuTWVzc2FnZShcIkhlbGxvXCIpO1xuICBtZXNzYWdlLmRlc3RpbmF0aW9uTmFtZSA9IFwiL1dvcmxkXCI7XG4gIGNsaWVudC5zZW5kKG1lc3NhZ2UpO1xufTtcbmZ1bmN0aW9uIG9uQ29ubmVjdGlvbkxvc3QocmVzcG9uc2VPYmplY3QpIHtcbiAgaWYgKHJlc3BvbnNlT2JqZWN0LmVycm9yQ29kZSAhPT0gMClcblx0Y29uc29sZS5sb2coXCJvbkNvbm5lY3Rpb25Mb3N0OlwiK3Jlc3BvbnNlT2JqZWN0LmVycm9yTWVzc2FnZSk7XG59O1xuZnVuY3Rpb24gb25NZXNzYWdlQXJyaXZlZChtZXNzYWdlKSB7XG4gIGNvbnNvbGUubG9nKFwib25NZXNzYWdlQXJyaXZlZDpcIittZXNzYWdlLnBheWxvYWRTdHJpbmcpO1xuICBjbGllbnQuZGlzY29ubmVjdCgpO1xufTtcbiAqIDwvcHJlPjwvY29kZT5cbiAqIEBuYW1lc3BhY2UgUGFob1xuICovXG5cbi8qIGpzaGludCBzaGFkb3c6dHJ1ZSAqL1xuKGZ1bmN0aW9uIEV4cG9ydExpYnJhcnkocm9vdCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvL2lmICh0eXBlb2Ygcm9vdC5QYWhvID09PSBcInVuZGVmaW5lZFwiKXtcbiAgICAvL1x0cm9vdC5QYWhvID0ge307XG4gICAgLy99XG4gICAgcm9vdC5QYWhvID0gZmFjdG9yeSgpO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiBMaWJyYXJ5RmFjdG9yeSgpIHtcbiAgdmFyIFBhaG9NUVRUID0gKGZ1bmN0aW9uKGdsb2JhbCkge1xuICAgIC8vIFByaXZhdGUgdmFyaWFibGVzIGJlbG93LCB0aGVzZSBhcmUgb25seSB2aXNpYmxlIGluc2lkZSB0aGUgZnVuY3Rpb24gY2xvc3VyZVxuICAgIC8vIHdoaWNoIGlzIHVzZWQgdG8gZGVmaW5lIHRoZSBtb2R1bGUuXG4gICAgdmFyIHZlcnNpb24gPSBcIkBWRVJTSU9OQC1AQlVJTERMRVZFTEBcIjtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdmFyIGxvY2FsU3RvcmFnZSA9XG4gICAgICBnbG9iYWwubG9jYWxTdG9yYWdlIHx8XG4gICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkYXRhID0ge307XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzZXRJdGVtOiBmdW5jdGlvbihrZXksIGl0ZW0pIHtcbiAgICAgICAgICAgIGRhdGFba2V5XSA9IGl0ZW07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXRJdGVtOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhW2tleV07XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZW1vdmVJdGVtOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBkYXRhW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSkoKTtcblxuICAgIC8qKlxuICAgICAqIFVuaXF1ZSBtZXNzYWdlIHR5cGUgaWRlbnRpZmllcnMsIHdpdGggYXNzb2NpYXRlZFxuICAgICAqIGFzc29jaWF0ZWQgaW50ZWdlciB2YWx1ZXMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB2YXIgTUVTU0FHRV9UWVBFID0ge1xuICAgICAgQ09OTkVDVDogMSxcbiAgICAgIENPTk5BQ0s6IDIsXG4gICAgICBQVUJMSVNIOiAzLFxuICAgICAgUFVCQUNLOiA0LFxuICAgICAgUFVCUkVDOiA1LFxuICAgICAgUFVCUkVMOiA2LFxuICAgICAgUFVCQ09NUDogNyxcbiAgICAgIFNVQlNDUklCRTogOCxcbiAgICAgIFNVQkFDSzogOSxcbiAgICAgIFVOU1VCU0NSSUJFOiAxMCxcbiAgICAgIFVOU1VCQUNLOiAxMSxcbiAgICAgIFBJTkdSRVE6IDEyLFxuICAgICAgUElOR1JFU1A6IDEzLFxuICAgICAgRElTQ09OTkVDVDogMTRcbiAgICB9O1xuXG4gICAgLy8gQ29sbGVjdGlvbiBvZiB1dGlsaXR5IG1ldGhvZHMgdXNlZCB0byBzaW1wbGlmeSBtb2R1bGUgY29kZVxuICAgIC8vIGFuZCBwcm9tb3RlIHRoZSBEUlkgcGF0dGVybi5cblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIGFuIG9iamVjdCdzIHBhcmFtZXRlciBuYW1lcyB0byBlbnN1cmUgdGhleVxuICAgICAqIG1hdGNoIGEgbGlzdCBvZiBleHBlY3RlZCB2YXJpYWJsZXMgbmFtZSBmb3IgdGhpcyBvcHRpb25cbiAgICAgKiB0eXBlLiBVc2VkIHRvIGVuc3VyZSBvcHRpb24gb2JqZWN0IHBhc3NlZCBpbnRvIHRoZSBBUEkgZG9uJ3RcbiAgICAgKiBjb250YWluIGVycm9uZW91cyBwYXJhbWV0ZXJzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSBVc2VyIG9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGtleXMgLSB2YWxpZCBrZXlzIGFuZCB0eXBlcyB0aGF0IG1heSBleGlzdCBpbiBvYmouXG4gICAgICogQHRocm93cyB7RXJyb3J9IEludmFsaWQgb3B0aW9uIHBhcmFtZXRlciBmb3VuZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uKG9iaiwga2V5cykge1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBpZiAoa2V5cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9ialtrZXldICE9PSBrZXlzW2tleV0pXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbdHlwZW9mIG9ialtrZXldLCBrZXldKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZXJyb3JTdHIgPVxuICAgICAgICAgICAgICBcIlVua25vd24gcHJvcGVydHksIFwiICsga2V5ICsgXCIuIFZhbGlkIHByb3BlcnRpZXMgYXJlOlwiO1xuICAgICAgICAgICAgZm9yICh2YXIgdmFsaWRLZXkgaW4ga2V5cylcbiAgICAgICAgICAgICAgaWYgKGtleXMuaGFzT3duUHJvcGVydHkodmFsaWRLZXkpKVxuICAgICAgICAgICAgICAgIGVycm9yU3RyID0gZXJyb3JTdHIgKyBcIiBcIiArIHZhbGlkS2V5O1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgbmV3IGZ1bmN0aW9uIHdoaWNoIHJ1bnMgdGhlIHVzZXIgZnVuY3Rpb24gYm91bmRcbiAgICAgKiB0byBhIGZpeGVkIHNjb3BlLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFVzZXIgZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gRnVuY3Rpb24gc2NvcGVcbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gVXNlciBmdW5jdGlvbiBib3VuZCB0byBhbm90aGVyIHNjb3BlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB2YXIgc2NvcGUgPSBmdW5jdGlvbihmLCBzY29wZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZi5hcHBseShzY29wZSwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVuaXF1ZSBtZXNzYWdlIHR5cGUgaWRlbnRpZmllcnMsIHdpdGggYXNzb2NpYXRlZFxuICAgICAqIGFzc29jaWF0ZWQgaW50ZWdlciB2YWx1ZXMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB2YXIgRVJST1IgPSB7XG4gICAgICBPSzogeyBjb2RlOiAwLCB0ZXh0OiBcIkFNUUpTQzAwMDBJIE9LLlwiIH0sXG4gICAgICBDT05ORUNUX1RJTUVPVVQ6IHsgY29kZTogMSwgdGV4dDogXCJBTVFKU0MwMDAxRSBDb25uZWN0IHRpbWVkIG91dC5cIiB9LFxuICAgICAgU1VCU0NSSUJFX1RJTUVPVVQ6IHsgY29kZTogMiwgdGV4dDogXCJBTVFKUzAwMDJFIFN1YnNjcmliZSB0aW1lZCBvdXQuXCIgfSxcbiAgICAgIFVOU1VCU0NSSUJFX1RJTUVPVVQ6IHtcbiAgICAgICAgY29kZTogMyxcbiAgICAgICAgdGV4dDogXCJBTVFKUzAwMDNFIFVuc3Vic2NyaWJlIHRpbWVkIG91dC5cIlxuICAgICAgfSxcbiAgICAgIFBJTkdfVElNRU9VVDogeyBjb2RlOiA0LCB0ZXh0OiBcIkFNUUpTMDAwNEUgUGluZyB0aW1lZCBvdXQuXCIgfSxcbiAgICAgIElOVEVSTkFMX0VSUk9SOiB7XG4gICAgICAgIGNvZGU6IDUsXG4gICAgICAgIHRleHQ6IFwiQU1RSlMwMDA1RSBJbnRlcm5hbCBlcnJvci4gRXJyb3IgTWVzc2FnZTogezB9LCBTdGFjayB0cmFjZTogezF9XCJcbiAgICAgIH0sXG4gICAgICBDT05OQUNLX1JFVFVSTkNPREU6IHtcbiAgICAgICAgY29kZTogNixcbiAgICAgICAgdGV4dDogXCJBTVFKUzAwMDZFIEJhZCBDb25uYWNrIHJldHVybiBjb2RlOnswfSB7MX0uXCJcbiAgICAgIH0sXG4gICAgICBTT0NLRVRfRVJST1I6IHsgY29kZTogNywgdGV4dDogXCJBTVFKUzAwMDdFIFNvY2tldCBlcnJvcjp7MH0uXCIgfSxcbiAgICAgIFNPQ0tFVF9DTE9TRTogeyBjb2RlOiA4LCB0ZXh0OiBcIkFNUUpTMDAwOEkgU29ja2V0IGNsb3NlZC5cIiB9LFxuICAgICAgTUFMRk9STUVEX1VURjoge1xuICAgICAgICBjb2RlOiA5LFxuICAgICAgICB0ZXh0OiBcIkFNUUpTMDAwOUUgTWFsZm9ybWVkIFVURiBkYXRhOnswfSB7MX0gezJ9LlwiXG4gICAgICB9LFxuICAgICAgVU5TVVBQT1JURUQ6IHtcbiAgICAgICAgY29kZTogMTAsXG4gICAgICAgIHRleHQ6IFwiQU1RSlMwMDEwRSB7MH0gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIuXCJcbiAgICAgIH0sXG4gICAgICBJTlZBTElEX1NUQVRFOiB7IGNvZGU6IDExLCB0ZXh0OiBcIkFNUUpTMDAxMUUgSW52YWxpZCBzdGF0ZSB7MH0uXCIgfSxcbiAgICAgIElOVkFMSURfVFlQRTogeyBjb2RlOiAxMiwgdGV4dDogXCJBTVFKUzAwMTJFIEludmFsaWQgdHlwZSB7MH0gZm9yIHsxfS5cIiB9LFxuICAgICAgSU5WQUxJRF9BUkdVTUVOVDoge1xuICAgICAgICBjb2RlOiAxMyxcbiAgICAgICAgdGV4dDogXCJBTVFKUzAwMTNFIEludmFsaWQgYXJndW1lbnQgezB9IGZvciB7MX0uXCJcbiAgICAgIH0sXG4gICAgICBVTlNVUFBPUlRFRF9PUEVSQVRJT046IHtcbiAgICAgICAgY29kZTogMTQsXG4gICAgICAgIHRleHQ6IFwiQU1RSlMwMDE0RSBVbnN1cHBvcnRlZCBvcGVyYXRpb24uXCJcbiAgICAgIH0sXG4gICAgICBJTlZBTElEX1NUT1JFRF9EQVRBOiB7XG4gICAgICAgIGNvZGU6IDE1LFxuICAgICAgICB0ZXh0OiBcIkFNUUpTMDAxNUUgSW52YWxpZCBkYXRhIGluIGxvY2FsIHN0b3JhZ2Uga2V5PXswfSB2YWx1ZT17MX0uXCJcbiAgICAgIH0sXG4gICAgICBJTlZBTElEX01RVFRfTUVTU0FHRV9UWVBFOiB7XG4gICAgICAgIGNvZGU6IDE2LFxuICAgICAgICB0ZXh0OiBcIkFNUUpTMDAxNkUgSW52YWxpZCBNUVRUIG1lc3NhZ2UgdHlwZSB7MH0uXCJcbiAgICAgIH0sXG4gICAgICBNQUxGT1JNRURfVU5JQ09ERToge1xuICAgICAgICBjb2RlOiAxNyxcbiAgICAgICAgdGV4dDogXCJBTVFKUzAwMTdFIE1hbGZvcm1lZCBVbmljb2RlIHN0cmluZzp7MH0gezF9LlwiXG4gICAgICB9LFxuICAgICAgQlVGRkVSX0ZVTEw6IHtcbiAgICAgICAgY29kZTogMTgsXG4gICAgICAgIHRleHQ6IFwiQU1RSlMwMDE4RSBNZXNzYWdlIGJ1ZmZlciBpcyBmdWxsLCBtYXhpbXVtIGJ1ZmZlciBzaXplOiB7MH0uXCJcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqIENPTk5BQ0sgUkMgTWVhbmluZy4gKi9cbiAgICB2YXIgQ09OTkFDS19SQyA9IHtcbiAgICAgIDA6IFwiQ29ubmVjdGlvbiBBY2NlcHRlZFwiLFxuICAgICAgMTogXCJDb25uZWN0aW9uIFJlZnVzZWQ6IHVuYWNjZXB0YWJsZSBwcm90b2NvbCB2ZXJzaW9uXCIsXG4gICAgICAyOiBcIkNvbm5lY3Rpb24gUmVmdXNlZDogaWRlbnRpZmllciByZWplY3RlZFwiLFxuICAgICAgMzogXCJDb25uZWN0aW9uIFJlZnVzZWQ6IHNlcnZlciB1bmF2YWlsYWJsZVwiLFxuICAgICAgNDogXCJDb25uZWN0aW9uIFJlZnVzZWQ6IGJhZCB1c2VyIG5hbWUgb3IgcGFzc3dvcmRcIixcbiAgICAgIDU6IFwiQ29ubmVjdGlvbiBSZWZ1c2VkOiBub3QgYXV0aG9yaXplZFwiXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZvcm1hdCBhbiBlcnJvciBtZXNzYWdlIHRleHQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Vycm9yfSBFUlJPUiB2YWx1ZSBhYm92ZS5cbiAgICAgKiBAcGFyYW0ge3N1YnN0aXR1dGlvbnN9IFthcnJheV0gc3Vic3RpdHV0ZWQgaW50byB0aGUgdGV4dC5cbiAgICAgKiBAcmV0dXJuIHRoZSB0ZXh0IHdpdGggdGhlIHN1YnN0aXR1dGlvbnMgbWFkZS5cbiAgICAgKi9cbiAgICB2YXIgZm9ybWF0ID0gZnVuY3Rpb24oZXJyb3IsIHN1YnN0aXR1dGlvbnMpIHtcbiAgICAgIHZhciB0ZXh0ID0gZXJyb3IudGV4dDtcbiAgICAgIGlmIChzdWJzdGl0dXRpb25zKSB7XG4gICAgICAgIHZhciBmaWVsZCwgc3RhcnQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic3RpdHV0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGZpZWxkID0gXCJ7XCIgKyBpICsgXCJ9XCI7XG4gICAgICAgICAgc3RhcnQgPSB0ZXh0LmluZGV4T2YoZmllbGQpO1xuICAgICAgICAgIGlmIChzdGFydCA+IDApIHtcbiAgICAgICAgICAgIHZhciBwYXJ0MSA9IHRleHQuc3Vic3RyaW5nKDAsIHN0YXJ0KTtcbiAgICAgICAgICAgIHZhciBwYXJ0MiA9IHRleHQuc3Vic3RyaW5nKHN0YXJ0ICsgZmllbGQubGVuZ3RoKTtcbiAgICAgICAgICAgIHRleHQgPSBwYXJ0MSArIHN1YnN0aXR1dGlvbnNbaV0gKyBwYXJ0MjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH07XG5cbiAgICAvL01RVFQgcHJvdG9jb2wgYW5kIHZlcnNpb24gICAgICAgICAgNiAgICBNICAgIFEgICAgSSAgICBzICAgIGQgICAgcCAgICAzXG4gICAgdmFyIE1xdHRQcm90b0lkZW50aWZpZXJ2MyA9IFtcbiAgICAgIDB4MDAsXG4gICAgICAweDA2LFxuICAgICAgMHg0ZCxcbiAgICAgIDB4NTEsXG4gICAgICAweDQ5LFxuICAgICAgMHg3MyxcbiAgICAgIDB4NjQsXG4gICAgICAweDcwLFxuICAgICAgMHgwM1xuICAgIF07XG4gICAgLy9NUVRUIHByb3RvL3ZlcnNpb24gZm9yIDMxMSAgICAgICAgIDQgICAgTSAgICBRICAgIFQgICAgVCAgICA0XG4gICAgdmFyIE1xdHRQcm90b0lkZW50aWZpZXJ2NCA9IFsweDAwLCAweDA0LCAweDRkLCAweDUxLCAweDU0LCAweDU0LCAweDA0XTtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhbiBNUVRUIHdpcmUgcHJvdG9jb2wgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0gdHlwZSBNUVRUIHBhY2tldCB0eXBlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIG9wdGlvbmFsIHdpcmUgbWVzc2FnZSBhdHRyaWJ1dGVzLlxuICAgICAqXG4gICAgICogT3B0aW9uYWwgcHJvcGVydGllc1xuICAgICAqXG4gICAgICogbWVzc2FnZUlkZW50aWZpZXI6IG1lc3NhZ2UgSUQgaW4gdGhlIHJhbmdlIFswLi42NTUzNV1cbiAgICAgKiBwYXlsb2FkTWVzc2FnZTpcdEFwcGxpY2F0aW9uIE1lc3NhZ2UgLSBQVUJMSVNIIG9ubHlcbiAgICAgKiBjb25uZWN0U3RyaW5nczpcdGFycmF5IG9mIDAgb3IgbW9yZSBTdHJpbmdzIHRvIGJlIHB1dCBpbnRvIHRoZSBDT05ORUNUIHBheWxvYWRcbiAgICAgKiB0b3BpY3M6XHRcdFx0YXJyYXkgb2Ygc3RyaW5ncyAoU1VCU0NSSUJFLCBVTlNVQlNDUklCRSlcbiAgICAgKiByZXF1ZXN0UW9TOlx0XHRhcnJheSBvZiBRb1MgdmFsdWVzIFswLi4yXVxuICAgICAqXG4gICAgICogXCJGbGFnXCIgcHJvcGVydGllc1xuICAgICAqIGNsZWFuU2Vzc2lvbjpcdHRydWUgaWYgcHJlc2VudCAvIGZhbHNlIGlmIGFic2VudCAoQ09OTkVDVClcbiAgICAgKiB3aWxsTWVzc2FnZTogIFx0dHJ1ZSBpZiBwcmVzZW50IC8gZmFsc2UgaWYgYWJzZW50IChDT05ORUNUKVxuICAgICAqIGlzUmV0YWluZWQ6XHRcdHRydWUgaWYgcHJlc2VudCAvIGZhbHNlIGlmIGFic2VudCAoQ09OTkVDVClcbiAgICAgKiB1c2VyTmFtZTpcdFx0dHJ1ZSBpZiBwcmVzZW50IC8gZmFsc2UgaWYgYWJzZW50IChDT05ORUNUKVxuICAgICAqIHBhc3N3b3JkOlx0XHR0cnVlIGlmIHByZXNlbnQgLyBmYWxzZSBpZiBhYnNlbnQgKENPTk5FQ1QpXG4gICAgICoga2VlcEFsaXZlSW50ZXJ2YWw6XHRpbnRlZ2VyIFswLi42NTUzNV0gIChDT05ORUNUKVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgdmFyIFdpcmVNZXNzYWdlID0gZnVuY3Rpb24odHlwZSwgb3B0aW9ucykge1xuICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIHRoaXNbbmFtZV0gPSBvcHRpb25zW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFdpcmVNZXNzYWdlLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIENvbXB1dGUgdGhlIGZpcnN0IGJ5dGUgb2YgdGhlIGZpeGVkIGhlYWRlclxuICAgICAgdmFyIGZpcnN0ID0gKHRoaXMudHlwZSAmIDB4MGYpIDw8IDQ7XG5cbiAgICAgIC8qXG4gICAgICAgKiBOb3cgY2FsY3VsYXRlIHRoZSBsZW5ndGggb2YgdGhlIHZhcmlhYmxlIGhlYWRlciArIHBheWxvYWQgYnkgYWRkaW5nIHVwIHRoZSBsZW5ndGhzXG4gICAgICAgKiBvZiBhbGwgdGhlIGNvbXBvbmVudCBwYXJ0c1xuICAgICAgICovXG5cbiAgICAgIHZhciByZW1MZW5ndGggPSAwO1xuICAgICAgdmFyIHRvcGljU3RyTGVuZ3RoID0gW107XG4gICAgICB2YXIgZGVzdGluYXRpb25OYW1lTGVuZ3RoID0gMDtcbiAgICAgIHZhciB3aWxsTWVzc2FnZVBheWxvYWRCeXRlcztcblxuICAgICAgLy8gaWYgdGhlIG1lc3NhZ2UgY29udGFpbnMgYSBtZXNzYWdlSWRlbnRpZmllciB0aGVuIHdlIG5lZWQgdHdvIGJ5dGVzIGZvciB0aGF0XG4gICAgICBpZiAodGhpcy5tZXNzYWdlSWRlbnRpZmllciAhPT0gdW5kZWZpbmVkKSByZW1MZW5ndGggKz0gMjtcblxuICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgLy8gSWYgdGhpcyBhIENvbm5lY3QgdGhlbiB3ZSBuZWVkIHRvIGluY2x1ZGUgMTIgYnl0ZXMgZm9yIGl0cyBoZWFkZXJcbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuQ09OTkVDVDpcbiAgICAgICAgICBzd2l0Y2ggKHRoaXMubXF0dFZlcnNpb24pIHtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgcmVtTGVuZ3RoICs9IE1xdHRQcm90b0lkZW50aWZpZXJ2My5sZW5ndGggKyAzO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgcmVtTGVuZ3RoICs9IE1xdHRQcm90b0lkZW50aWZpZXJ2NC5sZW5ndGggKyAzO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZW1MZW5ndGggKz0gVVRGOExlbmd0aCh0aGlzLmNsaWVudElkKSArIDI7XG4gICAgICAgICAgaWYgKHRoaXMud2lsbE1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVtTGVuZ3RoICs9IFVURjhMZW5ndGgodGhpcy53aWxsTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUpICsgMjtcbiAgICAgICAgICAgIC8vIFdpbGwgbWVzc2FnZSBpcyBhbHdheXMgYSBzdHJpbmcsIHNlbnQgYXMgVVRGLTggY2hhcmFjdGVycyB3aXRoIGEgcHJlY2VkaW5nIGxlbmd0aC5cbiAgICAgICAgICAgIHdpbGxNZXNzYWdlUGF5bG9hZEJ5dGVzID0gdGhpcy53aWxsTWVzc2FnZS5wYXlsb2FkQnl0ZXM7XG4gICAgICAgICAgICBpZiAoISh3aWxsTWVzc2FnZVBheWxvYWRCeXRlcyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKVxuICAgICAgICAgICAgICB3aWxsTWVzc2FnZVBheWxvYWRCeXRlcyA9IG5ldyBVaW50OEFycmF5KHBheWxvYWRCeXRlcyk7XG4gICAgICAgICAgICByZW1MZW5ndGggKz0gd2lsbE1lc3NhZ2VQYXlsb2FkQnl0ZXMuYnl0ZUxlbmd0aCArIDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLnVzZXJOYW1lICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZW1MZW5ndGggKz0gVVRGOExlbmd0aCh0aGlzLnVzZXJOYW1lKSArIDI7XG4gICAgICAgICAgaWYgKHRoaXMucGFzc3dvcmQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlbUxlbmd0aCArPSBVVEY4TGVuZ3RoKHRoaXMucGFzc3dvcmQpICsgMjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAvLyBTdWJzY3JpYmUsIFVuc3Vic2NyaWJlIGNhbiBib3RoIGNvbnRhaW4gdG9waWMgc3RyaW5nc1xuICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5TVUJTQ1JJQkU6XG4gICAgICAgICAgZmlyc3QgfD0gMHgwMjsgLy8gUW9zID0gMTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudG9waWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b3BpY1N0ckxlbmd0aFtpXSA9IFVURjhMZW5ndGgodGhpcy50b3BpY3NbaV0pO1xuICAgICAgICAgICAgcmVtTGVuZ3RoICs9IHRvcGljU3RyTGVuZ3RoW2ldICsgMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVtTGVuZ3RoICs9IHRoaXMucmVxdWVzdGVkUW9zLmxlbmd0aDsgLy8gMSBieXRlIGZvciBlYWNoIHRvcGljJ3MgUW9zXG4gICAgICAgICAgLy8gUW9TIG9uIFN1YnNjcmliZSBvbmx5XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuVU5TVUJTQ1JJQkU6XG4gICAgICAgICAgZmlyc3QgfD0gMHgwMjsgLy8gUW9zID0gMTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudG9waWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b3BpY1N0ckxlbmd0aFtpXSA9IFVURjhMZW5ndGgodGhpcy50b3BpY3NbaV0pO1xuICAgICAgICAgICAgcmVtTGVuZ3RoICs9IHRvcGljU3RyTGVuZ3RoW2ldICsgMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCUkVMOlxuICAgICAgICAgIGZpcnN0IHw9IDB4MDI7IC8vIFFvcyA9IDE7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCTElTSDpcbiAgICAgICAgICBpZiAodGhpcy5wYXlsb2FkTWVzc2FnZS5kdXBsaWNhdGUpIGZpcnN0IHw9IDB4MDg7XG4gICAgICAgICAgZmlyc3QgPSBmaXJzdCB8PSB0aGlzLnBheWxvYWRNZXNzYWdlLnFvcyA8PCAxO1xuICAgICAgICAgIGlmICh0aGlzLnBheWxvYWRNZXNzYWdlLnJldGFpbmVkKSBmaXJzdCB8PSAweDAxO1xuICAgICAgICAgIGRlc3RpbmF0aW9uTmFtZUxlbmd0aCA9IFVURjhMZW5ndGgoXG4gICAgICAgICAgICB0aGlzLnBheWxvYWRNZXNzYWdlLmRlc3RpbmF0aW9uTmFtZVxuICAgICAgICAgICk7XG4gICAgICAgICAgcmVtTGVuZ3RoICs9IGRlc3RpbmF0aW9uTmFtZUxlbmd0aCArIDI7XG4gICAgICAgICAgdmFyIHBheWxvYWRCeXRlcyA9IHRoaXMucGF5bG9hZE1lc3NhZ2UucGF5bG9hZEJ5dGVzO1xuICAgICAgICAgIHJlbUxlbmd0aCArPSBwYXlsb2FkQnl0ZXMuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAocGF5bG9hZEJ5dGVzIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpXG4gICAgICAgICAgICBwYXlsb2FkQnl0ZXMgPSBuZXcgVWludDhBcnJheShwYXlsb2FkQnl0ZXMpO1xuICAgICAgICAgIGVsc2UgaWYgKCEocGF5bG9hZEJ5dGVzIGluc3RhbmNlb2YgVWludDhBcnJheSkpXG4gICAgICAgICAgICBwYXlsb2FkQnl0ZXMgPSBuZXcgVWludDhBcnJheShwYXlsb2FkQnl0ZXMuYnVmZmVyKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5ESVNDT05ORUNUOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIC8vIE5vdyB3ZSBjYW4gYWxsb2NhdGUgYSBidWZmZXIgZm9yIHRoZSBtZXNzYWdlXG5cbiAgICAgIHZhciBtYmkgPSBlbmNvZGVNQkkocmVtTGVuZ3RoKTsgLy8gQ29udmVydCB0aGUgbGVuZ3RoIHRvIE1RVFQgTUJJIGZvcm1hdFxuICAgICAgdmFyIHBvcyA9IG1iaS5sZW5ndGggKyAxOyAvLyBPZmZzZXQgb2Ygc3RhcnQgb2YgdmFyaWFibGUgaGVhZGVyXG4gICAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHJlbUxlbmd0aCArIHBvcyk7XG4gICAgICB2YXIgYnl0ZVN0cmVhbSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7IC8vIHZpZXcgaXQgYXMgYSBzZXF1ZW5jZSBvZiBieXRlc1xuXG4gICAgICAvL1dyaXRlIHRoZSBmaXhlZCBoZWFkZXIgaW50byB0aGUgYnVmZmVyXG4gICAgICBieXRlU3RyZWFtWzBdID0gZmlyc3Q7XG4gICAgICBieXRlU3RyZWFtLnNldChtYmksIDEpO1xuXG4gICAgICAvLyBJZiB0aGlzIGlzIGEgUFVCTElTSCB0aGVuIHRoZSB2YXJpYWJsZSBoZWFkZXIgc3RhcnRzIHdpdGggYSB0b3BpY1xuICAgICAgaWYgKHRoaXMudHlwZSA9PSBNRVNTQUdFX1RZUEUuUFVCTElTSClcbiAgICAgICAgcG9zID0gd3JpdGVTdHJpbmcoXG4gICAgICAgICAgdGhpcy5wYXlsb2FkTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUsXG4gICAgICAgICAgZGVzdGluYXRpb25OYW1lTGVuZ3RoLFxuICAgICAgICAgIGJ5dGVTdHJlYW0sXG4gICAgICAgICAgcG9zXG4gICAgICAgICk7XG4gICAgICAvLyBJZiB0aGlzIGlzIGEgQ09OTkVDVCB0aGVuIHRoZSB2YXJpYWJsZSBoZWFkZXIgY29udGFpbnMgdGhlIHByb3RvY29sIG5hbWUvdmVyc2lvbiwgZmxhZ3MgYW5kIGtlZXBhbGl2ZSB0aW1lXG4gICAgICBlbHNlIGlmICh0aGlzLnR5cGUgPT0gTUVTU0FHRV9UWVBFLkNPTk5FQ1QpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLm1xdHRWZXJzaW9uKSB7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgYnl0ZVN0cmVhbS5zZXQoTXF0dFByb3RvSWRlbnRpZmllcnYzLCBwb3MpO1xuICAgICAgICAgICAgcG9zICs9IE1xdHRQcm90b0lkZW50aWZpZXJ2My5sZW5ndGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBieXRlU3RyZWFtLnNldChNcXR0UHJvdG9JZGVudGlmaWVydjQsIHBvcyk7XG4gICAgICAgICAgICBwb3MgKz0gTXF0dFByb3RvSWRlbnRpZmllcnY0Lmxlbmd0aDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb25uZWN0RmxhZ3MgPSAwO1xuICAgICAgICBpZiAodGhpcy5jbGVhblNlc3Npb24pIGNvbm5lY3RGbGFncyA9IDB4MDI7XG4gICAgICAgIGlmICh0aGlzLndpbGxNZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25uZWN0RmxhZ3MgfD0gMHgwNDtcbiAgICAgICAgICBjb25uZWN0RmxhZ3MgfD0gdGhpcy53aWxsTWVzc2FnZS5xb3MgPDwgMztcbiAgICAgICAgICBpZiAodGhpcy53aWxsTWVzc2FnZS5yZXRhaW5lZCkge1xuICAgICAgICAgICAgY29ubmVjdEZsYWdzIHw9IDB4MjA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnVzZXJOYW1lICE9PSB1bmRlZmluZWQpIGNvbm5lY3RGbGFncyB8PSAweDgwO1xuICAgICAgICBpZiAodGhpcy5wYXNzd29yZCAhPT0gdW5kZWZpbmVkKSBjb25uZWN0RmxhZ3MgfD0gMHg0MDtcbiAgICAgICAgYnl0ZVN0cmVhbVtwb3MrK10gPSBjb25uZWN0RmxhZ3M7XG4gICAgICAgIHBvcyA9IHdyaXRlVWludDE2KHRoaXMua2VlcEFsaXZlSW50ZXJ2YWwsIGJ5dGVTdHJlYW0sIHBvcyk7XG4gICAgICB9XG5cbiAgICAgIC8vIE91dHB1dCB0aGUgbWVzc2FnZUlkZW50aWZpZXIgLSBpZiB0aGVyZSBpcyBvbmVcbiAgICAgIGlmICh0aGlzLm1lc3NhZ2VJZGVudGlmaWVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHBvcyA9IHdyaXRlVWludDE2KHRoaXMubWVzc2FnZUlkZW50aWZpZXIsIGJ5dGVTdHJlYW0sIHBvcyk7XG5cbiAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLkNPTk5FQ1Q6XG4gICAgICAgICAgcG9zID0gd3JpdGVTdHJpbmcoXG4gICAgICAgICAgICB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgVVRGOExlbmd0aCh0aGlzLmNsaWVudElkKSxcbiAgICAgICAgICAgIGJ5dGVTdHJlYW0sXG4gICAgICAgICAgICBwb3NcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmICh0aGlzLndpbGxNZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBvcyA9IHdyaXRlU3RyaW5nKFxuICAgICAgICAgICAgICB0aGlzLndpbGxNZXNzYWdlLmRlc3RpbmF0aW9uTmFtZSxcbiAgICAgICAgICAgICAgVVRGOExlbmd0aCh0aGlzLndpbGxNZXNzYWdlLmRlc3RpbmF0aW9uTmFtZSksXG4gICAgICAgICAgICAgIGJ5dGVTdHJlYW0sXG4gICAgICAgICAgICAgIHBvc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHBvcyA9IHdyaXRlVWludDE2KFxuICAgICAgICAgICAgICB3aWxsTWVzc2FnZVBheWxvYWRCeXRlcy5ieXRlTGVuZ3RoLFxuICAgICAgICAgICAgICBieXRlU3RyZWFtLFxuICAgICAgICAgICAgICBwb3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBieXRlU3RyZWFtLnNldCh3aWxsTWVzc2FnZVBheWxvYWRCeXRlcywgcG9zKTtcbiAgICAgICAgICAgIHBvcyArPSB3aWxsTWVzc2FnZVBheWxvYWRCeXRlcy5ieXRlTGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy51c2VyTmFtZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcG9zID0gd3JpdGVTdHJpbmcoXG4gICAgICAgICAgICAgIHRoaXMudXNlck5hbWUsXG4gICAgICAgICAgICAgIFVURjhMZW5ndGgodGhpcy51c2VyTmFtZSksXG4gICAgICAgICAgICAgIGJ5dGVTdHJlYW0sXG4gICAgICAgICAgICAgIHBvc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICBpZiAodGhpcy5wYXNzd29yZCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcG9zID0gd3JpdGVTdHJpbmcoXG4gICAgICAgICAgICAgIHRoaXMucGFzc3dvcmQsXG4gICAgICAgICAgICAgIFVURjhMZW5ndGgodGhpcy5wYXNzd29yZCksXG4gICAgICAgICAgICAgIGJ5dGVTdHJlYW0sXG4gICAgICAgICAgICAgIHBvc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5QVUJMSVNIOlxuICAgICAgICAgIC8vIFBVQkxJU0ggaGFzIGEgdGV4dCBvciBiaW5hcnkgcGF5bG9hZCwgaWYgdGV4dCBkbyBub3QgYWRkIGEgMiBieXRlIGxlbmd0aCBmaWVsZCwganVzdCB0aGUgVVRGIGNoYXJhY3RlcnMuXG4gICAgICAgICAgYnl0ZVN0cmVhbS5zZXQocGF5bG9hZEJ5dGVzLCBwb3MpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgLy8gICAgXHQgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCUkVDOlxuICAgICAgICAvLyAgICBcdCAgICBjYXNlIE1FU1NBR0VfVFlQRS5QVUJSRUw6XG4gICAgICAgIC8vICAgIFx0ICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQkNPTVA6XG4gICAgICAgIC8vICAgIFx0ICAgIFx0YnJlYWs7XG5cbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuU1VCU0NSSUJFOlxuICAgICAgICAgIC8vIFNVQlNDUklCRSBoYXMgYSBsaXN0IG9mIHRvcGljIHN0cmluZ3MgYW5kIHJlcXVlc3QgUW9TXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRvcGljcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcG9zID0gd3JpdGVTdHJpbmcoXG4gICAgICAgICAgICAgIHRoaXMudG9waWNzW2ldLFxuICAgICAgICAgICAgICB0b3BpY1N0ckxlbmd0aFtpXSxcbiAgICAgICAgICAgICAgYnl0ZVN0cmVhbSxcbiAgICAgICAgICAgICAgcG9zXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnl0ZVN0cmVhbVtwb3MrK10gPSB0aGlzLnJlcXVlc3RlZFFvc1tpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuVU5TVUJTQ1JJQkU6XG4gICAgICAgICAgLy8gVU5TVUJTQ1JJQkUgaGFzIGEgbGlzdCBvZiB0b3BpYyBzdHJpbmdzXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRvcGljcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHBvcyA9IHdyaXRlU3RyaW5nKFxuICAgICAgICAgICAgICB0aGlzLnRvcGljc1tpXSxcbiAgICAgICAgICAgICAgdG9waWNTdHJMZW5ndGhbaV0sXG4gICAgICAgICAgICAgIGJ5dGVTdHJlYW0sXG4gICAgICAgICAgICAgIHBvc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBEbyBub3RoaW5nLlxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBkZWNvZGVNZXNzYWdlKGlucHV0LCBwb3MpIHtcbiAgICAgIHZhciBzdGFydGluZ1BvcyA9IHBvcztcbiAgICAgIHZhciBmaXJzdCA9IGlucHV0W3Bvc107XG4gICAgICB2YXIgdHlwZSA9IGZpcnN0ID4+IDQ7XG4gICAgICB2YXIgbWVzc2FnZUluZm8gPSAoZmlyc3QgJj0gMHgwZik7XG4gICAgICBwb3MgKz0gMTtcblxuICAgICAgLy8gRGVjb2RlIHRoZSByZW1haW5pbmcgbGVuZ3RoIChNQkkgZm9ybWF0KVxuXG4gICAgICB2YXIgZGlnaXQ7XG4gICAgICB2YXIgcmVtTGVuZ3RoID0gMDtcbiAgICAgIHZhciBtdWx0aXBsaWVyID0gMTtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHBvcyA9PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gW251bGwsIHN0YXJ0aW5nUG9zXTtcbiAgICAgICAgfVxuICAgICAgICBkaWdpdCA9IGlucHV0W3BvcysrXTtcbiAgICAgICAgcmVtTGVuZ3RoICs9IChkaWdpdCAmIDB4N2YpICogbXVsdGlwbGllcjtcbiAgICAgICAgbXVsdGlwbGllciAqPSAxMjg7XG4gICAgICB9IHdoaWxlICgoZGlnaXQgJiAweDgwKSAhPT0gMCk7XG5cbiAgICAgIHZhciBlbmRQb3MgPSBwb3MgKyByZW1MZW5ndGg7XG4gICAgICBpZiAoZW5kUG9zID4gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbbnVsbCwgc3RhcnRpbmdQb3NdO1xuICAgICAgfVxuXG4gICAgICB2YXIgd2lyZU1lc3NhZ2UgPSBuZXcgV2lyZU1lc3NhZ2UodHlwZSk7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuQ09OTkFDSzpcbiAgICAgICAgICB2YXIgY29ubmVjdEFja25vd2xlZGdlRmxhZ3MgPSBpbnB1dFtwb3MrK107XG4gICAgICAgICAgaWYgKGNvbm5lY3RBY2tub3dsZWRnZUZsYWdzICYgMHgwMSkgd2lyZU1lc3NhZ2Uuc2Vzc2lvblByZXNlbnQgPSB0cnVlO1xuICAgICAgICAgIHdpcmVNZXNzYWdlLnJldHVybkNvZGUgPSBpbnB1dFtwb3MrK107XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCTElTSDpcbiAgICAgICAgICB2YXIgcW9zID0gKG1lc3NhZ2VJbmZvID4+IDEpICYgMHgwMztcblxuICAgICAgICAgIHZhciBsZW4gPSByZWFkVWludDE2KGlucHV0LCBwb3MpO1xuICAgICAgICAgIHBvcyArPSAyO1xuICAgICAgICAgIHZhciB0b3BpY05hbWUgPSBwYXJzZVVURjgoaW5wdXQsIHBvcywgbGVuKTtcbiAgICAgICAgICBwb3MgKz0gbGVuO1xuICAgICAgICAgIC8vIElmIFFvUyAxIG9yIDIgdGhlcmUgd2lsbCBiZSBhIG1lc3NhZ2VJZGVudGlmaWVyXG4gICAgICAgICAgaWYgKHFvcyA+IDApIHtcbiAgICAgICAgICAgIHdpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyID0gcmVhZFVpbnQxNihpbnB1dCwgcG9zKTtcbiAgICAgICAgICAgIHBvcyArPSAyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBtZXNzYWdlID0gbmV3IE1lc3NhZ2UoaW5wdXQuc3ViYXJyYXkocG9zLCBlbmRQb3MpKTtcbiAgICAgICAgICBpZiAoKG1lc3NhZ2VJbmZvICYgMHgwMSkgPT0gMHgwMSkgbWVzc2FnZS5yZXRhaW5lZCA9IHRydWU7XG4gICAgICAgICAgaWYgKChtZXNzYWdlSW5mbyAmIDB4MDgpID09IDB4MDgpIG1lc3NhZ2UuZHVwbGljYXRlID0gdHJ1ZTtcbiAgICAgICAgICBtZXNzYWdlLnFvcyA9IHFvcztcbiAgICAgICAgICBtZXNzYWdlLmRlc3RpbmF0aW9uTmFtZSA9IHRvcGljTmFtZTtcbiAgICAgICAgICB3aXJlTWVzc2FnZS5wYXlsb2FkTWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCQUNLOlxuICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5QVUJSRUM6XG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQlJFTDpcbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCQ09NUDpcbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuVU5TVUJBQ0s6XG4gICAgICAgICAgd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXIgPSByZWFkVWludDE2KGlucHV0LCBwb3MpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlNVQkFDSzpcbiAgICAgICAgICB3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllciA9IHJlYWRVaW50MTYoaW5wdXQsIHBvcyk7XG4gICAgICAgICAgcG9zICs9IDI7XG4gICAgICAgICAgd2lyZU1lc3NhZ2UucmV0dXJuQ29kZSA9IGlucHV0LnN1YmFycmF5KHBvcywgZW5kUG9zKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW3dpcmVNZXNzYWdlLCBlbmRQb3NdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdyaXRlVWludDE2KGlucHV0LCBidWZmZXIsIG9mZnNldCkge1xuICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGlucHV0ID4+IDg7IC8vTVNCXG4gICAgICBidWZmZXJbb2Zmc2V0KytdID0gaW5wdXQgJSAyNTY7IC8vTFNCXG4gICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdyaXRlU3RyaW5nKGlucHV0LCB1dGY4TGVuZ3RoLCBidWZmZXIsIG9mZnNldCkge1xuICAgICAgb2Zmc2V0ID0gd3JpdGVVaW50MTYodXRmOExlbmd0aCwgYnVmZmVyLCBvZmZzZXQpO1xuICAgICAgc3RyaW5nVG9VVEY4KGlucHV0LCBidWZmZXIsIG9mZnNldCk7XG4gICAgICByZXR1cm4gb2Zmc2V0ICsgdXRmOExlbmd0aDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWFkVWludDE2KGJ1ZmZlciwgb2Zmc2V0KSB7XG4gICAgICByZXR1cm4gMjU2ICogYnVmZmVyW29mZnNldF0gKyBidWZmZXJbb2Zmc2V0ICsgMV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5jb2RlcyBhbiBNUVRUIE11bHRpLUJ5dGUgSW50ZWdlclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZW5jb2RlTUJJKG51bWJlcikge1xuICAgICAgdmFyIG91dHB1dCA9IG5ldyBBcnJheSgxKTtcbiAgICAgIHZhciBudW1CeXRlcyA9IDA7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgdmFyIGRpZ2l0ID0gbnVtYmVyICUgMTI4O1xuICAgICAgICBudW1iZXIgPSBudW1iZXIgPj4gNztcbiAgICAgICAgaWYgKG51bWJlciA+IDApIHtcbiAgICAgICAgICBkaWdpdCB8PSAweDgwO1xuICAgICAgICB9XG4gICAgICAgIG91dHB1dFtudW1CeXRlcysrXSA9IGRpZ2l0O1xuICAgICAgfSB3aGlsZSAobnVtYmVyID4gMCAmJiBudW1CeXRlcyA8IDQpO1xuXG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRha2VzIGEgU3RyaW5nIGFuZCBjYWxjdWxhdGVzIGl0cyBsZW5ndGggaW4gYnl0ZXMgd2hlbiBlbmNvZGVkIGluIFVURjguXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBVVEY4TGVuZ3RoKGlucHV0KSB7XG4gICAgICB2YXIgb3V0cHV0ID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoYXJDb2RlID0gaW5wdXQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGNoYXJDb2RlID4gMHg3ZmYpIHtcbiAgICAgICAgICAvLyBTdXJyb2dhdGUgcGFpciBtZWFucyBpdHMgYSA0IGJ5dGUgY2hhcmFjdGVyXG4gICAgICAgICAgaWYgKDB4ZDgwMCA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSAweGRiZmYpIHtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIG91dHB1dCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXRwdXQgKz0gMztcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyQ29kZSA+IDB4N2YpIG91dHB1dCArPSAyO1xuICAgICAgICBlbHNlIG91dHB1dCsrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBhIFN0cmluZyBhbmQgd3JpdGVzIGl0IGludG8gYW4gYXJyYXkgYXMgVVRGOCBlbmNvZGVkIGJ5dGVzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RyaW5nVG9VVEY4KGlucHV0LCBvdXRwdXQsIHN0YXJ0KSB7XG4gICAgICB2YXIgcG9zID0gc3RhcnQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGFyQ29kZSA9IGlucHV0LmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIGEgc3Vycm9nYXRlIHBhaXIuXG4gICAgICAgIGlmICgweGQ4MDAgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gMHhkYmZmKSB7XG4gICAgICAgICAgdmFyIGxvd0NoYXJDb2RlID0gaW5wdXQuY2hhckNvZGVBdCgrK2kpO1xuICAgICAgICAgIGlmIChpc05hTihsb3dDaGFyQ29kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLk1BTEZPUk1FRF9VTklDT0RFLCBbY2hhckNvZGUsIGxvd0NoYXJDb2RlXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoYXJDb2RlID1cbiAgICAgICAgICAgICgoY2hhckNvZGUgLSAweGQ4MDApIDw8IDEwKSArIChsb3dDaGFyQ29kZSAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoYXJDb2RlIDw9IDB4N2YpIHtcbiAgICAgICAgICBvdXRwdXRbcG9zKytdID0gY2hhckNvZGU7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhckNvZGUgPD0gMHg3ZmYpIHtcbiAgICAgICAgICBvdXRwdXRbcG9zKytdID0gKChjaGFyQ29kZSA+PiA2KSAmIDB4MWYpIHwgMHhjMDtcbiAgICAgICAgICBvdXRwdXRbcG9zKytdID0gKGNoYXJDb2RlICYgMHgzZikgfCAweDgwO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXJDb2RlIDw9IDB4ZmZmZikge1xuICAgICAgICAgIG91dHB1dFtwb3MrK10gPSAoKGNoYXJDb2RlID4+IDEyKSAmIDB4MGYpIHwgMHhlMDtcbiAgICAgICAgICBvdXRwdXRbcG9zKytdID0gKChjaGFyQ29kZSA+PiA2KSAmIDB4M2YpIHwgMHg4MDtcbiAgICAgICAgICBvdXRwdXRbcG9zKytdID0gKGNoYXJDb2RlICYgMHgzZikgfCAweDgwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dFtwb3MrK10gPSAoKGNoYXJDb2RlID4+IDE4KSAmIDB4MDcpIHwgMHhmMDtcbiAgICAgICAgICBvdXRwdXRbcG9zKytdID0gKChjaGFyQ29kZSA+PiAxMikgJiAweDNmKSB8IDB4ODA7XG4gICAgICAgICAgb3V0cHV0W3BvcysrXSA9ICgoY2hhckNvZGUgPj4gNikgJiAweDNmKSB8IDB4ODA7XG4gICAgICAgICAgb3V0cHV0W3BvcysrXSA9IChjaGFyQ29kZSAmIDB4M2YpIHwgMHg4MDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVVURjgoaW5wdXQsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICB2YXIgb3V0cHV0ID0gXCJcIjtcbiAgICAgIHZhciB1dGYxNjtcbiAgICAgIHZhciBwb3MgPSBvZmZzZXQ7XG5cbiAgICAgIHdoaWxlIChwb3MgPCBvZmZzZXQgKyBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGJ5dGUxID0gaW5wdXRbcG9zKytdO1xuICAgICAgICBpZiAoYnl0ZTEgPCAxMjgpIHV0ZjE2ID0gYnl0ZTE7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBieXRlMiA9IGlucHV0W3BvcysrXSAtIDEyODtcbiAgICAgICAgICBpZiAoYnl0ZTIgPCAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuTUFMRk9STUVEX1VURiwgW1xuICAgICAgICAgICAgICAgIGJ5dGUxLnRvU3RyaW5nKDE2KSxcbiAgICAgICAgICAgICAgICBieXRlMi50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgXCJcIlxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoYnl0ZTEgPCAweGUwKVxuICAgICAgICAgICAgLy8gMiBieXRlIGNoYXJhY3RlclxuICAgICAgICAgICAgdXRmMTYgPSA2NCAqIChieXRlMSAtIDB4YzApICsgYnl0ZTI7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYnl0ZTMgPSBpbnB1dFtwb3MrK10gLSAxMjg7XG4gICAgICAgICAgICBpZiAoYnl0ZTMgPCAwKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLk1BTEZPUk1FRF9VVEYsIFtcbiAgICAgICAgICAgICAgICAgIGJ5dGUxLnRvU3RyaW5nKDE2KSxcbiAgICAgICAgICAgICAgICAgIGJ5dGUyLnRvU3RyaW5nKDE2KSxcbiAgICAgICAgICAgICAgICAgIGJ5dGUzLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoYnl0ZTEgPCAweGYwKVxuICAgICAgICAgICAgICAvLyAzIGJ5dGUgY2hhcmFjdGVyXG4gICAgICAgICAgICAgIHV0ZjE2ID0gNDA5NiAqIChieXRlMSAtIDB4ZTApICsgNjQgKiBieXRlMiArIGJ5dGUzO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBieXRlNCA9IGlucHV0W3BvcysrXSAtIDEyODtcbiAgICAgICAgICAgICAgaWYgKGJ5dGU0IDwgMClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuTUFMRk9STUVEX1VURiwgW1xuICAgICAgICAgICAgICAgICAgICBieXRlMS50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgICAgIGJ5dGUyLnRvU3RyaW5nKDE2KSxcbiAgICAgICAgICAgICAgICAgICAgYnl0ZTMudG9TdHJpbmcoMTYpLFxuICAgICAgICAgICAgICAgICAgICBieXRlNC50b1N0cmluZygxNilcbiAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgaWYgKGJ5dGUxIDwgMHhmOClcbiAgICAgICAgICAgICAgICAvLyA0IGJ5dGUgY2hhcmFjdGVyXG4gICAgICAgICAgICAgICAgdXRmMTYgPVxuICAgICAgICAgICAgICAgICAgMjYyMTQ0ICogKGJ5dGUxIC0gMHhmMCkgKyA0MDk2ICogYnl0ZTIgKyA2NCAqIGJ5dGUzICsgYnl0ZTQ7XG4gICAgICAgICAgICAgIC8vIGxvbmdlciBlbmNvZGluZ3MgYXJlIG5vdCBzdXBwb3J0ZWRcbiAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5NQUxGT1JNRURfVVRGLCBbXG4gICAgICAgICAgICAgICAgICAgIGJ5dGUxLnRvU3RyaW5nKDE2KSxcbiAgICAgICAgICAgICAgICAgICAgYnl0ZTIudG9TdHJpbmcoMTYpLFxuICAgICAgICAgICAgICAgICAgICBieXRlMy50b1N0cmluZygxNiksXG4gICAgICAgICAgICAgICAgICAgIGJ5dGU0LnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGYxNiA+IDB4ZmZmZikge1xuICAgICAgICAgIC8vIDQgYnl0ZSBjaGFyYWN0ZXIgLSBleHByZXNzIGFzIGEgc3Vycm9nYXRlIHBhaXJcbiAgICAgICAgICB1dGYxNiAtPSAweDEwMDAwO1xuICAgICAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZDgwMCArICh1dGYxNiA+PiAxMCkpOyAvLyBsZWFkIGNoYXJhY3RlclxuICAgICAgICAgIHV0ZjE2ID0gMHhkYzAwICsgKHV0ZjE2ICYgMHgzZmYpOyAvLyB0cmFpbCBjaGFyYWN0ZXJcbiAgICAgICAgfVxuICAgICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh1dGYxNik7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGVhdCBrZWVwYWxpdmUgcmVxdWVzdHMsIG1vbml0b3IgcmVzcG9uc2VzLlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICB2YXIgUGluZ2VyID0gZnVuY3Rpb24oY2xpZW50LCBrZWVwQWxpdmVJbnRlcnZhbCkge1xuICAgICAgdGhpcy5fY2xpZW50ID0gY2xpZW50O1xuICAgICAgdGhpcy5fa2VlcEFsaXZlSW50ZXJ2YWwgPSBrZWVwQWxpdmVJbnRlcnZhbCAqIDEwMDA7XG4gICAgICB0aGlzLmlzUmVzZXQgPSBmYWxzZTtcblxuICAgICAgdmFyIHBpbmdSZXEgPSBuZXcgV2lyZU1lc3NhZ2UoTUVTU0FHRV9UWVBFLlBJTkdSRVEpLmVuY29kZSgpO1xuXG4gICAgICB2YXIgZG9UaW1lb3V0ID0gZnVuY3Rpb24ocGluZ2VyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZG9QaW5nLmFwcGx5KHBpbmdlcik7XG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICAvKiogQGlnbm9yZSAqL1xuICAgICAgdmFyIGRvUGluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNSZXNldCkge1xuICAgICAgICAgIHRoaXMuX2NsaWVudC5fdHJhY2UoXCJQaW5nZXIuZG9QaW5nXCIsIFwiVGltZWQgb3V0XCIpO1xuICAgICAgICAgIHRoaXMuX2NsaWVudC5fZGlzY29ubmVjdGVkKFxuICAgICAgICAgICAgRVJST1IuUElOR19USU1FT1VULmNvZGUsXG4gICAgICAgICAgICBmb3JtYXQoRVJST1IuUElOR19USU1FT1VUKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pc1Jlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5fY2xpZW50Ll90cmFjZShcIlBpbmdlci5kb1BpbmdcIiwgXCJzZW5kIFBJTkdSRVFcIik7XG4gICAgICAgICAgdGhpcy5fY2xpZW50LnNvY2tldC5zZW5kKHBpbmdSZXEpO1xuICAgICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZG9UaW1lb3V0KHRoaXMpLCB0aGlzLl9rZWVwQWxpdmVJbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5pc1Jlc2V0ID0gdHJ1ZTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgICAgIGlmICh0aGlzLl9rZWVwQWxpdmVJbnRlcnZhbCA+IDApXG4gICAgICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChkb1RpbWVvdXQodGhpcyksIHRoaXMuX2tlZXBBbGl2ZUludGVydmFsKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTW9uaXRvciByZXF1ZXN0IGNvbXBsZXRpb24uXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHZhciBUaW1lb3V0ID0gZnVuY3Rpb24oY2xpZW50LCB0aW1lb3V0U2Vjb25kcywgYWN0aW9uLCBhcmdzKSB7XG4gICAgICBpZiAoIXRpbWVvdXRTZWNvbmRzKSB0aW1lb3V0U2Vjb25kcyA9IDMwO1xuXG4gICAgICB2YXIgZG9UaW1lb3V0ID0gZnVuY3Rpb24oYWN0aW9uLCBjbGllbnQsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhY3Rpb24uYXBwbHkoY2xpZW50LCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KFxuICAgICAgICBkb1RpbWVvdXQoYWN0aW9uLCBjbGllbnQsIGFyZ3MpLFxuICAgICAgICB0aW1lb3V0U2Vjb25kcyAqIDEwMDBcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgdGhlIFdlYnNvY2tldHMgTVFUVCBWMy4xIGNsaWVudC5cbiAgICAgKlxuICAgICAqIEBuYW1lIFBhaG8uQ2xpZW50SW1wbCBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaG9zdCB0aGUgRE5TIG5hbWVvZiB0aGUgd2ViU29ja2V0IGhvc3QuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvcnQgdGhlIHBvcnQgbnVtYmVyIGZvciB0aGF0IGhvc3QuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNsaWVudElkIHRoZSBNUSBjbGllbnQgaWRlbnRpZmllci5cbiAgICAgKi9cbiAgICB2YXIgQ2xpZW50SW1wbCA9IGZ1bmN0aW9uKHVyaSwgaG9zdCwgcG9ydCwgcGF0aCwgY2xpZW50SWQpIHtcbiAgICAgIC8vIENoZWNrIGRlcGVuZGVuY2llcyBhcmUgc2F0aXNmaWVkIGluIHRoaXMgYnJvd3Nlci5cbiAgICAgIGlmICghKFwiV2ViU29ja2V0XCIgaW4gZ2xvYmFsICYmIGdsb2JhbC5XZWJTb2NrZXQgIT09IG51bGwpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuVU5TVVBQT1JURUQsIFtcIldlYlNvY2tldFwiXSkpO1xuICAgICAgfVxuICAgICAgaWYgKCEoXCJBcnJheUJ1ZmZlclwiIGluIGdsb2JhbCAmJiBnbG9iYWwuQXJyYXlCdWZmZXIgIT09IG51bGwpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuVU5TVVBQT1JURUQsIFtcIkFycmF5QnVmZmVyXCJdKSk7XG4gICAgICB9XG4gICAgICB0aGlzLl90cmFjZShcIlBhaG8uQ2xpZW50XCIsIHVyaSwgaG9zdCwgcG9ydCwgcGF0aCwgY2xpZW50SWQpO1xuXG4gICAgICB0aGlzLmhvc3QgPSBob3N0O1xuICAgICAgdGhpcy5wb3J0ID0gcG9ydDtcbiAgICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgICB0aGlzLnVyaSA9IHVyaTtcbiAgICAgIHRoaXMuY2xpZW50SWQgPSBjbGllbnRJZDtcbiAgICAgIHRoaXMuX3dzdXJpID0gbnVsbDtcblxuICAgICAgLy8gTG9jYWwgc3RvcmFnZWtleXMgYXJlIHF1YWxpZmllZCB3aXRoIHRoZSBmb2xsb3dpbmcgc3RyaW5nLlxuICAgICAgLy8gVGhlIGNvbmRpdGlvbmFsIGluY2x1c2lvbiBvZiBwYXRoIGluIHRoZSBrZXkgaXMgZm9yIGJhY2t3YXJkXG4gICAgICAvLyBjb21wYXRpYmlsaXR5IHRvIHdoZW4gdGhlIHBhdGggd2FzIG5vdCBjb25maWd1cmFibGUgYW5kIGFzc3VtZWQgdG9cbiAgICAgIC8vIGJlIC9tcXR0XG4gICAgICB0aGlzLl9sb2NhbEtleSA9XG4gICAgICAgIGhvc3QgK1xuICAgICAgICBcIjpcIiArXG4gICAgICAgIHBvcnQgK1xuICAgICAgICAocGF0aCAhPSBcIi9tcXR0XCIgPyBcIjpcIiArIHBhdGggOiBcIlwiKSArXG4gICAgICAgIFwiOlwiICtcbiAgICAgICAgY2xpZW50SWQgK1xuICAgICAgICBcIjpcIjtcblxuICAgICAgLy8gQ3JlYXRlIHByaXZhdGUgaW5zdGFuY2Utb25seSBtZXNzYWdlIHF1ZXVlXG4gICAgICAvLyBJbnRlcm5hbCBxdWV1ZSBvZiBtZXNzYWdlcyB0byBiZSBzZW50LCBpbiBzZW5kaW5nIG9yZGVyLlxuICAgICAgdGhpcy5fbXNnX3F1ZXVlID0gW107XG4gICAgICB0aGlzLl9idWZmZXJlZF9tc2dfcXVldWUgPSBbXTtcblxuICAgICAgLy8gTWVzc2FnZXMgd2UgaGF2ZSBzZW50IGFuZCBhcmUgZXhwZWN0aW5nIGEgcmVzcG9uc2UgZm9yLCBpbmRleGVkIGJ5IHRoZWlyIHJlc3BlY3RpdmUgbWVzc2FnZSBpZHMuXG4gICAgICB0aGlzLl9zZW50TWVzc2FnZXMgPSB7fTtcblxuICAgICAgLy8gTWVzc2FnZXMgd2UgaGF2ZSByZWNlaXZlZCBhbmQgYWNrbm93bGVnZWQgYW5kIGFyZSBleHBlY3RpbmcgYSBjb25maXJtIG1lc3NhZ2UgZm9yXG4gICAgICAvLyBpbmRleGVkIGJ5IHRoZWlyIHJlc3BlY3RpdmUgbWVzc2FnZSBpZHMuXG4gICAgICB0aGlzLl9yZWNlaXZlZE1lc3NhZ2VzID0ge307XG5cbiAgICAgIC8vIEludGVybmFsIGxpc3Qgb2YgY2FsbGJhY2tzIHRvIGJlIGV4ZWN1dGVkIHdoZW4gbWVzc2FnZXNcbiAgICAgIC8vIGhhdmUgYmVlbiBzdWNjZXNzZnVsbHkgc2VudCBvdmVyIHdlYiBzb2NrZXQsIGUuZy4gZGlzY29ubmVjdFxuICAgICAgLy8gd2hlbiBpdCBkb2Vzbid0IGhhdmUgdG8gd2FpdCBmb3IgQUNLLCBqdXN0IG1lc3NhZ2UgaXMgZGlzcGF0Y2hlZC5cbiAgICAgIHRoaXMuX25vdGlmeV9tc2dfc2VudCA9IHt9O1xuXG4gICAgICAvLyBVbmlxdWUgaWRlbnRpZmllciBmb3IgU0VORCBtZXNzYWdlcywgaW5jcmVtZW50aW5nXG4gICAgICAvLyBjb3VudGVyIGFzIG1lc3NhZ2VzIGFyZSBzZW50LlxuICAgICAgdGhpcy5fbWVzc2FnZV9pZGVudGlmaWVyID0gMTtcblxuICAgICAgLy8gVXNlZCB0byBkZXRlcm1pbmUgdGhlIHRyYW5zbWlzc2lvbiBzZXF1ZW5jZSBvZiBzdG9yZWQgc2VudCBtZXNzYWdlcy5cbiAgICAgIHRoaXMuX3NlcXVlbmNlID0gMDtcblxuICAgICAgLy8gTG9hZCB0aGUgbG9jYWwgc3RhdGUsIGlmIGFueSwgZnJvbSB0aGUgc2F2ZWQgdmVyc2lvbiwgb25seSByZXN0b3JlIHN0YXRlIHJlbGV2YW50IHRvIHRoaXMgY2xpZW50LlxuICAgICAgZm9yICh2YXIga2V5IGluIGxvY2FsU3RvcmFnZSlcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleS5pbmRleE9mKFwiU2VudDpcIiArIHRoaXMuX2xvY2FsS2V5KSA9PT0gMCB8fFxuICAgICAgICAgIGtleS5pbmRleE9mKFwiUmVjZWl2ZWQ6XCIgKyB0aGlzLl9sb2NhbEtleSkgPT09IDBcbiAgICAgICAgKVxuICAgICAgICAgIHRoaXMucmVzdG9yZShrZXkpO1xuICAgIH07XG5cbiAgICAvLyBNZXNzYWdpbmcgQ2xpZW50IHB1YmxpYyBpbnN0YW5jZSBtZW1iZXJzLlxuICAgIENsaWVudEltcGwucHJvdG90eXBlLmhvc3QgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLnBvcnQgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLnBhdGggPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLnVyaSA9IG51bGw7XG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuY2xpZW50SWQgPSBudWxsO1xuXG4gICAgLy8gTWVzc2FnaW5nIENsaWVudCBwcml2YXRlIGluc3RhbmNlIG1lbWJlcnMuXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuc29ja2V0ID0gbnVsbDtcbiAgICAvKiB0cnVlIG9uY2Ugd2UgaGF2ZSByZWNlaXZlZCBhbiBhY2tub3dsZWRnZW1lbnQgdG8gYSBDT05ORUNUIHBhY2tldC4gKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAvKiBUaGUgbGFyZ2VzdCBtZXNzYWdlIGlkZW50aWZpZXIgYWxsb3dlZCwgbWF5IG5vdCBiZSBsYXJnZXIgdGhhbiAyKioxNiBidXRcbiAgICAgKiBpZiBzZXQgc21hbGxlciByZWR1Y2VzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBvdXRib3VuZCBtZXNzYWdlcyBhbGxvd2VkLlxuICAgICAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLm1heE1lc3NhZ2VJZGVudGlmaWVyID0gNjU1MzY7XG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuY29ubmVjdE9wdGlvbnMgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLmhvc3RJbmRleCA9IG51bGw7XG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUub25Db25uZWN0ZWQgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLm9uQ29ubmVjdGlvbkxvc3QgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLm9uTWVzc2FnZURlbGl2ZXJlZCA9IG51bGw7XG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUub25NZXNzYWdlQXJyaXZlZCA9IG51bGw7XG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUudHJhY2VGdW5jdGlvbiA9IG51bGw7XG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX21zZ19xdWV1ZSA9IG51bGw7XG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX2J1ZmZlcmVkX21zZ19xdWV1ZSA9IG51bGw7XG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX2Nvbm5lY3RUaW1lb3V0ID0gbnVsbDtcbiAgICAvKiBUaGUgc2VuZFBpbmdlciBtb25pdG9ycyBob3cgbG9uZyB3ZSBhbGxvdyBiZWZvcmUgd2Ugc2VuZCBkYXRhIHRvIHByb3ZlIHRvIHRoZSBzZXJ2ZXIgdGhhdCB3ZSBhcmUgYWxpdmUuICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuc2VuZFBpbmdlciA9IG51bGw7XG4gICAgLyogVGhlIHJlY2VpdmVQaW5nZXIgbW9uaXRvcnMgaG93IGxvbmcgd2UgYWxsb3cgYmVmb3JlIHdlIHJlcXVpcmUgZXZpZGVuY2UgdGhhdCB0aGUgc2VydmVyIGlzIGFsaXZlLiAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLnJlY2VpdmVQaW5nZXIgPSBudWxsO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9yZWNvbm5lY3RJbnRlcnZhbCA9IDE7IC8vIFJlY29ubmVjdCBEZWxheSwgc3RhcnRzIGF0IDEgc2Vjb25kXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX3JlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9yZWNvbm5lY3RUaW1lb3V0ID0gbnVsbDtcbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5kaXNjb25uZWN0ZWRQdWJsaXNoaW5nID0gZmFsc2U7XG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuZGlzY29ubmVjdGVkQnVmZmVyU2l6ZSA9IDUwMDA7XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5yZWNlaXZlQnVmZmVyID0gbnVsbDtcblxuICAgIENsaWVudEltcGwucHJvdG90eXBlLl90cmFjZUJ1ZmZlciA9IG51bGw7XG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX01BWF9UUkFDRV9FTlRSSUVTID0gMTAwO1xuXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uKGNvbm5lY3RPcHRpb25zKSB7XG4gICAgICB2YXIgY29ubmVjdE9wdGlvbnNNYXNrZWQgPSB0aGlzLl90cmFjZU1hc2soY29ubmVjdE9wdGlvbnMsIFwicGFzc3dvcmRcIik7XG4gICAgICB0aGlzLl90cmFjZShcbiAgICAgICAgXCJDbGllbnQuY29ubmVjdFwiLFxuICAgICAgICBjb25uZWN0T3B0aW9uc01hc2tlZCxcbiAgICAgICAgdGhpcy5zb2NrZXQsXG4gICAgICAgIHRoaXMuY29ubmVjdGVkXG4gICAgICApO1xuXG4gICAgICBpZiAodGhpcy5jb25uZWN0ZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuSU5WQUxJRF9TVEFURSwgW1wiYWxyZWFkeSBjb25uZWN0ZWRcIl0pKTtcbiAgICAgIGlmICh0aGlzLnNvY2tldClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdChFUlJPUi5JTlZBTElEX1NUQVRFLCBbXCJhbHJlYWR5IGNvbm5lY3RlZFwiXSkpO1xuXG4gICAgICBpZiAodGhpcy5fcmVjb25uZWN0aW5nKSB7XG4gICAgICAgIC8vIGNvbm5lY3QoKSBmdW5jdGlvbiBpcyBjYWxsZWQgd2hpbGUgcmVjb25uZWN0IGlzIGluIHByb2dyZXNzLlxuICAgICAgICAvLyBUZXJtaW5hdGUgdGhlIGF1dG8gcmVjb25uZWN0IHByb2Nlc3MgdG8gdXNlIG5ldyBjb25uZWN0IG9wdGlvbnMuXG4gICAgICAgIHRoaXMuX3JlY29ubmVjdFRpbWVvdXQuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdFRpbWVvdXQgPSBudWxsO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb25uZWN0T3B0aW9ucyA9IGNvbm5lY3RPcHRpb25zO1xuICAgICAgdGhpcy5fcmVjb25uZWN0SW50ZXJ2YWwgPSAxO1xuICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICBpZiAoY29ubmVjdE9wdGlvbnMudXJpcykge1xuICAgICAgICB0aGlzLmhvc3RJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX2RvQ29ubmVjdChjb25uZWN0T3B0aW9ucy51cmlzWzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2RvQ29ubmVjdCh0aGlzLnVyaSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENsaWVudEltcGwucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uKGZpbHRlciwgc3Vic2NyaWJlT3B0aW9ucykge1xuICAgICAgdGhpcy5fdHJhY2UoXCJDbGllbnQuc3Vic2NyaWJlXCIsIGZpbHRlciwgc3Vic2NyaWJlT3B0aW9ucyk7XG5cbiAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuSU5WQUxJRF9TVEFURSwgW1wibm90IGNvbm5lY3RlZFwiXSkpO1xuXG4gICAgICB2YXIgd2lyZU1lc3NhZ2UgPSBuZXcgV2lyZU1lc3NhZ2UoTUVTU0FHRV9UWVBFLlNVQlNDUklCRSk7XG4gICAgICB3aXJlTWVzc2FnZS50b3BpY3MgPSBmaWx0ZXIuY29uc3RydWN0b3IgPT09IEFycmF5ID8gZmlsdGVyIDogW2ZpbHRlcl07XG4gICAgICBpZiAoc3Vic2NyaWJlT3B0aW9ucy5xb3MgPT09IHVuZGVmaW5lZCkgc3Vic2NyaWJlT3B0aW9ucy5xb3MgPSAwO1xuICAgICAgd2lyZU1lc3NhZ2UucmVxdWVzdGVkUW9zID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdpcmVNZXNzYWdlLnRvcGljcy5sZW5ndGg7IGkrKylcbiAgICAgICAgd2lyZU1lc3NhZ2UucmVxdWVzdGVkUW9zW2ldID0gc3Vic2NyaWJlT3B0aW9ucy5xb3M7XG5cbiAgICAgIGlmIChzdWJzY3JpYmVPcHRpb25zLm9uU3VjY2Vzcykge1xuICAgICAgICB3aXJlTWVzc2FnZS5vblN1Y2Nlc3MgPSBmdW5jdGlvbihncmFudGVkUW9zKSB7XG4gICAgICAgICAgc3Vic2NyaWJlT3B0aW9ucy5vblN1Y2Nlc3Moe1xuICAgICAgICAgICAgaW52b2NhdGlvbkNvbnRleHQ6IHN1YnNjcmliZU9wdGlvbnMuaW52b2NhdGlvbkNvbnRleHQsXG4gICAgICAgICAgICBncmFudGVkUW9zOiBncmFudGVkUW9zXG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChzdWJzY3JpYmVPcHRpb25zLm9uRmFpbHVyZSkge1xuICAgICAgICB3aXJlTWVzc2FnZS5vbkZhaWx1cmUgPSBmdW5jdGlvbihlcnJvckNvZGUpIHtcbiAgICAgICAgICBzdWJzY3JpYmVPcHRpb25zLm9uRmFpbHVyZSh7XG4gICAgICAgICAgICBpbnZvY2F0aW9uQ29udGV4dDogc3Vic2NyaWJlT3B0aW9ucy5pbnZvY2F0aW9uQ29udGV4dCxcbiAgICAgICAgICAgIGVycm9yQ29kZTogZXJyb3JDb2RlLFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBmb3JtYXQoZXJyb3JDb2RlKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoc3Vic2NyaWJlT3B0aW9ucy50aW1lb3V0KSB7XG4gICAgICAgIHdpcmVNZXNzYWdlLnRpbWVPdXQgPSBuZXcgVGltZW91dChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHN1YnNjcmliZU9wdGlvbnMudGltZW91dCxcbiAgICAgICAgICBzdWJzY3JpYmVPcHRpb25zLm9uRmFpbHVyZSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGludm9jYXRpb25Db250ZXh0OiBzdWJzY3JpYmVPcHRpb25zLmludm9jYXRpb25Db250ZXh0LFxuICAgICAgICAgICAgICBlcnJvckNvZGU6IEVSUk9SLlNVQlNDUklCRV9USU1FT1VULmNvZGUsXG4gICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZm9ybWF0KEVSUk9SLlNVQlNDUklCRV9USU1FT1VUKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gQWxsIHN1YnNjcmlwdGlvbnMgcmV0dXJuIGEgU1VCQUNLLlxuICAgICAgdGhpcy5fcmVxdWlyZXNfYWNrKHdpcmVNZXNzYWdlKTtcbiAgICAgIHRoaXMuX3NjaGVkdWxlX21lc3NhZ2Uod2lyZU1lc3NhZ2UpO1xuICAgIH07XG5cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24oZmlsdGVyLCB1bnN1YnNjcmliZU9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX3RyYWNlKFwiQ2xpZW50LnVuc3Vic2NyaWJlXCIsIGZpbHRlciwgdW5zdWJzY3JpYmVPcHRpb25zKTtcblxuICAgICAgaWYgKCF0aGlzLmNvbm5lY3RlZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdChFUlJPUi5JTlZBTElEX1NUQVRFLCBbXCJub3QgY29ubmVjdGVkXCJdKSk7XG5cbiAgICAgIHZhciB3aXJlTWVzc2FnZSA9IG5ldyBXaXJlTWVzc2FnZShNRVNTQUdFX1RZUEUuVU5TVUJTQ1JJQkUpO1xuICAgICAgd2lyZU1lc3NhZ2UudG9waWNzID0gZmlsdGVyLmNvbnN0cnVjdG9yID09PSBBcnJheSA/IGZpbHRlciA6IFtmaWx0ZXJdO1xuXG4gICAgICBpZiAodW5zdWJzY3JpYmVPcHRpb25zLm9uU3VjY2Vzcykge1xuICAgICAgICB3aXJlTWVzc2FnZS5jYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVuc3Vic2NyaWJlT3B0aW9ucy5vblN1Y2Nlc3Moe1xuICAgICAgICAgICAgaW52b2NhdGlvbkNvbnRleHQ6IHVuc3Vic2NyaWJlT3B0aW9ucy5pbnZvY2F0aW9uQ29udGV4dFxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKHVuc3Vic2NyaWJlT3B0aW9ucy50aW1lb3V0KSB7XG4gICAgICAgIHdpcmVNZXNzYWdlLnRpbWVPdXQgPSBuZXcgVGltZW91dChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHVuc3Vic2NyaWJlT3B0aW9ucy50aW1lb3V0LFxuICAgICAgICAgIHVuc3Vic2NyaWJlT3B0aW9ucy5vbkZhaWx1cmUsXG4gICAgICAgICAgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpbnZvY2F0aW9uQ29udGV4dDogdW5zdWJzY3JpYmVPcHRpb25zLmludm9jYXRpb25Db250ZXh0LFxuICAgICAgICAgICAgICBlcnJvckNvZGU6IEVSUk9SLlVOU1VCU0NSSUJFX1RJTUVPVVQuY29kZSxcbiAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBmb3JtYXQoRVJST1IuVU5TVUJTQ1JJQkVfVElNRU9VVClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFsbCB1bnN1YnNjcmliZXMgcmV0dXJuIGEgU1VCQUNLLlxuICAgICAgdGhpcy5fcmVxdWlyZXNfYWNrKHdpcmVNZXNzYWdlKTtcbiAgICAgIHRoaXMuX3NjaGVkdWxlX21lc3NhZ2Uod2lyZU1lc3NhZ2UpO1xuICAgIH07XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgdGhpcy5fdHJhY2UoXCJDbGllbnQuc2VuZFwiLCBtZXNzYWdlKTtcblxuICAgICAgdmFyIHdpcmVNZXNzYWdlID0gbmV3IFdpcmVNZXNzYWdlKE1FU1NBR0VfVFlQRS5QVUJMSVNIKTtcbiAgICAgIHdpcmVNZXNzYWdlLnBheWxvYWRNZXNzYWdlID0gbWVzc2FnZTtcblxuICAgICAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgIC8vIE1hcmsgcW9zIDEgJiAyIG1lc3NhZ2UgYXMgXCJBQ0sgcmVxdWlyZWRcIlxuICAgICAgICAvLyBGb3IgcW9zIDAgbWVzc2FnZSwgaW52b2tlIG9uTWVzc2FnZURlbGl2ZXJlZCBjYWxsYmFjayBpZiB0aGVyZSBpcyBvbmUuXG4gICAgICAgIC8vIFRoZW4gc2NoZWR1bGUgdGhlIG1lc3NhZ2UuXG4gICAgICAgIGlmIChtZXNzYWdlLnFvcyA+IDApIHtcbiAgICAgICAgICB0aGlzLl9yZXF1aXJlc19hY2sod2lyZU1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub25NZXNzYWdlRGVsaXZlcmVkKSB7XG4gICAgICAgICAgdGhpcy5fbm90aWZ5X21zZ19zZW50W3dpcmVNZXNzYWdlXSA9IHRoaXMub25NZXNzYWdlRGVsaXZlcmVkKFxuICAgICAgICAgICAgd2lyZU1lc3NhZ2UucGF5bG9hZE1lc3NhZ2VcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NjaGVkdWxlX21lc3NhZ2Uod2lyZU1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ3VycmVudGx5IGRpc2Nvbm5lY3RlZCwgd2lsbCBub3Qgc2NoZWR1bGUgdGhpcyBtZXNzYWdlXG4gICAgICAgIC8vIENoZWNrIGlmIHJlY29ubmVjdGluZyBpcyBpbiBwcm9ncmVzcyBhbmQgZGlzY29ubmVjdGVkIHB1Ymxpc2ggaXMgZW5hYmxlZC5cbiAgICAgICAgaWYgKHRoaXMuX3JlY29ubmVjdGluZyAmJiB0aGlzLmRpc2Nvbm5lY3RlZFB1Ymxpc2hpbmcpIHtcbiAgICAgICAgICAvLyBDaGVjayB0aGUgbGltaXQgd2hpY2ggaW5jbHVkZSB0aGUgXCJyZXF1aXJlZCBBQ0tcIiBtZXNzYWdlc1xuICAgICAgICAgIHZhciBtZXNzYWdlQ291bnQgPVxuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5fc2VudE1lc3NhZ2VzKS5sZW5ndGggK1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyZWRfbXNnX3F1ZXVlLmxlbmd0aDtcbiAgICAgICAgICBpZiAobWVzc2FnZUNvdW50ID4gdGhpcy5kaXNjb25uZWN0ZWRCdWZmZXJTaXplKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5CVUZGRVJfRlVMTCwgW3RoaXMuZGlzY29ubmVjdGVkQnVmZmVyU2l6ZV0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5xb3MgPiAwKSB7XG4gICAgICAgICAgICAgIC8vIE1hcmsgdGhpcyBtZXNzYWdlIGFzIFwiQUNLIHJlcXVpcmVkXCJcbiAgICAgICAgICAgICAgdGhpcy5fcmVxdWlyZXNfYWNrKHdpcmVNZXNzYWdlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdpcmVNZXNzYWdlLnNlcXVlbmNlID0gKyt0aGlzLl9zZXF1ZW5jZTtcbiAgICAgICAgICAgICAgLy8gQWRkIG1lc3NhZ2VzIGluIGZpZm8gb3JkZXIgdG8gYXJyYXksIGJ5IGFkZGluZyB0byBzdGFydFxuICAgICAgICAgICAgICB0aGlzLl9idWZmZXJlZF9tc2dfcXVldWUudW5zaGlmdCh3aXJlTWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuSU5WQUxJRF9TVEFURSwgW1wibm90IGNvbm5lY3RlZFwiXSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIENsaWVudEltcGwucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3RyYWNlKFwiQ2xpZW50LmRpc2Nvbm5lY3RcIik7XG5cbiAgICAgIGlmICh0aGlzLl9yZWNvbm5lY3RpbmcpIHtcbiAgICAgICAgLy8gZGlzY29ubmVjdCgpIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGlsZSByZWNvbm5lY3QgaXMgaW4gcHJvZ3Jlc3MuXG4gICAgICAgIC8vIFRlcm1pbmF0ZSB0aGUgYXV0byByZWNvbm5lY3QgcHJvY2Vzcy5cbiAgICAgICAgdGhpcy5fcmVjb25uZWN0VGltZW91dC5jYW5jZWwoKTtcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0VGltZW91dCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuc29ja2V0KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfU1RBVEUsIFtcIm5vdCBjb25uZWN0aW5nIG9yIGNvbm5lY3RlZFwiXSlcbiAgICAgICAgKTtcblxuICAgICAgdmFyIHdpcmVNZXNzYWdlID0gbmV3IFdpcmVNZXNzYWdlKE1FU1NBR0VfVFlQRS5ESVNDT05ORUNUKTtcblxuICAgICAgLy8gUnVuIHRoZSBkaXNjb25uZWN0ZWQgY2FsbCBiYWNrIGFzIHNvb24gYXMgdGhlIG1lc3NhZ2UgaGFzIGJlZW4gc2VudCxcbiAgICAgIC8vIGluIGNhc2Ugb2YgYSBmYWlsdXJlIGxhdGVyIG9uIGluIHRoZSBkaXNjb25uZWN0IHByb2Nlc3NpbmcuXG4gICAgICAvLyBhcyBhIGNvbnNlcXVlbmNlLCB0aGUgX2Rpc2NvbmVjdGVkIGNhbGwgYmFjayBtYXkgYmUgcnVuIHNldmVyYWwgdGltZXMuXG4gICAgICB0aGlzLl9ub3RpZnlfbXNnX3NlbnRbd2lyZU1lc3NhZ2VdID0gc2NvcGUodGhpcy5fZGlzY29ubmVjdGVkLCB0aGlzKTtcblxuICAgICAgdGhpcy5fc2NoZWR1bGVfbWVzc2FnZSh3aXJlTWVzc2FnZSk7XG4gICAgfTtcblxuICAgIENsaWVudEltcGwucHJvdG90eXBlLmdldFRyYWNlTG9nID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fdHJhY2VCdWZmZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fdHJhY2UoXCJDbGllbnQuZ2V0VHJhY2VMb2dcIiwgbmV3IERhdGUoKSk7XG4gICAgICAgIHRoaXMuX3RyYWNlKFxuICAgICAgICAgIFwiQ2xpZW50LmdldFRyYWNlTG9nIGluIGZsaWdodCBtZXNzYWdlc1wiLFxuICAgICAgICAgIHRoaXMuX3NlbnRNZXNzYWdlcy5sZW5ndGhcbiAgICAgICAgKTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuX3NlbnRNZXNzYWdlcylcbiAgICAgICAgICB0aGlzLl90cmFjZShcIl9zZW50TWVzc2FnZXMgXCIsIGtleSwgdGhpcy5fc2VudE1lc3NhZ2VzW2tleV0pO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fcmVjZWl2ZWRNZXNzYWdlcylcbiAgICAgICAgICB0aGlzLl90cmFjZShcIl9yZWNlaXZlZE1lc3NhZ2VzIFwiLCBrZXksIHRoaXMuX3JlY2VpdmVkTWVzc2FnZXNba2V5XSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYWNlQnVmZmVyO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5zdGFydFRyYWNlID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fdHJhY2VCdWZmZXIgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fdHJhY2VCdWZmZXIgPSBbXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3RyYWNlKFwiQ2xpZW50LnN0YXJ0VHJhY2VcIiwgbmV3IERhdGUoKSwgdmVyc2lvbik7XG4gICAgfTtcblxuICAgIENsaWVudEltcGwucHJvdG90eXBlLnN0b3BUcmFjZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgZGVsZXRlIHRoaXMuX3RyYWNlQnVmZmVyO1xuICAgIH07XG5cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fZG9Db25uZWN0ID0gZnVuY3Rpb24od3N1cmwpIHtcbiAgICAgIC8vIFdoZW4gdGhlIHNvY2tldCBpcyBvcGVuLCB0aGlzIGNsaWVudCB3aWxsIHNlbmQgdGhlIENPTk5FQ1QgV2lyZU1lc3NhZ2UgdXNpbmcgdGhlIHNhdmVkIHBhcmFtZXRlcnMuXG4gICAgICBpZiAodGhpcy5jb25uZWN0T3B0aW9ucy51c2VTU0wpIHtcbiAgICAgICAgdmFyIHVyaVBhcnRzID0gd3N1cmwuc3BsaXQoXCI6XCIpO1xuICAgICAgICB1cmlQYXJ0c1swXSA9IFwid3NzXCI7XG4gICAgICAgIHdzdXJsID0gdXJpUGFydHMuam9pbihcIjpcIik7XG4gICAgICB9XG4gICAgICB0aGlzLl93c3VyaSA9IHdzdXJsO1xuICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKHRoaXMuY29ubmVjdE9wdGlvbnMubXF0dFZlcnNpb24gPCA0KSB7XG4gICAgICAgIHRoaXMuc29ja2V0ID0gbmV3IFdlYlNvY2tldCh3c3VybCwgW1wibXF0dHYzLjFcIl0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zb2NrZXQgPSBuZXcgV2ViU29ja2V0KHdzdXJsLCBbXCJtcXR0XCJdKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgICB0aGlzLnNvY2tldC5vbm9wZW4gPSBzY29wZSh0aGlzLl9vbl9zb2NrZXRfb3BlbiwgdGhpcyk7XG4gICAgICB0aGlzLnNvY2tldC5vbm1lc3NhZ2UgPSBzY29wZSh0aGlzLl9vbl9zb2NrZXRfbWVzc2FnZSwgdGhpcyk7XG4gICAgICB0aGlzLnNvY2tldC5vbmVycm9yID0gc2NvcGUodGhpcy5fb25fc29ja2V0X2Vycm9yLCB0aGlzKTtcbiAgICAgIHRoaXMuc29ja2V0Lm9uY2xvc2UgPSBzY29wZSh0aGlzLl9vbl9zb2NrZXRfY2xvc2UsIHRoaXMpO1xuXG4gICAgICB0aGlzLnNlbmRQaW5nZXIgPSBuZXcgUGluZ2VyKHRoaXMsIHRoaXMuY29ubmVjdE9wdGlvbnMua2VlcEFsaXZlSW50ZXJ2YWwpO1xuICAgICAgdGhpcy5yZWNlaXZlUGluZ2VyID0gbmV3IFBpbmdlcihcbiAgICAgICAgdGhpcyxcbiAgICAgICAgdGhpcy5jb25uZWN0T3B0aW9ucy5rZWVwQWxpdmVJbnRlcnZhbFxuICAgICAgKTtcbiAgICAgIGlmICh0aGlzLl9jb25uZWN0VGltZW91dCkge1xuICAgICAgICB0aGlzLl9jb25uZWN0VGltZW91dC5jYW5jZWwoKTtcbiAgICAgICAgdGhpcy5fY29ubmVjdFRpbWVvdXQgPSBudWxsO1xuICAgICAgfVxuICAgICAgdGhpcy5fY29ubmVjdFRpbWVvdXQgPSBuZXcgVGltZW91dChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgdGhpcy5jb25uZWN0T3B0aW9ucy50aW1lb3V0LFxuICAgICAgICB0aGlzLl9kaXNjb25uZWN0ZWQsXG4gICAgICAgIFtFUlJPUi5DT05ORUNUX1RJTUVPVVQuY29kZSwgZm9ybWF0KEVSUk9SLkNPTk5FQ1RfVElNRU9VVCldXG4gICAgICApO1xuICAgIH07XG5cbiAgICAvLyBTY2hlZHVsZSBhIG5ldyBtZXNzYWdlIHRvIGJlIHNlbnQgb3ZlciB0aGUgV2ViU29ja2V0c1xuICAgIC8vIGNvbm5lY3Rpb24uIENPTk5FQ1QgbWVzc2FnZXMgY2F1c2UgV2ViU29ja2V0IGNvbm5lY3Rpb25cbiAgICAvLyB0byBiZSBzdGFydGVkLiBBbGwgb3RoZXIgbWVzc2FnZXMgYXJlIHF1ZXVlZCBpbnRlcm5hbGx5XG4gICAgLy8gdW50aWwgdGhpcyBoYXMgaGFwcGVuZWQuIFdoZW4gV1MgY29ubmVjdGlvbiBzdGFydHMsIHByb2Nlc3NcbiAgICAvLyBhbGwgb3V0c3RhbmRpbmcgbWVzc2FnZXMuXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX3NjaGVkdWxlX21lc3NhZ2UgPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICAvLyBBZGQgbWVzc2FnZXMgaW4gZmlmbyBvcmRlciB0byBhcnJheSwgYnkgYWRkaW5nIHRvIHN0YXJ0XG4gICAgICB0aGlzLl9tc2dfcXVldWUudW5zaGlmdChtZXNzYWdlKTtcbiAgICAgIC8vIFByb2Nlc3Mgb3V0c3RhbmRpbmcgbWVzc2FnZXMgaW4gdGhlIHF1ZXVlIGlmIHdlIGhhdmUgYW4gIG9wZW4gc29ja2V0LCBhbmQgaGF2ZSByZWNlaXZlZCBDT05OQUNLLlxuICAgICAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3NfcXVldWUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuc3RvcmUgPSBmdW5jdGlvbihwcmVmaXgsIHdpcmVNZXNzYWdlKSB7XG4gICAgICB2YXIgc3RvcmVkTWVzc2FnZSA9IHtcbiAgICAgICAgdHlwZTogd2lyZU1lc3NhZ2UudHlwZSxcbiAgICAgICAgbWVzc2FnZUlkZW50aWZpZXI6IHdpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyLFxuICAgICAgICB2ZXJzaW9uOiAxXG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHdpcmVNZXNzYWdlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCTElTSDpcbiAgICAgICAgICBpZiAod2lyZU1lc3NhZ2UucHViUmVjUmVjZWl2ZWQpIHN0b3JlZE1lc3NhZ2UucHViUmVjUmVjZWl2ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gQ29udmVydCB0aGUgcGF5bG9hZCB0byBhIGhleCBzdHJpbmcuXG4gICAgICAgICAgc3RvcmVkTWVzc2FnZS5wYXlsb2FkTWVzc2FnZSA9IHt9O1xuICAgICAgICAgIHZhciBoZXggPSBcIlwiO1xuICAgICAgICAgIHZhciBtZXNzYWdlQnl0ZXMgPSB3aXJlTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5wYXlsb2FkQnl0ZXM7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZXNzYWdlQnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlQnl0ZXNbaV0gPD0gMHhmKVxuICAgICAgICAgICAgICBoZXggPSBoZXggKyBcIjBcIiArIG1lc3NhZ2VCeXRlc1tpXS50b1N0cmluZygxNik7XG4gICAgICAgICAgICBlbHNlIGhleCA9IGhleCArIG1lc3NhZ2VCeXRlc1tpXS50b1N0cmluZygxNik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0b3JlZE1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UucGF5bG9hZEhleCA9IGhleDtcblxuICAgICAgICAgIHN0b3JlZE1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UucW9zID0gd2lyZU1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UucW9zO1xuICAgICAgICAgIHN0b3JlZE1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UuZGVzdGluYXRpb25OYW1lID1cbiAgICAgICAgICAgIHdpcmVNZXNzYWdlLnBheWxvYWRNZXNzYWdlLmRlc3RpbmF0aW9uTmFtZTtcbiAgICAgICAgICBpZiAod2lyZU1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UuZHVwbGljYXRlKVxuICAgICAgICAgICAgc3RvcmVkTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5kdXBsaWNhdGUgPSB0cnVlO1xuICAgICAgICAgIGlmICh3aXJlTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5yZXRhaW5lZClcbiAgICAgICAgICAgIHN0b3JlZE1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UucmV0YWluZWQgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gQWRkIGEgc2VxdWVuY2UgbnVtYmVyIHRvIHNlbnQgbWVzc2FnZXMuXG4gICAgICAgICAgaWYgKHByZWZpeC5pbmRleE9mKFwiU2VudDpcIikgPT09IDApIHtcbiAgICAgICAgICAgIGlmICh3aXJlTWVzc2FnZS5zZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICB3aXJlTWVzc2FnZS5zZXF1ZW5jZSA9ICsrdGhpcy5fc2VxdWVuY2U7XG4gICAgICAgICAgICBzdG9yZWRNZXNzYWdlLnNlcXVlbmNlID0gd2lyZU1lc3NhZ2Uuc2VxdWVuY2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9TVE9SRURfREFUQSwgW1xuICAgICAgICAgICAgICBwcmVmaXggKyB0aGlzLl9sb2NhbEtleSArIHdpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyLFxuICAgICAgICAgICAgICBzdG9yZWRNZXNzYWdlXG4gICAgICAgICAgICBdKVxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgICAgcHJlZml4ICsgdGhpcy5fbG9jYWxLZXkgKyB3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcixcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoc3RvcmVkTWVzc2FnZSlcbiAgICAgICk7XG4gICAgfTtcblxuICAgIENsaWVudEltcGwucHJvdG90eXBlLnJlc3RvcmUgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICB2YXIgc3RvcmVkTWVzc2FnZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuXG4gICAgICB2YXIgd2lyZU1lc3NhZ2UgPSBuZXcgV2lyZU1lc3NhZ2Uoc3RvcmVkTWVzc2FnZS50eXBlLCBzdG9yZWRNZXNzYWdlKTtcblxuICAgICAgc3dpdGNoIChzdG9yZWRNZXNzYWdlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUFVCTElTSDpcbiAgICAgICAgICAvLyBSZXBsYWNlIHRoZSBwYXlsb2FkIG1lc3NhZ2Ugd2l0aCBhIE1lc3NhZ2Ugb2JqZWN0LlxuICAgICAgICAgIHZhciBoZXggPSBzdG9yZWRNZXNzYWdlLnBheWxvYWRNZXNzYWdlLnBheWxvYWRIZXg7XG4gICAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihoZXgubGVuZ3RoIC8gMik7XG4gICAgICAgICAgdmFyIGJ5dGVTdHJlYW0gPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICB3aGlsZSAoaGV4Lmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgICB2YXIgeCA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcoMCwgMiksIDE2KTtcbiAgICAgICAgICAgIGhleCA9IGhleC5zdWJzdHJpbmcoMiwgaGV4Lmxlbmd0aCk7XG4gICAgICAgICAgICBieXRlU3RyZWFtW2krK10gPSB4O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcGF5bG9hZE1lc3NhZ2UgPSBuZXcgTWVzc2FnZShieXRlU3RyZWFtKTtcblxuICAgICAgICAgIHBheWxvYWRNZXNzYWdlLnFvcyA9IHN0b3JlZE1lc3NhZ2UucGF5bG9hZE1lc3NhZ2UucW9zO1xuICAgICAgICAgIHBheWxvYWRNZXNzYWdlLmRlc3RpbmF0aW9uTmFtZSA9XG4gICAgICAgICAgICBzdG9yZWRNZXNzYWdlLnBheWxvYWRNZXNzYWdlLmRlc3RpbmF0aW9uTmFtZTtcbiAgICAgICAgICBpZiAoc3RvcmVkTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5kdXBsaWNhdGUpXG4gICAgICAgICAgICBwYXlsb2FkTWVzc2FnZS5kdXBsaWNhdGUgPSB0cnVlO1xuICAgICAgICAgIGlmIChzdG9yZWRNZXNzYWdlLnBheWxvYWRNZXNzYWdlLnJldGFpbmVkKVxuICAgICAgICAgICAgcGF5bG9hZE1lc3NhZ2UucmV0YWluZWQgPSB0cnVlO1xuICAgICAgICAgIHdpcmVNZXNzYWdlLnBheWxvYWRNZXNzYWdlID0gcGF5bG9hZE1lc3NhZ2U7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdChFUlJPUi5JTlZBTElEX1NUT1JFRF9EQVRBLCBba2V5LCB2YWx1ZV0pKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleS5pbmRleE9mKFwiU2VudDpcIiArIHRoaXMuX2xvY2FsS2V5KSA9PT0gMCkge1xuICAgICAgICB3aXJlTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5kdXBsaWNhdGUgPSB0cnVlO1xuICAgICAgICB0aGlzLl9zZW50TWVzc2FnZXNbd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJdID0gd2lyZU1lc3NhZ2U7XG4gICAgICB9IGVsc2UgaWYgKGtleS5pbmRleE9mKFwiUmVjZWl2ZWQ6XCIgKyB0aGlzLl9sb2NhbEtleSkgPT09IDApIHtcbiAgICAgICAgdGhpcy5fcmVjZWl2ZWRNZXNzYWdlc1t3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcl0gPSB3aXJlTWVzc2FnZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX3Byb2Nlc3NfcXVldWUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBtZXNzYWdlID0gbnVsbDtcblxuICAgICAgLy8gU2VuZCBhbGwgcXVldWVkIG1lc3NhZ2VzIGRvd24gc29ja2V0IGNvbm5lY3Rpb25cbiAgICAgIHdoaWxlICgobWVzc2FnZSA9IHRoaXMuX21zZ19xdWV1ZS5wb3AoKSkpIHtcbiAgICAgICAgdGhpcy5fc29ja2V0X3NlbmQobWVzc2FnZSk7XG4gICAgICAgIC8vIE5vdGlmeSBsaXN0ZW5lcnMgdGhhdCBtZXNzYWdlIHdhcyBzdWNjZXNzZnVsbHkgc2VudFxuICAgICAgICBpZiAodGhpcy5fbm90aWZ5X21zZ19zZW50W21lc3NhZ2VdKSB7XG4gICAgICAgICAgdGhpcy5fbm90aWZ5X21zZ19zZW50W21lc3NhZ2VdKCk7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuX25vdGlmeV9tc2dfc2VudFttZXNzYWdlXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFeHBlY3QgYW4gQUNLIHJlc3BvbnNlIGZvciB0aGlzIG1lc3NhZ2UuIEFkZCBtZXNzYWdlIHRvIHRoZSBzZXQgb2YgaW4gcHJvZ3Jlc3NcbiAgICAgKiBtZXNzYWdlcyBhbmQgc2V0IGFuIHVudXNlZCBpZGVudGlmaWVyIGluIHRoaXMgbWVzc2FnZS5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX3JlcXVpcmVzX2FjayA9IGZ1bmN0aW9uKHdpcmVNZXNzYWdlKSB7XG4gICAgICB2YXIgbWVzc2FnZUNvdW50ID0gT2JqZWN0LmtleXModGhpcy5fc2VudE1lc3NhZ2VzKS5sZW5ndGg7XG4gICAgICBpZiAobWVzc2FnZUNvdW50ID4gdGhpcy5tYXhNZXNzYWdlSWRlbnRpZmllcilcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJUb28gbWFueSBtZXNzYWdlczpcIiArIG1lc3NhZ2VDb3VudCk7XG5cbiAgICAgIHdoaWxlICh0aGlzLl9zZW50TWVzc2FnZXNbdGhpcy5fbWVzc2FnZV9pZGVudGlmaWVyXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX21lc3NhZ2VfaWRlbnRpZmllcisrO1xuICAgICAgfVxuICAgICAgd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXIgPSB0aGlzLl9tZXNzYWdlX2lkZW50aWZpZXI7XG4gICAgICB0aGlzLl9zZW50TWVzc2FnZXNbd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJdID0gd2lyZU1lc3NhZ2U7XG4gICAgICBpZiAod2lyZU1lc3NhZ2UudHlwZSA9PT0gTUVTU0FHRV9UWVBFLlBVQkxJU0gpIHtcbiAgICAgICAgdGhpcy5zdG9yZShcIlNlbnQ6XCIsIHdpcmVNZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9tZXNzYWdlX2lkZW50aWZpZXIgPT09IHRoaXMubWF4TWVzc2FnZUlkZW50aWZpZXIpIHtcbiAgICAgICAgdGhpcy5fbWVzc2FnZV9pZGVudGlmaWVyID0gMTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIHVuZGVybHlpbmcgd2Vic29ja2V0IGhhcyBiZWVuIG9wZW5lZC5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX29uX3NvY2tldF9vcGVuID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBDcmVhdGUgdGhlIENPTk5FQ1QgbWVzc2FnZSBvYmplY3QuXG4gICAgICB2YXIgd2lyZU1lc3NhZ2UgPSBuZXcgV2lyZU1lc3NhZ2UoXG4gICAgICAgIE1FU1NBR0VfVFlQRS5DT05ORUNULFxuICAgICAgICB0aGlzLmNvbm5lY3RPcHRpb25zXG4gICAgICApO1xuICAgICAgd2lyZU1lc3NhZ2UuY2xpZW50SWQgPSB0aGlzLmNsaWVudElkO1xuICAgICAgdGhpcy5fc29ja2V0X3NlbmQod2lyZU1lc3NhZ2UpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgdW5kZXJseWluZyB3ZWJzb2NrZXQgaGFzIHJlY2VpdmVkIGEgY29tcGxldGUgcGFja2V0LlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fb25fc29ja2V0X21lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgdGhpcy5fdHJhY2UoXCJDbGllbnQuX29uX3NvY2tldF9tZXNzYWdlXCIsIGV2ZW50LmRhdGEpO1xuICAgICAgdmFyIG1lc3NhZ2VzID0gdGhpcy5fZGVmcmFtZU1lc3NhZ2VzKGV2ZW50LmRhdGEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZXNzYWdlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0aGlzLl9oYW5kbGVNZXNzYWdlKG1lc3NhZ2VzW2ldKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX2RlZnJhbWVNZXNzYWdlcyA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBieXRlQXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgICAgIHZhciBtZXNzYWdlcyA9IFtdO1xuICAgICAgaWYgKHRoaXMucmVjZWl2ZUJ1ZmZlcikge1xuICAgICAgICB2YXIgbmV3RGF0YSA9IG5ldyBVaW50OEFycmF5KFxuICAgICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlci5sZW5ndGggKyBieXRlQXJyYXkubGVuZ3RoXG4gICAgICAgICk7XG4gICAgICAgIG5ld0RhdGEuc2V0KHRoaXMucmVjZWl2ZUJ1ZmZlcik7XG4gICAgICAgIG5ld0RhdGEuc2V0KGJ5dGVBcnJheSwgdGhpcy5yZWNlaXZlQnVmZmVyLmxlbmd0aCk7XG4gICAgICAgIGJ5dGVBcnJheSA9IG5ld0RhdGE7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnJlY2VpdmVCdWZmZXI7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgd2hpbGUgKG9mZnNldCA8IGJ5dGVBcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZGVjb2RlTWVzc2FnZShieXRlQXJyYXksIG9mZnNldCk7XG4gICAgICAgICAgdmFyIHdpcmVNZXNzYWdlID0gcmVzdWx0WzBdO1xuICAgICAgICAgIG9mZnNldCA9IHJlc3VsdFsxXTtcbiAgICAgICAgICBpZiAod2lyZU1lc3NhZ2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2god2lyZU1lc3NhZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCA8IGJ5dGVBcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBieXRlQXJyYXkuc3ViYXJyYXkob2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdmFyIGVycm9yU3RhY2sgPVxuICAgICAgICAgIGVycm9yLmhhc093blByb3BlcnR5KFwic3RhY2tcIikgPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgPyBlcnJvci5zdGFjay50b1N0cmluZygpXG4gICAgICAgICAgICA6IFwiTm8gRXJyb3IgU3RhY2sgQXZhaWxhYmxlXCI7XG4gICAgICAgIHRoaXMuX2Rpc2Nvbm5lY3RlZChcbiAgICAgICAgICBFUlJPUi5JTlRFUk5BTF9FUlJPUi5jb2RlLFxuICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlRFUk5BTF9FUlJPUiwgW2Vycm9yLm1lc3NhZ2UsIGVycm9yU3RhY2tdKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVzc2FnZXM7XG4gICAgfTtcblxuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9oYW5kbGVNZXNzYWdlID0gZnVuY3Rpb24od2lyZU1lc3NhZ2UpIHtcbiAgICAgIHRoaXMuX3RyYWNlKFwiQ2xpZW50Ll9oYW5kbGVNZXNzYWdlXCIsIHdpcmVNZXNzYWdlKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgc3dpdGNoICh3aXJlTWVzc2FnZS50eXBlKSB7XG4gICAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuQ09OTkFDSzpcbiAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3RUaW1lb3V0LmNhbmNlbCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3JlY29ubmVjdFRpbWVvdXQpIHRoaXMuX3JlY29ubmVjdFRpbWVvdXQuY2FuY2VsKCk7XG5cbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgc3RhcnRlZCB1c2luZyBjbGVhbiBzZXNzaW9uIHRoZW4gY2xlYXIgdXAgdGhlIGxvY2FsIHN0YXRlLlxuICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdE9wdGlvbnMuY2xlYW5TZXNzaW9uKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl9zZW50TWVzc2FnZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VudE1lc3NhZ2UgPSB0aGlzLl9zZW50TWVzc2FnZXNba2V5XTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcbiAgICAgICAgICAgICAgICAgIFwiU2VudDpcIiArIHRoaXMuX2xvY2FsS2V5ICsgc2VudE1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMuX3NlbnRNZXNzYWdlcyA9IHt9O1xuXG4gICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl9yZWNlaXZlZE1lc3NhZ2VzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlY2VpdmVkTWVzc2FnZSA9IHRoaXMuX3JlY2VpdmVkTWVzc2FnZXNba2V5XTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcbiAgICAgICAgICAgICAgICAgIFwiUmVjZWl2ZWQ6XCIgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbEtleSArXG4gICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5fcmVjZWl2ZWRNZXNzYWdlcyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2xpZW50IGNvbm5lY3RlZCBhbmQgcmVhZHkgZm9yIGJ1c2luZXNzLlxuICAgICAgICAgICAgaWYgKHdpcmVNZXNzYWdlLnJldHVybkNvZGUgPT09IDApIHtcbiAgICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAvLyBKdW1wIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3Qgb2YgdXJpcyBhbmQgc3RvcCBsb29raW5nIGZvciBhIGdvb2QgaG9zdC5cblxuICAgICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0T3B0aW9ucy51cmlzKVxuICAgICAgICAgICAgICAgIHRoaXMuaG9zdEluZGV4ID0gdGhpcy5jb25uZWN0T3B0aW9ucy51cmlzLmxlbmd0aDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuX2Rpc2Nvbm5lY3RlZChcbiAgICAgICAgICAgICAgICBFUlJPUi5DT05OQUNLX1JFVFVSTkNPREUuY29kZSxcbiAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuQ09OTkFDS19SRVRVUk5DT0RFLCBbXG4gICAgICAgICAgICAgICAgICB3aXJlTWVzc2FnZS5yZXR1cm5Db2RlLFxuICAgICAgICAgICAgICAgICAgQ09OTkFDS19SQ1t3aXJlTWVzc2FnZS5yZXR1cm5Db2RlXVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXNlbmQgbWVzc2FnZXMuXG4gICAgICAgICAgICB2YXIgc2VxdWVuY2VkTWVzc2FnZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIG1zZ0lkIGluIHRoaXMuX3NlbnRNZXNzYWdlcykge1xuICAgICAgICAgICAgICBpZiAodGhpcy5fc2VudE1lc3NhZ2VzLmhhc093blByb3BlcnR5KG1zZ0lkKSlcbiAgICAgICAgICAgICAgICBzZXF1ZW5jZWRNZXNzYWdlcy5wdXNoKHRoaXMuX3NlbnRNZXNzYWdlc1ttc2dJZF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBbHNvIHNjaGVkdWxlIHFvcyAwIGJ1ZmZlcmVkIG1lc3NhZ2VzIGlmIGFueVxuICAgICAgICAgICAgaWYgKHRoaXMuX2J1ZmZlcmVkX21zZ19xdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHZhciBtc2cgPSBudWxsO1xuICAgICAgICAgICAgICB3aGlsZSAoKG1zZyA9IHRoaXMuX2J1ZmZlcmVkX21zZ19xdWV1ZS5wb3AoKSkpIHtcbiAgICAgICAgICAgICAgICBzZXF1ZW5jZWRNZXNzYWdlcy5wdXNoKG1zZyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25NZXNzYWdlRGVsaXZlcmVkKVxuICAgICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5X21zZ19zZW50W21zZ10gPSB0aGlzLm9uTWVzc2FnZURlbGl2ZXJlZChcbiAgICAgICAgICAgICAgICAgICAgbXNnLnBheWxvYWRNZXNzYWdlXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNvcnQgc2VudE1lc3NhZ2VzIGludG8gdGhlIG9yaWdpbmFsIHNlbnQgb3JkZXIuXG4gICAgICAgICAgICB2YXIgc2VxdWVuY2VkTWVzc2FnZXMgPSBzZXF1ZW5jZWRNZXNzYWdlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGEuc2VxdWVuY2UgLSBiLnNlcXVlbmNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc2VxdWVuY2VkTWVzc2FnZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgdmFyIHNlbnRNZXNzYWdlID0gc2VxdWVuY2VkTWVzc2FnZXNbaV07XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBzZW50TWVzc2FnZS50eXBlID09IE1FU1NBR0VfVFlQRS5QVUJMSVNIICYmXG4gICAgICAgICAgICAgICAgc2VudE1lc3NhZ2UucHViUmVjUmVjZWl2ZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHB1YlJlbE1lc3NhZ2UgPSBuZXcgV2lyZU1lc3NhZ2UoTUVTU0FHRV9UWVBFLlBVQlJFTCwge1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkZW50aWZpZXI6IHNlbnRNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVfbWVzc2FnZShwdWJSZWxNZXNzYWdlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zY2hlZHVsZV9tZXNzYWdlKHNlbnRNZXNzYWdlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFeGVjdXRlIHRoZSBjb25uZWN0T3B0aW9ucy5vblN1Y2Nlc3MgY2FsbGJhY2sgaWYgdGhlcmUgaXMgb25lLlxuICAgICAgICAgICAgLy8gV2lsbCBhbHNvIG5vdyByZXR1cm4gaWYgdGhpcyBjb25uZWN0aW9uIHdhcyB0aGUgcmVzdWx0IG9mIGFuIGF1dG9tYXRpY1xuICAgICAgICAgICAgLy8gcmVjb25uZWN0IGFuZCB3aGljaCBVUkkgd2FzIHN1Y2Nlc3NmdWxseSBjb25uZWN0ZWQgdG8uXG4gICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0T3B0aW9ucy5vblN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgdGhpcy5jb25uZWN0T3B0aW9ucy5vblN1Y2Nlc3Moe1xuICAgICAgICAgICAgICAgIGludm9jYXRpb25Db250ZXh0OiB0aGlzLmNvbm5lY3RPcHRpb25zLmludm9jYXRpb25Db250ZXh0XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcmVjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZWNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgICAgcmVjb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3RJbnRlcnZhbCA9IDE7XG4gICAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFeGVjdXRlIHRoZSBvbkNvbm5lY3RlZCBjYWxsYmFjayBpZiB0aGVyZSBpcyBvbmUuXG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWQocmVjb25uZWN0ZWQsIHRoaXMuX3dzdXJpKTtcblxuICAgICAgICAgICAgLy8gUHJvY2VzcyBhbGwgcXVldWVkIG1lc3NhZ2VzIG5vdyB0aGF0IHRoZSBjb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkLlxuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc19xdWV1ZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5QVUJMSVNIOlxuICAgICAgICAgICAgdGhpcy5fcmVjZWl2ZVB1Ymxpc2god2lyZU1lc3NhZ2UpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5QVUJBQ0s6XG4gICAgICAgICAgICB2YXIgc2VudE1lc3NhZ2UgPSB0aGlzLl9zZW50TWVzc2FnZXNbd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJdO1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHJlIGZsb3cgb2YgYSBQVUJBQ0sgYWZ0ZXIgd2UgaGF2ZSByZXN0YXJ0ZWQgcmVjZWl2ZWRNZXNzYWdlIHdpbGwgbm90IGV4aXN0LlxuICAgICAgICAgICAgaWYgKHNlbnRNZXNzYWdlKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zZW50TWVzc2FnZXNbd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJdO1xuICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcbiAgICAgICAgICAgICAgICBcIlNlbnQ6XCIgKyB0aGlzLl9sb2NhbEtleSArIHdpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmICh0aGlzLm9uTWVzc2FnZURlbGl2ZXJlZClcbiAgICAgICAgICAgICAgICB0aGlzLm9uTWVzc2FnZURlbGl2ZXJlZChzZW50TWVzc2FnZS5wYXlsb2FkTWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBVQlJFQzpcbiAgICAgICAgICAgIHZhciBzZW50TWVzc2FnZSA9IHRoaXMuX3NlbnRNZXNzYWdlc1t3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcl07XG4gICAgICAgICAgICAvLyBJZiB0aGlzIGlzIGEgcmUgZmxvdyBvZiBhIFBVQlJFQyBhZnRlciB3ZSBoYXZlIHJlc3RhcnRlZCByZWNlaXZlZE1lc3NhZ2Ugd2lsbCBub3QgZXhpc3QuXG4gICAgICAgICAgICBpZiAoc2VudE1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgc2VudE1lc3NhZ2UucHViUmVjUmVjZWl2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB2YXIgcHViUmVsTWVzc2FnZSA9IG5ldyBXaXJlTWVzc2FnZShNRVNTQUdFX1RZUEUuUFVCUkVMLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZUlkZW50aWZpZXI6IHdpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB0aGlzLnN0b3JlKFwiU2VudDpcIiwgc2VudE1lc3NhZ2UpO1xuICAgICAgICAgICAgICB0aGlzLl9zY2hlZHVsZV9tZXNzYWdlKHB1YlJlbE1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5QVUJSRUw6XG4gICAgICAgICAgICB2YXIgcmVjZWl2ZWRNZXNzYWdlID0gdGhpcy5fcmVjZWl2ZWRNZXNzYWdlc1tcbiAgICAgICAgICAgICAgd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcbiAgICAgICAgICAgICAgXCJSZWNlaXZlZDpcIiArIHRoaXMuX2xvY2FsS2V5ICsgd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICAvLyBJZiB0aGlzIGlzIGEgcmUgZmxvdyBvZiBhIFBVQlJFTCBhZnRlciB3ZSBoYXZlIHJlc3RhcnRlZCByZWNlaXZlZE1lc3NhZ2Ugd2lsbCBub3QgZXhpc3QuXG4gICAgICAgICAgICBpZiAocmVjZWl2ZWRNZXNzYWdlKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3JlY2VpdmVNZXNzYWdlKHJlY2VpdmVkTWVzc2FnZSk7XG4gICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9yZWNlaXZlZE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFsd2F5cyBmbG93IFB1YkNvbXAsIHdlIG1heSBoYXZlIHByZXZpb3VzbHkgZmxvd2VkIFB1YkNvbXAgYnV0IHRoZSBzZXJ2ZXIgbG9zdCBpdCBhbmQgcmVzdGFydGVkLlxuICAgICAgICAgICAgdmFyIHB1YkNvbXBNZXNzYWdlID0gbmV3IFdpcmVNZXNzYWdlKE1FU1NBR0VfVFlQRS5QVUJDT01QLCB7XG4gICAgICAgICAgICAgIG1lc3NhZ2VJZGVudGlmaWVyOiB3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9zY2hlZHVsZV9tZXNzYWdlKHB1YkNvbXBNZXNzYWdlKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5QVUJDT01QOlxuICAgICAgICAgICAgdmFyIHNlbnRNZXNzYWdlID0gdGhpcy5fc2VudE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zZW50TWVzc2FnZXNbd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJdO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXG4gICAgICAgICAgICAgIFwiU2VudDpcIiArIHRoaXMuX2xvY2FsS2V5ICsgd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAodGhpcy5vbk1lc3NhZ2VEZWxpdmVyZWQpXG4gICAgICAgICAgICAgIHRoaXMub25NZXNzYWdlRGVsaXZlcmVkKHNlbnRNZXNzYWdlLnBheWxvYWRNZXNzYWdlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuU1VCQUNLOlxuICAgICAgICAgICAgdmFyIHNlbnRNZXNzYWdlID0gdGhpcy5fc2VudE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXTtcbiAgICAgICAgICAgIGlmIChzZW50TWVzc2FnZSkge1xuICAgICAgICAgICAgICBpZiAoc2VudE1lc3NhZ2UudGltZU91dCkgc2VudE1lc3NhZ2UudGltZU91dC5jYW5jZWwoKTtcbiAgICAgICAgICAgICAgLy8gVGhpcyB3aWxsIG5lZWQgdG8gYmUgZml4ZWQgd2hlbiB3ZSBhZGQgbXVsdGlwbGUgdG9waWMgc3VwcG9ydFxuICAgICAgICAgICAgICBpZiAod2lyZU1lc3NhZ2UucmV0dXJuQ29kZVswXSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgICAgIGlmIChzZW50TWVzc2FnZS5vbkZhaWx1cmUpIHtcbiAgICAgICAgICAgICAgICAgIHNlbnRNZXNzYWdlLm9uRmFpbHVyZSh3aXJlTWVzc2FnZS5yZXR1cm5Db2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VudE1lc3NhZ2Uub25TdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgc2VudE1lc3NhZ2Uub25TdWNjZXNzKHdpcmVNZXNzYWdlLnJldHVybkNvZGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zZW50TWVzc2FnZXNbd2lyZU1lc3NhZ2UubWVzc2FnZUlkZW50aWZpZXJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIE1FU1NBR0VfVFlQRS5VTlNVQkFDSzpcbiAgICAgICAgICAgIHZhciBzZW50TWVzc2FnZSA9IHRoaXMuX3NlbnRNZXNzYWdlc1t3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcl07XG4gICAgICAgICAgICBpZiAoc2VudE1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgaWYgKHNlbnRNZXNzYWdlLnRpbWVPdXQpIHNlbnRNZXNzYWdlLnRpbWVPdXQuY2FuY2VsKCk7XG4gICAgICAgICAgICAgIGlmIChzZW50TWVzc2FnZS5jYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHNlbnRNZXNzYWdlLmNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3NlbnRNZXNzYWdlc1t3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllcl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuUElOR1JFU1A6XG4gICAgICAgICAgICAvKiBUaGUgc2VuZFBpbmdlciBvciByZWNlaXZlUGluZ2VyIG1heSBoYXZlIHNlbnQgYSBwaW5nLCB0aGUgcmVjZWl2ZVBpbmdlciBoYXMgYWxyZWFkeSBiZWVuIHJlc2V0LiAqL1xuICAgICAgICAgICAgdGhpcy5zZW5kUGluZ2VyLnJlc2V0KCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLkRJU0NPTk5FQ1Q6XG4gICAgICAgICAgICAvLyBDbGllbnRzIGRvIG5vdCBleHBlY3QgdG8gcmVjZWl2ZSBkaXNjb25uZWN0IHBhY2tldHMuXG4gICAgICAgICAgICB0aGlzLl9kaXNjb25uZWN0ZWQoXG4gICAgICAgICAgICAgIEVSUk9SLklOVkFMSURfTVFUVF9NRVNTQUdFX1RZUEUuY29kZSxcbiAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfTVFUVF9NRVNTQUdFX1RZUEUsIFt3aXJlTWVzc2FnZS50eXBlXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aGlzLl9kaXNjb25uZWN0ZWQoXG4gICAgICAgICAgICAgIEVSUk9SLklOVkFMSURfTVFUVF9NRVNTQUdFX1RZUEUuY29kZSxcbiAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfTVFUVF9NRVNTQUdFX1RZUEUsIFt3aXJlTWVzc2FnZS50eXBlXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHZhciBlcnJvclN0YWNrID1cbiAgICAgICAgICBlcnJvci5oYXNPd25Qcm9wZXJ0eShcInN0YWNrXCIpID09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgICAgID8gZXJyb3Iuc3RhY2sudG9TdHJpbmcoKVxuICAgICAgICAgICAgOiBcIk5vIEVycm9yIFN0YWNrIEF2YWlsYWJsZVwiO1xuICAgICAgICB0aGlzLl9kaXNjb25uZWN0ZWQoXG4gICAgICAgICAgRVJST1IuSU5URVJOQUxfRVJST1IuY29kZSxcbiAgICAgICAgICBmb3JtYXQoRVJST1IuSU5URVJOQUxfRVJST1IsIFtlcnJvci5tZXNzYWdlLCBlcnJvclN0YWNrXSlcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9vbl9zb2NrZXRfZXJyb3IgPSBmdW5jdGlvbihlcnJvcikge1xuICAgICAgaWYgKCF0aGlzLl9yZWNvbm5lY3RpbmcpIHtcbiAgICAgICAgdGhpcy5fZGlzY29ubmVjdGVkKFxuICAgICAgICAgIEVSUk9SLlNPQ0tFVF9FUlJPUi5jb2RlLFxuICAgICAgICAgIGZvcm1hdChFUlJPUi5TT0NLRVRfRVJST1IsIFtlcnJvci5kYXRhXSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fb25fc29ja2V0X2Nsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuX3JlY29ubmVjdGluZykge1xuICAgICAgICB0aGlzLl9kaXNjb25uZWN0ZWQoRVJST1IuU09DS0VUX0NMT1NFLmNvZGUsIGZvcm1hdChFUlJPUi5TT0NLRVRfQ0xPU0UpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fc29ja2V0X3NlbmQgPSBmdW5jdGlvbih3aXJlTWVzc2FnZSkge1xuICAgICAgaWYgKHdpcmVNZXNzYWdlLnR5cGUgPT0gMSkge1xuICAgICAgICB2YXIgd2lyZU1lc3NhZ2VNYXNrZWQgPSB0aGlzLl90cmFjZU1hc2sod2lyZU1lc3NhZ2UsIFwicGFzc3dvcmRcIik7XG4gICAgICAgIHRoaXMuX3RyYWNlKFwiQ2xpZW50Ll9zb2NrZXRfc2VuZFwiLCB3aXJlTWVzc2FnZU1hc2tlZCk7XG4gICAgICB9IGVsc2UgdGhpcy5fdHJhY2UoXCJDbGllbnQuX3NvY2tldF9zZW5kXCIsIHdpcmVNZXNzYWdlKTtcblxuICAgICAgdGhpcy5zb2NrZXQuc2VuZCh3aXJlTWVzc2FnZS5lbmNvZGUoKSk7XG4gICAgICAvKiBXZSBoYXZlIHByb3ZlZCB0byB0aGUgc2VydmVyIHdlIGFyZSBhbGl2ZS4gKi9cbiAgICAgIHRoaXMuc2VuZFBpbmdlci5yZXNldCgpO1xuICAgIH07XG5cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9yZWNlaXZlUHVibGlzaCA9IGZ1bmN0aW9uKHdpcmVNZXNzYWdlKSB7XG4gICAgICBzd2l0Y2ggKHdpcmVNZXNzYWdlLnBheWxvYWRNZXNzYWdlLnFvcykge1xuICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICB0aGlzLl9yZWNlaXZlTWVzc2FnZSh3aXJlTWVzc2FnZSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHZhciBwdWJBY2tNZXNzYWdlID0gbmV3IFdpcmVNZXNzYWdlKE1FU1NBR0VfVFlQRS5QVUJBQ0ssIHtcbiAgICAgICAgICAgIG1lc3NhZ2VJZGVudGlmaWVyOiB3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllclxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuX3NjaGVkdWxlX21lc3NhZ2UocHViQWNrTWVzc2FnZSk7XG4gICAgICAgICAgdGhpcy5fcmVjZWl2ZU1lc3NhZ2Uod2lyZU1lc3NhZ2UpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICB0aGlzLl9yZWNlaXZlZE1lc3NhZ2VzW3dpcmVNZXNzYWdlLm1lc3NhZ2VJZGVudGlmaWVyXSA9IHdpcmVNZXNzYWdlO1xuICAgICAgICAgIHRoaXMuc3RvcmUoXCJSZWNlaXZlZDpcIiwgd2lyZU1lc3NhZ2UpO1xuICAgICAgICAgIHZhciBwdWJSZWNNZXNzYWdlID0gbmV3IFdpcmVNZXNzYWdlKE1FU1NBR0VfVFlQRS5QVUJSRUMsIHtcbiAgICAgICAgICAgIG1lc3NhZ2VJZGVudGlmaWVyOiB3aXJlTWVzc2FnZS5tZXNzYWdlSWRlbnRpZmllclxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuX3NjaGVkdWxlX21lc3NhZ2UocHViUmVjTWVzc2FnZSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IEVycm9yKFwiSW52YWlsZCBxb3M9XCIgKyB3aXJlTWVzc2FnZS5wYXlsb2FkTWVzc2FnZS5xb3MpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9yZWNlaXZlTWVzc2FnZSA9IGZ1bmN0aW9uKHdpcmVNZXNzYWdlKSB7XG4gICAgICBpZiAodGhpcy5vbk1lc3NhZ2VBcnJpdmVkKSB7XG4gICAgICAgIHRoaXMub25NZXNzYWdlQXJyaXZlZCh3aXJlTWVzc2FnZS5wYXlsb2FkTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsaWVudCBoYXMgY29ubmVjdGVkLlxuICAgICAqIEBwYXJhbSB7cmVjb25uZWN0fSBbYm9vbGVhbl0gaW5kaWNhdGUgaWYgdGhpcyB3YXMgYSByZXN1bHQgb2YgcmVjb25uZWN0IG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge3VyaX0gW3N0cmluZ10gZnVsbHkgcXVhbGlmaWVkIFdlYlNvY2tldCBVUkkgb2YgdGhlIHNlcnZlci5cbiAgICAgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fY29ubmVjdGVkID0gZnVuY3Rpb24ocmVjb25uZWN0LCB1cmkpIHtcbiAgICAgIC8vIEV4ZWN1dGUgdGhlIG9uQ29ubmVjdGVkIGNhbGxiYWNrIGlmIHRoZXJlIGlzIG9uZS5cbiAgICAgIGlmICh0aGlzLm9uQ29ubmVjdGVkKSB0aGlzLm9uQ29ubmVjdGVkKHJlY29ubmVjdCwgdXJpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgdG8gcmVjb25uZWN0IHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlci5cbiAgICAgKiBGb3IgZWFjaCByZWNvbm5lY3QgYXR0ZW1wdCwgd2lsbCBkb3VibGUgdGhlIHJlY29ubmVjdCBpbnRlcnZhbFxuICAgICAqIHVwIHRvIDEyOCBzZWNvbmRzLlxuICAgICAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl9yZWNvbm5lY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3RyYWNlKFwiQ2xpZW50Ll9yZWNvbm5lY3RcIik7XG4gICAgICBpZiAoIXRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuc2VuZFBpbmdlci5jYW5jZWwoKTtcbiAgICAgICAgdGhpcy5yZWNlaXZlUGluZ2VyLmNhbmNlbCgpO1xuICAgICAgICBpZiAodGhpcy5fcmVjb25uZWN0SW50ZXJ2YWwgPCAxMjgpXG4gICAgICAgICAgdGhpcy5fcmVjb25uZWN0SW50ZXJ2YWwgPSB0aGlzLl9yZWNvbm5lY3RJbnRlcnZhbCAqIDI7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RPcHRpb25zLnVyaXMpIHtcbiAgICAgICAgICB0aGlzLmhvc3RJbmRleCA9IDA7XG4gICAgICAgICAgdGhpcy5fZG9Db25uZWN0KHRoaXMuY29ubmVjdE9wdGlvbnMudXJpc1swXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fZG9Db25uZWN0KHRoaXMudXJpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCBlaXRoZXIgYXQgaXRzIG93biByZXF1ZXN0IG9yIGJlY2F1c2UgdGhlIHNlcnZlclxuICAgICAqIG9yIG5ldHdvcmsgZGlzY29ubmVjdGVkIGl0LiBSZW1vdmUgYWxsIG5vbi1kdXJhYmxlIHN0YXRlLlxuICAgICAqIEBwYXJhbSB7ZXJyb3JDb2RlfSBbbnVtYmVyXSB0aGUgZXJyb3IgbnVtYmVyLlxuICAgICAqIEBwYXJhbSB7ZXJyb3JUZXh0fSBbc3RyaW5nXSB0aGUgZXJyb3IgdGV4dC5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgQ2xpZW50SW1wbC5wcm90b3R5cGUuX2Rpc2Nvbm5lY3RlZCA9IGZ1bmN0aW9uKGVycm9yQ29kZSwgZXJyb3JUZXh0KSB7XG4gICAgICB0aGlzLl90cmFjZShcIkNsaWVudC5fZGlzY29ubmVjdGVkXCIsIGVycm9yQ29kZSwgZXJyb3JUZXh0KTtcblxuICAgICAgaWYgKGVycm9yQ29kZSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuX3JlY29ubmVjdGluZykge1xuICAgICAgICAvL0NvbnRpbnVlIGF1dG9tYXRpYyByZWNvbm5lY3QgcHJvY2Vzc1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3RUaW1lb3V0ID0gbmV3IFRpbWVvdXQoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICB0aGlzLl9yZWNvbm5lY3RJbnRlcnZhbCxcbiAgICAgICAgICB0aGlzLl9yZWNvbm5lY3RcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNlbmRQaW5nZXIuY2FuY2VsKCk7XG4gICAgICB0aGlzLnJlY2VpdmVQaW5nZXIuY2FuY2VsKCk7XG4gICAgICBpZiAodGhpcy5fY29ubmVjdFRpbWVvdXQpIHtcbiAgICAgICAgdGhpcy5fY29ubmVjdFRpbWVvdXQuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RUaW1lb3V0ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xlYXIgbWVzc2FnZSBidWZmZXJzLlxuICAgICAgdGhpcy5fbXNnX3F1ZXVlID0gW107XG4gICAgICB0aGlzLl9idWZmZXJlZF9tc2dfcXVldWUgPSBbXTtcbiAgICAgIHRoaXMuX25vdGlmeV9tc2dfc2VudCA9IHt9O1xuXG4gICAgICBpZiAodGhpcy5zb2NrZXQpIHtcbiAgICAgICAgLy8gQ2FuY2VsIGFsbCBzb2NrZXQgY2FsbGJhY2tzIHNvIHRoYXQgdGhleSBjYW5ub3QgYmUgZHJpdmVuIGFnYWluIGJ5IHRoaXMgc29ja2V0LlxuICAgICAgICB0aGlzLnNvY2tldC5vbm9wZW4gPSBudWxsO1xuICAgICAgICB0aGlzLnNvY2tldC5vbm1lc3NhZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLnNvY2tldC5vbmVycm9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5zb2NrZXQub25jbG9zZSA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLnNvY2tldC5yZWFkeVN0YXRlID09PSAxKSB0aGlzLnNvY2tldC5jbG9zZSgpO1xuICAgICAgICBkZWxldGUgdGhpcy5zb2NrZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5jb25uZWN0T3B0aW9ucy51cmlzICYmXG4gICAgICAgIHRoaXMuaG9zdEluZGV4IDwgdGhpcy5jb25uZWN0T3B0aW9ucy51cmlzLmxlbmd0aCAtIDFcbiAgICAgICkge1xuICAgICAgICAvLyBUcnkgdGhlIG5leHQgaG9zdC5cbiAgICAgICAgdGhpcy5ob3N0SW5kZXgrKztcbiAgICAgICAgdGhpcy5fZG9Db25uZWN0KHRoaXMuY29ubmVjdE9wdGlvbnMudXJpc1t0aGlzLmhvc3RJbmRleF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGVycm9yQ29kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZXJyb3JDb2RlID0gRVJST1IuT0suY29kZTtcbiAgICAgICAgICBlcnJvclRleHQgPSBmb3JtYXQoRVJST1IuT0spO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUnVuIGFueSBhcHBsaWNhdGlvbiBjYWxsYmFja3MgbGFzdCBhcyB0aGV5IG1heSBhdHRlbXB0IHRvIHJlY29ubmVjdCBhbmQgaGVuY2UgY3JlYXRlIGEgbmV3IHNvY2tldC5cbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAvLyBFeGVjdXRlIHRoZSBjb25uZWN0aW9uTG9zdENhbGxiYWNrIGlmIHRoZXJlIGlzIG9uZSwgYW5kIHdlIHdlcmUgY29ubmVjdGVkLlxuICAgICAgICAgIGlmICh0aGlzLm9uQ29ubmVjdGlvbkxvc3QpIHtcbiAgICAgICAgICAgIHRoaXMub25Db25uZWN0aW9uTG9zdCh7XG4gICAgICAgICAgICAgIGVycm9yQ29kZTogZXJyb3JDb2RlLFxuICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yVGV4dCxcbiAgICAgICAgICAgICAgcmVjb25uZWN0OiB0aGlzLmNvbm5lY3RPcHRpb25zLnJlY29ubmVjdCxcbiAgICAgICAgICAgICAgdXJpOiB0aGlzLl93c3VyaVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlcnJvckNvZGUgIT09IEVSUk9SLk9LLmNvZGUgJiYgdGhpcy5jb25uZWN0T3B0aW9ucy5yZWNvbm5lY3QpIHtcbiAgICAgICAgICAgIC8vIFN0YXJ0IGF1dG9tYXRpYyByZWNvbm5lY3QgcHJvY2VzcyBmb3IgdGhlIHZlcnkgZmlyc3QgdGltZSBzaW5jZSBsYXN0IHN1Y2Nlc3NmdWwgY29ubmVjdC5cbiAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdEludGVydmFsID0gMTtcbiAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2Ugd2UgbmV2ZXIgaGFkIGEgY29ubmVjdGlvbiwgc28gaW5kaWNhdGUgdGhhdCB0aGUgY29ubmVjdCBoYXMgZmFpbGVkLlxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdE9wdGlvbnMubXF0dFZlcnNpb24gPT09IDQgJiZcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdE9wdGlvbnMubXF0dFZlcnNpb25FeHBsaWNpdCA9PT0gZmFsc2VcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYWNlKFwiRmFpbGVkIHRvIGNvbm5lY3QgVjQsIGRyb3BwaW5nIGJhY2sgdG8gVjNcIik7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uID0gMztcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3RPcHRpb25zLnVyaXMpIHtcbiAgICAgICAgICAgICAgdGhpcy5ob3N0SW5kZXggPSAwO1xuICAgICAgICAgICAgICB0aGlzLl9kb0Nvbm5lY3QodGhpcy5jb25uZWN0T3B0aW9ucy51cmlzWzBdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuX2RvQ29ubmVjdCh0aGlzLnVyaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbm5lY3RPcHRpb25zLm9uRmFpbHVyZSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0T3B0aW9ucy5vbkZhaWx1cmUoe1xuICAgICAgICAgICAgICBpbnZvY2F0aW9uQ29udGV4dDogdGhpcy5jb25uZWN0T3B0aW9ucy5pbnZvY2F0aW9uQ29udGV4dCxcbiAgICAgICAgICAgICAgZXJyb3JDb2RlOiBlcnJvckNvZGUsXG4gICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZXJyb3JUZXh0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBDbGllbnRJbXBsLnByb3RvdHlwZS5fdHJhY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFBhc3MgdHJhY2UgbWVzc2FnZSBiYWNrIHRvIGNsaWVudCdzIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICBpZiAodGhpcy50cmFjZUZ1bmN0aW9uKSB7XG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBhcmdzKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmdzW2ldICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgYXJncy5zcGxpY2UoaSwgMSwgSlNPTi5zdHJpbmdpZnkoYXJnc1tpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZWNvcmQgPSBhcmdzLmpvaW4oXCJcIik7XG4gICAgICAgIHRoaXMudHJhY2VGdW5jdGlvbih7IHNldmVyaXR5OiBcIkRlYnVnXCIsIG1lc3NhZ2U6IHJlY29yZCB9KTtcbiAgICAgIH1cblxuICAgICAgLy9idWZmZXIgc3R5bGUgdHJhY2VcbiAgICAgIGlmICh0aGlzLl90cmFjZUJ1ZmZlciAhPT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbWF4ID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX3RyYWNlQnVmZmVyLmxlbmd0aCA9PSB0aGlzLl9NQVhfVFJBQ0VfRU5UUklFUykge1xuICAgICAgICAgICAgdGhpcy5fdHJhY2VCdWZmZXIuc2hpZnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGkgPT09IDApIHRoaXMuX3RyYWNlQnVmZmVyLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnRzW2ldID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgdGhpcy5fdHJhY2VCdWZmZXIucHVzaChhcmd1bWVudHNbaV0pO1xuICAgICAgICAgIGVsc2UgdGhpcy5fdHJhY2VCdWZmZXIucHVzaChcIiAgXCIgKyBKU09OLnN0cmluZ2lmeShhcmd1bWVudHNbaV0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIENsaWVudEltcGwucHJvdG90eXBlLl90cmFjZU1hc2sgPSBmdW5jdGlvbih0cmFjZU9iamVjdCwgbWFza2VkKSB7XG4gICAgICB2YXIgdHJhY2VPYmplY3RNYXNrZWQgPSB7fTtcbiAgICAgIGZvciAodmFyIGF0dHIgaW4gdHJhY2VPYmplY3QpIHtcbiAgICAgICAgaWYgKHRyYWNlT2JqZWN0Lmhhc093blByb3BlcnR5KGF0dHIpKSB7XG4gICAgICAgICAgaWYgKGF0dHIgPT0gbWFza2VkKSB0cmFjZU9iamVjdE1hc2tlZFthdHRyXSA9IFwiKioqKioqXCI7XG4gICAgICAgICAgZWxzZSB0cmFjZU9iamVjdE1hc2tlZFthdHRyXSA9IHRyYWNlT2JqZWN0W2F0dHJdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJhY2VPYmplY3RNYXNrZWQ7XG4gICAgfTtcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFB1YmxpYyBQcm9ncmFtbWluZyBpbnRlcmZhY2UuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvKipcbiAgICAgKiBUaGUgSmF2YVNjcmlwdCBhcHBsaWNhdGlvbiBjb21tdW5pY2F0ZXMgdG8gdGhlIHNlcnZlciB1c2luZyBhIHtAbGluayBQYWhvLkNsaWVudH0gb2JqZWN0LlxuICAgICAqIDxwPlxuICAgICAqIE1vc3QgYXBwbGljYXRpb25zIHdpbGwgY3JlYXRlIGp1c3Qgb25lIENsaWVudCBvYmplY3QgYW5kIHRoZW4gY2FsbCBpdHMgY29ubmVjdCgpIG1ldGhvZCxcbiAgICAgKiBob3dldmVyIGFwcGxpY2F0aW9ucyBjYW4gY3JlYXRlIG1vcmUgdGhhbiBvbmUgQ2xpZW50IG9iamVjdCBpZiB0aGV5IHdpc2guXG4gICAgICogSW4gdGhpcyBjYXNlIHRoZSBjb21iaW5hdGlvbiBvZiBob3N0LCBwb3J0IGFuZCBjbGllbnRJZCBhdHRyaWJ1dGVzIG11c3QgYmUgZGlmZmVyZW50IGZvciBlYWNoIENsaWVudCBvYmplY3QuXG4gICAgICogPHA+XG4gICAgICogVGhlIHNlbmQsIHN1YnNjcmliZSBhbmQgdW5zdWJzY3JpYmUgbWV0aG9kcyBhcmUgaW1wbGVtZW50ZWQgYXMgYXN5bmNocm9ub3VzIEphdmFTY3JpcHQgbWV0aG9kc1xuICAgICAqIChldmVuIHRob3VnaCB0aGUgdW5kZXJseWluZyBwcm90b2NvbCBleGNoYW5nZSBtaWdodCBiZSBzeW5jaHJvbm91cyBpbiBuYXR1cmUpLlxuICAgICAqIFRoaXMgbWVhbnMgdGhleSBzaWduYWwgdGhlaXIgY29tcGxldGlvbiBieSBjYWxsaW5nIGJhY2sgdG8gdGhlIGFwcGxpY2F0aW9uLFxuICAgICAqIHZpYSBTdWNjZXNzIG9yIEZhaWx1cmUgY2FsbGJhY2sgZnVuY3Rpb25zIHByb3ZpZGVkIGJ5IHRoZSBhcHBsaWNhdGlvbiBvbiB0aGUgbWV0aG9kIGluIHF1ZXN0aW9uLlxuICAgICAqIFN1Y2ggY2FsbGJhY2tzIGFyZSBjYWxsZWQgYXQgbW9zdCBvbmNlIHBlciBtZXRob2QgaW52b2NhdGlvbiBhbmQgZG8gbm90IHBlcnNpc3QgYmV5b25kIHRoZSBsaWZldGltZVxuICAgICAqIG9mIHRoZSBzY3JpcHQgdGhhdCBtYWRlIHRoZSBpbnZvY2F0aW9uLlxuICAgICAqIDxwPlxuICAgICAqIEluIGNvbnRyYXN0IHRoZXJlIGFyZSBzb21lIGNhbGxiYWNrIGZ1bmN0aW9ucywgbW9zdCBub3RhYmx5IDxpPm9uTWVzc2FnZUFycml2ZWQ8L2k+LFxuICAgICAqIHRoYXQgYXJlIGRlZmluZWQgb24gdGhlIHtAbGluayBQYWhvLkNsaWVudH0gb2JqZWN0LlxuICAgICAqIFRoZXNlIG1heSBnZXQgY2FsbGVkIG11bHRpcGxlIHRpbWVzLCBhbmQgYXJlbid0IGRpcmVjdGx5IHJlbGF0ZWQgdG8gc3BlY2lmaWMgbWV0aG9kIGludm9jYXRpb25zIG1hZGUgYnkgdGhlIGNsaWVudC5cbiAgICAgKlxuICAgICAqIEBuYW1lIFBhaG8uQ2xpZW50XG4gICAgICpcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBob3N0IC0gdGhlIGFkZHJlc3Mgb2YgdGhlIG1lc3NhZ2luZyBzZXJ2ZXIsIGFzIGEgZnVsbHkgcXVhbGlmaWVkIFdlYlNvY2tldCBVUkksIGFzIGEgRE5TIG5hbWUgb3IgZG90dGVkIGRlY2ltYWwgSVAgYWRkcmVzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcG9ydCAtIHRoZSBwb3J0IG51bWJlciB0byBjb25uZWN0IHRvIC0gb25seSByZXF1aXJlZCBpZiBob3N0IGlzIG5vdCBhIFVSSVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gdGhlIHBhdGggb24gdGhlIGhvc3QgdG8gY29ubmVjdCB0byAtIG9ubHkgdXNlZCBpZiBob3N0IGlzIG5vdCBhIFVSSS4gRGVmYXVsdDogJy9tcXR0Jy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xpZW50SWQgLSB0aGUgTWVzc2FnaW5nIGNsaWVudCBpZGVudGlmaWVyLCBiZXR3ZWVuIDEgYW5kIDIzIGNoYXJhY3RlcnMgaW4gbGVuZ3RoLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGhvc3QgLSA8aT5yZWFkIG9ubHk8L2k+IHRoZSBzZXJ2ZXIncyBETlMgaG9zdG5hbWUgb3IgZG90dGVkIGRlY2ltYWwgSVAgYWRkcmVzcy5cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gcG9ydCAtIDxpPnJlYWQgb25seTwvaT4gdGhlIHNlcnZlcidzIHBvcnQuXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IHBhdGggLSA8aT5yZWFkIG9ubHk8L2k+IHRoZSBzZXJ2ZXIncyBwYXRoLlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjbGllbnRJZCAtIDxpPnJlYWQgb25seTwvaT4gdXNlZCB3aGVuIGNvbm5lY3RpbmcgdG8gdGhlIHNlcnZlci5cbiAgICAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBvbkNvbm5lY3Rpb25Mb3N0IC0gY2FsbGVkIHdoZW4gYSBjb25uZWN0aW9uIGhhcyBiZWVuIGxvc3QuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgYSBjb25uZWN0KCkgbWV0aG9kIGhhcyBzdWNjZWVkZWQuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgRXN0YWJsaXNoIHRoZSBjYWxsIGJhY2sgdXNlZCB3aGVuIGEgY29ubmVjdGlvbiBoYXMgYmVlbiBsb3N0LiBUaGUgY29ubmVjdGlvbiBtYXkgYmVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3N0IGJlY2F1c2UgdGhlIGNsaWVudCBpbml0aWF0ZXMgYSBkaXNjb25uZWN0IG9yIGJlY2F1c2UgdGhlIHNlcnZlciBvciBuZXR3b3JrXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F1c2UgdGhlIGNsaWVudCB0byBiZSBkaXNjb25uZWN0ZWQuIFRoZSBkaXNjb25uZWN0IGNhbGwgYmFjayBtYXkgYmUgY2FsbGVkIHdpdGhvdXRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgY29ubmVjdGlvbkNvbXBsZXRlIGNhbGwgYmFjayBiZWluZyBpbnZva2VkIGlmLCBmb3IgZXhhbXBsZSB0aGUgY2xpZW50IGZhaWxzIHRvXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBIHNpbmdsZSByZXNwb25zZSBvYmplY3QgcGFyYW1ldGVyIGlzIHBhc3NlZCB0byB0aGUgb25Db25uZWN0aW9uTG9zdCBjYWxsYmFjayBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+ZXJyb3JDb2RlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmVycm9yTWVzc2FnZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gb25NZXNzYWdlRGVsaXZlcmVkIC0gY2FsbGVkIHdoZW4gYSBtZXNzYWdlIGhhcyBiZWVuIGRlbGl2ZXJlZC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbGwgcHJvY2Vzc2luZyB0aGF0IHRoaXMgQ2xpZW50IHdpbGwgZXZlciBkbyBoYXMgYmVlbiBjb21wbGV0ZWQuIFNvLCBmb3IgZXhhbXBsZSxcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgY2FzZSBvZiBhIFFvcz0yIG1lc3NhZ2Ugc2VudCBieSB0aGlzIGNsaWVudCwgdGhlIFB1YkNvbXAgZmxvdyBoYXMgYmVlbiByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIG1lc3NhZ2UgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHBlcnNpc3RlbnQgc3RvcmFnZSBiZWZvcmUgdGhpcyBjYWxsYmFjayBpcyBpbnZva2VkLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhcmFtZXRlcnMgcGFzc2VkIHRvIHRoZSBvbk1lc3NhZ2VEZWxpdmVyZWQgY2FsbGJhY2sgYXJlOlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+e0BsaW5rIFBhaG8uTWVzc2FnZX0gdGhhdCB3YXMgZGVsaXZlcmVkLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gb25NZXNzYWdlQXJyaXZlZCAtIGNhbGxlZCB3aGVuIGEgbWVzc2FnZSBoYXMgYXJyaXZlZCBpbiB0aGlzIFBhaG8uY2xpZW50LlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhcmFtZXRlcnMgcGFzc2VkIHRvIHRoZSBvbk1lc3NhZ2VBcnJpdmVkIGNhbGxiYWNrIGFyZTpcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPntAbGluayBQYWhvLk1lc3NhZ2V9IHRoYXQgaGFzIGFycml2ZWQuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBvbkNvbm5lY3RlZCAtIGNhbGxlZCB3aGVuIGEgY29ubmVjdGlvbiBpcyBzdWNjZXNzZnVsbHkgbWFkZSB0byB0aGUgc2VydmVyLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyIGEgY29ubmVjdCgpIG1ldGhvZC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJhbWV0ZXJzIHBhc3NlZCB0byB0aGUgb25Db25uZWN0ZWQgY2FsbGJhY2sgYXJlOlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+cmVjb25uZWN0IChib29sZWFuKSAtIElmIHRydWUsIHRoZSBjb25uZWN0aW9uIHdhcyB0aGUgcmVzdWx0IG9mIGEgcmVjb25uZWN0LjwvbGk+XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlVSSSAoc3RyaW5nKSAtIFRoZSBVUkkgdXNlZCB0byBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIuPC9saT5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZGlzY29ubmVjdGVkUHVibGlzaGluZyAtIGlmIHNldCwgd2lsbCBlbmFibGUgZGlzY29ubmVjdGVkIHB1Ymxpc2hpbmcgaW5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGV2ZW50IHRoYXQgdGhlIGNvbm5lY3Rpb24gdG8gdGhlIHNlcnZlciBpcyBsb3N0LlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkaXNjb25uZWN0ZWRCdWZmZXJTaXplIC0gVXNlZCB0byBzZXQgdGhlIG1heGltdW0gbnVtYmVyIG9mIG1lc3NhZ2VzIHRoYXQgdGhlIGRpc2Nvbm5lY3RlZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyIHdpbGwgaG9sZCBiZWZvcmUgcmVqZWN0aW5nIG5ldyBtZXNzYWdlcy4gRGVmYXVsdCBzaXplOiA1MDAwIG1lc3NhZ2VzXG4gICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gdHJhY2UgLSBjYWxsZWQgd2hlbmV2ZXIgdHJhY2UgaXMgY2FsbGVkLiBUT0RPXG4gICAgICovXG4gICAgdmFyIENsaWVudCA9IGZ1bmN0aW9uKGhvc3QsIHBvcnQsIHBhdGgsIGNsaWVudElkKSB7XG4gICAgICB2YXIgdXJpO1xuXG4gICAgICBpZiAodHlwZW9mIGhvc3QgIT09IFwic3RyaW5nXCIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbdHlwZW9mIGhvc3QsIFwiaG9zdFwiXSkpO1xuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAyKSB7XG4gICAgICAgIC8vIGhvc3Q6IG11c3QgYmUgZnVsbCB3czovLyB1cmlcbiAgICAgICAgLy8gcG9ydDogY2xpZW50SWRcbiAgICAgICAgY2xpZW50SWQgPSBwb3J0O1xuICAgICAgICB1cmkgPSBob3N0O1xuICAgICAgICB2YXIgbWF0Y2ggPSB1cmkubWF0Y2goXG4gICAgICAgICAgL14od3NzPyk6XFwvXFwvKChcXFsoLispXFxdKXwoW15cXC9dKz8pKSg6KFxcZCspKT8oXFwvLiopJC9cbiAgICAgICAgKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgaG9zdCA9IG1hdGNoWzRdIHx8IG1hdGNoWzJdO1xuICAgICAgICAgIHBvcnQgPSBwYXJzZUludChtYXRjaFs3XSk7XG4gICAgICAgICAgcGF0aCA9IG1hdGNoWzhdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuSU5WQUxJRF9BUkdVTUVOVCwgW2hvc3QsIFwiaG9zdFwiXSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAzKSB7XG4gICAgICAgICAgY2xpZW50SWQgPSBwYXRoO1xuICAgICAgICAgIHBhdGggPSBcIi9tcXR0XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBwb3J0ICE9PSBcIm51bWJlclwiIHx8IHBvcnQgPCAwKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbdHlwZW9mIHBvcnQsIFwicG9ydFwiXSkpO1xuICAgICAgICBpZiAodHlwZW9mIHBhdGggIT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdChFUlJPUi5JTlZBTElEX1RZUEUsIFt0eXBlb2YgcGF0aCwgXCJwYXRoXCJdKSk7XG5cbiAgICAgICAgdmFyIGlwdjZBZGRTQnJhY2tldCA9XG4gICAgICAgICAgaG9zdC5pbmRleE9mKFwiOlwiKSAhPT0gLTEgJiZcbiAgICAgICAgICBob3N0LnNsaWNlKDAsIDEpICE9PSBcIltcIiAmJlxuICAgICAgICAgIGhvc3Quc2xpY2UoLTEpICE9PSBcIl1cIjtcbiAgICAgICAgdXJpID1cbiAgICAgICAgICBcIndzOi8vXCIgK1xuICAgICAgICAgIChpcHY2QWRkU0JyYWNrZXQgPyBcIltcIiArIGhvc3QgKyBcIl1cIiA6IGhvc3QpICtcbiAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgcG9ydCArXG4gICAgICAgICAgcGF0aDtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsaWVudElkTGVuZ3RoID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xpZW50SWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoYXJDb2RlID0gY2xpZW50SWQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKDB4ZDgwMCA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSAweGRiZmYpIHtcbiAgICAgICAgICBpKys7IC8vIFN1cnJvZ2F0ZSBwYWlyLlxuICAgICAgICB9XG4gICAgICAgIGNsaWVudElkTGVuZ3RoKys7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGNsaWVudElkICE9PSBcInN0cmluZ1wiIHx8IGNsaWVudElkTGVuZ3RoID4gNjU1MzUpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuSU5WQUxJRF9BUkdVTUVOVCwgW2NsaWVudElkLCBcImNsaWVudElkXCJdKSk7XG5cbiAgICAgIHZhciBjbGllbnQgPSBuZXcgQ2xpZW50SW1wbCh1cmksIGhvc3QsIHBvcnQsIHBhdGgsIGNsaWVudElkKTtcblxuICAgICAgLy9QdWJsaWMgUHJvcGVydGllc1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICBob3N0OiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBob3N0O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuVU5TVVBQT1JURURfT1BFUkFUSU9OKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwb3J0OiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwb3J0O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuVU5TVVBQT1JURURfT1BFUkFUSU9OKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwYXRoOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoRVJST1IuVU5TVVBQT1JURURfT1BFUkFUSU9OKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB1cmk6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHVyaTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLlVOU1VQUE9SVEVEX09QRVJBVElPTikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xpZW50SWQ6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5jbGllbnRJZDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KEVSUk9SLlVOU1VQUE9SVEVEX09QRVJBVElPTikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25Db25uZWN0ZWQ6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5vbkNvbm5lY3RlZDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24obmV3T25Db25uZWN0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3T25Db25uZWN0ZWQgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgY2xpZW50Lm9uQ29ubmVjdGVkID0gbmV3T25Db25uZWN0ZWQ7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbXG4gICAgICAgICAgICAgICAgICB0eXBlb2YgbmV3T25Db25uZWN0ZWQsXG4gICAgICAgICAgICAgICAgICBcIm9uQ29ubmVjdGVkXCJcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGlzY29ubmVjdGVkUHVibGlzaGluZzoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50LmRpc2Nvbm5lY3RlZFB1Ymxpc2hpbmc7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5ld0Rpc2Nvbm5lY3RlZFB1Ymxpc2hpbmcpIHtcbiAgICAgICAgICAgIGNsaWVudC5kaXNjb25uZWN0ZWRQdWJsaXNoaW5nID0gbmV3RGlzY29ubmVjdGVkUHVibGlzaGluZztcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRpc2Nvbm5lY3RlZEJ1ZmZlclNpemU6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5kaXNjb25uZWN0ZWRCdWZmZXJTaXplO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihuZXdEaXNjb25uZWN0ZWRCdWZmZXJTaXplKSB7XG4gICAgICAgICAgICBjbGllbnQuZGlzY29ubmVjdGVkQnVmZmVyU2l6ZSA9IG5ld0Rpc2Nvbm5lY3RlZEJ1ZmZlclNpemU7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkNvbm5lY3Rpb25Mb3N0OiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQub25Db25uZWN0aW9uTG9zdDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24obmV3T25Db25uZWN0aW9uTG9zdCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdPbkNvbm5lY3Rpb25Mb3N0ID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgIGNsaWVudC5vbkNvbm5lY3Rpb25Mb3N0ID0gbmV3T25Db25uZWN0aW9uTG9zdDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX1RZUEUsIFtcbiAgICAgICAgICAgICAgICAgIHR5cGVvZiBuZXdPbkNvbm5lY3Rpb25Mb3N0LFxuICAgICAgICAgICAgICAgICAgXCJvbkNvbm5lY3Rpb25Mb3N0XCJcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25NZXNzYWdlRGVsaXZlcmVkOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQub25NZXNzYWdlRGVsaXZlcmVkO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihuZXdPbk1lc3NhZ2VEZWxpdmVyZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3T25NZXNzYWdlRGVsaXZlcmVkID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgIGNsaWVudC5vbk1lc3NhZ2VEZWxpdmVyZWQgPSBuZXdPbk1lc3NhZ2VEZWxpdmVyZWQ7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbXG4gICAgICAgICAgICAgICAgICB0eXBlb2YgbmV3T25NZXNzYWdlRGVsaXZlcmVkLFxuICAgICAgICAgICAgICAgICAgXCJvbk1lc3NhZ2VEZWxpdmVyZWRcIlxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbk1lc3NhZ2VBcnJpdmVkOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQub25NZXNzYWdlQXJyaXZlZDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24obmV3T25NZXNzYWdlQXJyaXZlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdPbk1lc3NhZ2VBcnJpdmVkID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgIGNsaWVudC5vbk1lc3NhZ2VBcnJpdmVkID0gbmV3T25NZXNzYWdlQXJyaXZlZDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX1RZUEUsIFtcbiAgICAgICAgICAgICAgICAgIHR5cGVvZiBuZXdPbk1lc3NhZ2VBcnJpdmVkLFxuICAgICAgICAgICAgICAgICAgXCJvbk1lc3NhZ2VBcnJpdmVkXCJcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHJhY2U6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNsaWVudC50cmFjZUZ1bmN0aW9uO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbih0cmFjZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0cmFjZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgIGNsaWVudC50cmFjZUZ1bmN0aW9uID0gdHJhY2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfVFlQRSwgW3R5cGVvZiB0cmFjZSwgXCJvblRyYWNlXCJdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8qKlxuICAgICAgICogQ29ubmVjdCB0aGlzIE1lc3NhZ2luZyBjbGllbnQgdG8gaXRzIHNlcnZlci5cbiAgICAgICAqXG4gICAgICAgKiBAbmFtZSBQYWhvLkNsaWVudCNjb25uZWN0XG4gICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb25uZWN0T3B0aW9ucyAtIEF0dHJpYnV0ZXMgdXNlZCB3aXRoIHRoZSBjb25uZWN0aW9uLlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbm5lY3RPcHRpb25zLnRpbWVvdXQgLSBJZiB0aGUgY29ubmVjdCBoYXMgbm90IHN1Y2NlZWRlZCB3aXRoaW4gdGhpc1xuICAgICAgICogICAgICAgICAgICAgICAgICAgIG51bWJlciBvZiBzZWNvbmRzLCBpdCBpcyBkZWVtZWQgdG8gaGF2ZSBmYWlsZWQuXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgVGhlIGRlZmF1bHQgaXMgMzAgc2Vjb25kcy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb25uZWN0T3B0aW9ucy51c2VyTmFtZSAtIEF1dGhlbnRpY2F0aW9uIHVzZXJuYW1lIGZvciB0aGlzIGNvbm5lY3Rpb24uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29ubmVjdE9wdGlvbnMucGFzc3dvcmQgLSBBdXRoZW50aWNhdGlvbiBwYXNzd29yZCBmb3IgdGhpcyBjb25uZWN0aW9uLlxuICAgICAgICogQHBhcmFtIHtQYWhvLk1lc3NhZ2V9IGNvbm5lY3RPcHRpb25zLndpbGxNZXNzYWdlIC0gc2VudCBieSB0aGUgc2VydmVyIHdoZW4gdGhlIGNsaWVudFxuICAgICAgICogICAgICAgICAgICAgICAgICAgIGRpc2Nvbm5lY3RzIGFibm9ybWFsbHkuXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gY29ubmVjdE9wdGlvbnMua2VlcEFsaXZlSW50ZXJ2YWwgLSB0aGUgc2VydmVyIGRpc2Nvbm5lY3RzIHRoaXMgY2xpZW50IGlmXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgbm8gYWN0aXZpdHkgZm9yIHRoaXMgbnVtYmVyIG9mIHNlY29uZHMuXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgVGhlIGRlZmF1bHQgdmFsdWUgb2YgNjAgc2Vjb25kcyBpcyBhc3N1bWVkIGlmIG5vdCBzZXQuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNvbm5lY3RPcHRpb25zLmNsZWFuU2Vzc2lvbiAtIGlmIHRydWUoZGVmYXVsdCkgdGhlIGNsaWVudCBhbmQgc2VydmVyXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgcGVyc2lzdGVudCBzdGF0ZSBpcyBkZWxldGVkIG9uIHN1Y2Nlc3NmdWwgY29ubmVjdC5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY29ubmVjdE9wdGlvbnMudXNlU1NMIC0gaWYgcHJlc2VudCBhbmQgdHJ1ZSwgdXNlIGFuIFNTTCBXZWJzb2NrZXQgY29ubmVjdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb25uZWN0T3B0aW9ucy5pbnZvY2F0aW9uQ29udGV4dCAtIHBhc3NlZCB0byB0aGUgb25TdWNjZXNzIGNhbGxiYWNrIG9yIG9uRmFpbHVyZSBjYWxsYmFjay5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbm5lY3RPcHRpb25zLm9uU3VjY2VzcyAtIGNhbGxlZCB3aGVuIHRoZSBjb25uZWN0IGFja25vd2xlZGdlbWVudFxuICAgICAgICogICAgICAgICAgICAgICAgICAgIGhhcyBiZWVuIHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlci5cbiAgICAgICAqIEEgc2luZ2xlIHJlc3BvbnNlIG9iamVjdCBwYXJhbWV0ZXIgaXMgcGFzc2VkIHRvIHRoZSBvblN1Y2Nlc3MgY2FsbGJhY2sgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIGZpZWxkczpcbiAgICAgICAqIDxvbD5cbiAgICAgICAqIDxsaT5pbnZvY2F0aW9uQ29udGV4dCBhcyBwYXNzZWQgaW4gdG8gdGhlIG9uU3VjY2VzcyBtZXRob2QgaW4gdGhlIGNvbm5lY3RPcHRpb25zLlxuICAgICAgICogPC9vbD5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbm5lY3RPcHRpb25zLm9uRmFpbHVyZSAtIGNhbGxlZCB3aGVuIHRoZSBjb25uZWN0IHJlcXVlc3QgaGFzIGZhaWxlZCBvciB0aW1lZCBvdXQuXG4gICAgICAgKiBBIHNpbmdsZSByZXNwb25zZSBvYmplY3QgcGFyYW1ldGVyIGlzIHBhc3NlZCB0byB0aGUgb25GYWlsdXJlIGNhbGxiYWNrIGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBmaWVsZHM6XG4gICAgICAgKiA8b2w+XG4gICAgICAgKiA8bGk+aW52b2NhdGlvbkNvbnRleHQgYXMgcGFzc2VkIGluIHRvIHRoZSBvbkZhaWx1cmUgbWV0aG9kIGluIHRoZSBjb25uZWN0T3B0aW9ucy5cbiAgICAgICAqIDxsaT5lcnJvckNvZGUgYSBudW1iZXIgaW5kaWNhdGluZyB0aGUgbmF0dXJlIG9mIHRoZSBlcnJvci5cbiAgICAgICAqIDxsaT5lcnJvck1lc3NhZ2UgdGV4dCBkZXNjcmliaW5nIHRoZSBlcnJvci5cbiAgICAgICAqIDwvb2w+XG4gICAgICAgKiBAcGFyYW0ge2FycmF5fSBjb25uZWN0T3B0aW9ucy5ob3N0cyAtIElmIHByZXNlbnQgdGhpcyBjb250YWlucyBlaXRoZXIgYSBzZXQgb2YgaG9zdG5hbWVzIG9yIGZ1bGx5IHF1YWxpZmllZFxuICAgICAgICogV2ViU29ja2V0IFVSSXMgKHdzOi8vaW90LmVjbGlwc2Uub3JnOjgwL3dzKSwgdGhhdCBhcmUgdHJpZWQgaW4gb3JkZXIgaW4gcGxhY2VcbiAgICAgICAqIG9mIHRoZSBob3N0IGFuZCBwb3J0IHBhcmFtYXRlciBvbiB0aGUgY29uc3RydXRvci4gVGhlIGhvc3RzIGFyZSB0cmllZCBvbmUgYXQgYXQgdGltZSBpbiBvcmRlciB1bnRpbFxuICAgICAgICogb25lIG9mIHRoZW4gc3VjY2VlZHMuXG4gICAgICAgKiBAcGFyYW0ge2FycmF5fSBjb25uZWN0T3B0aW9ucy5wb3J0cyAtIElmIHByZXNlbnQgdGhlIHNldCBvZiBwb3J0cyBtYXRjaGluZyB0aGUgaG9zdHMuIElmIGhvc3RzIGNvbnRhaW5zIFVSSXMsIHRoaXMgcHJvcGVydHlcbiAgICAgICAqIGlzIG5vdCB1c2VkLlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBjb25uZWN0T3B0aW9ucy5yZWNvbm5lY3QgLSBTZXRzIHdoZXRoZXIgdGhlIGNsaWVudCB3aWxsIGF1dG9tYXRpY2FsbHkgYXR0ZW1wdCB0byByZWNvbm5lY3RcbiAgICAgICAqIHRvIHRoZSBzZXJ2ZXIgaWYgdGhlIGNvbm5lY3Rpb24gaXMgbG9zdC5cbiAgICAgICAqPHVsPlxuICAgICAgICo8bGk+SWYgc2V0IHRvIGZhbHNlLCB0aGUgY2xpZW50IHdpbGwgbm90IGF0dGVtcHQgdG8gYXV0b21hdGljYWxseSByZWNvbm5lY3QgdG8gdGhlIHNlcnZlciBpbiB0aGUgZXZlbnQgdGhhdCB0aGVcbiAgICAgICAqIGNvbm5lY3Rpb24gaXMgbG9zdC48L2xpPlxuICAgICAgICo8bGk+SWYgc2V0IHRvIHRydWUsIGluIHRoZSBldmVudCB0aGF0IHRoZSBjb25uZWN0aW9uIGlzIGxvc3QsIHRoZSBjbGllbnQgd2lsbCBhdHRlbXB0IHRvIHJlY29ubmVjdCB0byB0aGUgc2VydmVyLlxuICAgICAgICogSXQgd2lsbCBpbml0aWFsbHkgd2FpdCAxIHNlY29uZCBiZWZvcmUgaXQgYXR0ZW1wdHMgdG8gcmVjb25uZWN0LCBmb3IgZXZlcnkgZmFpbGVkIHJlY29ubmVjdCBhdHRlbXB0LCB0aGUgZGVsYXlcbiAgICAgICAqIHdpbGwgZG91YmxlIHVudGlsIGl0IGlzIGF0IDIgbWludXRlcyBhdCB3aGljaCBwb2ludCB0aGUgZGVsYXkgd2lsbCBzdGF5IGF0IDIgbWludXRlcy48L2xpPlxuICAgICAgICo8L3VsPlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uIC0gVGhlIHZlcnNpb24gb2YgTVFUVCB0byB1c2UgdG8gY29ubmVjdCB0byB0aGUgTVFUVCBCcm9rZXIuXG4gICAgICAgKjx1bD5cbiAgICAgICAqPGxpPjMgLSBNUVRUIFYzLjE8L2xpPlxuICAgICAgICo8bGk+NCAtIE1RVFQgVjMuMS4xPC9saT5cbiAgICAgICAqPC91bD5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY29ubmVjdE9wdGlvbnMubXF0dFZlcnNpb25FeHBsaWNpdCAtIElmIHNldCB0byB0cnVlLCB3aWxsIGZvcmNlIHRoZSBjb25uZWN0aW9uIHRvIHVzZSB0aGVcbiAgICAgICAqIHNlbGVjdGVkIE1RVFQgVmVyc2lvbiBvciB3aWxsIGZhaWwgdG8gY29ubmVjdC5cbiAgICAgICAqIEBwYXJhbSB7YXJyYXl9IGNvbm5lY3RPcHRpb25zLnVyaXMgLSBJZiBwcmVzZW50LCBzaG91bGQgY29udGFpbiBhIGxpc3Qgb2YgZnVsbHkgcXVhbGlmaWVkIFdlYlNvY2tldCB1cmlzXG4gICAgICAgKiAoZS5nLiB3czovL2lvdC5lY2xpcHNlLm9yZzo4MC93cyksIHRoYXQgYXJlIHRyaWVkIGluIG9yZGVyIGluIHBsYWNlIG9mIHRoZSBob3N0IGFuZCBwb3J0IHBhcmFtZXRlciBvZiB0aGUgY29uc3RydXRvci5cbiAgICAgICAqIFRoZSB1cmlzIGFyZSB0cmllZCBvbmUgYXQgYSB0aW1lIGluIG9yZGVyIHVudGlsIG9uZSBvZiB0aGVtIHN1Y2NlZWRzLiBEbyBub3QgdXNlIHRoaXMgaW4gY29uanVuY3Rpb24gd2l0aCBob3N0cyBhc1xuICAgICAgICogdGhlIGhvc3RzIGFycmF5IHdpbGwgYmUgY29udmVydGVkIHRvIHVyaXMgYW5kIHdpbGwgb3ZlcndyaXRlIHRoaXMgcHJvcGVydHkuXG4gICAgICAgKiBAdGhyb3dzIHtJbnZhbGlkU3RhdGV9IElmIHRoZSBjbGllbnQgaXMgbm90IGluIGRpc2Nvbm5lY3RlZCBzdGF0ZS4gVGhlIGNsaWVudCBtdXN0IGhhdmUgcmVjZWl2ZWQgY29ubmVjdGlvbkxvc3RcbiAgICAgICAqIG9yIGRpc2Nvbm5lY3RlZCBiZWZvcmUgY2FsbGluZyBjb25uZWN0IGZvciBhIHNlY29uZCBvciBzdWJzZXF1ZW50IHRpbWUuXG4gICAgICAgKi9cbiAgICAgIHRoaXMuY29ubmVjdCA9IGZ1bmN0aW9uKGNvbm5lY3RPcHRpb25zKSB7XG4gICAgICAgIGNvbm5lY3RPcHRpb25zID0gY29ubmVjdE9wdGlvbnMgfHwge307XG4gICAgICAgIHZhbGlkYXRlKGNvbm5lY3RPcHRpb25zLCB7XG4gICAgICAgICAgdGltZW91dDogXCJudW1iZXJcIixcbiAgICAgICAgICB1c2VyTmFtZTogXCJzdHJpbmdcIixcbiAgICAgICAgICBwYXNzd29yZDogXCJzdHJpbmdcIixcbiAgICAgICAgICB3aWxsTWVzc2FnZTogXCJvYmplY3RcIixcbiAgICAgICAgICBrZWVwQWxpdmVJbnRlcnZhbDogXCJudW1iZXJcIixcbiAgICAgICAgICBjbGVhblNlc3Npb246IFwiYm9vbGVhblwiLFxuICAgICAgICAgIHVzZVNTTDogXCJib29sZWFuXCIsXG4gICAgICAgICAgaW52b2NhdGlvbkNvbnRleHQ6IFwib2JqZWN0XCIsXG4gICAgICAgICAgb25TdWNjZXNzOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgICAgb25GYWlsdXJlOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgICAgaG9zdHM6IFwib2JqZWN0XCIsXG4gICAgICAgICAgcG9ydHM6IFwib2JqZWN0XCIsXG4gICAgICAgICAgcmVjb25uZWN0OiBcImJvb2xlYW5cIixcbiAgICAgICAgICBtcXR0VmVyc2lvbjogXCJudW1iZXJcIixcbiAgICAgICAgICBtcXR0VmVyc2lvbkV4cGxpY2l0OiBcImJvb2xlYW5cIixcbiAgICAgICAgICB1cmlzOiBcIm9iamVjdFwiXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIElmIG5vIGtlZXAgYWxpdmUgaW50ZXJ2YWwgaXMgc2V0LCBhc3N1bWUgNjAgc2Vjb25kcy5cbiAgICAgICAgaWYgKGNvbm5lY3RPcHRpb25zLmtlZXBBbGl2ZUludGVydmFsID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgY29ubmVjdE9wdGlvbnMua2VlcEFsaXZlSW50ZXJ2YWwgPSA2MDtcblxuICAgICAgICBpZiAoY29ubmVjdE9wdGlvbnMubXF0dFZlcnNpb24gPiA0IHx8IGNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uIDwgMykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgIGNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uLFxuICAgICAgICAgICAgICBcImNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uXCJcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29ubmVjdE9wdGlvbnMubXF0dFZlcnNpb25FeHBsaWNpdCA9IGZhbHNlO1xuICAgICAgICAgIGNvbm5lY3RPcHRpb25zLm1xdHRWZXJzaW9uID0gNDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25uZWN0T3B0aW9ucy5tcXR0VmVyc2lvbkV4cGxpY2l0ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vQ2hlY2sgdGhhdCBpZiBwYXNzd29yZCBpcyBzZXQsIHNvIGlzIHVzZXJuYW1lXG4gICAgICAgIGlmIChcbiAgICAgICAgICBjb25uZWN0T3B0aW9ucy5wYXNzd29yZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgY29ubmVjdE9wdGlvbnMudXNlck5hbWUgPT09IHVuZGVmaW5lZFxuICAgICAgICApXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtcbiAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMucGFzc3dvcmQsXG4gICAgICAgICAgICAgIFwiY29ubmVjdE9wdGlvbnMucGFzc3dvcmRcIlxuICAgICAgICAgICAgXSlcbiAgICAgICAgICApO1xuXG4gICAgICAgIGlmIChjb25uZWN0T3B0aW9ucy53aWxsTWVzc2FnZSkge1xuICAgICAgICAgIGlmICghKGNvbm5lY3RPcHRpb25zLndpbGxNZXNzYWdlIGluc3RhbmNlb2YgTWVzc2FnZSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX1RZUEUsIFtcbiAgICAgICAgICAgICAgICBjb25uZWN0T3B0aW9ucy53aWxsTWVzc2FnZSxcbiAgICAgICAgICAgICAgICBcImNvbm5lY3RPcHRpb25zLndpbGxNZXNzYWdlXCJcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgLy8gVGhlIHdpbGwgbWVzc2FnZSBtdXN0IGhhdmUgYSBwYXlsb2FkIHRoYXQgY2FuIGJlIHJlcHJlc2VudGVkIGFzIGEgc3RyaW5nLlxuICAgICAgICAgIC8vIENhdXNlIHRoZSB3aWxsTWVzc2FnZSB0byB0aHJvdyBhbiBleGNlcHRpb24gaWYgdGhpcyBpcyBub3QgdGhlIGNhc2UuXG4gICAgICAgICAgY29ubmVjdE9wdGlvbnMud2lsbE1lc3NhZ2Uuc3RyaW5nUGF5bG9hZCA9IG51bGw7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGNvbm5lY3RPcHRpb25zLndpbGxNZXNzYWdlLmRlc3RpbmF0aW9uTmFtZSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfVFlQRSwgW1xuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25uZWN0T3B0aW9ucy53aWxsTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy53aWxsTWVzc2FnZS5kZXN0aW5hdGlvbk5hbWVcIlxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNvbm5lY3RPcHRpb25zLmNsZWFuU2Vzc2lvbiA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICBjb25uZWN0T3B0aW9ucy5jbGVhblNlc3Npb24gPSB0cnVlO1xuICAgICAgICBpZiAoY29ubmVjdE9wdGlvbnMuaG9zdHMpIHtcbiAgICAgICAgICBpZiAoIShjb25uZWN0T3B0aW9ucy5ob3N0cyBpbnN0YW5jZW9mIEFycmF5KSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtcbiAgICAgICAgICAgICAgICBjb25uZWN0T3B0aW9ucy5ob3N0cyxcbiAgICAgICAgICAgICAgICBcImNvbm5lY3RPcHRpb25zLmhvc3RzXCJcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKGNvbm5lY3RPcHRpb25zLmhvc3RzLmxlbmd0aCA8IDEpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMuaG9zdHMsXG4gICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5ob3N0c1wiXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgdmFyIHVzaW5nVVJJcyA9IGZhbHNlO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29ubmVjdE9wdGlvbnMuaG9zdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29ubmVjdE9wdGlvbnMuaG9zdHNbaV0gIT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9UWVBFLCBbXG4gICAgICAgICAgICAgICAgICB0eXBlb2YgY29ubmVjdE9wdGlvbnMuaG9zdHNbaV0sXG4gICAgICAgICAgICAgICAgICBcImNvbm5lY3RPcHRpb25zLmhvc3RzW1wiICsgaSArIFwiXVwiXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgL14od3NzPyk6XFwvXFwvKChcXFsoLispXFxdKXwoW15cXC9dKz8pKSg6KFxcZCspKT8oXFwvLiopJC8udGVzdChcbiAgICAgICAgICAgICAgICBjb25uZWN0T3B0aW9ucy5ob3N0c1tpXVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICB1c2luZ1VSSXMgPSB0cnVlO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF1c2luZ1VSSXMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9BUkdVTUVOVCwgW1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0T3B0aW9ucy5ob3N0c1tpXSxcbiAgICAgICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5ob3N0c1tcIiArIGkgKyBcIl1cIlxuICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHVzaW5nVVJJcykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtcbiAgICAgICAgICAgICAgICAgIGNvbm5lY3RPcHRpb25zLmhvc3RzW2ldLFxuICAgICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5ob3N0c1tcIiArIGkgKyBcIl1cIlxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCF1c2luZ1VSSXMpIHtcbiAgICAgICAgICAgIGlmICghY29ubmVjdE9wdGlvbnMucG9ydHMpXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9BUkdVTUVOVCwgW1xuICAgICAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMucG9ydHMsXG4gICAgICAgICAgICAgICAgICBcImNvbm5lY3RPcHRpb25zLnBvcnRzXCJcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCEoY29ubmVjdE9wdGlvbnMucG9ydHMgaW5zdGFuY2VvZiBBcnJheSkpXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBmb3JtYXQoRVJST1IuSU5WQUxJRF9BUkdVTUVOVCwgW1xuICAgICAgICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMucG9ydHMsXG4gICAgICAgICAgICAgICAgICBcImNvbm5lY3RPcHRpb25zLnBvcnRzXCJcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGNvbm5lY3RPcHRpb25zLmhvc3RzLmxlbmd0aCAhPT0gY29ubmVjdE9wdGlvbnMucG9ydHMubGVuZ3RoKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtcbiAgICAgICAgICAgICAgICAgIGNvbm5lY3RPcHRpb25zLnBvcnRzLFxuICAgICAgICAgICAgICAgICAgXCJjb25uZWN0T3B0aW9ucy5wb3J0c1wiXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMudXJpcyA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbm5lY3RPcHRpb25zLmhvc3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29ubmVjdE9wdGlvbnMucG9ydHNbaV0gIT09IFwibnVtYmVyXCIgfHxcbiAgICAgICAgICAgICAgICBjb25uZWN0T3B0aW9ucy5wb3J0c1tpXSA8IDBcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX1RZUEUsIFtcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbm5lY3RPcHRpb25zLnBvcnRzW2ldLFxuICAgICAgICAgICAgICAgICAgICBcImNvbm5lY3RPcHRpb25zLnBvcnRzW1wiICsgaSArIFwiXVwiXG4gICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHZhciBob3N0ID0gY29ubmVjdE9wdGlvbnMuaG9zdHNbaV07XG4gICAgICAgICAgICAgIHZhciBwb3J0ID0gY29ubmVjdE9wdGlvbnMucG9ydHNbaV07XG5cbiAgICAgICAgICAgICAgdmFyIGlwdjYgPSBob3N0LmluZGV4T2YoXCI6XCIpICE9PSAtMTtcbiAgICAgICAgICAgICAgdXJpID1cbiAgICAgICAgICAgICAgICBcIndzOi8vXCIgKyAoaXB2NiA/IFwiW1wiICsgaG9zdCArIFwiXVwiIDogaG9zdCkgKyBcIjpcIiArIHBvcnQgKyBwYXRoO1xuICAgICAgICAgICAgICBjb25uZWN0T3B0aW9ucy51cmlzLnB1c2godXJpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29ubmVjdE9wdGlvbnMudXJpcyA9IGNvbm5lY3RPcHRpb25zLmhvc3RzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNsaWVudC5jb25uZWN0KGNvbm5lY3RPcHRpb25zKTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogU3Vic2NyaWJlIGZvciBtZXNzYWdlcywgcmVxdWVzdCByZWNlaXB0IG9mIGEgY29weSBvZiBtZXNzYWdlcyBzZW50IHRvIHRoZSBkZXN0aW5hdGlvbnMgZGVzY3JpYmVkIGJ5IHRoZSBmaWx0ZXIuXG4gICAgICAgKlxuICAgICAgICogQG5hbWUgUGFoby5DbGllbnQjc3Vic2NyaWJlXG4gICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWx0ZXIgZGVzY3JpYmluZyB0aGUgZGVzdGluYXRpb25zIHRvIHJlY2VpdmUgbWVzc2FnZXMgZnJvbS5cbiAgICAgICAqIDxicj5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzdWJzY3JpYmVPcHRpb25zIC0gdXNlZCB0byBjb250cm9sIHRoZSBzdWJzY3JpcHRpb25cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gc3Vic2NyaWJlT3B0aW9ucy5xb3MgLSB0aGUgbWF4aW11bSBxb3Mgb2YgYW55IHB1YmxpY2F0aW9ucyBzZW50XG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcyBhIHJlc3VsdCBvZiBtYWtpbmcgdGhpcyBzdWJzY3JpcHRpb24uXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gc3Vic2NyaWJlT3B0aW9ucy5pbnZvY2F0aW9uQ29udGV4dCAtIHBhc3NlZCB0byB0aGUgb25TdWNjZXNzIGNhbGxiYWNrXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBvbkZhaWx1cmUgY2FsbGJhY2suXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdWJzY3JpYmVPcHRpb25zLm9uU3VjY2VzcyAtIGNhbGxlZCB3aGVuIHRoZSBzdWJzY3JpYmUgYWNrbm93bGVkZ2VtZW50XG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBIHNpbmdsZSByZXNwb25zZSBvYmplY3QgcGFyYW1ldGVyIGlzIHBhc3NlZCB0byB0aGUgb25TdWNjZXNzIGNhbGxiYWNrIGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBmaWVsZHM6XG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+aW52b2NhdGlvbkNvbnRleHQgaWYgc2V0IGluIHRoZSBzdWJzY3JpYmVPcHRpb25zLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1YnNjcmliZU9wdGlvbnMub25GYWlsdXJlIC0gY2FsbGVkIHdoZW4gdGhlIHN1YnNjcmliZSByZXF1ZXN0IGhhcyBmYWlsZWQgb3IgdGltZWQgb3V0LlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBzaW5nbGUgcmVzcG9uc2Ugb2JqZWN0IHBhcmFtZXRlciBpcyBwYXNzZWQgdG8gdGhlIG9uRmFpbHVyZSBjYWxsYmFjayBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmludm9jYXRpb25Db250ZXh0IC0gaWYgc2V0IGluIHRoZSBzdWJzY3JpYmVPcHRpb25zLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmVycm9yQ29kZSAtIGEgbnVtYmVyIGluZGljYXRpbmcgdGhlIG5hdHVyZSBvZiB0aGUgZXJyb3IuXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+ZXJyb3JNZXNzYWdlIC0gdGV4dCBkZXNjcmliaW5nIHRoZSBlcnJvci5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gc3Vic2NyaWJlT3B0aW9ucy50aW1lb3V0IC0gd2hpY2gsIGlmIHByZXNlbnQsIGRldGVybWluZXMgdGhlIG51bWJlciBvZlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyBhZnRlciB3aGljaCB0aGUgb25GYWlsdXJlIGNhbGJhY2sgaXMgY2FsbGVkLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHByZXNlbmNlIG9mIGEgdGltZW91dCBkb2VzIG5vdCBwcmV2ZW50IHRoZSBvblN1Y2Nlc3NcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrIGZyb20gYmVpbmcgY2FsbGVkIHdoZW4gdGhlIHN1YnNjcmliZSBjb21wbGV0ZXMuXG4gICAgICAgKiBAdGhyb3dzIHtJbnZhbGlkU3RhdGV9IGlmIHRoZSBjbGllbnQgaXMgbm90IGluIGNvbm5lY3RlZCBzdGF0ZS5cbiAgICAgICAqL1xuICAgICAgdGhpcy5zdWJzY3JpYmUgPSBmdW5jdGlvbihmaWx0ZXIsIHN1YnNjcmliZU9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXIgIT09IFwic3RyaW5nXCIgJiYgZmlsdGVyLmNvbnN0cnVjdG9yICE9PSBBcnJheSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50OlwiICsgZmlsdGVyKTtcbiAgICAgICAgc3Vic2NyaWJlT3B0aW9ucyA9IHN1YnNjcmliZU9wdGlvbnMgfHwge307XG4gICAgICAgIHZhbGlkYXRlKHN1YnNjcmliZU9wdGlvbnMsIHtcbiAgICAgICAgICBxb3M6IFwibnVtYmVyXCIsXG4gICAgICAgICAgaW52b2NhdGlvbkNvbnRleHQ6IFwib2JqZWN0XCIsXG4gICAgICAgICAgb25TdWNjZXNzOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgICAgb25GYWlsdXJlOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgICAgdGltZW91dDogXCJudW1iZXJcIlxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHN1YnNjcmliZU9wdGlvbnMudGltZW91dCAmJiAhc3Vic2NyaWJlT3B0aW9ucy5vbkZhaWx1cmUpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgXCJzdWJzY3JpYmVPcHRpb25zLnRpbWVvdXQgc3BlY2lmaWVkIHdpdGggbm8gb25GYWlsdXJlIGNhbGxiYWNrLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBzdWJzY3JpYmVPcHRpb25zLnFvcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAgICEoXG4gICAgICAgICAgICBzdWJzY3JpYmVPcHRpb25zLnFvcyA9PT0gMCB8fFxuICAgICAgICAgICAgc3Vic2NyaWJlT3B0aW9ucy5xb3MgPT09IDEgfHxcbiAgICAgICAgICAgIHN1YnNjcmliZU9wdGlvbnMucW9zID09PSAyXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtcbiAgICAgICAgICAgICAgc3Vic2NyaWJlT3B0aW9ucy5xb3MsXG4gICAgICAgICAgICAgIFwic3Vic2NyaWJlT3B0aW9ucy5xb3NcIlxuICAgICAgICAgICAgXSlcbiAgICAgICAgICApO1xuICAgICAgICBjbGllbnQuc3Vic2NyaWJlKGZpbHRlciwgc3Vic2NyaWJlT3B0aW9ucyk7XG4gICAgICB9O1xuXG4gICAgICAvKipcblx0XHQgKiBVbnN1YnNjcmliZSBmb3IgbWVzc2FnZXMsIHN0b3AgcmVjZWl2aW5nIG1lc3NhZ2VzIHNlbnQgdG8gZGVzdGluYXRpb25zIGRlc2NyaWJlZCBieSB0aGUgZmlsdGVyLlxuXHRcdCAqXG5cdFx0ICogQG5hbWUgUGFoby5DbGllbnQjdW5zdWJzY3JpYmVcblx0XHQgKiBAZnVuY3Rpb25cblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gZmlsdGVyIC0gZGVzY3JpYmluZyB0aGUgZGVzdGluYXRpb25zIHRvIHJlY2VpdmUgbWVzc2FnZXMgZnJvbS5cblx0XHQgKiBAcGFyYW0ge29iamVjdH0gdW5zdWJzY3JpYmVPcHRpb25zIC0gdXNlZCB0byBjb250cm9sIHRoZSBzdWJzY3JpcHRpb25cblx0XHQgKiBAcGFyYW0ge29iamVjdH0gdW5zdWJzY3JpYmVPcHRpb25zLmludm9jYXRpb25Db250ZXh0IC0gcGFzc2VkIHRvIHRoZSBvblN1Y2Nlc3MgY2FsbGJhY2tcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgIG9yIG9uRmFpbHVyZSBjYWxsYmFjay5cblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSB1bnN1YnNjcmliZU9wdGlvbnMub25TdWNjZXNzIC0gY2FsbGVkIHdoZW4gdGhlIHVuc3Vic2NyaWJlIGFja25vd2xlZGdlbWVudCBoYXMgYmVlbiByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXIuXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBIHNpbmdsZSByZXNwb25zZSBvYmplY3QgcGFyYW1ldGVyIGlzIHBhc3NlZCB0byB0aGVcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU3VjY2VzcyBjYWxsYmFjayBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmludm9jYXRpb25Db250ZXh0IC0gaWYgc2V0IGluIHRoZSB1bnN1YnNjcmliZU9wdGlvbnMuXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb259IHVuc3Vic2NyaWJlT3B0aW9ucy5vbkZhaWx1cmUgY2FsbGVkIHdoZW4gdGhlIHVuc3Vic2NyaWJlIHJlcXVlc3QgaGFzIGZhaWxlZCBvciB0aW1lZCBvdXQuXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBIHNpbmdsZSByZXNwb25zZSBvYmplY3QgcGFyYW1ldGVyIGlzIHBhc3NlZCB0byB0aGUgb25GYWlsdXJlIGNhbGxiYWNrIGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBmaWVsZHM6XG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+aW52b2NhdGlvbkNvbnRleHQgLSBpZiBzZXQgaW4gdGhlIHVuc3Vic2NyaWJlT3B0aW9ucy5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5lcnJvckNvZGUgLSBhIG51bWJlciBpbmRpY2F0aW5nIHRoZSBuYXR1cmUgb2YgdGhlIGVycm9yLlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmVycm9yTWVzc2FnZSAtIHRleHQgZGVzY3JpYmluZyB0aGUgZXJyb3IuXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSB1bnN1YnNjcmliZU9wdGlvbnMudGltZW91dCAtIHdoaWNoLCBpZiBwcmVzZW50LCBkZXRlcm1pbmVzIHRoZSBudW1iZXIgb2Ygc2Vjb25kc1xuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgd2hpY2ggdGhlIG9uRmFpbHVyZSBjYWxsYmFjayBpcyBjYWxsZWQuIFRoZSBwcmVzZW5jZSBvZlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSB0aW1lb3V0IGRvZXMgbm90IHByZXZlbnQgdGhlIG9uU3VjY2VzcyBjYWxsYmFjayBmcm9tIGJlaW5nXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZWQgd2hlbiB0aGUgdW5zdWJzY3JpYmUgY29tcGxldGVzXG5cdFx0ICogQHRocm93cyB7SW52YWxpZFN0YXRlfSBpZiB0aGUgY2xpZW50IGlzIG5vdCBpbiBjb25uZWN0ZWQgc3RhdGUuXG5cdFx0ICovXG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24oZmlsdGVyLCB1bnN1YnNjcmliZU9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXIgIT09IFwic3RyaW5nXCIgJiYgZmlsdGVyLmNvbnN0cnVjdG9yICE9PSBBcnJheSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50OlwiICsgZmlsdGVyKTtcbiAgICAgICAgdW5zdWJzY3JpYmVPcHRpb25zID0gdW5zdWJzY3JpYmVPcHRpb25zIHx8IHt9O1xuICAgICAgICB2YWxpZGF0ZSh1bnN1YnNjcmliZU9wdGlvbnMsIHtcbiAgICAgICAgICBpbnZvY2F0aW9uQ29udGV4dDogXCJvYmplY3RcIixcbiAgICAgICAgICBvblN1Y2Nlc3M6IFwiZnVuY3Rpb25cIixcbiAgICAgICAgICBvbkZhaWx1cmU6IFwiZnVuY3Rpb25cIixcbiAgICAgICAgICB0aW1lb3V0OiBcIm51bWJlclwiXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodW5zdWJzY3JpYmVPcHRpb25zLnRpbWVvdXQgJiYgIXVuc3Vic2NyaWJlT3B0aW9ucy5vbkZhaWx1cmUpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgXCJ1bnN1YnNjcmliZU9wdGlvbnMudGltZW91dCBzcGVjaWZpZWQgd2l0aCBubyBvbkZhaWx1cmUgY2FsbGJhY2suXCJcbiAgICAgICAgICApO1xuICAgICAgICBjbGllbnQudW5zdWJzY3JpYmUoZmlsdGVyLCB1bnN1YnNjcmliZU9wdGlvbnMpO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBTZW5kIGEgbWVzc2FnZSB0byB0aGUgY29uc3VtZXJzIG9mIHRoZSBkZXN0aW5hdGlvbiBpbiB0aGUgTWVzc2FnZS5cbiAgICAgICAqXG4gICAgICAgKiBAbmFtZSBQYWhvLkNsaWVudCNzZW5kXG4gICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfFBhaG8uTWVzc2FnZX0gdG9waWMgLSA8Yj5tYW5kYXRvcnk8L2I+IFRoZSBuYW1lIG9mIHRoZSBkZXN0aW5hdGlvbiB0byB3aGljaCB0aGUgbWVzc2FnZSBpcyB0byBiZSBzZW50LlxuICAgICAgICogXHRcdFx0XHRcdCAgIC0gSWYgaXQgaXMgdGhlIG9ubHkgcGFyYW1ldGVyLCB1c2VkIGFzIFBhaG8uTWVzc2FnZSBvYmplY3QuXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheUJ1ZmZlcn0gcGF5bG9hZCAtIFRoZSBtZXNzYWdlIGRhdGEgdG8gYmUgc2VudC5cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBxb3MgVGhlIFF1YWxpdHkgb2YgU2VydmljZSB1c2VkIHRvIGRlbGl2ZXIgdGhlIG1lc3NhZ2UuXG4gICAgICAgKiBcdFx0PGRsPlxuICAgICAgICogXHRcdFx0PGR0PjAgQmVzdCBlZmZvcnQgKGRlZmF1bHQpLlxuICAgICAgICogICAgIFx0XHRcdDxkdD4xIEF0IGxlYXN0IG9uY2UuXG4gICAgICAgKiAgICAgXHRcdFx0PGR0PjIgRXhhY3RseSBvbmNlLlxuICAgICAgICogXHRcdDwvZGw+XG4gICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJldGFpbmVkIElmIHRydWUsIHRoZSBtZXNzYWdlIGlzIHRvIGJlIHJldGFpbmVkIGJ5IHRoZSBzZXJ2ZXIgYW5kIGRlbGl2ZXJlZFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICB0byBib3RoIGN1cnJlbnQgYW5kIGZ1dHVyZSBzdWJzY3JpcHRpb25zLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICBJZiBmYWxzZSB0aGUgc2VydmVyIG9ubHkgZGVsaXZlcnMgdGhlIG1lc3NhZ2UgdG8gY3VycmVudCBzdWJzY3JpYmVycywgdGhpcyBpcyB0aGUgZGVmYXVsdCBmb3IgbmV3IE1lc3NhZ2VzLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICBBIHJlY2VpdmVkIG1lc3NhZ2UgaGFzIHRoZSByZXRhaW5lZCBib29sZWFuIHNldCB0byB0cnVlIGlmIHRoZSBtZXNzYWdlIHdhcyBwdWJsaXNoZWRcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgcmV0YWluZWQgYm9vbGVhbiBzZXQgdG8gdHJ1ZVxuICAgICAgICogICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHN1YnNjcnB0aW9uIHdhcyBtYWRlIGFmdGVyIHRoZSBtZXNzYWdlIGhhcyBiZWVuIHB1Ymxpc2hlZC5cbiAgICAgICAqIEB0aHJvd3Mge0ludmFsaWRTdGF0ZX0gaWYgdGhlIGNsaWVudCBpcyBub3QgY29ubmVjdGVkLlxuICAgICAgICovXG4gICAgICB0aGlzLnNlbmQgPSBmdW5jdGlvbih0b3BpYywgcGF5bG9hZCwgcW9zLCByZXRhaW5lZCkge1xuICAgICAgICB2YXIgbWVzc2FnZTtcblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQuXCIgKyBcImxlbmd0aFwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICBpZiAoISh0b3BpYyBpbnN0YW5jZW9mIE1lc3NhZ2UpICYmIHR5cGVvZiB0b3BpYyAhPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQ6XCIgKyB0eXBlb2YgdG9waWMpO1xuXG4gICAgICAgICAgbWVzc2FnZSA9IHRvcGljO1xuICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgICAgbWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAgXCJNZXNzYWdlLmRlc3RpbmF0aW9uTmFtZVwiXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGNsaWVudC5zZW5kKG1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vcGFyYW1ldGVyIGNoZWNraW5nIGluIE1lc3NhZ2Ugb2JqZWN0XG4gICAgICAgICAgbWVzc2FnZSA9IG5ldyBNZXNzYWdlKHBheWxvYWQpO1xuICAgICAgICAgIG1lc3NhZ2UuZGVzdGluYXRpb25OYW1lID0gdG9waWM7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgbWVzc2FnZS5xb3MgPSBxb3M7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgbWVzc2FnZS5yZXRhaW5lZCA9IHJldGFpbmVkO1xuICAgICAgICAgIGNsaWVudC5zZW5kKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIFB1Ymxpc2ggYSBtZXNzYWdlIHRvIHRoZSBjb25zdW1lcnMgb2YgdGhlIGRlc3RpbmF0aW9uIGluIHRoZSBNZXNzYWdlLlxuICAgICAgICogU3lub255bSBmb3IgUGFoby5NcXR0LkNsaWVudCNzZW5kXG4gICAgICAgKlxuICAgICAgICogQG5hbWUgUGFoby5DbGllbnQjcHVibGlzaFxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xQYWhvLk1lc3NhZ2V9IHRvcGljIC0gPGI+bWFuZGF0b3J5PC9iPiBUaGUgbmFtZSBvZiB0aGUgdG9waWMgdG8gd2hpY2ggdGhlIG1lc3NhZ2UgaXMgdG8gYmUgcHVibGlzaGVkLlxuICAgICAgICogXHRcdFx0XHRcdCAgIC0gSWYgaXQgaXMgdGhlIG9ubHkgcGFyYW1ldGVyLCB1c2VkIGFzIFBhaG8uTWVzc2FnZSBvYmplY3QuXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheUJ1ZmZlcn0gcGF5bG9hZCAtIFRoZSBtZXNzYWdlIGRhdGEgdG8gYmUgcHVibGlzaGVkLlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHFvcyBUaGUgUXVhbGl0eSBvZiBTZXJ2aWNlIHVzZWQgdG8gZGVsaXZlciB0aGUgbWVzc2FnZS5cbiAgICAgICAqIFx0XHQ8ZGw+XG4gICAgICAgKiBcdFx0XHQ8ZHQ+MCBCZXN0IGVmZm9ydCAoZGVmYXVsdCkuXG4gICAgICAgKiAgICAgXHRcdFx0PGR0PjEgQXQgbGVhc3Qgb25jZS5cbiAgICAgICAqICAgICBcdFx0XHQ8ZHQ+MiBFeGFjdGx5IG9uY2UuXG4gICAgICAgKiBcdFx0PC9kbD5cbiAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmV0YWluZWQgSWYgdHJ1ZSwgdGhlIG1lc3NhZ2UgaXMgdG8gYmUgcmV0YWluZWQgYnkgdGhlIHNlcnZlciBhbmQgZGVsaXZlcmVkXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgIHRvIGJvdGggY3VycmVudCBhbmQgZnV0dXJlIHN1YnNjcmlwdGlvbnMuXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgIElmIGZhbHNlIHRoZSBzZXJ2ZXIgb25seSBkZWxpdmVycyB0aGUgbWVzc2FnZSB0byBjdXJyZW50IHN1YnNjcmliZXJzLCB0aGlzIGlzIHRoZSBkZWZhdWx0IGZvciBuZXcgTWVzc2FnZXMuXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgIEEgcmVjZWl2ZWQgbWVzc2FnZSBoYXMgdGhlIHJldGFpbmVkIGJvb2xlYW4gc2V0IHRvIHRydWUgaWYgdGhlIG1lc3NhZ2Ugd2FzIHB1Ymxpc2hlZFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSByZXRhaW5lZCBib29sZWFuIHNldCB0byB0cnVlXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgc3Vic2NycHRpb24gd2FzIG1hZGUgYWZ0ZXIgdGhlIG1lc3NhZ2UgaGFzIGJlZW4gcHVibGlzaGVkLlxuICAgICAgICogQHRocm93cyB7SW52YWxpZFN0YXRlfSBpZiB0aGUgY2xpZW50IGlzIG5vdCBjb25uZWN0ZWQuXG4gICAgICAgKi9cbiAgICAgIHRoaXMucHVibGlzaCA9IGZ1bmN0aW9uKHRvcGljLCBwYXlsb2FkLCBxb3MsIHJldGFpbmVkKSB7XG4gICAgICAgIHZhciBtZXNzYWdlO1xuXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudC5cIiArIFwibGVuZ3RoXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgIGlmICghKHRvcGljIGluc3RhbmNlb2YgTWVzc2FnZSkgJiYgdHlwZW9mIHRvcGljICE9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudDpcIiArIHR5cGVvZiB0b3BpYyk7XG5cbiAgICAgICAgICBtZXNzYWdlID0gdG9waWM7XG4gICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLmRlc3RpbmF0aW9uTmFtZSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmRlc3RpbmF0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICBcIk1lc3NhZ2UuZGVzdGluYXRpb25OYW1lXCJcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgY2xpZW50LnNlbmQobWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy9wYXJhbWV0ZXIgY2hlY2tpbmcgaW4gTWVzc2FnZSBvYmplY3RcbiAgICAgICAgICBtZXNzYWdlID0gbmV3IE1lc3NhZ2UocGF5bG9hZCk7XG4gICAgICAgICAgbWVzc2FnZS5kZXN0aW5hdGlvbk5hbWUgPSB0b3BpYztcbiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBtZXNzYWdlLnFvcyA9IHFvcztcbiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBtZXNzYWdlLnJldGFpbmVkID0gcmV0YWluZWQ7XG4gICAgICAgICAgY2xpZW50LnNlbmQobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogTm9ybWFsIGRpc2Nvbm5lY3Qgb2YgdGhpcyBNZXNzYWdpbmcgY2xpZW50IGZyb20gaXRzIHNlcnZlci5cbiAgICAgICAqXG4gICAgICAgKiBAbmFtZSBQYWhvLkNsaWVudCNkaXNjb25uZWN0XG4gICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAqIEB0aHJvd3Mge0ludmFsaWRTdGF0ZX0gaWYgdGhlIGNsaWVudCBpcyBhbHJlYWR5IGRpc2Nvbm5lY3RlZC5cbiAgICAgICAqL1xuICAgICAgdGhpcy5kaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsaWVudC5kaXNjb25uZWN0KCk7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEdldCB0aGUgY29udGVudHMgb2YgdGhlIHRyYWNlIGxvZy5cbiAgICAgICAqXG4gICAgICAgKiBAbmFtZSBQYWhvLkNsaWVudCNnZXRUcmFjZUxvZ1xuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3RbXX0gdHJhY2VidWZmZXIgY29udGFpbmluZyB0aGUgdGltZSBvcmRlcmVkIHRyYWNlIHJlY29yZHMuXG4gICAgICAgKi9cbiAgICAgIHRoaXMuZ2V0VHJhY2VMb2cgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNsaWVudC5nZXRUcmFjZUxvZygpO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBTdGFydCB0cmFjaW5nLlxuICAgICAgICpcbiAgICAgICAqIEBuYW1lIFBhaG8uQ2xpZW50I3N0YXJ0VHJhY2VcbiAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICovXG4gICAgICB0aGlzLnN0YXJ0VHJhY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xpZW50LnN0YXJ0VHJhY2UoKTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogU3RvcCB0cmFjaW5nLlxuICAgICAgICpcbiAgICAgICAqIEBuYW1lIFBhaG8uQ2xpZW50I3N0b3BUcmFjZVxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKi9cbiAgICAgIHRoaXMuc3RvcFRyYWNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsaWVudC5zdG9wVHJhY2UoKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuaXNDb25uZWN0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNsaWVudC5jb25uZWN0ZWQ7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBbiBhcHBsaWNhdGlvbiBtZXNzYWdlLCBzZW50IG9yIHJlY2VpdmVkLlxuICAgICAqIDxwPlxuICAgICAqIEFsbCBhdHRyaWJ1dGVzIG1heSBiZSBudWxsLCB3aGljaCBpbXBsaWVzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBuYW1lIFBhaG8uTWVzc2FnZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5QnVmZmVyfSBwYXlsb2FkIFRoZSBtZXNzYWdlIGRhdGEgdG8gYmUgc2VudC5cbiAgICAgKiA8cD5cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gcGF5bG9hZFN0cmluZyA8aT5yZWFkIG9ubHk8L2k+IFRoZSBwYXlsb2FkIGFzIGEgc3RyaW5nIGlmIHRoZSBwYXlsb2FkIGNvbnNpc3RzIG9mIHZhbGlkIFVURi04IGNoYXJhY3RlcnMuXG4gICAgICogQHByb3BlcnR5IHtBcnJheUJ1ZmZlcn0gcGF5bG9hZEJ5dGVzIDxpPnJlYWQgb25seTwvaT4gVGhlIHBheWxvYWQgYXMgYW4gQXJyYXlCdWZmZXIuXG4gICAgICogPHA+XG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGRlc3RpbmF0aW9uTmFtZSA8Yj5tYW5kYXRvcnk8L2I+IFRoZSBuYW1lIG9mIHRoZSBkZXN0aW5hdGlvbiB0byB3aGljaCB0aGUgbWVzc2FnZSBpcyB0byBiZSBzZW50XG4gICAgICogICAgICAgICAgICAgICAgICAgIChmb3IgbWVzc2FnZXMgYWJvdXQgdG8gYmUgc2VudCkgb3IgdGhlIG5hbWUgb2YgdGhlIGRlc3RpbmF0aW9uIGZyb20gd2hpY2ggdGhlIG1lc3NhZ2UgaGFzIGJlZW4gcmVjZWl2ZWQuXG4gICAgICogICAgICAgICAgICAgICAgICAgIChmb3IgbWVzc2FnZXMgcmVjZWl2ZWQgYnkgdGhlIG9uTWVzc2FnZSBmdW5jdGlvbikuXG4gICAgICogPHA+XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHFvcyBUaGUgUXVhbGl0eSBvZiBTZXJ2aWNlIHVzZWQgdG8gZGVsaXZlciB0aGUgbWVzc2FnZS5cbiAgICAgKiA8ZGw+XG4gICAgICogICAgIDxkdD4wIEJlc3QgZWZmb3J0IChkZWZhdWx0KS5cbiAgICAgKiAgICAgPGR0PjEgQXQgbGVhc3Qgb25jZS5cbiAgICAgKiAgICAgPGR0PjIgRXhhY3RseSBvbmNlLlxuICAgICAqIDwvZGw+XG4gICAgICogPHA+XG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSByZXRhaW5lZCBJZiB0cnVlLCB0aGUgbWVzc2FnZSBpcyB0byBiZSByZXRhaW5lZCBieSB0aGUgc2VydmVyIGFuZCBkZWxpdmVyZWRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgIHRvIGJvdGggY3VycmVudCBhbmQgZnV0dXJlIHN1YnNjcmlwdGlvbnMuXG4gICAgICogICAgICAgICAgICAgICAgICAgICBJZiBmYWxzZSB0aGUgc2VydmVyIG9ubHkgZGVsaXZlcnMgdGhlIG1lc3NhZ2UgdG8gY3VycmVudCBzdWJzY3JpYmVycywgdGhpcyBpcyB0aGUgZGVmYXVsdCBmb3IgbmV3IE1lc3NhZ2VzLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgQSByZWNlaXZlZCBtZXNzYWdlIGhhcyB0aGUgcmV0YWluZWQgYm9vbGVhbiBzZXQgdG8gdHJ1ZSBpZiB0aGUgbWVzc2FnZSB3YXMgcHVibGlzaGVkXG4gICAgICogICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSByZXRhaW5lZCBib29sZWFuIHNldCB0byB0cnVlXG4gICAgICogICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHN1YnNjcnB0aW9uIHdhcyBtYWRlIGFmdGVyIHRoZSBtZXNzYWdlIGhhcyBiZWVuIHB1Ymxpc2hlZC5cbiAgICAgKiA8cD5cbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGR1cGxpY2F0ZSA8aT5yZWFkIG9ubHk8L2k+IElmIHRydWUsIHRoaXMgbWVzc2FnZSBtaWdodCBiZSBhIGR1cGxpY2F0ZSBvZiBvbmUgd2hpY2ggaGFzIGFscmVhZHkgYmVlbiByZWNlaXZlZC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgIFRoaXMgaXMgb25seSBzZXQgb24gbWVzc2FnZXMgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyLlxuICAgICAqXG4gICAgICovXG4gICAgdmFyIE1lc3NhZ2UgPSBmdW5jdGlvbihuZXdQYXlsb2FkKSB7XG4gICAgICB2YXIgcGF5bG9hZDtcbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIG5ld1BheWxvYWQgPT09IFwic3RyaW5nXCIgfHxcbiAgICAgICAgbmV3UGF5bG9hZCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8XG4gICAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcobmV3UGF5bG9hZCkgJiYgIShuZXdQYXlsb2FkIGluc3RhbmNlb2YgRGF0YVZpZXcpKVxuICAgICAgKSB7XG4gICAgICAgIHBheWxvYWQgPSBuZXdQYXlsb2FkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZm9ybWF0KEVSUk9SLklOVkFMSURfQVJHVU1FTlQsIFtuZXdQYXlsb2FkLCBcIm5ld1BheWxvYWRcIl0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVzdGluYXRpb25OYW1lO1xuICAgICAgdmFyIHFvcyA9IDA7XG4gICAgICB2YXIgcmV0YWluZWQgPSBmYWxzZTtcbiAgICAgIHZhciBkdXBsaWNhdGUgPSBmYWxzZTtcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICBwYXlsb2FkU3RyaW5nOiB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXlsb2FkID09PSBcInN0cmluZ1wiKSByZXR1cm4gcGF5bG9hZDtcbiAgICAgICAgICAgIGVsc2UgcmV0dXJuIHBhcnNlVVRGOChwYXlsb2FkLCAwLCBwYXlsb2FkLmxlbmd0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwYXlsb2FkQnl0ZXM6IHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBheWxvYWQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihVVEY4TGVuZ3RoKHBheWxvYWQpKTtcbiAgICAgICAgICAgICAgdmFyIGJ5dGVTdHJlYW0gPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgICAgICAgICAgICBzdHJpbmdUb1VURjgocGF5bG9hZCwgYnl0ZVN0cmVhbSwgMCk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGJ5dGVTdHJlYW07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gcGF5bG9hZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlc3RpbmF0aW9uTmFtZToge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBkZXN0aW5hdGlvbk5hbWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5ld0Rlc3RpbmF0aW9uTmFtZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdEZXN0aW5hdGlvbk5hbWUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uTmFtZSA9IG5ld0Rlc3RpbmF0aW9uTmFtZTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbXG4gICAgICAgICAgICAgICAgICBuZXdEZXN0aW5hdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAgICBcIm5ld0Rlc3RpbmF0aW9uTmFtZVwiXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHFvczoge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBxb3M7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5ld1Fvcykge1xuICAgICAgICAgICAgaWYgKG5ld1FvcyA9PT0gMCB8fCBuZXdRb3MgPT09IDEgfHwgbmV3UW9zID09PSAyKSBxb3MgPSBuZXdRb3M7XG4gICAgICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQ6XCIgKyBuZXdRb3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmV0YWluZWQ6IHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcmV0YWluZWQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5ld1JldGFpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5ld1JldGFpbmVkID09PSBcImJvb2xlYW5cIikgcmV0YWluZWQgPSBuZXdSZXRhaW5lZDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGZvcm1hdChFUlJPUi5JTlZBTElEX0FSR1VNRU5ULCBbbmV3UmV0YWluZWQsIFwibmV3UmV0YWluZWRcIl0pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0b3BpYzoge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBkZXN0aW5hdGlvbk5hbWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5ld1RvcGljKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbk5hbWUgPSBuZXdUb3BpYztcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGR1cGxpY2F0ZToge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBkdXBsaWNhdGU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5ld0R1cGxpY2F0ZSkge1xuICAgICAgICAgICAgZHVwbGljYXRlID0gbmV3RHVwbGljYXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIE1vZHVsZSBjb250ZW50cy5cbiAgICByZXR1cm4ge1xuICAgICAgQ2xpZW50OiBDbGllbnQsXG4gICAgICBNZXNzYWdlOiBNZXNzYWdlXG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgfSkoXG4gICAgdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgPyBnbG9iYWxcbiAgICAgIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgID8gc2VsZlxuICAgICAgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICA/IHdpbmRvd1xuICAgICAgOiB7fVxuICApO1xuICByZXR1cm4gUGFob01RVFQ7XG59KTtcbiIsIi8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiKi9cbmltcG9ydCBcIkBhbXpuL2FtYXpvbi1jb25uZWN0LXdlYnNvY2tldC1tYW5hZ2VyXCI7XG5pbXBvcnQgeyBDaGF0U2Vzc2lvbk9iamVjdCB9IGZyb20gXCIuL2NvcmUvY2hhdFNlc3Npb25cIjtcblxuZ2xvYmFsLmNvbm5lY3QgPSBnbG9iYWwuY29ubmVjdCB8fCB7fTtcbmNvbm5lY3QuQ2hhdFNlc3Npb24gPSBDaGF0U2Vzc2lvbk9iamVjdDtcblxuZXhwb3J0IGNvbnN0IENoYXRTZXNzaW9uID0gQ2hhdFNlc3Npb25PYmplY3Q7XG4iLCIhZnVuY3Rpb24oZSl7dmFyIG49e307ZnVuY3Rpb24gdChyKXtpZihuW3JdKXJldHVybiBuW3JdLmV4cG9ydHM7dmFyIG89bltyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsdCksby5sPSEwLG8uZXhwb3J0c310Lm09ZSx0LmM9bix0LmQ9ZnVuY3Rpb24oZSxuLHIpe3QubyhlLG4pfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLHtlbnVtZXJhYmxlOiEwLGdldDpyfSl9LHQucj1mdW5jdGlvbihlKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSx0LnQ9ZnVuY3Rpb24oZSxuKXtpZigxJm4mJihlPXQoZSkpLDgmbilyZXR1cm4gZTtpZig0Jm4mJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHI9T2JqZWN0LmNyZWF0ZShudWxsKTtpZih0LnIociksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImbiYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciBvIGluIGUpdC5kKHIsbyxmdW5jdGlvbihuKXtyZXR1cm4gZVtuXX0uYmluZChudWxsLG8pKTtyZXR1cm4gcn0sdC5uPWZ1bmN0aW9uKGUpe3ZhciBuPWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiB0LmQobixcImFcIixuKSxufSx0Lm89ZnVuY3Rpb24oZSxuKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbil9LHQucD1cIlwiLHQodC5zPTIpfShbZnVuY3Rpb24oZSxuLHQpe1widXNlIHN0cmljdFwiO3ZhciByPXQoMSk7ZnVuY3Rpb24gbyhlKXtyZXR1cm4obz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSkoZSl9dmFyIGk9e2Fzc2VydFRydWU6ZnVuY3Rpb24oZSxuKXtpZighZSl0aHJvdyBuZXcgRXJyb3Iobil9LGFzc2VydE5vdE51bGw6ZnVuY3Rpb24oZSxuKXtyZXR1cm4gaS5hc3NlcnRUcnVlKG51bGwhPT1lJiZ2b2lkIDAhPT1vKGUpLE9iamVjdChyLnNwcmludGYpKFwiJXMgbXVzdCBiZSBwcm92aWRlZFwiLG58fFwiQSB2YWx1ZVwiKSksZX0saXNTdHJpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV9LGFzc2VydElzTm9uRW1wdHlTdHJpbmc6ZnVuY3Rpb24oZSxuKXtpZighZXx8XCJzdHJpbmdcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKG4rXCIgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyFcIil9LGFzc2VydElzTGlzdDpmdW5jdGlvbihlLG4pe2lmKCFBcnJheS5pc0FycmF5KGUpKXRocm93IG5ldyBFcnJvcihuK1wiIGlzIG5vdCBhbiBhcnJheVwiKX0sYXNzZXJ0SXNFbnVtOmZ1bmN0aW9uKGUsbix0KXt2YXIgcjtmb3Iocj0wO3I8bi5sZW5ndGg7cisrKWlmKG5bcl09PT1lKXJldHVybjt0aHJvdyBuZXcgRXJyb3IodCtcIiBwYXNzZWQgaXMgbm90IHZhbGlkLiBBbGxvd2VkIHZhbHVlcyBhcmU6IFwiK24pfSxtYWtlRW51bTpmdW5jdGlvbihlKXt2YXIgbj17fTtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PWUucmVwbGFjZSgvXFwuPyhbYS16XSspXz8vZyxmdW5jdGlvbihlLG4pe3JldHVybiBuLnRvVXBwZXJDYXNlKCkrXCJfXCJ9KS5yZXBsYWNlKC9fJC8sXCJcIik7blt0XT1lfSksbn0saXNGdW5jdGlvbjpmdW5jdGlvbihlKXtyZXR1cm4hIShlJiZlLmNvbnN0cnVjdG9yJiZlLmNhbGwmJmUuYXBwbHkpfSxpc09iamVjdDpmdW5jdGlvbihlKXtyZXR1cm4hKFwib2JqZWN0XCIhPT1vKGUpfHxudWxsPT09ZSl9fTtpLmlzU3RyaW5nPWZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlfSxpLmlzTnVtYmVyPWZ1bmN0aW9uKGUpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBlfTt2YXIgYT1uZXcgUmVnRXhwKFwiXih3c3M6Ly8pXFxcXHcqXCIpO2kudmFsaWRXU1VybD1mdW5jdGlvbihlKXtyZXR1cm4gYS50ZXN0KGUpfSxpLmFzc2VydElzT2JqZWN0PWZ1bmN0aW9uKGUsbil7aWYoIWkuaXNPYmplY3QoZSkpdGhyb3cgbmV3IEVycm9yKG4rXCIgaXMgbm90IGFuIG9iamVjdCFcIil9O3ZhciBjPWkscz1cIk5VTExcIix1PVwiQ0xJRU5UX0xPR0dFUlwiLGw9XCJERUJVR1wiLGY9XCJhd3Mvc3Vic2NyaWJlXCIscD1cImF3cy91bnN1YnNjcmliZVwiLGc9XCJhd3MvaGVhcnRiZWF0XCI7ZnVuY3Rpb24gZChlKXtyZXR1cm4oZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSkoZSl9ZnVuY3Rpb24gYihlLG4pe3JldHVybiFufHxcIm9iamVjdFwiIT09ZChuKSYmXCJmdW5jdGlvblwiIT10eXBlb2Ygbj9mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gZX0oZSk6bn1mdW5jdGlvbiB5KGUpe3JldHVybih5PU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSl9KShlKX1mdW5jdGlvbiBtKGUsbil7cmV0dXJuKG09T2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbihlLG4pe3JldHVybiBlLl9fcHJvdG9fXz1uLGV9KShlLG4pfWZ1bmN0aW9uIHYoZSxuKXtpZighKGUgaW5zdGFuY2VvZiBuKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIGgoZSxuKXtmb3IodmFyIHQ9MDt0PG4ubGVuZ3RoO3QrKyl7dmFyIHI9blt0XTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fWZ1bmN0aW9uIFMoZSxuLHQpe3JldHVybiBuJiZoKGUucHJvdG90eXBlLG4pLHQmJmgoZSx0KSxlfXZhciB3PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3YodGhpcyxlKX1yZXR1cm4gUyhlLFt7a2V5OlwiZGVidWdcIix2YWx1ZTpmdW5jdGlvbihlKXt9fSx7a2V5OlwiaW5mb1wiLHZhbHVlOmZ1bmN0aW9uKGUpe319LHtrZXk6XCJ3YXJuXCIsdmFsdWU6ZnVuY3Rpb24oZSl7fX0se2tleTpcImVycm9yXCIsdmFsdWU6ZnVuY3Rpb24oZSl7fX1dKSxlfSgpLGs9e0RFQlVHOjEwLElORk86MjAsV0FSTjozMCxFUlJPUjo0MH0sXz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt2KHRoaXMsZSksdGhpcy51cGRhdGVMb2dnZXJDb25maWcoKSx0aGlzLmNvbnNvbGVMb2dnZXJXcmFwcGVyPU8oKX1yZXR1cm4gUyhlLFt7a2V5Olwid3JpdGVUb0NsaWVudExvZ2dlclwiLHZhbHVlOmZ1bmN0aW9uKGUsbil7aWYodGhpcy5oYXNDbGllbnRMb2dnZXIoKSlzd2l0Y2goZSl7Y2FzZSBrLkRFQlVHOnJldHVybiB0aGlzLl9jbGllbnRMb2dnZXIuZGVidWcobik7Y2FzZSBrLklORk86cmV0dXJuIHRoaXMuX2NsaWVudExvZ2dlci5pbmZvKG4pO2Nhc2Ugay5XQVJOOnJldHVybiB0aGlzLl9jbGllbnRMb2dnZXIud2FybihuKTtjYXNlIGsuRVJST1I6cmV0dXJuIHRoaXMuX2NsaWVudExvZ2dlci5lcnJvcihuKX19fSx7a2V5OlwiaXNMZXZlbEVuYWJsZWRcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gZT49dGhpcy5fbGV2ZWx9fSx7a2V5OlwiaGFzQ2xpZW50TG9nZ2VyXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PXRoaXMuX2NsaWVudExvZ2dlcn19LHtrZXk6XCJnZXRMb2dnZXJcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgbj1lLnByZWZpeHx8XCJcIjtyZXR1cm4gdGhpcy5fbG9nc0Rlc3RpbmF0aW9uPT09bD90aGlzLmNvbnNvbGVMb2dnZXJXcmFwcGVyOm5ldyBDKG4pfX0se2tleTpcInVwZGF0ZUxvZ2dlckNvbmZpZ1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciBuPWV8fHt9O3RoaXMuX2xldmVsPW4ubGV2ZWx8fGsuSU5GTyx0aGlzLl9jbGllbnRMb2dnZXI9bi5sb2dnZXJ8fG51bGwsdGhpcy5fbG9nc0Rlc3RpbmF0aW9uPXMsbi5kZWJ1ZyYmKHRoaXMuX2xvZ3NEZXN0aW5hdGlvbj1sKSxuLmxvZ2dlciYmKHRoaXMuX2xvZ3NEZXN0aW5hdGlvbj11KX19XSksZX0oKSxUPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3YodGhpcyxlKX1yZXR1cm4gUyhlLFt7a2V5OlwiZGVidWdcIix2YWx1ZTpmdW5jdGlvbigpe319LHtrZXk6XCJpbmZvXCIsdmFsdWU6ZnVuY3Rpb24oKXt9fSx7a2V5Olwid2FyblwiLHZhbHVlOmZ1bmN0aW9uKCl7fX0se2tleTpcImVycm9yXCIsdmFsdWU6ZnVuY3Rpb24oKXt9fV0pLGV9KCksQz1mdW5jdGlvbihlKXtmdW5jdGlvbiBuKGUpe3ZhciB0O3JldHVybiB2KHRoaXMsbiksKHQ9Yih0aGlzLHkobikuY2FsbCh0aGlzKSkpLnByZWZpeD1lfHxcIlwiLHR9cmV0dXJuIGZ1bmN0aW9uKGUsbil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgbiYmbnVsbCE9PW4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobiYmbi5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxuJiZtKGUsbil9KG4sVCksUyhuLFt7a2V5OlwiZGVidWdcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KGUpLHQ9MDt0PGU7dCsrKW5bdF09YXJndW1lbnRzW3RdO3RoaXMuX2xvZyhrLkRFQlVHLG4pfX0se2tleTpcImluZm9cIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KGUpLHQ9MDt0PGU7dCsrKW5bdF09YXJndW1lbnRzW3RdO3RoaXMuX2xvZyhrLklORk8sbil9fSx7a2V5Olwid2FyblwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkoZSksdD0wO3Q8ZTt0Kyspblt0XT1hcmd1bWVudHNbdF07dGhpcy5fbG9nKGsuV0FSTixuKX19LHtrZXk6XCJlcnJvclwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkoZSksdD0wO3Q8ZTt0Kyspblt0XT1hcmd1bWVudHNbdF07dGhpcy5fbG9nKGsuRVJST1Isbil9fSx7a2V5OlwiX3Nob3VsZExvZ1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiB4Lmhhc0NsaWVudExvZ2dlcigpJiZ4LmlzTGV2ZWxFbmFibGVkKGUpfX0se2tleTpcIl93cml0ZVRvQ2xpZW50TG9nZ2VyXCIsdmFsdWU6ZnVuY3Rpb24oZSxuKXt4LndyaXRlVG9DbGllbnRMb2dnZXIoZSxuKX19LHtrZXk6XCJfbG9nXCIsdmFsdWU6ZnVuY3Rpb24oZSxuKXtpZih0aGlzLl9zaG91bGRMb2coZSkpe3ZhciB0PXRoaXMuX2NvbnZlcnRUb1NpbmdsZVN0YXRlbWVudChuKTt0aGlzLl93cml0ZVRvQ2xpZW50TG9nZ2VyKGUsdCl9fX0se2tleTpcIl9jb252ZXJ0VG9TaW5nbGVTdGF0ZW1lbnRcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgbj1cIlwiO3RoaXMucHJlZml4JiYobis9dGhpcy5wcmVmaXgrXCIgXCIpO2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgcj1lW3RdO24rPXRoaXMuX2NvbnZlcnRUb1N0cmluZyhyKStcIiBcIn1yZXR1cm4gbn19LHtrZXk6XCJfY29udmVydFRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dHJ5e2lmKCFlKXJldHVyblwiXCI7aWYoYy5pc1N0cmluZyhlKSlyZXR1cm4gZTtpZihjLmlzT2JqZWN0KGUpJiZjLmlzRnVuY3Rpb24oZS50b1N0cmluZykpe3ZhciBuPWUudG9TdHJpbmcoKTtpZihcIltvYmplY3QgT2JqZWN0XVwiIT09bilyZXR1cm4gbn1yZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSl9Y2F0Y2gobil7cmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB3aGlsZSBjb252ZXJ0aW5nIGFyZ3VtZW50IHRvIHN0cmluZ1wiLGUsbiksXCJcIn19fV0pLG59KCksTz1mdW5jdGlvbigpe3ZhciBlPW5ldyBUO3JldHVybiBlLmRlYnVnPWNvbnNvbGUuZGVidWcsZS5pbmZvPWNvbnNvbGUuaW5mbyxlLndhcm49Y29uc29sZS53YXJuLGUuZXJyb3I9Y29uc29sZS5lcnJvcixlfSx4PW5ldyBfO3QuZChuLFwiYVwiLGZ1bmN0aW9uKCl7cmV0dXJuIEx9KTt2YXIgRT1mdW5jdGlvbigpe3ZhciBlPXguZ2V0TG9nZ2VyKHt9KSxuPW51bGwsdD17cmVjb25uZWN0V2ViU29ja2V0OiExLHdlYnNvY2tldEluaXRGYWlsZWQ6ITEsbGluZWFyQ29ubmVjdEF0dGVtcHQ6MCxleHBvbmVudGlhbENvbm5lY3RBdHRlbXB0OjAsZXhwb25lbnRpYWxCYWNrT2ZmVGltZToxLGV4cG9uZW50aWFsVGltZW91dEhhbmRsZTpudWxsLGxpZmVUaW1lVGltZW91dEhhbmRsZTpudWxsfSxyPXtwZW5kaW5nUmVzcG9uc2U6ITEsaW50ZXJ2YWxIYW5kbGU6bnVsbH0sbz17aW5pdEZhaWx1cmU6bmV3IFNldCxnZXRXZWJTb2NrZXRUcmFuc3BvcnQ6bnVsbCxzdWJzY3JpcHRpb25VcGRhdGU6bmV3IFNldCxzdWJzY3JpcHRpb25GYWlsdXJlOm5ldyBTZXQsdG9waWM6bmV3IE1hcCxhbGxNZXNzYWdlOm5ldyBTZXQsY29ubmVjdGlvbkdhaW46bmV3IFNldCxjb25uZWN0aW9uTG9zdDpuZXcgU2V0fSxpPXtjb25uQ29uZmlnOm51bGwscHJvbWlzZUhhbmRsZTpudWxsLHByb21pc2VDb21wbGV0ZWQ6ITF9LGE9e3N1YnNjcmliZWQ6bmV3IFNldCxwZW5kaW5nOm5ldyBTZXR9LHM9bmV3IFNldChbZixwLGddKSx1PW5hdmlnYXRvci5vbkxpbmUsbD1zZXRJbnRlcnZhbChmdW5jdGlvbigpe3UhPT1uYXZpZ2F0b3Iub25MaW5lJiYodT1uYXZpZ2F0b3Iub25MaW5lKSYmKCFufHxuLnJlYWR5U3RhdGU+MSkmJihlLmluZm8oXCJOZXR3b3JrIG9ubGluZSwgQ29ubmVjdGluZyB0byB3ZWJzb2NrZXRcIiksTygpKX0sMjUwKSxkPWZ1bmN0aW9uKGUsbil7ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2Uobil9KX0sYj1mdW5jdGlvbigpe2lmKHIucGVuZGluZ1Jlc3BvbnNlKXJldHVybiBlLndhcm4oXCJIZWFydGJlYXQgcmVzcG9uc2Ugbm90IHJlY2VpdmVkXCIpLGNsZWFySW50ZXJ2YWwoci5pbnRlcnZhbEhhbmRsZSksci5wZW5kaW5nUmVzcG9uc2U9ITEsdm9pZCBrKCk7ZS5kZWJ1ZyhcIlNlbmRpbmcgaGVhcnRiZWF0XCIpLG4uc2VuZChUKGcpKSxyLnBlbmRpbmdSZXNwb25zZT0hMH0seT1mdW5jdGlvbigpe3QubGluZWFyQ29ubmVjdEF0dGVtcHQ9MCx0LmV4cG9uZW50aWFsQ29ubmVjdEF0dGVtcHQ9MCx0LmV4cG9uZW50aWFsQmFja09mZlRpbWU9MSxyLnBlbmRpbmdSZXNwb25zZT0hMSx0LnJlY29ubmVjdFdlYlNvY2tldD0hMSxjbGVhclRpbWVvdXQodC5saWZlVGltZVRpbWVvdXRIYW5kbGUpLGNsZWFySW50ZXJ2YWwoci5pbnRlcnZhbEhhbmRsZSksY2xlYXJUaW1lb3V0KHQuZXhwb25lbnRpYWxUaW1lb3V0SGFuZGxlKX0sbT1mdW5jdGlvbigpe3RyeXtpZihlLmluZm8oXCJXZWJTb2NrZXQgY29ubmVjdGlvbiBlc3RhYmxpc2hlZCFcIiksZChvLmNvbm5lY3Rpb25HYWluKSx5KCksYS5zdWJzY3JpYmVkLnNpemU+MHx8YS5wZW5kaW5nLnNpemU+MCl7dmFyIGM9QXJyYXkuZnJvbShhLnN1YnNjcmliZWQudmFsdWVzKCkpO2M9Yy5jb25jYXQoQXJyYXkuZnJvbShhLnBlbmRpbmcudmFsdWVzKCkpKSxhLnN1YnNjcmliZWQuY2xlYXIoKSxuLnNlbmQoVChmLHt0b3BpY3M6Y30pKX1iKCksci5pbnRlcnZhbEhhbmRsZT1zZXRJbnRlcnZhbChiLDFlNCksdC5saWZlVGltZVRpbWVvdXRIYW5kbGU9c2V0VGltZW91dChmdW5jdGlvbigpe2UuZGVidWcoXCJTdGFydGluZyBzY2hlZHVsZWQgV2ViU29ja2V0IG1hbmFnZXIgcmVjb25uZWN0XCIpLGsoKX0sMWUzKmkuY29ubkNvbmZpZy53ZWJTb2NrZXRUcmFuc3BvcnQudHJhbnNwb3J0TGlmZVRpbWVJblNlY29uZHMpfWNhdGNoKG4pe2UuZXJyb3IoXCJFcnJvciBhZnRlciBlc3RhYmxpc2hpbmcgd2ViIHNvY2tldCBjb25uZWN0aW9uLCBlcnJvcjogXCIsbil9fSx2PWZ1bmN0aW9uKG4pe3QubGluZWFyQ29ubmVjdEF0dGVtcHQ8PTEmJmQoby5jb25uZWN0aW9uTG9zdCksZS5pbmZvKFwiU29ja2V0IGNvbm5lY3Rpb24gaXMgY2xvc2VkLiBldmVudDogXCIsbiksdC5yZWNvbm5lY3RXZWJTb2NrZXQmJkUoKX0saD1mdW5jdGlvbihuKXtlLmVycm9yKFwiV2ViU29ja2V0TWFuYWdlciBFcnJvciwgZXJyb3JfZXZlbnQ6IFwiLG4pLGsoKX0sUz1mdW5jdGlvbihuKXtlLmRlYnVnKFwiTWVzc2FnZSByZWNlaXZlZCBmcm9tIHdlYlNvY2tldCBzZXJ2ZXJcIixuLmRhdGEpO3ZhciB0PUpTT04ucGFyc2Uobi5kYXRhKTtzd2l0Y2godC50b3BpYyl7Y2FzZSBmOlwic3VjY2Vzc1wiPT09dC5jb250ZW50LnN0YXR1cz8odC5jb250ZW50LnRvcGljcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2Euc3Vic2NyaWJlZC5hZGQoZSksYS5wZW5kaW5nLmRlbGV0ZShlKX0pLGQoby5zdWJzY3JpcHRpb25VcGRhdGUsdCkpOmQoby5zdWJzY3JpcHRpb25GYWlsdXJlLHQpO2JyZWFrO2Nhc2UgZzplLmRlYnVnKFwiSGVhcnRiZWF0IHJlc3BvbnNlIHJlY2VpdmVkXCIpLHIucGVuZGluZ1Jlc3BvbnNlPSExO2JyZWFrO2RlZmF1bHQ6aWYodC50b3BpYyl7aWYoMD09PW8uYWxsTWVzc2FnZS5zaXplJiYwPT09by50b3BpYy5zaXplKXJldHVybiB2b2lkIGUud2FybihcIk5vIHJlZ2lzdGVyZWQgY2FsbGJhY2sgbGlzdGVuZXIgZm9yIFRvcGljOiBcIix0KTtkKG8uYWxsTWVzc2FnZSx0KSxvLnRvcGljLmhhcyh0LnRvcGljKSYmZChvLnRvcGljLmdldCh0LnRvcGljKSx0KX1lbHNlIHQubWVzc2FnZT9lLndhcm4oXCJXZWJTb2NrZXRNYW5hZ2VyIE1lc3NhZ2UgRXJyb3IsIGVycm9yOiBcIix0KTplLndhcm4oXCJJbnZhbGlkIGluY29taW5nIG1lc3NhZ2UsIGVycm9yOiBcIix0KX19LHc9ZnVuY3Rpb24oZSl7cmV0dXJuISghbnx8bi5yZWFkeVN0YXRlPT09V2ViU29ja2V0LkNMT1NFRCkmJihuLmNsb3NlKDFlMyxlKSwhMCl9LGs9ZnVuY3Rpb24oKXt1PyhjbGVhclRpbWVvdXQodC5saWZlVGltZVRpbWVvdXRIYW5kbGUpLGNsZWFySW50ZXJ2YWwoci5pbnRlcnZhbEhhbmRsZSksdC5saW5lYXJDb25uZWN0QXR0ZW1wdDwzPyh0LmxpbmVhckNvbm5lY3RBdHRlbXB0KyssZS5kZWJ1ZyhcIlN0YXJ0aW5nIENvbnNlY3V0aXZlIFdlYlNvY2tldCByZWNvbm5lY3QsIEF0dGVtcHQgOiBcIit0LmxpbmVhckNvbm5lY3RBdHRlbXB0KSx0LnJlY29ubmVjdFdlYlNvY2tldD0hMCxPKCkpOnQuZXhwb25lbnRpYWxDb25uZWN0QXR0ZW1wdDw1Pyh0LmV4cG9uZW50aWFsQ29ubmVjdEF0dGVtcHQrKyx0LmV4cG9uZW50aWFsQmFja09mZlRpbWUqPTIsZS5kZWJ1ZyhcIlN0YXJ0aW5nIEV4cG9uZW50aWFsIFdlYlNvY2tldCByZWNvbm5lY3QsIEF0dGVtcHQgOiBcIit0LmV4cG9uZW50aWFsQ29ubmVjdEF0dGVtcHQrXCIgd2l0aCBkZWxheSBcIit0LmV4cG9uZW50aWFsQmFja09mZlRpbWUrXCIgc2VjLlwiKSxpLnByb21pc2VDb21wbGV0ZWQ9ITEsaS5jb25uQ29uZmlnPW51bGwsdC5leHBvbmVudGlhbFRpbWVvdXRIYW5kbGU9c2V0VGltZW91dChmdW5jdGlvbigpe3QucmVjb25uZWN0V2ViU29ja2V0PSEwLE8oKX0sMWUzKnQuZXhwb25lbnRpYWxCYWNrT2ZmVGltZSkpOmkucHJvbWlzZUNvbXBsZXRlZCYmKGUuZXJyb3IoXCJDb3VsZCBub3QgY29ubmVjdCB0byBXZWJTb2NrZXQgYWZ0ZXIgc2V2ZXJhbCBhdHRlbXB0c1wiKSxfKCkpKTp3KFwiTmV0d29yayBPZmZsaW5lLCBDbG9zaW5nIFdlYlNvY2tldCBNYW5hZ2VyXCIpfSxfPWZ1bmN0aW9uKCl7eSgpLHcoXCJUZXJtaW5hdGluZyBXZWJTb2NrZXQgTWFuYWdlclwiKSxlLmVycm9yKFwiV2ViU29ja2V0IEluaXRpYWxpemF0aW9uIGZhaWxlZFwiKSx0LndlYnNvY2tldEluaXRGYWlsZWQ9ITAsY2xlYXJJbnRlcnZhbChsKSxkKG8uaW5pdEZhaWx1cmUpfSxUPWZ1bmN0aW9uKGUsbil7cmV0dXJuIEpTT04uc3RyaW5naWZ5KHt0b3BpYzplLGNvbnRlbnQ6bn0pfSxDPWZ1bmN0aW9uKG4pe3JldHVybiEhKGMuaXNPYmplY3QobikmJmMuaXNPYmplY3Qobi53ZWJTb2NrZXRUcmFuc3BvcnQpJiZjLmlzU3RyaW5nKG4ud2ViU29ja2V0VHJhbnNwb3J0LnVybCkmJmMudmFsaWRXU1VybChuLndlYlNvY2tldFRyYW5zcG9ydC51cmwpJiZjLmlzTnVtYmVyKG4ud2ViU29ja2V0VHJhbnNwb3J0LnRyYW5zcG9ydExpZmVUaW1lSW5TZWNvbmRzKSYmbi53ZWJTb2NrZXRUcmFuc3BvcnQudHJhbnNwb3J0TGlmZVRpbWVJblNlY29uZHM+PTM2MDApfHwoZS5lcnJvcihcIkludmFsaWQgV2ViU29ja2V0IENvbm5lY3Rpb24gQ29uZmlndXJhdGlvblwiLG4pLCExKX0sTz1mdW5jdGlvbigpe3Qud2Vic29ja2V0SW5pdEZhaWxlZHx8KGkuY29ubkNvbmZpZz1udWxsLGkucHJvbWlzZUNvbXBsZXRlZD0hMSxpLnByb21pc2VIYW5kbGU9by5nZXRXZWJTb2NrZXRUcmFuc3BvcnQoKSxpLnByb21pc2VIYW5kbGUudGhlbihmdW5jdGlvbihuKXtpLnByb21pc2VDb21wbGV0ZWQ9ITAsZS5kZWJ1ZyhcIlN1Y2Nlc3NmdWxseSBmZXRjaGVkIHdlYlNvY2tldCBjb25uZWN0aW9uIGNvbmZpZ3VyYXRpb25cIiksQyhuKT8oaS5jb25uQ29uZmlnPW4sdSYmKHcoXCJSZXN0YXJ0aW5nIFdlYlNvY2tldCBNYW5hZ2VyXCIpfHxFKCkpKTpfKCl9LGZ1bmN0aW9uKG4pe2kucHJvbWlzZUNvbXBsZXRlZD0hMCxlLmVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHdlYlNvY2tldCBjb25uZWN0aW9uIGNvbmZpZ3VyYXRpb25cIixuKSxrKCl9KSl9LEU9ZnVuY3Rpb24oKXtpZighdC53ZWJzb2NrZXRJbml0RmFpbGVkKXtlLmRlYnVnKFwiSW5pdGlhbGl6aW5nIFdlYnNvY2tldCBNYW5hZ2VyXCIpO3RyeXtDKGkuY29ubkNvbmZpZyk/KChuPW5ldyBXZWJTb2NrZXQoaS5jb25uQ29uZmlnLndlYlNvY2tldFRyYW5zcG9ydC51cmwpKS5hZGRFdmVudExpc3RlbmVyKFwib3BlblwiLG0pLG4uYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixTKSxuLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLGgpLG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsb3NlXCIsdikpOmkucHJvbWlzZUNvbXBsZXRlZCYmXygpfWNhdGNoKG4pe2UuZXJyb3IoXCJFcnJvciBJbml0aWFsaXppbmcgd2ViLXNvY2tldC1tYW5hZ2VyXCIsbiksXygpfX19O3RoaXMuaW5pdD1mdW5jdGlvbihuKXtjLmFzc2VydFRydWUoYy5pc0Z1bmN0aW9uKG4pLFwidHJhbnNwb3J0SGFuZGxlIG11c3QgYmUgYSBmdW5jdGlvblwiKSxudWxsPT09by5nZXRXZWJTb2NrZXRUcmFuc3BvcnQ/KG8uZ2V0V2ViU29ja2V0VHJhbnNwb3J0PW4sTygpKTplLndhcm4oXCJXZWIgU29ja2V0IE1hbmFnZXIgd2FzIGFscmVhZHkgaW5pdGlhbGl6ZWRcIil9LHRoaXMub25Jbml0RmFpbHVyZT1mdW5jdGlvbihlKXtyZXR1cm4gYy5hc3NlcnRUcnVlKGMuaXNGdW5jdGlvbihlKSxcImNiIG11c3QgYmUgYSBmdW5jdGlvblwiKSxvLmluaXRGYWlsdXJlLmFkZChlKSx0LndlYnNvY2tldEluaXRGYWlsZWQmJmUoKSxmdW5jdGlvbigpe3JldHVybiBvLmluaXRGYWlsdXJlLmRlbGV0ZShlKX19LHRoaXMub25Db25uZWN0aW9uR2Fpbj1mdW5jdGlvbihlKXtyZXR1cm4gYy5hc3NlcnRUcnVlKGMuaXNGdW5jdGlvbihlKSxcImNiIG11c3QgYmUgYSBmdW5jdGlvblwiKSxvLmNvbm5lY3Rpb25HYWluLmFkZChlKSxuJiZuLnJlYWR5U3RhdGU9PT1XZWJTb2NrZXQuT1BFTiYmZSgpLGZ1bmN0aW9uKCl7cmV0dXJuIG8uY29ubmVjdGlvbkdhaW4uZGVsZXRlKGUpfX0sdGhpcy5vbkNvbm5lY3Rpb25Mb3N0PWZ1bmN0aW9uKGUpe3JldHVybiBjLmFzc2VydFRydWUoYy5pc0Z1bmN0aW9uKGUpLFwiY2IgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpLG8uY29ubmVjdGlvbkxvc3QuYWRkKGUpLG4mJm4ucmVhZHlTdGF0ZT09PVdlYlNvY2tldC5DTE9TRUQmJmUoKSxmdW5jdGlvbigpe3JldHVybiBvLmNvbm5lY3Rpb25Mb3N0LmRlbGV0ZShlKX19LHRoaXMub25TdWJzY3JpcHRpb25VcGRhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGMuYXNzZXJ0VHJ1ZShjLmlzRnVuY3Rpb24oZSksXCJjYiBtdXN0IGJlIGEgZnVuY3Rpb25cIiksby5zdWJzY3JpcHRpb25VcGRhdGUuYWRkKGUpLGZ1bmN0aW9uKCl7cmV0dXJuIG8uc3Vic2NyaXB0aW9uVXBkYXRlLmRlbGV0ZShlKX19LHRoaXMub25TdWJzY3JpcHRpb25GYWlsdXJlPWZ1bmN0aW9uKGUpe3JldHVybiBjLmFzc2VydFRydWUoYy5pc0Z1bmN0aW9uKGUpLFwiY2IgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpLG8uc3Vic2NyaXB0aW9uRmFpbHVyZS5hZGQoZSksZnVuY3Rpb24oKXtyZXR1cm4gby5zdWJzY3JpcHRpb25GYWlsdXJlLmRlbGV0ZShlKX19LHRoaXMub25NZXNzYWdlPWZ1bmN0aW9uKGUsbil7cmV0dXJuIGMuYXNzZXJ0Tm90TnVsbChlLFwidG9waWNOYW1lXCIpLGMuYXNzZXJ0VHJ1ZShjLmlzRnVuY3Rpb24obiksXCJjYiBtdXN0IGJlIGEgZnVuY3Rpb25cIiksby50b3BpYy5oYXMoZSk/by50b3BpYy5nZXQoZSkuYWRkKG4pOm8udG9waWMuc2V0KGUsbmV3IFNldChbbl0pKSxmdW5jdGlvbigpe3JldHVybiBvLnRvcGljLmdldChlKS5kZWxldGUobil9fSx0aGlzLm9uQWxsTWVzc2FnZT1mdW5jdGlvbihlKXtyZXR1cm4gYy5hc3NlcnRUcnVlKGMuaXNGdW5jdGlvbihlKSxcImNiIG11c3QgYmUgYSBmdW5jdGlvblwiKSxvLmFsbE1lc3NhZ2UuYWRkKGUpLGZ1bmN0aW9uKCl7cmV0dXJuIG8uYWxsTWVzc2FnZS5kZWxldGUoZSl9fSx0aGlzLnN1YnNjcmliZVRvcGljcz1mdW5jdGlvbihlKXtjLmFzc2VydE5vdE51bGwoZSxcInRvcGljc1wiKSxjLmFzc2VydElzTGlzdChlKSxlLmZvckVhY2goZnVuY3Rpb24oZSl7YS5wZW5kaW5nLmFkZChlKX0pLG4mJm4ucmVhZHlTdGF0ZT09PVdlYlNvY2tldC5PUEVOJiZuLnNlbmQoVChmLHt0b3BpY3M6ZX0pKX0sdGhpcy5zZW5kTWVzc2FnZT1mdW5jdGlvbih0KXtpZihjLmFzc2VydElzT2JqZWN0KHQsXCJwYXlsb2FkXCIpLHZvaWQgMD09PXQudG9waWN8fHMuaGFzKHQudG9waWMpKWUud2FybihcIkNhbm5vdCBzZW5kIG1lc3NhZ2UsIEludmFsaWQgdG9waWNcIix0KTtlbHNle3RyeXt0PUpTT04uc3RyaW5naWZ5KHQpfWNhdGNoKG4pe3JldHVybiB2b2lkIGUud2FybihcIkVycm9yIHN0cmluZ2lmeSBtZXNzYWdlXCIsdCl9biYmbi5yZWFkeVN0YXRlPT09V2ViU29ja2V0Lk9QRU4/KGUuZGVidWcoXCJXZWJTb2NrZXRNYW5hZ2VyIHNlbmRpbmcgbWVzc2FnZVwiLHQpLG4uc2VuZCh0KSk6ZS53YXJuKFwiQ2Fubm90IHNlbmQgbWVzc2FnZSwgd2ViIHNvY2tldCBjb25uZWN0aW9uIGlzIG5vdCBvcGVuXCIpfX0sdGhpcy5jbG9zZVdlYlNvY2tldD1mdW5jdGlvbigpe3koKSxjbGVhckludGVydmFsKGwpLHcoXCJVc2VyIHJlcXVlc3QgdG8gY2xvc2UgV2ViU29ja2V0XCIpfX0sTD17Y3JlYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBFfSxzZXRHbG9iYWxDb25maWc6ZnVuY3Rpb24oZSl7dmFyIG49ZS5sb2dnZXJDb25maWc7eC51cGRhdGVMb2dnZXJDb25maWcobil9LExvZ0xldmVsOmssTG9nZ2VyOnd9fSxmdW5jdGlvbihlLG4sdCl7dmFyIHI7IWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89e25vdF9zdHJpbmc6L1tec10vLG5vdF9ib29sOi9bXnRdLyxub3RfdHlwZTovW15UXS8sbm90X3ByaW1pdGl2ZTovW152XS8sbnVtYmVyOi9bZGllZmddLyxudW1lcmljX2FyZzovW2JjZGllZmd1eFhdLyxqc29uOi9bal0vLG5vdF9qc29uOi9bXmpdLyx0ZXh0Oi9eW15cXHgyNV0rLyxtb2R1bG86L15cXHgyNXsyfS8scGxhY2Vob2xkZXI6L15cXHgyNSg/OihbMS05XVxcZCopXFwkfFxcKChbXildKylcXCkpPyhcXCspPygwfCdbXiRdKT8oLSk/KFxcZCspPyg/OlxcLihcXGQrKSk/KFtiLWdpam9zdFR1dnhYXSkvLGtleTovXihbYS16X11bYS16X1xcZF0qKS9pLGtleV9hY2Nlc3M6L15cXC4oW2Etel9dW2Etel9cXGRdKikvaSxpbmRleF9hY2Nlc3M6L15cXFsoXFxkKylcXF0vLHNpZ246L15bKy1dL307ZnVuY3Rpb24gaShlKXtyZXR1cm4gZnVuY3Rpb24oZSxuKXt2YXIgdCxyLGEsYyxzLHUsbCxmLHAsZz0xLGQ9ZS5sZW5ndGgsYj1cIlwiO2ZvcihyPTA7cjxkO3IrKylpZihcInN0cmluZ1wiPT10eXBlb2YgZVtyXSliKz1lW3JdO2Vsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIGVbcl0pe2lmKChjPWVbcl0pLmtleXMpZm9yKHQ9bltnXSxhPTA7YTxjLmtleXMubGVuZ3RoO2ErKyl7aWYobnVsbD09dCl0aHJvdyBuZXcgRXJyb3IoaSgnW3NwcmludGZdIENhbm5vdCBhY2Nlc3MgcHJvcGVydHkgXCIlc1wiIG9mIHVuZGVmaW5lZCB2YWx1ZSBcIiVzXCInLGMua2V5c1thXSxjLmtleXNbYS0xXSkpO3Q9dFtjLmtleXNbYV1dfWVsc2UgdD1jLnBhcmFtX25vP25bYy5wYXJhbV9ub106bltnKytdO2lmKG8ubm90X3R5cGUudGVzdChjLnR5cGUpJiZvLm5vdF9wcmltaXRpdmUudGVzdChjLnR5cGUpJiZ0IGluc3RhbmNlb2YgRnVuY3Rpb24mJih0PXQoKSksby5udW1lcmljX2FyZy50ZXN0KGMudHlwZSkmJlwibnVtYmVyXCIhPXR5cGVvZiB0JiZpc05hTih0KSl0aHJvdyBuZXcgVHlwZUVycm9yKGkoXCJbc3ByaW50Zl0gZXhwZWN0aW5nIG51bWJlciBidXQgZm91bmQgJVRcIix0KSk7c3dpdGNoKG8ubnVtYmVyLnRlc3QoYy50eXBlKSYmKGY9dD49MCksYy50eXBlKXtjYXNlXCJiXCI6dD1wYXJzZUludCh0LDEwKS50b1N0cmluZygyKTticmVhaztjYXNlXCJjXCI6dD1TdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KHQsMTApKTticmVhaztjYXNlXCJkXCI6Y2FzZVwiaVwiOnQ9cGFyc2VJbnQodCwxMCk7YnJlYWs7Y2FzZVwialwiOnQ9SlNPTi5zdHJpbmdpZnkodCxudWxsLGMud2lkdGg/cGFyc2VJbnQoYy53aWR0aCk6MCk7YnJlYWs7Y2FzZVwiZVwiOnQ9Yy5wcmVjaXNpb24/cGFyc2VGbG9hdCh0KS50b0V4cG9uZW50aWFsKGMucHJlY2lzaW9uKTpwYXJzZUZsb2F0KHQpLnRvRXhwb25lbnRpYWwoKTticmVhaztjYXNlXCJmXCI6dD1jLnByZWNpc2lvbj9wYXJzZUZsb2F0KHQpLnRvRml4ZWQoYy5wcmVjaXNpb24pOnBhcnNlRmxvYXQodCk7YnJlYWs7Y2FzZVwiZ1wiOnQ9Yy5wcmVjaXNpb24/U3RyaW5nKE51bWJlcih0LnRvUHJlY2lzaW9uKGMucHJlY2lzaW9uKSkpOnBhcnNlRmxvYXQodCk7YnJlYWs7Y2FzZVwib1wiOnQ9KHBhcnNlSW50KHQsMTApPj4+MCkudG9TdHJpbmcoOCk7YnJlYWs7Y2FzZVwic1wiOnQ9U3RyaW5nKHQpLHQ9Yy5wcmVjaXNpb24/dC5zdWJzdHJpbmcoMCxjLnByZWNpc2lvbik6dDticmVhaztjYXNlXCJ0XCI6dD1TdHJpbmcoISF0KSx0PWMucHJlY2lzaW9uP3Quc3Vic3RyaW5nKDAsYy5wcmVjaXNpb24pOnQ7YnJlYWs7Y2FzZVwiVFwiOnQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpLnNsaWNlKDgsLTEpLnRvTG93ZXJDYXNlKCksdD1jLnByZWNpc2lvbj90LnN1YnN0cmluZygwLGMucHJlY2lzaW9uKTp0O2JyZWFrO2Nhc2VcInVcIjp0PXBhcnNlSW50KHQsMTApPj4+MDticmVhaztjYXNlXCJ2XCI6dD10LnZhbHVlT2YoKSx0PWMucHJlY2lzaW9uP3Quc3Vic3RyaW5nKDAsYy5wcmVjaXNpb24pOnQ7YnJlYWs7Y2FzZVwieFwiOnQ9KHBhcnNlSW50KHQsMTApPj4+MCkudG9TdHJpbmcoMTYpO2JyZWFrO2Nhc2VcIlhcIjp0PShwYXJzZUludCh0LDEwKT4+PjApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfW8uanNvbi50ZXN0KGMudHlwZSk/Yis9dDooIW8ubnVtYmVyLnRlc3QoYy50eXBlKXx8ZiYmIWMuc2lnbj9wPVwiXCI6KHA9Zj9cIitcIjpcIi1cIix0PXQudG9TdHJpbmcoKS5yZXBsYWNlKG8uc2lnbixcIlwiKSksdT1jLnBhZF9jaGFyP1wiMFwiPT09Yy5wYWRfY2hhcj9cIjBcIjpjLnBhZF9jaGFyLmNoYXJBdCgxKTpcIiBcIixsPWMud2lkdGgtKHArdCkubGVuZ3RoLHM9Yy53aWR0aCYmbD4wP3UucmVwZWF0KGwpOlwiXCIsYis9Yy5hbGlnbj9wK3QrczpcIjBcIj09PXU/cCtzK3Q6cytwK3QpfXJldHVybiBifShmdW5jdGlvbihlKXtpZihjW2VdKXJldHVybiBjW2VdO3ZhciBuLHQ9ZSxyPVtdLGk9MDtmb3IoO3Q7KXtpZihudWxsIT09KG49by50ZXh0LmV4ZWModCkpKXIucHVzaChuWzBdKTtlbHNlIGlmKG51bGwhPT0obj1vLm1vZHVsby5leGVjKHQpKSlyLnB1c2goXCIlXCIpO2Vsc2V7aWYobnVsbD09PShuPW8ucGxhY2Vob2xkZXIuZXhlYyh0KSkpdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiW3NwcmludGZdIHVuZXhwZWN0ZWQgcGxhY2Vob2xkZXJcIik7aWYoblsyXSl7aXw9MTt2YXIgYT1bXSxzPW5bMl0sdT1bXTtpZihudWxsPT09KHU9by5rZXkuZXhlYyhzKSkpdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiW3NwcmludGZdIGZhaWxlZCB0byBwYXJzZSBuYW1lZCBhcmd1bWVudCBrZXlcIik7Zm9yKGEucHVzaCh1WzFdKTtcIlwiIT09KHM9cy5zdWJzdHJpbmcodVswXS5sZW5ndGgpKTspaWYobnVsbCE9PSh1PW8ua2V5X2FjY2Vzcy5leGVjKHMpKSlhLnB1c2godVsxXSk7ZWxzZXtpZihudWxsPT09KHU9by5pbmRleF9hY2Nlc3MuZXhlYyhzKSkpdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiW3NwcmludGZdIGZhaWxlZCB0byBwYXJzZSBuYW1lZCBhcmd1bWVudCBrZXlcIik7YS5wdXNoKHVbMV0pfW5bMl09YX1lbHNlIGl8PTI7aWYoMz09PWkpdGhyb3cgbmV3IEVycm9yKFwiW3NwcmludGZdIG1peGluZyBwb3NpdGlvbmFsIGFuZCBuYW1lZCBwbGFjZWhvbGRlcnMgaXMgbm90ICh5ZXQpIHN1cHBvcnRlZFwiKTtyLnB1c2goe3BsYWNlaG9sZGVyOm5bMF0scGFyYW1fbm86blsxXSxrZXlzOm5bMl0sc2lnbjpuWzNdLHBhZF9jaGFyOm5bNF0sYWxpZ246bls1XSx3aWR0aDpuWzZdLHByZWNpc2lvbjpuWzddLHR5cGU6bls4XX0pfXQ9dC5zdWJzdHJpbmcoblswXS5sZW5ndGgpfXJldHVybiBjW2VdPXJ9KGUpLGFyZ3VtZW50cyl9ZnVuY3Rpb24gYShlLG4pe3JldHVybiBpLmFwcGx5KG51bGwsW2VdLmNvbmNhdChufHxbXSkpfXZhciBjPU9iamVjdC5jcmVhdGUobnVsbCk7bi5zcHJpbnRmPWksbi52c3ByaW50Zj1hLFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJih3aW5kb3cuc3ByaW50Zj1pLHdpbmRvdy52c3ByaW50Zj1hLHZvaWQgMD09PShyPWZ1bmN0aW9uKCl7cmV0dXJue3NwcmludGY6aSx2c3ByaW50ZjphfX0uY2FsbChuLHQsbixlKSl8fChlLmV4cG9ydHM9cikpfSgpfSxmdW5jdGlvbihlLG4sdCl7XCJ1c2Ugc3RyaWN0XCI7dC5yKG4pLGZ1bmN0aW9uKGUpe3QuZChuLFwiV2ViU29ja2V0TWFuYWdlclwiLGZ1bmN0aW9uKCl7cmV0dXJuIG99KTt2YXIgcj10KDApO2UuY29ubmVjdD1lLmNvbm5lY3R8fHt9LGNvbm5lY3QuV2ViU29ja2V0TWFuYWdlcj1yLmE7dmFyIG89ci5hfS5jYWxsKHRoaXMsdCgzKSl9LGZ1bmN0aW9uKGUsbil7dmFyIHQ7dD1mdW5jdGlvbigpe3JldHVybiB0aGlzfSgpO3RyeXt0PXR8fG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCl9Y2F0Y2goZSl7XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmKHQ9d2luZG93KX1lLmV4cG9ydHM9dH1dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZkMlZpY0dGamF5OWliMjkwYzNSeVlYQWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMM1YwYVd4ekxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTlqYjI1emRHRnVkSE11YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2YzNKakwyeHZaeTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmQyVmlVMjlqYTJWMFRXRnVZV2RsY2k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5dWIyUmxYMjF2WkhWc1pYTXZjM0J5YVc1MFppMXFjeTl6Y21NdmMzQnlhVzUwWmk1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZhVzVrWlhndWFuTWlMQ0ozWldKd1lXTnJPaTh2THloM1pXSndZV05yS1M5aWRXbHNaR2x1TDJkc2IySmhiQzVxY3lKZExDSnVZVzFsY3lJNld5SnBibk4wWVd4c1pXUk5iMlIxYkdWeklpd2lYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeUlzSW0xdlpIVnNaVWxrSWl3aVpYaHdiM0owY3lJc0ltMXZaSFZzWlNJc0lta2lMQ0pzSWl3aWJXOWtkV3hsY3lJc0ltTmhiR3dpTENKdElpd2lZeUlzSW1RaUxDSnVZVzFsSWl3aVoyVjBkR1Z5SWl3aWJ5SXNJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2laVzUxYldWeVlXSnNaU0lzSW1kbGRDSXNJbklpTENKVGVXMWliMndpTENKMGIxTjBjbWx1WjFSaFp5SXNJblpoYkhWbElpd2lkQ0lzSW0xdlpHVWlMQ0pmWDJWelRXOWtkV3hsSWl3aWJuTWlMQ0pqY21WaGRHVWlMQ0pyWlhraUxDSmlhVzVrSWl3aWJpSXNJbTlpYW1WamRDSXNJbkJ5YjNCbGNuUjVJaXdpY0hKdmRHOTBlWEJsSWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKd0lpd2ljeUlzSWxWMGFXeHpJaXdpY0hKbGJXbHpaU0lzSW0xbGMzTmhaMlVpTENKRmNuSnZjaUlzSW1GemMyVnlkRlJ5ZFdVaUxDSjFibVJsWm1sdVpXUWlMQ0pmZEhsd1pXOW1JaXdpYzNCeWFXNTBaaUlzSWtGeWNtRjVJaXdpYVhOQmNuSmhlU0lzSW1Gc2JHOTNaV1JXWVd4MVpYTWlMQ0pzWlc1bmRHZ2lMQ0oyWVd4MVpYTWlMQ0psYm5WdFQySnFJaXdpWm05eVJXRmphQ0lzSW5KbGNHeGhZMlVpTENKNElpd2llU0lzSW5SdlZYQndaWEpEWVhObElpd2liMkpxSWl3aVkyOXVjM1J5ZFdOMGIzSWlMQ0poY0hCc2VTSXNJbWx6VTNSeWFXNW5JaXdpYVhOT2RXMWlaWElpTENKM2MxSmxaMlY0SWl3aVVtVm5SWGh3SWl3aWRtRnNhV1JYVTFWeWJDSXNJbmR6VlhKc0lpd2lkR1Z6ZENJc0ltRnpjMlZ5ZEVselQySnFaV04wSWl3aWFYTlBZbXBsWTNRaUxDSk1UMGRUWDBSRlUxUkpUa0ZVU1U5T0lpd2lVazlWVkVWZlMwVlpJaXdpVEc5bloyVnlJaXdpWkdGMFlTSXNJa3h2WjB4bGRtVnNJaXdpUkVWQ1ZVY2lMQ0pKVGtaUElpd2lWMEZTVGlJc0lrVlNVazlTSWl3aVRHOW5UV0Z1WVdkbGNrbHRjR3dpTENKZlkyeGhjM05EWVd4c1EyaGxZMnNpTENKMGFHbHpJaXdpZFhCa1lYUmxURzluWjJWeVEyOXVabWxuSWl3aVkyOXVjMjlzWlV4dloyZGxjbGR5WVhCd1pYSWlMQ0pqY21WaGRHVkRiMjV6YjJ4bFRHOW5aMlZ5SWl3aWJHVjJaV3dpTENKc2IyZFRkR0YwWlcxbGJuUWlMQ0pvWVhORGJHbGxiblJNYjJkblpYSWlMQ0pmWTJ4cFpXNTBURzluWjJWeUlpd2laR1ZpZFdjaUxDSnBibVp2SWl3aWQyRnliaUlzSW1WeWNtOXlJaXdpWDJ4bGRtVnNJaXdpYjNCMGFXOXVjeUlzSW5CeVpXWnBlQ0lzSWw5c2IyZHpSR1Z6ZEdsdVlYUnBiMjRpTENKTWIyZG5aWEpYY21Gd2NHVnlTVzF3YkNJc0ltbHVjSFYwUTI5dVptbG5JaXdpWTI5dVptbG5JaXdpYkc5bloyVnlJaXdpVEc5bloyVnlWM0poY0hCbGNpSXNJbDkwYUdseklpd2lYM0J2YzNOcFlteGxRMjl1YzNSeWRXTjBiM0pTWlhSMWNtNGlMQ0pmWjJWMFVISnZkRzkwZVhCbFQyWWlMQ0pmYkdWdUlpd2lZWEpuZFcxbGJuUnpJaXdpWVhKbmN5SXNJbDlyWlhraUxDSmZiRzluSWl3aVgyeGxiaklpTENKZmEyVjVNaUlzSWw5c1pXNHpJaXdpWDJ0bGVUTWlMQ0pmYkdWdU5DSXNJbDlyWlhrMElpd2lURzluVFdGdVlXZGxjaUlzSW1selRHVjJaV3hGYm1GaWJHVmtJaXdpZDNKcGRHVlViME5zYVdWdWRFeHZaMmRsY2lJc0lsOXphRzkxYkdSTWIyY2lMQ0pmWTI5dWRtVnlkRlJ2VTJsdVoyeGxVM1JoZEdWdFpXNTBJaXdpWDNkeWFYUmxWRzlEYkdsbGJuUk1iMmRuWlhJaUxDSnBibVJsZUNJc0ltRnlaeUlzSWw5amIyNTJaWEowVkc5VGRISnBibWNpTENKcGMwWjFibU4wYVc5dUlpd2lkRzlUZEhKcGJtY2lMQ0owYjFOMGNtbHVaMUpsYzNWc2RDSXNJa3BUVDA0aUxDSnpkSEpwYm1kcFpua2lMQ0pqYjI1emIyeGxJaXdpWDE5M1pXSndZV05yWDJWNGNHOXlkSE5mWHlJc0lsZGxZbE52WTJ0bGRFMWhibUZuWlhKUFltcGxZM1FpTENKWFpXSlRiMk5yWlhSTllXNWhaMlZ5SWl3aVoyVjBURzluWjJWeUlpd2lkMlZpVTI5amEyVjBJaXdpY21WamIyNXVaV04wUTI5dVptbG5JaXdpY21WamIyNXVaV04wVjJWaVUyOWphMlYwSWl3aWQyVmljMjlqYTJWMFNXNXBkRVpoYVd4bFpDSXNJbXhwYm1WaGNrTnZibTVsWTNSQmRIUmxiWEIwSWl3aVpYaHdiMjVsYm5ScFlXeERiMjV1WldOMFFYUjBaVzF3ZENJc0ltVjRjRzl1Wlc1MGFXRnNRbUZqYTA5bVpsUnBiV1VpTENKbGVIQnZibVZ1ZEdsaGJGUnBiV1Z2ZFhSSVlXNWtiR1VpTENKc2FXWmxWR2x0WlZScGJXVnZkWFJJWVc1a2JHVWlMQ0pvWldGeWRHSmxZWFJEYjI1bWFXY2lMQ0p3Wlc1a2FXNW5VbVZ6Y0c5dWMyVWlMQ0pwYm5SbGNuWmhiRWhoYm1Sc1pTSXNJbU5oYkd4aVlXTnJjeUlzSW1sdWFYUkdZV2xzZFhKbElpd2lVMlYwSWl3aVoyVjBWMlZpVTI5amEyVjBWSEpoYm5Od2IzSjBJaXdpYzNWaWMyTnlhWEIwYVc5dVZYQmtZWFJsSWl3aWMzVmljMk55YVhCMGFXOXVSbUZwYkhWeVpTSXNJblJ2Y0dsaklpd2lUV0Z3SWl3aVlXeHNUV1Z6YzJGblpTSXNJbU52Ym01bFkzUnBiMjVIWVdsdUlpd2lZMjl1Ym1WamRHbHZia3h2YzNRaUxDSjNaV0pUYjJOclpYUkRiMjVtYVdjaUxDSmpiMjV1UTI5dVptbG5JaXdpY0hKdmJXbHpaVWhoYm1Sc1pTSXNJbkJ5YjIxcGMyVkRiMjF3YkdWMFpXUWlMQ0owYjNCcFkxTjFZbk5qY21sd2RHbHZiaUlzSW5OMVluTmpjbWxpWldRaUxDSndaVzVrYVc1bklpd2lhVzUyWVd4cFpGTmxibVJOWlhOellXZGxVbTkxZEdWTFpYbHpJaXdpYjI1c2FXNWxJaXdpYm1GMmFXZGhkRzl5SWl3aWIyNU1hVzVsSWl3aWJtVjBkMjl5YTBOdmJtNWxZM1JwZG1sMGVVTm9aV05yWlhJaUxDSnpaWFJKYm5SbGNuWmhiQ0lzSW5KbFlXUjVVM1JoZEdVaUxDSm5aWFJYWldKVGIyTnJaWFJEYjI1dVEyOXVabWxuSWl3aWFXNTJiMnRsUTJGc2JHSmhZMnR6SWl3aWNtVnpjRzl1YzJVaUxDSmpZV3hzWW1GamF5SXNJbk5sYm1SSVpXRnlkRUpsWVhRaUxDSmpiR1ZoY2tsdWRHVnlkbUZzSWl3aWNtVm1jbVZ6YUZkbFlsTnZZMnRsZEVOdmJtNWxZM1JwYjI0aUxDSnpaVzVrSWl3aVkzSmxZWFJsVjJWaVUyOWphMlYwVUdGNWJHOWhaQ0lzSW5KbGMyVjBVM1JoZEdVaUxDSmpiR1ZoY2xScGJXVnZkWFFpTENKM1pXSlRiMk5yWlhSUGJrOXdaVzRpTENKemFYcGxJaXdpZEc5d2FXTnpJaXdpWm5KdmJTSXNJbU52Ym1OaGRDSXNJbU5zWldGeUlpd2ljMlYwVkdsdFpXOTFkQ0lzSW5kbFlsTnZZMnRsZEZSeVlXNXpjRzl5ZENJc0luUnlZVzV6Y0c5eWRFeHBabVZVYVcxbFNXNVRaV052Ym1Seklpd2lkMlZpVTI5amEyVjBUMjVEYkc5elpTSXNJbVYyWlc1MElpd2lhVzVwZEZkbFlsTnZZMnRsZENJc0luZGxZbE52WTJ0bGRFOXVSWEp5YjNJaUxDSjNaV0pUYjJOclpYUlBiazFsYzNOaFoyVWlMQ0p3WVhKelpTSXNJbU52Ym5SbGJuUWlMQ0p6ZEdGMGRYTWlMQ0owYjNCcFkwNWhiV1VpTENKaFpHUWlMQ0pvWVhNaUxDSmpiRzl6WlZkbFlsTnZZMnRsZENJc0luSmxZWE52YmlJc0lsZGxZbE52WTJ0bGRDSXNJa05NVDFORlJDSXNJbU5zYjNObElpd2lkR1Z5YldsdVlYUmxWMlZpVTI5amEyVjBUV0Z1WVdkbGNpSXNJblpoYkdsa1YyVmlVMjlqYTJWMFEyOXVia052Ym1acFp5SXNJblZ5YkNJc0luUm9aVzRpTENKaFpHUkZkbVZ1ZEV4cGMzUmxibVZ5SWl3aWFXNXBkQ0lzSW5SeVlXNXpjRzl5ZEVoaGJtUnNaU0lzSW05dVNXNXBkRVpoYVd4MWNtVWlMQ0pqWWlJc0ltOXVRMjl1Ym1WamRHbHZia2RoYVc0aUxDSlBVRVZPSWl3aWIyNURiMjV1WldOMGFXOXVURzl6ZENJc0ltOXVVM1ZpYzJOeWFYQjBhVzl1VlhCa1lYUmxJaXdpYjI1VGRXSnpZM0pwY0hScGIyNUdZV2xzZFhKbElpd2liMjVOWlhOellXZGxJaXdpWVhOelpYSjBUbTkwVG5Wc2JDSXNJbk5sZENJc0ltOXVRV3hzVFdWemMyRm5aU0lzSW5OMVluTmpjbWxpWlZSdmNHbGpjeUlzSW1GemMyVnlkRWx6VEdsemRDSXNJbk5sYm1STlpYTnpZV2RsSWl3aWNHRjViRzloWkNJc0luTmxkRWRzYjJKaGJFTnZibVpwWnlJc0lteHZaMmRsY2tOdmJtWnBaeUlzSWw5ZlYwVkNVRUZEUzE5QlRVUmZSRVZHU1U1RlgxSkZVMVZNVkY5Zklpd2ljbVVpTENKdWIzUmZjM1J5YVc1bklpd2libTkwWDJKdmIyd2lMQ0p1YjNSZmRIbHdaU0lzSW01dmRGOXdjbWx0YVhScGRtVWlMQ0p1ZFcxaVpYSWlMQ0p1ZFcxbGNtbGpYMkZ5WnlJc0ltcHpiMjRpTENKdWIzUmZhbk52YmlJc0luUmxlSFFpTENKdGIyUjFiRzhpTENKd2JHRmpaV2h2YkdSbGNpSXNJbXRsZVY5aFkyTmxjM01pTENKcGJtUmxlRjloWTJObGMzTWlMQ0p6YVdkdUlpd2ljR0Z5YzJWZmRISmxaU0lzSW1GeVozWWlMQ0pySWl3aWNHZ2lMQ0p3WVdRaUxDSndZV1JmWTJoaGNtRmpkR1Z5SWl3aWNHRmtYMnhsYm1kMGFDSXNJbWx6WDNCdmMybDBhWFpsSWl3aVkzVnljMjl5SWl3aWRISmxaVjlzWlc1bmRHZ2lMQ0p2ZFhSd2RYUWlMQ0pyWlhseklpd2ljR0Z5WVcxZmJtOGlMQ0owZVhCbElpd2lSblZ1WTNScGIyNGlMQ0pwYzA1aFRpSXNJbFI1Y0dWRmNuSnZjaUlzSW5CaGNuTmxTVzUwSWl3aVUzUnlhVzVuSWl3aVpuSnZiVU5vWVhKRGIyUmxJaXdpZDJsa2RHZ2lMQ0p3Y21WamFYTnBiMjRpTENKd1lYSnpaVVpzYjJGMElpd2lkRzlGZUhCdmJtVnVkR2xoYkNJc0luUnZSbWw0WldRaUxDSk9kVzFpWlhJaUxDSjBiMUJ5WldOcGMybHZiaUlzSW5OMVluTjBjbWx1WnlJc0luTnNhV05sSWl3aWRHOU1iM2RsY2tOaGMyVWlMQ0oyWVd4MVpVOW1JaXdpY0dGa1gyTm9ZWElpTENKamFHRnlRWFFpTENKeVpYQmxZWFFpTENKaGJHbG5iaUlzSW5Od2NtbHVkR1pmWm05eWJXRjBJaXdpWm0xMElpd2ljM0J5YVc1MFpsOWpZV05vWlNJc0ltMWhkR05vSWl3aVgyWnRkQ0lzSW1GeVoxOXVZVzFsY3lJc0ltVjRaV01pTENKd2RYTm9JaXdpVTNsdWRHRjRSWEp5YjNJaUxDSm1hV1ZzWkY5c2FYTjBJaXdpY21Wd2JHRmpaVzFsYm5SZlptbGxiR1FpTENKbWFXVnNaRjl0WVhSamFDSXNJbk53Y21sdWRHWmZjR0Z5YzJVaUxDSjJjM0J5YVc1MFppSXNJbmRwYm1SdmR5SXNJbWRzYjJKaGJDSXNJbDkzWldKVGIyTnJaWFJOWVc1aFoyVnlYMTlYUlVKUVFVTkxYMGxOVUU5U1ZFVkVYMDFQUkZWTVJWOHdYMThpTENKamIyNXVaV04wSWl3aVp5SXNJbVVpWFN3aWJXRndjR2x1WjNNaU9pSmhRVU5GTEVsQlFVbEJMRVZCUVcxQ0xFZEJSM1pDTEZOQlFWTkRMRVZCUVc5Q1F5eEhRVWMxUWl4SFFVRkhSaXhGUVVGcFFrVXNSMEZEYmtJc1QwRkJUMFlzUlVGQmFVSkZMRWRCUVZWRExGRkJSMjVETEVsQlFVbERMRVZCUVZOS0xFVkJRV2xDUlN4SFFVRlpMRU5CUTNwRFJ5eEZRVUZIU0N4RlFVTklTU3hIUVVGSExFVkJRMGhJTEZGQlFWTXNTVUZWVml4UFFVNUJTU3hGUVVGUlRDeEhRVUZWVFN4TFFVRkxTaXhGUVVGUFJDeFJRVUZUUXl4RlFVRlJRU3hGUVVGUFJDeFJRVUZUUml4SFFVY3ZSRWNzUlVGQlQwVXNSMEZCU1N4RlFVZEtSaXhGUVVGUFJDeFJRVXRtUml4RlFVRnZRbEVzUlVGQlNVWXNSVUZIZUVKT0xFVkJRVzlDVXl4RlFVRkpWaXhGUVVkNFFrTXNSVUZCYjBKVkxFVkJRVWtzVTBGQlUxSXNSVUZCVTFNc1JVRkJUVU1zUjBGRE0wTmFMRVZCUVc5Q1lTeEZRVUZGV0N4RlFVRlRVeXhKUVVOc1EwY3NUMEZCVDBNc1pVRkJaV0lzUlVGQlUxTXNSVUZCVFN4RFFVRkZTeXhaUVVGWkxFVkJRVTFETEVsQlFVdE1MRXRCUzJoRldpeEZRVUZ2UW10Q0xFVkJRVWtzVTBGQlUyaENMRWRCUTFnc2IwSkJRVmhwUWl4UlFVRXdRa0VzVDBGQlQwTXNZVUZETVVOT0xFOUJRVTlETEdWQlFXVmlMRVZCUVZOcFFpeFBRVUZQUXl4WlFVRmhMRU5CUVVWRExFMUJRVThzVjBGRk4wUlFMRTlCUVU5RExHVkJRV1ZpTEVWQlFWTXNZVUZCWXl4RFFVRkZiVUlzVDBGQlR5eExRVkYyUkhKQ0xFVkJRVzlDYzBJc1JVRkJTU3hUUVVGVFJDeEZRVUZQUlN4SFFVVjJReXhIUVVSVkxFVkJRVkJCTEVsQlFWVkdMRVZCUVZGeVFpeEZRVUZ2UW5GQ0xFbEJReTlDTEVWQlFWQkZMRVZCUVZVc1QwRkJUMFlzUlVGRGNFSXNSMEZCVnl4RlFVRlFSU3hIUVVFNFFpeHBRa0ZCVmtZc1IwRkJjMEpCTEVkQlFWTkJMRVZCUVUxSExGZEJRVmtzVDBGQlQwZ3NSVUZEYUVZc1NVRkJTVWtzUlVGQlMxZ3NUMEZCVDFrc1QwRkJUeXhOUVVkMlFpeEhRVVpCTVVJc1JVRkJiMEpyUWl4RlFVRkZUeXhIUVVOMFFsZ3NUMEZCVDBNc1pVRkJaVlVzUlVGQlNTeFZRVUZYTEVOQlFVVlVMRmxCUVZrc1JVRkJUVXNzVFVGQlQwRXNTVUZEZEVRc1JVRkJVRVVzUjBGQk5FSXNhVUpCUVZSR0xFVkJRVzFDTEVsQlFVa3NTVUZCU1Uwc1MwRkJUMDRzUlVGQlQzSkNMRVZCUVc5Q1ZTeEZRVUZGWlN4RlFVRkpSU3hGUVVGTExGTkJRVk5CTEVkQlFVOHNUMEZCVDA0c1JVRkJUVTBzU1VGQlVVTXNTMEZCU3l4TFFVRk5SQ3hKUVVNNVNTeFBRVUZQUml4SFFVbFNla0lzUlVGQmIwSTJRaXhGUVVGSkxGTkJRVk14UWl4SFFVTm9ReXhKUVVGSlV5eEZRVUZUVkN4SFFVRlZRU3hGUVVGUGNVSXNWMEZETjBJc1YwRkJkMElzVDBGQlQzSkNMRVZCUVdkQ0xGTkJReTlETEZkQlFUaENMRTlCUVU5QkxFZEJSWFJETEU5QlJFRklMRVZCUVc5Q1ZTeEZRVUZGUlN4RlFVRlJMRWxCUVV0QkxFZEJRelZDUVN4SFFVbFNXaXhGUVVGdlFtRXNSVUZCU1N4VFFVRlRhVUlzUlVGQlVVTXNSMEZCV1N4UFFVRlBha0lzVDBGQlQydENMRlZCUVZWRExHVkJRV1V4UWl4TFFVRkxkVUlzUlVGQlVVTXNTVUZIZWtjdlFpeEZRVUZ2UW10RExFVkJRVWtzUjBGSmFrSnNReXhGUVVGdlFrRXNSVUZCYjBKdFF5eEZRVUZKTEVjc0sxRkRha1p5UkN4SlFVRk5ReXhGUVVGUkxFTkJTMlJCTEZkQlFXMUNMRk5CUVZORExFVkJRVk5ETEVkQlEyNURMRWxCUVV0RUxFVkJRMGdzVFVGQlRTeEpRVUZKUlN4TlFVRk5SQ3hKUVU5d1FrWXNZMEZCYzBJc1UwRkJVMllzUlVGQlQxWXNSMEZMY0VNc1QwRktRWGxDTEVWQlFVMUpMRmRCUTAwc1QwRkJWbTVDTEZGQlFXMURiMElzU1VGQmFrSkRMRVZCUVU5eVFpeEhRVU42UW5OQ0xHdENRVUZSTEhOQ1FVRjFRbWhETEVkQlFWRXNXVUZGYkVOVkxFZEJSMVJsTEZOQlFXbENMRk5CUVZObUxFZEJRM2hDTEUxQlFYZENMR2xDUVVGV1FTeEhRVWRvUW1Vc2RVSkJRU3RDTEZOQlFWTm1MRVZCUVU5TkxFZEJRemRETEVsQlFVdE9MRWRCUVRCQ0xHbENRVUZXUVN4RlFVTnVRaXhOUVVGTkxFbEJRVWxyUWl4TlFVRk5XaXhGUVVGTkxHZERRVWt4UWxNc1lVRkJjVUlzVTBGQlUyWXNSVUZCVDAwc1IwRkRia01zU1VGQlMybENMRTFCUVUxRExGRkJRVkY0UWl4SFFVTnFRaXhOUVVGTkxFbEJRVWxyUWl4TlFVRk5XaXhGUVVGTkxIRkNRVWt4UWxNc1lVRkJjVUlzVTBGQlUyWXNSVUZCVDNsQ0xFVkJRV1Z1UWl4SFFVTnNSQ3hKUVVGSmRrSXNSVUZEU2l4SlFVRkxRU3hGUVVGSkxFVkJRVWRCTEVWQlFVa3dReXhGUVVGalF5eFBRVUZSTTBNc1NVRkRjRU1zUjBGQlNUQkRMRVZCUVdNeFF5eExRVUZQYVVJc1JVRkRka0lzVDBGSFNpeE5RVUZOTEVsQlFVbHJRaXhOUVVOU1dpeEZRVUZOTERaRFFVRnZSRzFDTEVsQlZ6bEVWaXhUUVVGcFFpeFRRVUZUV1N4SFFVTjRRaXhKUVVGSlF5eEZRVUZWTEVkQldXUXNUMEZXUVVRc1JVRkJUMFVzVVVGQlVTeFRRVUZUTjBJc1IwRkRkRUlzU1VGQlNVMHNSVUZCVFU0c1JVRkRVRGhDTEZGQlFWRXNhVUpCUVd0Q0xGTkJRVk5ETEVWQlFVZERMRWRCUTNKRExFOUJRVTlCTEVWQlFVVkRMR05CUVdkQ0xFMUJSVEZDU0N4UlFVRlJMRXRCUVUwc1NVRkZha0pHTEVWQlFWRjBRaXhIUVVGUFRpeEpRVWRXTkVJc1IwRlBWR0lzVjBGQmJVSXNVMEZCVTIxQ0xFZEJRekZDTEZOQlFWVkJMRWRCUVU5QkxFVkJRVWxETEdGQlFXVkVMRVZCUVVsb1JDeE5RVUZSWjBRc1JVRkJTVVVzVVVGSGRFUnlRaXhUUVVGcFFpeFRRVUZUWml4SFFVTjRRaXhSUVVFd1FpeFhRVUZxUW5GQ0xFVkJRVTl5UWl4SlFVRm5ReXhQUVVGV1FTeExRVWQ0UTJVc1JVRkJUWE5DTEZOQlFWY3NVMEZCVTNKRExFZEJRM2hDTEUxQlFYZENMR2xDUVVGV1FTeEhRVWRvUW1Vc1JVRkJUWFZDTEZOQlFWY3NVMEZCVTNSRExFZEJRM2hDTEUxQlFYZENMR2xDUVVGV1FTeEhRVWRvUWl4SlFVRk5kVU1zUlVGQlZTeEpRVUZKUXl4UFFVRlBMR2xDUVVNelFucENMRVZCUVUwd1FpeFhRVUZoTEZOQlFWVkRMRWRCUXpOQ0xFOUJRVTlJTEVWQlFWRkpMRXRCUVV0RUxFbEJSM1JDTTBJc1JVRkJUVFpDTEdWQlFXbENMRk5CUVZNMVF5eEZRVUZQVFN4SFFVTnlReXhKUVVGTFV5eEZRVUZOT0VJc1UwRkJVemRETEVkQlEyeENMRTFCUVUwc1NVRkJTV3RDTEUxQlFVMWFMRVZCUVUwc2RVSkJTVmhUTEZGRGVFZEdLMElzUlVGRFRDeFBRVVJMUVN4RlFVVkpMR2RDUVVaS1FTeEZRVWRLTEZGQlVVbERMRVZCUTBFc1owSkJSRUZCTEVWQlJVVXNhMEpCUmtaQkxFVkJSMEVzWjBJc2F6aENRMWhRUXl4RkxEQkZRVU5GUXl4TkxESkNRVVZFUVN4TkxESkNRVVZCUVN4TkxEUkNRVVZEUVN4UkxFdEJTVVpETEVWQlFWY3NRMEZEWmtNc1RVRkJUeXhIUVVOUVF5eExRVUZOTEVkQlEwNURMRXRCUVUwc1IwRkRUa01zVFVGQlR5eEpRVWRJUXl4RkxGZEJRMG9zVTBGQlFVRXNTVUZCWTBNc1JVRkJRVU1zUzBGQlFVWXNSMEZEV2tVc1MwRkJTME1zY1VKQlEweEVMRXRCUVV0RkxIRkNRVUYxUWtNc1NTeHpSRUZIVmtNc1JVRkJUME1zUjBGRGVrSXNSMEZCUzB3c1MwRkJTMDBzYTBKQlIxWXNUMEZCVVVZc1IwRkRUaXhMUVVGTFdDeEZRVUZUUXl4TlFVTmFMRTlCUVU5TkxFdEJRVXRQTEdOQlFXTkRMRTFCUVUxSUxFZEJRMnhETEV0QlFVdGFMRVZCUVZORkxFdEJRMW9zVDBGQlQwc3NTMEZCUzA4c1kwRkJZMFVzUzBGQlMwb3NSMEZEYWtNc1MwRkJTMW9zUlVGQlUwY3NTMEZEV2l4UFFVRlBTU3hMUVVGTFR5eGpRVUZqUnl4TFFVRkxUQ3hIUVVOcVF5eExRVUZMV2l4RlFVRlRTU3hOUVVOYUxFOUJRVTlITEV0QlFVdFBMR05CUVdOSkxFMUJRVTFPTEUwc2NVTkJTWFpDUkN4SFFVTmlMRTlCUVU5QkxFZEJRVk5LTEV0QlFVdFpMRk1zZDBOQlNYSkNMRTlCUVRoQ0xFOUJRWFpDV2l4TFFVRkxUeXhuUWl4blEwRkhTazBzUjBGRFVpeEpRVUZKUXl4RlFVRlRSQ3hGUVVGUlF5eFJRVUZWTEVkQlF5OUNMRTlCUVVsa0xFdEJRVXRsTEcxQ1FVRnhRakZDTEVWQlEzSkNWeXhMUVVGTFJTeHhRa0ZGVUN4SlFVRkpZeXhGUVVGclFrWXNTeXg1UTBGSFdrY3NSMEZEYWtJc1NVRkJTVU1zUlVGQlUwUXNSMEZCWlN4SFFVTTFRbXBDTEV0QlFVdFpMRTlCUVZOTkxFVkJRVTlrTEU5QlFWTllMRVZCUVZORkxFdEJRM1pEU3l4TFFVRkxUeXhqUVVGblFsY3NSVUZCVDBNc1VVRkJWU3hMUVVOMFEyNUNMRXRCUVV0bExHbENRVUZ0UWpGQ0xFVkJRM0JDTmtJc1JVRkJUMVlzVVVGRFZGSXNTMEZCUzJVc2FVSkJRVzFDTVVJc1IwRkZkRUkyUWl4RlFVRlBReXhUUVVOVWJrSXNTMEZCUzJVc2FVSkJRVzFDTVVJc1R5eExRVXQ0UWl0Q0xFVXNkVXhCVlVGS0xFVXNXVUZEU2l4VFFVRkJRU3hGUVVGWlJpeEhRVUZSTEVsQlFVRlBMRVZCUVVFc1QwRkJRWFJDTEVWQlFVRkRMRXRCUVVGblFpeEpRVU5zUWtzc1JVRkJRVU1zUlVGQlFYUkNMRXRCUVVGMVFpeEZRVUZCVUN4SFFVRkJka1lzUzBGQlFYVkZMRkZCUTB0akxFOUJRVk5CTEVkQlFWVXNSMEZHVGs4c1JTdzBUMEZFVlVRc1J5eHRRMEZOWml4UlFVRkJTU3hGUVVGQlF5eFZRVUZCZUVRc1QwRkJUbmxFTEVWQlFVMHNTVUZCUVRWRUxFMUJRVUV3UkN4SFFVRkJSeXhGUVVGQkxFVkJRVUZCTEVWQlFVRklMRVZCUVVGSExFbEJRVTVFTEVWQlFVMURMRWRCUVVGR0xGVkJRVUZGTEVkQlEySXpRaXhMUVVGTE5FSXNTMEZCUzI1RExFVkJRVk5ETEUxQlFVOW5ReXhMTERaQ1FVZGtMRkZCUVVGSExFVkJRVUZLTEZWQlFVRjRSQ3hQUVVGT2VVUXNSVUZCVFN4SlFVRkJOVVFzVFVGQlFTdEVMRWRCUVVGRExFVkJRVUVzUlVGQlFVRXNSVUZCUVVRc1JVRkJRVU1zU1VGQlRrb3NSVUZCVFVrc1IwRkJRVXdzVlVGQlFVc3NSMEZEV2psQ0xFdEJRVXMwUWl4TFFVRkxia01zUlVGQlUwVXNTMEZCVFN0Q0xFc3NOa0pCUjJJc1VVRkJRVXNzUlVGQlFVNHNWVUZCUVhoRUxFOUJRVTU1UkN4RlFVRk5MRWxCUVVFMVJDeE5RVUZCYVVVc1IwRkJRVU1zUlVGQlFTeEZRVUZCUVN4RlFVRkJSQ3hGUVVGQlF5eEpRVUZPVGl4RlFVRk5UU3hIUVVGQlVDeFZRVUZCVHl4SFFVTmFhRU1zUzBGQlN6UkNMRXRCUVV0dVF5eEZRVUZUUnl4TFFVRk5PRUlzU3l3NFFrRkhXaXhSUVVGQlR5eEZRVUZCVWl4VlFVRkJlRVFzVDBGQlRubEVMRVZCUVUwc1NVRkJRVFZFTEUxQlFVRnRSU3hIUVVGQlF5eEZRVUZCTEVWQlFVRkJMRVZCUVVGRUxFVkJRVUZETEVsQlFVNVNMRVZCUVUxUkxFZEJRVUZVTEZWQlFVRlRMRWRCUTJKc1F5eExRVUZMTkVJc1MwRkJTMjVETEVWQlFWTkpMRTFCUVU4MlFpeExMR2xEUVVkcVFuUkNMRWRCUTFRc1QwRkJUeXRDTEVWQlFWYzNRaXh0UWtGQmNVSTJRaXhGUVVGWFF5eGxRVUZsYUVNc1N5d3lRMEZIT1VOQkxFVkJRVTlETEVkQlF6RkNPRUlzUlVGQlYwVXNiMEpCUVc5Q2FrTXNSVUZCVDBNc1N5d3lRa0ZIYmtORUxFVkJRVTl6UWl4SFFVTldMRWRCUVVreFFpeExRVUZMYzBNc1YwRkJWMnhETEVkQlFWRXNRMEZETVVJc1NVRkJTVU1zUlVGQlpVd3NTMEZCUzNWRExEQkNRVUV3UW1Jc1IwRkRiRVF4UWl4TFFVRkxkME1zY1VKQlFYRkNjRU1zUlVGQlQwTXNUU3huUkVGSldIRkNMRWRCUTNoQ0xFbEJRVWx5UWl4RlFVRmxMRWRCUTJaTUxFdEJRVXRqTEZOQlExQlVMRWRCUVdkQ1RDeExRVUZMWXl4UFFVRlRMRXRCUldoRExFbEJRVXNzU1VGQlNUSkNMRVZCUVZFc1JVRkJSMEVzUlVGQlVXWXNSVUZCUzNwRUxFOUJRVkYzUlN4SlFVRlRMRU5CUTJoRUxFbEJRVWxETEVWQlFVMW9RaXhGUVVGTFpTeEhRVU5tY0VNc1IwRkJaMEpNTEV0QlFVc3lReXhwUWtGQmFVSkVMRWRCUVU4c1NVRkZMME1zVDBGQlQzSkRMRWtzZFVOQlIxRnhReXhIUVVObUxFbEJRMFVzU1VGQlMwRXNSVUZEU0N4TlFVRlBMRWRCUlZRc1IwRkJTWEJHTEVWQlFVMXpRaXhUUVVGVE9FUXNSMEZEYWtJc1QwRkJUMEVzUlVGRlZDeEhRVUZKY0VZc1JVRkJUVGhDTEZOQlFWTnpSQ3hKUVVGUmNFWXNSVUZCVFhOR0xGZEJRVmRHTEVWQlFVbEhMRlZCUVZjc1EwRkRla1FzU1VGQlNVTXNSVUZCYVVKS0xFVkJRVWxITEZkQlEzcENMRWRCUVhWQ0xHOUNRVUZ1UWtNc1JVRkRSaXhQUVVGUFFTeEZRVWRZTEU5QlFVOURMRXRCUVV0RExGVkJRVlZPTEVkQlEzUkNMRTFCUVU4dlFpeEhRVVZRTEU5QlJFRnpReXhSUVVGUmRFTXNUVUZCVFN3MFEwRkJOa01yUWl4RlFVRkxMMElzUjBGRGVrUXNVU3hMUVV0VVVpeEZRVUZ6UWl4WFFVTjRRaXhKUVVGSlowSXNSVUZCVXl4SlFVRkpReXhGUVV0cVFpeFBRVXBCUkN4RlFVRlBXQ3hOUVVGUmVVTXNVVUZCVVhwRExFMUJRM1pDVnl4RlFVRlBWaXhMUVVGUGQwTXNVVUZCVVhoRExFdEJRM1JDVlN4RlFVRlBWQ3hMUVVGUGRVTXNVVUZCVVhaRExFdEJRM1JDVXl4RlFVRlBVaXhOUVVGUmMwTXNVVUZCVVhSRExFMUJRMmhDVVN4SFFVZElaMElzUlVGQllTeEpRVUZKY2tNc1JVTndTM1pDTlVVc1JVRkJRVlVzUlVGQlFYTklMRVZCUVVFc2MwSkJRVUZETEVsQlYwRXNTVUZCVFVNc1JVRkJiVUlzVjBGRmNrSXNTVUZCVFdwRExFVkJRVk5uUWl4RlFVRlhhMElzVlVGQlZTeEpRVVZvUTBNc1JVRkJXU3hMUVVWYVF5eEZRVUZyUWl4RFFVTnNRa01zYjBKQlFXOUNMRVZCUTNCQ1F5eHhRa0ZCY1VJc1JVRkRja0pETEhGQ1FVRnpRaXhGUVVOMFFrTXNNRUpCUVRKQ0xFVkJRek5DUXl4MVFrRkJkMElzUlVGRGVFSkRMSGxDUVVFd1FpeExRVU14UWtNc2MwSkJRWFZDTEUxQlIzWkNReXhGUVVGclFpeERRVU5zUWtNc2FVSkJRV2xDTEVWQlEycENReXhsUVVGblFpeE5RVWRvUWtNc1JVRkJXU3hEUVVOYVF5eFpRVUZoTEVsQlFVbERMRWxCUTJwQ1F5eHpRa0ZCZFVJc1MwRkRka0pETEcxQ1FVRnZRaXhKUVVGSlJpeEpRVU40UWtjc2IwSkJRWEZDTEVsQlFVbElMRWxCUTNwQ1NTeE5RVUZQTEVsQlFVbERMRWxCUTFoRExGZEJRVmtzU1VGQlNVNHNTVUZEYUVKUExHVkJRV2RDTEVsQlFVbFFMRWxCUTNCQ1VTeGxRVUZuUWl4SlFVRkpVaXhMUVVkd1FsTXNSVUZCYTBJc1EwRkRiRUpETEZkQlFWa3NTMEZEV2tNc1kwRkJaU3hMUVVObVF5eHJRa0ZCYTBJc1IwRkhiRUpETEVWQlFXOUNMRU5CUTNCQ1F5eFhRVUZaTEVsQlFVbGtMRWxCUTJoQ1pTeFJRVUZUTEVsQlFVbG1MRXRCUjFoblFpeEZRVUU0UWl4SlFVRkphRUlzU1VGQlNTeERRVUZET1VVc1JVRkJjVUpCTEVWQlFYVkNRU3hKUVVWeVJpdEdMRVZCUVZORExGVkJRVlZETEU5QlEycENReXhGUVVFMlFrTXNXVUZCV1N4WFFVTjJRMG9zU1VGQlYwTXNWVUZCVlVNc1UwRkRja0pHTEVWQlFWTkRMRlZCUVZWRExGZEJRMGhxUXl4SFFVRmhRU3hGUVVGVmIwTXNWMEZCWVN4TFFVTm9SSFpGTEVWQlFVOVdMRXRCUVVzc01rTkJRMXByUml4TlFVZFVMRXRCUlVkRExFVkJRV3RDTEZOQlFWTXhRaXhGUVVGWE1rSXNSMEZEZUVNelFpeEZRVUZWT1VZc1VVRkJVU3hUUVVGVk1FZ3NSMEZEZUVKQkxFVkJRVk5FTEUxQlNWaEZMRVZCUVdkQ0xGZEJRMnhDTEVkQlFVbG9ReXhGUVVGblFrTXNaMEpCUzJoQ0xFOUJTa0UzUXl4RlFVRlBWQ3hMUVVGTExHMURRVU5hYzBZc1kwRkJZMnBETEVWQlFXZENSU3huUWtGRE9VSkdMRVZCUVdkQ1F5eHBRa0ZCYTBJc1QwRkRiRU5wUXl4SlFVZEtPVVVzUlVGQlQxZ3NUVUZCVFN4eFFrRkRZamhETEVWQlFWVTBReXhMUVVGTFF5eEZRVUYxUWpkSExFbEJRM1JEZVVVc1JVRkJaMEpETEdsQ1FVRnJRaXhIUVVkb1EyOURMRVZCUVdFc1YwRkRaamRETEVWQlFXZENSeXh4UWtGQmRVSXNSVUZEZGtOSUxFVkJRV2RDU1N3d1FrRkJORUlzUlVGRE5VTktMRVZCUVdkQ1N5eDFRa0ZCZVVJc1JVRkRla05ITEVWQlFXZENReXhwUWtGQmEwSXNSVUZEYkVOVUxFVkJRV2RDUXl4dlFrRkJjVUlzUlVGRmNrTTJReXhoUVVGaE9VTXNSVUZCWjBKUExIVkNRVU0zUW10RExHTkJRV05xUXl4RlFVRm5Ra1VzWjBKQlF6bENiME1zWVVGQllUbERMRVZCUVdkQ1RTd3lRa0ZITTBKNVF5eEZRVUZyUWl4WFFVTndRaXhKUVUxSkxFZEJURUZ1Uml4RlFVRlBWaXhMUVVGTExIRkRRVU5hYlVZc1JVRkJaMEl4UWl4RlFVRlZVeXhuUWtGRk1VSjVRaXhKUVVWSmJrSXNSVUZCYTBKRExGZEJRVmR4UWl4TFFVRlBMRWRCUVV0MFFpeEZRVUZyUWtVc1VVRkJVVzlDTEV0QlFVOHNSVUZCUnl4RFFVTTNSU3hKUVVGSlF5eEZRVUZUTVVrc1RVRkJUVEpKTEV0QlFVdDRRaXhGUVVGclFrTXNWMEZCVjJoSUxGVkJRM0pFYzBrc1JVRkJVMEVzUlVGQlQwVXNUMEZCVHpWSkxFMUJRVTB5U1N4TFFVRkxlRUlzUlVGQmEwSkZMRkZCUVZGcVNDeFhRVU0xUkN0SExFVkJRV3RDUXl4WFFVRlhlVUlzVVVGRE4wSnlSQ3hGUVVGVk5FTXNTMEZCUzBNc1JVRkJkVUkzUnl4RlFVRnhRaXhEUVVGRGEwZ3NUMEZCVlVFc1MwRkhNVVZVTEVsQlEwRm9ReXhGUVVGblFrVXNaVUZCYVVKM1FpeFpRVUZaVFN4RlFVRmxMRXRCUlRWRWVFTXNSVUZCWjBKUExITkNRVUYzUWpoRExGZEJRVmNzVjBGREwwTjZSaXhGUVVGUFdDeE5RVUZOTEd0RVFVTmllVVlzUzBGRFJDeEpRVUZQY0VJc1JVRkJaMEpETEZkQlFWY3JRaXh0UWtGQmJVSkRMRFJDUVVNeFJDeE5RVUZQYmtjc1IwRkRURkVzUlVGQlQxSXNUVUZCVFN3d1JFRkJNa1JCTEV0QlNURkZiMGNzUlVGQmJVSXNVMEZCVTBNc1IwRkRNVUo2UkN4RlFVRm5Ra2NzYzBKQlFYZENMRWRCUTNoRGEwTXNSVUZCWjBJeFFpeEZRVUZWVlN4blFrRkZPVUo2UkN4RlFVRlBWaXhMUVVGTExIVkRRVUYzUTNWSExFZEJRMmhFZWtRc1JVRkJaMEpETEc5Q1FVTm9RbmxFTEV0QlNVWkRMRVZCUVcxQ0xGTkJRVk5HTEVkQlF6bENOMFlzUlVGQlQxSXNUVUZCVFN4M1EwRkJlVU54Unl4SFFVTjBSR1lzUzBGSFJXdENMRVZCUVhGQ0xGTkJRVk5JTEVkQlEyaEROMFlzUlVGQlQxZ3NUVUZCVFN4NVEwRkJNRU4zUnl4RlFVRk5lRWdzVFVGRE4wUXNTVUZCVFhGSExFVkJRVmM1UXl4TFFVRkxjVVVzVFVGQlRVb3NSVUZCVFhoSUxFMUJRMnhETEU5QlFWRnhSeXhGUVVGVGNrSXNUMEZEWWl4TFFVRkxiRVlzUlVGREswSXNXVUZCTlVKMVJ5eEZRVUZUZDBJc1VVRkJVVU1zVVVGRGFrSjZRaXhGUVVGVGQwSXNVVUZCVVdJc1QwRkJUM0JKTEZGQlFWTXNVMEZCVlcxS0xFZEJRM1pEZEVNc1JVRkJhMEpETEZkQlFWZHpReXhKUVVGSlJDeEhRVU5xUTNSRExFVkJRV3RDUlN4UlFVRnNRaXhQUVVGcFEyOURMRXRCUlhKRE0wSXNSVUZCWjBJeFFpeEZRVUZWU1N4dFFrRkJiMEoxUWl4SlFVVTVRMFFzUlVGQlowSXhRaXhGUVVGVlN5eHZRa0ZCY1VKelFpeEhRVVZ1UkN4TlFVTktMRXRCUVV0MlJ5eEZRVU5FTmtJc1JVRkJUMWdzVFVGQlRTd3JRa0ZEWW5WRUxFVkJRV2RDUXl4cFFrRkJhMElzUlVGRGJFTXNUVUZEU2l4UlFVTkpMRWRCUVVrMlFpeEZRVUZUY2tJc1RVRkJUeXhEUVVOb1FpeEhRVUZyUXl4SlFVRTVRazRzUlVGQlZWRXNWMEZCVnpaQ0xFMUJRWFZETEVsQlFYcENja01zUlVGQlZVMHNUVUZCVFN0Q0xFdEJSVzVFTEZsQlJFRndSaXhGUVVGUFZDeExRVUZMTERoRFFVRXJRMjFHTEVkQlJ5OUVSQ3hGUVVGblFqRkNMRVZCUVZWUkxGZEJRVmx0UWl4SFFVTnNRek5DTEVWQlFWVk5MRTFCUVUxcFJDeEpRVUZKTlVJc1JVRkJVM0pDTEZGQlF6ZENiMElzUlVGQlowSXhRaXhGUVVGVlRTeE5RVUZOY2trc1NVRkJTVEJLTEVWQlFWTnlRaXhQUVVGUmNVSXNVVUZGYkVSQkxFVkJRVk55U1N4UlFVTm9RakpFTEVWQlFVOVVMRXRCUVVzc01FTkJRVEpEYlVZc1IwRkZka1F4UlN4RlFVRlBWQ3hMUVVGTExHOURRVUZ4UTIxR0xFdEJTek5FTmtJc1JVRkJhVUlzVTBGQlUwTXNSMEZETlVJc1UwRkJTWEpGTEVkQlFXRkJMRVZCUVZWdlF5eGhRVUZsYTBNc1ZVRkJWVU1zVlVGRGFFUjJSU3hGUVVGVmQwVXNUVUZCVFN4SlFVRk5TQ3hKUVVObUxFbEJTMVF4UWl4RlFVRTJRaXhYUVVNeFFsb3NSMEZKVEdkQ0xHRkJRV0U1UXl4RlFVRm5RazhzZFVKQlF6ZENhME1zWTBGQlkycERMRVZCUVdkQ1JTeG5Ra0ZGTVVKV0xFVkJRV2RDUnl4eFFrWjRUR1VzUjBWNVRDOUNTQ3hGUVVGblFrY3NkVUpCUTJoQ2RrTXNSVUZCVDFnc1RVRkJUU3gxUkVGQmVVUXJReXhGUVVGblFrY3NjMEpCUTNSR1NDeEZRVUZuUWtNc2IwSkJRWEZDTEVWQlEzSkRiVU1zUzBGRFQzQkRMRVZCUVdkQ1NTd3dRa1kxVEdFc1IwVTJUSEJEU2l4RlFVRm5Ra2tzTkVKQlEyaENTaXhGUVVGblFrc3NkMEpCUVRCQ0xFVkJRekZEZWtNc1JVRkJUMWdzVFVGQlRTeDFSRUZEVUN0RExFVkJRV2RDU1N3d1FrRkJORUlzWlVGRE5VTktMRVZCUVdkQ1N5eDFRa0ZCZVVJc1UwRkhMME5wUWl4RlFVRm5Ra2NzYTBKQlFXMUNMRVZCUTI1RFNDeEZRVUZuUWtNc1YwRkJZU3hMUVVVM1FuWkNMRVZCUVdkQ1RTeDVRa0ZCTWtJclF5eFhRVUZYTEZkQlEyeEVja1FzUlVGQlowSkRMRzlDUVVGeFFpeEZRVU55UTIxRExFdEJRMFFzU1VGQlQzQkRMRVZCUVdkQ1N5eDVRa0ZEYmtKcFFpeEZRVUZuUWtjc2JVSkJRM1pDTjBRc1JVRkJUMUlzVFVGQlRTeDVSRUZEWW05SUxFMUJOVUpCVEN4RlFVRmxMQ3REUVdkRGFrSkxMRVZCUVRSQ0xGZEJRemxDTTBJc1NVRkRRWE5DTEVWQlFXVXNhVU5CUTJaMlJ5eEZRVUZQVWl4TlFVRk5MRzFEUVVOaU5FTXNSVUZCWjBKRkxIRkNRVUZ6UWl4RlFVTjBRM1ZETEdOQlFXTlNMRWRCUTJSSkxFVkJRV2RDTVVJc1JVRkJWVU1zWTBGSGVFSm5ReXhGUVVGNVFpeFRRVUZWZEVvc1JVRkJTM2RMTEVkQlF6RkRMRTlCUVU5MFJTeExRVUZMUXl4VlFVRlZMRU5CUTJ4Q2QwSXNUVUZCVXpOSUxFVkJRMVIzU3l4UlFVRlhRU3hMUVhGRFlsY3NSVUZCTWtJc1UwRkJWV3hFTEVkQlEzWkRMRk5CUVVsNFNDeEZRVUZOT0VJc1UwRkJVekJHTEVsQlFXVjRTQ3hGUVVGTk9FSXNVMEZCVXpCR0xFVkJRVmNyUWl4eFFrRkRja1IyU2l4RlFVRk5jMElzVTBGQlUydEhMRVZCUVZjclFpeHRRa0ZCYlVKdlFpeE5RVU0zUXpOTExFVkJRVTB3UWl4WFFVRlhPRVlzUlVGQlZ5dENMRzFDUVVGdFFtOUNMRTFCUXk5RE0wc3NSVUZCVFhWQ0xGTkJRVk5wUnl4RlFVRlhLMElzYlVKQlFXMUNReXcyUWtGRGFFUm9ReXhGUVVGWEswSXNiVUpCUVcxQ1F5dzBRa1o2VVVvc1VVVTBVVGxDTTBZc1JVRkJUMUlzVFVGQlRTdzJRMEZCT0VOdFJTeEpRVU53UkN4SlFVZE1ZU3hGUVVGNVFpeFhRVU4yUW5CRExFVkJRV2RDUlN4elFrRkhjRUp2UWl4RlFVRm5Ra01zVjBGQllTeExRVU0zUWtRc1JVRkJaMEpITEd0Q1FVRnRRaXhGUVVOdVEwZ3NSVUZCWjBKRkxHTkJRV2RDWWl4RlFVRlZSeXgzUWtGRE1VTlJMRVZCUVdkQ1JTeGpRVU5ZYlVRc1MwRkJTeXhUUVVGVGNrTXNSMEZEVUdoQ0xFVkJRV2RDUnl4clFrRkJiVUlzUlVGRGJrTTNSQ3hGUVVGUFdDeE5RVUZOTERKRVFVTlNkMGdzUlVGQmVVSnVReXhKUVVrNVFtaENMRVZCUVdkQ1F5eFhRVUZoWlN4RlFVTjRRbElzU1VGSFJIRkRMRVZCUVdVc2FVTkJSMjVDVkN4TlFWWkpZeXhMUVZsU0xGTkJRVk5LTEVkQlEwdzVReXhGUVVGblFrY3NhMEpCUVcxQ0xFVkJRMjVETjBRc1JVRkJUMUlzVFVGQlRTeHhSRUZCYzBSblNDeEhRVU51UlRGQ0xGRkJTVlpuUWl4RlFVRm5RaXhYUVVOc1FpeEpRVUZKTVVRc1JVRkJaMEpGTEc5Q1FVRndRaXhEUVVkQmRFTXNSVUZCVDFnc1RVRkJUU3hyUTBGRFlpeEpRVU5SZDBnc1JVRkJlVUp1UkN4RlFVRm5Ra01zWTBGRmVrTjRRaXhGUVVGWkxFbEJRVWx6UlN4VlFVRlZMME1zUlVGQlowSkRMRmRCUVZjclFpeHRRa0ZCYlVKdlFpeE5RVU01UkVVc2FVSkJRV2xDTEU5QlFWRTNRaXhIUVVOdVEyaEVMRVZCUVZVMlJTeHBRa0ZCYVVJc1ZVRkJWMmhDTEVkQlEzUkROMFFzUlVGQlZUWkZMR2xDUVVGcFFpeFJRVUZUYWtJc1IwRkRjRU0xUkN4RlFVRlZOa1VzYVVKQlFXbENMRkZCUVZOd1FpeEpRVVZvUTJ4RExFVkJRV2RDUnl4clFrRkRhRUlyUXl4SlFVZFdMRTFCUVU5d1NDeEhRVU5NVVN4RlFVRlBVaXhOUVVGTkxIZERRVUY1UTBFc1IwRkRkRVJ2U0N4UFFYVkZVaTlJTEV0QlFVdHZTU3hMUVhoRFVTeFRRVUZUUXl4SFFVTnNRaTlMTEVWQlFVMUpMRmRCUVZkS0xFVkJRVTF6Uml4WFFVRlhlVVlzUjBGQmEwSXNjME5CUTFvc1QwRkJjRU51UlN4RlFVRlZSeXgxUWtGSlpFZ3NSVUZCVlVjc2MwSkJRWGRDWjBVc1JVRkZiRU14UXl4TFFVeEplRVVzUlVGQlQxUXNTMEZCU3l3clEwRnpRM0JDVml4TFFVRkxjMGtzWTBGc1JHbENMRk5CUVZORExFZEJUVE5DTEU5QlRFRnFUQ3hGUVVGTlNTeFhRVUZYU2l4RlFVRk5jMFlzVjBGQlZ6SkdMRWRCUVVzc2VVSkJRM1pEY2tVc1JVRkJWVU1zV1VGQldYRkVMRWxCUVVsbExFZEJRM1JDYUVZc1JVRkJaMEpGTEhGQ1FVTm9RamhGTEVsQlJVY3NhMEpCUVUxeVJTeEZRVUZWUXl4WlFVRldMRTlCUVRaQ2IwVXNTMEUyUXpsRGRra3NTMEZCUzNkSkxHbENRWEpGYjBJc1UwRkJVMFFzUjBGTk9VSXNUMEZNUVdwTUxFVkJRVTFKTEZkQlFWZEtMRVZCUVUxelJpeFhRVUZYTWtZc1IwRkJTeXg1UWtGRGRrTnlSU3hGUVVGVlV5eGxRVUZsTmtNc1NVRkJTV1VzUjBGRGVrSnFSaXhIUVVGaFFTeEZRVUZWYjBNc1lVRkJaV3RETEZWQlFWVmhMRTFCUTJoRVJpeEpRVVZITEd0Q1FVRk5ja1VzUlVGQlZWTXNaVUZCVml4UFFVRm5RelJFTEV0QlowVnFSSFpKTEV0QlFVc3dTU3hwUWtFM1JHOUNMRk5CUVZOSUxFZEJUVGxDTEU5QlRFRnFUQ3hGUVVGTlNTeFhRVUZYU2l4RlFVRk5jMFlzVjBGQlZ6SkdMRWRCUVVzc2VVSkJRM1pEY2tVc1JVRkJWVlVzWlVGQlpUUkRMRWxCUVVsbExFZEJRM3BDYWtZc1IwRkJZVUVzUlVGQlZXOURMR0ZCUVdWclF5eFZRVUZWUXl4UlFVTm9SRlVzU1VGRlJ5eHJRa0ZCVFhKRkxFVkJRVlZWTEdWQlFWWXNUMEZCWjBNeVJDeExRWGRFYWtSMlNTeExRVUZMTWtrc2NVSkJha04zUWl4VFFVRlRTaXhIUVVkc1F5eFBRVVpCYWt3c1JVRkJUVWtzVjBGQlYwb3NSVUZCVFhOR0xGZEJRVmN5Uml4SFFVRkxMSGxDUVVOMlEzSkZMRVZCUVZWSkxHMUNRVUZ0UW10RUxFbEJRVWxsTEVkQlF6RkNMR3RDUVVGTmNrVXNSVUZCVlVrc2JVSkJRVllzVDBGQmIwTnBSU3hMUVN0Q2NrUjJTU3hMUVVGTE5Fa3NjMEpCTlVKNVFpeFRRVUZUVEN4SFFVZHVReXhQUVVaQmFrd3NSVUZCVFVrc1YwRkJWMG9zUlVGQlRYTkdMRmRCUVZjeVJpeEhRVUZMTEhsQ1FVTjJRM0pGTEVWQlFWVkxMRzlDUVVGdlFtbEVMRWxCUVVsbExFZEJRek5DTEd0Q1FVRk5ja1VzUlVGQlZVc3NiMEpCUVZZc1QwRkJjVU5uUlN4TFFUQkNkRVIyU1N4TFFVRkxOa2tzVlVGMlFtRXNVMEZCVTNSQ0xFVkJRVmRuUWl4SFFWRnNReXhQUVZCQmFrd3NSVUZCVFhkTUxHTkJRV04yUWl4RlFVRlhMR0ZCUXk5Q2Frc3NSVUZCVFVrc1YwRkJWMG9zUlVGQlRYTkdMRmRCUVZjeVJpeEhRVUZMTEhsQ1FVTnVRM0pGTEVWQlFWVk5MRTFCUVUxcFJDeEpRVUZKUml4SFFVTndRbkpFTEVWQlFWVk5MRTFCUVUxeVNTeEpRVUZKYjB3c1IwRkJWME1zU1VGQlNXVXNSMEZGYmtOeVJTeEZRVUZWVFN4TlFVRk5kVVVzU1VGQlNYaENMRVZCUVZjc1NVRkJTVzVFTEVsQlFVa3NRMEZCUTIxRkxFdEJSWEpETEd0Q1FVRk5ja1VzUlVGQlZVMHNUVUZCVFhKSkxFbEJRVWx2VEN4SFFVRndRaXhQUVVGelEyZENMRXRCWjBKMlJIWkpMRXRCUVV0blNpeGhRV0puUWl4VFFVRlZWQ3hIUVVjelFpeFBRVVpCYWt3c1JVRkJUVWtzVjBGQlYwb3NSVUZCVFhOR0xGZEJRVmN5Uml4SFFVRkxMSGxDUVVOMlEzSkZMRVZCUVZWUkxGZEJRVmM0UXl4SlFVRkpaU3hIUVVOc1FpeHJRa0ZCVFhKRkxFVkJRVlZSTEZkQlFWWXNUMEZCTkVJMlJDeExRVmMzUTNaSkxFdEJRVXRwU2l4blFrRXpTbTFDTEZOQlFWTjZReXhIUVVNM1FteEtMRVZCUVUxM1RDeGpRVUZqZEVNc1JVRkJVU3hWUVVNMVFteEtMRVZCUVUwMFRDeGhRVUZoTVVNc1IwRkZia0pCTEVWQlFVOXdTU3hSUVVGUkxGTkJRVlZ2Unl4SFFVTnlRbE1zUlVGQmEwSkZMRkZCUVZGeFF5eEpRVUZKYUVRc1MwRkhPVUpzUWl4SFFVRmhRU3hGUVVGVmIwTXNZVUZCWld0RExGVkJRVlZoTEUxQlEyaEVia1lzUlVGQlZUUkRMRXRCUVV0RExFVkJRWFZDTjBjc1JVRkJjVUlzUTBGQlEydElMRTlCUVZWQkxFMUJiVW81UlhoSExFdEJRVXR0U2l4WlFXaE1aU3hUUVVGVFF5eEhRVVY2UWl4SFFVUkJPVXdzUlVGQlRUWkNMR1ZCUVdWcFN5eEZRVUZUTEdkQ1FVTlNla3dzU1VGQmJFSjVUQ3hGUVVGUk5VVXNUMEZCZFVKWkxFVkJRVFJDY1VNc1NVRkJTVEpDTEVWQlFWRTFSU3hQUVVOMlJYSkVMRVZCUVU5VUxFdEJRVXNzY1VOQlFYTkRNRWtzVDBGRWRFUXNRMEZKUVN4SlFVTkpRU3hGUVVGVmNrY3NTMEZCUzBNc1ZVRkJWVzlITEVkQlF6TkNMRTFCUVU5NlNTeEhRVVZNTEZsQlJFRlJMRVZCUVU5VUxFdEJRVXNzTUVKQlFUSkNNRWtzUjBGSGRrTTVSaXhIUVVGaFFTeEZRVUZWYjBNc1lVRkJaV3RETEZWQlFWVmhMRTFCUTJoRWRFZ3NSVUZCVDFnc1RVRkJUU3h0UTBGQmIwTTBTU3hIUVVOcVJEbEdMRVZCUVZVMFF5eExRVUZMYTBRc1NVRkZabXBKTEVWQlFVOVVMRXRCUVVzc05FUkJhMHR3UWxZc1MwRkJTekJJTEdWQlFXbENMRmRCUTJ4Q2RFSXNTVUZEUVVvc1kwRkJZMUlzUjBGRFpHdERMRVZCUVdVc2NVTkJZV3BDZGtVc1JVRkJlVUlzUTBGRE0wSjJSeXhQUVZablF5eFhRVU5vUXl4UFFVRlBMRWxCUVVsM1J5eEhRVlZZYVVjc1owSkJVRzlDTEZOQlFVRnVTU3hIUVVOd1FpeEpRVUZOYjBrc1JVRkJaWEJKTEVWQlFVOXZTU3hoUVVNMVFtNUlMRVZCUVZkc1F5eHRRa0ZCYlVKeFNpeEpRVTA1UWpkS0xGTkJRVlZCTEVWQlExWkdMRTlCUVZGQkxFa3NaMEpEYUdKYUxFbEJRVUZuU3l4SFFVVkRMRmRCUTBjc1lVRkZRU3hKUVVGSlF5eEZRVUZMTEVOQlEweERMRmRCUVZrc1QwRkRXa01zVTBGQlZTeFBRVU5XUXl4VFFVRlZMRTlCUTFaRExHTkJRV1VzVDBGRFprTXNUMEZCVVN4VlFVTlNReXhaUVVGaExHVkJRMkpETEV0QlFVMHNUVUZEVGtNc1UwRkJWU3hQUVVOV1F5eExRVUZOTEZsQlEwNURMRTlCUVZFc1YwRkRVa01zV1VGQllTd3lSa0ZEWW5ST0xFbEJRVXNzYzBKQlEweDFUaXhYUVVGWkxIZENRVU5hUXl4aFFVRmpMR0ZCUTJSRExFdEJRVTBzVTBGSFZpeFRRVUZUZWswc1JVRkJVV2hDTEVkQlJXSXNUMEZQU2l4VFFVRjNRakJPTEVWQlFWbERMRWRCUTJoRExFbEJRV2xFT1Vnc1JVRkJhMEp3U0N4RlFVRkhiVkFzUlVGQlIwTXNSVUZCU1VNc1JVRkJTME1zUlVGQlpVTXNSVUZCV1VNc1JVRkJZVklzUlVGQmRFaFRMRVZCUVZNc1JVRkJSME1zUlVGQlkxUXNSVUZCVjNSTkxFOUJRV0ZuVGl4RlFVRlRMRWRCUXk5RUxFbEJRVXN6VUN4RlFVRkpMRVZCUVVkQkxFVkJRVWt3VUN4RlFVRmhNVkFzU1VGRGVrSXNSMEZCTmtJc2FVSkJRV3hDYVZBc1JVRkJWMnBRTEVkQlEyeENNbEFzUjBGQlZWWXNSVUZCVjJwUUxGRkJSWEJDTEVkQlFUWkNMR2xDUVVGc1FtbFFMRVZCUVZkcVVDeEhRVUZwUWl4RFFVVjRReXhKUVVSQmIxQXNSVUZCUzBnc1JVRkJWMnBRTEVsQlExUTBVQ3hMUVVWSUxFbEJSRUY0U1N4RlFVRk5PRWdzUlVGQlMwOHNSMEZEVGs0c1JVRkJTU3hGUVVGSFFTeEZRVUZKUXl4RlFVRkhVU3hMUVVGTGFrNHNUMEZCVVhkTkxFbEJRVXNzUTBGRGFrTXNSMEZCVnpsTkxFMUJRVkFyUlN4RlFVTkJMRTFCUVUwc1NVRkJTV3BHTEUxQlFVMUpMRVZCUVZFc1owVkJRV2xGTmswc1JVRkJSMUVzUzBGQlMxUXNSMEZCU1VNc1JVRkJSMUVzUzBGQlMxUXNSVUZCUlN4TFFVVnVTQzlJTEVWQlFVMUJMRVZCUVVsblNTeEZRVUZIVVN4TFFVRkxWQ3hUUVVsMFFpOUlMRVZCUkV0blNTeEZRVUZIVXl4VFFVTkdXQ3hGUVVGTFJTeEZRVUZIVXl4VlFVZFNXQ3hGUVVGTFR5eExRVTltTEVkQlNrbDJRaXhGUVVGSFJ5eFRRVUZUZWtzc1MwRkJTM2RNTEVWQlFVZFZMRTlCUVZNMVFpeEZRVUZIU1N4alFVRmpNVXNzUzBGQlMzZE1MRVZCUVVkVkxFOUJRVk14U1N4aFFVRmxNa2tzVjBGRE9VVXpTU3hGUVVGTlFTeExRVWRPT0Vjc1JVRkJSMDBzV1VGQldUVkxMRXRCUVV0M1RDeEZRVUZIVlN4UFFVRjVRaXhwUWtGQlVqRkpMRWRCUVc5Q05Fa3NUVUZCVFRWSkxFZEJRMnhGTEUxQlFVMHNTVUZCU1RaSkxGVkJRVlV4VGl4RlFVRlJMREJEUVVFeVF6WkZMRWxCVHpORkxFOUJTa2s0Unl4RlFVRkhTeXhQUVVGUE0wc3NTMEZCUzNkTUxFVkJRVWRWTEZGQlEyeENUaXhGUVVGamNFa3NSMEZCVHl4SFFVZHFRbWRKTEVWQlFVZFZMRTFCUTFBc1NVRkJTeXhKUVVORU1Va3NSVUZCVFRoSkxGTkJRVk01U1N4RlFVRkxMRWxCUVVsSExGTkJRVk1zUjBGRGFrTXNUVUZEU2l4SlFVRkxMRWxCUTBSSUxFVkJRVTByU1N4UFFVRlBReXhoUVVGaFJpeFRRVUZUT1Vrc1JVRkJTeXhMUVVONFF5eE5RVU5LTEVsQlFVc3NTVUZEVEN4SlFVRkxMRWxCUTBSQkxFVkJRVTA0U1N4VFFVRlRPVWtzUlVGQlN5eEpRVU53UWl4TlFVTktMRWxCUVVzc1NVRkRSRUVzUlVGQlRVc3NTMEZCUzBNc1ZVRkJWVTRzUlVGQlN5eExRVUZOWjBrc1JVRkJSMmxDTEUxQlFWRklMRk5CUVZOa0xFVkJRVWRwUWl4UFFVRlRMRWRCUTJoRkxFMUJRMG9zU1VGQlN5eEpRVU5FYWtvc1JVRkJUV2RKTEVWQlFVZHJRaXhWUVVGWlF5eFhRVUZYYmtvc1IwRkJTMjlLTEdOQlFXTndRaXhGUVVGSGEwSXNWMEZCWVVNc1YwRkJWMjVLTEVkQlFVdHZTaXhuUWtGRGJrWXNUVUZEU2l4SlFVRkxMRWxCUTBSd1NpeEZRVUZOWjBrc1JVRkJSMnRDTEZWQlFWbERMRmRCUVZkdVNpeEhRVUZMY1Vvc1VVRkJVWEpDTEVWQlFVZHJRaXhYUVVGaFF5eFhRVUZYYmtvc1IwRkRlRVVzVFVGRFNpeEpRVUZMTEVsQlEwUkJMRVZCUVUxblNTeEZRVUZIYTBJc1ZVRkJXVWdzVDBGQlQwOHNUMEZCVDNSS0xFVkJRVWwxU2l4WlFVRlpka0lzUlVGQlIydENMR0ZCUVdWRExGZEJRVmR1U2l4SFFVTm9SaXhOUVVOS0xFbEJRVXNzU1VGRFJFRXNSMEZCVHpoSkxGTkJRVk01U1N4RlFVRkxMRTFCUVZFc1IwRkJSMGNzVTBGQlV5eEhRVU42UXl4TlFVTktMRWxCUVVzc1NVRkRSRWdzUlVGQlRTdEpMRTlCUVU4dlNTeEhRVU5pUVN4RlFVRlBaMGtzUlVGQlIydENMRlZCUVZsc1NpeEZRVUZKZDBvc1ZVRkJWU3hGUVVGSGVFSXNSVUZCUjJ0Q0xGZEJRV0ZzU2l4RlFVTjJSQ3hOUVVOS0xFbEJRVXNzU1VGRFJFRXNSVUZCVFN0SkxGTkJRVk12U1N4SFFVTm1RU3hGUVVGUFowa3NSVUZCUjJ0Q0xGVkJRVmxzU2l4RlFVRkpkMG9zVlVGQlZTeEZRVUZIZUVJc1JVRkJSMnRDTEZkQlFXRnNTaXhGUVVOMlJDeE5RVU5LTEVsQlFVc3NTVUZEUkVFc1JVRkJUVEZITEU5QlFVOXJRaXhWUVVGVk1rWXNVMEZCVTNCSUxFdEJRVXRwU0N4SFFVRkxlVW9zVFVGQlRTeEhRVUZKTEVkQlFVZERMR05CUTNaRU1Vb3NSVUZCVDJkSkxFVkJRVWRyUWl4VlFVRlpiRW9zUlVGQlNYZEtMRlZCUVZVc1JVRkJSM2hDTEVWQlFVZHJRaXhYUVVGaGJFb3NSVUZEZGtRc1RVRkRTaXhKUVVGTExFbEJRMFJCTEVWQlFVMDRTU3hUUVVGVE9Va3NSVUZCU3l4TlFVRlJMRVZCUXpWQ0xFMUJRMG9zU1VGQlN5eEpRVU5FUVN4RlFVRk5RU3hGUVVGSk1rb3NWVUZEVmpOS0xFVkJRVTluU1N4RlFVRkhhMElzVlVGQldXeEtMRVZCUVVsM1NpeFZRVUZWTEVWQlFVZDRRaXhGUVVGSGEwSXNWMEZCWVd4S0xFVkJRM1pFTEUxQlEwb3NTVUZCU3l4SlFVTkVRU3hIUVVGUE9Fa3NVMEZCVXpsSkxFVkJRVXNzVFVGQlVTeEhRVUZIUnl4VFFVRlRMRWxCUTNwRExFMUJRMG9zU1VGQlN5eEpRVU5FU0N4SFFVRlBPRWtzVTBGQlV6bEpMRVZCUVVzc1RVRkJVU3hIUVVGSFJ5eFRRVUZUTEVsQlFVbHlSU3hqUVVkcVJHZE1MRVZCUVVkUExFdEJRVXMzU3l4TFFVRkxkMHdzUlVGQlIxVXNUVUZEYUVKSUxFZEJRVlYyU1N4SlFVZE9PRWNzUlVGQlIwc3NUMEZCVHpOTExFdEJRVXQzVEN4RlFVRkhWU3hQUVVGWFRpeEpRVUZsU2l4RlFVRkhTaXhMUVVzdlEwRXNSVUZCVHl4SlFVcFFRU3hGUVVGUFVTeEZRVUZqTEVsQlFVMHNTVUZETTBKd1NTeEZRVUZOUVN4RlFVRkpSeXhYUVVGWGVFVXNVVUZCVVcxTUxFVkJRVWRqTEV0QlFVMHNTMEZMTVVOTkxFVkJRV2RDUml4RlFVRkhORUlzVTBGQk1rSXNUVUZCYUVJMVFpeEZRVUZITkVJc1UwRkJiVUlzU1VGQlRUVkNMRVZCUVVjMFFpeFRRVUZUUXl4UFFVRlBMRWRCUVVzc1NVRkRiRVl4UWl4RlFVRmhTQ3hGUVVGSGFVSXNUMEZCVTNKQ0xFVkJRVTgxU0N4SFFVRkxla1VzVDBGRGNrTXdUU3hGUVVGTlJDeEZRVUZIYVVJc1QwRkJVMlFzUlVGQllTeEZRVUZKUkN4RlFVRmpORUlzVDBGQlR6TkNMRWRCUVc5Q0xFZEJRelZGU1N4SFFVRlZVQ3hGUVVGSEswSXNUVUZCVVc1RExFVkJRVTgxU0N4RlFVRk5hVWtzUlVGQmVVSXNUVUZCYkVKRExFVkJRWGRDVGl4RlFVRlBTeXhGUVVGTmFra3NSVUZCVFdsSkxFVkJRVTFNTEVWQlFVODFTQ3hIUVVrM1J5eFBRVUZQZFVrc1JVRnFTRUY1UWl4RFFYTklXQ3hUUVVGMVFrTXNSMEZEYmtJc1IwRkJTVU1zUlVGQlkwUXNSMEZEWkN4UFFVRlBReXhGUVVGalJDeEhRVWQ2UWl4SlFVRm5Ra1VzUlVGQldrTXNSVUZCVDBnc1JVRkJXWEJETEVWQlFXRXNSMEZCU1hkRExFVkJRVmtzUlVGRGNFUXNTMEZCVDBRc1IwRkJUU3hEUVVOVUxFZEJRWEZETEZGQlFXaERSQ3hGUVVGUmNrUXNSVUZCUjFNc1MwRkJTeXRETEV0QlFVdEdMRWxCUTNSQ2RrTXNSVUZCVnpCRExFdEJRVXRLTEVWQlFVMHNVMEZGY2tJc1IwRkJkVU1zVVVGQmJFTkJMRVZCUVZGeVJDeEZRVUZIVlN4UFFVRlBPRU1zUzBGQlMwWXNTVUZETjBKMlF5eEZRVUZYTUVNc1MwRkJTeXhUUVVWbUxFbEJRVFJETEZGQlFYWkRTaXhGUVVGUmNrUXNSVUZCUjFjc1dVRkJXVFpETEV0QlFVdEdMRWxCTmtOc1F5eE5RVUZOTEVsQlFVbEpMRmxCUVZrc2IwTkJOVU4wUWl4SFFVRkpUQ3hGUVVGTkxFZEJRVWtzUTBGRFZrVXNSMEZCWVN4RlFVTmlMRWxCUVVsSkxFVkJRV0VzUjBGQlNVTXNSVUZCYjBKUUxFVkJRVTBzUjBGQlNWRXNSVUZCWXl4SFFVTnFSU3hIUVVGMVJDeFJRVUZzUkVFc1JVRkJZemRFTEVWQlFVY3pUU3hKUVVGSmJWRXNTMEZCUzBrc1NVRmxNMElzVFVGQlRTeEpRVUZKUml4WlFVRlpMR2RFUVdKMFFpeEpRVVJCUXl4RlFVRlhSaXhMUVVGTFNTeEZRVUZaTEVsQlEzZEVMRTFCUVRWRlJDeEZRVUZ2UWtFc1JVRkJhMEpzUWl4VlFVRlZiVUlzUlVGQldTeEhRVUZIY0ZBc1ZVRkRia1VzUjBGQk9FUXNVVUZCZWtSdlVDeEZRVUZqTjBRc1JVRkJSMWtzVjBGQlZ6UkRMRXRCUVV0SkxFbEJRMnhEUkN4RlFVRlhSaXhMUVVGTFNTeEZRVUZaTEZGQlJUTkNMRWxCUVdkRkxGRkJRVE5FUVN4RlFVRmpOMFFzUlVGQlIyRXNZVUZCWVRKRExFdEJRVXRKTEVsQlNYcERMRTFCUVUwc1NVRkJTVVlzV1VGQldTeG5SRUZJZEVKRExFVkJRVmRHTEV0QlFVdEpMRVZCUVZrc1NVRlZlRU5TTEVWQlFVMHNSMEZCUzAwc1QwRkhXRW9zUjBGQllTeEZRVVZxUWl4SFFVRnJRaXhKUVVGa1FTeEZRVU5CTEUxQlFVMHNTVUZCU1hSUUxFMUJRVTBzTmtWQlIzQkNPRTBzUlVGQlZ6QkRMRXRCUTFBc1EwRkRTVGxETEZsQlFXRXdReXhGUVVGTkxFZEJRMjVDTVVJc1UwRkJZVEJDTEVWQlFVMHNSMEZEYmtJelFpeExRVUZoTWtJc1JVRkJUU3hIUVVOdVFuWkRMRXRCUVdGMVF5eEZRVUZOTEVkQlEyNUNVQ3hUUVVGaFR5eEZRVUZOTEVkQlEyNUNTaXhOUVVGaFNTeEZRVUZOTEVkQlEyNUNiRUlzVFVGQllXdENMRVZCUVUwc1IwRkRia0pxUWl4VlFVRmhhVUlzUlVGQlRTeEhRVU51UW5wQ0xFdEJRV0Y1UWl4RlFVRk5MRXRCVHk5Q1F5eEZRVUZQUVN4RlFVRkxXaXhWUVVGVlZ5eEZRVUZOTEVkQlFVYzFUeXhSUVVWdVF5eFBRVUZQTWs4c1JVRkJZMFFzUjBGQlQzQkRMRVZCY0V4T0swTXNRMEZCWTNwUkxFZEJRVTAwUlN4WFFVYzVReXhUUVVGVE9Fd3NSVUZCVTFvc1JVRkJTMjVETEVkQlEyNUNMRTlCUVU4elRTeEZRVUZSWXl4TlFVRk5MRXRCUVUwc1EwRkJRMmRQTEVkQlFVdHFSeXhQUVVGUE9FUXNSMEZCVVN4TFFXZEljRVFzU1VGQlNXOURMRVZCUVdkQ05WRXNUMEZCVDFrc1QwRkJUeXhOUVhkRk9VSjRRaXhGUVVGcFFpeFJRVUZKZVVNc1JVRkRja0o2UXl4RlFVRnJRaXhUUVVGSmJWTXNSVUZGU2l4dlFrRkJXRU1zVTBGRFVFRXNUMEZCWjBJc1VVRkJTVE5RTEVWQlEzQkNNbEFzVDBGQmFVSXNVMEZCU1VRc1QwRlJhRUkxVUN4TFFVeEVORXdzUlVGQlFTeFhRVU5KTEUxQlFVOHNRMEZEU0RGTUxGRkJRVmRCTEVWQlExZ3dVQ3hUUVVGWlFTeEpRVVZ1UWpsU0xFdEJRVUZNTEVWQlFVRkdMRVZCUVVGRkxFVkJRVUZETEZGQlFVRkVMRkZCUVVGdFR5eEpRV2hQV2l4SkxEWkNRMFpFY2s4c1JVRkJRV3RDTEVWQlFVRTRSeXhIUVVGQkxGTkJRVUYxU3l4SFFVRkJkbE1zUlVGQlFWVXNSVUZCUVhOSUxFVkJRVUVzY1VOQlFVRkZMRWxCUVVFc1NVRkJRWE5MTEVWQlFVRjRVeXhGUVVGQkxFZEJSMEYxVXl4RlFVRlBSU3hSUVVGVlJpeEZRVUZQUlN4VFFVRlhMRWRCUTI1RFFTeFJRVUZSZGtzc2FVSkJRVzFDUkN4SlFVVndRaXhKUVVGTlF5eEZRVUZ0UWtRc1N5d3JRa05PYUVNc1NVRkJTWGxMTEVWQlIwcEJMRVZCUVVrc1YwRkRTQ3hQUVVGUE5VNHNTMEZFU2l4SFFVbEtMRWxCUlVNMFRpeEZRVUZKUVN4SFFVRkxMRWxCUVVsMlF5eFRRVUZUTEdOQlFXSXNSMEZEVWl4TlFVRlBkME1zUjBGRll5eHBRa0ZCV0V3c1UwRkJjVUpKTEVWQlFVbEtMRkZCVDNKRGJsTXNSVUZCVDBRc1VVRkJWWGRUSWl3aVptbHNaU0k2SW1GdFlYcHZiaTFqYjI1dVpXTjBMWGRsWW5OdlkydGxkQzF0WVc1aFoyVnlMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUlGeDBMeThnVkdobElHMXZaSFZzWlNCallXTm9aVnh1SUZ4MGRtRnlJR2x1YzNSaGJHeGxaRTF2WkhWc1pYTWdQU0I3ZlR0Y2JseHVJRngwTHk4Z1ZHaGxJSEpsY1hWcGNtVWdablZ1WTNScGIyNWNiaUJjZEdaMWJtTjBhVzl1SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4b2JXOWtkV3hsU1dRcElIdGNibHh1SUZ4MFhIUXZMeUJEYUdWamF5QnBaaUJ0YjJSMWJHVWdhWE1nYVc0Z1kyRmphR1ZjYmlCY2RGeDBhV1lvYVc1emRHRnNiR1ZrVFc5a2RXeGxjMXR0YjJSMWJHVkpaRjBwSUh0Y2JpQmNkRngwWEhSeVpYUjFjbTRnYVc1emRHRnNiR1ZrVFc5a2RXeGxjMXR0YjJSMWJHVkpaRjB1Wlhod2IzSjBjenRjYmlCY2RGeDBmVnh1SUZ4MFhIUXZMeUJEY21WaGRHVWdZU0J1WlhjZ2JXOWtkV3hsSUNoaGJtUWdjSFYwSUdsMElHbHVkRzhnZEdobElHTmhZMmhsS1Z4dUlGeDBYSFIyWVhJZ2JXOWtkV3hsSUQwZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwZ1BTQjdYRzRnWEhSY2RGeDBhVG9nYlc5a2RXeGxTV1FzWEc0Z1hIUmNkRngwYkRvZ1ptRnNjMlVzWEc0Z1hIUmNkRngwWlhod2IzSjBjem9nZTMxY2JpQmNkRngwZlR0Y2JseHVJRngwWEhRdkx5QkZlR1ZqZFhSbElIUm9aU0J0YjJSMWJHVWdablZ1WTNScGIyNWNiaUJjZEZ4MGJXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwdVkyRnNiQ2h0YjJSMWJHVXVaWGh3YjNKMGN5d2diVzlrZFd4bExDQnRiMlIxYkdVdVpYaHdiM0owY3l3Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5azdYRzVjYmlCY2RGeDBMeThnUm14aFp5QjBhR1VnYlc5a2RXeGxJR0Z6SUd4dllXUmxaRnh1SUZ4MFhIUnRiMlIxYkdVdWJDQTlJSFJ5ZFdVN1hHNWNiaUJjZEZ4MEx5OGdVbVYwZFhKdUlIUm9aU0JsZUhCdmNuUnpJRzltSUhSb1pTQnRiMlIxYkdWY2JpQmNkRngwY21WMGRYSnVJRzF2WkhWc1pTNWxlSEJ2Y25Sek8xeHVJRngwZlZ4dVhHNWNiaUJjZEM4dklHVjRjRzl6WlNCMGFHVWdiVzlrZFd4bGN5QnZZbXBsWTNRZ0tGOWZkMlZpY0dGamExOXRiMlIxYkdWelgxOHBYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtMGdQU0J0YjJSMWJHVnpPMXh1WEc0Z1hIUXZMeUJsZUhCdmMyVWdkR2hsSUcxdlpIVnNaU0JqWVdOb1pWeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1aklEMGdhVzV6ZEdGc2JHVmtUVzlrZFd4bGN6dGNibHh1SUZ4MEx5OGdaR1ZtYVc1bElHZGxkSFJsY2lCbWRXNWpkR2x2YmlCbWIzSWdhR0Z5Ylc5dWVTQmxlSEJ2Y25SelhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1RZ1BTQm1kVzVqZEdsdmJpaGxlSEJ2Y25SekxDQnVZVzFsTENCblpYUjBaWElwSUh0Y2JpQmNkRngwYVdZb0lWOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVieWhsZUhCdmNuUnpMQ0J1WVcxbEtTa2dlMXh1SUZ4MFhIUmNkRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCdVlXMWxMQ0I3SUdWdWRXMWxjbUZpYkdVNklIUnlkV1VzSUdkbGREb2daMlYwZEdWeUlIMHBPMXh1SUZ4MFhIUjlYRzRnWEhSOU8xeHVYRzRnWEhRdkx5QmtaV1pwYm1VZ1gxOWxjMDF2WkhWc1pTQnZiaUJsZUhCdmNuUnpYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxuSWdQU0JtZFc1amRHbHZiaWhsZUhCdmNuUnpLU0I3WEc0Z1hIUmNkR2xtS0hSNWNHVnZaaUJUZVcxaWIyd2dJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JRk41YldKdmJDNTBiMU4wY21sdVoxUmhaeWtnZTF4dUlGeDBYSFJjZEU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQlRlVzFpYjJ3dWRHOVRkSEpwYm1kVVlXY3NJSHNnZG1Gc2RXVTZJQ2ROYjJSMWJHVW5JSDBwTzF4dUlGeDBYSFI5WEc0Z1hIUmNkRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENBblgxOWxjMDF2WkhWc1pTY3NJSHNnZG1Gc2RXVTZJSFJ5ZFdVZ2ZTazdYRzRnWEhSOU8xeHVYRzRnWEhRdkx5QmpjbVZoZEdVZ1lTQm1ZV3RsSUc1aGJXVnpjR0ZqWlNCdlltcGxZM1JjYmlCY2RDOHZJRzF2WkdVZ0ppQXhPaUIyWVd4MVpTQnBjeUJoSUcxdlpIVnNaU0JwWkN3Z2NtVnhkV2x5WlNCcGRGeHVJRngwTHk4Z2JXOWtaU0FtSURJNklHMWxjbWRsSUdGc2JDQndjbTl3WlhKMGFXVnpJRzltSUhaaGJIVmxJR2x1ZEc4Z2RHaGxJRzV6WEc0Z1hIUXZMeUJ0YjJSbElDWWdORG9nY21WMGRYSnVJSFpoYkhWbElIZG9aVzRnWVd4eVpXRmtlU0J1Y3lCdlltcGxZM1JjYmlCY2RDOHZJRzF2WkdVZ0ppQTRmREU2SUdKbGFHRjJaU0JzYVd0bElISmxjWFZwY21WY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1ZENBOUlHWjFibU4wYVc5dUtIWmhiSFZsTENCdGIyUmxLU0I3WEc0Z1hIUmNkR2xtS0cxdlpHVWdKaUF4S1NCMllXeDFaU0E5SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4b2RtRnNkV1VwTzF4dUlGeDBYSFJwWmlodGIyUmxJQ1lnT0NrZ2NtVjBkWEp1SUhaaGJIVmxPMXh1SUZ4MFhIUnBaaWdvYlc5a1pTQW1JRFFwSUNZbUlIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ0oyOWlhbVZqZENjZ0ppWWdkbUZzZFdVZ0ppWWdkbUZzZFdVdVgxOWxjMDF2WkhWc1pTa2djbVYwZFhKdUlIWmhiSFZsTzF4dUlGeDBYSFIyWVhJZ2JuTWdQU0JQWW1wbFkzUXVZM0psWVhSbEtHNTFiR3dwTzF4dUlGeDBYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG5Jb2JuTXBPMXh1SUZ4MFhIUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvYm5Nc0lDZGtaV1poZFd4MEp5d2dleUJsYm5WdFpYSmhZbXhsT2lCMGNuVmxMQ0IyWVd4MVpUb2dkbUZzZFdVZ2ZTazdYRzRnWEhSY2RHbG1LRzF2WkdVZ0ppQXlJQ1ltSUhSNWNHVnZaaUIyWVd4MVpTQWhQU0FuYzNSeWFXNW5KeWtnWm05eUtIWmhjaUJyWlhrZ2FXNGdkbUZzZFdVcElGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVaQ2h1Y3l3Z2EyVjVMQ0JtZFc1amRHbHZiaWhyWlhrcElIc2djbVYwZFhKdUlIWmhiSFZsVzJ0bGVWMDdJSDB1WW1sdVpDaHVkV3hzTENCclpYa3BLVHRjYmlCY2RGeDBjbVYwZFhKdUlHNXpPMXh1SUZ4MGZUdGNibHh1SUZ4MEx5OGdaMlYwUkdWbVlYVnNkRVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm1iM0lnWTI5dGNHRjBhV0pwYkdsMGVTQjNhWFJvSUc1dmJpMW9ZWEp0YjI1NUlHMXZaSFZzWlhOY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1YmlBOUlHWjFibU4wYVc5dUtHMXZaSFZzWlNrZ2UxeHVJRngwWEhSMllYSWdaMlYwZEdWeUlEMGdiVzlrZFd4bElDWW1JRzF2WkhWc1pTNWZYMlZ6VFc5a2RXeGxJRDljYmlCY2RGeDBYSFJtZFc1amRHbHZiaUJuWlhSRVpXWmhkV3gwS0NrZ2V5QnlaWFIxY200Z2JXOWtkV3hsV3lka1pXWmhkV3gwSjEwN0lIMGdPbHh1SUZ4MFhIUmNkR1oxYm1OMGFXOXVJR2RsZEUxdlpIVnNaVVY0Y0c5eWRITW9LU0I3SUhKbGRIVnliaUJ0YjJSMWJHVTdJSDA3WEc0Z1hIUmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1WkNoblpYUjBaWElzSUNkaEp5d2daMlYwZEdWeUtUdGNiaUJjZEZ4MGNtVjBkWEp1SUdkbGRIUmxjanRjYmlCY2RIMDdYRzVjYmlCY2RDOHZJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiRnh1SUZ4MFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXZJRDBnWm5WdVkzUnBiMjRvYjJKcVpXTjBMQ0J3Y205d1pYSjBlU2tnZXlCeVpYUjFjbTRnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c5aWFtVmpkQ3dnY0hKdmNHVnlkSGtwT3lCOU8xeHVYRzRnWEhRdkx5QmZYM2RsWW5CaFkydGZjSFZpYkdsalgzQmhkR2hmWDF4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV3SUQwZ1hDSmNJanRjYmx4dVhHNGdYSFF2THlCTWIyRmtJR1Z1ZEhKNUlHMXZaSFZzWlNCaGJtUWdjbVYwZFhKdUlHVjRjRzl5ZEhOY2JpQmNkSEpsZEhWeWJpQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1Y3lBOUlESXBPMXh1SWl3aWFXMXdiM0owSUhzZ2MzQnlhVzUwWmlCOUlHWnliMjBnWENKemNISnBiblJtTFdwelhDSTdYRzVqYjI1emRDQlZkR2xzY3lBOUlIdDlPMXh1WEc0dktpcGNiaUFxSUVGemMyVnlkSE1nZEdoaGRDQmhJSEJ5WlcxcGMyVWdhWE1nZEhKMVpTNWNiaUFxTDF4dVZYUnBiSE11WVhOelpYSjBWSEoxWlNBOUlHWjFibU4wYVc5dUtIQnlaVzFwYzJVc0lHMWxjM05oWjJVcElIdGNiaUFnYVdZZ0tDRndjbVZ0YVhObEtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0cxbGMzTmhaMlVwTzF4dUlDQjlYRzU5TzF4dVhHNHZLaXBjYmlBcUlFRnpjMlZ5ZEhNZ2RHaGhkQ0JoSUhaaGJIVmxJR2x6SUc1dmRDQnVkV3hzSUc5eUlIVnVaR1ZtYVc1bFpDNWNiaUFxTDF4dVZYUnBiSE11WVhOelpYSjBUbTkwVG5Wc2JDQTlJR1oxYm1OMGFXOXVLSFpoYkhWbExDQnVZVzFsS1NCN1hHNGdJRlYwYVd4ekxtRnpjMlZ5ZEZSeWRXVW9YRzRnSUNBZ2RtRnNkV1VnSVQwOUlHNTFiR3dnSmlZZ2RIbHdaVzltSUhaaGJIVmxJQ0U5UFNCMWJtUmxabWx1WldRc1hHNGdJQ0FnYzNCeWFXNTBaaWhjSWlWeklHMTFjM1FnWW1VZ2NISnZkbWxrWldSY0lpd2dibUZ0WlNCOGZDQmNJa0VnZG1Gc2RXVmNJaWxjYmlBZ0tUdGNiaUFnY21WMGRYSnVJSFpoYkhWbE8xeHVmVHRjYmx4dVZYUnBiSE11YVhOVGRISnBibWNnUFNCbWRXNWpkR2x2YmloMllXeDFaU2tnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUhaaGJIVmxJRDA5UFNCY0luTjBjbWx1WjF3aU8xeHVmVHRjYmx4dVZYUnBiSE11WVhOelpYSjBTWE5PYjI1RmJYQjBlVk4wY21sdVp5QTlJR1oxYm1OMGFXOXVLSFpoYkhWbExDQnJaWGtwSUh0Y2JpQWdhV1lnS0NGMllXeDFaU0I4ZkNCMGVYQmxiMllnZG1Gc2RXVWdJVDA5SUZ3aWMzUnlhVzVuWENJcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvYTJWNUlDc2dYQ0lnYVhNZ2JtOTBJR0VnYm05dUxXVnRjSFI1SUhOMGNtbHVaeUZjSWlrN1hHNGdJSDFjYm4wN1hHNWNibFYwYVd4ekxtRnpjMlZ5ZEVselRHbHpkQ0E5SUdaMWJtTjBhVzl1S0haaGJIVmxMQ0JyWlhrcElIdGNiaUFnYVdZZ0tDRkJjbkpoZVM1cGMwRnljbUY1S0haaGJIVmxLU2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaHJaWGtnS3lCY0lpQnBjeUJ1YjNRZ1lXNGdZWEp5WVhsY0lpazdYRzRnSUgxY2JuMDdYRzVjYmxWMGFXeHpMbUZ6YzJWeWRFbHpSVzUxYlNBOUlHWjFibU4wYVc5dUtIWmhiSFZsTENCaGJHeHZkMlZrVm1Gc2RXVnpMQ0JyWlhrcElIdGNiaUFnZG1GeUlHazdYRzRnSUdadmNpQW9hU0E5SURBN0lHa2dQQ0JoYkd4dmQyVmtWbUZzZFdWekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdhV1lnS0dGc2JHOTNaV1JXWVd4MVpYTmJhVjBnUFQwOUlIWmhiSFZsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNiaUFnSUNCclpYa2dLeUJjSWlCd1lYTnpaV1FnYVhNZ2JtOTBJSFpoYkdsa0xpQmNJaUFySUZ3aVFXeHNiM2RsWkNCMllXeDFaWE1nWVhKbE9pQmNJaUFySUdGc2JHOTNaV1JXWVd4MVpYTmNiaUFnS1R0Y2JuMDdYRzVjYmk4cUtseHVJQ29nUjJWdVpYSmhkR1VnWVc0Z1pXNTFiU0JtY205dElIUm9aU0JuYVhabGJpQnNhWE4wSUc5bUlHeHZkMlZ5TFdOaGMyVWdaVzUxYlNCMllXeDFaWE1zWEc0Z0tpQjNhR1Z5WlNCMGFHVWdaVzUxYlNCclpYbHpJSGRwYkd3Z1ltVWdkWEJ3WlhJZ1kyRnpaUzVjYmlBcVhHNGdLaUJEYjI1MlpYSnphVzl1SUdaeWIyMGdjR0Z6WTJGc0lHTmhjMlVnWW1GelpXUWdiMjRnWTI5a1pTQm1jbTl0SUdobGNtVTZYRzRnS2lCb2RIUndPaTh2YzNSaFkydHZkbVZ5Wm14dmR5NWpiMjB2Y1hWbGMzUnBiMjV6THpNd05USXhNakkwWEc0Z0tpOWNibFYwYVd4ekxtMWhhMlZGYm5WdElEMGdablZ1WTNScGIyNG9kbUZzZFdWektTQjdYRzRnSUhaaGNpQmxiblZ0VDJKcUlEMGdlMzA3WEc1Y2JpQWdkbUZzZFdWekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2RtRnNkV1VwSUh0Y2JpQWdJQ0IyWVhJZ2EyVjVJRDBnZG1Gc2RXVmNiaUFnSUNBZ0lDNXlaWEJzWVdObEtDOWNYQzQvS0Z0aExYcGRLeWxmUHk5bkxDQm1kVzVqZEdsdmJpaDRMQ0I1S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCNUxuUnZWWEJ3WlhKRFlYTmxLQ2tnS3lCY0lsOWNJanRjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0F1Y21Wd2JHRmpaU2d2WHlRdkxDQmNJbHdpS1R0Y2JseHVJQ0FnSUdWdWRXMVBZbXBiYTJWNVhTQTlJSFpoYkhWbE8xeHVJQ0I5S1R0Y2JseHVJQ0J5WlhSMWNtNGdaVzUxYlU5aWFqdGNibjA3WEc1Y2JpOHFLbHh1SUNvZ1JHVjBaWEp0YVc1bElHbG1JSFJvWlNCbmFYWmxiaUIyWVd4MVpTQnBjeUJoSUdOaGJHeGhZbXhsSUdaMWJtTjBhVzl1SUhSNWNHVXVYRzRnS2lCQ2IzSnliM2RsWkNCbWNtOXRJRlZ1WkdWeWMyTnZjbVV1YW5NdVhHNGdLaTljYmxWMGFXeHpMbWx6Um5WdVkzUnBiMjRnUFNCbWRXNWpkR2x2Ymlodlltb3BJSHRjYmlBZ2NtVjBkWEp1SUNFaEtHOWlhaUFtSmlCdlltb3VZMjl1YzNSeWRXTjBiM0lnSmlZZ2IySnFMbU5oYkd3Z0ppWWdiMkpxTG1Gd2NHeDVLVHRjYm4wN1hHNWNibFYwYVd4ekxtbHpUMkpxWldOMElEMGdablZ1WTNScGIyNG9kbUZzZFdVcElIdGNiaUFnY21WMGRYSnVJQ0VvZEhsd1pXOW1JSFpoYkhWbElDRTlQU0JjSW05aWFtVmpkRndpSUh4OElIWmhiSFZsSUQwOVBTQnVkV3hzS1R0Y2JuMDdYRzVjYmxWMGFXeHpMbWx6VTNSeWFXNW5JRDBnWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUIyWVd4MVpTQTlQVDBnWENKemRISnBibWRjSWp0Y2JuMDdYRzVjYmxWMGFXeHpMbWx6VG5WdFltVnlJRDBnWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUIyWVd4MVpTQTlQVDBnWENKdWRXMWlaWEpjSWp0Y2JuMDdYRzVjYm1OdmJuTjBJSGR6VW1WblpYZ2dQU0J1WlhjZ1VtVm5SWGh3S0Z3aVhpaDNjM002THk4cFhGeGNYSGNxWENJcE8xeHVWWFJwYkhNdWRtRnNhV1JYVTFWeWJDQTlJR1oxYm1OMGFXOXVJQ2gzYzFWeWJDa2dlMXh1SUNCeVpYUjFjbTRnZDNOU1pXZGxlQzUwWlhOMEtIZHpWWEpzS1R0Y2JuMDdYRzVjYmxWMGFXeHpMbUZ6YzJWeWRFbHpUMkpxWldOMElEMGdablZ1WTNScGIyNG9kbUZzZFdVc0lHdGxlU2tnZTF4dUlDQnBaaUFvSVZWMGFXeHpMbWx6VDJKcVpXTjBLSFpoYkhWbEtTa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loclpYa2dLeUJjSWlCcGN5QnViM1FnWVc0Z2IySnFaV04wSVZ3aUtUdGNiaUFnZlZ4dWZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdWWFJwYkhNN1hHNWNiaUlzSWx4dVpYaHdiM0owSUdOdmJuTjBJRXhQUjFOZlJFVlRWRWxPUVZSSlQwNGdQU0I3WEc0Z0lFNVZURXc2SUZ3aVRsVk1URndpTEZ4dUlDQkRURWxGVGxSZlRFOUhSMFZTT2lCY0lrTk1TVVZPVkY5TVQwZEhSVkpjSWl4Y2JpQWdSRVZDVlVjNklGd2lSRVZDVlVkY0lseHVmVHRjYmx4dVpYaHdiM0owSUdOdmJuTjBJRTFKVGw5WFJVSlRUME5MUlZSZlRFbEdSVlJKVFVVZ1BTQXpOakF3TzF4dVpYaHdiM0owSUdOdmJuTjBJRTFCV0Y5TVNVNUZRVkpmUTA5T1RrVkRWRjlCVkZSRlRWQlVVeUE5SURNN1hHNWxlSEJ2Y25RZ1kyOXVjM1FnVFVGWVgwVllVRTlPUlU1VVNVRk1YME5QVGs1RlExUmZRVlJVUlUxUVZGTWdQU0ExTzF4dVpYaHdiM0owSUdOdmJuTjBJRWhGUVZKVVFrVkJWRjlKVGxSRlVsWkJUQ0E5SURFd095QXZMM05sWTI5dVpITmNibHh1Wlhod2IzSjBJR052Ym5OMElGSlBWVlJGWDB0RldTQTlJSHRjYmlBZ1UxVkNVME5TU1VKRk9pQmNJbUYzY3k5emRXSnpZM0pwWW1WY0lpeGNiaUFnVlU1VFZVSlRRMUpKUWtVNklGd2lZWGR6TDNWdWMzVmljMk55YVdKbFhDSXNYRzRnSUVoRlFWSlVRa1ZCVkRvZ1hDSmhkM012YUdWaGNuUmlaV0YwWENKY2JuMDdYRzRpTENKcGJYQnZjblFnVlhScGJITWdabkp2YlNCY0lpNHZkWFJwYkhOY0lqdGNibWx0Y0c5eWRDQjdJRXhQUjFOZlJFVlRWRWxPUVZSSlQwNGdmU0JtY205dElGd2lMaTlqYjI1emRHRnVkSE5jSWp0Y2JseHVMeXBsYzJ4cGJuUXRaR2x6WVdKc1pTQnVieTExYm5WelpXUXRkbUZ5Y3lvdlhHNWpiR0Z6Y3lCTWIyZG5aWElnZTF4dUlDQmtaV0oxWnloa1lYUmhLU0I3ZlZ4dVhHNGdJR2x1Wm04b1pHRjBZU2tnZTMxY2JseHVJQ0IzWVhKdUtHUmhkR0VwSUh0OVhHNWNiaUFnWlhKeWIzSW9aR0YwWVNrZ2UzMWNibjFjYmk4cVpYTnNhVzUwTFdWdVlXSnNaU0J1YnkxMWJuVnpaV1F0ZG1GeWN5b3ZYRzVjYm1OdmJuTjBJRXh2WjB4bGRtVnNJRDBnZTF4dUlDQkVSVUpWUnpvZ01UQXNYRzRnSUVsT1JrODZJREl3TEZ4dUlDQlhRVkpPT2lBek1DeGNiaUFnUlZKU1QxSTZJRFF3WEc1OU8xeHVYRzVqYkdGemN5Qk1iMmROWVc1aFoyVnlTVzF3YkNCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUhSb2FYTXVkWEJrWVhSbFRHOW5aMlZ5UTI5dVptbG5LQ2s3WEc0Z0lDQWdkR2hwY3k1amIyNXpiMnhsVEc5bloyVnlWM0poY0hCbGNpQTlJR055WldGMFpVTnZibk52YkdWTWIyZG5aWElvS1R0Y2JpQWdmVnh1WEc0Z0lIZHlhWFJsVkc5RGJHbGxiblJNYjJkblpYSW9iR1YyWld3c0lHeHZaMU4wWVhSbGJXVnVkQ2tnZTF4dUlDQWdJR2xtSUNnaGRHaHBjeTVvWVhORGJHbGxiblJNYjJkblpYSW9LU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNiaUFnSUNCemQybDBZMmdnS0d4bGRtVnNLU0I3WEc0Z0lDQWdJQ0JqWVhObElFeHZaMHhsZG1Wc0xrUkZRbFZIT2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZMnhwWlc1MFRHOW5aMlZ5TG1SbFluVm5LR3h2WjFOMFlYUmxiV1Z1ZENrN1hHNGdJQ0FnSUNCallYTmxJRXh2WjB4bGRtVnNMa2xPUms4NlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlqYkdsbGJuUk1iMmRuWlhJdWFXNW1ieWhzYjJkVGRHRjBaVzFsYm5RcE8xeHVJQ0FnSUNBZ1kyRnpaU0JNYjJkTVpYWmxiQzVYUVZKT09seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWTJ4cFpXNTBURzluWjJWeUxuZGhjbTRvYkc5blUzUmhkR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lHTmhjMlVnVEc5blRHVjJaV3d1UlZKU1QxSTZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5amJHbGxiblJNYjJkblpYSXVaWEp5YjNJb2JHOW5VM1JoZEdWdFpXNTBLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JwYzB4bGRtVnNSVzVoWW14bFpDaHNaWFpsYkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJzWlhabGJDQStQU0IwYUdsekxsOXNaWFpsYkR0Y2JpQWdmVnh1WEc0Z0lHaGhjME5zYVdWdWRFeHZaMmRsY2lncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZZMnhwWlc1MFRHOW5aMlZ5SUNFOVBTQnVkV3hzTzF4dUlDQjlYRzVjYmlBZ1oyVjBURzluWjJWeUtHOXdkR2x2Ym5NcElIdGNiaUFnSUNCMllYSWdjSEpsWm1sNElEMGdiM0IwYVc5dWN5NXdjbVZtYVhnZ2ZId2dYQ0pjSWp0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmYkc5bmMwUmxjM1JwYm1GMGFXOXVJRDA5UFNCTVQwZFRYMFJGVTFSSlRrRlVTVTlPTGtSRlFsVkhLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amIyNXpiMnhsVEc5bloyVnlWM0poY0hCbGNqdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCTWIyZG5aWEpYY21Gd2NHVnlTVzF3YkNod2NtVm1hWGdwTzF4dUlDQjlYRzVjYmlBZ2RYQmtZWFJsVEc5bloyVnlRMjl1Wm1sbktHbHVjSFYwUTI5dVptbG5LU0I3WEc0Z0lDQWdkbUZ5SUdOdmJtWnBaeUE5SUdsdWNIVjBRMjl1Wm1sbklIeDhJSHQ5TzF4dUlDQWdJSFJvYVhNdVgyeGxkbVZzSUQwZ1kyOXVabWxuTG14bGRtVnNJSHg4SUV4dloweGxkbVZzTGtsT1JrODdYRzRnSUNBZ2RHaHBjeTVmWTJ4cFpXNTBURzluWjJWeUlEMGdZMjl1Wm1sbkxteHZaMmRsY2lCOGZDQnVkV3hzTzF4dUlDQWdJSFJvYVhNdVgyeHZaM05FWlhOMGFXNWhkR2x2YmlBOUlFeFBSMU5mUkVWVFZFbE9RVlJKVDA0dVRsVk1URHRjYmlBZ0lDQnBaaUFvWTI5dVptbG5MbVJsWW5WbktTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5c2IyZHpSR1Z6ZEdsdVlYUnBiMjRnUFNCTVQwZFRYMFJGVTFSSlRrRlVTVTlPTGtSRlFsVkhPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9ZMjl1Wm1sbkxteHZaMmRsY2lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmYkc5bmMwUmxjM1JwYm1GMGFXOXVJRDBnVEU5SFUxOUVSVk5VU1U1QlZFbFBUaTVEVEVsRlRsUmZURTlIUjBWU08xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNWpiR0Z6Y3lCTWIyZG5aWEpYY21Gd2NHVnlJSHRjYmlBZ1pHVmlkV2NvS1NCN2ZWeHVYRzRnSUdsdVptOG9LU0I3ZlZ4dVhHNGdJSGRoY200b0tTQjdmVnh1WEc0Z0lHVnljbTl5S0NrZ2UzMWNibjFjYmx4dVkyeGhjM01nVEc5bloyVnlWM0poY0hCbGNrbHRjR3dnWlhoMFpXNWtjeUJNYjJkblpYSlhjbUZ3Y0dWeUlIdGNiaUFnWTI5dWMzUnlkV04wYjNJb2NISmxabWw0S1NCN1hHNGdJQ0FnYzNWd1pYSW9LVHRjYmlBZ0lDQjBhR2x6TG5CeVpXWnBlQ0E5SUhCeVpXWnBlQ0I4ZkNCY0lsd2lPMXh1SUNCOVhHNWNiaUFnWkdWaWRXY29MaTR1WVhKbmN5a2dlMXh1SUNBZ0lIUm9hWE11WDJ4dlp5aE1iMmRNWlhabGJDNUVSVUpWUnl3Z1lYSm5jeWs3WEc0Z0lIMWNibHh1SUNCcGJtWnZLQzR1TG1GeVozTXBJSHRjYmlBZ0lDQjBhR2x6TGw5c2IyY29URzluVEdWMlpXd3VTVTVHVHl3Z1lYSm5jeWs3WEc0Z0lIMWNibHh1SUNCM1lYSnVLQzR1TG1GeVozTXBJSHRjYmlBZ0lDQjBhR2x6TGw5c2IyY29URzluVEdWMlpXd3VWMEZTVGl3Z1lYSm5jeWs3WEc0Z0lIMWNibHh1SUNCbGNuSnZjaWd1TGk1aGNtZHpLU0I3WEc0Z0lDQWdkR2hwY3k1ZmJHOW5LRXh2WjB4bGRtVnNMa1ZTVWs5U0xDQmhjbWR6S1R0Y2JpQWdmVnh1WEc0Z0lGOXphRzkxYkdSTWIyY29iR1YyWld3cElIdGNiaUFnSUNCeVpYUjFjbTRnVEc5blRXRnVZV2RsY2k1b1lYTkRiR2xsYm5STWIyZG5aWElvS1NBbUppQk1iMmROWVc1aFoyVnlMbWx6VEdWMlpXeEZibUZpYkdWa0tHeGxkbVZzS1R0Y2JpQWdmVnh1WEc0Z0lGOTNjbWwwWlZSdlEyeHBaVzUwVEc5bloyVnlLR3hsZG1Wc0xDQnNiMmRUZEdGMFpXMWxiblFwSUh0Y2JpQWdJQ0JNYjJkTllXNWhaMlZ5TG5keWFYUmxWRzlEYkdsbGJuUk1iMmRuWlhJb2JHVjJaV3dzSUd4dloxTjBZWFJsYldWdWRDazdYRzRnSUgxY2JseHVJQ0JmYkc5bktHeGxkbVZzTENCaGNtZHpLU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM05vYjNWc1pFeHZaeWhzWlhabGJDa3BJSHRjYmlBZ0lDQWdJSFpoY2lCc2IyZFRkR0YwWlcxbGJuUWdQU0IwYUdsekxsOWpiMjUyWlhKMFZHOVRhVzVuYkdWVGRHRjBaVzFsYm5Rb1lYSm5jeWs3WEc0Z0lDQWdJQ0IwYUdsekxsOTNjbWwwWlZSdlEyeHBaVzUwVEc5bloyVnlLR3hsZG1Wc0xDQnNiMmRUZEdGMFpXMWxiblFwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUY5amIyNTJaWEowVkc5VGFXNW5iR1ZUZEdGMFpXMWxiblFvWVhKbmN5a2dlMXh1SUNBZ0lIWmhjaUJzYjJkVGRHRjBaVzFsYm5RZ1BTQmNJbHdpTzF4dUlDQWdJR2xtSUNoMGFHbHpMbkJ5WldacGVDa2dlMXh1SUNBZ0lDQWdiRzluVTNSaGRHVnRaVzUwSUNzOUlIUm9hWE11Y0hKbFptbDRJQ3NnWENJZ1hDSTdYRzRnSUNBZ2ZWeHVJQ0FnSUdadmNpQW9kbUZ5SUdsdVpHVjRJRDBnTURzZ2FXNWtaWGdnUENCaGNtZHpMbXhsYm1kMGFEc2dhVzVrWlhnckt5a2dlMXh1SUNBZ0lDQWdkbUZ5SUdGeVp5QTlJR0Z5WjNOYmFXNWtaWGhkTzF4dUlDQWdJQ0FnYkc5blUzUmhkR1Z0Wlc1MElDczlJSFJvYVhNdVgyTnZiblpsY25SVWIxTjBjbWx1WnloaGNtY3BJQ3NnWENJZ1hDSTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJzYjJkVGRHRjBaVzFsYm5RN1hHNGdJSDFjYmx4dUlDQmZZMjl1ZG1WeWRGUnZVM1J5YVc1bktHRnlaeWtnZTF4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNCcFppQW9JV0Z5WnlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1hDSmNJanRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoVmRHbHNjeTVwYzFOMGNtbHVaeWhoY21jcEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmhjbWM3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb1ZYUnBiSE11YVhOUFltcGxZM1FvWVhKbktTQW1KaUJWZEdsc2N5NXBjMFoxYm1OMGFXOXVLR0Z5Wnk1MGIxTjBjbWx1WnlrcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhSdlUzUnlhVzVuVW1WemRXeDBJRDBnWVhKbkxuUnZVM1J5YVc1bktDazdYRzRnSUNBZ0lDQWdJR2xtSUNoMGIxTjBjbWx1WjFKbGMzVnNkQ0FoUFQwZ1hDSmJiMkpxWldOMElFOWlhbVZqZEYxY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYjFOMGNtbHVaMUpsYzNWc2REdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlFcFRUMDR1YzNSeWFXNW5hV1o1S0dGeVp5azdYRzRnSUNBZ2ZTQmpZWFJqYUNBb1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9YQ0pGY25KdmNpQjNhR2xzWlNCamIyNTJaWEowYVc1bklHRnlaM1Z0Wlc1MElIUnZJSE4wY21sdVoxd2lMQ0JoY21jc0lHVnljbTl5S1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJjSWx3aU8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNTJZWElnWTNKbFlYUmxRMjl1YzI5c1pVeHZaMmRsY2lBOUlDZ3BJRDArSUh0Y2JpQWdkbUZ5SUd4dloyZGxjaUE5SUc1bGR5Qk1iMmRuWlhKWGNtRndjR1Z5S0NrN1hHNGdJR3h2WjJkbGNpNWtaV0oxWnlBOUlHTnZibk52YkdVdVpHVmlkV2M3WEc0Z0lHeHZaMmRsY2k1cGJtWnZJRDBnWTI5dWMyOXNaUzVwYm1adk8xeHVJQ0JzYjJkblpYSXVkMkZ5YmlBOUlHTnZibk52YkdVdWQyRnlianRjYmlBZ2JHOW5aMlZ5TG1WeWNtOXlJRDBnWTI5dWMyOXNaUzVsY25KdmNqdGNiaUFnY21WMGRYSnVJR3h2WjJkbGNqdGNibjA3WEc1Y2JtTnZibk4wSUV4dlowMWhibUZuWlhJZ1BTQnVaWGNnVEc5blRXRnVZV2RsY2tsdGNHd29LVHRjYmx4dVpYaHdiM0owSUhzZ1RHOW5UV0Z1WVdkbGNpd2dURzluWjJWeUxDQk1iMmRNWlhabGJDQjlPMXh1SWl3aWFXMXdiM0owSUZWMGFXeHpJR1p5YjIwZ1hDSXVMM1YwYVd4elhDSTdYRzVwYlhCdmNuUWdleUJNYjJkTllXNWhaMlZ5TENCTWIyZE1aWFpsYkN3Z1RHOW5aMlZ5SUgwZ1puSnZiU0JjSWk0dmJHOW5YQ0k3WEc1cGJYQnZjblFnZTF4dUlDQWdJRTFKVGw5WFJVSlRUME5MUlZSZlRFbEdSVlJKVFVVc1hHNGdJQ0FnVFVGWVgweEpUa1ZCVWw5RFQwNU9SVU5VWDBGVVZFVk5VRlJUTEZ4dUlDQWdJRTFCV0Y5RldGQlBUa1ZPVkVsQlRGOURUMDVPUlVOVVgwRlVWRVZOVUZSVExGeHVJQ0FnSUVoRlFWSlVRa1ZCVkY5SlRsUkZVbFpCVEN4Y2JpQWdJQ0JTVDFWVVJWOUxSVmxjYm4wZ1puSnZiU0JjSWk0dlkyOXVjM1JoYm5SelhDSTdYRzVjYmx4dVkyOXVjM1FnVjJWaVUyOWphMlYwVFdGdVlXZGxjaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVYRzRnSUNBZ1kyOXVjM1FnYkc5bloyVnlJRDBnVEc5blRXRnVZV2RsY2k1blpYUk1iMmRuWlhJb2UzMHBPMXh1WEc0Z0lDQWdiR1YwSUhkbFlsTnZZMnRsZENBOUlHNTFiR3c3WEc1Y2JpQWdJQ0JzWlhRZ2NtVmpiMjV1WldOMFEyOXVabWxuSUQwZ2UxeHVJQ0FnSUNBZ0lDQnlaV052Ym01bFkzUlhaV0pUYjJOclpYUTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQjNaV0p6YjJOclpYUkpibWwwUm1GcGJHVmtPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdiR2x1WldGeVEyOXVibVZqZEVGMGRHVnRjSFE2SURBc1hHNGdJQ0FnSUNBZ0lHVjRjRzl1Wlc1MGFXRnNRMjl1Ym1WamRFRjBkR1Z0Y0hRNklEQXNYRzRnSUNBZ0lDQWdJR1Y0Y0c5dVpXNTBhV0ZzUW1GamEwOW1abFJwYldVNklERXNYRzRnSUNBZ0lDQWdJR1Y0Y0c5dVpXNTBhV0ZzVkdsdFpXOTFkRWhoYm1Sc1pUb2diblZzYkN4Y2JpQWdJQ0FnSUNBZ2JHbG1aVlJwYldWVWFXMWxiM1YwU0dGdVpHeGxPaUJ1ZFd4c1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUd4bGRDQm9aV0Z5ZEdKbFlYUkRiMjVtYVdjZ1BTQjdYRzRnSUNBZ0lDQWdJSEJsYm1ScGJtZFNaWE53YjI1elpUb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHbHVkR1Z5ZG1Gc1NHRnVaR3hsT2lCdWRXeHNYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHeGxkQ0JqWVd4c1ltRmphM01nUFNCN1hHNGdJQ0FnSUNBZ0lHbHVhWFJHWVdsc2RYSmxPaUJ1WlhjZ1UyVjBLQ2tzWEc0Z0lDQWdJQ0FnSUdkbGRGZGxZbE52WTJ0bGRGUnlZVzV6Y0c5eWREb2diblZzYkN4Y2JpQWdJQ0FnSUNBZ2MzVmljMk55YVhCMGFXOXVWWEJrWVhSbE9pQnVaWGNnVTJWMEtDa3NYRzRnSUNBZ0lDQWdJSE4xWW5OamNtbHdkR2x2YmtaaGFXeDFjbVU2SUc1bGR5QlRaWFFvS1N4Y2JpQWdJQ0FnSUNBZ2RHOXdhV002SUc1bGR5Qk5ZWEFvS1N4Y2JpQWdJQ0FnSUNBZ1lXeHNUV1Z6YzJGblpUb2dibVYzSUZObGRDZ3BMRnh1SUNBZ0lDQWdJQ0JqYjI1dVpXTjBhVzl1UjJGcGJqb2dibVYzSUZObGRDZ3BMRnh1SUNBZ0lDQWdJQ0JqYjI1dVpXTjBhVzl1VEc5emREb2dibVYzSUZObGRDZ3BYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHeGxkQ0IzWldKVGIyTnJaWFJEYjI1bWFXY2dQU0I3WEc0Z0lDQWdJQ0FnSUdOdmJtNURiMjVtYVdjNklHNTFiR3dzWEc0Z0lDQWdJQ0FnSUhCeWIyMXBjMlZJWVc1a2JHVTZJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lIQnliMjFwYzJWRGIyMXdiR1YwWldRNklHWmhiSE5sWEc0Z0lDQWdmVHRjYmx4dUlDQWdJR3hsZENCMGIzQnBZMU4xWW5OamNtbHdkR2x2YmlBOUlIdGNiaUFnSUNBZ0lDQWdjM1ZpYzJOeWFXSmxaRG9nYm1WM0lGTmxkQ2dwTEZ4dUlDQWdJQ0FnSUNCd1pXNWthVzVuT2lCdVpYY2dVMlYwS0NsY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnWTI5dWMzUWdhVzUyWVd4cFpGTmxibVJOWlhOellXZGxVbTkxZEdWTFpYbHpJRDBnYm1WM0lGTmxkQ2hiVWs5VlZFVmZTMFZaTGxOVlFsTkRVa2xDUlN3Z1VrOVZWRVZmUzBWWkxsVk9VMVZDVTBOU1NVSkZMQ0JTVDFWVVJWOUxSVmt1U0VWQlVsUkNSVUZVWFNrN1hHNWNiaUFnSUNCc1pYUWdiMjVzYVc1bElEMGdibUYyYVdkaGRHOXlMbTl1VEdsdVpUdGNiaUFnSUNCamIyNXpkQ0J1WlhSM2IzSnJRMjl1Ym1WamRHbDJhWFI1UTJobFkydGxjaUE5SUhObGRFbHVkR1Z5ZG1Gc0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXViR2x1WlNBaFBUMGdibUYyYVdkaGRHOXlMbTl1VEdsdVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNXNhVzVsSUQwZ2JtRjJhV2RoZEc5eUxtOXVUR2x1WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodmJteHBibVVnSmlZZ0tDRjNaV0pUYjJOclpYUWdmSHdnZDJWaVUyOWphMlYwTG5KbFlXUjVVM1JoZEdVZ1BpQXhLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4dloyZGxjaTVwYm1adktGd2lUbVYwZDI5eWF5QnZibXhwYm1Vc0lFTnZibTVsWTNScGJtY2dkRzhnZDJWaWMyOWphMlYwWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZGxkRmRsWWxOdlkydGxkRU52Ym01RGIyNW1hV2NvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzSURJMU1DazdYRzVjYmlBZ0lDQmpiMjV6ZENCcGJuWnZhMlZEWVd4c1ltRmphM01nUFNCbWRXNWpkR2x2YmloallXeHNZbUZqYTNNc0lISmxjM0J2Ym5ObEtTQjdYRzRnSUNBZ0lDQWdJR05oYkd4aVlXTnJjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hqWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZzYkdKaFkyc29jbVZ6Y0c5dWMyVXBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnWTI5dWMzUWdjMlZ1WkVobFlYSjBRbVZoZENBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2FHVmhjblJpWldGMFEyOXVabWxuTG5CbGJtUnBibWRTWlhOd2IyNXpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiRzluWjJWeUxuZGhjbTRvWENKSVpXRnlkR0psWVhRZ2NtVnpjRzl1YzJVZ2JtOTBJSEpsWTJWcGRtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhsWVhKSmJuUmxjblpoYkNob1pXRnlkR0psWVhSRGIyNW1hV2N1YVc1MFpYSjJZV3hJWVc1a2JHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FHVmhjblJpWldGMFEyOXVabWxuTG5CbGJtUnBibWRTWlhOd2IyNXpaU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVm1jbVZ6YUZkbFlsTnZZMnRsZEVOdmJtNWxZM1JwYjI0b0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCc2IyZG5aWEl1WkdWaWRXY29YQ0pUWlc1a2FXNW5JR2hsWVhKMFltVmhkRndpS1R0Y2JpQWdJQ0FnSUNBZ2QyVmlVMjlqYTJWMExuTmxibVFvWTNKbFlYUmxWMlZpVTI5amEyVjBVR0Y1Ykc5aFpDaFNUMVZVUlY5TFJWa3VTRVZCVWxSQ1JVRlVLU2s3WEc0Z0lDQWdJQ0FnSUdobFlYSjBZbVZoZEVOdmJtWnBaeTV3Wlc1a2FXNW5VbVZ6Y0c5dWMyVWdQU0IwY25WbE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCamIyNXpkQ0J5WlhObGRGTjBZWFJsSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsWTI5dWJtVmpkRU52Ym1acFp5NXNhVzVsWVhKRGIyNXVaV04wUVhSMFpXMXdkQ0E5SURBN1hHNGdJQ0FnSUNBZ0lISmxZMjl1Ym1WamRFTnZibVpwWnk1bGVIQnZibVZ1ZEdsaGJFTnZibTVsWTNSQmRIUmxiWEIwSUQwZ01EdGNiaUFnSUNBZ0lDQWdjbVZqYjI1dVpXTjBRMjl1Wm1sbkxtVjRjRzl1Wlc1MGFXRnNRbUZqYTA5bVpsUnBiV1VnUFNBeE8xeHVJQ0FnSUNBZ0lDQm9aV0Z5ZEdKbFlYUkRiMjVtYVdjdWNHVnVaR2x1WjFKbGMzQnZibk5sSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhKbFkyOXVibVZqZEVOdmJtWnBaeTV5WldOdmJtNWxZM1JYWldKVGIyTnJaWFFnUFNCbVlXeHpaVHRjYmx4dUlDQWdJQ0FnSUNCamJHVmhjbFJwYldWdmRYUW9jbVZqYjI1dVpXTjBRMjl1Wm1sbkxteHBabVZVYVcxbFZHbHRaVzkxZEVoaGJtUnNaU2s3WEc0Z0lDQWdJQ0FnSUdOc1pXRnlTVzUwWlhKMllXd29hR1ZoY25SaVpXRjBRMjl1Wm1sbkxtbHVkR1Z5ZG1Gc1NHRnVaR3hsS1R0Y2JpQWdJQ0FnSUNBZ1kyeGxZWEpVYVcxbGIzVjBLSEpsWTI5dWJtVmpkRU52Ym1acFp5NWxlSEJ2Ym1WdWRHbGhiRlJwYldWdmRYUklZVzVrYkdVcE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCamIyNXpkQ0IzWldKVGIyTnJaWFJQYms5d1pXNGdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHZaMmRsY2k1cGJtWnZLRndpVjJWaVUyOWphMlYwSUdOdmJtNWxZM1JwYjI0Z1pYTjBZV0pzYVhOb1pXUWhYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzUyYjJ0bFEyRnNiR0poWTJ0ektHTmhiR3hpWVdOcmN5NWpiMjV1WldOMGFXOXVSMkZwYmlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMyVjBVM1JoZEdVb0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJ2Y0dsalUzVmljMk55YVhCMGFXOXVMbk4xWW5OamNtbGlaV1F1YzJsNlpTQStJREFnZkh3Z2RHOXdhV05UZFdKelkzSnBjSFJwYjI0dWNHVnVaR2x1Wnk1emFYcGxJRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwYjNCcFkzTWdQU0JCY25KaGVTNW1jbTl0S0hSdmNHbGpVM1ZpYzJOeWFYQjBhVzl1TG5OMVluTmpjbWxpWldRdWRtRnNkV1Z6S0NrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZjR2xqY3lBOUlIUnZjR2xqY3k1amIyNWpZWFFvUVhKeVlYa3Vabkp2YlNoMGIzQnBZMU4xWW5OamNtbHdkR2x2Ymk1d1pXNWthVzVuTG5aaGJIVmxjeWdwS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOXdhV05UZFdKelkzSnBjSFJwYjI0dWMzVmljMk55YVdKbFpDNWpiR1ZoY2lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZGxZbE52WTJ0bGRDNXpaVzVrS0dOeVpXRjBaVmRsWWxOdlkydGxkRkJoZVd4dllXUW9VazlWVkVWZlMwVlpMbE5WUWxORFVrbENSU3dnZTF3aWRHOXdhV056WENJNklIUnZjR2xqYzMwcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWdVpFaGxZWEowUW1WaGRDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FHVmhjblJpWldGMFEyOXVabWxuTG1sdWRHVnlkbUZzU0dGdVpHeGxJRDBnYzJWMFNXNTBaWEoyWVd3b2MyVnVaRWhsWVhKMFFtVmhkQ3dnTVRBd01DQXFJRWhGUVZKVVFrVkJWRjlKVGxSRlVsWkJUQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsWTI5dWJtVmpkRU52Ym1acFp5NXNhV1psVkdsdFpWUnBiV1Z2ZFhSSVlXNWtiR1VnUFNCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3h2WjJkbGNpNWtaV0oxWnloY0lsTjBZWEowYVc1bklITmphR1ZrZFd4bFpDQlhaV0pUYjJOclpYUWdiV0Z1WVdkbGNpQnlaV052Ym01bFkzUmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WbWNtVnphRmRsWWxOdlkydGxkRU52Ym01bFkzUnBiMjRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSURFd01EQWdLaUIzWldKVGIyTnJaWFJEYjI1bWFXY3VZMjl1YmtOdmJtWnBaeTUzWldKVGIyTnJaWFJVY21GdWMzQnZjblF1ZEhKaGJuTndiM0owVEdsbVpWUnBiV1ZKYmxObFkyOXVaSE1wTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiRzluWjJWeUxtVnljbTl5S0Z3aVJYSnliM0lnWVdaMFpYSWdaWE4wWVdKc2FYTm9hVzVuSUhkbFlpQnpiMk5yWlhRZ1kyOXVibVZqZEdsdmJpd2daWEp5YjNJNklGd2lMQ0JsY25KdmNpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdZMjl1YzNRZ2QyVmlVMjlqYTJWMFQyNURiRzl6WlNBOUlHWjFibU4wYVc5dUtHVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5WldOdmJtNWxZM1JEYjI1bWFXY3ViR2x1WldGeVEyOXVibVZqZEVGMGRHVnRjSFFnUEQwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNTJiMnRsUTJGc2JHSmhZMnR6S0dOaGJHeGlZV05yY3k1amIyNXVaV04wYVc5dVRHOXpkQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2JHOW5aMlZ5TG1sdVptOG9YQ0pUYjJOclpYUWdZMjl1Ym1WamRHbHZiaUJwY3lCamJHOXpaV1F1SUdWMlpXNTBPaUJjSWl3Z1pYWmxiblFwTzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZqYjI1dVpXTjBRMjl1Wm1sbkxuSmxZMjl1Ym1WamRGZGxZbE52WTJ0bGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNXBkRmRsWWxOdlkydGxkQ2dwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdOdmJuTjBJSGRsWWxOdlkydGxkRTl1UlhKeWIzSWdQU0JtZFc1amRHbHZiaWhsZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0JzYjJkblpYSXVaWEp5YjNJb1hDSlhaV0pUYjJOclpYUk5ZVzVoWjJWeUlFVnljbTl5TENCbGNuSnZjbDlsZG1WdWREb2dYQ0lzSUdWMlpXNTBLVHRjYmlBZ0lDQWdJQ0FnY21WbWNtVnphRmRsWWxOdlkydGxkRU52Ym01bFkzUnBiMjRvS1R0Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnWTI5dWMzUWdkMlZpVTI5amEyVjBUMjVOWlhOellXZGxJRDBnWm5WdVkzUnBiMjRvWlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnYkc5bloyVnlMbVJsWW5WbktGd2lUV1Z6YzJGblpTQnlaV05sYVhabFpDQm1jbTl0SUhkbFlsTnZZMnRsZENCelpYSjJaWEpjSWl3Z1pYWmxiblF1WkdGMFlTazdYRzRnSUNBZ0lDQWdJR052Ym5OMElISmxjM0J2Ym5ObElEMGdTbE5QVGk1d1lYSnpaU2hsZG1WdWRDNWtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ2MzZHBkR05vSUNoeVpYTndiMjV6WlM1MGIzQnBZeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCU1QxVlVSVjlMUlZrdVUxVkNVME5TU1VKRk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhOd2IyNXpaUzVqYjI1MFpXNTBMbk4wWVhSMWN5QTlQVDBnWENKemRXTmpaWE56WENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemNHOXVjMlV1WTI5dWRHVnVkQzUwYjNCcFkzTXVabTl5UldGamFDZ29ablZ1WTNScGIyNGdLSFJ2Y0dsalRtRnRaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc5d2FXTlRkV0p6WTNKcGNIUnBiMjR1YzNWaWMyTnlhV0psWkM1aFpHUW9kRzl3YVdOT1lXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2Y0dsalUzVmljMk55YVhCMGFXOXVMbkJsYm1ScGJtY3VaR1ZzWlhSbEtIUnZjR2xqVG1GdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1MmIydGxRMkZzYkdKaFkydHpLR05oYkd4aVlXTnJjeTV6ZFdKelkzSnBjSFJwYjI1VmNHUmhkR1VzSUhKbGMzQnZibk5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBiblp2YTJWRFlXeHNZbUZqYTNNb1kyRnNiR0poWTJ0ekxuTjFZbk5qY21sd2RHbHZia1poYVd4MWNtVXNJSEpsYzNCdmJuTmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRkpQVlZSRlgwdEZXUzVJUlVGU1ZFSkZRVlE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkc5bloyVnlMbVJsWW5WbktGd2lTR1ZoY25SaVpXRjBJSEpsYzNCdmJuTmxJSEpsWTJWcGRtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdobFlYSjBZbVZoZEVOdmJtWnBaeTV3Wlc1a2FXNW5VbVZ6Y0c5dWMyVWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGMzQnZibk5sTG5SdmNHbGpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqWVd4c1ltRmphM011WVd4c1RXVnpjMkZuWlM1emFYcGxJRDA5UFNBd0lDWW1JR05oYkd4aVlXTnJjeTUwYjNCcFl5NXphWHBsSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJkblpYSXVkMkZ5YmlnblRtOGdjbVZuYVhOMFpYSmxaQ0JqWVd4c1ltRmpheUJzYVhOMFpXNWxjaUJtYjNJZ1ZHOXdhV002SUNjc0lISmxjM0J2Ym5ObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuWnZhMlZEWVd4c1ltRmphM01vWTJGc2JHSmhZMnR6TG1Gc2JFMWxjM05oWjJVc0lISmxjM0J2Ym5ObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTmhiR3hpWVdOcmN5NTBiM0JwWXk1b1lYTW9jbVZ6Y0c5dWMyVXVkRzl3YVdNcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBiblp2YTJWRFlXeHNZbUZqYTNNb1kyRnNiR0poWTJ0ekxuUnZjR2xqTG1kbGRDaHlaWE53YjI1elpTNTBiM0JwWXlrc0lISmxjM0J2Ym5ObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NtVnpjRzl1YzJVdWJXVnpjMkZuWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJkblpYSXVkMkZ5YmloY0lsZGxZbE52WTJ0bGRFMWhibUZuWlhJZ1RXVnpjMkZuWlNCRmNuSnZjaXdnWlhKeWIzSTZJRndpTENCeVpYTndiMjV6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiRzluWjJWeUxuZGhjbTRvWENKSmJuWmhiR2xrSUdsdVkyOXRhVzVuSUcxbGMzTmhaMlVzSUdWeWNtOXlPaUJjSWl3Z2NtVnpjRzl1YzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjV6ZENCamJHOXpaVmRsWWxOdlkydGxkQ0E5SUdaMWJtTjBhVzl1S0hKbFlYTnZiaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9kMlZpVTI5amEyVjBJQ1ltSUhkbFlsTnZZMnRsZEM1eVpXRmtlVk4wWVhSbElDRTlQU0JYWldKVGIyTnJaWFF1UTB4UFUwVkVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNaV0pUYjJOclpYUXVZMnh2YzJVb01UQXdNQ3dnY21WaGMyOXVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ1kyOXVjM1FnY21WbWNtVnphRmRsWWxOdlkydGxkRU52Ym01bFkzUnBiMjRnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGIyNXNhVzVsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkc5elpWZGxZbE52WTJ0bGRDaGNJazVsZEhkdmNtc2dUMlptYkdsdVpTd2dRMnh2YzJsdVp5QlhaV0pUYjJOclpYUWdUV0Z1WVdkbGNsd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvY21WamIyNXVaV04wUTI5dVptbG5MbXhwWm1WVWFXMWxWR2x0Wlc5MWRFaGhibVJzWlNrN1hHNGdJQ0FnSUNBZ0lHTnNaV0Z5U1c1MFpYSjJZV3dvYUdWaGNuUmlaV0YwUTI5dVptbG5MbWx1ZEdWeWRtRnNTR0Z1Wkd4bEtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2NtVmpiMjV1WldOMFEyOXVabWxuTG14cGJtVmhja052Ym01bFkzUkJkSFJsYlhCMElEd2dUVUZZWDB4SlRrVkJVbDlEVDA1T1JVTlVYMEZVVkVWTlVGUlRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV052Ym01bFkzUkRiMjVtYVdjdWJHbHVaV0Z5UTI5dWJtVmpkRUYwZEdWdGNIUXJLenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHZaMmRsY2k1a1pXSjFaeWhjSWxOMFlYSjBhVzVuSUVOdmJuTmxZM1YwYVhabElGZGxZbE52WTJ0bGRDQnlaV052Ym01bFkzUXNJRUYwZEdWdGNIUWdPaUJjSWlBcklISmxZMjl1Ym1WamRFTnZibVpwWnk1c2FXNWxZWEpEYjI1dVpXTjBRWFIwWlcxd2RDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXTnZibTVsWTNSRGIyNW1hV2N1Y21WamIyNXVaV04wVjJWaVUyOWphMlYwSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHZGxkRmRsWWxOdlkydGxkRU52Ym01RGIyNW1hV2NvS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHlaV052Ym01bFkzUkRiMjVtYVdjdVpYaHdiMjVsYm5ScFlXeERiMjV1WldOMFFYUjBaVzF3ZENBOElFMUJXRjlGV0ZCUFRrVk9WRWxCVEY5RFQwNU9SVU5VWDBGVVZFVk5VRlJUS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldOdmJtNWxZM1JEYjI1bWFXY3VaWGh3YjI1bGJuUnBZV3hEYjI1dVpXTjBRWFIwWlcxd2RDc3JPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVmpiMjV1WldOMFEyOXVabWxuTG1WNGNHOXVaVzUwYVdGc1FtRmphMDltWmxScGJXVWdLajBnTWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WjJkbGNpNWtaV0oxWnloY0lsTjBZWEowYVc1bklFVjRjRzl1Wlc1MGFXRnNJRmRsWWxOdlkydGxkQ0J5WldOdmJtNWxZM1FzSUVGMGRHVnRjSFFnT2lCY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDc2djbVZqYjI1dVpXTjBRMjl1Wm1sbkxtVjRjRzl1Wlc1MGFXRnNRMjl1Ym1WamRFRjBkR1Z0Y0hRZ0t5QmNJaUIzYVhSb0lHUmxiR0Y1SUZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0t5QnlaV052Ym01bFkzUkRiMjVtYVdjdVpYaHdiMjVsYm5ScFlXeENZV05yVDJabVZHbHRaU0FySUZ3aUlITmxZeTVjSWlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklISmxjWFZwY21Wa0lHWnZjaUJ6WTJWdVlYSnBiM01nZDJobGJpQmxjbkp2Y2lCaGJtUWdZMnh2YzJVZ1pYWmxiblJ6SUdGeVpTQm1hWEpsWkNCaVlXTnJJSFJ2SUdKaFkydGNiaUFnSUNBZ0lDQWdJQ0FnSUhkbFlsTnZZMnRsZEVOdmJtWnBaeTV3Y205dGFYTmxRMjl0Y0d4bGRHVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCM1pXSlRiMk5yWlhSRGIyNW1hV2N1WTI5dWJrTnZibVpwWnlBOUlHNTFiR3c3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsWTI5dWJtVmpkRU52Ym1acFp5NWxlSEJ2Ym1WdWRHbGhiRlJwYldWdmRYUklZVzVrYkdVZ1BTQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbFkyOXVibVZqZEVOdmJtWnBaeTV5WldOdmJtNWxZM1JYWldKVGIyTnJaWFFnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2RsZEZkbFlsTnZZMnRsZEVOdmJtNURiMjVtYVdjb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc0lERXdNREFnS2lCeVpXTnZibTVsWTNSRGIyNW1hV2N1Wlhod2IyNWxiblJwWVd4Q1lXTnJUMlptVkdsdFpTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZDJWaVUyOWphMlYwUTI5dVptbG5MbkJ5YjIxcGMyVkRiMjF3YkdWMFpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHZaMmRsY2k1bGNuSnZjaWhjSWtOdmRXeGtJRzV2ZENCamIyNXVaV04wSUhSdklGZGxZbE52WTJ0bGRDQmhablJsY2lCelpYWmxjbUZzSUdGMGRHVnRjSFJ6WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdWeWJXbHVZWFJsVjJWaVUyOWphMlYwVFdGdVlXZGxjaWdwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdOdmJuTjBJSFJsY20xcGJtRjBaVmRsWWxOdlkydGxkRTFoYm1GblpYSWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxjMlYwVTNSaGRHVW9LVHRjYmlBZ0lDQWdJQ0FnWTJ4dmMyVlhaV0pUYjJOclpYUW9YQ0pVWlhKdGFXNWhkR2x1WnlCWFpXSlRiMk5yWlhRZ1RXRnVZV2RsY2x3aUtUdGNiaUFnSUNBZ0lDQWdiRzluWjJWeUxtVnljbTl5S0Z3aVYyVmlVMjlqYTJWMElFbHVhWFJwWVd4cGVtRjBhVzl1SUdaaGFXeGxaRndpS1R0Y2JpQWdJQ0FnSUNBZ2NtVmpiMjV1WldOMFEyOXVabWxuTG5kbFluTnZZMnRsZEVsdWFYUkdZV2xzWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCamJHVmhja2x1ZEdWeWRtRnNLRzVsZEhkdmNtdERiMjV1WldOMGFYWnBkSGxEYUdWamEyVnlLVHRjYmlBZ0lDQWdJQ0FnYVc1MmIydGxRMkZzYkdKaFkydHpLR05oYkd4aVlXTnJjeTVwYm1sMFJtRnBiSFZ5WlNrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdOdmJuTjBJR055WldGMFpWZGxZbE52WTJ0bGRGQmhlV3h2WVdRZ1BTQm1kVzVqZEdsdmJpQW9hMlY1TENCamIyNTBaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCS1UwOU9Mbk4wY21sdVoybG1lU2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJblJ2Y0dsalhDSTZJR3RsZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpWTI5dWRHVnVkRndpT2lCamIyNTBaVzUwWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCamIyNXpkQ0J6Wlc1a1RXVnpjMkZuWlNBOUlHWjFibU4wYVc5dUtIQmhlV3h2WVdRcElIdGNiaUFnSUNBZ0lDQWdWWFJwYkhNdVlYTnpaWEowU1hOUFltcGxZM1FvY0dGNWJHOWhaQ3dnWENKd1lYbHNiMkZrWENJcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvY0dGNWJHOWhaQzUwYjNCcFl5QTlQVDBnZFc1a1pXWnBibVZrSUh4OElHbHVkbUZzYVdSVFpXNWtUV1Z6YzJGblpWSnZkWFJsUzJWNWN5NW9ZWE1vY0dGNWJHOWhaQzUwYjNCcFl5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHZaMmRsY2k1M1lYSnVLRndpUTJGdWJtOTBJSE5sYm1RZ2JXVnpjMkZuWlN3Z1NXNTJZV3hwWkNCMGIzQnBZMXdpTENCd1lYbHNiMkZrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGNWJHOWhaQ0E5SUVwVFQwNHVjM1J5YVc1bmFXWjVLSEJoZVd4dllXUXBPMXh1SUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHOW5aMlZ5TG5kaGNtNG9YQ0pGY25KdmNpQnpkSEpwYm1kcFpua2diV1Z6YzJGblpWd2lMQ0J3WVhsc2IyRmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvZDJWaVUyOWphMlYwSUNZbUlIZGxZbE52WTJ0bGRDNXlaV0ZrZVZOMFlYUmxJRDA5UFNCWFpXSlRiMk5yWlhRdVQxQkZUaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiRzluWjJWeUxtUmxZblZuS0NkWFpXSlRiMk5yWlhSTllXNWhaMlZ5SUhObGJtUnBibWNnYldWemMyRm5aU2NzSUhCaGVXeHZZV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkMlZpVTI5amEyVjBMbk5sYm1Rb2NHRjViRzloWkNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzYjJkblpYSXVkMkZ5YmloY0lrTmhibTV2ZENCelpXNWtJRzFsYzNOaFoyVXNJSGRsWWlCemIyTnJaWFFnWTI5dWJtVmpkR2x2YmlCcGN5QnViM1FnYjNCbGJsd2lLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JqYjI1emRDQnpkV0p6WTNKcFltVlViM0JwWTNNZ1BTQm1kVzVqZEdsdmJpaDBiM0JwWTNNcElIdGNiaUFnSUNBZ0lDQWdWWFJwYkhNdVlYTnpaWEowVG05MFRuVnNiQ2gwYjNCcFkzTXNJQ2QwYjNCcFkzTW5LVHRjYmlBZ0lDQWdJQ0FnVlhScGJITXVZWE56WlhKMFNYTk1hWE4wS0hSdmNHbGpjeWs3WEc1Y2JpQWdJQ0FnSUNBZ2RHOXdhV056TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0hSdmNHbGpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiM0JwWTFOMVluTmpjbWx3ZEdsdmJpNXdaVzVrYVc1bkxtRmtaQ2gwYjNCcFl5azdYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gzWldKVGIyTnJaWFFnSmlZZ2QyVmlVMjlqYTJWMExuSmxZV1I1VTNSaGRHVWdQVDA5SUZkbFlsTnZZMnRsZEM1UFVFVk9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNaV0pUYjJOclpYUXVjMlZ1WkNoamNtVmhkR1ZYWldKVGIyTnJaWFJRWVhsc2IyRmtLRkpQVlZSRlgwdEZXUzVUVlVKVFExSkpRa1VzSUh0Y0luUnZjR2xqYzF3aU9pQjBiM0JwWTNOOUtTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdZMjl1YzNRZ2RtRnNhV1JYWldKVGIyTnJaWFJEYjI1dVEyOXVabWxuSUQwZ1puVnVZM1JwYjI0Z0tHTnZibTVEYjI1bWFXY3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGVjBhV3h6TG1selQySnFaV04wS0dOdmJtNURiMjVtYVdjcElDWW1JRlYwYVd4ekxtbHpUMkpxWldOMEtHTnZibTVEYjI1bWFXY3VkMlZpVTI5amEyVjBWSEpoYm5Od2IzSjBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0ppWWdWWFJwYkhNdWFYTlRkSEpwYm1jb1kyOXVia052Ym1acFp5NTNaV0pUYjJOclpYUlVjbUZ1YzNCdmNuUXVkWEpzS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdKaVlnVlhScGJITXVkbUZzYVdSWFUxVnliQ2hqYjI1dVEyOXVabWxuTG5kbFlsTnZZMnRsZEZSeVlXNXpjRzl5ZEM1MWNtd3BYRzRnSUNBZ0lDQWdJQ0FnSUNBbUppQlZkR2xzY3k1cGMwNTFiV0psY2loamIyNXVRMjl1Wm1sbkxuZGxZbE52WTJ0bGRGUnlZVzV6Y0c5eWRDNTBjbUZ1YzNCdmNuUk1hV1psVkdsdFpVbHVVMlZqYjI1a2N5a2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibTVEYjI1bWFXY3VkMlZpVTI5amEyVjBWSEpoYm5Od2IzSjBMblJ5WVc1emNHOXlkRXhwWm1WVWFXMWxTVzVUWldOdmJtUnpJRDQ5SUUxSlRsOVhSVUpUVDBOTFJWUmZURWxHUlZSSlRVVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUd4dloyZGxjaTVsY25KdmNpaGNJa2x1ZG1Gc2FXUWdWMlZpVTI5amEyVjBJRU52Ym01bFkzUnBiMjRnUTI5dVptbG5kWEpoZEdsdmJsd2lMQ0JqYjI1dVEyOXVabWxuS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjV6ZENCblpYUlhaV0pUYjJOclpYUkRiMjV1UTI5dVptbG5JRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvY21WamIyNXVaV04wUTI5dVptbG5MbmRsWW5OdlkydGxkRWx1YVhSR1lXbHNaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IzWldKVGIyTnJaWFJEYjI1bWFXY3VZMjl1YmtOdmJtWnBaeUE5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSGRsWWxOdlkydGxkRU52Ym1acFp5NXdjbTl0YVhObFEyOXRjR3hsZEdWa0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIZGxZbE52WTJ0bGRFTnZibVpwWnk1d2NtOXRhWE5sU0dGdVpHeGxJRDBnWTJGc2JHSmhZMnR6TG1kbGRGZGxZbE52WTJ0bGRGUnlZVzV6Y0c5eWRDZ3BPMXh1SUNBZ0lDQWdJQ0IzWldKVGIyTnJaWFJEYjI1bWFXY3VjSEp2YldselpVaGhibVJzWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMblJvWlc0b1puVnVZM1JwYjI0b2NtVnpjRzl1YzJVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJWaVUyOWphMlYwUTI5dVptbG5MbkJ5YjIxcGMyVkRiMjF3YkdWMFpXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJkblpYSXVaR1ZpZFdjb1hDSlRkV05qWlhOelpuVnNiSGtnWm1WMFkyaGxaQ0IzWldKVGIyTnJaWFFnWTI5dWJtVmpkR2x2YmlCamIyNW1hV2QxY21GMGFXOXVYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhaaGJHbGtWMlZpVTI5amEyVjBRMjl1YmtOdmJtWnBaeWh5WlhOd2IyNXpaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGNtMXBibUYwWlZkbFlsTnZZMnRsZEUxaGJtRm5aWElvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzWldKVGIyTnJaWFJEYjI1bWFXY3VZMjl1YmtOdmJtWnBaeUE5SUhKbGMzQnZibk5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVc5dWJHbHVaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamJHOXpaVmRsWWxOdlkydGxkQ2hjSWxKbGMzUmhjblJwYm1jZ1YyVmlVMjlqYTJWMElFMWhibUZuWlhKY0lpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibWwwVjJWaVUyOWphMlYwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpaHlaV0Z6YjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJWaVUyOWphMlYwUTI5dVptbG5MbkJ5YjIxcGMyVkRiMjF3YkdWMFpXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJkblpYSXVaWEp5YjNJb1hDSkdZV2xzWldRZ2RHOGdabVYwWTJnZ2QyVmlVMjlqYTJWMElHTnZibTVsWTNScGIyNGdZMjl1Wm1sbmRYSmhkR2x2Ymx3aUxDQnlaV0Z6YjI0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldaeVpYTm9WMlZpVTI5amEyVjBRMjl1Ym1WamRHbHZiaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCamIyNXpkQ0JwYm1sMFYyVmlVMjlqYTJWMElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaV052Ym01bFkzUkRiMjVtYVdjdWQyVmljMjlqYTJWMFNXNXBkRVpoYVd4bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHeHZaMmRsY2k1a1pXSjFaeWhjSWtsdWFYUnBZV3hwZW1sdVp5QlhaV0p6YjJOclpYUWdUV0Z1WVdkbGNsd2lLVHRjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJZV3hwWkZkbFlsTnZZMnRsZEVOdmJtNURiMjVtYVdjb2QyVmlVMjlqYTJWMFEyOXVabWxuTG1OdmJtNURiMjVtYVdjcEtTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzWldKVGIyTnJaWFFnUFNCdVpYY2dWMlZpVTI5amEyVjBLSGRsWWxOdlkydGxkRU52Ym1acFp5NWpiMjV1UTI5dVptbG5MbmRsWWxOdlkydGxkRlJ5WVc1emNHOXlkQzUxY213cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZGxZbE52WTJ0bGRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2liM0JsYmx3aUxDQjNaV0pUYjJOclpYUlBiazl3Wlc0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZGxZbE52WTJ0bGRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2liV1Z6YzJGblpWd2lMQ0IzWldKVGIyTnJaWFJQYmsxbGMzTmhaMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkbFlsTnZZMnRsZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aVpYSnliM0pjSWl3Z2QyVmlVMjlqYTJWMFQyNUZjbkp2Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyVmlVMjlqYTJWMExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hDSmpiRzl6WlZ3aUxDQjNaV0pUYjJOclpYUlBia05zYjNObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZGxZbE52WTJ0bGRFTnZibVpwWnk1d2NtOXRhWE5sUTI5dGNHeGxkR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsY20xcGJtRjBaVmRsWWxOdlkydGxkRTFoYm1GblpYSW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc2IyZG5aWEl1WlhKeWIzSW9YQ0pGY25KdmNpQkpibWwwYVdGc2FYcHBibWNnZDJWaUxYTnZZMnRsZEMxdFlXNWhaMlZ5WENJc0lHVnljbTl5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJsY20xcGJtRjBaVmRsWWxOdlkydGxkRTFoYm1GblpYSW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JqYjI1emRDQnZia052Ym01bFkzUnBiMjVIWVdsdUlEMGdablZ1WTNScGIyNG9ZMklwSUh0Y2JpQWdJQ0FnSUNBZ1ZYUnBiSE11WVhOelpYSjBWSEoxWlNoVmRHbHNjeTVwYzBaMWJtTjBhVzl1S0dOaUtTd2dKMk5pSUcxMWMzUWdZbVVnWVNCbWRXNWpkR2x2YmljcE8xeHVJQ0FnSUNBZ0lDQmpZV3hzWW1GamEzTXVZMjl1Ym1WamRHbHZia2RoYVc0dVlXUmtLR05pS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSGRsWWxOdlkydGxkQ0FtSmlCM1pXSlRiMk5yWlhRdWNtVmhaSGxUZEdGMFpTQTlQVDBnVjJWaVUyOWphMlYwTGs5UVJVNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmlLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNncElEMCtJR05oYkd4aVlXTnJjeTVqYjI1dVpXTjBhVzl1UjJGcGJpNWtaV3hsZEdVb1kySXBPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjV6ZENCdmJrTnZibTVsWTNScGIyNU1iM04wSUQwZ1puVnVZM1JwYjI0b1kySXBJSHRjYmlBZ0lDQWdJQ0FnVlhScGJITXVZWE56WlhKMFZISjFaU2hWZEdsc2N5NXBjMFoxYm1OMGFXOXVLR05pS1N3Z0oyTmlJRzExYzNRZ1ltVWdZU0JtZFc1amRHbHZiaWNwTzF4dUlDQWdJQ0FnSUNCallXeHNZbUZqYTNNdVkyOXVibVZqZEdsdmJreHZjM1F1WVdSa0tHTmlLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIZGxZbE52WTJ0bGRDQW1KaUIzWldKVGIyTnJaWFF1Y21WaFpIbFRkR0YwWlNBOVBUMGdWMlZpVTI5amEyVjBMa05NVDFORlJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kySW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0NrZ1BUNGdZMkZzYkdKaFkydHpMbU52Ym01bFkzUnBiMjVNYjNOMExtUmxiR1YwWlNoallpazdYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHTnZibk4wSUc5dVNXNXBkRVpoYVd4MWNtVWdQU0JtZFc1amRHbHZiaWhqWWlrZ2UxeHVJQ0FnSUNBZ0lDQlZkR2xzY3k1aGMzTmxjblJVY25WbEtGVjBhV3h6TG1selJuVnVZM1JwYjI0b1kySXBMQ0FuWTJJZ2JYVnpkQ0JpWlNCaElHWjFibU4wYVc5dUp5azdYRzRnSUNBZ0lDQWdJR05oYkd4aVlXTnJjeTVwYm1sMFJtRnBiSFZ5WlM1aFpHUW9ZMklwTzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZqYjI1dVpXTjBRMjl1Wm1sbkxuZGxZbk52WTJ0bGRFbHVhWFJHWVdsc1pXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmlLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNncElEMCtJR05oYkd4aVlXTnJjeTVwYm1sMFJtRnBiSFZ5WlM1a1pXeGxkR1VvWTJJcE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCamIyNXpkQ0JwYm1sMElEMGdablZ1WTNScGIyNG9kSEpoYm5Od2IzSjBTR0Z1Wkd4bEtTQjdYRzRnSUNBZ0lDQWdJRlYwYVd4ekxtRnpjMlZ5ZEZSeWRXVW9WWFJwYkhNdWFYTkdkVzVqZEdsdmJpaDBjbUZ1YzNCdmNuUklZVzVrYkdVcExDQW5kSEpoYm5Od2IzSjBTR0Z1Wkd4bElHMTFjM1FnWW1VZ1lTQm1kVzVqZEdsdmJpY3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb1kyRnNiR0poWTJ0ekxtZGxkRmRsWWxOdlkydGxkRlJ5WVc1emNHOXlkQ0FoUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiRzluWjJWeUxuZGhjbTRvWENKWFpXSWdVMjlqYTJWMElFMWhibUZuWlhJZ2QyRnpJR0ZzY21WaFpIa2dhVzVwZEdsaGJHbDZaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWTJGc2JHSmhZMnR6TG1kbGRGZGxZbE52WTJ0bGRGUnlZVzV6Y0c5eWRDQTlJSFJ5WVc1emNHOXlkRWhoYm1Sc1pUdGNibHh1SUNBZ0lDQWdJQ0JuWlhSWFpXSlRiMk5yWlhSRGIyNXVRMjl1Wm1sbktDazdYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHTnZibk4wSUc5dVUzVmljMk55YVhCMGFXOXVWWEJrWVhSbElEMGdablZ1WTNScGIyNG9ZMklwSUh0Y2JpQWdJQ0FnSUNBZ1ZYUnBiSE11WVhOelpYSjBWSEoxWlNoVmRHbHNjeTVwYzBaMWJtTjBhVzl1S0dOaUtTd2dKMk5pSUcxMWMzUWdZbVVnWVNCbWRXNWpkR2x2YmljcE8xeHVJQ0FnSUNBZ0lDQmpZV3hzWW1GamEzTXVjM1ZpYzJOeWFYQjBhVzl1VlhCa1lYUmxMbUZrWkNoallpazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW9LU0E5UGlCallXeHNZbUZqYTNNdWMzVmljMk55YVhCMGFXOXVWWEJrWVhSbExtUmxiR1YwWlNoallpazdYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHTnZibk4wSUc5dVUzVmljMk55YVhCMGFXOXVSbUZwYkhWeVpTQTlJR1oxYm1OMGFXOXVLR05pS1NCN1hHNGdJQ0FnSUNBZ0lGVjBhV3h6TG1GemMyVnlkRlJ5ZFdVb1ZYUnBiSE11YVhOR2RXNWpkR2x2Ymloallpa3NJQ2RqWWlCdGRYTjBJR0psSUdFZ1puVnVZM1JwYjI0bktUdGNiaUFnSUNBZ0lDQWdZMkZzYkdKaFkydHpMbk4xWW5OamNtbHdkR2x2YmtaaGFXeDFjbVV1WVdSa0tHTmlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ2dwSUQwK0lHTmhiR3hpWVdOcmN5NXpkV0p6WTNKcGNIUnBiMjVHWVdsc2RYSmxMbVJsYkdWMFpTaGpZaWs3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJR052Ym5OMElHOXVUV1Z6YzJGblpTQTlJR1oxYm1OMGFXOXVLSFJ2Y0dsalRtRnRaU3dnWTJJcElIdGNiaUFnSUNBZ0lDQWdWWFJwYkhNdVlYTnpaWEowVG05MFRuVnNiQ2gwYjNCcFkwNWhiV1VzSUNkMGIzQnBZMDVoYldVbktUdGNiaUFnSUNBZ0lDQWdWWFJwYkhNdVlYTnpaWEowVkhKMVpTaFZkR2xzY3k1cGMwWjFibU4wYVc5dUtHTmlLU3dnSjJOaUlHMTFjM1FnWW1VZ1lTQm1kVzVqZEdsdmJpY3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb1kyRnNiR0poWTJ0ekxuUnZjR2xqTG1oaGN5aDBiM0JwWTA1aGJXVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZV3hzWW1GamEzTXVkRzl3YVdNdVoyVjBLSFJ2Y0dsalRtRnRaU2t1WVdSa0tHTmlLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhiR3hpWVdOcmN5NTBiM0JwWXk1elpYUW9kRzl3YVdOT1lXMWxMQ0J1WlhjZ1UyVjBLRnRqWWwwcEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLQ2tnUFQ0Z1kyRnNiR0poWTJ0ekxuUnZjR2xqTG1kbGRDaDBiM0JwWTA1aGJXVXBMbVJsYkdWMFpTaGpZaWs3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJR052Ym5OMElHOXVRV3hzVFdWemMyRm5aU0E5SUdaMWJtTjBhVzl1SUNoallpa2dlMXh1SUNBZ0lDQWdJQ0JWZEdsc2N5NWhjM05sY25SVWNuVmxLRlYwYVd4ekxtbHpSblZ1WTNScGIyNG9ZMklwTENBblkySWdiWFZ6ZENCaVpTQmhJR1oxYm1OMGFXOXVKeWs3WEc0Z0lDQWdJQ0FnSUdOaGJHeGlZV05yY3k1aGJHeE5aWE56WVdkbExtRmtaQ2hqWWlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb0tTQTlQaUJqWVd4c1ltRmphM011WVd4c1RXVnpjMkZuWlM1a1pXeGxkR1VvWTJJcE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCMGFHbHpMbWx1YVhRZ1BTQnBibWwwTzF4dUlDQWdJSFJvYVhNdWIyNUpibWwwUm1GcGJIVnlaU0E5SUc5dVNXNXBkRVpoYVd4MWNtVTdYRzRnSUNBZ2RHaHBjeTV2YmtOdmJtNWxZM1JwYjI1SFlXbHVJRDBnYjI1RGIyNXVaV04wYVc5dVIyRnBianRjYmlBZ0lDQjBhR2x6TG05dVEyOXVibVZqZEdsdmJreHZjM1FnUFNCdmJrTnZibTVsWTNScGIyNU1iM04wTzF4dUlDQWdJSFJvYVhNdWIyNVRkV0p6WTNKcGNIUnBiMjVWY0dSaGRHVWdQU0J2YmxOMVluTmpjbWx3ZEdsdmJsVndaR0YwWlR0Y2JpQWdJQ0IwYUdsekxtOXVVM1ZpYzJOeWFYQjBhVzl1Um1GcGJIVnlaU0E5SUc5dVUzVmljMk55YVhCMGFXOXVSbUZwYkhWeVpUdGNiaUFnSUNCMGFHbHpMbTl1VFdWemMyRm5aU0E5SUc5dVRXVnpjMkZuWlR0Y2JpQWdJQ0IwYUdsekxtOXVRV3hzVFdWemMyRm5aU0E5SUc5dVFXeHNUV1Z6YzJGblpUdGNiaUFnSUNCMGFHbHpMbk4xWW5OamNtbGlaVlJ2Y0dsamN5QTlJSE4xWW5OamNtbGlaVlJ2Y0dsamN6dGNiaUFnSUNCMGFHbHpMbk5sYm1STlpYTnpZV2RsSUQwZ2MyVnVaRTFsYzNOaFoyVTdYRzVjYmlBZ0lDQjBhR2x6TG1Oc2IzTmxWMlZpVTI5amEyVjBJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxjMlYwVTNSaGRHVW9LVHRjYmlBZ0lDQWdJQ0FnWTJ4bFlYSkpiblJsY25aaGJDaHVaWFIzYjNKclEyOXVibVZqZEdsMmFYUjVRMmhsWTJ0bGNpazdYRzRnSUNBZ0lDQWdJR05zYjNObFYyVmlVMjlqYTJWMEtGd2lWWE5sY2lCeVpYRjFaWE4wSUhSdklHTnNiM05sSUZkbFlsTnZZMnRsZEZ3aUtUdGNiaUFnSUNCOU8xeHVmVHRjYmx4dVkyOXVjM1FnVjJWaVUyOWphMlYwVFdGdVlXZGxja052Ym5OMGNuVmpkRzl5SUQwZ0tDa2dQVDRnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVjJWaVUyOWphMlYwVFdGdVlXZGxjaWdwTzF4dWZUdGNibHh1WTI5dWMzUWdjMlYwUjJ4dlltRnNRMjl1Wm1sbklEMGdZMjl1Wm1sbklEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCc2IyZG5aWEpEYjI1bWFXY2dQU0JqYjI1bWFXY3ViRzluWjJWeVEyOXVabWxuTzF4dUlDQWdJRXh2WjAxaGJtRm5aWEl1ZFhCa1lYUmxURzluWjJWeVEyOXVabWxuS0d4dloyZGxja052Ym1acFp5azdYRzU5TzF4dVhHNWpiMjV6ZENCWFpXSlRiMk5yWlhSTllXNWhaMlZ5VDJKcVpXTjBJRDBnZTF4dUlDQWdJR055WldGMFpUb2dWMlZpVTI5amEyVjBUV0Z1WVdkbGNrTnZibk4wY25WamRHOXlMRnh1SUNBZ0lITmxkRWRzYjJKaGJFTnZibVpwWnpvZ2MyVjBSMnh2WW1Gc1EyOXVabWxuTEZ4dUlDQWdJRXh2WjB4bGRtVnNPaUJNYjJkTVpYWmxiQ3hjYmlBZ0lDQk1iMmRuWlhJNklFeHZaMmRsY2x4dWZUdGNibHh1Wlhod2IzSjBJSHNnVjJWaVUyOWphMlYwVFdGdVlXZGxjazlpYW1WamRDQjlPeUlzSWk4cUlHZHNiMkpoYkNCM2FXNWtiM2NzSUdWNGNHOXlkSE1zSUdSbFptbHVaU0FxTDF4dVhHNGhablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdKM1Z6WlNCemRISnBZM1FuWEc1Y2JpQWdJQ0IyWVhJZ2NtVWdQU0I3WEc0Z0lDQWdJQ0FnSUc1dmRGOXpkSEpwYm1jNklDOWJYbk5kTHl4Y2JpQWdJQ0FnSUNBZ2JtOTBYMkp2YjJ3NklDOWJYblJkTHl4Y2JpQWdJQ0FnSUNBZ2JtOTBYM1I1Y0dVNklDOWJYbFJkTHl4Y2JpQWdJQ0FnSUNBZ2JtOTBYM0J5YVcxcGRHbDJaVG9nTDF0ZWRsMHZMRnh1SUNBZ0lDQWdJQ0J1ZFcxaVpYSTZJQzliWkdsbFptZGRMeXhjYmlBZ0lDQWdJQ0FnYm5WdFpYSnBZMTloY21jNklDOWJZbU5rYVdWbVozVjRXRjB2TEZ4dUlDQWdJQ0FnSUNCcWMyOXVPaUF2VzJwZEx5eGNiaUFnSUNBZ0lDQWdibTkwWDJwemIyNDZJQzliWG1wZEx5eGNiaUFnSUNBZ0lDQWdkR1Y0ZERvZ0wxNWJYbHhjZURJMVhTc3ZMRnh1SUNBZ0lDQWdJQ0J0YjJSMWJHODZJQzllWEZ4NE1qVjdNbjB2TEZ4dUlDQWdJQ0FnSUNCd2JHRmpaV2h2YkdSbGNqb2dMMTVjWEhneU5TZy9PaWhiTVMwNVhWeGNaQ29wWEZ3a2ZGeGNLQ2hiWGlsZEt5bGNYQ2twUHloY1hDc3BQeWd3ZkNkYlhpUmRLVDhvTFNrL0tGeGNaQ3NwUHlnL09seGNMaWhjWEdRcktTay9LRnRpTFdkcGFtOXpkRlIxZG5oWVhTa3ZMRnh1SUNBZ0lDQWdJQ0JyWlhrNklDOWVLRnRoTFhwZlhWdGhMWHBmWEZ4a1hTb3BMMmtzWEc0Z0lDQWdJQ0FnSUd0bGVWOWhZMk5sYzNNNklDOWVYRnd1S0Z0aExYcGZYVnRoTFhwZlhGeGtYU29wTDJrc1hHNGdJQ0FnSUNBZ0lHbHVaR1Y0WDJGalkyVnpjem9nTDE1Y1hGc29YRnhrS3lsY1hGMHZMRnh1SUNBZ0lDQWdJQ0J6YVdkdU9pQXZYbHNyTFYwdlhHNGdJQ0FnZlZ4dVhHNGdJQ0FnWm5WdVkzUnBiMjRnYzNCeWFXNTBaaWhyWlhrcElIdGNiaUFnSUNBZ0lDQWdMeThnWUdGeVozVnRaVzUwYzJBZ2FYTWdibTkwSUdGdUlHRnljbUY1TENCaWRYUWdjMmh2ZFd4a0lHSmxJR1pwYm1VZ1ptOXlJSFJvYVhNZ1kyRnNiRnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM0J5YVc1MFpsOW1iM0p0WVhRb2MzQnlhVzUwWmw5d1lYSnpaU2hyWlhrcExDQmhjbWQxYldWdWRITXBYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1puVnVZM1JwYjI0Z2RuTndjbWx1ZEdZb1ptMTBMQ0JoY21kMktTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpjSEpwYm5SbUxtRndjR3g1S0c1MWJHd3NJRnRtYlhSZExtTnZibU5oZENoaGNtZDJJSHg4SUZ0ZEtTbGNiaUFnSUNCOVhHNWNiaUFnSUNCbWRXNWpkR2x2YmlCemNISnBiblJtWDJadmNtMWhkQ2h3WVhKelpWOTBjbVZsTENCaGNtZDJLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpkWEp6YjNJZ1BTQXhMQ0IwY21WbFgyeGxibWQwYUNBOUlIQmhjbk5sWDNSeVpXVXViR1Z1WjNSb0xDQmhjbWNzSUc5MWRIQjFkQ0E5SUNjbkxDQnBMQ0JyTENCd2FDd2djR0ZrTENCd1lXUmZZMmhoY21GamRHVnlMQ0J3WVdSZmJHVnVaM1JvTENCcGMxOXdiM05wZEdsMlpTd2djMmxuYmx4dUlDQWdJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnZEhKbFpWOXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ3WVhKelpWOTBjbVZsVzJsZElEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5MWRIQjFkQ0FyUFNCd1lYSnpaVjkwY21WbFcybGRYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2gwZVhCbGIyWWdjR0Z5YzJWZmRISmxaVnRwWFNBOVBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YUNBOUlIQmhjbk5sWDNSeVpXVmJhVjBnTHk4Z1kyOXVkbVZ1YVdWdVkyVWdjSFZ5Y0c5elpYTWdiMjVzZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdhQzVyWlhsektTQjdJQzh2SUd0bGVYZHZjbVFnWVhKbmRXMWxiblJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYSm5JRDBnWVhKbmRsdGpkWEp6YjNKZFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2F5QTlJREE3SUdzZ1BDQndhQzVyWlhsekxteGxibWQwYURzZ2F5c3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lYSm5JRDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaHpjSEpwYm5SbUtDZGJjM0J5YVc1MFpsMGdRMkZ1Ym05MElHRmpZMlZ6Y3lCd2NtOXdaWEowZVNCY0lpVnpYQ0lnYjJZZ2RXNWtaV1pwYm1Wa0lIWmhiSFZsSUZ3aUpYTmNJaWNzSUhCb0xtdGxlWE5iYTEwc0lIQm9MbXRsZVhOYmF5MHhYU2twWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21jZ1BTQmhjbWRiY0dndWEyVjVjMXRyWFYxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2h3YUM1d1lYSmhiVjl1YnlrZ2V5QXZMeUJ3YjNOcGRHbHZibUZzSUdGeVozVnRaVzUwSUNobGVIQnNhV05wZENsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpuSUQwZ1lYSm5kbHR3YUM1d1lYSmhiVjl1YjExY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3SUM4dklIQnZjMmwwYVc5dVlXd2dZWEpuZFcxbGJuUWdLR2x0Y0d4cFkybDBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtY2dQU0JoY21kMlcyTjFjbk52Y2lzclhWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpTNXViM1JmZEhsd1pTNTBaWE4wS0hCb0xuUjVjR1VwSUNZbUlISmxMbTV2ZEY5d2NtbHRhWFJwZG1VdWRHVnpkQ2h3YUM1MGVYQmxLU0FtSmlCaGNtY2dhVzV6ZEdGdVkyVnZaaUJHZFc1amRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbWNnUFNCaGNtY29LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaUzV1ZFcxbGNtbGpYMkZ5Wnk1MFpYTjBLSEJvTG5SNWNHVXBJQ1ltSUNoMGVYQmxiMllnWVhKbklDRTlQU0FuYm5WdFltVnlKeUFtSmlCcGMwNWhUaWhoY21jcEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtITndjbWx1ZEdZb0oxdHpjSEpwYm5SbVhTQmxlSEJsWTNScGJtY2diblZ0WW1WeUlHSjFkQ0JtYjNWdVpDQWxWQ2NzSUdGeVp5a3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxMbTUxYldKbGNpNTBaWE4wS0hCb0xuUjVjR1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x6WDNCdmMybDBhWFpsSUQwZ1lYSm5JRDQ5SURCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tIQm9MblI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5ZaWM2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21jZ1BTQndZWEp6WlVsdWRDaGhjbWNzSURFd0tTNTBiMU4wY21sdVp5Z3lLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbll5YzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbWNnUFNCVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtIQmhjbk5sU1c1MEtHRnlaeXdnTVRBcEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuWkNjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oya25PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpuSUQwZ2NHRnljMlZKYm5Rb1lYSm5MQ0F4TUNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMm9uT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKbklEMGdTbE5QVGk1emRISnBibWRwWm5rb1lYSm5MQ0J1ZFd4c0xDQndhQzUzYVdSMGFDQS9JSEJoY25ObFNXNTBLSEJvTG5kcFpIUm9LU0E2SURBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RsSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeVp5QTlJSEJvTG5CeVpXTnBjMmx2YmlBL0lIQmhjbk5sUm14dllYUW9ZWEpuS1M1MGIwVjRjRzl1Wlc1MGFXRnNLSEJvTG5CeVpXTnBjMmx2YmlrZ09pQndZWEp6WlVac2IyRjBLR0Z5WnlrdWRHOUZlSEJ2Ym1WdWRHbGhiQ2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZG1KenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WnlBOUlIQm9MbkJ5WldOcGMybHZiaUEvSUhCaGNuTmxSbXh2WVhRb1lYSm5LUzUwYjBacGVHVmtLSEJvTG5CeVpXTnBjMmx2YmlrZ09pQndZWEp6WlVac2IyRjBLR0Z5WnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMmNuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKbklEMGdjR2d1Y0hKbFkybHphVzl1SUQ4Z1UzUnlhVzVuS0U1MWJXSmxjaWhoY21jdWRHOVFjbVZqYVhOcGIyNG9jR2d1Y0hKbFkybHphVzl1S1NrcElEb2djR0Z5YzJWR2JHOWhkQ2hoY21jcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2R2SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeVp5QTlJQ2h3WVhKelpVbHVkQ2hoY21jc0lERXdLU0ErUGo0Z01Da3VkRzlUZEhKcGJtY29PQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozTW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpuSUQwZ1UzUnlhVzVuS0dGeVp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnlaeUE5SUNod2FDNXdjbVZqYVhOcGIyNGdQeUJoY21jdWMzVmljM1J5YVc1bktEQXNJSEJvTG5CeVpXTnBjMmx2YmlrZ09pQmhjbWNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZDBKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WnlBOUlGTjBjbWx1WnlnaElXRnlaeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WnlBOUlDaHdhQzV3Y21WamFYTnBiMjRnUHlCaGNtY3VjM1ZpYzNSeWFXNW5LREFzSUhCb0xuQnlaV05wYzJsdmJpa2dPaUJoY21jcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RVSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeVp5QTlJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY3VZMkZzYkNoaGNtY3BMbk5zYVdObEtEZ3NJQzB4S1M1MGIweHZkMlZ5UTJGelpTZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbWNnUFNBb2NHZ3VjSEpsWTJsemFXOXVJRDhnWVhKbkxuTjFZbk4wY21sdVp5Z3dMQ0J3YUM1d2NtVmphWE5wYjI0cElEb2dZWEpuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5kU2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21jZ1BTQndZWEp6WlVsdWRDaGhjbWNzSURFd0tTQStQajRnTUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5kaWM2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21jZ1BTQmhjbWN1ZG1Gc2RXVlBaaWdwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21jZ1BTQW9jR2d1Y0hKbFkybHphVzl1SUQ4Z1lYSm5Mbk4xWW5OMGNtbHVaeWd3TENCd2FDNXdjbVZqYVhOcGIyNHBJRG9nWVhKbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuZUNjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtY2dQU0FvY0dGeWMyVkpiblFvWVhKbkxDQXhNQ2tnUGo0K0lEQXBMblJ2VTNSeWFXNW5LREUyS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5XQ2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21jZ1BTQW9jR0Z5YzJWSmJuUW9ZWEpuTENBeE1Da2dQajQrSURBcExuUnZVM1J5YVc1bktERTJLUzUwYjFWd2NHVnlRMkZ6WlNncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVXVhbk52Ymk1MFpYTjBLSEJvTG5SNWNHVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOTFkSEIxZENBclBTQmhjbWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaUzV1ZFcxaVpYSXVkR1Z6ZENod2FDNTBlWEJsS1NBbUppQW9JV2x6WDNCdmMybDBhWFpsSUh4OElIQm9Mbk5wWjI0cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphV2R1SUQwZ2FYTmZjRzl6YVhScGRtVWdQeUFuS3ljZ09pQW5MU2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WnlBOUlHRnlaeTUwYjFOMGNtbHVaeWdwTG5KbGNHeGhZMlVvY21VdWMybG5iaXdnSnljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YVdkdUlEMGdKeWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVdSZlkyaGhjbUZqZEdWeUlEMGdjR2d1Y0dGa1gyTm9ZWElnUHlCd2FDNXdZV1JmWTJoaGNpQTlQVDBnSnpBbklEOGdKekFuSURvZ2NHZ3VjR0ZrWDJOb1lYSXVZMmhoY2tGMEtERXBJRG9nSnlBblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoWkY5c1pXNW5kR2dnUFNCd2FDNTNhV1IwYUNBdElDaHphV2R1SUNzZ1lYSm5LUzVzWlc1bmRHaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGa0lEMGdjR2d1ZDJsa2RHZ2dQeUFvY0dGa1gyeGxibWQwYUNBK0lEQWdQeUJ3WVdSZlkyaGhjbUZqZEdWeUxuSmxjR1ZoZENod1lXUmZiR1Z1WjNSb0tTQTZJQ2NuS1NBNklDY25YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5MWRIQjFkQ0FyUFNCd2FDNWhiR2xuYmlBL0lITnBaMjRnS3lCaGNtY2dLeUJ3WVdRZ09pQW9jR0ZrWDJOb1lYSmhZM1JsY2lBOVBUMGdKekFuSUQ4Z2MybG5iaUFySUhCaFpDQXJJR0Z5WnlBNklIQmhaQ0FySUhOcFoyNGdLeUJoY21jcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdmRYUndkWFJjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnYzNCeWFXNTBabDlqWVdOb1pTQTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2xjYmx4dUlDQWdJR1oxYm1OMGFXOXVJSE53Y21sdWRHWmZjR0Z5YzJVb1ptMTBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpjSEpwYm5SbVgyTmhZMmhsVzJadGRGMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCemNISnBiblJtWDJOaFkyaGxXMlp0ZEYxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFpoY2lCZlptMTBJRDBnWm0xMExDQnRZWFJqYUN3Z2NHRnljMlZmZEhKbFpTQTlJRnRkTENCaGNtZGZibUZ0WlhNZ1BTQXdYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaGZabTEwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0tHMWhkR05vSUQwZ2NtVXVkR1Y0ZEM1bGVHVmpLRjltYlhRcEtTQWhQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoY25ObFgzUnlaV1V1Y0hWemFDaHRZWFJqYUZzd1hTbGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLQ2h0WVhSamFDQTlJSEpsTG0xdlpIVnNieTVsZUdWaktGOW1iWFFwS1NBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhjbk5sWDNSeVpXVXVjSFZ6YUNnbkpTY3BYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2dvYldGMFkyZ2dQU0J5WlM1d2JHRmpaV2h2YkdSbGNpNWxlR1ZqS0Y5bWJYUXBLU0FoUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHRZWFJqYUZzeVhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtZGZibUZ0WlhNZ2ZEMGdNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdabWxsYkdSZmJHbHpkQ0E5SUZ0ZExDQnlaWEJzWVdObGJXVnVkRjltYVdWc1pDQTlJRzFoZEdOb1d6SmRMQ0JtYVdWc1pGOXRZWFJqYUNBOUlGdGRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ29abWxsYkdSZmJXRjBZMmdnUFNCeVpTNXJaWGt1WlhobFl5aHlaWEJzWVdObGJXVnVkRjltYVdWc1pDa3BJQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVdWc1pGOXNhWE4wTG5CMWMyZ29abWxsYkdSZmJXRjBZMmhiTVYwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FHbHNaU0FvS0hKbGNHeGhZMlZ0Wlc1MFgyWnBaV3hrSUQwZ2NtVndiR0ZqWlcxbGJuUmZabWxsYkdRdWMzVmljM1J5YVc1bktHWnBaV3hrWDIxaGRHTm9XekJkTG14bGJtZDBhQ2twSUNFOVBTQW5KeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dvWm1sbGJHUmZiV0YwWTJnZ1BTQnlaUzVyWlhsZllXTmpaWE56TG1WNFpXTW9jbVZ3YkdGalpXMWxiblJmWm1sbGJHUXBLU0FoUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVdWc1pGOXNhWE4wTG5CMWMyZ29abWxsYkdSZmJXRjBZMmhiTVYwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0NobWFXVnNaRjl0WVhSamFDQTlJSEpsTG1sdVpHVjRYMkZqWTJWemN5NWxlR1ZqS0hKbGNHeGhZMlZ0Wlc1MFgyWnBaV3hrS1NrZ0lUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbGxiR1JmYkdsemRDNXdkWE5vS0dacFpXeGtYMjFoZEdOb1d6RmRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZONWJuUmhlRVZ5Y205eUtDZGJjM0J5YVc1MFpsMGdabUZwYkdWa0lIUnZJSEJoY25ObElHNWhiV1ZrSUdGeVozVnRaVzUwSUd0bGVTY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRk41Ym5SaGVFVnljbTl5S0NkYmMzQnlhVzUwWmwwZ1ptRnBiR1ZrSUhSdklIQmhjbk5sSUc1aGJXVmtJR0Z5WjNWdFpXNTBJR3RsZVNjcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjBZMmhiTWwwZ1BTQm1hV1ZzWkY5c2FYTjBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21kZmJtRnRaWE1nZkQwZ01seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVhKblgyNWhiV1Z6SUQwOVBTQXpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblczTndjbWx1ZEdaZElHMXBlR2x1WnlCd2IzTnBkR2x2Ym1Gc0lHRnVaQ0J1WVcxbFpDQndiR0ZqWldodmJHUmxjbk1nYVhNZ2JtOTBJQ2g1WlhRcElITjFjSEJ2Y25SbFpDY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGeWMyVmZkSEpsWlM1d2RYTm9LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2JHRmpaV2h2YkdSbGNqb2diV0YwWTJoYk1GMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWEpoYlY5dWJ6b2dJQ0FnYldGMFkyaGJNVjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhsek9pQWdJQ0FnSUNBZ2JXRjBZMmhiTWwwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFXZHVPaUFnSUNBZ0lDQWdiV0YwWTJoYk0xMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZV1JmWTJoaGNqb2dJQ0FnYldGMFkyaGJORjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoYkdsbmJqb2dJQ0FnSUNBZ2JXRjBZMmhiTlYwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXUjBhRG9nSUNBZ0lDQWdiV0YwWTJoYk5sMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbVZqYVhOcGIyNDZJQ0FnYldGMFkyaGJOMTBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQWdJQ0FnSUNBZ2JXRjBZMmhiT0YxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJUZVc1MFlYaEZjbkp2Y2lnblczTndjbWx1ZEdaZElIVnVaWGh3WldOMFpXUWdjR3hoWTJWb2IyeGtaWEluS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1gyWnRkQ0E5SUY5bWJYUXVjM1ZpYzNSeWFXNW5LRzFoZEdOb1d6QmRMbXhsYm1kMGFDbGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM0J5YVc1MFpsOWpZV05vWlZ0bWJYUmRJRDBnY0dGeWMyVmZkSEpsWlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUdWNGNHOXlkQ0IwYnlCbGFYUm9aWElnWW5KdmQzTmxjaUJ2Y2lCdWIyUmxMbXB6WEc0Z0lDQWdJQ292WEc0Z0lDQWdMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdjWFZ2ZEdVdGNISnZjSE1nS2k5Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdWNGNHOXlkSE1nSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0FnSUdWNGNHOXlkSE5iSjNOd2NtbHVkR1luWFNBOUlITndjbWx1ZEdaY2JpQWdJQ0FnSUNBZ1pYaHdiM0owYzFzbmRuTndjbWx1ZEdZblhTQTlJSFp6Y0hKcGJuUm1YRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2QybHVaRzkzSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNCM2FXNWtiM2RiSjNOd2NtbHVkR1luWFNBOUlITndjbWx1ZEdaY2JpQWdJQ0FnSUNBZ2QybHVaRzkzV3lkMmMzQnlhVzUwWmlkZElEMGdkbk53Y21sdWRHWmNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdSbFptbHVaU0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUJrWldacGJtVmJKMkZ0WkNkZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXWnBibVVvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKM053Y21sdWRHWW5PaUJ6Y0hKcGJuUm1MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmRuTndjbWx1ZEdZbk9pQjJjM0J5YVc1MFpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnTHlvZ1pYTnNhVzUwTFdWdVlXSnNaU0J4ZFc5MFpTMXdjbTl3Y3lBcUwxeHVmU2dwT3lBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxc2FXNWxYRzRpTENJdkttVnpiR2x1ZENCdWJ5MTFiblZ6WldRdGRtRnljem9nWENKdlptWmNJaW92WEc1cGJYQnZjblFnZXlCWFpXSlRiMk5yWlhSTllXNWhaMlZ5VDJKcVpXTjBJSDBnWm5KdmJTQmNJaTR2ZDJWaVUyOWphMlYwVFdGdVlXZGxjbHdpTzF4dVhHNW5iRzlpWVd3dVkyOXVibVZqZENBOUlHZHNiMkpoYkM1amIyNXVaV04wSUh4OElIdDlPMXh1WTI5dWJtVmpkQzVYWldKVGIyTnJaWFJOWVc1aFoyVnlJRDBnVjJWaVUyOWphMlYwVFdGdVlXZGxjazlpYW1WamREdGNibHh1Wlhod2IzSjBJR052Ym5OMElGZGxZbE52WTJ0bGRFMWhibUZuWlhJZ1BTQlhaV0pUYjJOclpYUk5ZVzVoWjJWeVQySnFaV04wTzF4dUlpd2lkbUZ5SUdjN1hHNWNiaTh2SUZSb2FYTWdkMjl5YTNNZ2FXNGdibTl1TFhOMGNtbGpkQ0J0YjJSbFhHNW5JRDBnS0daMWJtTjBhVzl1S0NrZ2UxeHVYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JuMHBLQ2s3WEc1Y2JuUnllU0I3WEc1Y2RDOHZJRlJvYVhNZ2QyOXlhM01nYVdZZ1pYWmhiQ0JwY3lCaGJHeHZkMlZrSUNoelpXVWdRMU5RS1Z4dVhIUm5JRDBnWnlCOGZDQnVaWGNnUm5WdVkzUnBiMjRvWENKeVpYUjFjbTRnZEdocGMxd2lLU2dwTzF4dWZTQmpZWFJqYUNBb1pTa2dlMXh1WEhRdkx5QlVhR2x6SUhkdmNtdHpJR2xtSUhSb1pTQjNhVzVrYjNjZ2NtVm1aWEpsYm1ObElHbHpJR0YyWVdsc1lXSnNaVnh1WEhScFppQW9kSGx3Wlc5bUlIZHBibVJ2ZHlBOVBUMGdYQ0p2WW1wbFkzUmNJaWtnWnlBOUlIZHBibVJ2ZHp0Y2JuMWNibHh1THk4Z1p5QmpZVzRnYzNScGJHd2dZbVVnZFc1a1pXWnBibVZrTENCaWRYUWdibTkwYUdsdVp5QjBieUJrYnlCaFltOTFkQ0JwZEM0dUxseHVMeThnVjJVZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkN3Z2FXNXpkR1ZoWkNCdlppQnViM1JvYVc1bklHaGxjbVVzSUhOdklHbDBKM05jYmk4dklHVmhjMmxsY2lCMGJ5Qm9ZVzVrYkdVZ2RHaHBjeUJqWVhObExpQnBaaWdoWjJ4dlltRnNLU0I3SUM0dUxuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JuTzF4dUlsMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT0iLCIvLyBBV1MgU0RLIGZvciBKYXZhU2NyaXB0IHYyLjU1Ni4wXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vIExpY2Vuc2UgYXQgaHR0cHM6Ly9zZGsuYW1hem9uYXdzLmNvbS9qcy9CVU5ETEVfTElDRU5TRS50eHRcbihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHM9e1xuICBcInZlcnNpb25cIjogXCIyLjBcIixcbiAgXCJtZXRhZGF0YVwiOiB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwiMjAxNC0wNi0zMFwiLFxuICAgIFwiZW5kcG9pbnRQcmVmaXhcIjogXCJjb2duaXRvLWlkZW50aXR5XCIsXG4gICAgXCJqc29uVmVyc2lvblwiOiBcIjEuMVwiLFxuICAgIFwicHJvdG9jb2xcIjogXCJqc29uXCIsXG4gICAgXCJzZXJ2aWNlRnVsbE5hbWVcIjogXCJBbWF6b24gQ29nbml0byBJZGVudGl0eVwiLFxuICAgIFwic2VydmljZUlkXCI6IFwiQ29nbml0byBJZGVudGl0eVwiLFxuICAgIFwic2lnbmF0dXJlVmVyc2lvblwiOiBcInY0XCIsXG4gICAgXCJ0YXJnZXRQcmVmaXhcIjogXCJBV1NDb2duaXRvSWRlbnRpdHlTZXJ2aWNlXCIsXG4gICAgXCJ1aWRcIjogXCJjb2duaXRvLWlkZW50aXR5LTIwMTQtMDYtMzBcIlxuICB9LFxuICBcIm9wZXJhdGlvbnNcIjoge1xuICAgIFwiQ3JlYXRlSWRlbnRpdHlQb29sXCI6IHtcbiAgICAgIFwiaW5wdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgICAgXCJJZGVudGl0eVBvb2xOYW1lXCIsXG4gICAgICAgICAgXCJBbGxvd1VuYXV0aGVudGljYXRlZElkZW50aXRpZXNcIlxuICAgICAgICBdLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiSWRlbnRpdHlQb29sTmFtZVwiOiB7fSxcbiAgICAgICAgICBcIkFsbG93VW5hdXRoZW50aWNhdGVkSWRlbnRpdGllc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiU3VwcG9ydGVkTG9naW5Qcm92aWRlcnNcIjoge1xuICAgICAgICAgICAgXCJzaGFwZVwiOiBcIlM0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiRGV2ZWxvcGVyUHJvdmlkZXJOYW1lXCI6IHt9LFxuICAgICAgICAgIFwiT3BlbklkQ29ubmVjdFByb3ZpZGVyQVJOc1wiOiB7XG4gICAgICAgICAgICBcInNoYXBlXCI6IFwiUzhcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDb2duaXRvSWRlbnRpdHlQcm92aWRlcnNcIjoge1xuICAgICAgICAgICAgXCJzaGFwZVwiOiBcIlNhXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiU2FtbFByb3ZpZGVyQVJOc1wiOiB7XG4gICAgICAgICAgICBcInNoYXBlXCI6IFwiU2ZcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJJZGVudGl0eVBvb2xUYWdzXCI6IHtcbiAgICAgICAgICAgIFwic2hhcGVcIjogXCJTZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJvdXRwdXRcIjoge1xuICAgICAgICBcInNoYXBlXCI6IFwiU2pcIlxuICAgICAgfVxuICAgIH0sXG4gICAgXCJEZWxldGVJZGVudGl0aWVzXCI6IHtcbiAgICAgIFwiaW5wdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgICAgXCJJZGVudGl0eUlkc1RvRGVsZXRlXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIklkZW50aXR5SWRzVG9EZWxldGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwibGlzdFwiLFxuICAgICAgICAgICAgXCJtZW1iZXJcIjoge31cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiVW5wcm9jZXNzZWRJZGVudGl0eUlkc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJsaXN0XCIsXG4gICAgICAgICAgICBcIm1lbWJlclwiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgICAgICAgIFwiSWRlbnRpdHlJZFwiOiB7fSxcbiAgICAgICAgICAgICAgICBcIkVycm9yQ29kZVwiOiB7fVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIkRlbGV0ZUlkZW50aXR5UG9vbFwiOiB7XG4gICAgICBcImlucHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICAgIFwiSWRlbnRpdHlQb29sSWRcIlxuICAgICAgICBdLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiSWRlbnRpdHlQb29sSWRcIjoge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJEZXNjcmliZUlkZW50aXR5XCI6IHtcbiAgICAgIFwiaW5wdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgICAgXCJJZGVudGl0eUlkXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIklkZW50aXR5SWRcIjoge31cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwib3V0cHV0XCI6IHtcbiAgICAgICAgXCJzaGFwZVwiOiBcIlN1XCJcbiAgICAgIH1cbiAgICB9LFxuICAgIFwiRGVzY3JpYmVJZGVudGl0eVBvb2xcIjoge1xuICAgICAgXCJpbnB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IFtcbiAgICAgICAgICBcIklkZW50aXR5UG9vbElkXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIklkZW50aXR5UG9vbElkXCI6IHt9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgIFwic2hhcGVcIjogXCJTalwiXG4gICAgICB9XG4gICAgfSxcbiAgICBcIkdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHlcIjoge1xuICAgICAgXCJpbnB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IFtcbiAgICAgICAgICBcIklkZW50aXR5SWRcIlxuICAgICAgICBdLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiSWRlbnRpdHlJZFwiOiB7fSxcbiAgICAgICAgICBcIkxvZ2luc1wiOiB7XG4gICAgICAgICAgICBcInNoYXBlXCI6IFwiU3pcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDdXN0b21Sb2xlQXJuXCI6IHt9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiSWRlbnRpdHlJZFwiOiB7fSxcbiAgICAgICAgICBcIkNyZWRlbnRpYWxzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICAgICAgXCJBY2Nlc3NLZXlJZFwiOiB7fSxcbiAgICAgICAgICAgICAgXCJTZWNyZXRLZXlcIjoge30sXG4gICAgICAgICAgICAgIFwiU2Vzc2lvblRva2VuXCI6IHt9LFxuICAgICAgICAgICAgICBcIkV4cGlyYXRpb25cIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRpbWVzdGFtcFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiR2V0SWRcIjoge1xuICAgICAgXCJpbnB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IFtcbiAgICAgICAgICBcIklkZW50aXR5UG9vbElkXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIkFjY291bnRJZFwiOiB7fSxcbiAgICAgICAgICBcIklkZW50aXR5UG9vbElkXCI6IHt9LFxuICAgICAgICAgIFwiTG9naW5zXCI6IHtcbiAgICAgICAgICAgIFwic2hhcGVcIjogXCJTelwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJvdXRwdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIklkZW50aXR5SWRcIjoge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJHZXRJZGVudGl0eVBvb2xSb2xlc1wiOiB7XG4gICAgICBcImlucHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICAgIFwiSWRlbnRpdHlQb29sSWRcIlxuICAgICAgICBdLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiSWRlbnRpdHlQb29sSWRcIjoge31cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwib3V0cHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJJZGVudGl0eVBvb2xJZFwiOiB7fSxcbiAgICAgICAgICBcIlJvbGVzXCI6IHtcbiAgICAgICAgICAgIFwic2hhcGVcIjogXCJTMWJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJSb2xlTWFwcGluZ3NcIjoge1xuICAgICAgICAgICAgXCJzaGFwZVwiOiBcIlMxZFwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIkdldE9wZW5JZFRva2VuXCI6IHtcbiAgICAgIFwiaW5wdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgICAgXCJJZGVudGl0eUlkXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIklkZW50aXR5SWRcIjoge30sXG4gICAgICAgICAgXCJMb2dpbnNcIjoge1xuICAgICAgICAgICAgXCJzaGFwZVwiOiBcIlN6XCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiSWRlbnRpdHlJZFwiOiB7fSxcbiAgICAgICAgICBcIlRva2VuXCI6IHt9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiR2V0T3BlbklkVG9rZW5Gb3JEZXZlbG9wZXJJZGVudGl0eVwiOiB7XG4gICAgICBcImlucHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICAgIFwiSWRlbnRpdHlQb29sSWRcIixcbiAgICAgICAgICBcIkxvZ2luc1wiXG4gICAgICAgIF0sXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJJZGVudGl0eVBvb2xJZFwiOiB7fSxcbiAgICAgICAgICBcIklkZW50aXR5SWRcIjoge30sXG4gICAgICAgICAgXCJMb2dpbnNcIjoge1xuICAgICAgICAgICAgXCJzaGFwZVwiOiBcIlN6XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiVG9rZW5EdXJhdGlvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJsb25nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiSWRlbnRpdHlJZFwiOiB7fSxcbiAgICAgICAgICBcIlRva2VuXCI6IHt9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiTGlzdElkZW50aXRpZXNcIjoge1xuICAgICAgXCJpbnB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IFtcbiAgICAgICAgICBcIklkZW50aXR5UG9vbElkXCIsXG4gICAgICAgICAgXCJNYXhSZXN1bHRzXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIklkZW50aXR5UG9vbElkXCI6IHt9LFxuICAgICAgICAgIFwiTWF4UmVzdWx0c1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiTmV4dFRva2VuXCI6IHt9LFxuICAgICAgICAgIFwiSGlkZURpc2FibGVkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwib3V0cHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJJZGVudGl0eVBvb2xJZFwiOiB7fSxcbiAgICAgICAgICBcIklkZW50aXRpZXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwibGlzdFwiLFxuICAgICAgICAgICAgXCJtZW1iZXJcIjoge1xuICAgICAgICAgICAgICBcInNoYXBlXCI6IFwiU3VcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJOZXh0VG9rZW5cIjoge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJMaXN0SWRlbnRpdHlQb29sc1wiOiB7XG4gICAgICBcImlucHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICAgIFwiTWF4UmVzdWx0c1wiXG4gICAgICAgIF0sXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJNYXhSZXN1bHRzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJOZXh0VG9rZW5cIjoge31cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwib3V0cHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJJZGVudGl0eVBvb2xzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImxpc3RcIixcbiAgICAgICAgICAgIFwibWVtYmVyXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJJZGVudGl0eVBvb2xJZFwiOiB7fSxcbiAgICAgICAgICAgICAgICBcIklkZW50aXR5UG9vbE5hbWVcIjoge31cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJOZXh0VG9rZW5cIjoge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJMaXN0VGFnc0ZvclJlc291cmNlXCI6IHtcbiAgICAgIFwiaW5wdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgICAgXCJSZXNvdXJjZUFyblwiXG4gICAgICAgIF0sXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJSZXNvdXJjZUFyblwiOiB7fVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJvdXRwdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIlRhZ3NcIjoge1xuICAgICAgICAgICAgXCJzaGFwZVwiOiBcIlNnXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiTG9va3VwRGV2ZWxvcGVySWRlbnRpdHlcIjoge1xuICAgICAgXCJpbnB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IFtcbiAgICAgICAgICBcIklkZW50aXR5UG9vbElkXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIklkZW50aXR5UG9vbElkXCI6IHt9LFxuICAgICAgICAgIFwiSWRlbnRpdHlJZFwiOiB7fSxcbiAgICAgICAgICBcIkRldmVsb3BlclVzZXJJZGVudGlmaWVyXCI6IHt9LFxuICAgICAgICAgIFwiTWF4UmVzdWx0c1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiTmV4dFRva2VuXCI6IHt9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiSWRlbnRpdHlJZFwiOiB7fSxcbiAgICAgICAgICBcIkRldmVsb3BlclVzZXJJZGVudGlmaWVyTGlzdFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJsaXN0XCIsXG4gICAgICAgICAgICBcIm1lbWJlclwiOiB7fVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJOZXh0VG9rZW5cIjoge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJNZXJnZURldmVsb3BlcklkZW50aXRpZXNcIjoge1xuICAgICAgXCJpbnB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IFtcbiAgICAgICAgICBcIlNvdXJjZVVzZXJJZGVudGlmaWVyXCIsXG4gICAgICAgICAgXCJEZXN0aW5hdGlvblVzZXJJZGVudGlmaWVyXCIsXG4gICAgICAgICAgXCJEZXZlbG9wZXJQcm92aWRlck5hbWVcIixcbiAgICAgICAgICBcIklkZW50aXR5UG9vbElkXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIlNvdXJjZVVzZXJJZGVudGlmaWVyXCI6IHt9LFxuICAgICAgICAgIFwiRGVzdGluYXRpb25Vc2VySWRlbnRpZmllclwiOiB7fSxcbiAgICAgICAgICBcIkRldmVsb3BlclByb3ZpZGVyTmFtZVwiOiB7fSxcbiAgICAgICAgICBcIklkZW50aXR5UG9vbElkXCI6IHt9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiSWRlbnRpdHlJZFwiOiB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIlNldElkZW50aXR5UG9vbFJvbGVzXCI6IHtcbiAgICAgIFwiaW5wdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgICAgXCJJZGVudGl0eVBvb2xJZFwiLFxuICAgICAgICAgIFwiUm9sZXNcIlxuICAgICAgICBdLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiSWRlbnRpdHlQb29sSWRcIjoge30sXG4gICAgICAgICAgXCJSb2xlc1wiOiB7XG4gICAgICAgICAgICBcInNoYXBlXCI6IFwiUzFiXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiUm9sZU1hcHBpbmdzXCI6IHtcbiAgICAgICAgICAgIFwic2hhcGVcIjogXCJTMWRcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJUYWdSZXNvdXJjZVwiOiB7XG4gICAgICBcImlucHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICAgIFwiUmVzb3VyY2VBcm5cIlxuICAgICAgICBdLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiUmVzb3VyY2VBcm5cIjoge30sXG4gICAgICAgICAgXCJUYWdzXCI6IHtcbiAgICAgICAgICAgIFwic2hhcGVcIjogXCJTZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJvdXRwdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJtZW1iZXJzXCI6IHt9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIlVubGlua0RldmVsb3BlcklkZW50aXR5XCI6IHtcbiAgICAgIFwiaW5wdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgICAgXCJJZGVudGl0eUlkXCIsXG4gICAgICAgICAgXCJJZGVudGl0eVBvb2xJZFwiLFxuICAgICAgICAgIFwiRGV2ZWxvcGVyUHJvdmlkZXJOYW1lXCIsXG4gICAgICAgICAgXCJEZXZlbG9wZXJVc2VySWRlbnRpZmllclwiXG4gICAgICAgIF0sXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJJZGVudGl0eUlkXCI6IHt9LFxuICAgICAgICAgIFwiSWRlbnRpdHlQb29sSWRcIjoge30sXG4gICAgICAgICAgXCJEZXZlbG9wZXJQcm92aWRlck5hbWVcIjoge30sXG4gICAgICAgICAgXCJEZXZlbG9wZXJVc2VySWRlbnRpZmllclwiOiB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIlVubGlua0lkZW50aXR5XCI6IHtcbiAgICAgIFwiaW5wdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgICAgXCJJZGVudGl0eUlkXCIsXG4gICAgICAgICAgXCJMb2dpbnNcIixcbiAgICAgICAgICBcIkxvZ2luc1RvUmVtb3ZlXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIklkZW50aXR5SWRcIjoge30sXG4gICAgICAgICAgXCJMb2dpbnNcIjoge1xuICAgICAgICAgICAgXCJzaGFwZVwiOiBcIlN6XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiTG9naW5zVG9SZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJzaGFwZVwiOiBcIlN2XCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiVW50YWdSZXNvdXJjZVwiOiB7XG4gICAgICBcImlucHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICAgIFwiUmVzb3VyY2VBcm5cIlxuICAgICAgICBdLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiUmVzb3VyY2VBcm5cIjoge30sXG4gICAgICAgICAgXCJUYWdLZXlzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImxpc3RcIixcbiAgICAgICAgICAgIFwibWVtYmVyXCI6IHt9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJvdXRwdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJtZW1iZXJzXCI6IHt9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIlVwZGF0ZUlkZW50aXR5UG9vbFwiOiB7XG4gICAgICBcImlucHV0XCI6IHtcbiAgICAgICAgXCJzaGFwZVwiOiBcIlNqXCJcbiAgICAgIH0sXG4gICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgIFwic2hhcGVcIjogXCJTalwiXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBcInNoYXBlc1wiOiB7XG4gICAgXCJTNFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJtYXBcIixcbiAgICAgIFwia2V5XCI6IHt9LFxuICAgICAgXCJ2YWx1ZVwiOiB7fVxuICAgIH0sXG4gICAgXCJTOFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJsaXN0XCIsXG4gICAgICBcIm1lbWJlclwiOiB7fVxuICAgIH0sXG4gICAgXCJTYVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJsaXN0XCIsXG4gICAgICBcIm1lbWJlclwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiUHJvdmlkZXJOYW1lXCI6IHt9LFxuICAgICAgICAgIFwiQ2xpZW50SWRcIjoge30sXG4gICAgICAgICAgXCJTZXJ2ZXJTaWRlVG9rZW5DaGVja1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiU2ZcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwibGlzdFwiLFxuICAgICAgXCJtZW1iZXJcIjoge31cbiAgICB9LFxuICAgIFwiU2dcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwibWFwXCIsXG4gICAgICBcImtleVwiOiB7fSxcbiAgICAgIFwidmFsdWVcIjoge31cbiAgICB9LFxuICAgIFwiU2pcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICBcInJlcXVpcmVkXCI6IFtcbiAgICAgICAgXCJJZGVudGl0eVBvb2xJZFwiLFxuICAgICAgICBcIklkZW50aXR5UG9vbE5hbWVcIixcbiAgICAgICAgXCJBbGxvd1VuYXV0aGVudGljYXRlZElkZW50aXRpZXNcIlxuICAgICAgXSxcbiAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgIFwiSWRlbnRpdHlQb29sSWRcIjoge30sXG4gICAgICAgIFwiSWRlbnRpdHlQb29sTmFtZVwiOiB7fSxcbiAgICAgICAgXCJBbGxvd1VuYXV0aGVudGljYXRlZElkZW50aXRpZXNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIlxuICAgICAgICB9LFxuICAgICAgICBcIlN1cHBvcnRlZExvZ2luUHJvdmlkZXJzXCI6IHtcbiAgICAgICAgICBcInNoYXBlXCI6IFwiUzRcIlxuICAgICAgICB9LFxuICAgICAgICBcIkRldmVsb3BlclByb3ZpZGVyTmFtZVwiOiB7fSxcbiAgICAgICAgXCJPcGVuSWRDb25uZWN0UHJvdmlkZXJBUk5zXCI6IHtcbiAgICAgICAgICBcInNoYXBlXCI6IFwiUzhcIlxuICAgICAgICB9LFxuICAgICAgICBcIkNvZ25pdG9JZGVudGl0eVByb3ZpZGVyc1wiOiB7XG4gICAgICAgICAgXCJzaGFwZVwiOiBcIlNhXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJTYW1sUHJvdmlkZXJBUk5zXCI6IHtcbiAgICAgICAgICBcInNoYXBlXCI6IFwiU2ZcIlxuICAgICAgICB9LFxuICAgICAgICBcIklkZW50aXR5UG9vbFRhZ3NcIjoge1xuICAgICAgICAgIFwic2hhcGVcIjogXCJTZ1wiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiU3VcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICBcIklkZW50aXR5SWRcIjoge30sXG4gICAgICAgIFwiTG9naW5zXCI6IHtcbiAgICAgICAgICBcInNoYXBlXCI6IFwiU3ZcIlxuICAgICAgICB9LFxuICAgICAgICBcIkNyZWF0aW9uRGF0ZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwidGltZXN0YW1wXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJMYXN0TW9kaWZpZWREYXRlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJ0aW1lc3RhbXBcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIlN2XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImxpc3RcIixcbiAgICAgIFwibWVtYmVyXCI6IHt9XG4gICAgfSxcbiAgICBcIlN6XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm1hcFwiLFxuICAgICAgXCJrZXlcIjoge30sXG4gICAgICBcInZhbHVlXCI6IHt9XG4gICAgfSxcbiAgICBcIlMxYlwiOiB7XG4gICAgICBcInR5cGVcIjogXCJtYXBcIixcbiAgICAgIFwia2V5XCI6IHt9LFxuICAgICAgXCJ2YWx1ZVwiOiB7fVxuICAgIH0sXG4gICAgXCJTMWRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwibWFwXCIsXG4gICAgICBcImtleVwiOiB7fSxcbiAgICAgIFwidmFsdWVcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgICAgXCJUeXBlXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIlR5cGVcIjoge30sXG4gICAgICAgICAgXCJBbWJpZ3VvdXNSb2xlUmVzb2x1dGlvblwiOiB7fSxcbiAgICAgICAgICBcIlJ1bGVzQ29uZmlndXJhdGlvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICAgICAgICBcIlJ1bGVzXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgICAgICBcIlJ1bGVzXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJsaXN0XCIsXG4gICAgICAgICAgICAgICAgXCJtZW1iZXJcIjoge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgXCJDbGFpbVwiLFxuICAgICAgICAgICAgICAgICAgICBcIk1hdGNoVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBcIlZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiUm9sZUFSTlwiXG4gICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJDbGFpbVwiOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgXCJNYXRjaFR5cGVcIjoge30sXG4gICAgICAgICAgICAgICAgICAgIFwiVmFsdWVcIjoge30sXG4gICAgICAgICAgICAgICAgICAgIFwiUm9sZUFSTlwiOiB7fVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxufSx7fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cz17XG4gIFwicGFnaW5hdGlvblwiOiB7XG4gIH1cbn1cblxufSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cz17XG4gIFwidmVyc2lvblwiOiBcIjIuMFwiLFxuICBcIm1ldGFkYXRhXCI6IHtcbiAgICBcImFwaVZlcnNpb25cIjogXCIyMDE4LTA5LTA3XCIsXG4gICAgXCJlbmRwb2ludFByZWZpeFwiOiBcInBhcnRpY2lwYW50LmNvbm5lY3RcIixcbiAgICBcImpzb25WZXJzaW9uXCI6IFwiMS4xXCIsXG4gICAgXCJwcm90b2NvbFwiOiBcInJlc3QtanNvblwiLFxuICAgIFwic2VydmljZUFiYnJldmlhdGlvblwiOiBcIkFtYXpvbiBDb25uZWN0IFBhcnRpY2lwYW50XCIsXG4gICAgXCJzZXJ2aWNlRnVsbE5hbWVcIjogXCJBbWF6b24gQ29ubmVjdCBQYXJ0aWNpcGFudCBTZXJ2aWNlXCIsXG4gICAgXCJzZXJ2aWNlSWRcIjogXCJDb25uZWN0UGFydGljaXBhbnRcIixcbiAgICBcInNpZ25hdHVyZVZlcnNpb25cIjogXCJ2NFwiLFxuICAgIFwic2lnbmluZ05hbWVcIjogXCJleGVjdXRlLWFwaVwiLFxuICAgIFwidWlkXCI6IFwiY29ubmVjdHBhcnRpY2lwYW50LTIwMTgtMDktMDdcIlxuICB9LFxuICBcIm9wZXJhdGlvbnNcIjoge1xuICAgIFwiQ3JlYXRlUGFydGljaXBhbnRDb25uZWN0aW9uXCI6IHtcbiAgICAgIFwiaHR0cFwiOiB7XG4gICAgICAgIFwicmVxdWVzdFVyaVwiOiBcIi9wYXJ0aWNpcGFudC9jb25uZWN0aW9uXCJcbiAgICAgIH0sXG4gICAgICBcImlucHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICAgIFwiVHlwZVwiLFxuICAgICAgICAgIFwiUGFydGljaXBhbnRUb2tlblwiXG4gICAgICAgIF0sXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImxpc3RcIixcbiAgICAgICAgICAgIFwibWVtYmVyXCI6IHt9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlBhcnRpY2lwYW50VG9rZW5cIjoge1xuICAgICAgICAgICAgXCJsb2NhdGlvblwiOiBcImhlYWRlclwiLFxuICAgICAgICAgICAgXCJsb2NhdGlvbk5hbWVcIjogXCJYLUFtei1CZWFyZXJcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwib3V0cHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJXZWJzb2NrZXRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgICAgICBcIlVybFwiOiB7fSxcbiAgICAgICAgICAgICAgXCJDb25uZWN0aW9uRXhwaXJ5XCI6IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkNvbm5lY3Rpb25DcmVkZW50aWFsc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgICAgIFwiQ29ubmVjdGlvblRva2VuXCI6IHt9LFxuICAgICAgICAgICAgICBcIkV4cGlyeVwiOiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJEaXNjb25uZWN0UGFydGljaXBhbnRcIjoge1xuICAgICAgXCJodHRwXCI6IHtcbiAgICAgICAgXCJyZXF1ZXN0VXJpXCI6IFwiL3BhcnRpY2lwYW50L2Rpc2Nvbm5lY3RcIlxuICAgICAgfSxcbiAgICAgIFwiaW5wdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgICAgXCJDb25uZWN0aW9uVG9rZW5cIlxuICAgICAgICBdLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiQ2xpZW50VG9rZW5cIjoge1xuICAgICAgICAgICAgXCJpZGVtcG90ZW5jeVRva2VuXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiQ29ubmVjdGlvblRva2VuXCI6IHtcbiAgICAgICAgICAgIFwibG9jYXRpb25cIjogXCJoZWFkZXJcIixcbiAgICAgICAgICAgIFwibG9jYXRpb25OYW1lXCI6IFwiWC1BbXotQmVhcmVyXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcIm1lbWJlcnNcIjoge31cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiR2V0VHJhbnNjcmlwdFwiOiB7XG4gICAgICBcImh0dHBcIjoge1xuICAgICAgICBcInJlcXVlc3RVcmlcIjogXCIvcGFydGljaXBhbnQvdHJhbnNjcmlwdFwiXG4gICAgICB9LFxuICAgICAgXCJpbnB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IFtcbiAgICAgICAgICBcIkNvbm5lY3Rpb25Ub2tlblwiXG4gICAgICAgIF0sXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJDb250YWN0SWRcIjoge30sXG4gICAgICAgICAgXCJNYXhSZXN1bHRzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJOZXh0VG9rZW5cIjoge30sXG4gICAgICAgICAgXCJTY2FuRGlyZWN0aW9uXCI6IHt9LFxuICAgICAgICAgIFwiU29ydE9yZGVyXCI6IHt9LFxuICAgICAgICAgIFwiU3RhcnRQb3NpdGlvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgICAgIFwiSWRcIjoge30sXG4gICAgICAgICAgICAgIFwiQWJzb2x1dGVUaW1lXCI6IHt9LFxuICAgICAgICAgICAgICBcIk1vc3RSZWNlbnRcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkNvbm5lY3Rpb25Ub2tlblwiOiB7XG4gICAgICAgICAgICBcImxvY2F0aW9uXCI6IFwiaGVhZGVyXCIsXG4gICAgICAgICAgICBcImxvY2F0aW9uTmFtZVwiOiBcIlgtQW16LUJlYXJlclwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJvdXRwdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIkluaXRpYWxDb250YWN0SWRcIjoge30sXG4gICAgICAgICAgXCJUcmFuc2NyaXB0XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImxpc3RcIixcbiAgICAgICAgICAgIFwibWVtYmVyXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJBYnNvbHV0ZVRpbWVcIjoge30sXG4gICAgICAgICAgICAgICAgXCJDb250ZW50XCI6IHt9LFxuICAgICAgICAgICAgICAgIFwiQ29udGVudFR5cGVcIjoge30sXG4gICAgICAgICAgICAgICAgXCJJZFwiOiB7fSxcbiAgICAgICAgICAgICAgICBcIlR5cGVcIjoge30sXG4gICAgICAgICAgICAgICAgXCJQYXJ0aWNpcGFudElkXCI6IHt9LFxuICAgICAgICAgICAgICAgIFwiRGlzcGxheU5hbWVcIjoge30sXG4gICAgICAgICAgICAgICAgXCJQYXJ0aWNpcGFudFJvbGVcIjoge31cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJOZXh0VG9rZW5cIjoge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJTZW5kRXZlbnRcIjoge1xuICAgICAgXCJodHRwXCI6IHtcbiAgICAgICAgXCJyZXF1ZXN0VXJpXCI6IFwiL3BhcnRpY2lwYW50L2V2ZW50XCJcbiAgICAgIH0sXG4gICAgICBcImlucHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICAgIFwiQ29udGVudFR5cGVcIixcbiAgICAgICAgICBcIkNvbm5lY3Rpb25Ub2tlblwiXG4gICAgICAgIF0sXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJDb250ZW50VHlwZVwiOiB7fSxcbiAgICAgICAgICBcIkNvbnRlbnRcIjoge30sXG4gICAgICAgICAgXCJDbGllbnRUb2tlblwiOiB7XG4gICAgICAgICAgICBcImlkZW1wb3RlbmN5VG9rZW5cIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDb25uZWN0aW9uVG9rZW5cIjoge1xuICAgICAgICAgICAgXCJsb2NhdGlvblwiOiBcImhlYWRlclwiLFxuICAgICAgICAgICAgXCJsb2NhdGlvbk5hbWVcIjogXCJYLUFtei1CZWFyZXJcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwib3V0cHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJJZFwiOiB7fSxcbiAgICAgICAgICBcIkFic29sdXRlVGltZVwiOiB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIlNlbmRNZXNzYWdlXCI6IHtcbiAgICAgIFwiaHR0cFwiOiB7XG4gICAgICAgIFwicmVxdWVzdFVyaVwiOiBcIi9wYXJ0aWNpcGFudC9tZXNzYWdlXCJcbiAgICAgIH0sXG4gICAgICBcImlucHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICAgIFwiQ29udGVudFR5cGVcIixcbiAgICAgICAgICBcIkNvbnRlbnRcIixcbiAgICAgICAgICBcIkNvbm5lY3Rpb25Ub2tlblwiXG4gICAgICAgIF0sXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJDb250ZW50VHlwZVwiOiB7fSxcbiAgICAgICAgICBcIkNvbnRlbnRcIjoge30sXG4gICAgICAgICAgXCJDbGllbnRUb2tlblwiOiB7XG4gICAgICAgICAgICBcImlkZW1wb3RlbmN5VG9rZW5cIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJDb25uZWN0aW9uVG9rZW5cIjoge1xuICAgICAgICAgICAgXCJsb2NhdGlvblwiOiBcImhlYWRlclwiLFxuICAgICAgICAgICAgXCJsb2NhdGlvbk5hbWVcIjogXCJYLUFtei1CZWFyZXJcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwib3V0cHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJJZFwiOiB7fSxcbiAgICAgICAgICBcIkFic29sdXRlVGltZVwiOiB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBcInNoYXBlc1wiOiB7fVxufVxufSx7fV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cz17XG4gIFwicGFnaW5hdGlvblwiOiB7XG4gICAgXCJHZXRUcmFuc2NyaXB0XCI6IHtcbiAgICAgIFwiaW5wdXRfdG9rZW5cIjogXCJOZXh0VG9rZW5cIixcbiAgICAgIFwib3V0cHV0X3Rva2VuXCI6IFwiTmV4dFRva2VuXCIsXG4gICAgICBcImxpbWl0X2tleVwiOiBcIk1heFJlc3VsdHNcIlxuICAgIH1cbiAgfVxufVxuXG59LHt9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzPXtcbiAgXCJhY21cIjoge1xuICAgIFwibmFtZVwiOiBcIkFDTVwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiYXBpZ2F0ZXdheVwiOiB7XG4gICAgXCJuYW1lXCI6IFwiQVBJR2F0ZXdheVwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb25hdXRvc2NhbGluZ1wiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJhcHBsaWNhdGlvbi1hdXRvc2NhbGluZ1wiLFxuICAgIFwibmFtZVwiOiBcIkFwcGxpY2F0aW9uQXV0b1NjYWxpbmdcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcImFwcHN0cmVhbVwiOiB7XG4gICAgXCJuYW1lXCI6IFwiQXBwU3RyZWFtXCJcbiAgfSxcbiAgXCJhdXRvc2NhbGluZ1wiOiB7XG4gICAgXCJuYW1lXCI6IFwiQXV0b1NjYWxpbmdcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcImJhdGNoXCI6IHtcbiAgICBcIm5hbWVcIjogXCJCYXRjaFwiXG4gIH0sXG4gIFwiYnVkZ2V0c1wiOiB7XG4gICAgXCJuYW1lXCI6IFwiQnVkZ2V0c1wiXG4gIH0sXG4gIFwiY2xvdWRkaXJlY3RvcnlcIjoge1xuICAgIFwibmFtZVwiOiBcIkNsb3VkRGlyZWN0b3J5XCIsXG4gICAgXCJ2ZXJzaW9uc1wiOiBbXG4gICAgICBcIjIwMTYtMDUtMTAqXCJcbiAgICBdXG4gIH0sXG4gIFwiY2xvdWRmb3JtYXRpb25cIjoge1xuICAgIFwibmFtZVwiOiBcIkNsb3VkRm9ybWF0aW9uXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJjbG91ZGZyb250XCI6IHtcbiAgICBcIm5hbWVcIjogXCJDbG91ZEZyb250XCIsXG4gICAgXCJ2ZXJzaW9uc1wiOiBbXG4gICAgICBcIjIwMTMtMDUtMTIqXCIsXG4gICAgICBcIjIwMTMtMTEtMTEqXCIsXG4gICAgICBcIjIwMTQtMDUtMzEqXCIsXG4gICAgICBcIjIwMTQtMTAtMjEqXCIsXG4gICAgICBcIjIwMTQtMTEtMDYqXCIsXG4gICAgICBcIjIwMTUtMDQtMTcqXCIsXG4gICAgICBcIjIwMTUtMDctMjcqXCIsXG4gICAgICBcIjIwMTUtMDktMTcqXCIsXG4gICAgICBcIjIwMTYtMDEtMTMqXCIsXG4gICAgICBcIjIwMTYtMDEtMjgqXCIsXG4gICAgICBcIjIwMTYtMDgtMDEqXCIsXG4gICAgICBcIjIwMTYtMDgtMjAqXCIsXG4gICAgICBcIjIwMTYtMDktMDcqXCIsXG4gICAgICBcIjIwMTYtMDktMjkqXCIsXG4gICAgICBcIjIwMTYtMTEtMjUqXCIsXG4gICAgICBcIjIwMTctMDMtMjUqXCIsXG4gICAgICBcIjIwMTctMTAtMzAqXCIsXG4gICAgICBcIjIwMTgtMDYtMTgqXCIsXG4gICAgICBcIjIwMTgtMTEtMDUqXCJcbiAgICBdLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiY2xvdWRoc21cIjoge1xuICAgIFwibmFtZVwiOiBcIkNsb3VkSFNNXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJjbG91ZHNlYXJjaFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiQ2xvdWRTZWFyY2hcIlxuICB9LFxuICBcImNsb3Vkc2VhcmNoZG9tYWluXCI6IHtcbiAgICBcIm5hbWVcIjogXCJDbG91ZFNlYXJjaERvbWFpblwiXG4gIH0sXG4gIFwiY2xvdWR0cmFpbFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiQ2xvdWRUcmFpbFwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiY2xvdWR3YXRjaFwiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJtb25pdG9yaW5nXCIsXG4gICAgXCJuYW1lXCI6IFwiQ2xvdWRXYXRjaFwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiY2xvdWR3YXRjaGV2ZW50c1wiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJldmVudHNcIixcbiAgICBcIm5hbWVcIjogXCJDbG91ZFdhdGNoRXZlbnRzXCIsXG4gICAgXCJ2ZXJzaW9uc1wiOiBbXG4gICAgICBcIjIwMTQtMDItMDMqXCJcbiAgICBdLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiY2xvdWR3YXRjaGxvZ3NcIjoge1xuICAgIFwicHJlZml4XCI6IFwibG9nc1wiLFxuICAgIFwibmFtZVwiOiBcIkNsb3VkV2F0Y2hMb2dzXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJjb2RlYnVpbGRcIjoge1xuICAgIFwibmFtZVwiOiBcIkNvZGVCdWlsZFwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiY29kZWNvbW1pdFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiQ29kZUNvbW1pdFwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiY29kZWRlcGxveVwiOiB7XG4gICAgXCJuYW1lXCI6IFwiQ29kZURlcGxveVwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiY29kZXBpcGVsaW5lXCI6IHtcbiAgICBcIm5hbWVcIjogXCJDb2RlUGlwZWxpbmVcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcImNvZ25pdG9pZGVudGl0eVwiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJjb2duaXRvLWlkZW50aXR5XCIsXG4gICAgXCJuYW1lXCI6IFwiQ29nbml0b0lkZW50aXR5XCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJjb2duaXRvaWRlbnRpdHlzZXJ2aWNlcHJvdmlkZXJcIjoge1xuICAgIFwicHJlZml4XCI6IFwiY29nbml0by1pZHBcIixcbiAgICBcIm5hbWVcIjogXCJDb2duaXRvSWRlbnRpdHlTZXJ2aWNlUHJvdmlkZXJcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcImNvZ25pdG9zeW5jXCI6IHtcbiAgICBcInByZWZpeFwiOiBcImNvZ25pdG8tc3luY1wiLFxuICAgIFwibmFtZVwiOiBcIkNvZ25pdG9TeW5jXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJjb25maWdzZXJ2aWNlXCI6IHtcbiAgICBcInByZWZpeFwiOiBcImNvbmZpZ1wiLFxuICAgIFwibmFtZVwiOiBcIkNvbmZpZ1NlcnZpY2VcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcImN1clwiOiB7XG4gICAgXCJuYW1lXCI6IFwiQ1VSXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJkYXRhcGlwZWxpbmVcIjoge1xuICAgIFwibmFtZVwiOiBcIkRhdGFQaXBlbGluZVwiXG4gIH0sXG4gIFwiZGV2aWNlZmFybVwiOiB7XG4gICAgXCJuYW1lXCI6IFwiRGV2aWNlRmFybVwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiZGlyZWN0Y29ubmVjdFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiRGlyZWN0Q29ubmVjdFwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiZGlyZWN0b3J5c2VydmljZVwiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJkc1wiLFxuICAgIFwibmFtZVwiOiBcIkRpcmVjdG9yeVNlcnZpY2VcIlxuICB9LFxuICBcImRpc2NvdmVyeVwiOiB7XG4gICAgXCJuYW1lXCI6IFwiRGlzY292ZXJ5XCJcbiAgfSxcbiAgXCJkbXNcIjoge1xuICAgIFwibmFtZVwiOiBcIkRNU1wiXG4gIH0sXG4gIFwiZHluYW1vZGJcIjoge1xuICAgIFwibmFtZVwiOiBcIkR5bmFtb0RCXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJkeW5hbW9kYnN0cmVhbXNcIjoge1xuICAgIFwicHJlZml4XCI6IFwic3RyZWFtcy5keW5hbW9kYlwiLFxuICAgIFwibmFtZVwiOiBcIkR5bmFtb0RCU3RyZWFtc1wiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiZWMyXCI6IHtcbiAgICBcIm5hbWVcIjogXCJFQzJcIixcbiAgICBcInZlcnNpb25zXCI6IFtcbiAgICAgIFwiMjAxMy0wNi0xNSpcIixcbiAgICAgIFwiMjAxMy0xMC0xNSpcIixcbiAgICAgIFwiMjAxNC0wMi0wMSpcIixcbiAgICAgIFwiMjAxNC0wNS0wMSpcIixcbiAgICAgIFwiMjAxNC0wNi0xNSpcIixcbiAgICAgIFwiMjAxNC0wOS0wMSpcIixcbiAgICAgIFwiMjAxNC0xMC0wMSpcIixcbiAgICAgIFwiMjAxNS0wMy0wMSpcIixcbiAgICAgIFwiMjAxNS0wNC0xNSpcIixcbiAgICAgIFwiMjAxNS0xMC0wMSpcIixcbiAgICAgIFwiMjAxNi0wNC0wMSpcIixcbiAgICAgIFwiMjAxNi0wOS0xNSpcIlxuICAgIF0sXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJlY3JcIjoge1xuICAgIFwibmFtZVwiOiBcIkVDUlwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiZWNzXCI6IHtcbiAgICBcIm5hbWVcIjogXCJFQ1NcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcImVmc1wiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJlbGFzdGljZmlsZXN5c3RlbVwiLFxuICAgIFwibmFtZVwiOiBcIkVGU1wiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiZWxhc3RpY2FjaGVcIjoge1xuICAgIFwibmFtZVwiOiBcIkVsYXN0aUNhY2hlXCIsXG4gICAgXCJ2ZXJzaW9uc1wiOiBbXG4gICAgICBcIjIwMTItMTEtMTUqXCIsXG4gICAgICBcIjIwMTQtMDMtMjQqXCIsXG4gICAgICBcIjIwMTQtMDctMTUqXCIsXG4gICAgICBcIjIwMTQtMDktMzAqXCJcbiAgICBdLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiZWxhc3RpY2JlYW5zdGFsa1wiOiB7XG4gICAgXCJuYW1lXCI6IFwiRWxhc3RpY0JlYW5zdGFsa1wiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiZWxiXCI6IHtcbiAgICBcInByZWZpeFwiOiBcImVsYXN0aWNsb2FkYmFsYW5jaW5nXCIsXG4gICAgXCJuYW1lXCI6IFwiRUxCXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJlbGJ2MlwiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJlbGFzdGljbG9hZGJhbGFuY2luZ3YyXCIsXG4gICAgXCJuYW1lXCI6IFwiRUxCdjJcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcImVtclwiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJlbGFzdGljbWFwcmVkdWNlXCIsXG4gICAgXCJuYW1lXCI6IFwiRU1SXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJlc1wiOiB7XG4gICAgXCJuYW1lXCI6IFwiRVNcIlxuICB9LFxuICBcImVsYXN0aWN0cmFuc2NvZGVyXCI6IHtcbiAgICBcIm5hbWVcIjogXCJFbGFzdGljVHJhbnNjb2RlclwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiZmlyZWhvc2VcIjoge1xuICAgIFwibmFtZVwiOiBcIkZpcmVob3NlXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJnYW1lbGlmdFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiR2FtZUxpZnRcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcImdsYWNpZXJcIjoge1xuICAgIFwibmFtZVwiOiBcIkdsYWNpZXJcIlxuICB9LFxuICBcImhlYWx0aFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiSGVhbHRoXCJcbiAgfSxcbiAgXCJpYW1cIjoge1xuICAgIFwibmFtZVwiOiBcIklBTVwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiaW1wb3J0ZXhwb3J0XCI6IHtcbiAgICBcIm5hbWVcIjogXCJJbXBvcnRFeHBvcnRcIlxuICB9LFxuICBcImluc3BlY3RvclwiOiB7XG4gICAgXCJuYW1lXCI6IFwiSW5zcGVjdG9yXCIsXG4gICAgXCJ2ZXJzaW9uc1wiOiBbXG4gICAgICBcIjIwMTUtMDgtMTgqXCJcbiAgICBdLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiaW90XCI6IHtcbiAgICBcIm5hbWVcIjogXCJJb3RcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcImlvdGRhdGFcIjoge1xuICAgIFwicHJlZml4XCI6IFwiaW90LWRhdGFcIixcbiAgICBcIm5hbWVcIjogXCJJb3REYXRhXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJraW5lc2lzXCI6IHtcbiAgICBcIm5hbWVcIjogXCJLaW5lc2lzXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJraW5lc2lzYW5hbHl0aWNzXCI6IHtcbiAgICBcIm5hbWVcIjogXCJLaW5lc2lzQW5hbHl0aWNzXCJcbiAgfSxcbiAgXCJrbXNcIjoge1xuICAgIFwibmFtZVwiOiBcIktNU1wiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwibGFtYmRhXCI6IHtcbiAgICBcIm5hbWVcIjogXCJMYW1iZGFcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcImxleHJ1bnRpbWVcIjoge1xuICAgIFwicHJlZml4XCI6IFwicnVudGltZS5sZXhcIixcbiAgICBcIm5hbWVcIjogXCJMZXhSdW50aW1lXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJsaWdodHNhaWxcIjoge1xuICAgIFwibmFtZVwiOiBcIkxpZ2h0c2FpbFwiXG4gIH0sXG4gIFwibWFjaGluZWxlYXJuaW5nXCI6IHtcbiAgICBcIm5hbWVcIjogXCJNYWNoaW5lTGVhcm5pbmdcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcIm1hcmtldHBsYWNlY29tbWVyY2VhbmFseXRpY3NcIjoge1xuICAgIFwibmFtZVwiOiBcIk1hcmtldHBsYWNlQ29tbWVyY2VBbmFseXRpY3NcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcIm1hcmtldHBsYWNlbWV0ZXJpbmdcIjoge1xuICAgIFwicHJlZml4XCI6IFwibWV0ZXJpbmdtYXJrZXRwbGFjZVwiLFxuICAgIFwibmFtZVwiOiBcIk1hcmtldHBsYWNlTWV0ZXJpbmdcIlxuICB9LFxuICBcIm10dXJrXCI6IHtcbiAgICBcInByZWZpeFwiOiBcIm10dXJrLXJlcXVlc3RlclwiLFxuICAgIFwibmFtZVwiOiBcIk1UdXJrXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJtb2JpbGVhbmFseXRpY3NcIjoge1xuICAgIFwibmFtZVwiOiBcIk1vYmlsZUFuYWx5dGljc1wiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwib3Bzd29ya3NcIjoge1xuICAgIFwibmFtZVwiOiBcIk9wc1dvcmtzXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJvcHN3b3Jrc2NtXCI6IHtcbiAgICBcIm5hbWVcIjogXCJPcHNXb3Jrc0NNXCJcbiAgfSxcbiAgXCJvcmdhbml6YXRpb25zXCI6IHtcbiAgICBcIm5hbWVcIjogXCJPcmdhbml6YXRpb25zXCJcbiAgfSxcbiAgXCJwaW5wb2ludFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiUGlucG9pbnRcIlxuICB9LFxuICBcInBvbGx5XCI6IHtcbiAgICBcIm5hbWVcIjogXCJQb2xseVwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwicmRzXCI6IHtcbiAgICBcIm5hbWVcIjogXCJSRFNcIixcbiAgICBcInZlcnNpb25zXCI6IFtcbiAgICAgIFwiMjAxNC0wOS0wMSpcIlxuICAgIF0sXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJyZWRzaGlmdFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiUmVkc2hpZnRcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcInJla29nbml0aW9uXCI6IHtcbiAgICBcIm5hbWVcIjogXCJSZWtvZ25pdGlvblwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwicmVzb3VyY2Vncm91cHN0YWdnaW5nYXBpXCI6IHtcbiAgICBcIm5hbWVcIjogXCJSZXNvdXJjZUdyb3Vwc1RhZ2dpbmdBUElcIlxuICB9LFxuICBcInJvdXRlNTNcIjoge1xuICAgIFwibmFtZVwiOiBcIlJvdXRlNTNcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcInJvdXRlNTNkb21haW5zXCI6IHtcbiAgICBcIm5hbWVcIjogXCJSb3V0ZTUzRG9tYWluc1wiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiczNcIjoge1xuICAgIFwibmFtZVwiOiBcIlMzXCIsXG4gICAgXCJkdWFsc3RhY2tBdmFpbGFibGVcIjogdHJ1ZSxcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcInMzY29udHJvbFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiUzNDb250cm9sXCIsXG4gICAgXCJkdWFsc3RhY2tBdmFpbGFibGVcIjogdHJ1ZVxuICB9LFxuICBcInNlcnZpY2VjYXRhbG9nXCI6IHtcbiAgICBcIm5hbWVcIjogXCJTZXJ2aWNlQ2F0YWxvZ1wiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwic2VzXCI6IHtcbiAgICBcInByZWZpeFwiOiBcImVtYWlsXCIsXG4gICAgXCJuYW1lXCI6IFwiU0VTXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJzaGllbGRcIjoge1xuICAgIFwibmFtZVwiOiBcIlNoaWVsZFwiXG4gIH0sXG4gIFwic2ltcGxlZGJcIjoge1xuICAgIFwicHJlZml4XCI6IFwic2RiXCIsXG4gICAgXCJuYW1lXCI6IFwiU2ltcGxlREJcIlxuICB9LFxuICBcInNtc1wiOiB7XG4gICAgXCJuYW1lXCI6IFwiU01TXCJcbiAgfSxcbiAgXCJzbm93YmFsbFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiU25vd2JhbGxcIlxuICB9LFxuICBcInNuc1wiOiB7XG4gICAgXCJuYW1lXCI6IFwiU05TXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJzcXNcIjoge1xuICAgIFwibmFtZVwiOiBcIlNRU1wiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwic3NtXCI6IHtcbiAgICBcIm5hbWVcIjogXCJTU01cIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcInN0b3JhZ2VnYXRld2F5XCI6IHtcbiAgICBcIm5hbWVcIjogXCJTdG9yYWdlR2F0ZXdheVwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwic3RlcGZ1bmN0aW9uc1wiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJzdGF0ZXNcIixcbiAgICBcIm5hbWVcIjogXCJTdGVwRnVuY3Rpb25zXCJcbiAgfSxcbiAgXCJzdHNcIjoge1xuICAgIFwibmFtZVwiOiBcIlNUU1wiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwic3VwcG9ydFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiU3VwcG9ydFwiXG4gIH0sXG4gIFwic3dmXCI6IHtcbiAgICBcIm5hbWVcIjogXCJTV0ZcIlxuICB9LFxuICBcInhyYXlcIjoge1xuICAgIFwibmFtZVwiOiBcIlhSYXlcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcIndhZlwiOiB7XG4gICAgXCJuYW1lXCI6IFwiV0FGXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJ3YWZyZWdpb25hbFwiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJ3YWYtcmVnaW9uYWxcIixcbiAgICBcIm5hbWVcIjogXCJXQUZSZWdpb25hbFwiXG4gIH0sXG4gIFwid29ya2RvY3NcIjoge1xuICAgIFwibmFtZVwiOiBcIldvcmtEb2NzXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJ3b3Jrc3BhY2VzXCI6IHtcbiAgICBcIm5hbWVcIjogXCJXb3JrU3BhY2VzXCJcbiAgfSxcbiAgXCJjb2Rlc3RhclwiOiB7XG4gICAgXCJuYW1lXCI6IFwiQ29kZVN0YXJcIlxuICB9LFxuICBcImxleG1vZGVsYnVpbGRpbmdzZXJ2aWNlXCI6IHtcbiAgICBcInByZWZpeFwiOiBcImxleC1tb2RlbHNcIixcbiAgICBcIm5hbWVcIjogXCJMZXhNb2RlbEJ1aWxkaW5nU2VydmljZVwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwibWFya2V0cGxhY2VlbnRpdGxlbWVudHNlcnZpY2VcIjoge1xuICAgIFwicHJlZml4XCI6IFwiZW50aXRsZW1lbnQubWFya2V0cGxhY2VcIixcbiAgICBcIm5hbWVcIjogXCJNYXJrZXRwbGFjZUVudGl0bGVtZW50U2VydmljZVwiXG4gIH0sXG4gIFwiYXRoZW5hXCI6IHtcbiAgICBcIm5hbWVcIjogXCJBdGhlbmFcIlxuICB9LFxuICBcImdyZWVuZ3Jhc3NcIjoge1xuICAgIFwibmFtZVwiOiBcIkdyZWVuZ3Jhc3NcIlxuICB9LFxuICBcImRheFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiREFYXCJcbiAgfSxcbiAgXCJtaWdyYXRpb25odWJcIjoge1xuICAgIFwicHJlZml4XCI6IFwiQVdTTWlncmF0aW9uSHViXCIsXG4gICAgXCJuYW1lXCI6IFwiTWlncmF0aW9uSHViXCJcbiAgfSxcbiAgXCJjbG91ZGhzbXYyXCI6IHtcbiAgICBcIm5hbWVcIjogXCJDbG91ZEhTTVYyXCJcbiAgfSxcbiAgXCJnbHVlXCI6IHtcbiAgICBcIm5hbWVcIjogXCJHbHVlXCJcbiAgfSxcbiAgXCJtb2JpbGVcIjoge1xuICAgIFwibmFtZVwiOiBcIk1vYmlsZVwiXG4gIH0sXG4gIFwicHJpY2luZ1wiOiB7XG4gICAgXCJuYW1lXCI6IFwiUHJpY2luZ1wiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiY29zdGV4cGxvcmVyXCI6IHtcbiAgICBcInByZWZpeFwiOiBcImNlXCIsXG4gICAgXCJuYW1lXCI6IFwiQ29zdEV4cGxvcmVyXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJtZWRpYWNvbnZlcnRcIjoge1xuICAgIFwibmFtZVwiOiBcIk1lZGlhQ29udmVydFwiXG4gIH0sXG4gIFwibWVkaWFsaXZlXCI6IHtcbiAgICBcIm5hbWVcIjogXCJNZWRpYUxpdmVcIlxuICB9LFxuICBcIm1lZGlhcGFja2FnZVwiOiB7XG4gICAgXCJuYW1lXCI6IFwiTWVkaWFQYWNrYWdlXCJcbiAgfSxcbiAgXCJtZWRpYXN0b3JlXCI6IHtcbiAgICBcIm5hbWVcIjogXCJNZWRpYVN0b3JlXCJcbiAgfSxcbiAgXCJtZWRpYXN0b3JlZGF0YVwiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJtZWRpYXN0b3JlLWRhdGFcIixcbiAgICBcIm5hbWVcIjogXCJNZWRpYVN0b3JlRGF0YVwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiYXBwc3luY1wiOiB7XG4gICAgXCJuYW1lXCI6IFwiQXBwU3luY1wiXG4gIH0sXG4gIFwiZ3VhcmRkdXR5XCI6IHtcbiAgICBcIm5hbWVcIjogXCJHdWFyZER1dHlcIlxuICB9LFxuICBcIm1xXCI6IHtcbiAgICBcIm5hbWVcIjogXCJNUVwiXG4gIH0sXG4gIFwiY29tcHJlaGVuZFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiQ29tcHJlaGVuZFwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiaW90am9ic2RhdGFwbGFuZVwiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJpb3Qtam9icy1kYXRhXCIsXG4gICAgXCJuYW1lXCI6IFwiSW9USm9ic0RhdGFQbGFuZVwiXG4gIH0sXG4gIFwia2luZXNpc3ZpZGVvYXJjaGl2ZWRtZWRpYVwiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJraW5lc2lzLXZpZGVvLWFyY2hpdmVkLW1lZGlhXCIsXG4gICAgXCJuYW1lXCI6IFwiS2luZXNpc1ZpZGVvQXJjaGl2ZWRNZWRpYVwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwia2luZXNpc3ZpZGVvbWVkaWFcIjoge1xuICAgIFwicHJlZml4XCI6IFwia2luZXNpcy12aWRlby1tZWRpYVwiLFxuICAgIFwibmFtZVwiOiBcIktpbmVzaXNWaWRlb01lZGlhXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJraW5lc2lzdmlkZW9cIjoge1xuICAgIFwibmFtZVwiOiBcIktpbmVzaXNWaWRlb1wiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwic2FnZW1ha2VycnVudGltZVwiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJydW50aW1lLnNhZ2VtYWtlclwiLFxuICAgIFwibmFtZVwiOiBcIlNhZ2VNYWtlclJ1bnRpbWVcIlxuICB9LFxuICBcInNhZ2VtYWtlclwiOiB7XG4gICAgXCJuYW1lXCI6IFwiU2FnZU1ha2VyXCJcbiAgfSxcbiAgXCJ0cmFuc2xhdGVcIjoge1xuICAgIFwibmFtZVwiOiBcIlRyYW5zbGF0ZVwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwicmVzb3VyY2Vncm91cHNcIjoge1xuICAgIFwicHJlZml4XCI6IFwicmVzb3VyY2UtZ3JvdXBzXCIsXG4gICAgXCJuYW1lXCI6IFwiUmVzb3VyY2VHcm91cHNcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcImFsZXhhZm9yYnVzaW5lc3NcIjoge1xuICAgIFwibmFtZVwiOiBcIkFsZXhhRm9yQnVzaW5lc3NcIlxuICB9LFxuICBcImNsb3VkOVwiOiB7XG4gICAgXCJuYW1lXCI6IFwiQ2xvdWQ5XCJcbiAgfSxcbiAgXCJzZXJ2ZXJsZXNzYXBwbGljYXRpb25yZXBvc2l0b3J5XCI6IHtcbiAgICBcInByZWZpeFwiOiBcInNlcnZlcmxlc3NyZXBvXCIsXG4gICAgXCJuYW1lXCI6IFwiU2VydmVybGVzc0FwcGxpY2F0aW9uUmVwb3NpdG9yeVwiXG4gIH0sXG4gIFwic2VydmljZWRpc2NvdmVyeVwiOiB7XG4gICAgXCJuYW1lXCI6IFwiU2VydmljZURpc2NvdmVyeVwiXG4gIH0sXG4gIFwid29ya21haWxcIjoge1xuICAgIFwibmFtZVwiOiBcIldvcmtNYWlsXCJcbiAgfSxcbiAgXCJhdXRvc2NhbGluZ3BsYW5zXCI6IHtcbiAgICBcInByZWZpeFwiOiBcImF1dG9zY2FsaW5nLXBsYW5zXCIsXG4gICAgXCJuYW1lXCI6IFwiQXV0b1NjYWxpbmdQbGFuc1wiXG4gIH0sXG4gIFwidHJhbnNjcmliZXNlcnZpY2VcIjoge1xuICAgIFwicHJlZml4XCI6IFwidHJhbnNjcmliZVwiLFxuICAgIFwibmFtZVwiOiBcIlRyYW5zY3JpYmVTZXJ2aWNlXCJcbiAgfSxcbiAgXCJjb25uZWN0XCI6IHtcbiAgICBcIm5hbWVcIjogXCJDb25uZWN0XCJcbiAgfSxcbiAgXCJhY21wY2FcIjoge1xuICAgIFwicHJlZml4XCI6IFwiYWNtLXBjYVwiLFxuICAgIFwibmFtZVwiOiBcIkFDTVBDQVwiXG4gIH0sXG4gIFwiZm1zXCI6IHtcbiAgICBcIm5hbWVcIjogXCJGTVNcIlxuICB9LFxuICBcInNlY3JldHNtYW5hZ2VyXCI6IHtcbiAgICBcIm5hbWVcIjogXCJTZWNyZXRzTWFuYWdlclwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiaW90YW5hbHl0aWNzXCI6IHtcbiAgICBcIm5hbWVcIjogXCJJb1RBbmFseXRpY3NcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcImlvdDFjbGlja2RldmljZXNzZXJ2aWNlXCI6IHtcbiAgICBcInByZWZpeFwiOiBcImlvdDFjbGljay1kZXZpY2VzXCIsXG4gICAgXCJuYW1lXCI6IFwiSW9UMUNsaWNrRGV2aWNlc1NlcnZpY2VcIlxuICB9LFxuICBcImlvdDFjbGlja3Byb2plY3RzXCI6IHtcbiAgICBcInByZWZpeFwiOiBcImlvdDFjbGljay1wcm9qZWN0c1wiLFxuICAgIFwibmFtZVwiOiBcIklvVDFDbGlja1Byb2plY3RzXCJcbiAgfSxcbiAgXCJwaVwiOiB7XG4gICAgXCJuYW1lXCI6IFwiUElcIlxuICB9LFxuICBcIm5lcHR1bmVcIjoge1xuICAgIFwibmFtZVwiOiBcIk5lcHR1bmVcIlxuICB9LFxuICBcIm1lZGlhdGFpbG9yXCI6IHtcbiAgICBcIm5hbWVcIjogXCJNZWRpYVRhaWxvclwiXG4gIH0sXG4gIFwiZWtzXCI6IHtcbiAgICBcIm5hbWVcIjogXCJFS1NcIlxuICB9LFxuICBcIm1hY2llXCI6IHtcbiAgICBcIm5hbWVcIjogXCJNYWNpZVwiXG4gIH0sXG4gIFwiZGxtXCI6IHtcbiAgICBcIm5hbWVcIjogXCJETE1cIlxuICB9LFxuICBcInNpZ25lclwiOiB7XG4gICAgXCJuYW1lXCI6IFwiU2lnbmVyXCJcbiAgfSxcbiAgXCJjaGltZVwiOiB7XG4gICAgXCJuYW1lXCI6IFwiQ2hpbWVcIlxuICB9LFxuICBcInBpbnBvaW50ZW1haWxcIjoge1xuICAgIFwicHJlZml4XCI6IFwicGlucG9pbnQtZW1haWxcIixcbiAgICBcIm5hbWVcIjogXCJQaW5wb2ludEVtYWlsXCJcbiAgfSxcbiAgXCJyYW1cIjoge1xuICAgIFwibmFtZVwiOiBcIlJBTVwiXG4gIH0sXG4gIFwicm91dGU1M3Jlc29sdmVyXCI6IHtcbiAgICBcIm5hbWVcIjogXCJSb3V0ZTUzUmVzb2x2ZXJcIlxuICB9LFxuICBcInBpbnBvaW50c21zdm9pY2VcIjoge1xuICAgIFwicHJlZml4XCI6IFwic21zLXZvaWNlXCIsXG4gICAgXCJuYW1lXCI6IFwiUGlucG9pbnRTTVNWb2ljZVwiXG4gIH0sXG4gIFwicXVpY2tzaWdodFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiUXVpY2tTaWdodFwiXG4gIH0sXG4gIFwicmRzZGF0YXNlcnZpY2VcIjoge1xuICAgIFwicHJlZml4XCI6IFwicmRzLWRhdGFcIixcbiAgICBcIm5hbWVcIjogXCJSRFNEYXRhU2VydmljZVwiXG4gIH0sXG4gIFwiYW1wbGlmeVwiOiB7XG4gICAgXCJuYW1lXCI6IFwiQW1wbGlmeVwiXG4gIH0sXG4gIFwiZGF0YXN5bmNcIjoge1xuICAgIFwibmFtZVwiOiBcIkRhdGFTeW5jXCJcbiAgfSxcbiAgXCJyb2JvbWFrZXJcIjoge1xuICAgIFwibmFtZVwiOiBcIlJvYm9NYWtlclwiXG4gIH0sXG4gIFwidHJhbnNmZXJcIjoge1xuICAgIFwibmFtZVwiOiBcIlRyYW5zZmVyXCJcbiAgfSxcbiAgXCJnbG9iYWxhY2NlbGVyYXRvclwiOiB7XG4gICAgXCJuYW1lXCI6IFwiR2xvYmFsQWNjZWxlcmF0b3JcIlxuICB9LFxuICBcImNvbXByZWhlbmRtZWRpY2FsXCI6IHtcbiAgICBcIm5hbWVcIjogXCJDb21wcmVoZW5kTWVkaWNhbFwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwia2luZXNpc2FuYWx5dGljc3YyXCI6IHtcbiAgICBcIm5hbWVcIjogXCJLaW5lc2lzQW5hbHl0aWNzVjJcIlxuICB9LFxuICBcIm1lZGlhY29ubmVjdFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiTWVkaWFDb25uZWN0XCJcbiAgfSxcbiAgXCJmc3hcIjoge1xuICAgIFwibmFtZVwiOiBcIkZTeFwiXG4gIH0sXG4gIFwic2VjdXJpdHlodWJcIjoge1xuICAgIFwibmFtZVwiOiBcIlNlY3VyaXR5SHViXCJcbiAgfSxcbiAgXCJhcHBtZXNoXCI6IHtcbiAgICBcIm5hbWVcIjogXCJBcHBNZXNoXCIsXG4gICAgXCJ2ZXJzaW9uc1wiOiBbXG4gICAgICBcIjIwMTgtMTAtMDEqXCJcbiAgICBdXG4gIH0sXG4gIFwibGljZW5zZW1hbmFnZXJcIjoge1xuICAgIFwicHJlZml4XCI6IFwibGljZW5zZS1tYW5hZ2VyXCIsXG4gICAgXCJuYW1lXCI6IFwiTGljZW5zZU1hbmFnZXJcIlxuICB9LFxuICBcImthZmthXCI6IHtcbiAgICBcIm5hbWVcIjogXCJLYWZrYVwiXG4gIH0sXG4gIFwiYXBpZ2F0ZXdheW1hbmFnZW1lbnRhcGlcIjoge1xuICAgIFwibmFtZVwiOiBcIkFwaUdhdGV3YXlNYW5hZ2VtZW50QXBpXCJcbiAgfSxcbiAgXCJhcGlnYXRld2F5djJcIjoge1xuICAgIFwibmFtZVwiOiBcIkFwaUdhdGV3YXlWMlwiXG4gIH0sXG4gIFwiZG9jZGJcIjoge1xuICAgIFwibmFtZVwiOiBcIkRvY0RCXCJcbiAgfSxcbiAgXCJiYWNrdXBcIjoge1xuICAgIFwibmFtZVwiOiBcIkJhY2t1cFwiXG4gIH0sXG4gIFwid29ya2xpbmtcIjoge1xuICAgIFwibmFtZVwiOiBcIldvcmtMaW5rXCJcbiAgfSxcbiAgXCJ0ZXh0cmFjdFwiOiB7XG4gICAgXCJuYW1lXCI6IFwiVGV4dHJhY3RcIlxuICB9LFxuICBcIm1hbmFnZWRibG9ja2NoYWluXCI6IHtcbiAgICBcIm5hbWVcIjogXCJNYW5hZ2VkQmxvY2tjaGFpblwiXG4gIH0sXG4gIFwibWVkaWFwYWNrYWdldm9kXCI6IHtcbiAgICBcInByZWZpeFwiOiBcIm1lZGlhcGFja2FnZS12b2RcIixcbiAgICBcIm5hbWVcIjogXCJNZWRpYVBhY2thZ2VWb2RcIlxuICB9LFxuICBcImdyb3VuZHN0YXRpb25cIjoge1xuICAgIFwibmFtZVwiOiBcIkdyb3VuZFN0YXRpb25cIlxuICB9LFxuICBcImlvdHRoaW5nc2dyYXBoXCI6IHtcbiAgICBcIm5hbWVcIjogXCJJb1RUaGluZ3NHcmFwaFwiXG4gIH0sXG4gIFwiaW90ZXZlbnRzXCI6IHtcbiAgICBcIm5hbWVcIjogXCJJb1RFdmVudHNcIlxuICB9LFxuICBcImlvdGV2ZW50c2RhdGFcIjoge1xuICAgIFwicHJlZml4XCI6IFwiaW90ZXZlbnRzLWRhdGFcIixcbiAgICBcIm5hbWVcIjogXCJJb1RFdmVudHNEYXRhXCJcbiAgfSxcbiAgXCJwZXJzb25hbGl6ZVwiOiB7XG4gICAgXCJuYW1lXCI6IFwiUGVyc29uYWxpemVcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcInBlcnNvbmFsaXplZXZlbnRzXCI6IHtcbiAgICBcInByZWZpeFwiOiBcInBlcnNvbmFsaXplLWV2ZW50c1wiLFxuICAgIFwibmFtZVwiOiBcIlBlcnNvbmFsaXplRXZlbnRzXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJwZXJzb25hbGl6ZXJ1bnRpbWVcIjoge1xuICAgIFwicHJlZml4XCI6IFwicGVyc29uYWxpemUtcnVudGltZVwiLFxuICAgIFwibmFtZVwiOiBcIlBlcnNvbmFsaXplUnVudGltZVwiLFxuICAgIFwiY29yc1wiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb25pbnNpZ2h0c1wiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJhcHBsaWNhdGlvbi1pbnNpZ2h0c1wiLFxuICAgIFwibmFtZVwiOiBcIkFwcGxpY2F0aW9uSW5zaWdodHNcIlxuICB9LFxuICBcInNlcnZpY2VxdW90YXNcIjoge1xuICAgIFwicHJlZml4XCI6IFwic2VydmljZS1xdW90YXNcIixcbiAgICBcIm5hbWVcIjogXCJTZXJ2aWNlUXVvdGFzXCJcbiAgfSxcbiAgXCJlYzJpbnN0YW5jZWNvbm5lY3RcIjoge1xuICAgIFwicHJlZml4XCI6IFwiZWMyLWluc3RhbmNlLWNvbm5lY3RcIixcbiAgICBcIm5hbWVcIjogXCJFQzJJbnN0YW5jZUNvbm5lY3RcIlxuICB9LFxuICBcImV2ZW50YnJpZGdlXCI6IHtcbiAgICBcIm5hbWVcIjogXCJFdmVudEJyaWRnZVwiXG4gIH0sXG4gIFwibGFrZWZvcm1hdGlvblwiOiB7XG4gICAgXCJuYW1lXCI6IFwiTGFrZUZvcm1hdGlvblwiXG4gIH0sXG4gIFwiZm9yZWNhc3RzZXJ2aWNlXCI6IHtcbiAgICBcInByZWZpeFwiOiBcImZvcmVjYXN0XCIsXG4gICAgXCJuYW1lXCI6IFwiRm9yZWNhc3RTZXJ2aWNlXCIsXG4gICAgXCJjb3JzXCI6IHRydWVcbiAgfSxcbiAgXCJmb3JlY2FzdHF1ZXJ5c2VydmljZVwiOiB7XG4gICAgXCJwcmVmaXhcIjogXCJmb3JlY2FzdHF1ZXJ5XCIsXG4gICAgXCJuYW1lXCI6IFwiRm9yZWNhc3RRdWVyeVNlcnZpY2VcIixcbiAgICBcImNvcnNcIjogdHJ1ZVxuICB9LFxuICBcInFsZGJcIjoge1xuICAgIFwibmFtZVwiOiBcIlFMREJcIlxuICB9LFxuICBcInFsZGJzZXNzaW9uXCI6IHtcbiAgICBcInByZWZpeFwiOiBcInFsZGItc2Vzc2lvblwiLFxuICAgIFwibmFtZVwiOiBcIlFMREJTZXNzaW9uXCJcbiAgfSxcbiAgXCJ3b3JrbWFpbG1lc3NhZ2VmbG93XCI6IHtcbiAgICBcIm5hbWVcIjogXCJXb3JrTWFpbE1lc3NhZ2VGbG93XCJcbiAgfSxcbiAgXCJjb25uZWN0cGFydGljaXBhbnRcIjoge1xuICAgIFwibmFtZVwiOiBcIkNvbm5lY3RQYXJ0aWNpcGFudFwiXG4gIH1cbn1cbn0se31dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHM9e1xuICBcInZlcnNpb25cIjogXCIyLjBcIixcbiAgXCJtZXRhZGF0YVwiOiB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwiMjAxMS0wNi0xNVwiLFxuICAgIFwiZW5kcG9pbnRQcmVmaXhcIjogXCJzdHNcIixcbiAgICBcImdsb2JhbEVuZHBvaW50XCI6IFwic3RzLmFtYXpvbmF3cy5jb21cIixcbiAgICBcInByb3RvY29sXCI6IFwicXVlcnlcIixcbiAgICBcInNlcnZpY2VBYmJyZXZpYXRpb25cIjogXCJBV1MgU1RTXCIsXG4gICAgXCJzZXJ2aWNlRnVsbE5hbWVcIjogXCJBV1MgU2VjdXJpdHkgVG9rZW4gU2VydmljZVwiLFxuICAgIFwic2VydmljZUlkXCI6IFwiU1RTXCIsXG4gICAgXCJzaWduYXR1cmVWZXJzaW9uXCI6IFwidjRcIixcbiAgICBcInVpZFwiOiBcInN0cy0yMDExLTA2LTE1XCIsXG4gICAgXCJ4bWxOYW1lc3BhY2VcIjogXCJodHRwczovL3N0cy5hbWF6b25hd3MuY29tL2RvYy8yMDExLTA2LTE1L1wiXG4gIH0sXG4gIFwib3BlcmF0aW9uc1wiOiB7XG4gICAgXCJBc3N1bWVSb2xlXCI6IHtcbiAgICAgIFwiaW5wdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgICAgXCJSb2xlQXJuXCIsXG4gICAgICAgICAgXCJSb2xlU2Vzc2lvbk5hbWVcIlxuICAgICAgICBdLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiUm9sZUFyblwiOiB7fSxcbiAgICAgICAgICBcIlJvbGVTZXNzaW9uTmFtZVwiOiB7fSxcbiAgICAgICAgICBcIlBvbGljeUFybnNcIjoge1xuICAgICAgICAgICAgXCJzaGFwZVwiOiBcIlM0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiUG9saWN5XCI6IHt9LFxuICAgICAgICAgIFwiRHVyYXRpb25TZWNvbmRzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJFeHRlcm5hbElkXCI6IHt9LFxuICAgICAgICAgIFwiU2VyaWFsTnVtYmVyXCI6IHt9LFxuICAgICAgICAgIFwiVG9rZW5Db2RlXCI6IHt9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgIFwicmVzdWx0V3JhcHBlclwiOiBcIkFzc3VtZVJvbGVSZXN1bHRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJDcmVkZW50aWFsc1wiOiB7XG4gICAgICAgICAgICBcInNoYXBlXCI6IFwiU2NcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJBc3N1bWVkUm9sZVVzZXJcIjoge1xuICAgICAgICAgICAgXCJzaGFwZVwiOiBcIlNoXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiUGFja2VkUG9saWN5U2l6ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiQXNzdW1lUm9sZVdpdGhTQU1MXCI6IHtcbiAgICAgIFwiaW5wdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgICAgXCJSb2xlQXJuXCIsXG4gICAgICAgICAgXCJQcmluY2lwYWxBcm5cIixcbiAgICAgICAgICBcIlNBTUxBc3NlcnRpb25cIlxuICAgICAgICBdLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiUm9sZUFyblwiOiB7fSxcbiAgICAgICAgICBcIlByaW5jaXBhbEFyblwiOiB7fSxcbiAgICAgICAgICBcIlNBTUxBc3NlcnRpb25cIjoge30sXG4gICAgICAgICAgXCJQb2xpY3lBcm5zXCI6IHtcbiAgICAgICAgICAgIFwic2hhcGVcIjogXCJTNFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlBvbGljeVwiOiB7fSxcbiAgICAgICAgICBcIkR1cmF0aW9uU2Vjb25kc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgIFwicmVzdWx0V3JhcHBlclwiOiBcIkFzc3VtZVJvbGVXaXRoU0FNTFJlc3VsdFwiLFxuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIkNyZWRlbnRpYWxzXCI6IHtcbiAgICAgICAgICAgIFwic2hhcGVcIjogXCJTY1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkFzc3VtZWRSb2xlVXNlclwiOiB7XG4gICAgICAgICAgICBcInNoYXBlXCI6IFwiU2hcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJQYWNrZWRQb2xpY3lTaXplXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJTdWJqZWN0XCI6IHt9LFxuICAgICAgICAgIFwiU3ViamVjdFR5cGVcIjoge30sXG4gICAgICAgICAgXCJJc3N1ZXJcIjoge30sXG4gICAgICAgICAgXCJBdWRpZW5jZVwiOiB7fSxcbiAgICAgICAgICBcIk5hbWVRdWFsaWZpZXJcIjoge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJBc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5XCI6IHtcbiAgICAgIFwiaW5wdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgICAgXCJSb2xlQXJuXCIsXG4gICAgICAgICAgXCJSb2xlU2Vzc2lvbk5hbWVcIixcbiAgICAgICAgICBcIldlYklkZW50aXR5VG9rZW5cIlxuICAgICAgICBdLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiUm9sZUFyblwiOiB7fSxcbiAgICAgICAgICBcIlJvbGVTZXNzaW9uTmFtZVwiOiB7fSxcbiAgICAgICAgICBcIldlYklkZW50aXR5VG9rZW5cIjoge30sXG4gICAgICAgICAgXCJQcm92aWRlcklkXCI6IHt9LFxuICAgICAgICAgIFwiUG9saWN5QXJuc1wiOiB7XG4gICAgICAgICAgICBcInNoYXBlXCI6IFwiUzRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJQb2xpY3lcIjoge30sXG4gICAgICAgICAgXCJEdXJhdGlvblNlY29uZHNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJvdXRwdXRcIjoge1xuICAgICAgICBcInJlc3VsdFdyYXBwZXJcIjogXCJBc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5UmVzdWx0XCIsXG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiQ3JlZGVudGlhbHNcIjoge1xuICAgICAgICAgICAgXCJzaGFwZVwiOiBcIlNjXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiU3ViamVjdEZyb21XZWJJZGVudGl0eVRva2VuXCI6IHt9LFxuICAgICAgICAgIFwiQXNzdW1lZFJvbGVVc2VyXCI6IHtcbiAgICAgICAgICAgIFwic2hhcGVcIjogXCJTaFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlBhY2tlZFBvbGljeVNpemVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlByb3ZpZGVyXCI6IHt9LFxuICAgICAgICAgIFwiQXVkaWVuY2VcIjoge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJEZWNvZGVBdXRob3JpemF0aW9uTWVzc2FnZVwiOiB7XG4gICAgICBcImlucHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICAgIFwiRW5jb2RlZE1lc3NhZ2VcIlxuICAgICAgICBdLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiRW5jb2RlZE1lc3NhZ2VcIjoge31cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwib3V0cHV0XCI6IHtcbiAgICAgICAgXCJyZXN1bHRXcmFwcGVyXCI6IFwiRGVjb2RlQXV0aG9yaXphdGlvbk1lc3NhZ2VSZXN1bHRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJEZWNvZGVkTWVzc2FnZVwiOiB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIkdldEFjY2Vzc0tleUluZm9cIjoge1xuICAgICAgXCJpbnB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IFtcbiAgICAgICAgICBcIkFjY2Vzc0tleUlkXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIkFjY2Vzc0tleUlkXCI6IHt9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgIFwicmVzdWx0V3JhcHBlclwiOiBcIkdldEFjY2Vzc0tleUluZm9SZXN1bHRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJBY2NvdW50XCI6IHt9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiR2V0Q2FsbGVySWRlbnRpdHlcIjoge1xuICAgICAgXCJpbnB1dFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcIm1lbWJlcnNcIjoge31cbiAgICAgIH0sXG4gICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgIFwicmVzdWx0V3JhcHBlclwiOiBcIkdldENhbGxlcklkZW50aXR5UmVzdWx0XCIsXG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiVXNlcklkXCI6IHt9LFxuICAgICAgICAgIFwiQWNjb3VudFwiOiB7fSxcbiAgICAgICAgICBcIkFyblwiOiB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIkdldEZlZGVyYXRpb25Ub2tlblwiOiB7XG4gICAgICBcImlucHV0XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICAgIFwiTmFtZVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJOYW1lXCI6IHt9LFxuICAgICAgICAgIFwiUG9saWN5XCI6IHt9LFxuICAgICAgICAgIFwiUG9saWN5QXJuc1wiOiB7XG4gICAgICAgICAgICBcInNoYXBlXCI6IFwiUzRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJEdXJhdGlvblNlY29uZHNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJvdXRwdXRcIjoge1xuICAgICAgICBcInJlc3VsdFdyYXBwZXJcIjogXCJHZXRGZWRlcmF0aW9uVG9rZW5SZXN1bHRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgICAgXCJDcmVkZW50aWFsc1wiOiB7XG4gICAgICAgICAgICBcInNoYXBlXCI6IFwiU2NcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJGZWRlcmF0ZWRVc2VyXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgICAgICAgIFwiRmVkZXJhdGVkVXNlcklkXCIsXG4gICAgICAgICAgICAgIFwiQXJuXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgICAgICBcIkZlZGVyYXRlZFVzZXJJZFwiOiB7fSxcbiAgICAgICAgICAgICAgXCJBcm5cIjoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiUGFja2VkUG9saWN5U2l6ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiR2V0U2Vzc2lvblRva2VuXCI6IHtcbiAgICAgIFwiaW5wdXRcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIkR1cmF0aW9uU2Vjb25kc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiU2VyaWFsTnVtYmVyXCI6IHt9LFxuICAgICAgICAgIFwiVG9rZW5Db2RlXCI6IHt9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIm91dHB1dFwiOiB7XG4gICAgICAgIFwicmVzdWx0V3JhcHBlclwiOiBcIkdldFNlc3Npb25Ub2tlblJlc3VsdFwiLFxuICAgICAgICBcInR5cGVcIjogXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgICBcIkNyZWRlbnRpYWxzXCI6IHtcbiAgICAgICAgICAgIFwic2hhcGVcIjogXCJTY1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBcInNoYXBlc1wiOiB7XG4gICAgXCJTNFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJsaXN0XCIsXG4gICAgICBcIm1lbWJlclwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgICBcIm1lbWJlcnNcIjoge1xuICAgICAgICAgIFwiYXJuXCI6IHt9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiU2NcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RydWN0dXJlXCIsXG4gICAgICBcInJlcXVpcmVkXCI6IFtcbiAgICAgICAgXCJBY2Nlc3NLZXlJZFwiLFxuICAgICAgICBcIlNlY3JldEFjY2Vzc0tleVwiLFxuICAgICAgICBcIlNlc3Npb25Ub2tlblwiLFxuICAgICAgICBcIkV4cGlyYXRpb25cIlxuICAgICAgXSxcbiAgICAgIFwibWVtYmVyc1wiOiB7XG4gICAgICAgIFwiQWNjZXNzS2V5SWRcIjoge30sXG4gICAgICAgIFwiU2VjcmV0QWNjZXNzS2V5XCI6IHt9LFxuICAgICAgICBcIlNlc3Npb25Ub2tlblwiOiB7fSxcbiAgICAgICAgXCJFeHBpcmF0aW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJ0aW1lc3RhbXBcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIlNoXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcInN0cnVjdHVyZVwiLFxuICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgIFwiQXNzdW1lZFJvbGVJZFwiLFxuICAgICAgICBcIkFyblwiXG4gICAgICBdLFxuICAgICAgXCJtZW1iZXJzXCI6IHtcbiAgICAgICAgXCJBc3N1bWVkUm9sZUlkXCI6IHt9LFxuICAgICAgICBcIkFyblwiOiB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxufSx7fV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5hcmd1bWVudHNbNF1bMl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpXG59LHtcImR1cFwiOjJ9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnJlcXVpcmUoJy4uL2xpYi9ub2RlX2xvYWRlcicpO1xudmFyIEFXUyA9IHJlcXVpcmUoJy4uL2xpYi9jb3JlJyk7XG52YXIgU2VydmljZSA9IEFXUy5TZXJ2aWNlO1xudmFyIGFwaUxvYWRlciA9IEFXUy5hcGlMb2FkZXI7XG5cbmFwaUxvYWRlci5zZXJ2aWNlc1snY29nbml0b2lkZW50aXR5J10gPSB7fTtcbkFXUy5Db2duaXRvSWRlbnRpdHkgPSBTZXJ2aWNlLmRlZmluZVNlcnZpY2UoJ2NvZ25pdG9pZGVudGl0eScsIFsnMjAxNC0wNi0zMCddKTtcbnJlcXVpcmUoJy4uL2xpYi9zZXJ2aWNlcy9jb2duaXRvaWRlbnRpdHknKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcGlMb2FkZXIuc2VydmljZXNbJ2NvZ25pdG9pZGVudGl0eSddLCAnMjAxNC0wNi0zMCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgdmFyIG1vZGVsID0gcmVxdWlyZSgnLi4vYXBpcy9jb2duaXRvLWlkZW50aXR5LTIwMTQtMDYtMzAubWluLmpzb24nKTtcbiAgICBtb2RlbC5wYWdpbmF0b3JzID0gcmVxdWlyZSgnLi4vYXBpcy9jb2duaXRvLWlkZW50aXR5LTIwMTQtMDYtMzAucGFnaW5hdG9ycy5qc29uJykucGFnaW5hdGlvbjtcbiAgICByZXR1cm4gbW9kZWw7XG4gIH0sXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQVdTLkNvZ25pdG9JZGVudGl0eTtcblxufSx7XCIuLi9hcGlzL2NvZ25pdG8taWRlbnRpdHktMjAxNC0wNi0zMC5taW4uanNvblwiOjEsXCIuLi9hcGlzL2NvZ25pdG8taWRlbnRpdHktMjAxNC0wNi0zMC5wYWdpbmF0b3JzLmpzb25cIjoyLFwiLi4vbGliL2NvcmVcIjoxOSxcIi4uL2xpYi9ub2RlX2xvYWRlclwiOjE3LFwiLi4vbGliL3NlcnZpY2VzL2NvZ25pdG9pZGVudGl0eVwiOjYxfV0sOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5yZXF1aXJlKCcuLi9saWIvbm9kZV9sb2FkZXInKTtcbnZhciBBV1MgPSByZXF1aXJlKCcuLi9saWIvY29yZScpO1xudmFyIFNlcnZpY2UgPSBBV1MuU2VydmljZTtcbnZhciBhcGlMb2FkZXIgPSBBV1MuYXBpTG9hZGVyO1xuXG5hcGlMb2FkZXIuc2VydmljZXNbJ3N0cyddID0ge307XG5BV1MuU1RTID0gU2VydmljZS5kZWZpbmVTZXJ2aWNlKCdzdHMnLCBbJzIwMTEtMDYtMTUnXSk7XG5yZXF1aXJlKCcuLi9saWIvc2VydmljZXMvc3RzJyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoYXBpTG9hZGVyLnNlcnZpY2VzWydzdHMnXSwgJzIwMTEtMDYtMTUnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHZhciBtb2RlbCA9IHJlcXVpcmUoJy4uL2FwaXMvc3RzLTIwMTEtMDYtMTUubWluLmpzb24nKTtcbiAgICBtb2RlbC5wYWdpbmF0b3JzID0gcmVxdWlyZSgnLi4vYXBpcy9zdHMtMjAxMS0wNi0xNS5wYWdpbmF0b3JzLmpzb24nKS5wYWdpbmF0aW9uO1xuICAgIHJldHVybiBtb2RlbDtcbiAgfSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBV1MuU1RTO1xuXG59LHtcIi4uL2FwaXMvc3RzLTIwMTEtMDYtMTUubWluLmpzb25cIjo2LFwiLi4vYXBpcy9zdHMtMjAxMS0wNi0xNS5wYWdpbmF0b3JzLmpzb25cIjo3LFwiLi4vbGliL2NvcmVcIjoxOSxcIi4uL2xpYi9ub2RlX2xvYWRlclwiOjE3LFwiLi4vbGliL3NlcnZpY2VzL3N0c1wiOjYyfV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuZnVuY3Rpb24gYXBpTG9hZGVyKHN2YywgdmVyc2lvbikge1xuICBpZiAoIWFwaUxvYWRlci5zZXJ2aWNlcy5oYXNPd25Qcm9wZXJ0eShzdmMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkU2VydmljZTogRmFpbGVkIHRvIGxvYWQgYXBpIGZvciAnICsgc3ZjKTtcbiAgfVxuICByZXR1cm4gYXBpTG9hZGVyLnNlcnZpY2VzW3N2Y11bdmVyc2lvbl07XG59XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKlxuICogVGhpcyBtZW1iZXIgb2YgQVdTLmFwaUxvYWRlciBpcyBwcml2YXRlLCBidXQgY2hhbmdpbmcgaXQgd2lsbCBuZWNlc3NpdGF0ZSBhXG4gKiBjaGFuZ2UgdG8gLi4vc2NyaXB0cy9zZXJ2aWNlcy10YWJsZS1nZW5lcmF0b3IudHNcbiAqL1xuYXBpTG9hZGVyLnNlcnZpY2VzID0ge307XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gYXBpTG9hZGVyO1xuXG59LHt9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgSG1hYyA9IHJlcXVpcmUoJy4vYnJvd3NlckhtYWMnKTtcbnZhciBNZDUgPSByZXF1aXJlKCcuL2Jyb3dzZXJNZDUnKTtcbnZhciBTaGExID0gcmVxdWlyZSgnLi9icm93c2VyU2hhMScpO1xudmFyIFNoYTI1NiA9IHJlcXVpcmUoJy4vYnJvd3NlclNoYTI1NicpO1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSB7XG4gICAgY3JlYXRlSGFzaDogZnVuY3Rpb24gY3JlYXRlSGFzaChhbGcpIHtcbiAgICAgIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGFsZyA9PT0gJ21kNScpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNZDUoKTtcbiAgICAgIH0gZWxzZSBpZiAoYWxnID09PSAnc2hhMjU2Jykge1xuICAgICAgICByZXR1cm4gbmV3IFNoYTI1NigpO1xuICAgICAgfSBlbHNlIGlmIChhbGcgPT09ICdzaGExJykge1xuICAgICAgICByZXR1cm4gbmV3IFNoYTEoKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoIGFsZ29yaXRobSAnICsgYWxnICsgJyBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIFNESycpO1xuICAgIH0sXG4gICAgY3JlYXRlSG1hYzogZnVuY3Rpb24gY3JlYXRlSG1hYyhhbGcsIGtleSkge1xuICAgICAgYWxnID0gYWxnLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAoYWxnID09PSAnbWQ1Jykge1xuICAgICAgICByZXR1cm4gbmV3IEhtYWMoTWQ1LCBrZXkpO1xuICAgICAgfSBlbHNlIGlmIChhbGcgPT09ICdzaGEyNTYnKSB7XG4gICAgICAgIHJldHVybiBuZXcgSG1hYyhTaGEyNTYsIGtleSk7XG4gICAgICB9IGVsc2UgaWYgKGFsZyA9PT0gJ3NoYTEnKSB7XG4gICAgICAgIHJldHVybiBuZXcgSG1hYyhTaGExLCBrZXkpO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hNQUMgYWxnb3JpdGhtICcgKyBhbGcgKyAnIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgU0RLJyk7XG4gICAgfSxcbiAgICBjcmVhdGVTaWduOiBmdW5jdGlvbigpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3JlYXRlU2lnbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGJyb3dzZXInKTtcbiAgICB9XG4gIH07XG5cbn0se1wiLi9icm93c2VySG1hY1wiOjEzLFwiLi9icm93c2VyTWQ1XCI6MTQsXCIuL2Jyb3dzZXJTaGExXCI6MTUsXCIuL2Jyb3dzZXJTaGEyNTZcIjoxNn1dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXIvJykuQnVmZmVyO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgdGhlIHN0YXRpYyBtZXRob2QgYGlzVmlld2Agb2YgYEFycmF5QnVmZmVyYCwgd2hpY2ggaXNcbiAqIGUuZy4gbWlzc2luZyBpbiBJRSAxMC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuaWYgKFxuICAgIHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAndW5kZWZpbmVkJ1xuKSB7XG4gICAgQXJyYXlCdWZmZXIuaXNWaWV3ID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB2aWV3U3RyaW5ncy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpKSA+IC0xO1xuICAgIH07XG59XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbnZhciB2aWV3U3RyaW5ncyA9IFtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICAnW29iamVjdCBEYXRhVmlld10nLFxuXTtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaXNFbXB0eURhdGEoZGF0YSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEubGVuZ3RoID09PSAwO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YS5ieXRlTGVuZ3RoID09PSAwO1xufVxuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjb252ZXJ0VG9CdWZmZXIoZGF0YSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgJ3V0ZjgnKTtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGggLyBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG59XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IHtcbiAgICBpc0VtcHR5RGF0YTogaXNFbXB0eURhdGEsXG4gICAgY29udmVydFRvQnVmZmVyOiBjb252ZXJ0VG9CdWZmZXIsXG59O1xuXG59LHtcImJ1ZmZlci9cIjo4MX1dLDEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBoYXNoVXRpbHMgPSByZXF1aXJlKCcuL2Jyb3dzZXJIYXNoVXRpbHMnKTtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gSG1hYyhoYXNoQ3Rvciwgc2VjcmV0KSB7XG4gICAgdGhpcy5oYXNoID0gbmV3IGhhc2hDdG9yKCk7XG4gICAgdGhpcy5vdXRlciA9IG5ldyBoYXNoQ3RvcigpO1xuXG4gICAgdmFyIGlubmVyID0gYnVmZmVyRnJvbVNlY3JldChoYXNoQ3Rvciwgc2VjcmV0KTtcbiAgICB2YXIgb3V0ZXIgPSBuZXcgVWludDhBcnJheShoYXNoQ3Rvci5CTE9DS19TSVpFKTtcbiAgICBvdXRlci5zZXQoaW5uZXIpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYXNoQ3Rvci5CTE9DS19TSVpFOyBpKyspIHtcbiAgICAgICAgaW5uZXJbaV0gXj0gMHgzNjtcbiAgICAgICAgb3V0ZXJbaV0gXj0gMHg1YztcbiAgICB9XG5cbiAgICB0aGlzLmhhc2gudXBkYXRlKGlubmVyKTtcbiAgICB0aGlzLm91dGVyLnVwZGF0ZShvdXRlcik7XG5cbiAgICAvLyBaZXJvIG91dCB0aGUgY29waWVkIGtleSBidWZmZXIuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbm5lci5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW5uZXJbaV0gPSAwO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gSG1hYztcblxuSG1hYy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHRvSGFzaCkge1xuICAgIGlmIChoYXNoVXRpbHMuaXNFbXB0eURhdGEodG9IYXNoKSB8fCB0aGlzLmVycm9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIHRoaXMuaGFzaC51cGRhdGUoaGFzaFV0aWxzLmNvbnZlcnRUb0J1ZmZlcih0b0hhc2gpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuSG1hYy5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gICAgaWYgKCF0aGlzLm91dGVyLmZpbmlzaGVkKSB7XG4gICAgICAgIHRoaXMub3V0ZXIudXBkYXRlKHRoaXMuaGFzaC5kaWdlc3QoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMub3V0ZXIuZGlnZXN0KGVuY29kaW5nKTtcbn07XG5cbmZ1bmN0aW9uIGJ1ZmZlckZyb21TZWNyZXQoaGFzaEN0b3IsIHNlY3JldCkge1xuICAgIHZhciBpbnB1dCA9IGhhc2hVdGlscy5jb252ZXJ0VG9CdWZmZXIoc2VjcmV0KTtcbiAgICBpZiAoaW5wdXQuYnl0ZUxlbmd0aCA+IGhhc2hDdG9yLkJMT0NLX1NJWkUpIHtcbiAgICAgICAgdmFyIGJ1ZmZlckhhc2ggPSBuZXcgaGFzaEN0b3I7XG4gICAgICAgIGJ1ZmZlckhhc2gudXBkYXRlKGlucHV0KTtcbiAgICAgICAgaW5wdXQgPSBidWZmZXJIYXNoLmRpZ2VzdCgpO1xuICAgIH1cbiAgICB2YXIgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoaGFzaEN0b3IuQkxPQ0tfU0laRSk7XG4gICAgYnVmZmVyLnNldChpbnB1dCk7XG4gICAgcmV0dXJuIGJ1ZmZlcjtcbn1cblxufSx7XCIuL2Jyb3dzZXJIYXNoVXRpbHNcIjoxMn1dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBoYXNoVXRpbHMgPSByZXF1aXJlKCcuL2Jyb3dzZXJIYXNoVXRpbHMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXIvJykuQnVmZmVyO1xuXG52YXIgQkxPQ0tfU0laRSA9IDY0O1xuXG52YXIgRElHRVNUX0xFTkdUSCA9IDE2O1xuXG52YXIgSU5JVCA9IFtcbiAgICAweDY3NDUyMzAxLFxuICAgIDB4ZWZjZGFiODksXG4gICAgMHg5OGJhZGNmZSxcbiAgICAweDEwMzI1NDc2LFxuXTtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gTWQ1KCkge1xuICAgIHRoaXMuc3RhdGUgPSBbXG4gICAgICAgIDB4Njc0NTIzMDEsXG4gICAgICAgIDB4ZWZjZGFiODksXG4gICAgICAgIDB4OThiYWRjZmUsXG4gICAgICAgIDB4MTAzMjU0NzYsXG4gICAgXTtcbiAgICB0aGlzLmJ1ZmZlciA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoQkxPQ0tfU0laRSkpO1xuICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gMDtcbiAgICB0aGlzLmJ5dGVzSGFzaGVkID0gMDtcbiAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG59XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IE1kNTtcblxuTWQ1LkJMT0NLX1NJWkUgPSBCTE9DS19TSVpFO1xuXG5NZDUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChzb3VyY2VEYXRhKSB7XG4gICAgaWYgKGhhc2hVdGlscy5pc0VtcHR5RGF0YShzb3VyY2VEYXRhKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2UgaWYgKHRoaXMuZmluaXNoZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0ZWQgdG8gdXBkYXRlIGFuIGFscmVhZHkgZmluaXNoZWQgaGFzaC4nKTtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IGhhc2hVdGlscy5jb252ZXJ0VG9CdWZmZXIoc291cmNlRGF0YSk7XG4gICAgdmFyIHBvc2l0aW9uID0gMDtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICB0aGlzLmJ5dGVzSGFzaGVkICs9IGJ5dGVMZW5ndGg7XG4gICAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyLnNldFVpbnQ4KHRoaXMuYnVmZmVyTGVuZ3RoKyssIGRhdGFbcG9zaXRpb24rK10pO1xuICAgICAgICBieXRlTGVuZ3RoLS07XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlckxlbmd0aCA9PT0gQkxPQ0tfU0laRSkge1xuICAgICAgICAgICAgdGhpcy5oYXNoQnVmZmVyKCk7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbk1kNS5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gICAgaWYgKCF0aGlzLmZpbmlzaGVkKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGJ1ZmZlciA9IF9hLmJ1ZmZlciwgdW5kZWNvcmF0ZWRMZW5ndGggPSBfYS5idWZmZXJMZW5ndGgsIGJ5dGVzSGFzaGVkID0gX2EuYnl0ZXNIYXNoZWQ7XG4gICAgICAgIHZhciBiaXRzSGFzaGVkID0gYnl0ZXNIYXNoZWQgKiA4O1xuICAgICAgICBidWZmZXIuc2V0VWludDgodGhpcy5idWZmZXJMZW5ndGgrKywgMTI4KTtcbiAgICAgICAgLy8gRW5zdXJlIHRoZSBmaW5hbCBibG9jayBoYXMgZW5vdWdoIHJvb20gZm9yIHRoZSBoYXNoZWQgbGVuZ3RoXG4gICAgICAgIGlmICh1bmRlY29yYXRlZExlbmd0aCAlIEJMT0NLX1NJWkUgPj0gQkxPQ0tfU0laRSAtIDgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmJ1ZmZlckxlbmd0aDsgaSA8IEJMT0NLX1NJWkU7IGkrKykge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5zZXRVaW50OChpLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaGFzaEJ1ZmZlcigpO1xuICAgICAgICAgICAgdGhpcy5idWZmZXJMZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmJ1ZmZlckxlbmd0aDsgaSA8IEJMT0NLX1NJWkUgLSA4OyBpKyspIHtcbiAgICAgICAgICAgIGJ1ZmZlci5zZXRVaW50OChpLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBidWZmZXIuc2V0VWludDMyKEJMT0NLX1NJWkUgLSA4LCBiaXRzSGFzaGVkID4+PiAwLCB0cnVlKTtcbiAgICAgICAgYnVmZmVyLnNldFVpbnQzMihCTE9DS19TSVpFIC0gNCwgTWF0aC5mbG9vcihiaXRzSGFzaGVkIC8gMHgxMDAwMDAwMDApLCB0cnVlKTtcbiAgICAgICAgdGhpcy5oYXNoQnVmZmVyKCk7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xuICAgIH1cbiAgICB2YXIgb3V0ID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcihESUdFU1RfTEVOR1RIKSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgb3V0LnNldFVpbnQzMihpICogNCwgdGhpcy5zdGF0ZVtpXSwgdHJ1ZSk7XG4gICAgfVxuICAgIHZhciBidWZmID0gbmV3IEJ1ZmZlcihvdXQuYnVmZmVyLCBvdXQuYnl0ZU9mZnNldCwgb3V0LmJ5dGVMZW5ndGgpO1xuICAgIHJldHVybiBlbmNvZGluZyA/IGJ1ZmYudG9TdHJpbmcoZW5jb2RpbmcpIDogYnVmZjtcbn07XG5cbk1kNS5wcm90b3R5cGUuaGFzaEJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2EgPSB0aGlzLCBidWZmZXIgPSBfYS5idWZmZXIsIHN0YXRlID0gX2Euc3RhdGU7XG4gICAgdmFyIGEgPSBzdGF0ZVswXSwgYiA9IHN0YXRlWzFdLCBjID0gc3RhdGVbMl0sIGQgPSBzdGF0ZVszXTtcbiAgICBhID0gZmYoYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMigwLCB0cnVlKSwgNywgMHhkNzZhYTQ3OCk7XG4gICAgZCA9IGZmKGQsIGEsIGIsIGMsIGJ1ZmZlci5nZXRVaW50MzIoNCwgdHJ1ZSksIDEyLCAweGU4YzdiNzU2KTtcbiAgICBjID0gZmYoYywgZCwgYSwgYiwgYnVmZmVyLmdldFVpbnQzMig4LCB0cnVlKSwgMTcsIDB4MjQyMDcwZGIpO1xuICAgIGIgPSBmZihiLCBjLCBkLCBhLCBidWZmZXIuZ2V0VWludDMyKDEyLCB0cnVlKSwgMjIsIDB4YzFiZGNlZWUpO1xuICAgIGEgPSBmZihhLCBiLCBjLCBkLCBidWZmZXIuZ2V0VWludDMyKDE2LCB0cnVlKSwgNywgMHhmNTdjMGZhZik7XG4gICAgZCA9IGZmKGQsIGEsIGIsIGMsIGJ1ZmZlci5nZXRVaW50MzIoMjAsIHRydWUpLCAxMiwgMHg0Nzg3YzYyYSk7XG4gICAgYyA9IGZmKGMsIGQsIGEsIGIsIGJ1ZmZlci5nZXRVaW50MzIoMjQsIHRydWUpLCAxNywgMHhhODMwNDYxMyk7XG4gICAgYiA9IGZmKGIsIGMsIGQsIGEsIGJ1ZmZlci5nZXRVaW50MzIoMjgsIHRydWUpLCAyMiwgMHhmZDQ2OTUwMSk7XG4gICAgYSA9IGZmKGEsIGIsIGMsIGQsIGJ1ZmZlci5nZXRVaW50MzIoMzIsIHRydWUpLCA3LCAweDY5ODA5OGQ4KTtcbiAgICBkID0gZmYoZCwgYSwgYiwgYywgYnVmZmVyLmdldFVpbnQzMigzNiwgdHJ1ZSksIDEyLCAweDhiNDRmN2FmKTtcbiAgICBjID0gZmYoYywgZCwgYSwgYiwgYnVmZmVyLmdldFVpbnQzMig0MCwgdHJ1ZSksIDE3LCAweGZmZmY1YmIxKTtcbiAgICBiID0gZmYoYiwgYywgZCwgYSwgYnVmZmVyLmdldFVpbnQzMig0NCwgdHJ1ZSksIDIyLCAweDg5NWNkN2JlKTtcbiAgICBhID0gZmYoYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMig0OCwgdHJ1ZSksIDcsIDB4NmI5MDExMjIpO1xuICAgIGQgPSBmZihkLCBhLCBiLCBjLCBidWZmZXIuZ2V0VWludDMyKDUyLCB0cnVlKSwgMTIsIDB4ZmQ5ODcxOTMpO1xuICAgIGMgPSBmZihjLCBkLCBhLCBiLCBidWZmZXIuZ2V0VWludDMyKDU2LCB0cnVlKSwgMTcsIDB4YTY3OTQzOGUpO1xuICAgIGIgPSBmZihiLCBjLCBkLCBhLCBidWZmZXIuZ2V0VWludDMyKDYwLCB0cnVlKSwgMjIsIDB4NDliNDA4MjEpO1xuICAgIGEgPSBnZyhhLCBiLCBjLCBkLCBidWZmZXIuZ2V0VWludDMyKDQsIHRydWUpLCA1LCAweGY2MWUyNTYyKTtcbiAgICBkID0gZ2coZCwgYSwgYiwgYywgYnVmZmVyLmdldFVpbnQzMigyNCwgdHJ1ZSksIDksIDB4YzA0MGIzNDApO1xuICAgIGMgPSBnZyhjLCBkLCBhLCBiLCBidWZmZXIuZ2V0VWludDMyKDQ0LCB0cnVlKSwgMTQsIDB4MjY1ZTVhNTEpO1xuICAgIGIgPSBnZyhiLCBjLCBkLCBhLCBidWZmZXIuZ2V0VWludDMyKDAsIHRydWUpLCAyMCwgMHhlOWI2YzdhYSk7XG4gICAgYSA9IGdnKGEsIGIsIGMsIGQsIGJ1ZmZlci5nZXRVaW50MzIoMjAsIHRydWUpLCA1LCAweGQ2MmYxMDVkKTtcbiAgICBkID0gZ2coZCwgYSwgYiwgYywgYnVmZmVyLmdldFVpbnQzMig0MCwgdHJ1ZSksIDksIDB4MDI0NDE0NTMpO1xuICAgIGMgPSBnZyhjLCBkLCBhLCBiLCBidWZmZXIuZ2V0VWludDMyKDYwLCB0cnVlKSwgMTQsIDB4ZDhhMWU2ODEpO1xuICAgIGIgPSBnZyhiLCBjLCBkLCBhLCBidWZmZXIuZ2V0VWludDMyKDE2LCB0cnVlKSwgMjAsIDB4ZTdkM2ZiYzgpO1xuICAgIGEgPSBnZyhhLCBiLCBjLCBkLCBidWZmZXIuZ2V0VWludDMyKDM2LCB0cnVlKSwgNSwgMHgyMWUxY2RlNik7XG4gICAgZCA9IGdnKGQsIGEsIGIsIGMsIGJ1ZmZlci5nZXRVaW50MzIoNTYsIHRydWUpLCA5LCAweGMzMzcwN2Q2KTtcbiAgICBjID0gZ2coYywgZCwgYSwgYiwgYnVmZmVyLmdldFVpbnQzMigxMiwgdHJ1ZSksIDE0LCAweGY0ZDUwZDg3KTtcbiAgICBiID0gZ2coYiwgYywgZCwgYSwgYnVmZmVyLmdldFVpbnQzMigzMiwgdHJ1ZSksIDIwLCAweDQ1NWExNGVkKTtcbiAgICBhID0gZ2coYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMig1MiwgdHJ1ZSksIDUsIDB4YTllM2U5MDUpO1xuICAgIGQgPSBnZyhkLCBhLCBiLCBjLCBidWZmZXIuZ2V0VWludDMyKDgsIHRydWUpLCA5LCAweGZjZWZhM2Y4KTtcbiAgICBjID0gZ2coYywgZCwgYSwgYiwgYnVmZmVyLmdldFVpbnQzMigyOCwgdHJ1ZSksIDE0LCAweDY3NmYwMmQ5KTtcbiAgICBiID0gZ2coYiwgYywgZCwgYSwgYnVmZmVyLmdldFVpbnQzMig0OCwgdHJ1ZSksIDIwLCAweDhkMmE0YzhhKTtcbiAgICBhID0gaGgoYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMigyMCwgdHJ1ZSksIDQsIDB4ZmZmYTM5NDIpO1xuICAgIGQgPSBoaChkLCBhLCBiLCBjLCBidWZmZXIuZ2V0VWludDMyKDMyLCB0cnVlKSwgMTEsIDB4ODc3MWY2ODEpO1xuICAgIGMgPSBoaChjLCBkLCBhLCBiLCBidWZmZXIuZ2V0VWludDMyKDQ0LCB0cnVlKSwgMTYsIDB4NmQ5ZDYxMjIpO1xuICAgIGIgPSBoaChiLCBjLCBkLCBhLCBidWZmZXIuZ2V0VWludDMyKDU2LCB0cnVlKSwgMjMsIDB4ZmRlNTM4MGMpO1xuICAgIGEgPSBoaChhLCBiLCBjLCBkLCBidWZmZXIuZ2V0VWludDMyKDQsIHRydWUpLCA0LCAweGE0YmVlYTQ0KTtcbiAgICBkID0gaGgoZCwgYSwgYiwgYywgYnVmZmVyLmdldFVpbnQzMigxNiwgdHJ1ZSksIDExLCAweDRiZGVjZmE5KTtcbiAgICBjID0gaGgoYywgZCwgYSwgYiwgYnVmZmVyLmdldFVpbnQzMigyOCwgdHJ1ZSksIDE2LCAweGY2YmI0YjYwKTtcbiAgICBiID0gaGgoYiwgYywgZCwgYSwgYnVmZmVyLmdldFVpbnQzMig0MCwgdHJ1ZSksIDIzLCAweGJlYmZiYzcwKTtcbiAgICBhID0gaGgoYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMig1MiwgdHJ1ZSksIDQsIDB4Mjg5YjdlYzYpO1xuICAgIGQgPSBoaChkLCBhLCBiLCBjLCBidWZmZXIuZ2V0VWludDMyKDAsIHRydWUpLCAxMSwgMHhlYWExMjdmYSk7XG4gICAgYyA9IGhoKGMsIGQsIGEsIGIsIGJ1ZmZlci5nZXRVaW50MzIoMTIsIHRydWUpLCAxNiwgMHhkNGVmMzA4NSk7XG4gICAgYiA9IGhoKGIsIGMsIGQsIGEsIGJ1ZmZlci5nZXRVaW50MzIoMjQsIHRydWUpLCAyMywgMHgwNDg4MWQwNSk7XG4gICAgYSA9IGhoKGEsIGIsIGMsIGQsIGJ1ZmZlci5nZXRVaW50MzIoMzYsIHRydWUpLCA0LCAweGQ5ZDRkMDM5KTtcbiAgICBkID0gaGgoZCwgYSwgYiwgYywgYnVmZmVyLmdldFVpbnQzMig0OCwgdHJ1ZSksIDExLCAweGU2ZGI5OWU1KTtcbiAgICBjID0gaGgoYywgZCwgYSwgYiwgYnVmZmVyLmdldFVpbnQzMig2MCwgdHJ1ZSksIDE2LCAweDFmYTI3Y2Y4KTtcbiAgICBiID0gaGgoYiwgYywgZCwgYSwgYnVmZmVyLmdldFVpbnQzMig4LCB0cnVlKSwgMjMsIDB4YzRhYzU2NjUpO1xuICAgIGEgPSBpaShhLCBiLCBjLCBkLCBidWZmZXIuZ2V0VWludDMyKDAsIHRydWUpLCA2LCAweGY0MjkyMjQ0KTtcbiAgICBkID0gaWkoZCwgYSwgYiwgYywgYnVmZmVyLmdldFVpbnQzMigyOCwgdHJ1ZSksIDEwLCAweDQzMmFmZjk3KTtcbiAgICBjID0gaWkoYywgZCwgYSwgYiwgYnVmZmVyLmdldFVpbnQzMig1NiwgdHJ1ZSksIDE1LCAweGFiOTQyM2E3KTtcbiAgICBiID0gaWkoYiwgYywgZCwgYSwgYnVmZmVyLmdldFVpbnQzMigyMCwgdHJ1ZSksIDIxLCAweGZjOTNhMDM5KTtcbiAgICBhID0gaWkoYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMig0OCwgdHJ1ZSksIDYsIDB4NjU1YjU5YzMpO1xuICAgIGQgPSBpaShkLCBhLCBiLCBjLCBidWZmZXIuZ2V0VWludDMyKDEyLCB0cnVlKSwgMTAsIDB4OGYwY2NjOTIpO1xuICAgIGMgPSBpaShjLCBkLCBhLCBiLCBidWZmZXIuZ2V0VWludDMyKDQwLCB0cnVlKSwgMTUsIDB4ZmZlZmY0N2QpO1xuICAgIGIgPSBpaShiLCBjLCBkLCBhLCBidWZmZXIuZ2V0VWludDMyKDQsIHRydWUpLCAyMSwgMHg4NTg0NWRkMSk7XG4gICAgYSA9IGlpKGEsIGIsIGMsIGQsIGJ1ZmZlci5nZXRVaW50MzIoMzIsIHRydWUpLCA2LCAweDZmYTg3ZTRmKTtcbiAgICBkID0gaWkoZCwgYSwgYiwgYywgYnVmZmVyLmdldFVpbnQzMig2MCwgdHJ1ZSksIDEwLCAweGZlMmNlNmUwKTtcbiAgICBjID0gaWkoYywgZCwgYSwgYiwgYnVmZmVyLmdldFVpbnQzMigyNCwgdHJ1ZSksIDE1LCAweGEzMDE0MzE0KTtcbiAgICBiID0gaWkoYiwgYywgZCwgYSwgYnVmZmVyLmdldFVpbnQzMig1MiwgdHJ1ZSksIDIxLCAweDRlMDgxMWExKTtcbiAgICBhID0gaWkoYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMigxNiwgdHJ1ZSksIDYsIDB4Zjc1MzdlODIpO1xuICAgIGQgPSBpaShkLCBhLCBiLCBjLCBidWZmZXIuZ2V0VWludDMyKDQ0LCB0cnVlKSwgMTAsIDB4YmQzYWYyMzUpO1xuICAgIGMgPSBpaShjLCBkLCBhLCBiLCBidWZmZXIuZ2V0VWludDMyKDgsIHRydWUpLCAxNSwgMHgyYWQ3ZDJiYik7XG4gICAgYiA9IGlpKGIsIGMsIGQsIGEsIGJ1ZmZlci5nZXRVaW50MzIoMzYsIHRydWUpLCAyMSwgMHhlYjg2ZDM5MSk7XG4gICAgc3RhdGVbMF0gPSAoYSArIHN0YXRlWzBdKSAmIDB4RkZGRkZGRkY7XG4gICAgc3RhdGVbMV0gPSAoYiArIHN0YXRlWzFdKSAmIDB4RkZGRkZGRkY7XG4gICAgc3RhdGVbMl0gPSAoYyArIHN0YXRlWzJdKSAmIDB4RkZGRkZGRkY7XG4gICAgc3RhdGVbM10gPSAoZCArIHN0YXRlWzNdKSAmIDB4RkZGRkZGRkY7XG59O1xuXG5mdW5jdGlvbiBjbW4ocSwgYSwgYiwgeCwgcywgdCkge1xuICAgIGEgPSAoKChhICsgcSkgJiAweEZGRkZGRkZGKSArICgoeCArIHQpICYgMHhGRkZGRkZGRikpICYgMHhGRkZGRkZGRjtcbiAgICByZXR1cm4gKCgoYSA8PCBzKSB8IChhID4+PiAoMzIgLSBzKSkpICsgYikgJiAweEZGRkZGRkZGO1xufVxuXG5mdW5jdGlvbiBmZihhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gICAgcmV0dXJuIGNtbigoYiAmIGMpIHwgKCh+YikgJiBkKSwgYSwgYiwgeCwgcywgdCk7XG59XG5cbmZ1bmN0aW9uIGdnKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgICByZXR1cm4gY21uKChiICYgZCkgfCAoYyAmICh+ZCkpLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gaGgoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICAgIHJldHVybiBjbW4oYiBeIGMgXiBkLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gaWkoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICAgIHJldHVybiBjbW4oYyBeIChiIHwgKH5kKSksIGEsIGIsIHgsIHMsIHQpO1xufVxuXG59LHtcIi4vYnJvd3Nlckhhc2hVdGlsc1wiOjEyLFwiYnVmZmVyL1wiOjgxfV0sMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlci8nKS5CdWZmZXI7XG52YXIgaGFzaFV0aWxzID0gcmVxdWlyZSgnLi9icm93c2VySGFzaFV0aWxzJyk7XG5cbnZhciBCTE9DS19TSVpFID0gNjQ7XG5cbnZhciBESUdFU1RfTEVOR1RIID0gMjA7XG5cbnZhciBLRVkgPSBuZXcgVWludDMyQXJyYXkoW1xuICAgIDB4NWE4Mjc5OTksXG4gICAgMHg2ZWQ5ZWJhMSxcbiAgICAweDhmMWJiY2RjIHwgMCxcbiAgICAweGNhNjJjMWQ2IHwgMFxuXSk7XG5cbnZhciBJTklUID0gW1xuICAgIDB4NmEwOWU2NjcsXG4gICAgMHhiYjY3YWU4NSxcbiAgICAweDNjNmVmMzcyLFxuICAgIDB4YTU0ZmY1M2EsXG4gICAgMHg1MTBlNTI3ZixcbiAgICAweDliMDU2ODhjLFxuICAgIDB4MWY4M2Q5YWIsXG4gICAgMHg1YmUwY2QxOSxcbl07XG5cbnZhciBNQVhfSEFTSEFCTEVfTEVOR1RIID0gTWF0aC5wb3coMiwgNTMpIC0gMTtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gU2hhMSgpIHtcbiAgICB0aGlzLmgwID0gMHg2NzQ1MjMwMTtcbiAgICB0aGlzLmgxID0gMHhFRkNEQUI4OTtcbiAgICB0aGlzLmgyID0gMHg5OEJBRENGRTtcbiAgICB0aGlzLmgzID0gMHgxMDMyNTQ3NjtcbiAgICB0aGlzLmg0ID0gMHhDM0QyRTFGMDtcbiAgICAvLyBUaGUgZmlyc3QgNjQgYnl0ZXMgKDE2IHdvcmRzKSBpcyB0aGUgZGF0YSBjaHVua1xuICAgIHRoaXMuYmxvY2sgPSBuZXcgVWludDMyQXJyYXkoODApO1xuICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICB0aGlzLnNoaWZ0ID0gMjQ7XG4gICAgdGhpcy50b3RhbExlbmd0aCA9IDA7XG59XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IFNoYTE7XG5cblNoYTEuQkxPQ0tfU0laRSA9IEJMT0NLX1NJWkU7XG5cblNoYTEucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKHRoaXMuZmluaXNoZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0ZWQgdG8gdXBkYXRlIGFuIGFscmVhZHkgZmluaXNoZWQgaGFzaC4nKTtcbiAgICB9XG5cbiAgICBpZiAoaGFzaFV0aWxzLmlzRW1wdHlEYXRhKGRhdGEpKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRhdGEgPSBoYXNoVXRpbHMuY29udmVydFRvQnVmZmVyKGRhdGEpO1xuXG4gICAgdmFyIGxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgIHRoaXMudG90YWxMZW5ndGggKz0gbGVuZ3RoICogODtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud3JpdGUoZGF0YVtpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5TaGExLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlKGJ5dGUpIHtcbiAgICB0aGlzLmJsb2NrW3RoaXMub2Zmc2V0XSB8PSAoYnl0ZSAmIDB4ZmYpIDw8IHRoaXMuc2hpZnQ7XG4gICAgaWYgKHRoaXMuc2hpZnQpIHtcbiAgICAgICAgdGhpcy5zaGlmdCAtPSA4O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgIHRoaXMuc2hpZnQgPSAyNDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vZmZzZXQgPT09IDE2KSB0aGlzLnByb2Nlc3NCbG9jaygpO1xufTtcblxuU2hhMS5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gICAgLy8gUGFkXG4gICAgdGhpcy53cml0ZSgweDgwKTtcbiAgICBpZiAodGhpcy5vZmZzZXQgPiAxNCB8fCAodGhpcy5vZmZzZXQgPT09IDE0ICYmIHRoaXMuc2hpZnQgPCAyNCkpIHtcbiAgICAgIHRoaXMucHJvY2Vzc0Jsb2NrKCk7XG4gICAgfVxuICAgIHRoaXMub2Zmc2V0ID0gMTQ7XG4gICAgdGhpcy5zaGlmdCA9IDI0O1xuXG4gICAgLy8gNjQtYml0IGxlbmd0aCBiaWctZW5kaWFuXG4gICAgdGhpcy53cml0ZSgweDAwKTsgLy8gbnVtYmVycyB0aGlzIGJpZyBhcmVuJ3QgYWNjdXJhdGUgaW4gamF2YXNjcmlwdCBhbnl3YXlcbiAgICB0aGlzLndyaXRlKDB4MDApOyAvLyAuLlNvIGp1c3QgaGFyZC1jb2RlIHRvIHplcm8uXG4gICAgdGhpcy53cml0ZSh0aGlzLnRvdGFsTGVuZ3RoID4gMHhmZmZmZmZmZmZmID8gdGhpcy50b3RhbExlbmd0aCAvIDB4MTAwMDAwMDAwMDAgOiAweDAwKTtcbiAgICB0aGlzLndyaXRlKHRoaXMudG90YWxMZW5ndGggPiAweGZmZmZmZmZmID8gdGhpcy50b3RhbExlbmd0aCAvIDB4MTAwMDAwMDAwIDogMHgwMCk7XG4gICAgZm9yICh2YXIgcyA9IDI0OyBzID49IDA7IHMgLT0gOCkge1xuICAgICAgICB0aGlzLndyaXRlKHRoaXMudG90YWxMZW5ndGggPj4gcyk7XG4gICAgfVxuICAgIC8vIFRoZSB2YWx1ZSBpbiBzdGF0ZSBpcyBsaXR0bGUtZW5kaWFuIHJhdGhlciB0aGFuIGJpZy1lbmRpYW4sIHNvIGZsaXBcbiAgICAvLyBlYWNoIHdvcmQgaW50byBhIG5ldyBVaW50OEFycmF5XG4gICAgdmFyIG91dCA9IG5ldyBCdWZmZXIoRElHRVNUX0xFTkdUSCk7XG4gICAgdmFyIG91dFZpZXcgPSBuZXcgRGF0YVZpZXcob3V0LmJ1ZmZlcik7XG4gICAgb3V0Vmlldy5zZXRVaW50MzIoMCwgdGhpcy5oMCwgZmFsc2UpO1xuICAgIG91dFZpZXcuc2V0VWludDMyKDQsIHRoaXMuaDEsIGZhbHNlKTtcbiAgICBvdXRWaWV3LnNldFVpbnQzMig4LCB0aGlzLmgyLCBmYWxzZSk7XG4gICAgb3V0Vmlldy5zZXRVaW50MzIoMTIsIHRoaXMuaDMsIGZhbHNlKTtcbiAgICBvdXRWaWV3LnNldFVpbnQzMigxNiwgdGhpcy5oNCwgZmFsc2UpO1xuXG4gICAgcmV0dXJuIGVuY29kaW5nID8gb3V0LnRvU3RyaW5nKGVuY29kaW5nKSA6IG91dDtcbn07XG5cblNoYTEucHJvdG90eXBlLnByb2Nlc3NCbG9jayA9IGZ1bmN0aW9uIHByb2Nlc3NCbG9jaygpIHtcbiAgICAvLyBFeHRlbmQgdGhlIHNpeHRlZW4gMzItYml0IHdvcmRzIGludG8gZWlnaHR5IDMyLWJpdCB3b3JkczpcbiAgICBmb3IgKHZhciBpID0gMTY7IGkgPCA4MDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMuYmxvY2tbaSAtIDNdIF4gdGhpcy5ibG9ja1tpIC0gOF0gXiB0aGlzLmJsb2NrW2kgLSAxNF0gXiB0aGlzLmJsb2NrW2kgLSAxNl07XG4gICAgICB0aGlzLmJsb2NrW2ldID0gKHcgPDwgMSkgfCAodyA+Pj4gMzEpO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgaGFzaCB2YWx1ZSBmb3IgdGhpcyBjaHVuazpcbiAgICB2YXIgYSA9IHRoaXMuaDA7XG4gICAgdmFyIGIgPSB0aGlzLmgxO1xuICAgIHZhciBjID0gdGhpcy5oMjtcbiAgICB2YXIgZCA9IHRoaXMuaDM7XG4gICAgdmFyIGUgPSB0aGlzLmg0O1xuICAgIHZhciBmLCBrO1xuXG4gICAgLy8gTWFpbiBsb29wOlxuICAgIGZvciAoaSA9IDA7IGkgPCA4MDsgaSsrKSB7XG4gICAgICBpZiAoaSA8IDIwKSB7XG4gICAgICAgIGYgPSBkIF4gKGIgJiAoYyBeIGQpKTtcbiAgICAgICAgayA9IDB4NUE4Mjc5OTk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpIDwgNDApIHtcbiAgICAgICAgZiA9IGIgXiBjIF4gZDtcbiAgICAgICAgayA9IDB4NkVEOUVCQTE7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpIDwgNjApIHtcbiAgICAgICAgZiA9IChiICYgYykgfCAoZCAmIChiIHwgYykpO1xuICAgICAgICBrID0gMHg4RjFCQkNEQztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmID0gYiBeIGMgXiBkO1xuICAgICAgICBrID0gMHhDQTYyQzFENjtcbiAgICAgIH1cbiAgICAgIHZhciB0ZW1wID0gKGEgPDwgNSB8IGEgPj4+IDI3KSArIGYgKyBlICsgayArICh0aGlzLmJsb2NrW2ldfDApO1xuICAgICAgZSA9IGQ7XG4gICAgICBkID0gYztcbiAgICAgIGMgPSAoYiA8PCAzMCB8IGIgPj4+IDIpO1xuICAgICAgYiA9IGE7XG4gICAgICBhID0gdGVtcDtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhpcyBjaHVuaydzIGhhc2ggdG8gcmVzdWx0IHNvIGZhcjpcbiAgICB0aGlzLmgwID0gKHRoaXMuaDAgKyBhKSB8IDA7XG4gICAgdGhpcy5oMSA9ICh0aGlzLmgxICsgYikgfCAwO1xuICAgIHRoaXMuaDIgPSAodGhpcy5oMiArIGMpIHwgMDtcbiAgICB0aGlzLmgzID0gKHRoaXMuaDMgKyBkKSB8IDA7XG4gICAgdGhpcy5oNCA9ICh0aGlzLmg0ICsgZSkgfCAwO1xuXG4gICAgLy8gVGhlIGJsb2NrIGlzIG5vdyByZXVzYWJsZS5cbiAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgdGhpcy5ibG9ja1tpXSA9IDA7XG4gICAgfVxufTtcblxufSx7XCIuL2Jyb3dzZXJIYXNoVXRpbHNcIjoxMixcImJ1ZmZlci9cIjo4MX1dLDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXIvJykuQnVmZmVyO1xudmFyIGhhc2hVdGlscyA9IHJlcXVpcmUoJy4vYnJvd3Nlckhhc2hVdGlscycpO1xuXG52YXIgQkxPQ0tfU0laRSA9IDY0O1xuXG52YXIgRElHRVNUX0xFTkdUSCA9IDMyO1xuXG52YXIgS0VZID0gbmV3IFVpbnQzMkFycmF5KFtcbiAgICAweDQyOGEyZjk4LFxuICAgIDB4NzEzNzQ0OTEsXG4gICAgMHhiNWMwZmJjZixcbiAgICAweGU5YjVkYmE1LFxuICAgIDB4Mzk1NmMyNWIsXG4gICAgMHg1OWYxMTFmMSxcbiAgICAweDkyM2Y4MmE0LFxuICAgIDB4YWIxYzVlZDUsXG4gICAgMHhkODA3YWE5OCxcbiAgICAweDEyODM1YjAxLFxuICAgIDB4MjQzMTg1YmUsXG4gICAgMHg1NTBjN2RjMyxcbiAgICAweDcyYmU1ZDc0LFxuICAgIDB4ODBkZWIxZmUsXG4gICAgMHg5YmRjMDZhNyxcbiAgICAweGMxOWJmMTc0LFxuICAgIDB4ZTQ5YjY5YzEsXG4gICAgMHhlZmJlNDc4NixcbiAgICAweDBmYzE5ZGM2LFxuICAgIDB4MjQwY2ExY2MsXG4gICAgMHgyZGU5MmM2ZixcbiAgICAweDRhNzQ4NGFhLFxuICAgIDB4NWNiMGE5ZGMsXG4gICAgMHg3NmY5ODhkYSxcbiAgICAweDk4M2U1MTUyLFxuICAgIDB4YTgzMWM2NmQsXG4gICAgMHhiMDAzMjdjOCxcbiAgICAweGJmNTk3ZmM3LFxuICAgIDB4YzZlMDBiZjMsXG4gICAgMHhkNWE3OTE0NyxcbiAgICAweDA2Y2E2MzUxLFxuICAgIDB4MTQyOTI5NjcsXG4gICAgMHgyN2I3MGE4NSxcbiAgICAweDJlMWIyMTM4LFxuICAgIDB4NGQyYzZkZmMsXG4gICAgMHg1MzM4MGQxMyxcbiAgICAweDY1MGE3MzU0LFxuICAgIDB4NzY2YTBhYmIsXG4gICAgMHg4MWMyYzkyZSxcbiAgICAweDkyNzIyYzg1LFxuICAgIDB4YTJiZmU4YTEsXG4gICAgMHhhODFhNjY0YixcbiAgICAweGMyNGI4YjcwLFxuICAgIDB4Yzc2YzUxYTMsXG4gICAgMHhkMTkyZTgxOSxcbiAgICAweGQ2OTkwNjI0LFxuICAgIDB4ZjQwZTM1ODUsXG4gICAgMHgxMDZhYTA3MCxcbiAgICAweDE5YTRjMTE2LFxuICAgIDB4MWUzNzZjMDgsXG4gICAgMHgyNzQ4Nzc0YyxcbiAgICAweDM0YjBiY2I1LFxuICAgIDB4MzkxYzBjYjMsXG4gICAgMHg0ZWQ4YWE0YSxcbiAgICAweDViOWNjYTRmLFxuICAgIDB4NjgyZTZmZjMsXG4gICAgMHg3NDhmODJlZSxcbiAgICAweDc4YTU2MzZmLFxuICAgIDB4ODRjODc4MTQsXG4gICAgMHg4Y2M3MDIwOCxcbiAgICAweDkwYmVmZmZhLFxuICAgIDB4YTQ1MDZjZWIsXG4gICAgMHhiZWY5YTNmNyxcbiAgICAweGM2NzE3OGYyXG5dKTtcblxudmFyIElOSVQgPSBbXG4gICAgMHg2YTA5ZTY2NyxcbiAgICAweGJiNjdhZTg1LFxuICAgIDB4M2M2ZWYzNzIsXG4gICAgMHhhNTRmZjUzYSxcbiAgICAweDUxMGU1MjdmLFxuICAgIDB4OWIwNTY4OGMsXG4gICAgMHgxZjgzZDlhYixcbiAgICAweDViZTBjZDE5LFxuXTtcblxudmFyIE1BWF9IQVNIQUJMRV9MRU5HVEggPSBNYXRoLnBvdygyLCA1MykgLSAxO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIFNoYTI1NigpIHtcbiAgICB0aGlzLnN0YXRlID0gW1xuICAgICAgICAweDZhMDllNjY3LFxuICAgICAgICAweGJiNjdhZTg1LFxuICAgICAgICAweDNjNmVmMzcyLFxuICAgICAgICAweGE1NGZmNTNhLFxuICAgICAgICAweDUxMGU1MjdmLFxuICAgICAgICAweDliMDU2ODhjLFxuICAgICAgICAweDFmODNkOWFiLFxuICAgICAgICAweDViZTBjZDE5LFxuICAgIF07XG4gICAgdGhpcy50ZW1wID0gbmV3IEludDMyQXJyYXkoNjQpO1xuICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoNjQpO1xuICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gMDtcbiAgICB0aGlzLmJ5dGVzSGFzaGVkID0gMDtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gU2hhMjU2O1xuXG5TaGEyNTYuQkxPQ0tfU0laRSA9IEJMT0NLX1NJWkU7XG5cblNoYTI1Ni5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAodGhpcy5maW5pc2hlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRlZCB0byB1cGRhdGUgYW4gYWxyZWFkeSBmaW5pc2hlZCBoYXNoLicpO1xuICAgIH1cblxuICAgIGlmIChoYXNoVXRpbHMuaXNFbXB0eURhdGEoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZGF0YSA9IGhhc2hVdGlscy5jb252ZXJ0VG9CdWZmZXIoZGF0YSk7XG5cbiAgICB2YXIgcG9zaXRpb24gPSAwO1xuICAgIHZhciBieXRlTGVuZ3RoID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgIHRoaXMuYnl0ZXNIYXNoZWQgKz0gYnl0ZUxlbmd0aDtcbiAgICBpZiAodGhpcy5ieXRlc0hhc2hlZCAqIDggPiBNQVhfSEFTSEFCTEVfTEVOR1RIKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGhhc2ggbW9yZSB0aGFuIDJeNTMgLSAxIGJpdHMnKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5idWZmZXJbdGhpcy5idWZmZXJMZW5ndGgrK10gPSBkYXRhW3Bvc2l0aW9uKytdO1xuICAgICAgICBieXRlTGVuZ3RoLS07XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlckxlbmd0aCA9PT0gQkxPQ0tfU0laRSkge1xuICAgICAgICAgICAgdGhpcy5oYXNoQnVmZmVyKCk7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblNoYTI1Ni5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gICAgaWYgKCF0aGlzLmZpbmlzaGVkKSB7XG4gICAgICAgIHZhciBiaXRzSGFzaGVkID0gdGhpcy5ieXRlc0hhc2hlZCAqIDg7XG4gICAgICAgIHZhciBidWZmZXJWaWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuYnVmZmVyLmJ1ZmZlciwgdGhpcy5idWZmZXIuYnl0ZU9mZnNldCwgdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIHZhciB1bmRlY29yYXRlZExlbmd0aCA9IHRoaXMuYnVmZmVyTGVuZ3RoO1xuICAgICAgICBidWZmZXJWaWV3LnNldFVpbnQ4KHRoaXMuYnVmZmVyTGVuZ3RoKyssIDB4ODApO1xuICAgICAgICAvLyBFbnN1cmUgdGhlIGZpbmFsIGJsb2NrIGhhcyBlbm91Z2ggcm9vbSBmb3IgdGhlIGhhc2hlZCBsZW5ndGhcbiAgICAgICAgaWYgKHVuZGVjb3JhdGVkTGVuZ3RoICUgQkxPQ0tfU0laRSA+PSBCTE9DS19TSVpFIC0gOCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuYnVmZmVyTGVuZ3RoOyBpIDwgQkxPQ0tfU0laRTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyVmlldy5zZXRVaW50OChpLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaGFzaEJ1ZmZlcigpO1xuICAgICAgICAgICAgdGhpcy5idWZmZXJMZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmJ1ZmZlckxlbmd0aDsgaSA8IEJMT0NLX1NJWkUgLSA4OyBpKyspIHtcbiAgICAgICAgICAgIGJ1ZmZlclZpZXcuc2V0VWludDgoaSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgYnVmZmVyVmlldy5zZXRVaW50MzIoQkxPQ0tfU0laRSAtIDgsIE1hdGguZmxvb3IoYml0c0hhc2hlZCAvIDB4MTAwMDAwMDAwKSwgdHJ1ZSk7XG4gICAgICAgIGJ1ZmZlclZpZXcuc2V0VWludDMyKEJMT0NLX1NJWkUgLSA0LCBiaXRzSGFzaGVkKTtcbiAgICAgICAgdGhpcy5oYXNoQnVmZmVyKCk7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBUaGUgdmFsdWUgaW4gc3RhdGUgaXMgbGl0dGxlLWVuZGlhbiByYXRoZXIgdGhhbiBiaWctZW5kaWFuLCBzbyBmbGlwXG4gICAgLy8gZWFjaCB3b3JkIGludG8gYSBuZXcgVWludDhBcnJheVxuICAgIHZhciBvdXQgPSBuZXcgQnVmZmVyKERJR0VTVF9MRU5HVEgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7XG4gICAgICAgIG91dFtpICogNF0gPSAodGhpcy5zdGF0ZVtpXSA+Pj4gMjQpICYgMHhmZjtcbiAgICAgICAgb3V0W2kgKiA0ICsgMV0gPSAodGhpcy5zdGF0ZVtpXSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgb3V0W2kgKiA0ICsgMl0gPSAodGhpcy5zdGF0ZVtpXSA+Pj4gOCkgJiAweGZmO1xuICAgICAgICBvdXRbaSAqIDQgKyAzXSA9ICh0aGlzLnN0YXRlW2ldID4+PiAwKSAmIDB4ZmY7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGluZyA/IG91dC50b1N0cmluZyhlbmNvZGluZykgOiBvdXQ7XG59O1xuXG5TaGEyNTYucHJvdG90eXBlLmhhc2hCdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9hID0gdGhpcyxcbiAgICAgICAgYnVmZmVyID0gX2EuYnVmZmVyLFxuICAgICAgICBzdGF0ZSA9IF9hLnN0YXRlO1xuICAgIHZhciBzdGF0ZTAgPSBzdGF0ZVswXSxcbiAgICAgICAgc3RhdGUxID0gc3RhdGVbMV0sXG4gICAgICAgIHN0YXRlMiA9IHN0YXRlWzJdLFxuICAgICAgICBzdGF0ZTMgPSBzdGF0ZVszXSxcbiAgICAgICAgc3RhdGU0ID0gc3RhdGVbNF0sXG4gICAgICAgIHN0YXRlNSA9IHN0YXRlWzVdLFxuICAgICAgICBzdGF0ZTYgPSBzdGF0ZVs2XSxcbiAgICAgICAgc3RhdGU3ID0gc3RhdGVbN107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBCTE9DS19TSVpFOyBpKyspIHtcbiAgICAgICAgaWYgKGkgPCAxNikge1xuICAgICAgICAgICAgdGhpcy50ZW1wW2ldID0gKCgoYnVmZmVyW2kgKiA0XSAmIDB4ZmYpIDw8IDI0KSB8XG4gICAgICAgICAgICAgICAgKChidWZmZXJbKGkgKiA0KSArIDFdICYgMHhmZikgPDwgMTYpIHxcbiAgICAgICAgICAgICAgICAoKGJ1ZmZlclsoaSAqIDQpICsgMl0gJiAweGZmKSA8PCA4KSB8XG4gICAgICAgICAgICAgICAgKGJ1ZmZlclsoaSAqIDQpICsgM10gJiAweGZmKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgdSA9IHRoaXMudGVtcFtpIC0gMl07XG4gICAgICAgICAgICB2YXIgdDFfMSA9ICh1ID4+PiAxNyB8IHUgPDwgMTUpIF5cbiAgICAgICAgICAgICAgICAodSA+Pj4gMTkgfCB1IDw8IDEzKSBeXG4gICAgICAgICAgICAgICAgKHUgPj4+IDEwKTtcbiAgICAgICAgICAgIHUgPSB0aGlzLnRlbXBbaSAtIDE1XTtcbiAgICAgICAgICAgIHZhciB0Ml8xID0gKHUgPj4+IDcgfCB1IDw8IDI1KSBeXG4gICAgICAgICAgICAgICAgKHUgPj4+IDE4IHwgdSA8PCAxNCkgXlxuICAgICAgICAgICAgICAgICh1ID4+PiAzKTtcbiAgICAgICAgICAgIHRoaXMudGVtcFtpXSA9ICh0MV8xICsgdGhpcy50ZW1wW2kgLSA3XSB8IDApICtcbiAgICAgICAgICAgICAgICAodDJfMSArIHRoaXMudGVtcFtpIC0gMTZdIHwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHQxID0gKCgoKChzdGF0ZTQgPj4+IDYgfCBzdGF0ZTQgPDwgMjYpIF5cbiAgICAgICAgICAgIChzdGF0ZTQgPj4+IDExIHwgc3RhdGU0IDw8IDIxKSBeXG4gICAgICAgICAgICAoc3RhdGU0ID4+PiAyNSB8IHN0YXRlNCA8PCA3KSlcbiAgICAgICAgICAgICsgKChzdGF0ZTQgJiBzdGF0ZTUpIF4gKH5zdGF0ZTQgJiBzdGF0ZTYpKSkgfCAwKVxuICAgICAgICAgICAgKyAoKHN0YXRlNyArICgoS0VZW2ldICsgdGhpcy50ZW1wW2ldKSB8IDApKSB8IDApKSB8IDA7XG4gICAgICAgIHZhciB0MiA9ICgoKHN0YXRlMCA+Pj4gMiB8IHN0YXRlMCA8PCAzMCkgXlxuICAgICAgICAgICAgKHN0YXRlMCA+Pj4gMTMgfCBzdGF0ZTAgPDwgMTkpIF5cbiAgICAgICAgICAgIChzdGF0ZTAgPj4+IDIyIHwgc3RhdGUwIDw8IDEwKSkgKyAoKHN0YXRlMCAmIHN0YXRlMSkgXiAoc3RhdGUwICYgc3RhdGUyKSBeIChzdGF0ZTEgJiBzdGF0ZTIpKSkgfCAwO1xuICAgICAgICBzdGF0ZTcgPSBzdGF0ZTY7XG4gICAgICAgIHN0YXRlNiA9IHN0YXRlNTtcbiAgICAgICAgc3RhdGU1ID0gc3RhdGU0O1xuICAgICAgICBzdGF0ZTQgPSAoc3RhdGUzICsgdDEpIHwgMDtcbiAgICAgICAgc3RhdGUzID0gc3RhdGUyO1xuICAgICAgICBzdGF0ZTIgPSBzdGF0ZTE7XG4gICAgICAgIHN0YXRlMSA9IHN0YXRlMDtcbiAgICAgICAgc3RhdGUwID0gKHQxICsgdDIpIHwgMDtcbiAgICB9XG4gICAgc3RhdGVbMF0gKz0gc3RhdGUwO1xuICAgIHN0YXRlWzFdICs9IHN0YXRlMTtcbiAgICBzdGF0ZVsyXSArPSBzdGF0ZTI7XG4gICAgc3RhdGVbM10gKz0gc3RhdGUzO1xuICAgIHN0YXRlWzRdICs9IHN0YXRlNDtcbiAgICBzdGF0ZVs1XSArPSBzdGF0ZTU7XG4gICAgc3RhdGVbNl0gKz0gc3RhdGU2O1xuICAgIHN0YXRlWzddICs9IHN0YXRlNztcbn07XG5cbn0se1wiLi9icm93c2VySGFzaFV0aWxzXCI6MTIsXCJidWZmZXIvXCI6ODF9XSwxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuLy8gYnJvd3NlciBzcGVjaWZpYyBtb2R1bGVzXG51dGlsLmNyeXB0by5saWIgPSByZXF1aXJlKCcuL2Jyb3dzZXJDcnlwdG9MaWInKTtcbnV0aWwuQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyLycpLkJ1ZmZlcjtcbnV0aWwudXJsID0gcmVxdWlyZSgndXJsLycpO1xudXRpbC5xdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nLycpO1xudXRpbC5yZWFsQ2xvY2sgPSByZXF1aXJlKCcuL3JlYWxjbG9jay9icm93c2VyQ2xvY2snKTtcbnV0aWwuZW52aXJvbm1lbnQgPSAnanMnO1xudXRpbC5jcmVhdGVFdmVudFN0cmVhbSA9IHJlcXVpcmUoJy4vZXZlbnQtc3RyZWFtL2J1ZmZlcmVkLWNyZWF0ZS1ldmVudC1zdHJlYW0nKS5jcmVhdGVFdmVudFN0cmVhbTtcbnV0aWwuaXNCcm93c2VyID0gZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9O1xudXRpbC5pc05vZGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9O1xuXG52YXIgQVdTID0gcmVxdWlyZSgnLi9jb3JlJyk7XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gQVdTO1xuXG5yZXF1aXJlKCcuL2NyZWRlbnRpYWxzJyk7XG5yZXF1aXJlKCcuL2NyZWRlbnRpYWxzL2NyZWRlbnRpYWxfcHJvdmlkZXJfY2hhaW4nKTtcbnJlcXVpcmUoJy4vY3JlZGVudGlhbHMvdGVtcG9yYXJ5X2NyZWRlbnRpYWxzJyk7XG5yZXF1aXJlKCcuL2NyZWRlbnRpYWxzL2NoYWluYWJsZV90ZW1wb3JhcnlfY3JlZGVudGlhbHMnKTtcbnJlcXVpcmUoJy4vY3JlZGVudGlhbHMvd2ViX2lkZW50aXR5X2NyZWRlbnRpYWxzJyk7XG5yZXF1aXJlKCcuL2NyZWRlbnRpYWxzL2NvZ25pdG9faWRlbnRpdHlfY3JlZGVudGlhbHMnKTtcbnJlcXVpcmUoJy4vY3JlZGVudGlhbHMvc2FtbF9jcmVkZW50aWFscycpO1xuXG4vLyBMb2FkIHRoZSBET01QYXJzZXIgWE1MIHBhcnNlclxuQVdTLlhNTC5QYXJzZXIgPSByZXF1aXJlKCcuL3htbC9icm93c2VyX3BhcnNlcicpO1xuXG4vLyBMb2FkIHRoZSBYSFIgSHR0cENsaWVudFxucmVxdWlyZSgnLi9odHRwL3hocicpO1xuXG5pZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnKSB7XG4gIHZhciBwcm9jZXNzID0ge1xuICAgIGJyb3dzZXI6IHRydWVcbiAgfTtcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vYnJvd3NlckNyeXB0b0xpYlwiOjExLFwiLi9jb3JlXCI6MTksXCIuL2NyZWRlbnRpYWxzXCI6MjAsXCIuL2NyZWRlbnRpYWxzL2NoYWluYWJsZV90ZW1wb3JhcnlfY3JlZGVudGlhbHNcIjoyMSxcIi4vY3JlZGVudGlhbHMvY29nbml0b19pZGVudGl0eV9jcmVkZW50aWFsc1wiOjIyLFwiLi9jcmVkZW50aWFscy9jcmVkZW50aWFsX3Byb3ZpZGVyX2NoYWluXCI6MjMsXCIuL2NyZWRlbnRpYWxzL3NhbWxfY3JlZGVudGlhbHNcIjoyNCxcIi4vY3JlZGVudGlhbHMvdGVtcG9yYXJ5X2NyZWRlbnRpYWxzXCI6MjUsXCIuL2NyZWRlbnRpYWxzL3dlYl9pZGVudGl0eV9jcmVkZW50aWFsc1wiOjI2LFwiLi9ldmVudC1zdHJlYW0vYnVmZmVyZWQtY3JlYXRlLWV2ZW50LXN0cmVhbVwiOjI4LFwiLi9odHRwL3hoclwiOjM2LFwiLi9yZWFsY2xvY2svYnJvd3NlckNsb2NrXCI6NTMsXCIuL3V0aWxcIjo3MixcIi4veG1sL2Jyb3dzZXJfcGFyc2VyXCI6NzMsXCJfcHJvY2Vzc1wiOjg2LFwiYnVmZmVyL1wiOjgxLFwicXVlcnlzdHJpbmcvXCI6OTMsXCJ1cmwvXCI6OTV9XSwxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgQVdTID0gcmVxdWlyZSgnLi9jb3JlJyk7XG5yZXF1aXJlKCcuL2NyZWRlbnRpYWxzJyk7XG5yZXF1aXJlKCcuL2NyZWRlbnRpYWxzL2NyZWRlbnRpYWxfcHJvdmlkZXJfY2hhaW4nKTtcbnZhciBQcm9taXNlc0RlcGVuZGVuY3k7XG5cbi8qKlxuICogVGhlIG1haW4gY29uZmlndXJhdGlvbiBjbGFzcyB1c2VkIGJ5IGFsbCBzZXJ2aWNlIG9iamVjdHMgdG8gc2V0XG4gKiB0aGUgcmVnaW9uLCBjcmVkZW50aWFscywgYW5kIG90aGVyIG9wdGlvbnMgZm9yIHJlcXVlc3RzLlxuICpcbiAqIEJ5IGRlZmF1bHQsIGNyZWRlbnRpYWxzIGFuZCByZWdpb24gc2V0dGluZ3MgYXJlIGxlZnQgdW5jb25maWd1cmVkLlxuICogVGhpcyBzaG91bGQgYmUgY29uZmlndXJlZCBieSB0aGUgYXBwbGljYXRpb24gYmVmb3JlIHVzaW5nIGFueVxuICogQVdTIHNlcnZpY2UgQVBJcy5cbiAqXG4gKiBJbiBvcmRlciB0byBzZXQgZ2xvYmFsIGNvbmZpZ3VyYXRpb24gb3B0aW9ucywgcHJvcGVydGllcyBzaG91bGRcbiAqIGJlIGFzc2lnbmVkIHRvIHRoZSBnbG9iYWwge0FXUy5jb25maWd9IG9iamVjdC5cbiAqXG4gKiBAc2VlIEFXUy5jb25maWdcbiAqXG4gKiBAIWdyb3VwIEdlbmVyYWwgQ29uZmlndXJhdGlvbiBPcHRpb25zXG4gKlxuICogQCFhdHRyaWJ1dGUgY3JlZGVudGlhbHNcbiAqICAgQHJldHVybiBbQVdTLkNyZWRlbnRpYWxzXSB0aGUgQVdTIGNyZWRlbnRpYWxzIHRvIHNpZ24gcmVxdWVzdHMgd2l0aC5cbiAqXG4gKiBAIWF0dHJpYnV0ZSByZWdpb25cbiAqICAgQGV4YW1wbGUgU2V0IHRoZSBnbG9iYWwgcmVnaW9uIHNldHRpbmcgdG8gdXMtd2VzdC0yXG4gKiAgICAgQVdTLmNvbmZpZy51cGRhdGUoe3JlZ2lvbjogJ3VzLXdlc3QtMid9KTtcbiAqICAgQHJldHVybiBbQVdTLkNyZWRlbnRpYWxzXSBUaGUgcmVnaW9uIHRvIHNlbmQgc2VydmljZSByZXF1ZXN0cyB0by5cbiAqICAgQHNlZSBodHRwOi8vZG9jcy5hbWF6b253ZWJzZXJ2aWNlcy5jb20vZ2VuZXJhbC9sYXRlc3QvZ3IvcmFuZGUuaHRtbFxuICogICAgIEEgbGlzdCBvZiBhdmFpbGFibGUgZW5kcG9pbnRzIGZvciBlYWNoIEFXUyBzZXJ2aWNlXG4gKlxuICogQCFhdHRyaWJ1dGUgbWF4UmV0cmllc1xuICogICBAcmV0dXJuIFtJbnRlZ2VyXSB0aGUgbWF4aW11bSBhbW91bnQgb2YgcmV0cmllcyB0byBwZXJmb3JtIGZvciBhXG4gKiAgICAgc2VydmljZSByZXF1ZXN0LiBCeSBkZWZhdWx0IHRoaXMgdmFsdWUgaXMgY2FsY3VsYXRlZCBieSB0aGUgc3BlY2lmaWNcbiAqICAgICBzZXJ2aWNlIG9iamVjdCB0aGF0IHRoZSByZXF1ZXN0IGlzIGJlaW5nIG1hZGUgdG8uXG4gKlxuICogQCFhdHRyaWJ1dGUgbWF4UmVkaXJlY3RzXG4gKiAgIEByZXR1cm4gW0ludGVnZXJdIHRoZSBtYXhpbXVtIGFtb3VudCBvZiByZWRpcmVjdHMgdG8gZm9sbG93IGZvciBhXG4gKiAgICAgc2VydmljZSByZXF1ZXN0LiBEZWZhdWx0cyB0byAxMC5cbiAqXG4gKiBAIWF0dHJpYnV0ZSBwYXJhbVZhbGlkYXRpb25cbiAqICAgQHJldHVybiBbQm9vbGVhbnxtYXBdIHdoZXRoZXIgaW5wdXQgcGFyYW1ldGVycyBzaG91bGQgYmUgdmFsaWRhdGVkIGFnYWluc3RcbiAqICAgICB0aGUgb3BlcmF0aW9uIGRlc2NyaXB0aW9uIGJlZm9yZSBzZW5kaW5nIHRoZSByZXF1ZXN0LiBEZWZhdWx0cyB0byB0cnVlLlxuICogICAgIFBhc3MgYSBtYXAgdG8gZW5hYmxlIGFueSBvZiB0aGUgZm9sbG93aW5nIHNwZWNpZmljIHZhbGlkYXRpb24gZmVhdHVyZXM6XG4gKlxuICogICAgICogKiptaW4qKiBbQm9vbGVhbl0gJm1kYXNoOyBWYWxpZGF0ZXMgdGhhdCBhIHZhbHVlIG1lZXRzIHRoZSBtaW5cbiAqICAgICAgIGNvbnN0cmFpbnQuIFRoaXMgaXMgZW5hYmxlZCBieSBkZWZhdWx0IHdoZW4gcGFyYW1WYWxpZGF0aW9uIGlzIHNldFxuICogICAgICAgdG8gYHRydWVgLlxuICogICAgICogKiptYXgqKiBbQm9vbGVhbl0gJm1kYXNoOyBWYWxpZGF0ZXMgdGhhdCBhIHZhbHVlIG1lZXRzIHRoZSBtYXhcbiAqICAgICAgIGNvbnN0cmFpbnQuXG4gKiAgICAgKiAqKnBhdHRlcm4qKiBbQm9vbGVhbl0gJm1kYXNoOyBWYWxpZGF0ZXMgdGhhdCBhIHN0cmluZyB2YWx1ZSBtYXRjaGVzIGFcbiAqICAgICAgIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqICAgICAqICoqZW51bSoqIFtCb29sZWFuXSAmbWRhc2g7IFZhbGlkYXRlcyB0aGF0IGEgc3RyaW5nIHZhbHVlIG1hdGNoZXMgb25lXG4gKiAgICAgICBvZiB0aGUgYWxsb3dhYmxlIGVudW0gdmFsdWVzLlxuICpcbiAqIEAhYXR0cmlidXRlIGNvbXB1dGVDaGVja3N1bXNcbiAqICAgQHJldHVybiBbQm9vbGVhbl0gd2hldGhlciB0byBjb21wdXRlIGNoZWNrc3VtcyBmb3IgcGF5bG9hZCBib2RpZXMgd2hlblxuICogICAgIHRoZSBzZXJ2aWNlIGFjY2VwdHMgaXQgKGN1cnJlbnRseSBzdXBwb3J0ZWQgaW4gUzMgb25seSkuXG4gKlxuICogQCFhdHRyaWJ1dGUgY29udmVydFJlc3BvbnNlVHlwZXNcbiAqICAgQHJldHVybiBbQm9vbGVhbl0gd2hldGhlciB0eXBlcyBhcmUgY29udmVydGVkIHdoZW4gcGFyc2luZyByZXNwb25zZSBkYXRhLlxuICogICAgIEN1cnJlbnRseSBvbmx5IHN1cHBvcnRlZCBmb3IgSlNPTiBiYXNlZCBzZXJ2aWNlcy4gVHVybmluZyB0aGlzIG9mZiBtYXlcbiAqICAgICBpbXByb3ZlIHBlcmZvcm1hbmNlIG9uIGxhcmdlIHJlc3BvbnNlIHBheWxvYWRzLiBEZWZhdWx0cyB0byBgdHJ1ZWAuXG4gKlxuICogQCFhdHRyaWJ1dGUgY29ycmVjdENsb2NrU2tld1xuICogICBAcmV0dXJuIFtCb29sZWFuXSB3aGV0aGVyIHRvIGFwcGx5IGEgY2xvY2sgc2tldyBjb3JyZWN0aW9uIGFuZCByZXRyeVxuICogICAgIHJlcXVlc3RzIHRoYXQgZmFpbCBiZWNhdXNlIG9mIGFuIHNrZXdlZCBjbGllbnQgY2xvY2suIERlZmF1bHRzIHRvXG4gKiAgICAgYGZhbHNlYC5cbiAqXG4gKiBAIWF0dHJpYnV0ZSBzc2xFbmFibGVkXG4gKiAgIEByZXR1cm4gW0Jvb2xlYW5dIHdoZXRoZXIgU1NMIGlzIGVuYWJsZWQgZm9yIHJlcXVlc3RzXG4gKlxuICogQCFhdHRyaWJ1dGUgczNGb3JjZVBhdGhTdHlsZVxuICogICBAcmV0dXJuIFtCb29sZWFuXSB3aGV0aGVyIHRvIGZvcmNlIHBhdGggc3R5bGUgVVJMcyBmb3IgUzMgb2JqZWN0c1xuICpcbiAqIEAhYXR0cmlidXRlIHMzQnVja2V0RW5kcG9pbnRcbiAqICAgQG5vdGUgU2V0dGluZyB0aGlzIGNvbmZpZ3VyYXRpb24gb3B0aW9uIHJlcXVpcmVzIGFuIGBlbmRwb2ludGAgdG8gYmVcbiAqICAgICBwcm92aWRlZCBleHBsaWNpdGx5IHRvIHRoZSBzZXJ2aWNlIGNvbnN0cnVjdG9yLlxuICogICBAcmV0dXJuIFtCb29sZWFuXSB3aGV0aGVyIHRoZSBwcm92aWRlZCBlbmRwb2ludCBhZGRyZXNzZXMgYW4gaW5kaXZpZHVhbFxuICogICAgIGJ1Y2tldCAoZmFsc2UgaWYgaXQgYWRkcmVzc2VzIHRoZSByb290IEFQSSBlbmRwb2ludCkuXG4gKlxuICogQCFhdHRyaWJ1dGUgczNEaXNhYmxlQm9keVNpZ25pbmdcbiAqICAgQHJldHVybiBbQm9vbGVhbl0gd2hldGhlciB0byBkaXNhYmxlIFMzIGJvZHkgc2lnbmluZyB3aGVuIHVzaW5nIHNpZ25hdHVyZSB2ZXJzaW9uIGB2NGAuXG4gKiAgICAgQm9keSBzaWduaW5nIGNhbiBvbmx5IGJlIGRpc2FibGVkIHdoZW4gdXNpbmcgaHR0cHMuIERlZmF1bHRzIHRvIGB0cnVlYC5cbiAqXG4gKiBAIWF0dHJpYnV0ZSB1c2VBY2NlbGVyYXRlRW5kcG9pbnRcbiAqICAgQG5vdGUgVGhpcyBjb25maWd1cmF0aW9uIG9wdGlvbiBpcyBvbmx5IGNvbXBhdGlibGUgd2l0aCBTMyB3aGlsZSBhY2Nlc3NpbmdcbiAqICAgICBkbnMtY29tcGF0aWJsZSBidWNrZXRzLlxuICogICBAcmV0dXJuIFtCb29sZWFuXSBXaGV0aGVyIHRvIHVzZSB0aGUgQWNjZWxlcmF0ZSBlbmRwb2ludCB3aXRoIHRoZSBTMyBzZXJ2aWNlLlxuICogICAgIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gKlxuICogQCFhdHRyaWJ1dGUgcmV0cnlEZWxheU9wdGlvbnNcbiAqICAgQGV4YW1wbGUgU2V0IHRoZSBiYXNlIHJldHJ5IGRlbGF5IGZvciBhbGwgc2VydmljZXMgdG8gMzAwIG1zXG4gKiAgICAgQVdTLmNvbmZpZy51cGRhdGUoe3JldHJ5RGVsYXlPcHRpb25zOiB7YmFzZTogMzAwfX0pO1xuICogICAgIC8vIERlbGF5cyB3aXRoIG1heFJldHJpZXMgPSAzOiAzMDAsIDYwMCwgMTIwMFxuICogICBAZXhhbXBsZSBTZXQgYSBjdXN0b20gYmFja29mZiBmdW5jdGlvbiB0byBwcm92aWRlIGRlbGF5IHZhbHVlcyBvbiByZXRyaWVzXG4gKiAgICAgQVdTLmNvbmZpZy51cGRhdGUoe3JldHJ5RGVsYXlPcHRpb25zOiB7Y3VzdG9tQmFja29mZjogZnVuY3Rpb24ocmV0cnlDb3VudCkge1xuICogICAgICAgLy8gcmV0dXJucyBkZWxheSBpbiBtc1xuICogICAgIH19fSk7XG4gKiAgIEByZXR1cm4gW21hcF0gQSBzZXQgb2Ygb3B0aW9ucyB0byBjb25maWd1cmUgdGhlIHJldHJ5IGRlbGF5IG9uIHJldHJ5YWJsZSBlcnJvcnMuXG4gKiAgICAgQ3VycmVudGx5IHN1cHBvcnRlZCBvcHRpb25zIGFyZTpcbiAqXG4gKiAgICAgKiAqKmJhc2UqKiBbSW50ZWdlcl0gJm1kYXNoOyBUaGUgYmFzZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHVzZSBpbiB0aGVcbiAqICAgICAgIGV4cG9uZW50aWFsIGJhY2tvZmYgZm9yIG9wZXJhdGlvbiByZXRyaWVzLiBEZWZhdWx0cyB0byAxMDAgbXMgZm9yIGFsbCBzZXJ2aWNlcyBleGNlcHRcbiAqICAgICAgIER5bmFtb0RCLCB3aGVyZSBpdCBkZWZhdWx0cyB0byA1MG1zLlxuICogICAgICogKipjdXN0b21CYWNrb2ZmICoqIFtmdW5jdGlvbl0gJm1kYXNoOyBBIGN1c3RvbSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYSByZXRyeSBjb3VudFxuICogICAgICAgYW5kIHJldHVybnMgdGhlIGFtb3VudCBvZiB0aW1lIHRvIGRlbGF5IGluIG1pbGxpc2Vjb25kcy4gVGhlIGBiYXNlYCBvcHRpb24gd2lsbCBiZVxuICogICAgICAgaWdub3JlZCBpZiB0aGlzIG9wdGlvbiBpcyBzdXBwbGllZC5cbiAqXG4gKiBAIWF0dHJpYnV0ZSBodHRwT3B0aW9uc1xuICogICBAcmV0dXJuIFttYXBdIEEgc2V0IG9mIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgbG93LWxldmVsIEhUVFAgcmVxdWVzdC5cbiAqICAgICBDdXJyZW50bHkgc3VwcG9ydGVkIG9wdGlvbnMgYXJlOlxuICpcbiAqICAgICAqICoqcHJveHkqKiBbU3RyaW5nXSAmbWRhc2g7IHRoZSBVUkwgdG8gcHJveHkgcmVxdWVzdHMgdGhyb3VnaFxuICogICAgICogKiphZ2VudCoqIFtodHRwLkFnZW50LCBodHRwcy5BZ2VudF0gJm1kYXNoOyB0aGUgQWdlbnQgb2JqZWN0IHRvIHBlcmZvcm1cbiAqICAgICAgIEhUVFAgcmVxdWVzdHMgd2l0aC4gVXNlZCBmb3IgY29ubmVjdGlvbiBwb29saW5nLiBOb3RlIHRoYXQgZm9yXG4gKiAgICAgICBTU0wgY29ubmVjdGlvbnMsIGEgc3BlY2lhbCBBZ2VudCBvYmplY3QgaXMgdXNlZCBpbiBvcmRlciB0byBlbmFibGVcbiAqICAgICAgIHBlZXIgY2VydGlmaWNhdGUgdmVyaWZpY2F0aW9uLiBUaGlzIGZlYXR1cmUgaXMgb25seSBzdXBwb3J0ZWQgaW4gdGhlXG4gKiAgICAgICBOb2RlLmpzIGVudmlyb25tZW50LlxuICogICAgICogKipjb25uZWN0VGltZW91dCoqIFtJbnRlZ2VyXSAmbWRhc2g7IFNldHMgdGhlIHNvY2tldCB0byB0aW1lb3V0IGFmdGVyXG4gKiAgICAgICBmYWlsaW5nIHRvIGVzdGFibGlzaCBhIGNvbm5lY3Rpb24gd2l0aCB0aGUgc2VydmVyIGFmdGVyXG4gKiAgICAgICBgY29ubmVjdFRpbWVvdXRgIG1pbGxpc2Vjb25kcy4gVGhpcyB0aW1lb3V0IGhhcyBubyBlZmZlY3Qgb25jZSBhIHNvY2tldFxuICogICAgICAgY29ubmVjdGlvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZC5cbiAqICAgICAqICoqdGltZW91dCoqIFtJbnRlZ2VyXSAmbWRhc2g7IFNldHMgdGhlIHNvY2tldCB0byB0aW1lb3V0IGFmdGVyIHRpbWVvdXRcbiAqICAgICAgIG1pbGxpc2Vjb25kcyBvZiBpbmFjdGl2aXR5IG9uIHRoZSBzb2NrZXQuIERlZmF1bHRzIHRvIHR3byBtaW51dGVzXG4gKiAgICAgICAoMTIwMDAwKVxuICogICAgICogKip4aHJBc3luYyoqIFtCb29sZWFuXSAmbWRhc2g7IFdoZXRoZXIgdGhlIFNESyB3aWxsIHNlbmQgYXN5bmNocm9ub3VzXG4gKiAgICAgICBIVFRQIHJlcXVlc3RzLiBVc2VkIGluIHRoZSBicm93c2VyIGVudmlyb25tZW50IG9ubHkuIFNldCB0byBmYWxzZSB0b1xuICogICAgICAgc2VuZCByZXF1ZXN0cyBzeW5jaHJvbm91c2x5LiBEZWZhdWx0cyB0byB0cnVlIChhc3luYyBvbikuXG4gKiAgICAgKiAqKnhocldpdGhDcmVkZW50aWFscyoqIFtCb29sZWFuXSAmbWRhc2g7IFNldHMgdGhlIFwid2l0aENyZWRlbnRpYWxzXCJcbiAqICAgICAgIHByb3BlcnR5IG9mIGFuIFhNTEh0dHBSZXF1ZXN0IG9iamVjdC4gVXNlZCBpbiB0aGUgYnJvd3NlciBlbnZpcm9ubWVudFxuICogICAgICAgb25seS4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gKiBAIWF0dHJpYnV0ZSBsb2dnZXJcbiAqICAgQHJldHVybiBbI3dyaXRlLCNsb2ddIGFuIG9iamVjdCB0aGF0IHJlc3BvbmRzIHRvIC53cml0ZSgpIChsaWtlIGEgc3RyZWFtKVxuICogICAgIG9yIC5sb2coKSAobGlrZSB0aGUgY29uc29sZSBvYmplY3QpIGluIG9yZGVyIHRvIGxvZyBpbmZvcm1hdGlvbiBhYm91dFxuICogICAgIHJlcXVlc3RzXG4gKlxuICogQCFhdHRyaWJ1dGUgc3lzdGVtQ2xvY2tPZmZzZXRcbiAqICAgQHJldHVybiBbTnVtYmVyXSBhbiBvZmZzZXQgdmFsdWUgaW4gbWlsbGlzZWNvbmRzIHRvIGFwcGx5IHRvIGFsbCBzaWduaW5nXG4gKiAgICAgdGltZXMuIFVzZSB0aGlzIHRvIGNvbXBlbnNhdGUgZm9yIGNsb2NrIHNrZXcgd2hlbiB5b3VyIHN5c3RlbSBtYXkgYmVcbiAqICAgICBvdXQgb2Ygc3luYyB3aXRoIHRoZSBzZXJ2aWNlIHRpbWUuIE5vdGUgdGhhdCB0aGlzIGNvbmZpZ3VyYXRpb24gb3B0aW9uXG4gKiAgICAgY2FuIG9ubHkgYmUgYXBwbGllZCB0byB0aGUgZ2xvYmFsIGBBV1MuY29uZmlnYCBvYmplY3QgYW5kIGNhbm5vdCBiZVxuICogICAgIG92ZXJyaWRkZW4gaW4gc2VydmljZS1zcGVjaWZpYyBjb25maWd1cmF0aW9uLiBEZWZhdWx0cyB0byAwIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAIWF0dHJpYnV0ZSBzaWduYXR1cmVWZXJzaW9uXG4gKiAgIEByZXR1cm4gW1N0cmluZ10gdGhlIHNpZ25hdHVyZSB2ZXJzaW9uIHRvIHNpZ24gcmVxdWVzdHMgd2l0aCAob3ZlcnJpZGluZ1xuICogICAgIHRoZSBBUEkgY29uZmlndXJhdGlvbikuIFBvc3NpYmxlIHZhbHVlcyBhcmU6ICd2MicsICd2MycsICd2NCcuXG4gKlxuICogQCFhdHRyaWJ1dGUgc2lnbmF0dXJlQ2FjaGVcbiAqICAgQHJldHVybiBbQm9vbGVhbl0gd2hldGhlciB0aGUgc2lnbmF0dXJlIHRvIHNpZ24gcmVxdWVzdHMgd2l0aCAob3ZlcnJpZGluZ1xuICogICAgIHRoZSBBUEkgY29uZmlndXJhdGlvbikgaXMgY2FjaGVkLiBPbmx5IGFwcGxpZXMgdG8gdGhlIHNpZ25hdHVyZSB2ZXJzaW9uICd2NCcuXG4gKiAgICAgRGVmYXVsdHMgdG8gYHRydWVgLlxuICpcbiAqIEAhYXR0cmlidXRlIGVuZHBvaW50RGlzY292ZXJ5RW5hYmxlZFxuICogICBAcmV0dXJuIFtCb29sZWFuXSB3aGV0aGVyIHRvIGVuYWJsZSBlbmRwb2ludCBkaXNjb3ZlcnkgZm9yIG9wZXJhdGlvbnMgdGhhdFxuICogICAgIGFsbG93IG9wdGlvbmFsbHkgdXNpbmcgYW4gZW5kcG9pbnQgcmV0dXJuZWQgYnkgdGhlIHNlcnZpY2UuXG4gKiAgICAgRGVmYXVsdHMgdG8gJ2ZhbHNlJ1xuICpcbiAqIEAhYXR0cmlidXRlIGVuZHBvaW50Q2FjaGVTaXplXG4gKiAgIEByZXR1cm4gW051bWJlcl0gdGhlIHNpemUgb2YgdGhlIGdsb2JhbCBjYWNoZSBzdG9yaW5nIGVuZHBvaW50cyBmcm9tIGVuZHBvaW50XG4gKiAgICAgZGlzY292ZXJ5IG9wZXJhdGlvbnMuIE9uY2UgZW5kcG9pbnQgY2FjaGUgaXMgY3JlYXRlZCwgdXBkYXRpbmcgdGhpcyBzZXR0aW5nXG4gKiAgICAgY2Fubm90IGNoYW5nZSBleGlzdGluZyBjYWNoZSBzaXplLlxuICogICAgIERlZmF1bHRzIHRvIDEwMDBcbiAqXG4gKiBAIWF0dHJpYnV0ZSBob3N0UHJlZml4RW5hYmxlZFxuICogICBAcmV0dXJuIFtCb29sZWFuXSB3aGV0aGVyIHRvIG1hcnNoYWwgcmVxdWVzdCBwYXJhbWV0ZXJzIHRvIHRoZSBwcmVmaXggb2ZcbiAqICAgICBob3N0bmFtZS4gRGVmYXVsdHMgdG8gYHRydWVgLlxuICpcbiAqIEAhYXR0cmlidXRlIHN0c1JlZ2lvbmFsRW5kcG9pbnRzXG4gKiAgIEByZXR1cm4gWydsZWdhY3knfCdyZWdpb25hbCddIHdoZXRoZXIgdG8gc2VuZCBzdHMgcmVxdWVzdCB0byBnbG9iYWwgZW5kcG9pbnRzIG9yXG4gKiAgICAgcmVnaW9uYWwgZW5kcG9pbnRzLlxuICogICAgIERlZmF1bHRzIHRvICdsZWdhY3knXG4gKi9cbkFXUy5Db25maWcgPSBBV1MudXRpbC5pbmhlcml0KHtcbiAgLyoqXG4gICAqIEAhZW5kZ3JvdXBcbiAgICovXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgY29uZmlndXJhdGlvbiBvYmplY3QuIFRoaXMgaXMgdGhlIG9iamVjdCB0aGF0IHBhc3Nlc1xuICAgKiBvcHRpb24gZGF0YSBhbG9uZyB0byBzZXJ2aWNlIHJlcXVlc3RzLCBpbmNsdWRpbmcgY3JlZGVudGlhbHMsIHNlY3VyaXR5LFxuICAgKiByZWdpb24gaW5mb3JtYXRpb24sIGFuZCBzb21lIHNlcnZpY2Ugc3BlY2lmaWMgc2V0dGluZ3MuXG4gICAqXG4gICAqIEBleGFtcGxlIENyZWF0aW5nIGEgbmV3IGNvbmZpZ3VyYXRpb24gb2JqZWN0IHdpdGggY3JlZGVudGlhbHMgYW5kIHJlZ2lvblxuICAgKiAgIHZhciBjb25maWcgPSBuZXcgQVdTLkNvbmZpZyh7XG4gICAqICAgICBhY2Nlc3NLZXlJZDogJ0FLSUQnLCBzZWNyZXRBY2Nlc3NLZXk6ICdTRUNSRVQnLCByZWdpb246ICd1cy13ZXN0LTInXG4gICAqICAgfSk7XG4gICAqIEBvcHRpb24gb3B0aW9ucyBhY2Nlc3NLZXlJZCBbU3RyaW5nXSB5b3VyIEFXUyBhY2Nlc3Mga2V5IElELlxuICAgKiBAb3B0aW9uIG9wdGlvbnMgc2VjcmV0QWNjZXNzS2V5IFtTdHJpbmddIHlvdXIgQVdTIHNlY3JldCBhY2Nlc3Mga2V5LlxuICAgKiBAb3B0aW9uIG9wdGlvbnMgc2Vzc2lvblRva2VuIFtBV1MuQ3JlZGVudGlhbHNdIHRoZSBvcHRpb25hbCBBV1NcbiAgICogICBzZXNzaW9uIHRva2VuIHRvIHNpZ24gcmVxdWVzdHMgd2l0aC5cbiAgICogQG9wdGlvbiBvcHRpb25zIGNyZWRlbnRpYWxzIFtBV1MuQ3JlZGVudGlhbHNdIHRoZSBBV1MgY3JlZGVudGlhbHNcbiAgICogICB0byBzaWduIHJlcXVlc3RzIHdpdGguIFlvdSBjYW4gZWl0aGVyIHNwZWNpZnkgdGhpcyBvYmplY3QsIG9yXG4gICAqICAgc3BlY2lmeSB0aGUgYWNjZXNzS2V5SWQgYW5kIHNlY3JldEFjY2Vzc0tleSBvcHRpb25zIGRpcmVjdGx5LlxuICAgKiBAb3B0aW9uIG9wdGlvbnMgY3JlZGVudGlhbFByb3ZpZGVyIFtBV1MuQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW5dIHRoZVxuICAgKiAgIHByb3ZpZGVyIGNoYWluIHVzZWQgdG8gcmVzb2x2ZSBjcmVkZW50aWFscyBpZiBubyBzdGF0aWMgYGNyZWRlbnRpYWxzYFxuICAgKiAgIHByb3BlcnR5IGlzIHNldC5cbiAgICogQG9wdGlvbiBvcHRpb25zIHJlZ2lvbiBbU3RyaW5nXSB0aGUgcmVnaW9uIHRvIHNlbmQgc2VydmljZSByZXF1ZXN0cyB0by5cbiAgICogICBTZWUge3JlZ2lvbn0gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqIEBvcHRpb24gb3B0aW9ucyBtYXhSZXRyaWVzIFtJbnRlZ2VyXSB0aGUgbWF4aW11bSBhbW91bnQgb2YgcmV0cmllcyB0b1xuICAgKiAgIGF0dGVtcHQgd2l0aCBhIHJlcXVlc3QuIFNlZSB7bWF4UmV0cmllc30gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqIEBvcHRpb24gb3B0aW9ucyBtYXhSZWRpcmVjdHMgW0ludGVnZXJdIHRoZSBtYXhpbXVtIGFtb3VudCBvZiByZWRpcmVjdHMgdG9cbiAgICogICBmb2xsb3cgd2l0aCBhIHJlcXVlc3QuIFNlZSB7bWF4UmVkaXJlY3RzfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICogQG9wdGlvbiBvcHRpb25zIHNzbEVuYWJsZWQgW0Jvb2xlYW5dIHdoZXRoZXIgdG8gZW5hYmxlIFNTTCBmb3JcbiAgICogICByZXF1ZXN0cy5cbiAgICogQG9wdGlvbiBvcHRpb25zIHBhcmFtVmFsaWRhdGlvbiBbQm9vbGVhbnxtYXBdIHdoZXRoZXIgaW5wdXQgcGFyYW1ldGVyc1xuICAgKiAgIHNob3VsZCBiZSB2YWxpZGF0ZWQgYWdhaW5zdCB0aGUgb3BlcmF0aW9uIGRlc2NyaXB0aW9uIGJlZm9yZSBzZW5kaW5nXG4gICAqICAgdGhlIHJlcXVlc3QuIERlZmF1bHRzIHRvIHRydWUuIFBhc3MgYSBtYXAgdG8gZW5hYmxlIGFueSBvZiB0aGVcbiAgICogICBmb2xsb3dpbmcgc3BlY2lmaWMgdmFsaWRhdGlvbiBmZWF0dXJlczpcbiAgICpcbiAgICogICAqICoqbWluKiogW0Jvb2xlYW5dICZtZGFzaDsgVmFsaWRhdGVzIHRoYXQgYSB2YWx1ZSBtZWV0cyB0aGUgbWluXG4gICAqICAgICBjb25zdHJhaW50LiBUaGlzIGlzIGVuYWJsZWQgYnkgZGVmYXVsdCB3aGVuIHBhcmFtVmFsaWRhdGlvbiBpcyBzZXRcbiAgICogICAgIHRvIGB0cnVlYC5cbiAgICogICAqICoqbWF4KiogW0Jvb2xlYW5dICZtZGFzaDsgVmFsaWRhdGVzIHRoYXQgYSB2YWx1ZSBtZWV0cyB0aGUgbWF4XG4gICAqICAgICBjb25zdHJhaW50LlxuICAgKiAgICogKipwYXR0ZXJuKiogW0Jvb2xlYW5dICZtZGFzaDsgVmFsaWRhdGVzIHRoYXQgYSBzdHJpbmcgdmFsdWUgbWF0Y2hlcyBhXG4gICAqICAgICByZWd1bGFyIGV4cHJlc3Npb24uXG4gICAqICAgKiAqKmVudW0qKiBbQm9vbGVhbl0gJm1kYXNoOyBWYWxpZGF0ZXMgdGhhdCBhIHN0cmluZyB2YWx1ZSBtYXRjaGVzIG9uZVxuICAgKiAgICAgb2YgdGhlIGFsbG93YWJsZSBlbnVtIHZhbHVlcy5cbiAgICogQG9wdGlvbiBvcHRpb25zIGNvbXB1dGVDaGVja3N1bXMgW0Jvb2xlYW5dIHdoZXRoZXIgdG8gY29tcHV0ZSBjaGVja3N1bXNcbiAgICogICBmb3IgcGF5bG9hZCBib2RpZXMgd2hlbiB0aGUgc2VydmljZSBhY2NlcHRzIGl0IChjdXJyZW50bHkgc3VwcG9ydGVkXG4gICAqICAgaW4gUzMgb25seSlcbiAgICogQG9wdGlvbiBvcHRpb25zIGNvbnZlcnRSZXNwb25zZVR5cGVzIFtCb29sZWFuXSB3aGV0aGVyIHR5cGVzIGFyZSBjb252ZXJ0ZWRcbiAgICogICAgIHdoZW4gcGFyc2luZyByZXNwb25zZSBkYXRhLiBDdXJyZW50bHkgb25seSBzdXBwb3J0ZWQgZm9yIEpTT04gYmFzZWRcbiAgICogICAgIHNlcnZpY2VzLiBUdXJuaW5nIHRoaXMgb2ZmIG1heSBpbXByb3ZlIHBlcmZvcm1hbmNlIG9uIGxhcmdlIHJlc3BvbnNlXG4gICAqICAgICBwYXlsb2Fkcy4gRGVmYXVsdHMgdG8gYHRydWVgLlxuICAgKiBAb3B0aW9uIG9wdGlvbnMgY29ycmVjdENsb2NrU2tldyBbQm9vbGVhbl0gd2hldGhlciB0byBhcHBseSBhIGNsb2NrIHNrZXdcbiAgICogICAgIGNvcnJlY3Rpb24gYW5kIHJldHJ5IHJlcXVlc3RzIHRoYXQgZmFpbCBiZWNhdXNlIG9mIGFuIHNrZXdlZCBjbGllbnRcbiAgICogICAgIGNsb2NrLiBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICAgKiBAb3B0aW9uIG9wdGlvbnMgczNGb3JjZVBhdGhTdHlsZSBbQm9vbGVhbl0gd2hldGhlciB0byBmb3JjZSBwYXRoXG4gICAqICAgc3R5bGUgVVJMcyBmb3IgUzMgb2JqZWN0cy5cbiAgICogQG9wdGlvbiBvcHRpb25zIHMzQnVja2V0RW5kcG9pbnQgW0Jvb2xlYW5dIHdoZXRoZXIgdGhlIHByb3ZpZGVkIGVuZHBvaW50XG4gICAqICAgYWRkcmVzc2VzIGFuIGluZGl2aWR1YWwgYnVja2V0IChmYWxzZSBpZiBpdCBhZGRyZXNzZXMgdGhlIHJvb3QgQVBJXG4gICAqICAgZW5kcG9pbnQpLiBOb3RlIHRoYXQgc2V0dGluZyB0aGlzIGNvbmZpZ3VyYXRpb24gb3B0aW9uIHJlcXVpcmVzIGFuXG4gICAqICAgYGVuZHBvaW50YCB0byBiZSBwcm92aWRlZCBleHBsaWNpdGx5IHRvIHRoZSBzZXJ2aWNlIGNvbnN0cnVjdG9yLlxuICAgKiBAb3B0aW9uIG9wdGlvbnMgczNEaXNhYmxlQm9keVNpZ25pbmcgW0Jvb2xlYW5dIHdoZXRoZXIgUzMgYm9keSBzaWduaW5nXG4gICAqICAgc2hvdWxkIGJlIGRpc2FibGVkIHdoZW4gdXNpbmcgc2lnbmF0dXJlIHZlcnNpb24gYHY0YC4gQm9keSBzaWduaW5nXG4gICAqICAgY2FuIG9ubHkgYmUgZGlzYWJsZWQgd2hlbiB1c2luZyBodHRwcy4gRGVmYXVsdHMgdG8gYHRydWVgLlxuICAgKlxuICAgKiBAb3B0aW9uIG9wdGlvbnMgcmV0cnlEZWxheU9wdGlvbnMgW21hcF0gQSBzZXQgb2Ygb3B0aW9ucyB0byBjb25maWd1cmVcbiAgICogICB0aGUgcmV0cnkgZGVsYXkgb24gcmV0cnlhYmxlIGVycm9ycy4gQ3VycmVudGx5IHN1cHBvcnRlZCBvcHRpb25zIGFyZTpcbiAgICpcbiAgICogICAqICoqYmFzZSoqIFtJbnRlZ2VyXSAmbWRhc2g7IFRoZSBiYXNlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdXNlIGluIHRoZVxuICAgKiAgICAgZXhwb25lbnRpYWwgYmFja29mZiBmb3Igb3BlcmF0aW9uIHJldHJpZXMuIERlZmF1bHRzIHRvIDEwMCBtcyBmb3IgYWxsXG4gICAqICAgICBzZXJ2aWNlcyBleGNlcHQgRHluYW1vREIsIHdoZXJlIGl0IGRlZmF1bHRzIHRvIDUwbXMuXG4gICAqICAgKiAqKmN1c3RvbUJhY2tvZmYgKiogW2Z1bmN0aW9uXSAmbWRhc2g7IEEgY3VzdG9tIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhIHJldHJ5IGNvdW50XG4gICAqICAgICBhbmQgcmV0dXJucyB0aGUgYW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgaW4gbWlsbGlzZWNvbmRzLiBUaGUgYGJhc2VgIG9wdGlvbiB3aWxsIGJlXG4gICAqICAgICBpZ25vcmVkIGlmIHRoaXMgb3B0aW9uIGlzIHN1cHBsaWVkLlxuICAgKiBAb3B0aW9uIG9wdGlvbnMgaHR0cE9wdGlvbnMgW21hcF0gQSBzZXQgb2Ygb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBsb3ctbGV2ZWxcbiAgICogICBIVFRQIHJlcXVlc3QuIEN1cnJlbnRseSBzdXBwb3J0ZWQgb3B0aW9ucyBhcmU6XG4gICAqXG4gICAqICAgKiAqKnByb3h5KiogW1N0cmluZ10gJm1kYXNoOyB0aGUgVVJMIHRvIHByb3h5IHJlcXVlc3RzIHRocm91Z2hcbiAgICogICAqICoqYWdlbnQqKiBbaHR0cC5BZ2VudCwgaHR0cHMuQWdlbnRdICZtZGFzaDsgdGhlIEFnZW50IG9iamVjdCB0byBwZXJmb3JtXG4gICAqICAgICBIVFRQIHJlcXVlc3RzIHdpdGguIFVzZWQgZm9yIGNvbm5lY3Rpb24gcG9vbGluZy4gRGVmYXVsdHMgdG8gdGhlIGdsb2JhbFxuICAgKiAgICAgYWdlbnQgKGBodHRwLmdsb2JhbEFnZW50YCkgZm9yIG5vbi1TU0wgY29ubmVjdGlvbnMuIE5vdGUgdGhhdCBmb3JcbiAgICogICAgIFNTTCBjb25uZWN0aW9ucywgYSBzcGVjaWFsIEFnZW50IG9iamVjdCBpcyB1c2VkIGluIG9yZGVyIHRvIGVuYWJsZVxuICAgKiAgICAgcGVlciBjZXJ0aWZpY2F0ZSB2ZXJpZmljYXRpb24uIFRoaXMgZmVhdHVyZSBpcyBvbmx5IGF2YWlsYWJsZSBpbiB0aGVcbiAgICogICAgIE5vZGUuanMgZW52aXJvbm1lbnQuXG4gICAqICAgKiAqKmNvbm5lY3RUaW1lb3V0KiogW0ludGVnZXJdICZtZGFzaDsgU2V0cyB0aGUgc29ja2V0IHRvIHRpbWVvdXQgYWZ0ZXJcbiAgICogICAgIGZhaWxpbmcgdG8gZXN0YWJsaXNoIGEgY29ubmVjdGlvbiB3aXRoIHRoZSBzZXJ2ZXIgYWZ0ZXJcbiAgICogICAgIGBjb25uZWN0VGltZW91dGAgbWlsbGlzZWNvbmRzLiBUaGlzIHRpbWVvdXQgaGFzIG5vIGVmZmVjdCBvbmNlIGEgc29ja2V0XG4gICAqICAgICBjb25uZWN0aW9uIGhhcyBiZWVuIGVzdGFibGlzaGVkLlxuICAgKiAgICogKip0aW1lb3V0KiogW0ludGVnZXJdICZtZGFzaDsgU2V0cyB0aGUgc29ja2V0IHRvIHRpbWVvdXQgYWZ0ZXIgdGltZW91dFxuICAgKiAgICAgbWlsbGlzZWNvbmRzIG9mIGluYWN0aXZpdHkgb24gdGhlIHNvY2tldC4gRGVmYXVsdHMgdG8gdHdvIG1pbnV0ZXNcbiAgICogICAgICgxMjAwMDApLlxuICAgKiAgICogKip4aHJBc3luYyoqIFtCb29sZWFuXSAmbWRhc2g7IFdoZXRoZXIgdGhlIFNESyB3aWxsIHNlbmQgYXN5bmNocm9ub3VzXG4gICAqICAgICBIVFRQIHJlcXVlc3RzLiBVc2VkIGluIHRoZSBicm93c2VyIGVudmlyb25tZW50IG9ubHkuIFNldCB0byBmYWxzZSB0b1xuICAgKiAgICAgc2VuZCByZXF1ZXN0cyBzeW5jaHJvbm91c2x5LiBEZWZhdWx0cyB0byB0cnVlIChhc3luYyBvbikuXG4gICAqICAgKiAqKnhocldpdGhDcmVkZW50aWFscyoqIFtCb29sZWFuXSAmbWRhc2g7IFNldHMgdGhlIFwid2l0aENyZWRlbnRpYWxzXCJcbiAgICogICAgIHByb3BlcnR5IG9mIGFuIFhNTEh0dHBSZXF1ZXN0IG9iamVjdC4gVXNlZCBpbiB0aGUgYnJvd3NlciBlbnZpcm9ubWVudFxuICAgKiAgICAgb25seS4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAqIEBvcHRpb24gb3B0aW9ucyBhcGlWZXJzaW9uIFtTdHJpbmcsIERhdGVdIGEgU3RyaW5nIGluIFlZWVktTU0tREQgZm9ybWF0XG4gICAqICAgKG9yIGEgZGF0ZSkgdGhhdCByZXByZXNlbnRzIHRoZSBsYXRlc3QgcG9zc2libGUgQVBJIHZlcnNpb24gdGhhdCBjYW4gYmVcbiAgICogICB1c2VkIGluIGFsbCBzZXJ2aWNlcyAodW5sZXNzIG92ZXJyaWRkZW4gYnkgYGFwaVZlcnNpb25zYCkuIFNwZWNpZnlcbiAgICogICAnbGF0ZXN0JyB0byB1c2UgdGhlIGxhdGVzdCBwb3NzaWJsZSB2ZXJzaW9uLlxuICAgKiBAb3B0aW9uIG9wdGlvbnMgYXBpVmVyc2lvbnMgW21hcDxTdHJpbmcsIFN0cmluZ3xEYXRlPl0gYSBtYXAgb2Ygc2VydmljZVxuICAgKiAgIGlkZW50aWZpZXJzICh0aGUgbG93ZXJjYXNlIHNlcnZpY2UgY2xhc3MgbmFtZSkgd2l0aCB0aGUgQVBJIHZlcnNpb24gdG9cbiAgICogICB1c2Ugd2hlbiBpbnN0YW50aWF0aW5nIGEgc2VydmljZS4gU3BlY2lmeSAnbGF0ZXN0JyBmb3IgZWFjaCBpbmRpdmlkdWFsXG4gICAqICAgdGhhdCBjYW4gdXNlIHRoZSBsYXRlc3QgYXZhaWxhYmxlIHZlcnNpb24uXG4gICAqIEBvcHRpb24gb3B0aW9ucyBsb2dnZXIgWyN3cml0ZSwjbG9nXSBhbiBvYmplY3QgdGhhdCByZXNwb25kcyB0byAud3JpdGUoKVxuICAgKiAgIChsaWtlIGEgc3RyZWFtKSBvciAubG9nKCkgKGxpa2UgdGhlIGNvbnNvbGUgb2JqZWN0KSBpbiBvcmRlciB0byBsb2dcbiAgICogICBpbmZvcm1hdGlvbiBhYm91dCByZXF1ZXN0c1xuICAgKiBAb3B0aW9uIG9wdGlvbnMgc3lzdGVtQ2xvY2tPZmZzZXQgW051bWJlcl0gYW4gb2Zmc2V0IHZhbHVlIGluIG1pbGxpc2Vjb25kc1xuICAgKiAgIHRvIGFwcGx5IHRvIGFsbCBzaWduaW5nIHRpbWVzLiBVc2UgdGhpcyB0byBjb21wZW5zYXRlIGZvciBjbG9jayBza2V3XG4gICAqICAgd2hlbiB5b3VyIHN5c3RlbSBtYXkgYmUgb3V0IG9mIHN5bmMgd2l0aCB0aGUgc2VydmljZSB0aW1lLiBOb3RlIHRoYXRcbiAgICogICB0aGlzIGNvbmZpZ3VyYXRpb24gb3B0aW9uIGNhbiBvbmx5IGJlIGFwcGxpZWQgdG8gdGhlIGdsb2JhbCBgQVdTLmNvbmZpZ2BcbiAgICogICBvYmplY3QgYW5kIGNhbm5vdCBiZSBvdmVycmlkZGVuIGluIHNlcnZpY2Utc3BlY2lmaWMgY29uZmlndXJhdGlvbi5cbiAgICogICBEZWZhdWx0cyB0byAwIG1pbGxpc2Vjb25kcy5cbiAgICogQG9wdGlvbiBvcHRpb25zIHNpZ25hdHVyZVZlcnNpb24gW1N0cmluZ10gdGhlIHNpZ25hdHVyZSB2ZXJzaW9uIHRvIHNpZ25cbiAgICogICByZXF1ZXN0cyB3aXRoIChvdmVycmlkaW5nIHRoZSBBUEkgY29uZmlndXJhdGlvbikuIFBvc3NpYmxlIHZhbHVlcyBhcmU6XG4gICAqICAgJ3YyJywgJ3YzJywgJ3Y0Jy5cbiAgICogQG9wdGlvbiBvcHRpb25zIHNpZ25hdHVyZUNhY2hlIFtCb29sZWFuXSB3aGV0aGVyIHRoZSBzaWduYXR1cmUgdG8gc2lnblxuICAgKiAgIHJlcXVlc3RzIHdpdGggKG92ZXJyaWRpbmcgdGhlIEFQSSBjb25maWd1cmF0aW9uKSBpcyBjYWNoZWQuIE9ubHkgYXBwbGllc1xuICAgKiAgIHRvIHRoZSBzaWduYXR1cmUgdmVyc2lvbiAndjQnLiBEZWZhdWx0cyB0byBgdHJ1ZWAuXG4gICAqIEBvcHRpb24gb3B0aW9ucyBkeW5hbW9EYkNyYzMyIFtCb29sZWFuXSB3aGV0aGVyIHRvIHZhbGlkYXRlIHRoZSBDUkMzMlxuICAgKiAgIGNoZWNrc3VtIG9mIEhUVFAgcmVzcG9uc2UgYm9kaWVzIHJldHVybmVkIGJ5IER5bmFtb0RCLiBEZWZhdWx0OiBgdHJ1ZWAuXG4gICAqIEBvcHRpb24gb3B0aW9ucyB1c2VBY2NlbGVyYXRlRW5kcG9pbnQgW0Jvb2xlYW5dIFdoZXRoZXIgdG8gdXNlIHRoZVxuICAgKiAgIFMzIFRyYW5zZmVyIEFjY2VsZXJhdGlvbiBlbmRwb2ludCB3aXRoIHRoZSBTMyBzZXJ2aWNlLiBEZWZhdWx0OiBgZmFsc2VgLlxuICAgKiBAb3B0aW9uIG9wdGlvbnMgY2xpZW50U2lkZU1vbml0b3JpbmcgW0Jvb2xlYW5dIHdoZXRoZXIgdG8gY29sbGVjdCBhbmRcbiAgICogICBwdWJsaXNoIHRoaXMgY2xpZW50J3MgcGVyZm9ybWFuY2UgbWV0cmljcyBvZiBhbGwgaXRzIEFQSSByZXF1ZXN0cy5cbiAgICogQG9wdGlvbiBvcHRpb25zIGVuZHBvaW50RGlzY292ZXJ5RW5hYmxlZCBbQm9vbGVhbl0gd2hldGhlciB0byBlbmFibGUgZW5kcG9pbnRcbiAgICogICBkaXNjb3ZlcnkgZm9yIG9wZXJhdGlvbnMgdGhhdCBhbGxvdyBvcHRpb25hbGx5IHVzaW5nIGFuIGVuZHBvaW50IHJldHVybmVkIGJ5XG4gICAqICAgdGhlIHNlcnZpY2UuXG4gICAqICAgRGVmYXVsdHMgdG8gJ2ZhbHNlJ1xuICAgKiBAb3B0aW9uIG9wdGlvbnMgZW5kcG9pbnRDYWNoZVNpemUgW051bWJlcl0gdGhlIHNpemUgb2YgdGhlIGdsb2JhbCBjYWNoZSBzdG9yaW5nXG4gICAqICAgZW5kcG9pbnRzIGZyb20gZW5kcG9pbnQgZGlzY292ZXJ5IG9wZXJhdGlvbnMuIE9uY2UgZW5kcG9pbnQgY2FjaGUgaXMgY3JlYXRlZCxcbiAgICogICB1cGRhdGluZyB0aGlzIHNldHRpbmcgY2Fubm90IGNoYW5nZSBleGlzdGluZyBjYWNoZSBzaXplLlxuICAgKiAgIERlZmF1bHRzIHRvIDEwMDBcbiAgICogQG9wdGlvbiBvcHRpb25zIGhvc3RQcmVmaXhFbmFibGVkIFtCb29sZWFuXSB3aGV0aGVyIHRvIG1hcnNoYWwgcmVxdWVzdFxuICAgKiAgIHBhcmFtZXRlcnMgdG8gdGhlIHByZWZpeCBvZiBob3N0bmFtZS5cbiAgICogICBEZWZhdWx0cyB0byBgdHJ1ZWAuXG4gICAqIEBvcHRpb24gb3B0aW9ucyBzdHNSZWdpb25hbEVuZHBvaW50cyBbJ2xlZ2FjeSd8J3JlZ2lvbmFsJ10gd2hldGhlciB0byBzZW5kIHN0cyByZXF1ZXN0XG4gICAqICAgdG8gZ2xvYmFsIGVuZHBvaW50cyBvciByZWdpb25hbCBlbmRwb2ludHMuXG4gICAqICAgRGVmYXVsdHMgdG8gJ2xlZ2FjeScuXG4gICAqL1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gQ29uZmlnKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSBvcHRpb25zID0ge307XG4gICAgb3B0aW9ucyA9IHRoaXMuZXh0cmFjdENyZWRlbnRpYWxzKG9wdGlvbnMpO1xuXG4gICAgQVdTLnV0aWwuZWFjaC5jYWxsKHRoaXMsIHRoaXMua2V5cywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0KGtleSwgb3B0aW9uc1trZXldLCB2YWx1ZSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEAhZ3JvdXAgTWFuYWdpbmcgQ3JlZGVudGlhbHNcbiAgICovXG5cbiAgLyoqXG4gICAqIExvYWRzIGNyZWRlbnRpYWxzIGZyb20gdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LiBUaGlzIGlzIHVzZWQgaW50ZXJuYWxseVxuICAgKiBieSB0aGUgU0RLIHRvIGVuc3VyZSB0aGF0IHJlZnJlc2hhYmxlIHtDcmVkZW50aWFsc30gb2JqZWN0cyBhcmUgcHJvcGVybHlcbiAgICogcmVmcmVzaGVkIGFuZCBsb2FkZWQgd2hlbiBzZW5kaW5nIGEgcmVxdWVzdC4gSWYgeW91IHdhbnQgdG8gZW5zdXJlIHRoYXRcbiAgICogeW91ciBjcmVkZW50aWFscyBhcmUgbG9hZGVkIHByaW9yIHRvIGEgcmVxdWVzdCwgeW91IGNhbiB1c2UgdGhpcyBtZXRob2RcbiAgICogZGlyZWN0bHkgdG8gcHJvdmlkZSBhY2N1cmF0ZSBjcmVkZW50aWFsIGRhdGEgc3RvcmVkIGluIHRoZSBvYmplY3QuXG4gICAqXG4gICAqIEBub3RlIElmIHlvdSBjb25maWd1cmUgdGhlIFNESyB3aXRoIHN0YXRpYyBvciBlbnZpcm9ubWVudCBjcmVkZW50aWFscyxcbiAgICogICB0aGUgY3JlZGVudGlhbCBkYXRhIHNob3VsZCBhbHJlYWR5IGJlIHByZXNlbnQgaW4ge2NyZWRlbnRpYWxzfSBhdHRyaWJ1dGUuXG4gICAqICAgVGhpcyBtZXRob2QgaXMgcHJpbWFyaWx5IG5lY2Vzc2FyeSB0byBsb2FkIGNyZWRlbnRpYWxzIGZyb20gYXN5bmNocm9ub3VzXG4gICAqICAgc291cmNlcywgb3Igc291cmNlcyB0aGF0IGNhbiByZWZyZXNoIGNyZWRlbnRpYWxzIHBlcmlvZGljYWxseS5cbiAgICogQGV4YW1wbGUgR2V0dGluZyB5b3VyIGFjY2VzcyBrZXlcbiAgICogICBBV1MuY29uZmlnLmdldENyZWRlbnRpYWxzKGZ1bmN0aW9uKGVycikge1xuICAgKiAgICAgaWYgKGVycikgY29uc29sZS5sb2coZXJyLnN0YWNrKTsgLy8gY3JlZGVudGlhbHMgbm90IGxvYWRlZFxuICAgKiAgICAgZWxzZSBjb25zb2xlLmxvZyhcIkFjY2VzcyBLZXk6XCIsIEFXUy5jb25maWcuY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQpO1xuICAgKiAgIH0pXG4gICAqIEBjYWxsYmFjayBjYWxsYmFjayBmdW5jdGlvbihlcnIpXG4gICAqICAgQ2FsbGVkIHdoZW4gdGhlIHtjcmVkZW50aWFsc30gaGF2ZSBiZWVuIHByb3Blcmx5IHNldCBvbiB0aGUgY29uZmlndXJhdGlvblxuICAgKiAgIG9iamVjdC5cbiAgICpcbiAgICogICBAcGFyYW0gZXJyIFtFcnJvcl0gaWYgdGhpcyBpcyBzZXQsIGNyZWRlbnRpYWxzIHdlcmUgbm90IHN1Y2Nlc3NmdWxseVxuICAgKiAgICAgbG9hZGVkIGFuZCB0aGlzIGVycm9yIHByb3ZpZGVzIGluZm9ybWF0aW9uIHdoeS5cbiAgICogQHNlZSBjcmVkZW50aWFsc1xuICAgKiBAc2VlIENyZWRlbnRpYWxzXG4gICAqL1xuICBnZXRDcmVkZW50aWFsczogZnVuY3Rpb24gZ2V0Q3JlZGVudGlhbHMoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBmaW5pc2goZXJyKSB7XG4gICAgICBjYWxsYmFjayhlcnIsIGVyciA/IG51bGwgOiBzZWxmLmNyZWRlbnRpYWxzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVkRXJyb3IobXNnLCBlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQVdTLnV0aWwuZXJyb3IoZXJyIHx8IG5ldyBFcnJvcigpLCB7XG4gICAgICAgIGNvZGU6ICdDcmVkZW50aWFsc0Vycm9yJyxcbiAgICAgICAgbWVzc2FnZTogbXNnLFxuICAgICAgICBuYW1lOiAnQ3JlZGVudGlhbHNFcnJvcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFzeW5jQ3JlZGVudGlhbHMoKSB7XG4gICAgICBzZWxmLmNyZWRlbnRpYWxzLmdldChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHZhciBtc2cgPSAnQ291bGQgbm90IGxvYWQgY3JlZGVudGlhbHMgZnJvbSAnICtcbiAgICAgICAgICAgIHNlbGYuY3JlZGVudGlhbHMuY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgICBlcnIgPSBjcmVkRXJyb3IobXNnLCBlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmlzaChlcnIpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3RhdGljQ3JlZGVudGlhbHMoKSB7XG4gICAgICB2YXIgZXJyID0gbnVsbDtcbiAgICAgIGlmICghc2VsZi5jcmVkZW50aWFscy5hY2Nlc3NLZXlJZCB8fCAhc2VsZi5jcmVkZW50aWFscy5zZWNyZXRBY2Nlc3NLZXkpIHtcbiAgICAgICAgZXJyID0gY3JlZEVycm9yKCdNaXNzaW5nIGNyZWRlbnRpYWxzJyk7XG4gICAgICB9XG4gICAgICBmaW5pc2goZXJyKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5jcmVkZW50aWFscykge1xuICAgICAgaWYgKHR5cGVvZiBzZWxmLmNyZWRlbnRpYWxzLmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBnZXRBc3luY0NyZWRlbnRpYWxzKCk7XG4gICAgICB9IGVsc2UgeyAvLyBzdGF0aWMgY3JlZGVudGlhbHNcbiAgICAgICAgZ2V0U3RhdGljQ3JlZGVudGlhbHMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNlbGYuY3JlZGVudGlhbFByb3ZpZGVyKSB7XG4gICAgICBzZWxmLmNyZWRlbnRpYWxQcm92aWRlci5yZXNvbHZlKGZ1bmN0aW9uKGVyciwgY3JlZHMpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGVyciA9IGNyZWRFcnJvcignQ291bGQgbm90IGxvYWQgY3JlZGVudGlhbHMgZnJvbSBhbnkgcHJvdmlkZXJzJywgZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLmNyZWRlbnRpYWxzID0gY3JlZHM7XG4gICAgICAgIGZpbmlzaChlcnIpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpbmlzaChjcmVkRXJyb3IoJ05vIGNyZWRlbnRpYWxzIHRvIGxvYWQnKSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAIWdyb3VwIExvYWRpbmcgYW5kIFNldHRpbmcgQ29uZmlndXJhdGlvbiBPcHRpb25zXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAb3ZlcmxvYWQgdXBkYXRlKG9wdGlvbnMsIGFsbG93VW5rbm93bktleXMgPSBmYWxzZSlcbiAgICogICBVcGRhdGVzIHRoZSBjdXJyZW50IGNvbmZpZ3VyYXRpb24gb2JqZWN0IHdpdGggbmV3IG9wdGlvbnMuXG4gICAqXG4gICAqICAgQGV4YW1wbGUgVXBkYXRlIG1heFJldHJpZXMgcHJvcGVydHkgb2YgYSBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgKiAgICAgY29uZmlnLnVwZGF0ZSh7bWF4UmV0cmllczogMTB9KTtcbiAgICogICBAcGFyYW0gW09iamVjdF0gb3B0aW9ucyBhIG1hcCBvZiBvcHRpb24ga2V5cyBhbmQgdmFsdWVzLlxuICAgKiAgIEBwYXJhbSBbQm9vbGVhbl0gYWxsb3dVbmtub3duS2V5cyB3aGV0aGVyIHVua25vd24ga2V5cyBjYW4gYmUgc2V0IG9uXG4gICAqICAgICB0aGUgY29uZmlndXJhdGlvbiBvYmplY3QuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICAqICAgQHNlZSBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob3B0aW9ucywgYWxsb3dVbmtub3duS2V5cykge1xuICAgIGFsbG93VW5rbm93bktleXMgPSBhbGxvd1Vua25vd25LZXlzIHx8IGZhbHNlO1xuICAgIG9wdGlvbnMgPSB0aGlzLmV4dHJhY3RDcmVkZW50aWFscyhvcHRpb25zKTtcbiAgICBBV1MudXRpbC5lYWNoLmNhbGwodGhpcywgb3B0aW9ucywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChhbGxvd1Vua25vd25LZXlzIHx8IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmtleXMsIGtleSkgfHxcbiAgICAgICAgICBBV1MuU2VydmljZS5oYXNTZXJ2aWNlKGtleSkpIHtcbiAgICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIExvYWRzIGNvbmZpZ3VyYXRpb24gZGF0YSBmcm9tIGEgSlNPTiBmaWxlIGludG8gdGhpcyBjb25maWcgb2JqZWN0LlxuICAgKiBAbm90ZSBMb2FkaW5nIGNvbmZpZ3VyYXRpb24gd2lsbCByZXNldCBhbGwgZXhpc3RpbmcgY29uZmlndXJhdGlvblxuICAgKiAgIG9uIHRoZSBvYmplY3QuXG4gICAqIEAhbWFjcm8gbm9icm93c2VyXG4gICAqIEBwYXJhbSBwYXRoIFtTdHJpbmddIHRoZSBwYXRoIHJlbGF0aXZlIHRvIHlvdXIgcHJvY2VzcydzIGN1cnJlbnRcbiAgICogICAgd29ya2luZyBkaXJlY3RvcnkgdG8gbG9hZCBjb25maWd1cmF0aW9uIGZyb20uXG4gICAqIEByZXR1cm4gW0FXUy5Db25maWddIHRoZSBzYW1lIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAqL1xuICBsb2FkRnJvbVBhdGg6IGZ1bmN0aW9uIGxvYWRGcm9tUGF0aChwYXRoKSB7XG4gICAgdGhpcy5jbGVhcigpO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBKU09OLnBhcnNlKEFXUy51dGlsLnJlYWRGaWxlU3luYyhwYXRoKSk7XG4gICAgdmFyIGZpbGVTeXN0ZW1DcmVkcyA9IG5ldyBBV1MuRmlsZVN5c3RlbUNyZWRlbnRpYWxzKHBhdGgpO1xuICAgIHZhciBjaGFpbiA9IG5ldyBBV1MuQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW4oKTtcbiAgICBjaGFpbi5wcm92aWRlcnMudW5zaGlmdChmaWxlU3lzdGVtQ3JlZHMpO1xuICAgIGNoYWluLnJlc29sdmUoZnVuY3Rpb24gKGVyciwgY3JlZHMpIHtcbiAgICAgIGlmIChlcnIpIHRocm93IGVycjtcbiAgICAgIGVsc2Ugb3B0aW9ucy5jcmVkZW50aWFscyA9IGNyZWRzO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jb25zdHJ1Y3RvcihvcHRpb25zKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDbGVhcnMgY29uZmlndXJhdGlvbiBkYXRhIG9uIHRoaXMgb2JqZWN0XG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIC8qanNoaW50IGZvcmluOmZhbHNlICovXG4gICAgQVdTLnV0aWwuZWFjaC5jYWxsKHRoaXMsIHRoaXMua2V5cywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVsZXRlIHRoaXNba2V5XTtcbiAgICB9KTtcblxuICAgIC8vIHJlc2V0IGNyZWRlbnRpYWwgcHJvdmlkZXJcbiAgICB0aGlzLnNldCgnY3JlZGVudGlhbHMnLCB1bmRlZmluZWQpO1xuICAgIHRoaXMuc2V0KCdjcmVkZW50aWFsUHJvdmlkZXInLCB1bmRlZmluZWQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGEgcHJvcGVydHkgb24gdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LCBhbGxvd2luZyBmb3IgYVxuICAgKiBkZWZhdWx0IHZhbHVlXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgc2V0OiBmdW5jdGlvbiBzZXQocHJvcGVydHksIHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IHRoaXMua2V5c1twcm9wZXJ0eV07XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGRlZmF1bHRWYWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzW3Byb3BlcnR5XSA9IGRlZmF1bHRWYWx1ZS5jYWxsKHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1twcm9wZXJ0eV0gPSBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcm9wZXJ0eSA9PT0gJ2h0dHBPcHRpb25zJyAmJiB0aGlzW3Byb3BlcnR5XSkge1xuICAgICAgLy8gZGVlcCBtZXJnZSBodHRwT3B0aW9uc1xuICAgICAgdGhpc1twcm9wZXJ0eV0gPSBBV1MudXRpbC5tZXJnZSh0aGlzW3Byb3BlcnR5XSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQWxsIG9mIHRoZSBrZXlzIHdpdGggdGhlaXIgZGVmYXVsdCB2YWx1ZXMuXG4gICAqXG4gICAqIEBjb25zdGFudFxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGtleXM6IHtcbiAgICBjcmVkZW50aWFsczogbnVsbCxcbiAgICBjcmVkZW50aWFsUHJvdmlkZXI6IG51bGwsXG4gICAgcmVnaW9uOiBudWxsLFxuICAgIGxvZ2dlcjogbnVsbCxcbiAgICBhcGlWZXJzaW9uczoge30sXG4gICAgYXBpVmVyc2lvbjogbnVsbCxcbiAgICBlbmRwb2ludDogdW5kZWZpbmVkLFxuICAgIGh0dHBPcHRpb25zOiB7XG4gICAgICB0aW1lb3V0OiAxMjAwMDBcbiAgICB9LFxuICAgIG1heFJldHJpZXM6IHVuZGVmaW5lZCxcbiAgICBtYXhSZWRpcmVjdHM6IDEwLFxuICAgIHBhcmFtVmFsaWRhdGlvbjogdHJ1ZSxcbiAgICBzc2xFbmFibGVkOiB0cnVlLFxuICAgIHMzRm9yY2VQYXRoU3R5bGU6IGZhbHNlLFxuICAgIHMzQnVja2V0RW5kcG9pbnQ6IGZhbHNlLFxuICAgIHMzRGlzYWJsZUJvZHlTaWduaW5nOiB0cnVlLFxuICAgIGNvbXB1dGVDaGVja3N1bXM6IHRydWUsXG4gICAgY29udmVydFJlc3BvbnNlVHlwZXM6IHRydWUsXG4gICAgY29ycmVjdENsb2NrU2tldzogZmFsc2UsXG4gICAgY3VzdG9tVXNlckFnZW50OiBudWxsLFxuICAgIGR5bmFtb0RiQ3JjMzI6IHRydWUsXG4gICAgc3lzdGVtQ2xvY2tPZmZzZXQ6IDAsXG4gICAgc2lnbmF0dXJlVmVyc2lvbjogbnVsbCxcbiAgICBzaWduYXR1cmVDYWNoZTogdHJ1ZSxcbiAgICByZXRyeURlbGF5T3B0aW9uczoge30sXG4gICAgdXNlQWNjZWxlcmF0ZUVuZHBvaW50OiBmYWxzZSxcbiAgICBjbGllbnRTaWRlTW9uaXRvcmluZzogZmFsc2UsXG4gICAgZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkOiBmYWxzZSxcbiAgICBlbmRwb2ludENhY2hlU2l6ZTogMTAwMCxcbiAgICBob3N0UHJlZml4RW5hYmxlZDogdHJ1ZSxcbiAgICBzdHNSZWdpb25hbEVuZHBvaW50czogbnVsbFxuICB9LFxuXG4gIC8qKlxuICAgKiBFeHRyYWN0cyBhY2Nlc3NLZXlJZCwgc2VjcmV0QWNjZXNzS2V5IGFuZCBzZXNzaW9uVG9rZW5cbiAgICogZnJvbSBhIGNvbmZpZ3VyYXRpb24gaGFzaC5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBleHRyYWN0Q3JlZGVudGlhbHM6IGZ1bmN0aW9uIGV4dHJhY3RDcmVkZW50aWFscyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuYWNjZXNzS2V5SWQgJiYgb3B0aW9ucy5zZWNyZXRBY2Nlc3NLZXkpIHtcbiAgICAgIG9wdGlvbnMgPSBBV1MudXRpbC5jb3B5KG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5jcmVkZW50aWFscyA9IG5ldyBBV1MuQ3JlZGVudGlhbHMob3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwcm9taXNlIGRlcGVuZGVuY3kgdGhlIFNESyB3aWxsIHVzZSB3aGVyZXZlciBQcm9taXNlcyBhcmUgcmV0dXJuZWQuXG4gICAqIFBhc3NpbmcgYG51bGxgIHdpbGwgZm9yY2UgdGhlIFNESyB0byB1c2UgbmF0aXZlIFByb21pc2VzIGlmIHRoZXkgYXJlIGF2YWlsYWJsZS5cbiAgICogSWYgbmF0aXZlIFByb21pc2VzIGFyZSBub3QgYXZhaWxhYmxlLCBwYXNzaW5nIGBudWxsYCB3aWxsIGhhdmUgbm8gZWZmZWN0LlxuICAgKiBAcGFyYW0gW0NvbnN0cnVjdG9yXSBkZXAgQSByZWZlcmVuY2UgdG8gYSBQcm9taXNlIGNvbnN0cnVjdG9yXG4gICAqL1xuICBzZXRQcm9taXNlc0RlcGVuZGVuY3k6IGZ1bmN0aW9uIHNldFByb21pc2VzRGVwZW5kZW5jeShkZXApIHtcbiAgICBQcm9taXNlc0RlcGVuZGVuY3kgPSBkZXA7XG4gICAgLy8gaWYgbnVsbCB3YXMgcGFzc2VkIGluLCB3ZSBzaG91bGQgdHJ5IHRvIHVzZSBuYXRpdmUgcHJvbWlzZXNcbiAgICBpZiAoZGVwID09PSBudWxsICYmIHR5cGVvZiBQcm9taXNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBQcm9taXNlc0RlcGVuZGVuY3kgPSBQcm9taXNlO1xuICAgIH1cbiAgICB2YXIgY29uc3RydWN0b3JzID0gW0FXUy5SZXF1ZXN0LCBBV1MuQ3JlZGVudGlhbHMsIEFXUy5DcmVkZW50aWFsUHJvdmlkZXJDaGFpbl07XG4gICAgaWYgKEFXUy5TMykge1xuICAgICAgY29uc3RydWN0b3JzLnB1c2goQVdTLlMzKTtcbiAgICAgIGlmIChBV1MuUzMuTWFuYWdlZFVwbG9hZCkge1xuICAgICAgICBjb25zdHJ1Y3RvcnMucHVzaChBV1MuUzMuTWFuYWdlZFVwbG9hZCk7XG4gICAgICB9XG4gICAgfVxuICAgIEFXUy51dGlsLmFkZFByb21pc2VzKGNvbnN0cnVjdG9ycywgUHJvbWlzZXNEZXBlbmRlbmN5KTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgcHJvbWlzZSBkZXBlbmRlbmN5IHNldCBieSBgQVdTLmNvbmZpZy5zZXRQcm9taXNlc0RlcGVuZGVuY3lgLlxuICAgKi9cbiAgZ2V0UHJvbWlzZXNEZXBlbmRlbmN5OiBmdW5jdGlvbiBnZXRQcm9taXNlc0RlcGVuZGVuY3koKSB7XG4gICAgcmV0dXJuIFByb21pc2VzRGVwZW5kZW5jeTtcbiAgfVxufSk7XG5cbi8qKlxuICogQHJldHVybiBbQVdTLkNvbmZpZ10gVGhlIGdsb2JhbCBjb25maWd1cmF0aW9uIG9iamVjdCBzaW5nbGV0b24gaW5zdGFuY2VcbiAqIEByZWFkb25seVxuICogQHNlZSBBV1MuQ29uZmlnXG4gKi9cbkFXUy5jb25maWcgPSBuZXcgQVdTLkNvbmZpZygpO1xuXG59LHtcIi4vY29yZVwiOjE5LFwiLi9jcmVkZW50aWFsc1wiOjIwLFwiLi9jcmVkZW50aWFscy9jcmVkZW50aWFsX3Byb3ZpZGVyX2NoYWluXCI6MjN9XSwxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIFRoZSBtYWluIEFXUyBuYW1lc3BhY2VcbiAqL1xudmFyIEFXUyA9IHsgdXRpbDogcmVxdWlyZSgnLi91dGlsJykgfTtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqIEAhbWFjcm8gW25ld10gbm9icm93c2VyXG4gKiAgIEBub3RlIFRoaXMgZmVhdHVyZSBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIGVudmlyb25tZW50IG9mIHRoZSBTREsuXG4gKi9cbnZhciBfaGlkZGVuID0ge307IF9oaWRkZW4udG9TdHJpbmcoKTsgLy8gaGFjayB0byBwYXJzZSBtYWNyb1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IEFXUztcblxuQVdTLnV0aWwudXBkYXRlKEFXUywge1xuXG4gIC8qKlxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIFZFUlNJT046ICcyLjU1Ni4wJyxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBTaWduZXJzOiB7fSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBQcm90b2NvbDoge1xuICAgIEpzb246IHJlcXVpcmUoJy4vcHJvdG9jb2wvanNvbicpLFxuICAgIFF1ZXJ5OiByZXF1aXJlKCcuL3Byb3RvY29sL3F1ZXJ5JyksXG4gICAgUmVzdDogcmVxdWlyZSgnLi9wcm90b2NvbC9yZXN0JyksXG4gICAgUmVzdEpzb246IHJlcXVpcmUoJy4vcHJvdG9jb2wvcmVzdF9qc29uJyksXG4gICAgUmVzdFhtbDogcmVxdWlyZSgnLi9wcm90b2NvbC9yZXN0X3htbCcpXG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgWE1MOiB7XG4gICAgQnVpbGRlcjogcmVxdWlyZSgnLi94bWwvYnVpbGRlcicpLFxuICAgIFBhcnNlcjogbnVsbCAvLyBjb25kaXRpb25hbGx5IHNldCBiYXNlZCBvbiBlbnZpcm9ubWVudFxuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIEpTT046IHtcbiAgICBCdWlsZGVyOiByZXF1aXJlKCcuL2pzb24vYnVpbGRlcicpLFxuICAgIFBhcnNlcjogcmVxdWlyZSgnLi9qc29uL3BhcnNlcicpXG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgTW9kZWw6IHtcbiAgICBBcGk6IHJlcXVpcmUoJy4vbW9kZWwvYXBpJyksXG4gICAgT3BlcmF0aW9uOiByZXF1aXJlKCcuL21vZGVsL29wZXJhdGlvbicpLFxuICAgIFNoYXBlOiByZXF1aXJlKCcuL21vZGVsL3NoYXBlJyksXG4gICAgUGFnaW5hdG9yOiByZXF1aXJlKCcuL21vZGVsL3BhZ2luYXRvcicpLFxuICAgIFJlc291cmNlV2FpdGVyOiByZXF1aXJlKCcuL21vZGVsL3Jlc291cmNlX3dhaXRlcicpXG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgYXBpTG9hZGVyOiByZXF1aXJlKCcuL2FwaV9sb2FkZXInKSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBFbmRwb2ludENhY2hlOiByZXF1aXJlKCcuLi92ZW5kb3IvZW5kcG9pbnQtY2FjaGUnKS5FbmRwb2ludENhY2hlXG59KTtcbnJlcXVpcmUoJy4vc2VxdWVudGlhbF9leGVjdXRvcicpO1xucmVxdWlyZSgnLi9zZXJ2aWNlJyk7XG5yZXF1aXJlKCcuL2NvbmZpZycpO1xucmVxdWlyZSgnLi9odHRwJyk7XG5yZXF1aXJlKCcuL2V2ZW50X2xpc3RlbmVycycpO1xucmVxdWlyZSgnLi9yZXF1ZXN0Jyk7XG5yZXF1aXJlKCcuL3Jlc3BvbnNlJyk7XG5yZXF1aXJlKCcuL3Jlc291cmNlX3dhaXRlcicpO1xucmVxdWlyZSgnLi9zaWduZXJzL3JlcXVlc3Rfc2lnbmVyJyk7XG5yZXF1aXJlKCcuL3BhcmFtX3ZhbGlkYXRvcicpO1xuXG4vKipcbiAqIEByZWFkb25seVxuICogQHJldHVybiBbQVdTLlNlcXVlbnRpYWxFeGVjdXRvcl0gYSBjb2xsZWN0aW9uIG9mIGdsb2JhbCBldmVudCBsaXN0ZW5lcnMgdGhhdFxuICogICBhcmUgYXR0YWNoZWQgdG8gZXZlcnkgc2VudCByZXF1ZXN0LlxuICogQHNlZSBBV1MuUmVxdWVzdCBBV1MuUmVxdWVzdCBmb3IgYSBsaXN0IG9mIGV2ZW50cyB0byBsaXN0ZW4gZm9yXG4gKiBAZXhhbXBsZSBMb2dnaW5nIHRoZSB0aW1lIHRha2VuIHRvIHNlbmQgYSByZXF1ZXN0XG4gKiAgIEFXUy5ldmVudHMub24oJ3NlbmQnLCBmdW5jdGlvbiBzdGFydFNlbmQocmVzcCkge1xuICogICAgIHJlc3Auc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gKiAgIH0pLm9uKCdjb21wbGV0ZScsIGZ1bmN0aW9uIGNhbGN1bGF0ZVRpbWUocmVzcCkge1xuICogICAgIHZhciB0aW1lID0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gcmVzcC5zdGFydFRpbWUpIC8gMTAwMDtcbiAqICAgICBjb25zb2xlLmxvZygnUmVxdWVzdCB0b29rICcgKyB0aW1lICsgJyBzZWNvbmRzJyk7XG4gKiAgIH0pO1xuICpcbiAqICAgbmV3IEFXUy5TMygpLmxpc3RCdWNrZXRzKCk7IC8vIHByaW50cyAnUmVxdWVzdCB0b29rIDAuMjg1IHNlY29uZHMnXG4gKi9cbkFXUy5ldmVudHMgPSBuZXcgQVdTLlNlcXVlbnRpYWxFeGVjdXRvcigpO1xuXG4vL2NyZWF0ZSBlbmRwb2ludCBjYWNoZSBsYXppbHlcbkFXUy51dGlsLm1lbW9pemVkUHJvcGVydHkoQVdTLCAnZW5kcG9pbnRDYWNoZScsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IEFXUy5FbmRwb2ludENhY2hlKEFXUy5jb25maWcuZW5kcG9pbnRDYWNoZVNpemUpO1xufSwgdHJ1ZSk7XG5cbn0se1wiLi4vdmVuZG9yL2VuZHBvaW50LWNhY2hlXCI6MTA0LFwiLi9hcGlfbG9hZGVyXCI6MTAsXCIuL2NvbmZpZ1wiOjE4LFwiLi9ldmVudF9saXN0ZW5lcnNcIjozNCxcIi4vaHR0cFwiOjM1LFwiLi9qc29uL2J1aWxkZXJcIjozNyxcIi4vanNvbi9wYXJzZXJcIjozOCxcIi4vbW9kZWwvYXBpXCI6MzksXCIuL21vZGVsL29wZXJhdGlvblwiOjQxLFwiLi9tb2RlbC9wYWdpbmF0b3JcIjo0MixcIi4vbW9kZWwvcmVzb3VyY2Vfd2FpdGVyXCI6NDMsXCIuL21vZGVsL3NoYXBlXCI6NDQsXCIuL3BhcmFtX3ZhbGlkYXRvclwiOjQ1LFwiLi9wcm90b2NvbC9qc29uXCI6NDcsXCIuL3Byb3RvY29sL3F1ZXJ5XCI6NDgsXCIuL3Byb3RvY29sL3Jlc3RcIjo0OSxcIi4vcHJvdG9jb2wvcmVzdF9qc29uXCI6NTAsXCIuL3Byb3RvY29sL3Jlc3RfeG1sXCI6NTEsXCIuL3JlcXVlc3RcIjo1NixcIi4vcmVzb3VyY2Vfd2FpdGVyXCI6NTcsXCIuL3Jlc3BvbnNlXCI6NTgsXCIuL3NlcXVlbnRpYWxfZXhlY3V0b3JcIjo1OSxcIi4vc2VydmljZVwiOjYwLFwiLi9zaWduZXJzL3JlcXVlc3Rfc2lnbmVyXCI6NjQsXCIuL3V0aWxcIjo3MixcIi4veG1sL2J1aWxkZXJcIjo3NH1dLDIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBBV1MgPSByZXF1aXJlKCcuL2NvcmUnKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHlvdXIgQVdTIHNlY3VyaXR5IGNyZWRlbnRpYWxzLCBzcGVjaWZpY2FsbHkgdGhlXG4gKiB7YWNjZXNzS2V5SWR9LCB7c2VjcmV0QWNjZXNzS2V5fSwgYW5kIG9wdGlvbmFsIHtzZXNzaW9uVG9rZW59LlxuICogQ3JlYXRpbmcgYSBgQ3JlZGVudGlhbHNgIG9iamVjdCBhbGxvd3MgeW91IHRvIHBhc3MgYXJvdW5kIHlvdXJcbiAqIHNlY3VyaXR5IGluZm9ybWF0aW9uIHRvIGNvbmZpZ3VyYXRpb24gYW5kIHNlcnZpY2Ugb2JqZWN0cy5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBjbGFzcyB0eXBpY2FsbHkgZG9lcyBub3QgbmVlZCB0byBiZSBjb25zdHJ1Y3RlZCBtYW51YWxseSxcbiAqIGFzIHRoZSB7QVdTLkNvbmZpZ30gYW5kIHtBV1MuU2VydmljZX0gY2xhc3NlcyBib3RoIGFjY2VwdCBzaW1wbGVcbiAqIG9wdGlvbnMgaGFzaGVzIHdpdGggdGhlIHRocmVlIGtleXMuIFRoZXNlIHN0cnVjdHVyZXMgd2lsbCBiZSBjb252ZXJ0ZWRcbiAqIGludG8gQ3JlZGVudGlhbHMgb2JqZWN0cyBhdXRvbWF0aWNhbGx5LlxuICpcbiAqICMjIEV4cGlyaW5nIGFuZCBSZWZyZXNoaW5nIENyZWRlbnRpYWxzXG4gKlxuICogT2NjYXNpb25hbGx5IGNyZWRlbnRpYWxzIGNhbiBleHBpcmUgaW4gdGhlIG1pZGRsZSBvZiBhIGxvbmctcnVubmluZ1xuICogYXBwbGljYXRpb24uIEluIHRoaXMgY2FzZSwgdGhlIFNESyB3aWxsIGF1dG9tYXRpY2FsbHkgYXR0ZW1wdCB0b1xuICogcmVmcmVzaCB0aGUgY3JlZGVudGlhbHMgZnJvbSB0aGUgc3RvcmFnZSBsb2NhdGlvbiBpZiB0aGUgQ3JlZGVudGlhbHNcbiAqIGNsYXNzIGltcGxlbWVudHMgdGhlIHtyZWZyZXNofSBtZXRob2QuXG4gKlxuICogSWYgeW91IGFyZSBpbXBsZW1lbnRpbmcgYSBjcmVkZW50aWFsIHN0b3JhZ2UgbG9jYXRpb24sIHlvdVxuICogd2lsbCB3YW50IHRvIGNyZWF0ZSBhIHN1YmNsYXNzIG9mIHRoZSBgQ3JlZGVudGlhbHNgIGNsYXNzIGFuZFxuICogb3ZlcnJpZGUgdGhlIHtyZWZyZXNofSBtZXRob2QuIFRoaXMgbWV0aG9kIGFsbG93cyBjcmVkZW50aWFscyB0byBiZVxuICogcmV0cmlldmVkIGZyb20gdGhlIGJhY2tpbmcgc3RvcmUsIGJlIGl0IGEgZmlsZSBzeXN0ZW0sIGRhdGFiYXNlLCBvclxuICogc29tZSBuZXR3b3JrIHN0b3JhZ2UuIFRoZSBtZXRob2Qgc2hvdWxkIHJlc2V0IHRoZSBjcmVkZW50aWFsIGF0dHJpYnV0ZXNcbiAqIG9uIHRoZSBvYmplY3QuXG4gKlxuICogQCFhdHRyaWJ1dGUgZXhwaXJlZFxuICogICBAcmV0dXJuIFtCb29sZWFuXSB3aGV0aGVyIHRoZSBjcmVkZW50aWFscyBoYXZlIGJlZW4gZXhwaXJlZCBhbmRcbiAqICAgICByZXF1aXJlIGEgcmVmcmVzaC4gVXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHtleHBpcmVUaW1lfS5cbiAqIEAhYXR0cmlidXRlIGV4cGlyZVRpbWVcbiAqICAgQHJldHVybiBbRGF0ZV0gYSB0aW1lIHdoZW4gY3JlZGVudGlhbHMgc2hvdWxkIGJlIGNvbnNpZGVyZWQgZXhwaXJlZC4gVXNlZFxuICogICAgIGluIGNvbmp1bmN0aW9uIHdpdGgge2V4cGlyZWR9LlxuICogQCFhdHRyaWJ1dGUgYWNjZXNzS2V5SWRcbiAqICAgQHJldHVybiBbU3RyaW5nXSB0aGUgQVdTIGFjY2VzcyBrZXkgSURcbiAqIEAhYXR0cmlidXRlIHNlY3JldEFjY2Vzc0tleVxuICogICBAcmV0dXJuIFtTdHJpbmddIHRoZSBBV1Mgc2VjcmV0IGFjY2VzcyBrZXlcbiAqIEAhYXR0cmlidXRlIHNlc3Npb25Ub2tlblxuICogICBAcmV0dXJuIFtTdHJpbmddIGFuIG9wdGlvbmFsIEFXUyBzZXNzaW9uIHRva2VuXG4gKi9cbkFXUy5DcmVkZW50aWFscyA9IEFXUy51dGlsLmluaGVyaXQoe1xuICAvKipcbiAgICogQSBjcmVkZW50aWFscyBvYmplY3QgY2FuIGJlIGNyZWF0ZWQgdXNpbmcgcG9zaXRpb25hbCBhcmd1bWVudHMgb3IgYW4gb3B0aW9uc1xuICAgKiBoYXNoLlxuICAgKlxuICAgKiBAb3ZlcmxvYWQgQVdTLkNyZWRlbnRpYWxzKGFjY2Vzc0tleUlkLCBzZWNyZXRBY2Nlc3NLZXksIHNlc3Npb25Ub2tlbj1udWxsKVxuICAgKiAgIENyZWF0ZXMgYSBDcmVkZW50aWFscyBvYmplY3Qgd2l0aCBhIGdpdmVuIHNldCBvZiBjcmVkZW50aWFsIGluZm9ybWF0aW9uXG4gICAqICAgYXMgcG9zaXRpb25hbCBhcmd1bWVudHMuXG4gICAqICAgQHBhcmFtIGFjY2Vzc0tleUlkIFtTdHJpbmddIHRoZSBBV1MgYWNjZXNzIGtleSBJRFxuICAgKiAgIEBwYXJhbSBzZWNyZXRBY2Nlc3NLZXkgW1N0cmluZ10gdGhlIEFXUyBzZWNyZXQgYWNjZXNzIGtleVxuICAgKiAgIEBwYXJhbSBzZXNzaW9uVG9rZW4gW1N0cmluZ10gdGhlIG9wdGlvbmFsIEFXUyBzZXNzaW9uIHRva2VuXG4gICAqICAgQGV4YW1wbGUgQ3JlYXRlIGEgY3JlZGVudGlhbHMgb2JqZWN0IHdpdGggQVdTIGNyZWRlbnRpYWxzXG4gICAqICAgICB2YXIgY3JlZHMgPSBuZXcgQVdTLkNyZWRlbnRpYWxzKCdha2lkJywgJ3NlY3JldCcsICdzZXNzaW9uJyk7XG4gICAqIEBvdmVybG9hZCBBV1MuQ3JlZGVudGlhbHMob3B0aW9ucylcbiAgICogICBDcmVhdGVzIGEgQ3JlZGVudGlhbHMgb2JqZWN0IHdpdGggYSBnaXZlbiBzZXQgb2YgY3JlZGVudGlhbCBpbmZvcm1hdGlvblxuICAgKiAgIGFzIGFuIG9wdGlvbnMgaGFzaC5cbiAgICogICBAb3B0aW9uIG9wdGlvbnMgYWNjZXNzS2V5SWQgW1N0cmluZ10gdGhlIEFXUyBhY2Nlc3Mga2V5IElEXG4gICAqICAgQG9wdGlvbiBvcHRpb25zIHNlY3JldEFjY2Vzc0tleSBbU3RyaW5nXSB0aGUgQVdTIHNlY3JldCBhY2Nlc3Mga2V5XG4gICAqICAgQG9wdGlvbiBvcHRpb25zIHNlc3Npb25Ub2tlbiBbU3RyaW5nXSB0aGUgb3B0aW9uYWwgQVdTIHNlc3Npb24gdG9rZW5cbiAgICogICBAZXhhbXBsZSBDcmVhdGUgYSBjcmVkZW50aWFscyBvYmplY3Qgd2l0aCBBV1MgY3JlZGVudGlhbHNcbiAgICogICAgIHZhciBjcmVkcyA9IG5ldyBBV1MuQ3JlZGVudGlhbHMoe1xuICAgKiAgICAgICBhY2Nlc3NLZXlJZDogJ2FraWQnLCBzZWNyZXRBY2Nlc3NLZXk6ICdzZWNyZXQnLCBzZXNzaW9uVG9rZW46ICdzZXNzaW9uJ1xuICAgKiAgICAgfSk7XG4gICAqL1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gQ3JlZGVudGlhbHMoKSB7XG4gICAgLy8gaGlkZSBzZWNyZXRBY2Nlc3NLZXkgZnJvbSBiZWluZyBkaXNwbGF5ZWQgd2l0aCB1dGlsLmluc3BlY3RcbiAgICBBV1MudXRpbC5oaWRlUHJvcGVydGllcyh0aGlzLCBbJ3NlY3JldEFjY2Vzc0tleSddKTtcblxuICAgIHRoaXMuZXhwaXJlZCA9IGZhbHNlO1xuICAgIHRoaXMuZXhwaXJlVGltZSA9IG51bGw7XG4gICAgdGhpcy5yZWZyZXNoQ2FsbGJhY2tzID0gW107XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBjcmVkcyA9IGFyZ3VtZW50c1swXS5jcmVkZW50aWFscyB8fCBhcmd1bWVudHNbMF07XG4gICAgICB0aGlzLmFjY2Vzc0tleUlkID0gY3JlZHMuYWNjZXNzS2V5SWQ7XG4gICAgICB0aGlzLnNlY3JldEFjY2Vzc0tleSA9IGNyZWRzLnNlY3JldEFjY2Vzc0tleTtcbiAgICAgIHRoaXMuc2Vzc2lvblRva2VuID0gY3JlZHMuc2Vzc2lvblRva2VuO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFjY2Vzc0tleUlkID0gYXJndW1lbnRzWzBdO1xuICAgICAgdGhpcy5zZWNyZXRBY2Nlc3NLZXkgPSBhcmd1bWVudHNbMV07XG4gICAgICB0aGlzLnNlc3Npb25Ub2tlbiA9IGFyZ3VtZW50c1syXTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4gW0ludGVnZXJdIHRoZSBudW1iZXIgb2Ygc2Vjb25kcyBiZWZvcmUge2V4cGlyZVRpbWV9IGR1cmluZyB3aGljaFxuICAgKiAgIHRoZSBjcmVkZW50aWFscyB3aWxsIGJlIGNvbnNpZGVyZWQgZXhwaXJlZC5cbiAgICovXG4gIGV4cGlyeVdpbmRvdzogMTUsXG5cbiAgLyoqXG4gICAqIEByZXR1cm4gW0Jvb2xlYW5dIHdoZXRoZXIgdGhlIGNyZWRlbnRpYWxzIG9iamVjdCBzaG91bGQgY2FsbCB7cmVmcmVzaH1cbiAgICogQG5vdGUgU3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gcHJvdmlkZSBjdXN0b20gcmVmcmVzaFxuICAgKiAgIGxvZ2ljLlxuICAgKi9cbiAgbmVlZHNSZWZyZXNoOiBmdW5jdGlvbiBuZWVkc1JlZnJlc2goKSB7XG4gICAgdmFyIGN1cnJlbnRUaW1lID0gQVdTLnV0aWwuZGF0ZS5nZXREYXRlKCkuZ2V0VGltZSgpO1xuICAgIHZhciBhZGp1c3RlZFRpbWUgPSBuZXcgRGF0ZShjdXJyZW50VGltZSArIHRoaXMuZXhwaXJ5V2luZG93ICogMTAwMCk7XG5cbiAgICBpZiAodGhpcy5leHBpcmVUaW1lICYmIGFkanVzdGVkVGltZSA+IHRoaXMuZXhwaXJlVGltZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmV4cGlyZWQgfHwgIXRoaXMuYWNjZXNzS2V5SWQgfHwgIXRoaXMuc2VjcmV0QWNjZXNzS2V5O1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgZXhpc3RpbmcgY3JlZGVudGlhbHMsIHJlZnJlc2hpbmcgdGhlbSBpZiB0aGV5IGFyZSBub3QgeWV0IGxvYWRlZFxuICAgKiBvciBoYXZlIGV4cGlyZWQuIFVzZXJzIHNob3VsZCBjYWxsIHRoaXMgbWV0aG9kIGJlZm9yZSB1c2luZyB7cmVmcmVzaH0sXG4gICAqIGFzIHRoaXMgd2lsbCBub3QgYXR0ZW1wdCB0byByZWxvYWQgY3JlZGVudGlhbHMgd2hlbiB0aGV5IGFyZSBhbHJlYWR5XG4gICAqIGxvYWRlZCBpbnRvIHRoZSBvYmplY3QuXG4gICAqXG4gICAqIEBjYWxsYmFjayBjYWxsYmFjayBmdW5jdGlvbihlcnIpXG4gICAqICAgV2hlbiB0aGlzIGNhbGxiYWNrIGlzIGNhbGxlZCB3aXRoIG5vIGVycm9yLCBpdCBtZWFucyBlaXRoZXIgY3JlZGVudGlhbHNcbiAgICogICBkbyBub3QgbmVlZCB0byBiZSByZWZyZXNoZWQgb3IgcmVmcmVzaGVkIGNyZWRlbnRpYWxzIGluZm9ybWF0aW9uIGhhc1xuICAgKiAgIGJlZW4gbG9hZGVkIGludG8gdGhlIG9iamVjdCAoYXMgdGhlIGBhY2Nlc3NLZXlJZGAsIGBzZWNyZXRBY2Nlc3NLZXlgLFxuICAgKiAgIGFuZCBgc2Vzc2lvblRva2VuYCBwcm9wZXJ0aWVzKS5cbiAgICogICBAcGFyYW0gZXJyIFtFcnJvcl0gaWYgYW4gZXJyb3Igb2NjdXJyZWQsIHRoaXMgdmFsdWUgd2lsbCBiZSBmaWxsZWRcbiAgICovXG4gIGdldDogZnVuY3Rpb24gZ2V0KGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICh0aGlzLm5lZWRzUmVmcmVzaCgpKSB7XG4gICAgICB0aGlzLnJlZnJlc2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGlmICghZXJyKSBzZWxmLmV4cGlyZWQgPSBmYWxzZTsgLy8gcmVzZXQgZXhwaXJlZCBmbGFnXG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZXJyKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAIW1ldGhvZCAgZ2V0UHJvbWlzZSgpXG4gICAqICAgUmV0dXJucyBhICd0aGVuYWJsZScgcHJvbWlzZS5cbiAgICogICBHZXRzIHRoZSBleGlzdGluZyBjcmVkZW50aWFscywgcmVmcmVzaGluZyB0aGVtIGlmIHRoZXkgYXJlIG5vdCB5ZXQgbG9hZGVkXG4gICAqICAgb3IgaGF2ZSBleHBpcmVkLiBVc2VycyBzaG91bGQgY2FsbCB0aGlzIG1ldGhvZCBiZWZvcmUgdXNpbmcge3JlZnJlc2h9LFxuICAgKiAgIGFzIHRoaXMgd2lsbCBub3QgYXR0ZW1wdCB0byByZWxvYWQgY3JlZGVudGlhbHMgd2hlbiB0aGV5IGFyZSBhbHJlYWR5XG4gICAqICAgbG9hZGVkIGludG8gdGhlIG9iamVjdC5cbiAgICpcbiAgICogICBUd28gY2FsbGJhY2tzIGNhbiBiZSBwcm92aWRlZCB0byB0aGUgYHRoZW5gIG1ldGhvZCBvbiB0aGUgcmV0dXJuZWQgcHJvbWlzZS5cbiAgICogICBUaGUgZmlyc3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgaWYgdGhlIHByb21pc2UgaXMgZnVsZmlsbGVkLCBhbmQgdGhlIHNlY29uZFxuICAgKiAgIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGlmIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkLlxuICAgKiAgIEBjYWxsYmFjayBmdWxmaWxsZWRDYWxsYmFjayBmdW5jdGlvbigpXG4gICAqICAgICBDYWxsZWQgaWYgdGhlIHByb21pc2UgaXMgZnVsZmlsbGVkLiBXaGVuIHRoaXMgY2FsbGJhY2sgaXMgY2FsbGVkLCBpdFxuICAgKiAgICAgbWVhbnMgZWl0aGVyIGNyZWRlbnRpYWxzIGRvIG5vdCBuZWVkIHRvIGJlIHJlZnJlc2hlZCBvciByZWZyZXNoZWRcbiAgICogICAgIGNyZWRlbnRpYWxzIGluZm9ybWF0aW9uIGhhcyBiZWVuIGxvYWRlZCBpbnRvIHRoZSBvYmplY3QgKGFzIHRoZVxuICAgKiAgICAgYGFjY2Vzc0tleUlkYCwgYHNlY3JldEFjY2Vzc0tleWAsIGFuZCBgc2Vzc2lvblRva2VuYCBwcm9wZXJ0aWVzKS5cbiAgICogICBAY2FsbGJhY2sgcmVqZWN0ZWRDYWxsYmFjayBmdW5jdGlvbihlcnIpXG4gICAqICAgICBDYWxsZWQgaWYgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQuXG4gICAqICAgICBAcGFyYW0gZXJyIFtFcnJvcl0gaWYgYW4gZXJyb3Igb2NjdXJyZWQsIHRoaXMgdmFsdWUgd2lsbCBiZSBmaWxsZWRcbiAgICogICBAcmV0dXJuIFtQcm9taXNlXSBBIHByb21pc2UgdGhhdCByZXByZXNlbnRzIHRoZSBzdGF0ZSBvZiB0aGUgYGdldGAgY2FsbC5cbiAgICogICBAZXhhbXBsZSBDYWxsaW5nIHRoZSBgZ2V0UHJvbWlzZWAgbWV0aG9kLlxuICAgKiAgICAgdmFyIHByb21pc2UgPSBjcmVkUHJvdmlkZXIuZ2V0UHJvbWlzZSgpO1xuICAgKiAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkgeyAuLi4gfSwgZnVuY3Rpb24oZXJyKSB7IC4uLiB9KTtcbiAgICovXG5cbiAgLyoqXG4gICAqIEAhbWV0aG9kICByZWZyZXNoUHJvbWlzZSgpXG4gICAqICAgUmV0dXJucyBhICd0aGVuYWJsZScgcHJvbWlzZS5cbiAgICogICBSZWZyZXNoZXMgdGhlIGNyZWRlbnRpYWxzLiBVc2VycyBzaG91bGQgY2FsbCB7Z2V0fSBiZWZvcmUgYXR0ZW1wdGluZ1xuICAgKiAgIHRvIGZvcmNpYmx5IHJlZnJlc2ggY3JlZGVudGlhbHMuXG4gICAqXG4gICAqICAgVHdvIGNhbGxiYWNrcyBjYW4gYmUgcHJvdmlkZWQgdG8gdGhlIGB0aGVuYCBtZXRob2Qgb24gdGhlIHJldHVybmVkIHByb21pc2UuXG4gICAqICAgVGhlIGZpcnN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGlmIHRoZSBwcm9taXNlIGlzIGZ1bGZpbGxlZCwgYW5kIHRoZSBzZWNvbmRcbiAgICogICBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBpZiB0aGUgcHJvbWlzZSBpcyByZWplY3RlZC5cbiAgICogICBAY2FsbGJhY2sgZnVsZmlsbGVkQ2FsbGJhY2sgZnVuY3Rpb24oKVxuICAgKiAgICAgQ2FsbGVkIGlmIHRoZSBwcm9taXNlIGlzIGZ1bGZpbGxlZC4gV2hlbiB0aGlzIGNhbGxiYWNrIGlzIGNhbGxlZCwgaXRcbiAgICogICAgIG1lYW5zIHJlZnJlc2hlZCBjcmVkZW50aWFscyBpbmZvcm1hdGlvbiBoYXMgYmVlbiBsb2FkZWQgaW50byB0aGUgb2JqZWN0XG4gICAqICAgICAoYXMgdGhlIGBhY2Nlc3NLZXlJZGAsIGBzZWNyZXRBY2Nlc3NLZXlgLCBhbmQgYHNlc3Npb25Ub2tlbmAgcHJvcGVydGllcykuXG4gICAqICAgQGNhbGxiYWNrIHJlamVjdGVkQ2FsbGJhY2sgZnVuY3Rpb24oZXJyKVxuICAgKiAgICAgQ2FsbGVkIGlmIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkLlxuICAgKiAgICAgQHBhcmFtIGVyciBbRXJyb3JdIGlmIGFuIGVycm9yIG9jY3VycmVkLCB0aGlzIHZhbHVlIHdpbGwgYmUgZmlsbGVkXG4gICAqICAgQHJldHVybiBbUHJvbWlzZV0gQSBwcm9taXNlIHRoYXQgcmVwcmVzZW50cyB0aGUgc3RhdGUgb2YgdGhlIGByZWZyZXNoYCBjYWxsLlxuICAgKiAgIEBleGFtcGxlIENhbGxpbmcgdGhlIGByZWZyZXNoUHJvbWlzZWAgbWV0aG9kLlxuICAgKiAgICAgdmFyIHByb21pc2UgPSBjcmVkUHJvdmlkZXIucmVmcmVzaFByb21pc2UoKTtcbiAgICogICAgIHByb21pc2UudGhlbihmdW5jdGlvbigpIHsgLi4uIH0sIGZ1bmN0aW9uKGVycikgeyAuLi4gfSk7XG4gICAqL1xuXG4gIC8qKlxuICAgKiBSZWZyZXNoZXMgdGhlIGNyZWRlbnRpYWxzLiBVc2VycyBzaG91bGQgY2FsbCB7Z2V0fSBiZWZvcmUgYXR0ZW1wdGluZ1xuICAgKiB0byBmb3JjaWJseSByZWZyZXNoIGNyZWRlbnRpYWxzLlxuICAgKlxuICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyKVxuICAgKiAgIFdoZW4gdGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aCBubyBlcnJvciwgaXQgbWVhbnMgcmVmcmVzaGVkXG4gICAqICAgY3JlZGVudGlhbHMgaW5mb3JtYXRpb24gaGFzIGJlZW4gbG9hZGVkIGludG8gdGhlIG9iamVjdCAoYXMgdGhlXG4gICAqICAgYGFjY2Vzc0tleUlkYCwgYHNlY3JldEFjY2Vzc0tleWAsIGFuZCBgc2Vzc2lvblRva2VuYCBwcm9wZXJ0aWVzKS5cbiAgICogICBAcGFyYW0gZXJyIFtFcnJvcl0gaWYgYW4gZXJyb3Igb2NjdXJyZWQsIHRoaXMgdmFsdWUgd2lsbCBiZSBmaWxsZWRcbiAgICogQG5vdGUgU3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGUgdGhpcyBjbGFzcyB0byByZXNldCB0aGVcbiAgICogICB7YWNjZXNzS2V5SWR9LCB7c2VjcmV0QWNjZXNzS2V5fSBhbmQgb3B0aW9uYWwge3Nlc3Npb25Ub2tlbn1cbiAgICogICBvbiB0aGUgY3JlZGVudGlhbHMgb2JqZWN0IGFuZCB0aGVuIGNhbGwgdGhlIGNhbGxiYWNrIHdpdGhcbiAgICogICBhbnkgZXJyb3IgaW5mb3JtYXRpb24uXG4gICAqIEBzZWUgZ2V0XG4gICAqL1xuICByZWZyZXNoOiBmdW5jdGlvbiByZWZyZXNoKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5leHBpcmVkID0gZmFsc2U7XG4gICAgY2FsbGJhY2soKTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgY29hbGVzY2VSZWZyZXNoOiBmdW5jdGlvbiBjb2FsZXNjZVJlZnJlc2goY2FsbGJhY2ssIHN5bmMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHNlbGYucmVmcmVzaENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKSA9PT0gMSkge1xuICAgICAgc2VsZi5sb2FkKGZ1bmN0aW9uIG9uTG9hZChlcnIpIHtcbiAgICAgICAgQVdTLnV0aWwuYXJyYXlFYWNoKHNlbGYucmVmcmVzaENhbGxiYWNrcywgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICBpZiAoc3luYykge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY2FsbGJhY2sgY291bGQgdGhyb3csIHNvIGRlZmVyIHRvIGVuc3VyZSBhbGwgY2FsbGJhY2tzIGFyZSBub3RpZmllZFxuICAgICAgICAgICAgQVdTLnV0aWwuZGVmZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc2VsZi5yZWZyZXNoQ2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIGxvYWQ6IGZ1bmN0aW9uIGxvYWQoY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjaygpO1xuICB9XG59KTtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuQVdTLkNyZWRlbnRpYWxzLmFkZFByb21pc2VzVG9DbGFzcyA9IGZ1bmN0aW9uIGFkZFByb21pc2VzVG9DbGFzcyhQcm9taXNlRGVwZW5kZW5jeSkge1xuICB0aGlzLnByb3RvdHlwZS5nZXRQcm9taXNlID0gQVdTLnV0aWwucHJvbWlzaWZ5TWV0aG9kKCdnZXQnLCBQcm9taXNlRGVwZW5kZW5jeSk7XG4gIHRoaXMucHJvdG90eXBlLnJlZnJlc2hQcm9taXNlID0gQVdTLnV0aWwucHJvbWlzaWZ5TWV0aG9kKCdyZWZyZXNoJywgUHJvbWlzZURlcGVuZGVuY3kpO1xufTtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuQVdTLkNyZWRlbnRpYWxzLmRlbGV0ZVByb21pc2VzRnJvbUNsYXNzID0gZnVuY3Rpb24gZGVsZXRlUHJvbWlzZXNGcm9tQ2xhc3MoKSB7XG4gIGRlbGV0ZSB0aGlzLnByb3RvdHlwZS5nZXRQcm9taXNlO1xuICBkZWxldGUgdGhpcy5wcm90b3R5cGUucmVmcmVzaFByb21pc2U7XG59O1xuXG5BV1MudXRpbC5hZGRQcm9taXNlcyhBV1MuQ3JlZGVudGlhbHMpO1xuXG59LHtcIi4vY29yZVwiOjE5fV0sMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTtcbnZhciBTVFMgPSByZXF1aXJlKCcuLi8uLi9jbGllbnRzL3N0cycpO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGVtcG9yYXJ5IGNyZWRlbnRpYWxzIHJldHJpZXZlZCBmcm9tIHtBV1MuU1RTfS4gV2l0aG91dCBhbnlcbiAqIGV4dHJhIHBhcmFtZXRlcnMsIGNyZWRlbnRpYWxzIHdpbGwgYmUgZmV0Y2hlZCBmcm9tIHRoZVxuICoge0FXUy5TVFMuZ2V0U2Vzc2lvblRva2VufSBvcGVyYXRpb24uIElmIGFuIElBTSByb2xlIGlzIHByb3ZpZGVkLCB0aGVcbiAqIHtBV1MuU1RTLmFzc3VtZVJvbGV9IG9wZXJhdGlvbiB3aWxsIGJlIHVzZWQgdG8gZmV0Y2ggY3JlZGVudGlhbHMgZm9yIHRoZVxuICogcm9sZSBpbnN0ZWFkLlxuICpcbiAqIEFXUy5DaGFpbmFibGVUZW1wb3JhcnlDcmVkZW50aWFscyBkaWZmZXJzIGZyb20gQVdTLlRlbXBvcmFyeUNyZWRlbnRpYWxzIGluXG4gKiB0aGUgd2F5IG1hc3RlckNyZWRlbnRpYWxzIGFuZCByZWZyZXNoZXMgYXJlIGhhbmRsZWQuXG4gKiBBV1MuQ2hhaW5hYmxlVGVtcG9yYXJ5Q3JlZGVudGlhbHMgcmVmcmVzaGVzIGV4cGlyZWQgY3JlZGVudGlhbHMgdXNpbmcgdGhlXG4gKiBtYXN0ZXJDcmVkZW50aWFscyBwYXNzZWQgYnkgdGhlIHVzZXIgdG8gc3VwcG9ydCBjaGFpbmluZyBvZiBTVFMgY3JlZGVudGlhbHMuXG4gKiBIb3dldmVyLCBBV1MuVGVtcG9yYXJ5Q3JlZGVudGlhbHMgcmVjdXJzaXZlbHkgY29sbGFwc2VzIHRoZSBtYXN0ZXJDcmVkZW50aWFsc1xuICogZHVyaW5nIGluc3RhbnRpYXRpb24sIHByZWNsdWRpbmcgdGhlIGFiaWxpdHkgdG8gcmVmcmVzaCBjcmVkZW50aWFscyB3aGljaFxuICogcmVxdWlyZSBpbnRlcm1lZGlhdGUsIHRlbXBvcmFyeSBjcmVkZW50aWFscy5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaWYgdGhlIGFwcGxpY2F0aW9uIHNob3VsZCB1c2UgUm9sZUEsIHdoaWNoIG11c3QgYmUgYXNzdW1lZCBmcm9tXG4gKiBSb2xlQiwgYW5kIHRoZSBlbnZpcm9ubWVudCBwcm92aWRlcyBjcmVkZW50aWFscyB3aGljaCBjYW4gYXNzdW1lIFJvbGVCLCB0aGVuXG4gKiBBV1MuQ2hhaW5hYmxlVGVtcG9yYXJ5Q3JlZGVudGlhbHMgbXVzdCBiZSB1c2VkIHRvIHN1cHBvcnQgcmVmcmVzaGluZyB0aGVcbiAqIHRlbXBvcmFyeSBjcmVkZW50aWFscyBmb3IgUm9sZUE6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogdmFyIHJvbGVBQ3JlZHMgPSBuZXcgQVdTLkNoYWluYWJsZVRlbXBvcmFyeUNyZWRlbnRpYWxzKHtcbiAqICAgcGFyYW1zOiB7Um9sZUFybjogJ1JvbGVBJ30sXG4gKiAgIG1hc3RlckNyZWRlbnRpYWxzOiBuZXcgQVdTLkNoYWluYWJsZVRlbXBvcmFyeUNyZWRlbnRpYWxzKHtcbiAqICAgICBwYXJhbXM6IHtSb2xlQXJuOiAnUm9sZUInfSxcbiAqICAgICBtYXN0ZXJDcmVkZW50aWFsczogbmV3IEFXUy5FbnZpcm9ubWVudENyZWRlbnRpYWxzKCdBV1MnKVxuICogICB9KVxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBJZiBBV1MuVGVtcG9yYXJ5Q3JlZGVudGlhbHMgaGFkIGJlZW4gdXNlZCBpbiB0aGUgcHJldmlvdXMgZXhhbXBsZSxcbiAqIGByb2xlQUNyZWRzYCB3b3VsZCBmYWlsIHRvIHJlZnJlc2ggYmVjYXVzZSBgcm9sZUFDcmVkc2Agd291bGRcbiAqIHVzZSB0aGUgZW52aXJvbm1lbnQgY3JlZGVudGlhbHMgZm9yIHRoZSBBc3N1bWVSb2xlIHJlcXVlc3QuXG4gKlxuICogQW5vdGhlciBkaWZmZXJlbmNlIGlzIHRoYXQgQVdTLkNoYWluYWJsZVRlbXBvcmFyeUNyZWRlbnRpYWxzIGNyZWF0ZXMgdGhlIFNUU1xuICogc2VydmljZSBpbnN0YW5jZSBkdXJpbmcgaW5zdGFudGlhdGlvbiB3aGlsZSBBV1MuVGVtcG9yYXJ5Q3JlZGVudGlhbHMgY3JlYXRlc1xuICogdGhlIFNUUyBzZXJ2aWNlIGluc3RhbmNlIGR1cmluZyB0aGUgZmlyc3QgcmVmcmVzaC4gQ3JlYXRpbmcgdGhlIHNlcnZpY2VcbiAqIGluc3RhbmNlIGR1cmluZyBpbnN0YW50aWF0aW9uIGVmZmVjdGl2ZWx5IGNhcHR1cmVzIHRoZSBtYXN0ZXIgY3JlZGVudGlhbHNcbiAqIGZyb20gdGhlIGdsb2JhbCBjb25maWcsIHNvIHRoYXQgc3Vic2VxdWVudCBjaGFuZ2VzIHRvIHRoZSBnbG9iYWwgY29uZmlnIGRvXG4gKiBub3QgYWZmZWN0IHRoZSBtYXN0ZXIgY3JlZGVudGlhbHMgdXNlZCB0byByZWZyZXNoIHRoZSB0ZW1wb3JhcnkgY3JlZGVudGlhbHMuXG4gKlxuICogVGhpcyBhbGxvd3MgYW4gaW5zdGFuY2Ugb2YgQVdTLkNoYWluYWJsZVRlbXBvcmFyeUNyZWRlbnRpYWxzIHRvIGJlIGFzc2lnbmVkXG4gKiB0byBBV1MuY29uZmlnLmNyZWRlbnRpYWxzOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHZhciBlbnZDcmVkcyA9IG5ldyBBV1MuRW52aXJvbm1lbnRDcmVkZW50aWFscygnQVdTJyk7XG4gKiBBV1MuY29uZmlnLmNyZWRlbnRpYWxzID0gZW52Q3JlZHM7XG4gKiAvLyBtYXN0ZXJDcmVkZW50aWFscyB3aWxsIGJlIGVudkNyZWRzXG4gKiBBV1MuY29uZmlnLmNyZWRlbnRpYWxzID0gbmV3IEFXUy5DaGFpbmFibGVUZW1wb3JhcnlDcmVkZW50aWFscyh7XG4gKiAgIHBhcmFtczoge1JvbGVBcm46ICcuLi4nfVxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBTaW1pbGFybHksIHRvIHVzZSB0aGUgQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW4ncyBkZWZhdWx0IHByb3ZpZGVycyBhcyB0aGVcbiAqIG1hc3RlciBjcmVkZW50aWFscywgc2ltcGx5IGNyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZlxuICogQVdTLkNoYWluYWJsZVRlbXBvcmFyeUNyZWRlbnRpYWxzOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIEFXUy5jb25maWcuY3JlZGVudGlhbHMgPSBuZXcgQ2hhaW5hYmxlVGVtcG9yYXJ5Q3JlZGVudGlhbHMoe1xuICogICBwYXJhbXM6IHtSb2xlQXJuOiAnLi4uJ31cbiAqIH0pO1xuICogYGBgXG4gKlxuICogQCFhdHRyaWJ1dGUgc2VydmljZVxuICogICBAcmV0dXJuIFtBV1MuU1RTXSB0aGUgU1RTIHNlcnZpY2UgaW5zdGFuY2UgdXNlZCB0b1xuICogICAgIGdldCBhbmQgcmVmcmVzaCB0ZW1wb3JhcnkgY3JlZGVudGlhbHMgZnJvbSBBV1MgU1RTLlxuICogQG5vdGUgKHNlZSBjb25zdHJ1Y3RvcilcbiAqL1xuQVdTLkNoYWluYWJsZVRlbXBvcmFyeUNyZWRlbnRpYWxzID0gQVdTLnV0aWwuaW5oZXJpdChBV1MuQ3JlZGVudGlhbHMsIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgdGVtcG9yYXJ5IGNyZWRlbnRpYWxzIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMgW21hcF0gYSBzZXQgb2Ygb3B0aW9uc1xuICAgKiBAb3B0aW9uIG9wdGlvbnMgcGFyYW1zIFttYXBdICh7fSkgYSBtYXAgb2Ygb3B0aW9ucyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlXG4gICAqICAge0FXUy5TVFMuYXNzdW1lUm9sZX0gb3Ige0FXUy5TVFMuZ2V0U2Vzc2lvblRva2VufSBvcGVyYXRpb25zLlxuICAgKiAgIElmIGEgYFJvbGVBcm5gIHBhcmFtZXRlciBpcyBwYXNzZWQgaW4sIGNyZWRlbnRpYWxzIHdpbGwgYmUgYmFzZWQgb24gdGhlXG4gICAqICAgSUFNIHJvbGUuIElmIGEgYFNlcmlhbE51bWJlcmAgcGFyYW1ldGVyIGlzIHBhc3NlZCBpbiwge3Rva2VuQ29kZUZufSBtdXN0XG4gICAqICAgYWxzbyBiZSBwYXNzZWQgaW4gb3IgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gICAqIEBvcHRpb24gb3B0aW9ucyBtYXN0ZXJDcmVkZW50aWFscyBbQVdTLkNyZWRlbnRpYWxzXSB0aGUgbWFzdGVyIGNyZWRlbnRpYWxzXG4gICAqICAgdXNlZCB0byBnZXQgYW5kIHJlZnJlc2ggdGVtcG9yYXJ5IGNyZWRlbnRpYWxzIGZyb20gQVdTIFNUUy4gQnkgZGVmYXVsdCxcbiAgICogICBBV1MuY29uZmlnLmNyZWRlbnRpYWxzIG9yIEFXUy5jb25maWcuY3JlZGVudGlhbFByb3ZpZGVyIHdpbGwgYmUgdXNlZC5cbiAgICogQG9wdGlvbiBvcHRpb25zIHRva2VuQ29kZUZuIFtGdW5jdGlvbl0gKG51bGwpIEZ1bmN0aW9uIHRvIHByb3ZpZGVcbiAgICogICBgVG9rZW5Db2RlYCwgaWYgYFNlcmlhbE51bWJlcmAgaXMgcHJvdmlkZWQgZm9yIHByb2ZpbGUgaW4ge3BhcmFtc30uIEZ1bmN0aW9uXG4gICAqICAgaXMgY2FsbGVkIHdpdGggdmFsdWUgb2YgYFNlcmlhbE51bWJlcmAgYW5kIGBjYWxsYmFja2AsIGFuZCBzaG91bGQgcHJvdmlkZVxuICAgKiAgIHRoZSBgVG9rZW5Db2RlYCBvciBhbiBlcnJvciB0byB0aGUgY2FsbGJhY2sgaW4gdGhlIGZvcm1hdFxuICAgKiAgIGBjYWxsYmFjayhlcnIsIHRva2VuKWAuXG4gICAqIEBleGFtcGxlIENyZWF0aW5nIGEgbmV3IGNyZWRlbnRpYWxzIG9iamVjdCBmb3IgZ2VuZXJpYyB0ZW1wb3JhcnkgY3JlZGVudGlhbHNcbiAgICogICBBV1MuY29uZmlnLmNyZWRlbnRpYWxzID0gbmV3IEFXUy5DaGFpbmFibGVUZW1wb3JhcnlDcmVkZW50aWFscygpO1xuICAgKiBAZXhhbXBsZSBDcmVhdGluZyBhIG5ldyBjcmVkZW50aWFscyBvYmplY3QgZm9yIGFuIElBTSByb2xlXG4gICAqICAgQVdTLmNvbmZpZy5jcmVkZW50aWFscyA9IG5ldyBBV1MuQ2hhaW5hYmxlVGVtcG9yYXJ5Q3JlZGVudGlhbHMoe1xuICAgKiAgICAgcGFyYW1zOiB7XG4gICAqICAgICAgIFJvbGVBcm46ICdhcm46YXdzOmlhbTo6MTIzNDU2Nzg5MDpyb2xlL1RlbXBvcmFyeUNyZWRlbnRpYWxzJ1xuICAgKiAgICAgfVxuICAgKiAgIH0pO1xuICAgKiBAc2VlIEFXUy5TVFMuYXNzdW1lUm9sZVxuICAgKiBAc2VlIEFXUy5TVFMuZ2V0U2Vzc2lvblRva2VuXG4gICAqL1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gQ2hhaW5hYmxlVGVtcG9yYXJ5Q3JlZGVudGlhbHMob3B0aW9ucykge1xuICAgIEFXUy5DcmVkZW50aWFscy5jYWxsKHRoaXMpO1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHRoaXMuZXJyb3JDb2RlID0gJ0NoYWluYWJsZVRlbXBvcmFyeUNyZWRlbnRpYWxzUHJvdmlkZXJGYWlsdXJlJztcbiAgICB0aGlzLmV4cGlyZWQgPSB0cnVlO1xuICAgIHRoaXMudG9rZW5Db2RlRm4gPSBudWxsO1xuXG4gICAgdmFyIHBhcmFtcyA9IEFXUy51dGlsLmNvcHkob3B0aW9ucy5wYXJhbXMpIHx8IHt9O1xuICAgIGlmIChwYXJhbXMuUm9sZUFybikge1xuICAgICAgcGFyYW1zLlJvbGVTZXNzaW9uTmFtZSA9IHBhcmFtcy5Sb2xlU2Vzc2lvbk5hbWUgfHwgJ3RlbXBvcmFyeS1jcmVkZW50aWFscyc7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuU2VyaWFsTnVtYmVyKSB7XG4gICAgICBpZiAoIW9wdGlvbnMudG9rZW5Db2RlRm4gfHwgKHR5cGVvZiBvcHRpb25zLnRva2VuQ29kZUZuICE9PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgQVdTLnV0aWwuZXJyb3IoXG4gICAgICAgICAgbmV3IEVycm9yKCd0b2tlbkNvZGVGbiBtdXN0IGJlIGEgZnVuY3Rpb24gd2hlbiBwYXJhbXMuU2VyaWFsTnVtYmVyIGlzIGdpdmVuJyksXG4gICAgICAgICAge2NvZGU6IHRoaXMuZXJyb3JDb2RlfVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50b2tlbkNvZGVGbiA9IG9wdGlvbnMudG9rZW5Db2RlRm47XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjb25maWcgPSBBV1MudXRpbC5tZXJnZShcbiAgICAgIHtcbiAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgIGNyZWRlbnRpYWxzOiBvcHRpb25zLm1hc3RlckNyZWRlbnRpYWxzIHx8IEFXUy5jb25maWcuY3JlZGVudGlhbHNcbiAgICAgIH0sXG4gICAgICBvcHRpb25zLnN0c0NvbmZpZyB8fCB7fVxuICAgICk7XG4gICAgdGhpcy5zZXJ2aWNlID0gbmV3IFNUUyhjb25maWcpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWZyZXNoZXMgY3JlZGVudGlhbHMgdXNpbmcge0FXUy5TVFMuYXNzdW1lUm9sZX0gb3JcbiAgICoge0FXUy5TVFMuZ2V0U2Vzc2lvblRva2VufSwgZGVwZW5kaW5nIG9uIHdoZXRoZXIgYW4gSUFNIHJvbGUgQVJOIHdhcyBwYXNzZWRcbiAgICogdG8gdGhlIGNyZWRlbnRpYWxzIHtjb25zdHJ1Y3Rvcn0uXG4gICAqXG4gICAqIEBjYWxsYmFjayBjYWxsYmFjayBmdW5jdGlvbihlcnIpXG4gICAqICAgQ2FsbGVkIHdoZW4gdGhlIFNUUyBzZXJ2aWNlIHJlc3BvbmRzIChvciBmYWlscykuIFdoZW5cbiAgICogICB0aGlzIGNhbGxiYWNrIGlzIGNhbGxlZCB3aXRoIG5vIGVycm9yLCBpdCBtZWFucyB0aGF0IHRoZSBjcmVkZW50aWFsc1xuICAgKiAgIGluZm9ybWF0aW9uIGhhcyBiZWVuIGxvYWRlZCBpbnRvIHRoZSBvYmplY3QgKGFzIHRoZSBgYWNjZXNzS2V5SWRgLFxuICAgKiAgIGBzZWNyZXRBY2Nlc3NLZXlgLCBhbmQgYHNlc3Npb25Ub2tlbmAgcHJvcGVydGllcykuXG4gICAqICAgQHBhcmFtIGVyciBbRXJyb3JdIGlmIGFuIGVycm9yIG9jY3VycmVkLCB0aGlzIHZhbHVlIHdpbGwgYmUgZmlsbGVkXG4gICAqIEBzZWUgQVdTLkNyZWRlbnRpYWxzLmdldFxuICAgKi9cbiAgcmVmcmVzaDogZnVuY3Rpb24gcmVmcmVzaChjYWxsYmFjaykge1xuICAgIHRoaXMuY29hbGVzY2VSZWZyZXNoKGNhbGxiYWNrIHx8IEFXUy51dGlsLmZuLmNhbGxiYWNrKTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgbG9hZDogZnVuY3Rpb24gbG9hZChjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgb3BlcmF0aW9uID0gc2VsZi5zZXJ2aWNlLmNvbmZpZy5wYXJhbXMuUm9sZUFybiA/ICdhc3N1bWVSb2xlJyA6ICdnZXRTZXNzaW9uVG9rZW4nO1xuICAgIHRoaXMuZ2V0VG9rZW5Db2RlKGZ1bmN0aW9uIChlcnIsIHRva2VuQ29kZSkge1xuICAgICAgdmFyIHBhcmFtcyA9IHt9O1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodG9rZW5Db2RlKSB7XG4gICAgICAgIHBhcmFtcy5Ub2tlbkNvZGUgPSB0b2tlbkNvZGU7XG4gICAgICB9XG4gICAgICBzZWxmLnNlcnZpY2Vbb3BlcmF0aW9uXShwYXJhbXMsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICBzZWxmLnNlcnZpY2UuY3JlZGVudGlhbHNGcm9tKGRhdGEsIHNlbGYpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBnZXRUb2tlbkNvZGU6IGZ1bmN0aW9uIGdldFRva2VuQ29kZShjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodGhpcy50b2tlbkNvZGVGbikge1xuICAgICAgdGhpcy50b2tlbkNvZGVGbih0aGlzLnNlcnZpY2UuY29uZmlnLnBhcmFtcy5TZXJpYWxOdW1iZXIsIGZ1bmN0aW9uIChlcnIsIHRva2VuKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICB2YXIgbWVzc2FnZSA9IGVycjtcbiAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FsbGJhY2soXG4gICAgICAgICAgICBBV1MudXRpbC5lcnJvcihcbiAgICAgICAgICAgICAgbmV3IEVycm9yKCdFcnJvciBmZXRjaGluZyBNRkEgdG9rZW46ICcgKyBtZXNzYWdlKSxcbiAgICAgICAgICAgICAgeyBjb2RlOiBzZWxmLmVycm9yQ29kZX1cbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjayhudWxsLCB0b2tlbik7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgfVxuICB9XG59KTtcblxufSx7XCIuLi8uLi9jbGllbnRzL3N0c1wiOjksXCIuLi9jb3JlXCI6MTl9XSwyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgQVdTID0gcmVxdWlyZSgnLi4vY29yZScpO1xudmFyIENvZ25pdG9JZGVudGl0eSA9IHJlcXVpcmUoJy4uLy4uL2NsaWVudHMvY29nbml0b2lkZW50aXR5Jyk7XG52YXIgU1RTID0gcmVxdWlyZSgnLi4vLi4vY2xpZW50cy9zdHMnKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGNyZWRlbnRpYWxzIHJldHJpZXZlZCBmcm9tIFNUUyBXZWIgSWRlbnRpdHkgRmVkZXJhdGlvbiB1c2luZ1xuICogdGhlIEFtYXpvbiBDb2duaXRvIElkZW50aXR5IHNlcnZpY2UuXG4gKlxuICogQnkgZGVmYXVsdCB0aGlzIHByb3ZpZGVyIGdldHMgY3JlZGVudGlhbHMgdXNpbmcgdGhlXG4gKiB7QVdTLkNvZ25pdG9JZGVudGl0eS5nZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5fSBzZXJ2aWNlIG9wZXJhdGlvbiwgd2hpY2hcbiAqIHJlcXVpcmVzIGVpdGhlciBhbiBgSWRlbnRpdHlJZGAgb3IgYW4gYElkZW50aXR5UG9vbElkYCAoQW1hem9uIENvZ25pdG9cbiAqIElkZW50aXR5IFBvb2wgSUQpLCB3aGljaCBpcyB1c2VkIHRvIGNhbGwge0FXUy5Db2duaXRvSWRlbnRpdHkuZ2V0SWR9IHRvXG4gKiBvYnRhaW4gYW4gYElkZW50aXR5SWRgLiBJZiB0aGUgaWRlbnRpdHkgb3IgaWRlbnRpdHkgcG9vbCBpcyBub3QgY29uZmlndXJlZCBpblxuICogdGhlIEFtYXpvbiBDb2duaXRvIENvbnNvbGUgdG8gdXNlIElBTSByb2xlcyB3aXRoIHRoZSBhcHByb3ByaWF0ZSBwZXJtaXNzaW9ucyxcbiAqIHRoZW4gYWRkaXRpb25hbGx5IGEgYFJvbGVBcm5gIGlzIHJlcXVpcmVkIGNvbnRhaW5pbmcgdGhlIEFSTiBvZiB0aGUgSUFNIHRydXN0XG4gKiBwb2xpY3kgZm9yIHRoZSBBbWF6b24gQ29nbml0byByb2xlIHRoYXQgdGhlIHVzZXIgd2lsbCBsb2cgaW50by4gSWYgYSBgUm9sZUFybmBcbiAqIGlzIHByb3ZpZGVkLCB0aGVuIHRoaXMgcHJvdmlkZXIgZ2V0cyBjcmVkZW50aWFscyB1c2luZyB0aGVcbiAqIHtBV1MuU1RTLmFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHl9IHNlcnZpY2Ugb3BlcmF0aW9uLCBhZnRlciBmaXJzdCBnZXR0aW5nIGFuXG4gKiBPcGVuIElEIHRva2VuIGZyb20ge0FXUy5Db2duaXRvSWRlbnRpdHkuZ2V0T3BlbklkVG9rZW59LlxuICpcbiAqIEluIGFkZGl0aW9uLCBpZiB0aGlzIGNyZWRlbnRpYWwgcHJvdmlkZXIgaXMgdXNlZCB0byBwcm92aWRlIGF1dGhlbnRpY2F0ZWRcbiAqIGxvZ2luLCB0aGUgYExvZ2luc2AgbWFwIG1heSBiZSBzZXQgdG8gdGhlIHRva2VucyBwcm92aWRlZCBieSB0aGUgcmVzcGVjdGl2ZVxuICogaWRlbnRpdHkgcHJvdmlkZXJzLiBTZWUge2NvbnN0cnVjdG9yfSBmb3IgYW4gZXhhbXBsZSBvbiBjcmVhdGluZyBhIGNyZWRlbnRpYWxzXG4gKiBvYmplY3Qgd2l0aCBwcm9wZXIgcHJvcGVydHkgdmFsdWVzLlxuICpcbiAqICMjIFJlZnJlc2hpbmcgQ3JlZGVudGlhbHMgZnJvbSBJZGVudGl0eSBTZXJ2aWNlXG4gKlxuICogSW4gYWRkaXRpb24gdG8gQVdTIGNyZWRlbnRpYWxzIGV4cGlyaW5nIGFmdGVyIGEgZ2l2ZW4gYW1vdW50IG9mIHRpbWUsIHRoZVxuICogbG9naW4gdG9rZW4gZnJvbSB0aGUgaWRlbnRpdHkgcHJvdmlkZXIgd2lsbCBhbHNvIGV4cGlyZS4gT25jZSB0aGlzIHRva2VuXG4gKiBleHBpcmVzLCBpdCB3aWxsIG5vdCBiZSB1c2FibGUgdG8gcmVmcmVzaCBBV1MgY3JlZGVudGlhbHMsIGFuZCBhbm90aGVyXG4gKiB0b2tlbiB3aWxsIGJlIG5lZWRlZC4gVGhlIFNESyBkb2VzIG5vdCBtYW5hZ2UgcmVmcmVzaGluZyBvZiB0aGUgdG9rZW4gdmFsdWUsXG4gKiBidXQgdGhpcyBjYW4gYmUgZG9uZSB0aHJvdWdoIGEgXCJyZWZyZXNoIHRva2VuXCIgc3VwcG9ydGVkIGJ5IG1vc3QgaWRlbnRpdHlcbiAqIHByb3ZpZGVycy4gQ29uc3VsdCB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGlkZW50aXR5IHByb3ZpZGVyIGZvciByZWZyZXNoaW5nXG4gKiB0b2tlbnMuIE9uY2UgdGhlIHJlZnJlc2hlZCB0b2tlbiBpcyBhY3F1aXJlZCwgeW91IHNob3VsZCBtYWtlIHN1cmUgdG8gdXBkYXRlXG4gKiB0aGlzIG5ldyB0b2tlbiBpbiB0aGUgY3JlZGVudGlhbHMgb2JqZWN0J3Mge3BhcmFtc30gcHJvcGVydHkuIFRoZSBmb2xsb3dpbmdcbiAqIGNvZGUgd2lsbCB1cGRhdGUgdGhlIFdlYklkZW50aXR5VG9rZW4sIGFzc3VtaW5nIHlvdSBoYXZlIHJldHJpZXZlZCBhbiB1cGRhdGVkXG4gKiB0b2tlbiBmcm9tIHRoZSBpZGVudGl0eSBwcm92aWRlcjpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBBV1MuY29uZmlnLmNyZWRlbnRpYWxzLnBhcmFtcy5Mb2dpbnNbJ2dyYXBoLmZhY2Vib29rLmNvbSddID0gdXBkYXRlZFRva2VuO1xuICogYGBgXG4gKlxuICogRnV0dXJlIGNhbGxzIHRvIGBjcmVkZW50aWFscy5yZWZyZXNoKClgIHdpbGwgbm93IHVzZSB0aGUgbmV3IHRva2VuLlxuICpcbiAqIEAhYXR0cmlidXRlIHBhcmFtc1xuICogICBAcmV0dXJuIFttYXBdIHRoZSBtYXAgb2YgcGFyYW1zIHBhc3NlZCB0b1xuICogICAgIHtBV1MuQ29nbml0b0lkZW50aXR5LmdldElkfSxcbiAqICAgICB7QVdTLkNvZ25pdG9JZGVudGl0eS5nZXRPcGVuSWRUb2tlbn0sIGFuZFxuICogICAgIHtBV1MuU1RTLmFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHl9LiBUbyB1cGRhdGUgdGhlIHRva2VuLCBzZXQgdGhlXG4gKiAgICAgYHBhcmFtcy5XZWJJZGVudGl0eVRva2VuYCBwcm9wZXJ0eS5cbiAqIEAhYXR0cmlidXRlIGRhdGFcbiAqICAgQHJldHVybiBbbWFwXSB0aGUgcmF3IGRhdGEgcmVzcG9uc2UgZnJvbSB0aGUgY2FsbCB0b1xuICogICAgIHtBV1MuQ29nbml0b0lkZW50aXR5LmdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHl9LCBvclxuICogICAgIHtBV1MuU1RTLmFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHl9LiBVc2UgdGhpcyBpZiB5b3Ugd2FudCB0byBnZXRcbiAqICAgICBhY2Nlc3MgdG8gb3RoZXIgcHJvcGVydGllcyBmcm9tIHRoZSByZXNwb25zZS5cbiAqIEAhYXR0cmlidXRlIGlkZW50aXR5SWRcbiAqICAgQHJldHVybiBbU3RyaW5nXSB0aGUgQ29nbml0byBJRCByZXR1cm5lZCBieSB0aGUgbGFzdCBjYWxsIHRvXG4gKiAgICAge0FXUy5Db2duaXRvSWRlbnRpdHkuZ2V0T3BlbklkVG9rZW59LiBUaGlzIElEIHJlcHJlc2VudHMgdGhlIGFjdHVhbFxuICogICAgIGZpbmFsIHJlc29sdmVkIGlkZW50aXR5IElEIGZyb20gQW1hem9uIENvZ25pdG8uXG4gKi9cbkFXUy5Db2duaXRvSWRlbnRpdHlDcmVkZW50aWFscyA9IEFXUy51dGlsLmluaGVyaXQoQVdTLkNyZWRlbnRpYWxzLCB7XG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGxvY2FsU3RvcmFnZUtleToge1xuICAgIGlkOiAnYXdzLmNvZ25pdG8uaWRlbnRpdHktaWQuJyxcbiAgICBwcm92aWRlcnM6ICdhd3MuY29nbml0by5pZGVudGl0eS1wcm92aWRlcnMuJ1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGNyZWRlbnRpYWxzIG9iamVjdC5cbiAgICogQGV4YW1wbGUgQ3JlYXRpbmcgYSBuZXcgY3JlZGVudGlhbHMgb2JqZWN0XG4gICAqICAgQVdTLmNvbmZpZy5jcmVkZW50aWFscyA9IG5ldyBBV1MuQ29nbml0b0lkZW50aXR5Q3JlZGVudGlhbHMoe1xuICAgKlxuICAgKiAgICAgLy8gZWl0aGVyIElkZW50aXR5UG9vbElkIG9yIElkZW50aXR5SWQgaXMgcmVxdWlyZWRcbiAgICogICAgIC8vIFNlZSB0aGUgSWRlbnRpdHlQb29sSWQgcGFyYW0gZm9yIEFXUy5Db2duaXRvSWRlbnRpdHkuZ2V0SUQgKGxpbmtlZCBiZWxvdylcbiAgICogICAgIC8vIFNlZSB0aGUgSWRlbnRpdHlJZCBwYXJhbSBmb3IgQVdTLkNvZ25pdG9JZGVudGl0eS5nZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5XG4gICAqICAgICAvLyBvciBBV1MuQ29nbml0b0lkZW50aXR5LmdldE9wZW5JZFRva2VuIChsaW5rZWQgYmVsb3cpXG4gICAqICAgICBJZGVudGl0eVBvb2xJZDogJ3VzLWVhc3QtMToxNjk5ZWJjMC03OTAwLTQwOTktYjkxMC0yZGY5NGY1MmEwMzAnLFxuICAgKiAgICAgSWRlbnRpdHlJZDogJ3VzLWVhc3QtMToxMjhkMGE3NC1jODJmLTQ1NTMtOTE2ZC05MDA1M2U0YThiMGYnXG4gICAqXG4gICAqICAgICAvLyBvcHRpb25hbCwgb25seSBuZWNlc3Nhcnkgd2hlbiB0aGUgaWRlbnRpdHkgcG9vbCBpcyBub3QgY29uZmlndXJlZFxuICAgKiAgICAgLy8gdG8gdXNlIElBTSByb2xlcyBpbiB0aGUgQW1hem9uIENvZ25pdG8gQ29uc29sZVxuICAgKiAgICAgLy8gU2VlIHRoZSBSb2xlQXJuIHBhcmFtIGZvciBBV1MuU1RTLmFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHkgKGxpbmtlZCBiZWxvdylcbiAgICogICAgIFJvbGVBcm46ICdhcm46YXdzOmlhbTo6MTIzNDU2Nzg5MDpyb2xlL01ZQVBQLUNvZ25pdG9JZGVudGl0eScsXG4gICAqXG4gICAqICAgICAvLyBvcHRpb25hbCB0b2tlbnMsIHVzZWQgZm9yIGF1dGhlbnRpY2F0ZWQgbG9naW5cbiAgICogICAgIC8vIFNlZSB0aGUgTG9naW5zIHBhcmFtIGZvciBBV1MuQ29nbml0b0lkZW50aXR5LmdldElEIChsaW5rZWQgYmVsb3cpXG4gICAqICAgICBMb2dpbnM6IHtcbiAgICogICAgICAgJ2dyYXBoLmZhY2Vib29rLmNvbSc6ICdGQlRPS0VOJyxcbiAgICogICAgICAgJ3d3dy5hbWF6b24uY29tJzogJ0FNQVpPTlRPS0VOJyxcbiAgICogICAgICAgJ2FjY291bnRzLmdvb2dsZS5jb20nOiAnR09PR0xFVE9LRU4nLFxuICAgKiAgICAgICAnYXBpLnR3aXR0ZXIuY29tJzogJ1RXSVRURVJUT0tFTicsXG4gICAqICAgICAgICd3d3cuZGlnaXRzLmNvbSc6ICdESUdJVFNUT0tFTidcbiAgICogICAgIH0sXG4gICAqXG4gICAqICAgICAvLyBvcHRpb25hbCBuYW1lLCBkZWZhdWx0cyB0byB3ZWItaWRlbnRpdHlcbiAgICogICAgIC8vIFNlZSB0aGUgUm9sZVNlc3Npb25OYW1lIHBhcmFtIGZvciBBV1MuU1RTLmFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHkgKGxpbmtlZCBiZWxvdylcbiAgICogICAgIFJvbGVTZXNzaW9uTmFtZTogJ3dlYicsXG4gICAqXG4gICAqICAgICAvLyBvcHRpb25hbCwgb25seSBuZWNlc3Nhcnkgd2hlbiBhcHBsaWNhdGlvbiBydW5zIGluIGEgYnJvd3NlclxuICAgKiAgICAgLy8gYW5kIG11bHRpcGxlIHVzZXJzIGFyZSBzaWduZWQgaW4gYXQgb25jZSwgdXNlZCBmb3IgY2FjaGluZ1xuICAgKiAgICAgTG9naW5JZDogJ2V4YW1wbGVAZ21haWwuY29tJ1xuICAgKlxuICAgKiAgIH0sIHtcbiAgICogICAgICAvLyBvcHRpb25hbGx5IHByb3ZpZGUgY29uZmlndXJhdGlvbiB0byBhcHBseSB0byB0aGUgdW5kZXJseWluZyBzZXJ2aWNlIGNsaWVudHNcbiAgICogICAgICAvLyBpZiBjb25maWd1cmF0aW9uIGlzIG5vdCBwcm92aWRlZCwgdGhlbiBjb25maWd1cmF0aW9uIHdpbGwgYmUgcHVsbGVkIGZyb20gQVdTLmNvbmZpZ1xuICAgKlxuICAgKiAgICAgIC8vIHJlZ2lvbiBzaG91bGQgbWF0Y2ggdGhlIHJlZ2lvbiB5b3VyIGlkZW50aXR5IHBvb2wgaXMgbG9jYXRlZCBpblxuICAgKiAgICAgIHJlZ2lvbjogJ3VzLWVhc3QtMScsXG4gICAqXG4gICAqICAgICAgLy8gc3BlY2lmeSB0aW1lb3V0IG9wdGlvbnNcbiAgICogICAgICBodHRwT3B0aW9uczoge1xuICAgKiAgICAgICAgdGltZW91dDogMTAwXG4gICAqICAgICAgfVxuICAgKiAgIH0pO1xuICAgKiBAc2VlIEFXUy5Db2duaXRvSWRlbnRpdHkuZ2V0SWRcbiAgICogQHNlZSBBV1MuQ29nbml0b0lkZW50aXR5LmdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHlcbiAgICogQHNlZSBBV1MuU1RTLmFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHlcbiAgICogQHNlZSBBV1MuQ29nbml0b0lkZW50aXR5LmdldE9wZW5JZFRva2VuXG4gICAqIEBzZWUgQVdTLkNvbmZpZ1xuICAgKiBAbm90ZSBJZiBhIHJlZ2lvbiBpcyBub3QgcHJvdmlkZWQgaW4gdGhlIGdsb2JhbCBBV1MuY29uZmlnLCBvclxuICAgKiAgIHNwZWNpZmllZCBpbiB0aGUgYGNsaWVudENvbmZpZ2AgdG8gdGhlIENvZ25pdG9JZGVudGl0eUNyZWRlbnRpYWxzXG4gICAqICAgY29uc3RydWN0b3IsIHlvdSBtYXkgZW5jb3VudGVyIGEgJ01pc3NpbmcgY3JlZGVudGlhbHMgaW4gY29uZmlnJyBlcnJvclxuICAgKiAgIHdoZW4gY2FsbGluZyBtYWtpbmcgYSBzZXJ2aWNlIGNhbGwuXG4gICAqL1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gQ29nbml0b0lkZW50aXR5Q3JlZGVudGlhbHMocGFyYW1zLCBjbGllbnRDb25maWcpIHtcbiAgICBBV1MuQ3JlZGVudGlhbHMuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmV4cGlyZWQgPSB0cnVlO1xuICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgIHRoaXMuZGF0YSA9IG51bGw7XG4gICAgdGhpcy5faWRlbnRpdHlJZCA9IG51bGw7XG4gICAgdGhpcy5fY2xpZW50Q29uZmlnID0gQVdTLnV0aWwuY29weShjbGllbnRDb25maWcgfHwge30pO1xuICAgIHRoaXMubG9hZENhY2hlZElkKCk7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnaWRlbnRpdHlJZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYubG9hZENhY2hlZElkKCk7XG4gICAgICAgIHJldHVybiBzZWxmLl9pZGVudGl0eUlkIHx8IHNlbGYucGFyYW1zLklkZW50aXR5SWQ7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbihpZGVudGl0eUlkKSB7XG4gICAgICAgIHNlbGYuX2lkZW50aXR5SWQgPSBpZGVudGl0eUlkO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWZyZXNoZXMgY3JlZGVudGlhbHMgdXNpbmcge0FXUy5Db2duaXRvSWRlbnRpdHkuZ2V0Q3JlZGVudGlhbHNGb3JJZGVudGl0eX0sXG4gICAqIG9yIHtBV1MuU1RTLmFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHl9LlxuICAgKlxuICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyKVxuICAgKiAgIENhbGxlZCB3aGVuIHRoZSBTVFMgc2VydmljZSByZXNwb25kcyAob3IgZmFpbHMpLiBXaGVuXG4gICAqICAgdGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aCBubyBlcnJvciwgaXQgbWVhbnMgdGhhdCB0aGUgY3JlZGVudGlhbHNcbiAgICogICBpbmZvcm1hdGlvbiBoYXMgYmVlbiBsb2FkZWQgaW50byB0aGUgb2JqZWN0IChhcyB0aGUgYGFjY2Vzc0tleUlkYCxcbiAgICogICBgc2VjcmV0QWNjZXNzS2V5YCwgYW5kIGBzZXNzaW9uVG9rZW5gIHByb3BlcnRpZXMpLlxuICAgKiAgIEBwYXJhbSBlcnIgW0Vycm9yXSBpZiBhbiBlcnJvciBvY2N1cnJlZCwgdGhpcyB2YWx1ZSB3aWxsIGJlIGZpbGxlZFxuICAgKiBAc2VlIEFXUy5DcmVkZW50aWFscy5nZXRcbiAgICovXG4gIHJlZnJlc2g6IGZ1bmN0aW9uIHJlZnJlc2goY2FsbGJhY2spIHtcbiAgICB0aGlzLmNvYWxlc2NlUmVmcmVzaChjYWxsYmFjayB8fCBBV1MudXRpbC5mbi5jYWxsYmFjayk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIGxvYWQ6IGZ1bmN0aW9uIGxvYWQoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2VsZi5jcmVhdGVDbGllbnRzKCk7XG4gICAgc2VsZi5kYXRhID0gbnVsbDtcbiAgICBzZWxmLl9pZGVudGl0eUlkID0gbnVsbDtcbiAgICBzZWxmLmdldElkKGZ1bmN0aW9uKGVycikge1xuICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgaWYgKCFzZWxmLnBhcmFtcy5Sb2xlQXJuKSB7XG4gICAgICAgICAgc2VsZi5nZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5KGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLmdldENyZWRlbnRpYWxzRnJvbVNUUyhjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuY2xlYXJJZE9uTm90QXV0aG9yaXplZChlcnIpO1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIGNhY2hlZCBDb2duaXRvIElEIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudGx5IGNvbmZpZ3VyZWRcbiAgICogaWRlbnRpdHkgcG9vbCBJRC4gVXNlIHRoaXMgdG8gbWFudWFsbHkgaW52YWxpZGF0ZSB5b3VyIGNhY2hlIGlmXG4gICAqIHRoZSBpZGVudGl0eSBwb29sIElEIHdhcyBkZWxldGVkLlxuICAgKi9cbiAgY2xlYXJDYWNoZWRJZDogZnVuY3Rpb24gY2xlYXJDYWNoZSgpIHtcbiAgICB0aGlzLl9pZGVudGl0eUlkID0gbnVsbDtcbiAgICBkZWxldGUgdGhpcy5wYXJhbXMuSWRlbnRpdHlJZDtcblxuICAgIHZhciBwb29sSWQgPSB0aGlzLnBhcmFtcy5JZGVudGl0eVBvb2xJZDtcbiAgICB2YXIgbG9naW5JZCA9IHRoaXMucGFyYW1zLkxvZ2luSWQgfHwgJyc7XG4gICAgZGVsZXRlIHRoaXMuc3RvcmFnZVt0aGlzLmxvY2FsU3RvcmFnZUtleS5pZCArIHBvb2xJZCArIGxvZ2luSWRdO1xuICAgIGRlbGV0ZSB0aGlzLnN0b3JhZ2VbdGhpcy5sb2NhbFN0b3JhZ2VLZXkucHJvdmlkZXJzICsgcG9vbElkICsgbG9naW5JZF07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY2xlYXJJZE9uTm90QXV0aG9yaXplZDogZnVuY3Rpb24gY2xlYXJJZE9uTm90QXV0aG9yaXplZChlcnIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKGVyci5jb2RlID09ICdOb3RBdXRob3JpemVkRXhjZXB0aW9uJykge1xuICAgICAgc2VsZi5jbGVhckNhY2hlZElkKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBDb2duaXRvIElELCBsb2FkaW5nIGZyb20gY2FjaGUgaWYgaXQgd2FzIGFscmVhZHkgcmV0cmlldmVkXG4gICAqIG9uIHRoaXMgZGV2aWNlLlxuICAgKlxuICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyLCBpZGVudGl0eUlkKVxuICAgKiAgIEBwYXJhbSBlcnIgW0Vycm9yLCBudWxsXSBhbiBlcnJvciBvYmplY3QgaWYgdGhlIGNhbGwgZmFpbGVkIG9yIG51bGwgaWZcbiAgICogICAgIGl0IHN1Y2NlZWRlZC5cbiAgICogICBAcGFyYW0gaWRlbnRpdHlJZCBbU3RyaW5nLCBudWxsXSBpZiBzdWNjZXNzZnVsLCB0aGUgY2FsbGJhY2sgd2lsbCByZXR1cm5cbiAgICogICAgIHRoZSBDb2duaXRvIElELlxuICAgKiBAbm90ZSBJZiBub3QgbG9hZGVkIGV4cGxpY2l0bHksIHRoZSBDb2duaXRvIElEIGlzIGxvYWRlZCBhbmQgc3RvcmVkIGluXG4gICAqICAgbG9jYWxTdG9yYWdlIGluIHRoZSBicm93c2VyIGVudmlyb25tZW50IG9mIGEgZGV2aWNlLlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGdldElkOiBmdW5jdGlvbiBnZXRJZChjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHNlbGYucGFyYW1zLklkZW50aXR5SWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgc2VsZi5wYXJhbXMuSWRlbnRpdHlJZCk7XG4gICAgfVxuXG4gICAgc2VsZi5jb2duaXRvLmdldElkKGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgICAgaWYgKCFlcnIgJiYgZGF0YS5JZGVudGl0eUlkKSB7XG4gICAgICAgIHNlbGYucGFyYW1zLklkZW50aXR5SWQgPSBkYXRhLklkZW50aXR5SWQ7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEuSWRlbnRpdHlJZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgbG9hZENyZWRlbnRpYWxzOiBmdW5jdGlvbiBsb2FkQ3JlZGVudGlhbHMoZGF0YSwgY3JlZGVudGlhbHMpIHtcbiAgICBpZiAoIWRhdGEgfHwgIWNyZWRlbnRpYWxzKSByZXR1cm47XG4gICAgY3JlZGVudGlhbHMuZXhwaXJlZCA9IGZhbHNlO1xuICAgIGNyZWRlbnRpYWxzLmFjY2Vzc0tleUlkID0gZGF0YS5DcmVkZW50aWFscy5BY2Nlc3NLZXlJZDtcbiAgICBjcmVkZW50aWFscy5zZWNyZXRBY2Nlc3NLZXkgPSBkYXRhLkNyZWRlbnRpYWxzLlNlY3JldEtleTtcbiAgICBjcmVkZW50aWFscy5zZXNzaW9uVG9rZW4gPSBkYXRhLkNyZWRlbnRpYWxzLlNlc3Npb25Ub2tlbjtcbiAgICBjcmVkZW50aWFscy5leHBpcmVUaW1lID0gZGF0YS5DcmVkZW50aWFscy5FeHBpcmF0aW9uO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHk6IGZ1bmN0aW9uIGdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHkoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2VsZi5jb2duaXRvLmdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHkoZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG4gICAgICBpZiAoIWVycikge1xuICAgICAgICBzZWxmLmNhY2hlSWQoZGF0YSk7XG4gICAgICAgIHNlbGYuZGF0YSA9IGRhdGE7XG4gICAgICAgIHNlbGYubG9hZENyZWRlbnRpYWxzKHNlbGYuZGF0YSwgc2VsZik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLmNsZWFySWRPbk5vdEF1dGhvcml6ZWQoZXJyKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZ2V0Q3JlZGVudGlhbHNGcm9tU1RTOiBmdW5jdGlvbiBnZXRDcmVkZW50aWFsc0Zyb21TVFMoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2VsZi5jb2duaXRvLmdldE9wZW5JZFRva2VuKGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgc2VsZi5jYWNoZUlkKGRhdGEpO1xuICAgICAgICBzZWxmLnBhcmFtcy5XZWJJZGVudGl0eVRva2VuID0gZGF0YS5Ub2tlbjtcbiAgICAgICAgc2VsZi53ZWJJZGVudGl0eUNyZWRlbnRpYWxzLnJlZnJlc2goZnVuY3Rpb24od2ViRXJyKSB7XG4gICAgICAgICAgaWYgKCF3ZWJFcnIpIHtcbiAgICAgICAgICAgIHNlbGYuZGF0YSA9IHNlbGYud2ViSWRlbnRpdHlDcmVkZW50aWFscy5kYXRhO1xuICAgICAgICAgICAgc2VsZi5zdHMuY3JlZGVudGlhbHNGcm9tKHNlbGYuZGF0YSwgc2VsZik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhbGxiYWNrKHdlYkVycik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5jbGVhcklkT25Ob3RBdXRob3JpemVkKGVycik7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgbG9hZENhY2hlZElkOiBmdW5jdGlvbiBsb2FkQ2FjaGVkSWQoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gaW4gdGhlIGJyb3dzZXIgd2Ugc291cmNlIGRlZmF1bHQgSWRlbnRpdHlJZCBmcm9tIGxvY2FsU3RvcmFnZVxuICAgIGlmIChBV1MudXRpbC5pc0Jyb3dzZXIoKSAmJiAhc2VsZi5wYXJhbXMuSWRlbnRpdHlJZCkge1xuICAgICAgdmFyIGlkID0gc2VsZi5nZXRTdG9yYWdlKCdpZCcpO1xuICAgICAgaWYgKGlkICYmIHNlbGYucGFyYW1zLkxvZ2lucykge1xuICAgICAgICB2YXIgYWN0dWFsUHJvdmlkZXJzID0gT2JqZWN0LmtleXMoc2VsZi5wYXJhbXMuTG9naW5zKTtcbiAgICAgICAgdmFyIGNhY2hlZFByb3ZpZGVycyA9XG4gICAgICAgICAgKHNlbGYuZ2V0U3RvcmFnZSgncHJvdmlkZXJzJykgfHwgJycpLnNwbGl0KCcsJyk7XG5cbiAgICAgICAgLy8gb25seSBsb2FkIElEIGlmIGF0IGxlYXN0IG9uZSBwcm92aWRlciB1c2VkIHRoaXMgSUQgYmVmb3JlXG4gICAgICAgIHZhciBpbnRlcnNlY3QgPSBjYWNoZWRQcm92aWRlcnMuZmlsdGVyKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICByZXR1cm4gYWN0dWFsUHJvdmlkZXJzLmluZGV4T2YobikgIT09IC0xO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGludGVyc2VjdC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICBzZWxmLnBhcmFtcy5JZGVudGl0eUlkID0gaWQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWQpIHtcbiAgICAgICAgc2VsZi5wYXJhbXMuSWRlbnRpdHlJZCA9IGlkO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBjcmVhdGVDbGllbnRzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2xpZW50Q29uZmlnID0gdGhpcy5fY2xpZW50Q29uZmlnO1xuICAgIHRoaXMud2ViSWRlbnRpdHlDcmVkZW50aWFscyA9IHRoaXMud2ViSWRlbnRpdHlDcmVkZW50aWFscyB8fFxuICAgICAgbmV3IEFXUy5XZWJJZGVudGl0eUNyZWRlbnRpYWxzKHRoaXMucGFyYW1zLCBjbGllbnRDb25maWcpO1xuICAgIGlmICghdGhpcy5jb2duaXRvKSB7XG4gICAgICB2YXIgY29nbml0b0NvbmZpZyA9IEFXUy51dGlsLm1lcmdlKHt9LCBjbGllbnRDb25maWcpO1xuICAgICAgY29nbml0b0NvbmZpZy5wYXJhbXMgPSB0aGlzLnBhcmFtcztcbiAgICAgIHRoaXMuY29nbml0byA9IG5ldyBDb2duaXRvSWRlbnRpdHkoY29nbml0b0NvbmZpZyk7XG4gICAgfVxuICAgIHRoaXMuc3RzID0gdGhpcy5zdHMgfHwgbmV3IFNUUyhjbGllbnRDb25maWcpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNhY2hlSWQ6IGZ1bmN0aW9uIGNhY2hlSWQoZGF0YSkge1xuICAgIHRoaXMuX2lkZW50aXR5SWQgPSBkYXRhLklkZW50aXR5SWQ7XG4gICAgdGhpcy5wYXJhbXMuSWRlbnRpdHlJZCA9IHRoaXMuX2lkZW50aXR5SWQ7XG5cbiAgICAvLyBjYWNoZSB0aGlzIElkZW50aXR5SWQgaW4gYnJvd3NlciBsb2NhbFN0b3JhZ2UgaWYgcG9zc2libGVcbiAgICBpZiAoQVdTLnV0aWwuaXNCcm93c2VyKCkpIHtcbiAgICAgIHRoaXMuc2V0U3RvcmFnZSgnaWQnLCBkYXRhLklkZW50aXR5SWQpO1xuXG4gICAgICBpZiAodGhpcy5wYXJhbXMuTG9naW5zKSB7XG4gICAgICAgIHRoaXMuc2V0U3RvcmFnZSgncHJvdmlkZXJzJywgT2JqZWN0LmtleXModGhpcy5wYXJhbXMuTG9naW5zKS5qb2luKCcsJykpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBnZXRTdG9yYWdlOiBmdW5jdGlvbiBnZXRTdG9yYWdlKGtleSkge1xuICAgIHJldHVybiB0aGlzLnN0b3JhZ2VbdGhpcy5sb2NhbFN0b3JhZ2VLZXlba2V5XSArIHRoaXMucGFyYW1zLklkZW50aXR5UG9vbElkICsgKHRoaXMucGFyYW1zLkxvZ2luSWQgfHwgJycpXTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBzZXRTdG9yYWdlOiBmdW5jdGlvbiBzZXRTdG9yYWdlKGtleSwgdmFsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuc3RvcmFnZVt0aGlzLmxvY2FsU3RvcmFnZUtleVtrZXldICsgdGhpcy5wYXJhbXMuSWRlbnRpdHlQb29sSWQgKyAodGhpcy5wYXJhbXMuTG9naW5JZCB8fCAnJyldID0gdmFsO1xuICAgIH0gY2F0Y2ggKF8pIHt9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgc3RvcmFnZTogKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgc3RvcmFnZSA9IEFXUy51dGlsLmlzQnJvd3NlcigpICYmIHdpbmRvdy5sb2NhbFN0b3JhZ2UgIT09IG51bGwgJiYgdHlwZW9mIHdpbmRvdy5sb2NhbFN0b3JhZ2UgPT09ICdvYmplY3QnID9cbiAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlIDoge307XG5cbiAgICAgIC8vIFRlc3Qgc2V0L3JlbW92ZSB3aGljaCB3b3VsZCB0aHJvdyBhbiBlcnJvciBpbiBTYWZhcmkncyBwcml2YXRlIGJyb3dzaW5nXG4gICAgICBzdG9yYWdlWydhd3MudGVzdC1zdG9yYWdlJ10gPSAnZm9vYmFyJztcbiAgICAgIGRlbGV0ZSBzdG9yYWdlWydhd3MudGVzdC1zdG9yYWdlJ107XG5cbiAgICAgIHJldHVybiBzdG9yYWdlO1xuICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH0pKClcbn0pO1xuXG59LHtcIi4uLy4uL2NsaWVudHMvY29nbml0b2lkZW50aXR5XCI6OCxcIi4uLy4uL2NsaWVudHMvc3RzXCI6OSxcIi4uL2NvcmVcIjoxOX1dLDIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBBV1MgPSByZXF1aXJlKCcuLi9jb3JlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNyZWRlbnRpYWwgcHJvdmlkZXIgY2hhaW4gdGhhdCBzZWFyY2hlcyBmb3IgQVdTIGNyZWRlbnRpYWxzXG4gKiBpbiBhIGxpc3Qgb2YgY3JlZGVudGlhbCBwcm92aWRlcnMgc3BlY2lmaWVkIGJ5IHRoZSB7cHJvdmlkZXJzfSBwcm9wZXJ0eS5cbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgY2hhaW4gd2lsbCB1c2UgdGhlIHtkZWZhdWx0UHJvdmlkZXJzfSB0byByZXNvbHZlIGNyZWRlbnRpYWxzLlxuICogVGhlc2UgcHJvdmlkZXJzIHdpbGwgbG9vayBpbiB0aGUgZW52aXJvbm1lbnQgdXNpbmcgdGhlXG4gKiB7QVdTLkVudmlyb25tZW50Q3JlZGVudGlhbHN9IGNsYXNzIHdpdGggdGhlICdBV1MnIGFuZCAnQU1BWk9OJyBwcmVmaXhlcy5cbiAqXG4gKiAjIyBTZXR0aW5nIFByb3ZpZGVyc1xuICpcbiAqIEVhY2ggcHJvdmlkZXIgaW4gdGhlIHtwcm92aWRlcnN9IGxpc3Qgc2hvdWxkIGJlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gKiBhIHtBV1MuQ3JlZGVudGlhbHN9IG9iamVjdCwgb3IgYSBoYXJkY29kZWQgY3JlZGVudGlhbHMgb2JqZWN0LiBUaGUgZnVuY3Rpb25cbiAqIGZvcm0gYWxsb3dzIGZvciBkZWxheWVkIGV4ZWN1dGlvbiBvZiB0aGUgY3JlZGVudGlhbCBjb25zdHJ1Y3Rpb24uXG4gKlxuICogIyMgUmVzb2x2aW5nIENyZWRlbnRpYWxzIGZyb20gYSBDaGFpblxuICpcbiAqIENhbGwge3Jlc29sdmV9IHRvIHJldHVybiB0aGUgZmlyc3QgdmFsaWQgY3JlZGVudGlhbCBvYmplY3QgdGhhdCBjYW4gYmVcbiAqIGxvYWRlZCBieSB0aGUgcHJvdmlkZXIgY2hhaW4uXG4gKlxuICogRm9yIGV4YW1wbGUsIHRvIHJlc29sdmUgYSBjaGFpbiB3aXRoIGEgY3VzdG9tIHByb3ZpZGVyIHRoYXQgY2hlY2tzIGEgZmlsZVxuICogb24gZGlzayBhZnRlciB0aGUgc2V0IG9mIHtkZWZhdWx0UHJvdmlkZXJzfTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiB2YXIgZGlza1Byb3ZpZGVyID0gbmV3IEFXUy5GaWxlU3lzdGVtQ3JlZGVudGlhbHMoJy4vY3JlZHMuanNvbicpO1xuICogdmFyIGNoYWluID0gbmV3IEFXUy5DcmVkZW50aWFsUHJvdmlkZXJDaGFpbigpO1xuICogY2hhaW4ucHJvdmlkZXJzLnB1c2goZGlza1Byb3ZpZGVyKTtcbiAqIGNoYWluLnJlc29sdmUoKTtcbiAqIGBgYFxuICpcbiAqIFRoZSBhYm92ZSBjb2RlIHdpbGwgcmV0dXJuIHRoZSBgZGlza1Byb3ZpZGVyYCBvYmplY3QgaWYgdGhlXG4gKiBmaWxlIGNvbnRhaW5zIGNyZWRlbnRpYWxzIGFuZCB0aGUgYGRlZmF1bHRQcm92aWRlcnNgIGRvIG5vdCBjb250YWluXG4gKiBhbnkgY3JlZGVudGlhbCBzZXR0aW5ncy5cbiAqXG4gKiBAIWF0dHJpYnV0ZSBwcm92aWRlcnNcbiAqICAgQHJldHVybiBbQXJyYXk8QVdTLkNyZWRlbnRpYWxzLCBGdW5jdGlvbj5dXG4gKiAgICAgYSBsaXN0IG9mIGNyZWRlbnRpYWxzIG9iamVjdHMgb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIGNyZWRlbnRpYWxzXG4gKiAgICAgb2JqZWN0cy4gSWYgdGhlIHByb3ZpZGVyIGlzIGEgZnVuY3Rpb24sIHRoZSBmdW5jdGlvbiB3aWxsIGJlXG4gKiAgICAgZXhlY3V0ZWQgbGF6aWx5IHdoZW4gdGhlIHByb3ZpZGVyIG5lZWRzIHRvIGJlIGNoZWNrZWQgZm9yIHZhbGlkXG4gKiAgICAgY3JlZGVudGlhbHMuIEJ5IGRlZmF1bHQsIHRoaXMgb2JqZWN0IHdpbGwgYmUgc2V0IHRvIHRoZVxuICogICAgIHtkZWZhdWx0UHJvdmlkZXJzfS5cbiAqICAgQHNlZSBkZWZhdWx0UHJvdmlkZXJzXG4gKi9cbkFXUy5DcmVkZW50aWFsUHJvdmlkZXJDaGFpbiA9IEFXUy51dGlsLmluaGVyaXQoQVdTLkNyZWRlbnRpYWxzLCB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW4gd2l0aCBhIGRlZmF1bHQgc2V0IG9mIHByb3ZpZGVyc1xuICAgKiBzcGVjaWZpZWQgYnkge2RlZmF1bHRQcm92aWRlcnN9LlxuICAgKi9cbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIENyZWRlbnRpYWxQcm92aWRlckNoYWluKHByb3ZpZGVycykge1xuICAgIGlmIChwcm92aWRlcnMpIHtcbiAgICAgIHRoaXMucHJvdmlkZXJzID0gcHJvdmlkZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByb3ZpZGVycyA9IEFXUy5DcmVkZW50aWFsUHJvdmlkZXJDaGFpbi5kZWZhdWx0UHJvdmlkZXJzLnNsaWNlKDApO1xuICAgIH1cbiAgICB0aGlzLnJlc29sdmVDYWxsYmFja3MgPSBbXTtcbiAgfSxcblxuICAvKipcbiAgICogQCFtZXRob2QgIHJlc29sdmVQcm9taXNlKClcbiAgICogICBSZXR1cm5zIGEgJ3RoZW5hYmxlJyBwcm9taXNlLlxuICAgKiAgIFJlc29sdmVzIHRoZSBwcm92aWRlciBjaGFpbiBieSBzZWFyY2hpbmcgZm9yIHRoZSBmaXJzdCBzZXQgb2ZcbiAgICogICBjcmVkZW50aWFscyBpbiB7cHJvdmlkZXJzfS5cbiAgICpcbiAgICogICBUd28gY2FsbGJhY2tzIGNhbiBiZSBwcm92aWRlZCB0byB0aGUgYHRoZW5gIG1ldGhvZCBvbiB0aGUgcmV0dXJuZWQgcHJvbWlzZS5cbiAgICogICBUaGUgZmlyc3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgaWYgdGhlIHByb21pc2UgaXMgZnVsZmlsbGVkLCBhbmQgdGhlIHNlY29uZFxuICAgKiAgIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGlmIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkLlxuICAgKiAgIEBjYWxsYmFjayBmdWxmaWxsZWRDYWxsYmFjayBmdW5jdGlvbihjcmVkZW50aWFscylcbiAgICogICAgIENhbGxlZCBpZiB0aGUgcHJvbWlzZSBpcyBmdWxmaWxsZWQgYW5kIHRoZSBwcm92aWRlciByZXNvbHZlcyB0aGUgY2hhaW5cbiAgICogICAgIHRvIGEgY3JlZGVudGlhbHMgb2JqZWN0XG4gICAqICAgICBAcGFyYW0gY3JlZGVudGlhbHMgW0FXUy5DcmVkZW50aWFsc10gdGhlIGNyZWRlbnRpYWxzIG9iamVjdCByZXNvbHZlZFxuICAgKiAgICAgICBieSB0aGUgcHJvdmlkZXIgY2hhaW4uXG4gICAqICAgQGNhbGxiYWNrIHJlamVjdGVkQ2FsbGJhY2sgZnVuY3Rpb24oZXJyb3IpXG4gICAqICAgICBDYWxsZWQgaWYgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQuXG4gICAqICAgICBAcGFyYW0gZXJyIFtFcnJvcl0gdGhlIGVycm9yIG9iamVjdCByZXR1cm5lZCBpZiBubyBjcmVkZW50aWFscyBhcmUgZm91bmQuXG4gICAqICAgQHJldHVybiBbUHJvbWlzZV0gQSBwcm9taXNlIHRoYXQgcmVwcmVzZW50cyB0aGUgc3RhdGUgb2YgdGhlIGByZXNvbHZlYCBtZXRob2QgY2FsbC5cbiAgICogICBAZXhhbXBsZSBDYWxsaW5nIHRoZSBgcmVzb2x2ZVByb21pc2VgIG1ldGhvZC5cbiAgICogICAgIHZhciBwcm9taXNlID0gY2hhaW4ucmVzb2x2ZVByb21pc2UoKTtcbiAgICogICAgIHByb21pc2UudGhlbihmdW5jdGlvbihjcmVkZW50aWFscykgeyAuLi4gfSwgZnVuY3Rpb24oZXJyKSB7IC4uLiB9KTtcbiAgICovXG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIHRoZSBwcm92aWRlciBjaGFpbiBieSBzZWFyY2hpbmcgZm9yIHRoZSBmaXJzdCBzZXQgb2ZcbiAgICogY3JlZGVudGlhbHMgaW4ge3Byb3ZpZGVyc30uXG4gICAqXG4gICAqIEBjYWxsYmFjayBjYWxsYmFjayBmdW5jdGlvbihlcnIsIGNyZWRlbnRpYWxzKVxuICAgKiAgIENhbGxlZCB3aGVuIHRoZSBwcm92aWRlciByZXNvbHZlcyB0aGUgY2hhaW4gdG8gYSBjcmVkZW50aWFscyBvYmplY3RcbiAgICogICBvciBudWxsIGlmIG5vIGNyZWRlbnRpYWxzIGNhbiBiZSBmb3VuZC5cbiAgICpcbiAgICogICBAcGFyYW0gZXJyIFtFcnJvcl0gdGhlIGVycm9yIG9iamVjdCByZXR1cm5lZCBpZiBubyBjcmVkZW50aWFscyBhcmVcbiAgICogICAgIGZvdW5kLlxuICAgKiAgIEBwYXJhbSBjcmVkZW50aWFscyBbQVdTLkNyZWRlbnRpYWxzXSB0aGUgY3JlZGVudGlhbHMgb2JqZWN0IHJlc29sdmVkXG4gICAqICAgICBieSB0aGUgcHJvdmlkZXIgY2hhaW4uXG4gICAqIEByZXR1cm4gW0FXUy5DcmVkZW50aWFsUHJvdmlkZXJDaGFpbl0gdGhlIHByb3ZpZGVyLCBmb3IgY2hhaW5pbmcuXG4gICAqL1xuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmIChzZWxmLnByb3ZpZGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignTm8gcHJvdmlkZXJzJykpO1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuXG4gICAgaWYgKHNlbGYucmVzb2x2ZUNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKSA9PT0gMSkge1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciBwcm92aWRlcnMgPSBzZWxmLnByb3ZpZGVycy5zbGljZSgwKTtcblxuICAgICAgZnVuY3Rpb24gcmVzb2x2ZU5leHQoZXJyLCBjcmVkcykge1xuICAgICAgICBpZiAoKCFlcnIgJiYgY3JlZHMpIHx8IGluZGV4ID09PSBwcm92aWRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgQVdTLnV0aWwuYXJyYXlFYWNoKHNlbGYucmVzb2x2ZUNhbGxiYWNrcywgZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnIsIGNyZWRzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzZWxmLnJlc29sdmVDYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcHJvdmlkZXIgPSBwcm92aWRlcnNbaW5kZXgrK107XG4gICAgICAgIGlmICh0eXBlb2YgcHJvdmlkZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjcmVkcyA9IHByb3ZpZGVyLmNhbGwoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjcmVkcyA9IHByb3ZpZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNyZWRzLmdldCkge1xuICAgICAgICAgIGNyZWRzLmdldChmdW5jdGlvbiAoZ2V0RXJyKSB7XG4gICAgICAgICAgICByZXNvbHZlTmV4dChnZXRFcnIsIGdldEVyciA/IG51bGwgOiBjcmVkcyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZU5leHQobnVsbCwgY3JlZHMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlc29sdmVOZXh0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cbn0pO1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IHNldCBvZiBwcm92aWRlcnMgdXNlZCBieSBhIHZhbmlsbGEgQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW4uXG4gKlxuICogSW4gdGhlIGJyb3dzZXI6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogQVdTLkNyZWRlbnRpYWxQcm92aWRlckNoYWluLmRlZmF1bHRQcm92aWRlcnMgPSBbXVxuICogYGBgXG4gKlxuICogSW4gTm9kZS5qczpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBBV1MuQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW4uZGVmYXVsdFByb3ZpZGVycyA9IFtcbiAqICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEFXUy5FbnZpcm9ubWVudENyZWRlbnRpYWxzKCdBV1MnKTsgfSxcbiAqICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEFXUy5FbnZpcm9ubWVudENyZWRlbnRpYWxzKCdBTUFaT04nKTsgfSxcbiAqICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEFXUy5TaGFyZWRJbmlGaWxlQ3JlZGVudGlhbHMoKTsgfSxcbiAqICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEFXUy5FQ1NDcmVkZW50aWFscygpOyB9LFxuICogICBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgQVdTLlByb2Nlc3NDcmVkZW50aWFscygpOyB9LFxuICogICBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgQVdTLlRva2VuRmlsZVdlYklkZW50aXR5Q3JlZGVudGlhbHMoKTsgfSxcbiAqICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEFXUy5FQzJNZXRhZGF0YUNyZWRlbnRpYWxzKCkgfVxuICogXVxuICogYGBgXG4gKi9cbkFXUy5DcmVkZW50aWFsUHJvdmlkZXJDaGFpbi5kZWZhdWx0UHJvdmlkZXJzID0gW107XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbkFXUy5DcmVkZW50aWFsUHJvdmlkZXJDaGFpbi5hZGRQcm9taXNlc1RvQ2xhc3MgPSBmdW5jdGlvbiBhZGRQcm9taXNlc1RvQ2xhc3MoUHJvbWlzZURlcGVuZGVuY3kpIHtcbiAgdGhpcy5wcm90b3R5cGUucmVzb2x2ZVByb21pc2UgPSBBV1MudXRpbC5wcm9taXNpZnlNZXRob2QoJ3Jlc29sdmUnLCBQcm9taXNlRGVwZW5kZW5jeSk7XG59O1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5BV1MuQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW4uZGVsZXRlUHJvbWlzZXNGcm9tQ2xhc3MgPSBmdW5jdGlvbiBkZWxldGVQcm9taXNlc0Zyb21DbGFzcygpIHtcbiAgZGVsZXRlIHRoaXMucHJvdG90eXBlLnJlc29sdmVQcm9taXNlO1xufTtcblxuQVdTLnV0aWwuYWRkUHJvbWlzZXMoQVdTLkNyZWRlbnRpYWxQcm92aWRlckNoYWluKTtcblxufSx7XCIuLi9jb3JlXCI6MTl9XSwyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgQVdTID0gcmVxdWlyZSgnLi4vY29yZScpO1xudmFyIFNUUyA9IHJlcXVpcmUoJy4uLy4uL2NsaWVudHMvc3RzJyk7XG5cbi8qKlxuICogUmVwcmVzZW50cyBjcmVkZW50aWFscyByZXRyaWV2ZWQgZnJvbSBTVFMgU0FNTCBzdXBwb3J0LlxuICpcbiAqIEJ5IGRlZmF1bHQgdGhpcyBwcm92aWRlciBnZXRzIGNyZWRlbnRpYWxzIHVzaW5nIHRoZVxuICoge0FXUy5TVFMuYXNzdW1lUm9sZVdpdGhTQU1MfSBzZXJ2aWNlIG9wZXJhdGlvbi4gVGhpcyBvcGVyYXRpb25cbiAqIHJlcXVpcmVzIGEgYFJvbGVBcm5gIGNvbnRhaW5pbmcgdGhlIEFSTiBvZiB0aGUgSUFNIHRydXN0IHBvbGljeSBmb3IgdGhlXG4gKiBhcHBsaWNhdGlvbiBmb3Igd2hpY2ggY3JlZGVudGlhbHMgd2lsbCBiZSBnaXZlbiwgYXMgd2VsbCBhcyBhIGBQcmluY2lwYWxBcm5gXG4gKiByZXByZXNlbnRpbmcgdGhlIEFSTiBmb3IgdGhlIFNBTUwgaWRlbnRpdHkgcHJvdmlkZXIuIEluIGFkZGl0aW9uLCB0aGVcbiAqIGBTQU1MQXNzZXJ0aW9uYCBtdXN0IGJlIHNldCB0byB0aGUgdG9rZW4gcHJvdmlkZWQgYnkgdGhlIGlkZW50aXR5XG4gKiBwcm92aWRlci4gU2VlIHtjb25zdHJ1Y3Rvcn0gZm9yIGFuIGV4YW1wbGUgb24gY3JlYXRpbmcgYSBjcmVkZW50aWFsc1xuICogb2JqZWN0IHdpdGggcHJvcGVyIGBSb2xlQXJuYCwgYFByaW5jaXBhbEFybmAsIGFuZCBgU0FNTEFzc2VydGlvbmAgdmFsdWVzLlxuICpcbiAqICMjIFJlZnJlc2hpbmcgQ3JlZGVudGlhbHMgZnJvbSBJZGVudGl0eSBTZXJ2aWNlXG4gKlxuICogSW4gYWRkaXRpb24gdG8gQVdTIGNyZWRlbnRpYWxzIGV4cGlyaW5nIGFmdGVyIGEgZ2l2ZW4gYW1vdW50IG9mIHRpbWUsIHRoZVxuICogbG9naW4gdG9rZW4gZnJvbSB0aGUgaWRlbnRpdHkgcHJvdmlkZXIgd2lsbCBhbHNvIGV4cGlyZS4gT25jZSB0aGlzIHRva2VuXG4gKiBleHBpcmVzLCBpdCB3aWxsIG5vdCBiZSB1c2FibGUgdG8gcmVmcmVzaCBBV1MgY3JlZGVudGlhbHMsIGFuZCBhbm90aGVyXG4gKiB0b2tlbiB3aWxsIGJlIG5lZWRlZC4gVGhlIFNESyBkb2VzIG5vdCBtYW5hZ2UgcmVmcmVzaGluZyBvZiB0aGUgdG9rZW4gdmFsdWUsXG4gKiBidXQgdGhpcyBjYW4gYmUgZG9uZSB0aHJvdWdoIGEgXCJyZWZyZXNoIHRva2VuXCIgc3VwcG9ydGVkIGJ5IG1vc3QgaWRlbnRpdHlcbiAqIHByb3ZpZGVycy4gQ29uc3VsdCB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGlkZW50aXR5IHByb3ZpZGVyIGZvciByZWZyZXNoaW5nXG4gKiB0b2tlbnMuIE9uY2UgdGhlIHJlZnJlc2hlZCB0b2tlbiBpcyBhY3F1aXJlZCwgeW91IHNob3VsZCBtYWtlIHN1cmUgdG8gdXBkYXRlXG4gKiB0aGlzIG5ldyB0b2tlbiBpbiB0aGUgY3JlZGVudGlhbHMgb2JqZWN0J3Mge3BhcmFtc30gcHJvcGVydHkuIFRoZSBmb2xsb3dpbmdcbiAqIGNvZGUgd2lsbCB1cGRhdGUgdGhlIFNBTUxBc3NlcnRpb24sIGFzc3VtaW5nIHlvdSBoYXZlIHJldHJpZXZlZCBhbiB1cGRhdGVkXG4gKiB0b2tlbiBmcm9tIHRoZSBpZGVudGl0eSBwcm92aWRlcjpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBBV1MuY29uZmlnLmNyZWRlbnRpYWxzLnBhcmFtcy5TQU1MQXNzZXJ0aW9uID0gdXBkYXRlZFRva2VuO1xuICogYGBgXG4gKlxuICogRnV0dXJlIGNhbGxzIHRvIGBjcmVkZW50aWFscy5yZWZyZXNoKClgIHdpbGwgbm93IHVzZSB0aGUgbmV3IHRva2VuLlxuICpcbiAqIEAhYXR0cmlidXRlIHBhcmFtc1xuICogICBAcmV0dXJuIFttYXBdIHRoZSBtYXAgb2YgcGFyYW1zIHBhc3NlZCB0b1xuICogICAgIHtBV1MuU1RTLmFzc3VtZVJvbGVXaXRoU0FNTH0uIFRvIHVwZGF0ZSB0aGUgdG9rZW4sIHNldCB0aGVcbiAqICAgICBgcGFyYW1zLlNBTUxBc3NlcnRpb25gIHByb3BlcnR5LlxuICovXG5BV1MuU0FNTENyZWRlbnRpYWxzID0gQVdTLnV0aWwuaW5oZXJpdChBV1MuQ3JlZGVudGlhbHMsIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgY3JlZGVudGlhbHMgb2JqZWN0LlxuICAgKiBAcGFyYW0gKHNlZSBBV1MuU1RTLmFzc3VtZVJvbGVXaXRoU0FNTClcbiAgICogQGV4YW1wbGUgQ3JlYXRpbmcgYSBuZXcgY3JlZGVudGlhbHMgb2JqZWN0XG4gICAqICAgQVdTLmNvbmZpZy5jcmVkZW50aWFscyA9IG5ldyBBV1MuU0FNTENyZWRlbnRpYWxzKHtcbiAgICogICAgIFJvbGVBcm46ICdhcm46YXdzOmlhbTo6MTIzNDU2Nzg5MDpyb2xlL1NBTUxSb2xlJyxcbiAgICogICAgIFByaW5jaXBhbEFybjogJ2Fybjphd3M6aWFtOjoxMjM0NTY3ODkwOnJvbGUvU0FNTFByaW5jaXBhbCcsXG4gICAqICAgICBTQU1MQXNzZXJ0aW9uOiAnYmFzZTY0LXRva2VuJywgLy8gYmFzZTY0LWVuY29kZWQgdG9rZW4gZnJvbSBJZFBcbiAgICogICB9KTtcbiAgICogQHNlZSBBV1MuU1RTLmFzc3VtZVJvbGVXaXRoU0FNTFxuICAgKi9cbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIFNBTUxDcmVkZW50aWFscyhwYXJhbXMpIHtcbiAgICBBV1MuQ3JlZGVudGlhbHMuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmV4cGlyZWQgPSB0cnVlO1xuICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWZyZXNoZXMgY3JlZGVudGlhbHMgdXNpbmcge0FXUy5TVFMuYXNzdW1lUm9sZVdpdGhTQU1MfVxuICAgKlxuICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyKVxuICAgKiAgIENhbGxlZCB3aGVuIHRoZSBTVFMgc2VydmljZSByZXNwb25kcyAob3IgZmFpbHMpLiBXaGVuXG4gICAqICAgdGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aCBubyBlcnJvciwgaXQgbWVhbnMgdGhhdCB0aGUgY3JlZGVudGlhbHNcbiAgICogICBpbmZvcm1hdGlvbiBoYXMgYmVlbiBsb2FkZWQgaW50byB0aGUgb2JqZWN0IChhcyB0aGUgYGFjY2Vzc0tleUlkYCxcbiAgICogICBgc2VjcmV0QWNjZXNzS2V5YCwgYW5kIGBzZXNzaW9uVG9rZW5gIHByb3BlcnRpZXMpLlxuICAgKiAgIEBwYXJhbSBlcnIgW0Vycm9yXSBpZiBhbiBlcnJvciBvY2N1cnJlZCwgdGhpcyB2YWx1ZSB3aWxsIGJlIGZpbGxlZFxuICAgKiBAc2VlIGdldFxuICAgKi9cbiAgcmVmcmVzaDogZnVuY3Rpb24gcmVmcmVzaChjYWxsYmFjaykge1xuICAgIHRoaXMuY29hbGVzY2VSZWZyZXNoKGNhbGxiYWNrIHx8IEFXUy51dGlsLmZuLmNhbGxiYWNrKTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBsb2FkOiBmdW5jdGlvbiBsb2FkKGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNlbGYuY3JlYXRlQ2xpZW50cygpO1xuICAgIHNlbGYuc2VydmljZS5hc3N1bWVSb2xlV2l0aFNBTUwoZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgc2VsZi5zZXJ2aWNlLmNyZWRlbnRpYWxzRnJvbShkYXRhLCBzZWxmKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY3JlYXRlQ2xpZW50czogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXJ2aWNlID0gdGhpcy5zZXJ2aWNlIHx8IG5ldyBTVFMoe3BhcmFtczogdGhpcy5wYXJhbXN9KTtcbiAgfVxuXG59KTtcblxufSx7XCIuLi8uLi9jbGllbnRzL3N0c1wiOjksXCIuLi9jb3JlXCI6MTl9XSwyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgQVdTID0gcmVxdWlyZSgnLi4vY29yZScpO1xudmFyIFNUUyA9IHJlcXVpcmUoJy4uLy4uL2NsaWVudHMvc3RzJyk7XG5cbi8qKlxuICogUmVwcmVzZW50cyB0ZW1wb3JhcnkgY3JlZGVudGlhbHMgcmV0cmlldmVkIGZyb20ge0FXUy5TVFN9LiBXaXRob3V0IGFueVxuICogZXh0cmEgcGFyYW1ldGVycywgY3JlZGVudGlhbHMgd2lsbCBiZSBmZXRjaGVkIGZyb20gdGhlXG4gKiB7QVdTLlNUUy5nZXRTZXNzaW9uVG9rZW59IG9wZXJhdGlvbi4gSWYgYW4gSUFNIHJvbGUgaXMgcHJvdmlkZWQsIHRoZVxuICoge0FXUy5TVFMuYXNzdW1lUm9sZX0gb3BlcmF0aW9uIHdpbGwgYmUgdXNlZCB0byBmZXRjaCBjcmVkZW50aWFscyBmb3IgdGhlXG4gKiByb2xlIGluc3RlYWQuXG4gKlxuICogQG5vdGUgQVdTLlRlbXBvcmFyeUNyZWRlbnRpYWxzIGlzIGRlcHJlY2F0ZWQsIGJ1dCByZW1haW5zIGF2YWlsYWJsZSBmb3JcbiAqICAgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIHtBV1MuQ2hhaW5hYmxlVGVtcG9yYXJ5Q3JlZGVudGlhbHN9IGlzIHRoZVxuICogICBwcmVmZXJyZWQgY2xhc3MgZm9yIHRlbXBvcmFyeSBjcmVkZW50aWFscy5cbiAqXG4gKiBUbyBzZXR1cCB0ZW1wb3JhcnkgY3JlZGVudGlhbHMsIGNvbmZpZ3VyZSBhIHNldCBvZiBtYXN0ZXIgY3JlZGVudGlhbHNcbiAqIHVzaW5nIHRoZSBzdGFuZGFyZCBjcmVkZW50aWFscyBwcm92aWRlcnMgKGVudmlyb25tZW50LCBFQzIgaW5zdGFuY2UgbWV0YWRhdGEsXG4gKiBvciBmcm9tIHRoZSBmaWxlc3lzdGVtKSwgdGhlbiBzZXQgdGhlIGdsb2JhbCBjcmVkZW50aWFscyB0byBhIG5ld1xuICogdGVtcG9yYXJ5IGNyZWRlbnRpYWxzIG9iamVjdDpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBOb3RlIHRoYXQgZW52aXJvbm1lbnQgY3JlZGVudGlhbHMgYXJlIGxvYWRlZCBieSBkZWZhdWx0LFxuICogLy8gdGhlIGZvbGxvd2luZyBsaW5lIGlzIHNob3duIGZvciBjbGFyaXR5OlxuICogQVdTLmNvbmZpZy5jcmVkZW50aWFscyA9IG5ldyBBV1MuRW52aXJvbm1lbnRDcmVkZW50aWFscygnQVdTJyk7XG4gKlxuICogLy8gTm93IHNldCB0ZW1wb3JhcnkgY3JlZGVudGlhbHMgc2VlZGVkIGZyb20gdGhlIG1hc3RlciBjcmVkZW50aWFsc1xuICogQVdTLmNvbmZpZy5jcmVkZW50aWFscyA9IG5ldyBBV1MuVGVtcG9yYXJ5Q3JlZGVudGlhbHMoKTtcbiAqXG4gKiAvLyBzdWJzZXF1ZW50IHJlcXVlc3RzIHdpbGwgbm93IHVzZSB0ZW1wb3JhcnkgY3JlZGVudGlhbHMgZnJvbSBBV1MgU1RTLlxuICogbmV3IEFXUy5TMygpLmxpc3RCdWNrZXQoZnVuY3Rpb24oZXJyLCBkYXRhKSB7IC4uLiB9KTtcbiAqIGBgYFxuICpcbiAqIEAhYXR0cmlidXRlIG1hc3RlckNyZWRlbnRpYWxzXG4gKiAgIEByZXR1cm4gW0FXUy5DcmVkZW50aWFsc10gdGhlIG1hc3RlciAobm9uLXRlbXBvcmFyeSkgY3JlZGVudGlhbHMgdXNlZCB0b1xuICogICAgIGdldCBhbmQgcmVmcmVzaCB0ZW1wb3JhcnkgY3JlZGVudGlhbHMgZnJvbSBBV1MgU1RTLlxuICogQG5vdGUgKHNlZSBjb25zdHJ1Y3RvcilcbiAqL1xuQVdTLlRlbXBvcmFyeUNyZWRlbnRpYWxzID0gQVdTLnV0aWwuaW5oZXJpdChBV1MuQ3JlZGVudGlhbHMsIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgdGVtcG9yYXJ5IGNyZWRlbnRpYWxzIG9iamVjdC5cbiAgICpcbiAgICogQG5vdGUgSW4gb3JkZXIgdG8gY3JlYXRlIHRlbXBvcmFyeSBjcmVkZW50aWFscywgeW91IGZpcnN0IG5lZWQgdG8gaGF2ZVxuICAgKiAgIFwibWFzdGVyXCIgY3JlZGVudGlhbHMgY29uZmlndXJlZCBpbiB7QVdTLkNvbmZpZy5jcmVkZW50aWFsc30uIFRoZXNlXG4gICAqICAgbWFzdGVyIGNyZWRlbnRpYWxzIGFyZSBuZWNlc3NhcnkgdG8gcmV0cmlldmUgdGhlIHRlbXBvcmFyeSBjcmVkZW50aWFscyxcbiAgICogICBhcyB3ZWxsIGFzIHJlZnJlc2ggdGhlIGNyZWRlbnRpYWxzIHdoZW4gdGhleSBleHBpcmUuXG4gICAqIEBwYXJhbSBwYXJhbXMgW21hcF0gYSBtYXAgb2Ygb3B0aW9ucyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlXG4gICAqICAge0FXUy5TVFMuYXNzdW1lUm9sZX0gb3Ige0FXUy5TVFMuZ2V0U2Vzc2lvblRva2VufSBvcGVyYXRpb25zLlxuICAgKiAgIElmIGEgYFJvbGVBcm5gIHBhcmFtZXRlciBpcyBwYXNzZWQgaW4sIGNyZWRlbnRpYWxzIHdpbGwgYmUgYmFzZWQgb24gdGhlXG4gICAqICAgSUFNIHJvbGUuXG4gICAqIEBwYXJhbSBtYXN0ZXJDcmVkZW50aWFscyBbQVdTLkNyZWRlbnRpYWxzXSB0aGUgbWFzdGVyIChub24tdGVtcG9yYXJ5KSBjcmVkZW50aWFsc1xuICAgKiAgdXNlZCB0byBnZXQgYW5kIHJlZnJlc2ggdGVtcG9yYXJ5IGNyZWRlbnRpYWxzIGZyb20gQVdTIFNUUy5cbiAgICogQGV4YW1wbGUgQ3JlYXRpbmcgYSBuZXcgY3JlZGVudGlhbHMgb2JqZWN0IGZvciBnZW5lcmljIHRlbXBvcmFyeSBjcmVkZW50aWFsc1xuICAgKiAgIEFXUy5jb25maWcuY3JlZGVudGlhbHMgPSBuZXcgQVdTLlRlbXBvcmFyeUNyZWRlbnRpYWxzKCk7XG4gICAqIEBleGFtcGxlIENyZWF0aW5nIGEgbmV3IGNyZWRlbnRpYWxzIG9iamVjdCBmb3IgYW4gSUFNIHJvbGVcbiAgICogICBBV1MuY29uZmlnLmNyZWRlbnRpYWxzID0gbmV3IEFXUy5UZW1wb3JhcnlDcmVkZW50aWFscyh7XG4gICAqICAgICBSb2xlQXJuOiAnYXJuOmF3czppYW06OjEyMzQ1Njc4OTA6cm9sZS9UZW1wb3JhcnlDcmVkZW50aWFscycsXG4gICAqICAgfSk7XG4gICAqIEBzZWUgQVdTLlNUUy5hc3N1bWVSb2xlXG4gICAqIEBzZWUgQVdTLlNUUy5nZXRTZXNzaW9uVG9rZW5cbiAgICovXG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBUZW1wb3JhcnlDcmVkZW50aWFscyhwYXJhbXMsIG1hc3RlckNyZWRlbnRpYWxzKSB7XG4gICAgQVdTLkNyZWRlbnRpYWxzLmNhbGwodGhpcyk7XG4gICAgdGhpcy5sb2FkTWFzdGVyQ3JlZGVudGlhbHMobWFzdGVyQ3JlZGVudGlhbHMpO1xuICAgIHRoaXMuZXhwaXJlZCA9IHRydWU7XG5cbiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgICBpZiAodGhpcy5wYXJhbXMuUm9sZUFybikge1xuICAgICAgdGhpcy5wYXJhbXMuUm9sZVNlc3Npb25OYW1lID1cbiAgICAgICAgdGhpcy5wYXJhbXMuUm9sZVNlc3Npb25OYW1lIHx8ICd0ZW1wb3JhcnktY3JlZGVudGlhbHMnO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVmcmVzaGVzIGNyZWRlbnRpYWxzIHVzaW5nIHtBV1MuU1RTLmFzc3VtZVJvbGV9IG9yXG4gICAqIHtBV1MuU1RTLmdldFNlc3Npb25Ub2tlbn0sIGRlcGVuZGluZyBvbiB3aGV0aGVyIGFuIElBTSByb2xlIEFSTiB3YXMgcGFzc2VkXG4gICAqIHRvIHRoZSBjcmVkZW50aWFscyB7Y29uc3RydWN0b3J9LlxuICAgKlxuICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyKVxuICAgKiAgIENhbGxlZCB3aGVuIHRoZSBTVFMgc2VydmljZSByZXNwb25kcyAob3IgZmFpbHMpLiBXaGVuXG4gICAqICAgdGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aCBubyBlcnJvciwgaXQgbWVhbnMgdGhhdCB0aGUgY3JlZGVudGlhbHNcbiAgICogICBpbmZvcm1hdGlvbiBoYXMgYmVlbiBsb2FkZWQgaW50byB0aGUgb2JqZWN0IChhcyB0aGUgYGFjY2Vzc0tleUlkYCxcbiAgICogICBgc2VjcmV0QWNjZXNzS2V5YCwgYW5kIGBzZXNzaW9uVG9rZW5gIHByb3BlcnRpZXMpLlxuICAgKiAgIEBwYXJhbSBlcnIgW0Vycm9yXSBpZiBhbiBlcnJvciBvY2N1cnJlZCwgdGhpcyB2YWx1ZSB3aWxsIGJlIGZpbGxlZFxuICAgKiBAc2VlIGdldFxuICAgKi9cbiAgcmVmcmVzaDogZnVuY3Rpb24gcmVmcmVzaCAoY2FsbGJhY2spIHtcbiAgICB0aGlzLmNvYWxlc2NlUmVmcmVzaChjYWxsYmFjayB8fCBBV1MudXRpbC5mbi5jYWxsYmFjayk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgbG9hZDogZnVuY3Rpb24gbG9hZCAoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2VsZi5jcmVhdGVDbGllbnRzKCk7XG4gICAgc2VsZi5tYXN0ZXJDcmVkZW50aWFscy5nZXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5zZXJ2aWNlLmNvbmZpZy5jcmVkZW50aWFscyA9IHNlbGYubWFzdGVyQ3JlZGVudGlhbHM7XG4gICAgICB2YXIgb3BlcmF0aW9uID0gc2VsZi5wYXJhbXMuUm9sZUFybiA/XG4gICAgICAgIHNlbGYuc2VydmljZS5hc3N1bWVSb2xlIDogc2VsZi5zZXJ2aWNlLmdldFNlc3Npb25Ub2tlbjtcbiAgICAgIG9wZXJhdGlvbi5jYWxsKHNlbGYuc2VydmljZSwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgIHNlbGYuc2VydmljZS5jcmVkZW50aWFsc0Zyb20oZGF0YSwgc2VsZik7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGxvYWRNYXN0ZXJDcmVkZW50aWFsczogZnVuY3Rpb24gbG9hZE1hc3RlckNyZWRlbnRpYWxzIChtYXN0ZXJDcmVkZW50aWFscykge1xuICAgIHRoaXMubWFzdGVyQ3JlZGVudGlhbHMgPSBtYXN0ZXJDcmVkZW50aWFscyB8fCBBV1MuY29uZmlnLmNyZWRlbnRpYWxzO1xuICAgIHdoaWxlICh0aGlzLm1hc3RlckNyZWRlbnRpYWxzLm1hc3RlckNyZWRlbnRpYWxzKSB7XG4gICAgICB0aGlzLm1hc3RlckNyZWRlbnRpYWxzID0gdGhpcy5tYXN0ZXJDcmVkZW50aWFscy5tYXN0ZXJDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRoaXMubWFzdGVyQ3JlZGVudGlhbHMuZ2V0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLm1hc3RlckNyZWRlbnRpYWxzID0gbmV3IEFXUy5DcmVkZW50aWFscyh0aGlzLm1hc3RlckNyZWRlbnRpYWxzKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY3JlYXRlQ2xpZW50czogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2VydmljZSA9IHRoaXMuc2VydmljZSB8fCBuZXcgU1RTKHtwYXJhbXM6IHRoaXMucGFyYW1zfSk7XG4gIH1cblxufSk7XG5cbn0se1wiLi4vLi4vY2xpZW50cy9zdHNcIjo5LFwiLi4vY29yZVwiOjE5fV0sMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTtcbnZhciBTVFMgPSByZXF1aXJlKCcuLi8uLi9jbGllbnRzL3N0cycpO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgY3JlZGVudGlhbHMgcmV0cmlldmVkIGZyb20gU1RTIFdlYiBJZGVudGl0eSBGZWRlcmF0aW9uIHN1cHBvcnQuXG4gKlxuICogQnkgZGVmYXVsdCB0aGlzIHByb3ZpZGVyIGdldHMgY3JlZGVudGlhbHMgdXNpbmcgdGhlXG4gKiB7QVdTLlNUUy5hc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5fSBzZXJ2aWNlIG9wZXJhdGlvbi4gVGhpcyBvcGVyYXRpb25cbiAqIHJlcXVpcmVzIGEgYFJvbGVBcm5gIGNvbnRhaW5pbmcgdGhlIEFSTiBvZiB0aGUgSUFNIHRydXN0IHBvbGljeSBmb3IgdGhlXG4gKiBhcHBsaWNhdGlvbiBmb3Igd2hpY2ggY3JlZGVudGlhbHMgd2lsbCBiZSBnaXZlbi4gSW4gYWRkaXRpb24sIHRoZVxuICogYFdlYklkZW50aXR5VG9rZW5gIG11c3QgYmUgc2V0IHRvIHRoZSB0b2tlbiBwcm92aWRlZCBieSB0aGUgaWRlbnRpdHlcbiAqIHByb3ZpZGVyLiBTZWUge2NvbnN0cnVjdG9yfSBmb3IgYW4gZXhhbXBsZSBvbiBjcmVhdGluZyBhIGNyZWRlbnRpYWxzXG4gKiBvYmplY3Qgd2l0aCBwcm9wZXIgYFJvbGVBcm5gIGFuZCBgV2ViSWRlbnRpdHlUb2tlbmAgdmFsdWVzLlxuICpcbiAqICMjIFJlZnJlc2hpbmcgQ3JlZGVudGlhbHMgZnJvbSBJZGVudGl0eSBTZXJ2aWNlXG4gKlxuICogSW4gYWRkaXRpb24gdG8gQVdTIGNyZWRlbnRpYWxzIGV4cGlyaW5nIGFmdGVyIGEgZ2l2ZW4gYW1vdW50IG9mIHRpbWUsIHRoZVxuICogbG9naW4gdG9rZW4gZnJvbSB0aGUgaWRlbnRpdHkgcHJvdmlkZXIgd2lsbCBhbHNvIGV4cGlyZS4gT25jZSB0aGlzIHRva2VuXG4gKiBleHBpcmVzLCBpdCB3aWxsIG5vdCBiZSB1c2FibGUgdG8gcmVmcmVzaCBBV1MgY3JlZGVudGlhbHMsIGFuZCBhbm90aGVyXG4gKiB0b2tlbiB3aWxsIGJlIG5lZWRlZC4gVGhlIFNESyBkb2VzIG5vdCBtYW5hZ2UgcmVmcmVzaGluZyBvZiB0aGUgdG9rZW4gdmFsdWUsXG4gKiBidXQgdGhpcyBjYW4gYmUgZG9uZSB0aHJvdWdoIGEgXCJyZWZyZXNoIHRva2VuXCIgc3VwcG9ydGVkIGJ5IG1vc3QgaWRlbnRpdHlcbiAqIHByb3ZpZGVycy4gQ29uc3VsdCB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGlkZW50aXR5IHByb3ZpZGVyIGZvciByZWZyZXNoaW5nXG4gKiB0b2tlbnMuIE9uY2UgdGhlIHJlZnJlc2hlZCB0b2tlbiBpcyBhY3F1aXJlZCwgeW91IHNob3VsZCBtYWtlIHN1cmUgdG8gdXBkYXRlXG4gKiB0aGlzIG5ldyB0b2tlbiBpbiB0aGUgY3JlZGVudGlhbHMgb2JqZWN0J3Mge3BhcmFtc30gcHJvcGVydHkuIFRoZSBmb2xsb3dpbmdcbiAqIGNvZGUgd2lsbCB1cGRhdGUgdGhlIFdlYklkZW50aXR5VG9rZW4sIGFzc3VtaW5nIHlvdSBoYXZlIHJldHJpZXZlZCBhbiB1cGRhdGVkXG4gKiB0b2tlbiBmcm9tIHRoZSBpZGVudGl0eSBwcm92aWRlcjpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBBV1MuY29uZmlnLmNyZWRlbnRpYWxzLnBhcmFtcy5XZWJJZGVudGl0eVRva2VuID0gdXBkYXRlZFRva2VuO1xuICogYGBgXG4gKlxuICogRnV0dXJlIGNhbGxzIHRvIGBjcmVkZW50aWFscy5yZWZyZXNoKClgIHdpbGwgbm93IHVzZSB0aGUgbmV3IHRva2VuLlxuICpcbiAqIEAhYXR0cmlidXRlIHBhcmFtc1xuICogICBAcmV0dXJuIFttYXBdIHRoZSBtYXAgb2YgcGFyYW1zIHBhc3NlZCB0b1xuICogICAgIHtBV1MuU1RTLmFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHl9LiBUbyB1cGRhdGUgdGhlIHRva2VuLCBzZXQgdGhlXG4gKiAgICAgYHBhcmFtcy5XZWJJZGVudGl0eVRva2VuYCBwcm9wZXJ0eS5cbiAqIEAhYXR0cmlidXRlIGRhdGFcbiAqICAgQHJldHVybiBbbWFwXSB0aGUgcmF3IGRhdGEgcmVzcG9uc2UgZnJvbSB0aGUgY2FsbCB0b1xuICogICAgIHtBV1MuU1RTLmFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHl9LiBVc2UgdGhpcyBpZiB5b3Ugd2FudCB0byBnZXRcbiAqICAgICBhY2Nlc3MgdG8gb3RoZXIgcHJvcGVydGllcyBmcm9tIHRoZSByZXNwb25zZS5cbiAqL1xuQVdTLldlYklkZW50aXR5Q3JlZGVudGlhbHMgPSBBV1MudXRpbC5pbmhlcml0KEFXUy5DcmVkZW50aWFscywge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBjcmVkZW50aWFscyBvYmplY3QuXG4gICAqIEBwYXJhbSAoc2VlIEFXUy5TVFMuYXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eSlcbiAgICogQGV4YW1wbGUgQ3JlYXRpbmcgYSBuZXcgY3JlZGVudGlhbHMgb2JqZWN0XG4gICAqICAgQVdTLmNvbmZpZy5jcmVkZW50aWFscyA9IG5ldyBBV1MuV2ViSWRlbnRpdHlDcmVkZW50aWFscyh7XG4gICAqICAgICBSb2xlQXJuOiAnYXJuOmF3czppYW06OjEyMzQ1Njc4OTA6cm9sZS9XZWJJZGVudGl0eScsXG4gICAqICAgICBXZWJJZGVudGl0eVRva2VuOiAnQUJDREVGR0hJSktMTU5PUCcsIC8vIHRva2VuIGZyb20gaWRlbnRpdHkgc2VydmljZVxuICAgKiAgICAgUm9sZVNlc3Npb25OYW1lOiAnd2ViJyAvLyBvcHRpb25hbCBuYW1lLCBkZWZhdWx0cyB0byB3ZWItaWRlbnRpdHlcbiAgICogICB9LCB7XG4gICAqICAgICAvLyBvcHRpb25hbGx5IHByb3ZpZGUgY29uZmlndXJhdGlvbiB0byBhcHBseSB0byB0aGUgdW5kZXJseWluZyBBV1MuU1RTIHNlcnZpY2UgY2xpZW50XG4gICAqICAgICAvLyBpZiBjb25maWd1cmF0aW9uIGlzIG5vdCBwcm92aWRlZCwgdGhlbiBjb25maWd1cmF0aW9uIHdpbGwgYmUgcHVsbGVkIGZyb20gQVdTLmNvbmZpZ1xuICAgKlxuICAgKiAgICAgLy8gc3BlY2lmeSB0aW1lb3V0IG9wdGlvbnNcbiAgICogICAgIGh0dHBPcHRpb25zOiB7XG4gICAqICAgICAgIHRpbWVvdXQ6IDEwMFxuICAgKiAgICAgfVxuICAgKiAgIH0pO1xuICAgKiBAc2VlIEFXUy5TVFMuYXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eVxuICAgKiBAc2VlIEFXUy5Db25maWdcbiAgICovXG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBXZWJJZGVudGl0eUNyZWRlbnRpYWxzKHBhcmFtcywgY2xpZW50Q29uZmlnKSB7XG4gICAgQVdTLkNyZWRlbnRpYWxzLmNhbGwodGhpcyk7XG4gICAgdGhpcy5leHBpcmVkID0gdHJ1ZTtcbiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgICB0aGlzLnBhcmFtcy5Sb2xlU2Vzc2lvbk5hbWUgPSB0aGlzLnBhcmFtcy5Sb2xlU2Vzc2lvbk5hbWUgfHwgJ3dlYi1pZGVudGl0eSc7XG4gICAgdGhpcy5kYXRhID0gbnVsbDtcbiAgICB0aGlzLl9jbGllbnRDb25maWcgPSBBV1MudXRpbC5jb3B5KGNsaWVudENvbmZpZyB8fCB7fSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlZnJlc2hlcyBjcmVkZW50aWFscyB1c2luZyB7QVdTLlNUUy5hc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5fVxuICAgKlxuICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyKVxuICAgKiAgIENhbGxlZCB3aGVuIHRoZSBTVFMgc2VydmljZSByZXNwb25kcyAob3IgZmFpbHMpLiBXaGVuXG4gICAqICAgdGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aCBubyBlcnJvciwgaXQgbWVhbnMgdGhhdCB0aGUgY3JlZGVudGlhbHNcbiAgICogICBpbmZvcm1hdGlvbiBoYXMgYmVlbiBsb2FkZWQgaW50byB0aGUgb2JqZWN0IChhcyB0aGUgYGFjY2Vzc0tleUlkYCxcbiAgICogICBgc2VjcmV0QWNjZXNzS2V5YCwgYW5kIGBzZXNzaW9uVG9rZW5gIHByb3BlcnRpZXMpLlxuICAgKiAgIEBwYXJhbSBlcnIgW0Vycm9yXSBpZiBhbiBlcnJvciBvY2N1cnJlZCwgdGhpcyB2YWx1ZSB3aWxsIGJlIGZpbGxlZFxuICAgKiBAc2VlIGdldFxuICAgKi9cbiAgcmVmcmVzaDogZnVuY3Rpb24gcmVmcmVzaChjYWxsYmFjaykge1xuICAgIHRoaXMuY29hbGVzY2VSZWZyZXNoKGNhbGxiYWNrIHx8IEFXUy51dGlsLmZuLmNhbGxiYWNrKTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBsb2FkOiBmdW5jdGlvbiBsb2FkKGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNlbGYuY3JlYXRlQ2xpZW50cygpO1xuICAgIHNlbGYuc2VydmljZS5hc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5KGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgIHNlbGYuZGF0YSA9IG51bGw7XG4gICAgICBpZiAoIWVycikge1xuICAgICAgICBzZWxmLmRhdGEgPSBkYXRhO1xuICAgICAgICBzZWxmLnNlcnZpY2UuY3JlZGVudGlhbHNGcm9tKGRhdGEsIHNlbGYpO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBjcmVhdGVDbGllbnRzOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuc2VydmljZSkge1xuICAgICAgdmFyIHN0c0NvbmZpZyA9IEFXUy51dGlsLm1lcmdlKHt9LCB0aGlzLl9jbGllbnRDb25maWcpO1xuICAgICAgc3RzQ29uZmlnLnBhcmFtcyA9IHRoaXMucGFyYW1zO1xuICAgICAgdGhpcy5zZXJ2aWNlID0gbmV3IFNUUyhzdHNDb25maWcpO1xuICAgIH1cbiAgfVxuXG59KTtcblxufSx7XCIuLi8uLi9jbGllbnRzL3N0c1wiOjksXCIuLi9jb3JlXCI6MTl9XSwyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xudmFyIEFXUyA9IHJlcXVpcmUoJy4vY29yZScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbnZhciBlbmRwb2ludERpc2NvdmVyeUVuYWJsZWRFbnZzID0gWydBV1NfRU5BQkxFX0VORFBPSU5UX0RJU0NPVkVSWScsICdBV1NfRU5EUE9JTlRfRElTQ09WRVJZX0VOQUJMRUQnXTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBrZXkgKGV4Y2VwdCByZXNvdXJjZXMgYW5kIG9wZXJhdGlvbiBwYXJ0KSB0byBpbmRleCB0aGUgZW5kcG9pbnRzIGluIHRoZSBjYWNoZVxuICogSWYgaW5wdXQgc2hhcGUgaGFzIGVuZHBvaW50ZGlzY292ZXJ5aWQgdHJhaXQgdGhlbiB1c2VcbiAqICAgYWNjZXNzS2V5ICsgb3BlcmF0aW9uICsgcmVzb3VyY2VzICsgcmVnaW9uICsgc2VydmljZSBhcyBjYWNoZSBrZXlcbiAqIElmIGlucHV0IHNoYXBlIGRvZXNuJ3QgaGF2ZSBlbmRwb2ludGRpc2NvdmVyeWlkIHRyYWl0IHRoZW4gdXNlXG4gKiAgIGFjY2Vzc0tleSArIHJlZ2lvbiArIHNlcnZpY2UgYXMgY2FjaGUga2V5XG4gKiBAcmV0dXJuIFttYXA8U3RyaW5nLFN0cmluZz5dIG9iamVjdCB3aXRoIGtleXMgdG8gaW5kZXggZW5kcG9pbnRzLlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGdldENhY2hlS2V5KHJlcXVlc3QpIHtcbiAgdmFyIHNlcnZpY2UgPSByZXF1ZXN0LnNlcnZpY2U7XG4gIHZhciBhcGkgPSBzZXJ2aWNlLmFwaSB8fCB7fTtcbiAgdmFyIG9wZXJhdGlvbnMgPSBhcGkub3BlcmF0aW9ucztcbiAgdmFyIGlkZW50aWZpZXJzID0ge307XG4gIGlmIChzZXJ2aWNlLmNvbmZpZy5yZWdpb24pIHtcbiAgICBpZGVudGlmaWVycy5yZWdpb24gPSBzZXJ2aWNlLmNvbmZpZy5yZWdpb247XG4gIH1cbiAgaWYgKGFwaS5zZXJ2aWNlSWQpIHtcbiAgICBpZGVudGlmaWVycy5zZXJ2aWNlSWQgPSBhcGkuc2VydmljZUlkO1xuICB9XG4gIGlmIChzZXJ2aWNlLmNvbmZpZy5jcmVkZW50aWFscy5hY2Nlc3NLZXlJZCkge1xuICAgIGlkZW50aWZpZXJzLmFjY2Vzc0tleUlkID0gc2VydmljZS5jb25maWcuY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQ7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG4vKipcbiAqIFJlY3Vyc2l2ZSBoZWxwZXIgZm9yIG1hcnNoYWxsQ3VzdG9tSWRlbnRpZmllcnMoKS5cbiAqIExvb2tzIGZvciByZXF1aXJlZCBzdHJpbmcgaW5wdXQgbWVtYmVycyB0aGF0IGhhdmUgJ2VuZHBvaW50ZGlzY292ZXJ5aWQnIHRyYWl0LlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG1hcnNoYWxsQ3VzdG9tSWRlbnRpZmllcnNIZWxwZXIocmVzdWx0LCBwYXJhbXMsIHNoYXBlKSB7XG4gIGlmICghc2hhcGUgfHwgcGFyYW1zID09PSB1bmRlZmluZWQgfHwgcGFyYW1zID09PSBudWxsKSByZXR1cm47XG4gIGlmIChzaGFwZS50eXBlID09PSAnc3RydWN0dXJlJyAmJiBzaGFwZS5yZXF1aXJlZCAmJiBzaGFwZS5yZXF1aXJlZC5sZW5ndGggPiAwKSB7XG4gICAgdXRpbC5hcnJheUVhY2goc2hhcGUucmVxdWlyZWQsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHZhciBtZW1iZXJTaGFwZSA9IHNoYXBlLm1lbWJlcnNbbmFtZV07XG4gICAgICBpZiAobWVtYmVyU2hhcGUuZW5kcG9pbnREaXNjb3ZlcnlJZCA9PT0gdHJ1ZSkge1xuICAgICAgICB2YXIgbG9jYXRpb25OYW1lID0gbWVtYmVyU2hhcGUuaXNMb2NhdGlvbk5hbWUgPyBtZW1iZXJTaGFwZS5uYW1lIDogbmFtZTtcbiAgICAgICAgcmVzdWx0W2xvY2F0aW9uTmFtZV0gPSBTdHJpbmcocGFyYW1zW25hbWVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcnNoYWxsQ3VzdG9tSWRlbnRpZmllcnNIZWxwZXIocmVzdWx0LCBwYXJhbXNbbmFtZV0sIG1lbWJlclNoYXBlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCBjdXN0b20gaWRlbnRpZmllcnMgZm9yIGNhY2hlIGtleS5cbiAqIElkZW50aWZpZXMgY3VzdG9tIGlkZW50aWZpZXJzIGJ5IGNoZWNraW5nIGVhY2ggc2hhcGUncyBgZW5kcG9pbnREaXNjb3ZlcnlJZGAgdHJhaXQuXG4gKiBAcGFyYW0gW29iamVjdF0gcmVxdWVzdCBvYmplY3RcbiAqIEBwYXJhbSBbb2JqZWN0XSBpbnB1dCBzaGFwZSBvZiB0aGUgZ2l2ZW4gb3BlcmF0aW9uJ3MgYXBpXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbWFyc2hhbGxDdXN0b21JZGVudGlmaWVycyhyZXF1ZXN0LCBzaGFwZSkge1xuICB2YXIgaWRlbnRpZmllcnMgPSB7fTtcbiAgbWFyc2hhbGxDdXN0b21JZGVudGlmaWVyc0hlbHBlcihpZGVudGlmaWVycywgcmVxdWVzdC5wYXJhbXMsIHNoYXBlKTtcbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG4vKipcbiAqIENhbGwgZW5kcG9pbnQgZGlzY292ZXJ5IG9wZXJhdGlvbiB3aGVuIGl0J3Mgb3B0aW9uYWwuXG4gKiBXaGVuIGVuZHBvaW50IGlzIGF2YWlsYWJsZSBpbiBjYWNoZSB0aGVuIHVzZSB0aGUgY2FjaGVkIGVuZHBvaW50cy4gSWYgZW5kcG9pbnRzXG4gKiBhcmUgdW5hdmFpbGFibGUgdGhlbiB1c2UgcmVnaW9uYWwgZW5kcG9pbnRzIGFuZCBjYWxsIGVuZHBvaW50IGRpc2NvdmVyeSBvcGVyYXRpb25cbiAqIGFzeW5jaHJvbm91c2x5LiBUaGlzIGlzIHR1cm5lZCBvZmYgYnkgZGVmYXVsdC5cbiAqIEBwYXJhbSBbb2JqZWN0XSByZXF1ZXN0IG9iamVjdFxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG9wdGlvbmFsRGlzY292ZXJFbmRwb2ludChyZXF1ZXN0KSB7XG4gIHZhciBzZXJ2aWNlID0gcmVxdWVzdC5zZXJ2aWNlO1xuICB2YXIgYXBpID0gc2VydmljZS5hcGk7XG4gIHZhciBvcGVyYXRpb25Nb2RlbCA9IGFwaS5vcGVyYXRpb25zID8gYXBpLm9wZXJhdGlvbnNbcmVxdWVzdC5vcGVyYXRpb25dIDogdW5kZWZpbmVkO1xuICB2YXIgaW5wdXRTaGFwZSA9IG9wZXJhdGlvbk1vZGVsID8gb3BlcmF0aW9uTW9kZWwuaW5wdXQgOiB1bmRlZmluZWQ7XG5cbiAgdmFyIGlkZW50aWZpZXJzID0gbWFyc2hhbGxDdXN0b21JZGVudGlmaWVycyhyZXF1ZXN0LCBpbnB1dFNoYXBlKTtcbiAgdmFyIGNhY2hlS2V5ID0gZ2V0Q2FjaGVLZXkocmVxdWVzdCk7XG4gIGlmIChPYmplY3Qua2V5cyhpZGVudGlmaWVycykubGVuZ3RoID4gMCkge1xuICAgIGNhY2hlS2V5ID0gdXRpbC51cGRhdGUoY2FjaGVLZXksIGlkZW50aWZpZXJzKTtcbiAgICBpZiAob3BlcmF0aW9uTW9kZWwpIGNhY2hlS2V5Lm9wZXJhdGlvbiA9IG9wZXJhdGlvbk1vZGVsLm5hbWU7XG4gIH1cbiAgdmFyIGVuZHBvaW50cyA9IEFXUy5lbmRwb2ludENhY2hlLmdldChjYWNoZUtleSk7XG4gIGlmIChlbmRwb2ludHMgJiYgZW5kcG9pbnRzLmxlbmd0aCA9PT0gMSAmJiBlbmRwb2ludHNbMF0uQWRkcmVzcyA9PT0gJycpIHtcbiAgICAvL2VuZHBvaW50IG9wZXJhdGlvbiBpcyBiZWluZyBtYWRlIGJ1dCByZXNwb25zZSBub3QgeWV0IHJlY2VpdmVkXG4gICAgLy9vciBlbmRwb2ludCBvcGVyYXRpb24ganVzdCBmYWlsZWQgaW4gMSBtaW51dGVcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoZW5kcG9pbnRzICYmIGVuZHBvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgLy9mb3VuZCBlbmRwb2ludCByZWNvcmQgZnJvbSBjYWNoZVxuICAgIHJlcXVlc3QuaHR0cFJlcXVlc3QudXBkYXRlRW5kcG9pbnQoZW5kcG9pbnRzWzBdLkFkZHJlc3MpO1xuICB9IGVsc2Uge1xuICAgIC8vZW5kcG9pbnQgcmVjb3JkIG5vdCBpbiBjYWNoZSBvciBvdXRkYXRlZC4gbWFrZSBkaXNjb3Zlcnkgb3BlcmF0aW9uXG4gICAgdmFyIGVuZHBvaW50UmVxdWVzdCA9IHNlcnZpY2UubWFrZVJlcXVlc3QoYXBpLmVuZHBvaW50T3BlcmF0aW9uLCB7XG4gICAgICBPcGVyYXRpb246IG9wZXJhdGlvbk1vZGVsLm5hbWUsXG4gICAgICBJZGVudGlmaWVyczogaWRlbnRpZmllcnMsXG4gICAgfSk7XG4gICAgYWRkQXBpVmVyc2lvbkhlYWRlcihlbmRwb2ludFJlcXVlc3QpO1xuICAgIGVuZHBvaW50UmVxdWVzdC5yZW1vdmVMaXN0ZW5lcigndmFsaWRhdGUnLCBBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZS5WQUxJREFURV9QQVJBTUVURVJTKTtcbiAgICBlbmRwb2ludFJlcXVlc3QucmVtb3ZlTGlzdGVuZXIoJ3JldHJ5JywgQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuUkVUUllfQ0hFQ0spO1xuICAgIC8vcHV0IGluIGEgcGxhY2Vob2xkZXIgZm9yIGVuZHBvaW50cyBhbHJlYWR5IHJlcXVlc3RlZCwgcHJldmVudFxuICAgIC8vdG9vIG11Y2ggaW4tZmxpZ2h0IGNhbGxzXG4gICAgQVdTLmVuZHBvaW50Q2FjaGUucHV0KGNhY2hlS2V5LCBbe1xuICAgICAgQWRkcmVzczogJycsXG4gICAgICBDYWNoZVBlcmlvZEluTWludXRlczogMVxuICAgIH1dKTtcbiAgICBlbmRwb2ludFJlcXVlc3Quc2VuZChmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICAgIGlmIChkYXRhICYmIGRhdGEuRW5kcG9pbnRzKSB7XG4gICAgICAgIEFXUy5lbmRwb2ludENhY2hlLnB1dChjYWNoZUtleSwgZGF0YS5FbmRwb2ludHMpO1xuICAgICAgfSBlbHNlIGlmIChlcnIpIHtcbiAgICAgICAgQVdTLmVuZHBvaW50Q2FjaGUucHV0KGNhY2hlS2V5LCBbe1xuICAgICAgICAgIEFkZHJlc3M6ICcnLFxuICAgICAgICAgIENhY2hlUGVyaW9kSW5NaW51dGVzOiAxIC8vbm90IHRvIG1ha2UgbW9yZSBlbmRwb2ludCBvcGVyYXRpb24gaW4gbmV4dCAxIG1pbnV0ZVxuICAgICAgICB9XSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxudmFyIHJlcXVlc3RRdWV1ZSA9IHt9O1xuXG4vKipcbiAqIENhbGwgZW5kcG9pbnQgZGlzY292ZXJ5IG9wZXJhdGlvbiB3aGVuIGl0J3MgcmVxdWlyZWQuXG4gKiBXaGVuIGVuZHBvaW50IGlzIGF2YWlsYWJsZSBpbiBjYWNoZSB0aGVuIHVzZSBjYWNoZWQgb25lcy4gSWYgZW5kcG9pbnRzIGFyZVxuICogdW5hdmFpbGFibGUgdGhlbiBTREsgc2hvdWxkIGNhbGwgZW5kcG9pbnQgb3BlcmF0aW9uIHRoZW4gdXNlIHJldHVybmVkIG5ld1xuICogZW5kcG9pbnQgZm9yIHRoZSBhcGkgY2FsbC4gU0RLIHdpbGwgYXV0b21hdGljYWxseSBhdHRlbXB0IHRvIGRvIGVuZHBvaW50XG4gKiBkaXNjb3ZlcnkuIFRoaXMgaXMgdHVybmVkIG9mZiBieSBkZWZhdWx0XG4gKiBAcGFyYW0gW29iamVjdF0gcmVxdWVzdCBvYmplY3RcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZXF1aXJlZERpc2NvdmVyRW5kcG9pbnQocmVxdWVzdCwgZG9uZSkge1xuICB2YXIgc2VydmljZSA9IHJlcXVlc3Quc2VydmljZTtcbiAgdmFyIGFwaSA9IHNlcnZpY2UuYXBpO1xuICB2YXIgb3BlcmF0aW9uTW9kZWwgPSBhcGkub3BlcmF0aW9ucyA/IGFwaS5vcGVyYXRpb25zW3JlcXVlc3Qub3BlcmF0aW9uXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGlucHV0U2hhcGUgPSBvcGVyYXRpb25Nb2RlbCA/IG9wZXJhdGlvbk1vZGVsLmlucHV0IDogdW5kZWZpbmVkO1xuXG4gIHZhciBpZGVudGlmaWVycyA9IG1hcnNoYWxsQ3VzdG9tSWRlbnRpZmllcnMocmVxdWVzdCwgaW5wdXRTaGFwZSk7XG4gIHZhciBjYWNoZUtleSA9IGdldENhY2hlS2V5KHJlcXVlc3QpO1xuICBpZiAoT2JqZWN0LmtleXMoaWRlbnRpZmllcnMpLmxlbmd0aCA+IDApIHtcbiAgICBjYWNoZUtleSA9IHV0aWwudXBkYXRlKGNhY2hlS2V5LCBpZGVudGlmaWVycyk7XG4gICAgaWYgKG9wZXJhdGlvbk1vZGVsKSBjYWNoZUtleS5vcGVyYXRpb24gPSBvcGVyYXRpb25Nb2RlbC5uYW1lO1xuICB9XG4gIHZhciBjYWNoZUtleVN0ciA9IEFXUy5FbmRwb2ludENhY2hlLmdldEtleVN0cmluZyhjYWNoZUtleSk7XG4gIHZhciBlbmRwb2ludHMgPSBBV1MuZW5kcG9pbnRDYWNoZS5nZXQoY2FjaGVLZXlTdHIpOyAvL2VuZHBvaW50IGNhY2hlIGFsc28gYWNjZXB0cyBzdHJpbmcga2V5c1xuICBpZiAoZW5kcG9pbnRzICYmIGVuZHBvaW50cy5sZW5ndGggPT09IDEgJiYgZW5kcG9pbnRzWzBdLkFkZHJlc3MgPT09ICcnKSB7XG4gICAgLy9lbmRwb2ludCBvcGVyYXRpb24gaXMgYmVpbmcgbWFkZSBidXQgcmVzcG9uc2Ugbm90IHlldCByZWNlaXZlZFxuICAgIC8vcHVzaCByZXF1ZXN0IG9iamVjdCB0byBhIHBlbmRpbmcgcXVldWVcbiAgICBpZiAoIXJlcXVlc3RRdWV1ZVtjYWNoZUtleVN0cl0pIHJlcXVlc3RRdWV1ZVtjYWNoZUtleVN0cl0gPSBbXTtcbiAgICByZXF1ZXN0UXVldWVbY2FjaGVLZXlTdHJdLnB1c2goe3JlcXVlc3Q6IHJlcXVlc3QsIGNhbGxiYWNrOiBkb25lfSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKGVuZHBvaW50cyAmJiBlbmRwb2ludHMubGVuZ3RoID4gMCkge1xuICAgIHJlcXVlc3QuaHR0cFJlcXVlc3QudXBkYXRlRW5kcG9pbnQoZW5kcG9pbnRzWzBdLkFkZHJlc3MpO1xuICAgIGRvbmUoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZW5kcG9pbnRSZXF1ZXN0ID0gc2VydmljZS5tYWtlUmVxdWVzdChhcGkuZW5kcG9pbnRPcGVyYXRpb24sIHtcbiAgICAgIE9wZXJhdGlvbjogb3BlcmF0aW9uTW9kZWwubmFtZSxcbiAgICAgIElkZW50aWZpZXJzOiBpZGVudGlmaWVycyxcbiAgICB9KTtcbiAgICBlbmRwb2ludFJlcXVlc3QucmVtb3ZlTGlzdGVuZXIoJ3ZhbGlkYXRlJywgQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuVkFMSURBVEVfUEFSQU1FVEVSUyk7XG4gICAgYWRkQXBpVmVyc2lvbkhlYWRlcihlbmRwb2ludFJlcXVlc3QpO1xuXG4gICAgLy9wdXQgaW4gYSBwbGFjZWhvbGRlciBmb3IgZW5kcG9pbnRzIGFscmVhZHkgcmVxdWVzdGVkLCBwcmV2ZW50XG4gICAgLy90b28gbXVjaCBpbi1mbGlnaHQgY2FsbHNcbiAgICBBV1MuZW5kcG9pbnRDYWNoZS5wdXQoY2FjaGVLZXlTdHIsIFt7XG4gICAgICBBZGRyZXNzOiAnJyxcbiAgICAgIENhY2hlUGVyaW9kSW5NaW51dGVzOiA2MCAvL2xvbmctbGl2ZSBjYWNoZVxuICAgIH1dKTtcbiAgICBlbmRwb2ludFJlcXVlc3Quc2VuZChmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgdmFyIGVycm9yUGFyYW1zID0ge1xuICAgICAgICAgIGNvZGU6ICdFbmRwb2ludERpc2NvdmVyeUV4Y2VwdGlvbicsXG4gICAgICAgICAgbWVzc2FnZTogJ1JlcXVlc3QgY2Fubm90IGJlIGZ1bGZpbGxlZCB3aXRob3V0IHNwZWNpZnlpbmcgYW4gZW5kcG9pbnQnLFxuICAgICAgICAgIHJldHJ5YWJsZTogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZS5lcnJvciA9IHV0aWwuZXJyb3IoZXJyLCBlcnJvclBhcmFtcyk7XG4gICAgICAgIEFXUy5lbmRwb2ludENhY2hlLnJlbW92ZShjYWNoZUtleSk7XG5cbiAgICAgICAgLy9mYWlsIGFsbCB0aGUgcGVuZGluZyByZXF1ZXN0cyBpbiBiYXRjaFxuICAgICAgICBpZiAocmVxdWVzdFF1ZXVlW2NhY2hlS2V5U3RyXSkge1xuICAgICAgICAgIHZhciBwZW5kaW5nUmVxdWVzdHMgPSByZXF1ZXN0UXVldWVbY2FjaGVLZXlTdHJdO1xuICAgICAgICAgIHV0aWwuYXJyYXlFYWNoKHBlbmRpbmdSZXF1ZXN0cywgZnVuY3Rpb24ocmVxdWVzdENvbnRleHQpIHtcbiAgICAgICAgICAgIHJlcXVlc3RDb250ZXh0LnJlcXVlc3QucmVzcG9uc2UuZXJyb3IgPSB1dGlsLmVycm9yKGVyciwgZXJyb3JQYXJhbXMpO1xuICAgICAgICAgICAgcmVxdWVzdENvbnRleHQuY2FsbGJhY2soKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdFF1ZXVlW2NhY2hlS2V5U3RyXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChkYXRhKSB7XG4gICAgICAgIEFXUy5lbmRwb2ludENhY2hlLnB1dChjYWNoZUtleVN0ciwgZGF0YS5FbmRwb2ludHMpO1xuICAgICAgICByZXF1ZXN0Lmh0dHBSZXF1ZXN0LnVwZGF0ZUVuZHBvaW50KGRhdGEuRW5kcG9pbnRzWzBdLkFkZHJlc3MpO1xuXG4gICAgICAgIC8vdXBkYXRlIHRoZSBlbmRwb2ludCBmb3IgYWxsIHRoZSBwZW5kaW5nIHJlcXVlc3RzIGluIGJhdGNoXG4gICAgICAgIGlmIChyZXF1ZXN0UXVldWVbY2FjaGVLZXlTdHJdKSB7XG4gICAgICAgICAgdmFyIHBlbmRpbmdSZXF1ZXN0cyA9IHJlcXVlc3RRdWV1ZVtjYWNoZUtleVN0cl07XG4gICAgICAgICAgdXRpbC5hcnJheUVhY2gocGVuZGluZ1JlcXVlc3RzLCBmdW5jdGlvbihyZXF1ZXN0Q29udGV4dCkge1xuICAgICAgICAgICAgcmVxdWVzdENvbnRleHQucmVxdWVzdC5odHRwUmVxdWVzdC51cGRhdGVFbmRwb2ludChkYXRhLkVuZHBvaW50c1swXS5BZGRyZXNzKTtcbiAgICAgICAgICAgIHJlcXVlc3RDb250ZXh0LmNhbGxiYWNrKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RRdWV1ZVtjYWNoZUtleVN0cl07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIGFkZCBhcGkgdmVyc2lvbiBoZWFkZXIgdG8gZW5kcG9pbnQgb3BlcmF0aW9uXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkQXBpVmVyc2lvbkhlYWRlcihlbmRwb2ludFJlcXVlc3QpIHtcbiAgdmFyIGFwaSA9IGVuZHBvaW50UmVxdWVzdC5zZXJ2aWNlLmFwaTtcbiAgdmFyIGFwaVZlcnNpb24gPSBhcGkuYXBpVmVyc2lvbjtcbiAgaWYgKGFwaVZlcnNpb24gJiYgIWVuZHBvaW50UmVxdWVzdC5odHRwUmVxdWVzdC5oZWFkZXJzWyd4LWFtei1hcGktdmVyc2lvbiddKSB7XG4gICAgZW5kcG9pbnRSZXF1ZXN0Lmh0dHBSZXF1ZXN0LmhlYWRlcnNbJ3gtYW16LWFwaS12ZXJzaW9uJ10gPSBhcGlWZXJzaW9uO1xuICB9XG59XG5cbi8qKlxuICogSWYgYXBpIGNhbGwgZ2V0cyBpbnZhbGlkIGVuZHBvaW50IGV4Y2VwdGlvbiwgU0RLIHNob3VsZCBhdHRlbXB0IHRvIHJlbW92ZSB0aGUgaW52YWxpZFxuICogZW5kcG9pbnQgZnJvbSBjYWNoZS5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpbnZhbGlkYXRlQ2FjaGVkRW5kcG9pbnRzKHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuICB2YXIgaHR0cFJlc3BvbnNlID0gcmVzcG9uc2UuaHR0cFJlc3BvbnNlO1xuICBpZiAoZXJyb3IgJiZcbiAgICAoZXJyb3IuY29kZSA9PT0gJ0ludmFsaWRFbmRwb2ludEV4Y2VwdGlvbicgfHwgaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDQyMSlcbiAgKSB7XG4gICAgdmFyIHJlcXVlc3QgPSByZXNwb25zZS5yZXF1ZXN0O1xuICAgIHZhciBvcGVyYXRpb25zID0gcmVxdWVzdC5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zIHx8IHt9O1xuICAgIHZhciBpbnB1dFNoYXBlID0gb3BlcmF0aW9uc1tyZXF1ZXN0Lm9wZXJhdGlvbl0gPyBvcGVyYXRpb25zW3JlcXVlc3Qub3BlcmF0aW9uXS5pbnB1dCA6IHVuZGVmaW5lZDtcbiAgICB2YXIgaWRlbnRpZmllcnMgPSBtYXJzaGFsbEN1c3RvbUlkZW50aWZpZXJzKHJlcXVlc3QsIGlucHV0U2hhcGUpO1xuICAgIHZhciBjYWNoZUtleSA9IGdldENhY2hlS2V5KHJlcXVlc3QpO1xuICAgIGlmIChPYmplY3Qua2V5cyhpZGVudGlmaWVycykubGVuZ3RoID4gMCkge1xuICAgICAgY2FjaGVLZXkgPSB1dGlsLnVwZGF0ZShjYWNoZUtleSwgaWRlbnRpZmllcnMpO1xuICAgICAgaWYgKG9wZXJhdGlvbnNbcmVxdWVzdC5vcGVyYXRpb25dKSBjYWNoZUtleS5vcGVyYXRpb24gPSBvcGVyYXRpb25zW3JlcXVlc3Qub3BlcmF0aW9uXS5uYW1lO1xuICAgIH1cbiAgICBBV1MuZW5kcG9pbnRDYWNoZS5yZW1vdmUoY2FjaGVLZXkpO1xuICB9XG59XG5cbi8qKlxuICogSWYgZW5kcG9pbnQgaXMgZXhwbGljaXRseSBjb25maWd1cmVkLCBTREsgc2hvdWxkIG5vdCBkbyBlbmRwb2ludCBkaXNjb3ZlcnkgaW4gYW55dGltZS5cbiAqIEBwYXJhbSBbb2JqZWN0XSBjbGllbnQgU2VydmljZSBjbGllbnQgb2JqZWN0LlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGhhc0N1c3RvbUVuZHBvaW50KGNsaWVudCkge1xuICAvL2lmIHNldCBlbmRwb2ludCBpcyBzZXQgZm9yIHNwZWNpZmljIGNsaWVudCwgZW5hYmxlIGVuZHBvaW50IGRpc2NvdmVyeSB3aWxsIHJhaXNlIGFuIGVycm9yLlxuICBpZiAoY2xpZW50Ll9vcmlnaW5hbENvbmZpZyAmJiBjbGllbnQuX29yaWdpbmFsQ29uZmlnLmVuZHBvaW50ICYmIGNsaWVudC5fb3JpZ2luYWxDb25maWcuZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkID09PSB0cnVlKSB7XG4gICAgdGhyb3cgdXRpbC5lcnJvcihuZXcgRXJyb3IoKSwge1xuICAgICAgY29kZTogJ0NvbmZpZ3VyYXRpb25FeGNlcHRpb24nLFxuICAgICAgbWVzc2FnZTogJ0N1c3RvbSBlbmRwb2ludCBpcyBzdXBwbGllZDsgZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkIG11c3Qgbm90IGJlIHRydWUuJ1xuICAgIH0pO1xuICB9O1xuICB2YXIgc3ZjQ29uZmlnID0gQVdTLmNvbmZpZ1tjbGllbnQuc2VydmljZUlkZW50aWZpZXJdIHx8IHt9O1xuICByZXR1cm4gQm9vbGVhbihBV1MuY29uZmlnLmVuZHBvaW50IHx8IHN2Y0NvbmZpZy5lbmRwb2ludCB8fCAoY2xpZW50Ll9vcmlnaW5hbENvbmZpZyAmJiBjbGllbnQuX29yaWdpbmFsQ29uZmlnLmVuZHBvaW50KSk7XG59XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGlzRmFsc3kodmFsdWUpIHtcbiAgcmV0dXJuIFsnZmFsc2UnLCAnMCddLmluZGV4T2YodmFsdWUpID49IDA7XG59XG5cbi8qKlxuICogSWYgZW5kcG9pbnQgZGlzY292ZXJ5IHNob3VsZCBwZXJmb3JtIGZvciB0aGlzIHJlcXVlc3Qgd2hlbiBlbmRwb2ludCBkaXNjb3ZlcnkgaXMgb3B0aW9uYWwuXG4gKiBTREsgcGVyZm9ybXMgY29uZmlnIHJlc29sdXRpb24gaW4gb3JkZXIgbGlrZSBiZWxvdzpcbiAqIDEuIElmIHR1cm5lZCBvbiBjbGllbnQgY29uZmlndXJhdGlvbihkZWZhdWx0IHRvIG9mZikgdGhlbiB0dXJuIG9uIGVuZHBvaW50IGRpc2NvdmVyeS5cbiAqIDIuIElmIHR1cm5lZCBvbiBpbiBlbnYgQVdTX0VOQUJMRV9FTkRQT0lOVF9ESVNDT1ZFUlkgdGhlbiB0dXJuIG9uIGVuZHBvaW50IGRpc2NvdmVyeS5cbiAqIDMuIElmIHR1cm5lZCBvbiBpbiBzaGFyZWQgaW5pIGNvbmZpZyBmaWxlIHdpdGgga2V5ICdlbmRwb2ludF9kaXNjb3ZlcnlfZW5hYmxlZCcsIHRoZW5cbiAqICAgdHVybiBvbiBlbmRwb2ludCBkaXNjb3ZlcnkuXG4gKiBAcGFyYW0gW29iamVjdF0gcmVxdWVzdCByZXF1ZXN0IG9iamVjdC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpc0VuZHBvaW50RGlzY292ZXJ5QXBwbGljYWJsZShyZXF1ZXN0KSB7XG4gIHZhciBzZXJ2aWNlID0gcmVxdWVzdC5zZXJ2aWNlIHx8IHt9O1xuICBpZiAoc2VydmljZS5jb25maWcuZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkID09PSB0cnVlKSByZXR1cm4gdHJ1ZTtcblxuICAvL3NoYXJlZCBpbmkgZmlsZSBpcyBvbmx5IGF2YWlsYWJsZSBpbiBOb2RlXG4gIC8vbm90IHRvIGNoZWNrIGVudiBpbiBicm93c2VyXG4gIGlmICh1dGlsLmlzQnJvd3NlcigpKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmRwb2ludERpc2NvdmVyeUVuYWJsZWRFbnZzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGVudiA9IGVuZHBvaW50RGlzY292ZXJ5RW5hYmxlZEVudnNbaV07XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9jZXNzLmVudiwgZW52KSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52W2Vudl0gPT09ICcnIHx8IHByb2Nlc3MuZW52W2Vudl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyB1dGlsLmVycm9yKG5ldyBFcnJvcigpLCB7XG4gICAgICAgICAgY29kZTogJ0NvbmZpZ3VyYXRpb25FeGNlcHRpb24nLFxuICAgICAgICAgIG1lc3NhZ2U6ICdlbnZpcm9ubWVudGFsIHZhcmlhYmxlICcgKyBlbnYgKyAnIGNhbm5vdCBiZSBzZXQgdG8gbm90aGluZydcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzRmFsc3kocHJvY2Vzcy5lbnZbZW52XSkpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb25maWdGaWxlID0ge307XG4gIHRyeSB7XG4gICAgY29uZmlnRmlsZSA9IEFXUy51dGlsLmluaUxvYWRlciA/IEFXUy51dGlsLmluaUxvYWRlci5sb2FkRnJvbSh7XG4gICAgICBpc0NvbmZpZzogdHJ1ZSxcbiAgICAgIGZpbGVuYW1lOiBwcm9jZXNzLmVudltBV1MudXRpbC5zaGFyZWRDb25maWdGaWxlRW52XVxuICAgIH0pIDoge307XG4gIH0gY2F0Y2ggKGUpIHt9XG4gIHZhciBzaGFyZWRGaWxlQ29uZmlnID0gY29uZmlnRmlsZVtcbiAgICBwcm9jZXNzLmVudi5BV1NfUFJPRklMRSB8fCBBV1MudXRpbC5kZWZhdWx0UHJvZmlsZVxuICBdIHx8IHt9O1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoYXJlZEZpbGVDb25maWcsICdlbmRwb2ludF9kaXNjb3ZlcnlfZW5hYmxlZCcpKSB7XG4gICAgaWYgKHNoYXJlZEZpbGVDb25maWcuZW5kcG9pbnRfZGlzY292ZXJ5X2VuYWJsZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgdXRpbC5lcnJvcihuZXcgRXJyb3IoKSwge1xuICAgICAgICBjb2RlOiAnQ29uZmlndXJhdGlvbkV4Y2VwdGlvbicsXG4gICAgICAgIG1lc3NhZ2U6ICdjb25maWcgZmlsZSBlbnRyeSBcXCdlbmRwb2ludF9kaXNjb3ZlcnlfZW5hYmxlZFxcJyBjYW5ub3QgYmUgc2V0IHRvIG5vdGhpbmcnXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCFpc0ZhbHN5KHNoYXJlZEZpbGVDb25maWcuZW5kcG9pbnRfZGlzY292ZXJ5X2VuYWJsZWQpKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogYXR0YWNoIGVuZHBvaW50IGRpc2NvdmVyeSBsb2dpYyB0byByZXF1ZXN0IG9iamVjdFxuICogQHBhcmFtIFtvYmplY3RdIHJlcXVlc3RcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkaXNjb3ZlckVuZHBvaW50KHJlcXVlc3QsIGRvbmUpIHtcbiAgdmFyIHNlcnZpY2UgPSByZXF1ZXN0LnNlcnZpY2UgfHwge307XG4gIGlmIChoYXNDdXN0b21FbmRwb2ludChzZXJ2aWNlKSB8fCByZXF1ZXN0LmlzUHJlc2lnbmVkKCkpIHJldHVybiBkb25lKCk7XG5cbiAgaWYgKCFpc0VuZHBvaW50RGlzY292ZXJ5QXBwbGljYWJsZShyZXF1ZXN0KSkgcmV0dXJuIGRvbmUoKTtcblxuICByZXF1ZXN0Lmh0dHBSZXF1ZXN0LmFwcGVuZFRvVXNlckFnZW50KCdlbmRwb2ludC1kaXNjb3ZlcnknKTtcblxuICB2YXIgb3BlcmF0aW9ucyA9IHNlcnZpY2UuYXBpLm9wZXJhdGlvbnMgfHwge307XG4gIHZhciBvcGVyYXRpb25Nb2RlbCA9IG9wZXJhdGlvbnNbcmVxdWVzdC5vcGVyYXRpb25dO1xuICB2YXIgaXNFbmRwb2ludERpc2NvdmVyeVJlcXVpcmVkID0gb3BlcmF0aW9uTW9kZWwgPyBvcGVyYXRpb25Nb2RlbC5lbmRwb2ludERpc2NvdmVyeVJlcXVpcmVkIDogJ05VTEwnO1xuICBzd2l0Y2ggKGlzRW5kcG9pbnREaXNjb3ZlcnlSZXF1aXJlZCkge1xuICAgIGNhc2UgJ09QVElPTkFMJzpcbiAgICAgIG9wdGlvbmFsRGlzY292ZXJFbmRwb2ludChyZXF1ZXN0KTtcbiAgICAgIHJlcXVlc3QuYWRkTmFtZWRMaXN0ZW5lcignSU5WQUxJREFURV9DQUNIRURfRU5EUE9JTlRTJywgJ2V4dHJhY3RFcnJvcicsIGludmFsaWRhdGVDYWNoZWRFbmRwb2ludHMpO1xuICAgICAgZG9uZSgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUkVRVUlSRUQnOlxuICAgICAgcmVxdWVzdC5hZGROYW1lZExpc3RlbmVyKCdJTlZBTElEQVRFX0NBQ0hFRF9FTkRQT0lOVFMnLCAnZXh0cmFjdEVycm9yJywgaW52YWxpZGF0ZUNhY2hlZEVuZHBvaW50cyk7XG4gICAgICByZXF1aXJlZERpc2NvdmVyRW5kcG9pbnQocmVxdWVzdCwgZG9uZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdOVUxMJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZG9uZSgpO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRpc2NvdmVyRW5kcG9pbnQ6IGRpc2NvdmVyRW5kcG9pbnQsXG4gIHJlcXVpcmVkRGlzY292ZXJFbmRwb2ludDogcmVxdWlyZWREaXNjb3ZlckVuZHBvaW50LFxuICBvcHRpb25hbERpc2NvdmVyRW5kcG9pbnQ6IG9wdGlvbmFsRGlzY292ZXJFbmRwb2ludCxcbiAgbWFyc2hhbGxDdXN0b21JZGVudGlmaWVyczogbWFyc2hhbGxDdXN0b21JZGVudGlmaWVycyxcbiAgZ2V0Q2FjaGVLZXk6IGdldENhY2hlS2V5LFxuICBpbnZhbGlkYXRlQ2FjaGVkRW5kcG9pbnQ6IGludmFsaWRhdGVDYWNoZWRFbmRwb2ludHMsXG59O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9jb3JlXCI6MTksXCIuL3V0aWxcIjo3MixcIl9wcm9jZXNzXCI6ODZ9XSwyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZXZlbnRNZXNzYWdlQ2h1bmtlciA9IHJlcXVpcmUoJy4uL2V2ZW50LXN0cmVhbS9ldmVudC1tZXNzYWdlLWNodW5rZXInKS5ldmVudE1lc3NhZ2VDaHVua2VyO1xudmFyIHBhcnNlRXZlbnQgPSByZXF1aXJlKCcuL3BhcnNlLWV2ZW50JykucGFyc2VFdmVudDtcblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRTdHJlYW0oYm9keSwgcGFyc2VyLCBtb2RlbCkge1xuICAgIHZhciBldmVudE1lc3NhZ2VzID0gZXZlbnRNZXNzYWdlQ2h1bmtlcihib2R5KTtcblxuICAgIHZhciBldmVudHMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRNZXNzYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBldmVudHMucHVzaChwYXJzZUV2ZW50KHBhcnNlciwgZXZlbnRNZXNzYWdlc1tpXSwgbW9kZWwpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXZlbnRzO1xufVxuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBjcmVhdGVFdmVudFN0cmVhbTogY3JlYXRlRXZlbnRTdHJlYW1cbn07XG5cbn0se1wiLi4vZXZlbnQtc3RyZWFtL2V2ZW50LW1lc3NhZ2UtY2h1bmtlclwiOjI5LFwiLi9wYXJzZS1ldmVudFwiOjMxfV0sMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBUYWtlcyBpbiBhIGJ1ZmZlciBvZiBldmVudCBtZXNzYWdlcyBhbmQgc3BsaXRzIHRoZW0gaW50byBpbmRpdmlkdWFsIG1lc3NhZ2VzLlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlclxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGV2ZW50TWVzc2FnZUNodW5rZXIoYnVmZmVyKSB7XG4gICAgLyoqIEB0eXBlIEJ1ZmZlcltdICovXG4gICAgdmFyIG1lc3NhZ2VzID0gW107XG4gICAgdmFyIG9mZnNldCA9IDA7XG5cbiAgICB3aGlsZSAob2Zmc2V0IDwgYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICB2YXIgdG90YWxMZW5ndGggPSBidWZmZXIucmVhZEludDMyQkUob2Zmc2V0KTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IGJ1ZmZlciBmb3IgaW5kaXZpZHVhbCBtZXNzYWdlIChzaGFyZXMgbWVtb3J5IHdpdGggb3JpZ2luYWwpXG4gICAgICAgIHZhciBtZXNzYWdlID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgdG90YWxMZW5ndGggKyBvZmZzZXQpO1xuICAgICAgICAvLyBpbmNyZW1lbnQgb2Zmc2V0IHRvIGl0IHN0YXJ0cyBhdCB0aGUgbmV4dCBtZXNzYWdlXG4gICAgICAgIG9mZnNldCArPSB0b3RhbExlbmd0aDtcblxuICAgICAgICBtZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHJldHVybiBtZXNzYWdlcztcbn1cblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZXZlbnRNZXNzYWdlQ2h1bmtlcjogZXZlbnRNZXNzYWdlQ2h1bmtlclxufTtcblxufSx7fV0sMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHV0aWwgPSByZXF1aXJlKCcuLi9jb3JlJykudXRpbDtcbnZhciB0b0J1ZmZlciA9IHV0aWwuYnVmZmVyLnRvQnVmZmVyO1xuXG4vKipcbiAqIEEgbG9zc2xlc3MgcmVwcmVzZW50YXRpb24gb2YgYSBzaWduZWQsIDY0LWJpdCBpbnRlZ2VyLiBJbnN0YW5jZXMgb2YgdGhpc1xuICogY2xhc3MgbWF5IGJlIHVzZWQgaW4gYXJpdGhtZXRpYyBleHByZXNzaW9ucyBhcyBpZiB0aGV5IHdlcmUgbnVtZXJpY1xuICogcHJpbWl0aXZlcywgYnV0IHRoZSBiaW5hcnkgcmVwcmVzZW50YXRpb24gd2lsbCBiZSBwcmVzZXJ2ZWQgdW5jaGFuZ2VkIGFzIHRoZVxuICogYGJ5dGVzYCBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0LiBUaGUgYnl0ZXMgc2hvdWxkIGJlIGVuY29kZWQgYXMgYmlnLWVuZGlhbixcbiAqIHR3bydzIGNvbXBsZW1lbnQgaW50ZWdlcnMuXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnl0ZXNcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gSW50NjQoYnl0ZXMpIHtcbiAgICBpZiAoYnl0ZXMubGVuZ3RoICE9PSA4KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW50NjQgYnVmZmVycyBtdXN0IGJlIGV4YWN0bHkgOCBieXRlcycpO1xuICAgIH1cbiAgICBpZiAoIXV0aWwuQnVmZmVyLmlzQnVmZmVyKGJ5dGVzKSkgYnl0ZXMgPSB0b0J1ZmZlcihieXRlcyk7XG5cbiAgICB0aGlzLmJ5dGVzID0gYnl0ZXM7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IG51bWJlclxuICogQHJldHVybnMge0ludDY0fVxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5JbnQ2NC5mcm9tTnVtYmVyID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgaWYgKG51bWJlciA+IDkyMjMzNzIwMzY4NTQ3NzU4MDcgfHwgbnVtYmVyIDwgLTkyMjMzNzIwMzY4NTQ3NzU4MDgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgbnVtYmVyICsgJyBpcyB0b28gbGFyZ2UgKG9yLCBpZiBuZWdhdGl2ZSwgdG9vIHNtYWxsKSB0byByZXByZXNlbnQgYXMgYW4gSW50NjQnXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoOCk7XG4gICAgZm9yIChcbiAgICAgICAgdmFyIGkgPSA3LCByZW1haW5pbmcgPSBNYXRoLmFicyhNYXRoLnJvdW5kKG51bWJlcikpO1xuICAgICAgICBpID4gLTEgJiYgcmVtYWluaW5nID4gMDtcbiAgICAgICAgaS0tLCByZW1haW5pbmcgLz0gMjU2XG4gICAgKSB7XG4gICAgICAgIGJ5dGVzW2ldID0gcmVtYWluaW5nO1xuICAgIH1cblxuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgIG5lZ2F0ZShieXRlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBJbnQ2NChieXRlcyk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbkludDY0LnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJ5dGVzID0gdGhpcy5ieXRlcy5zbGljZSgwKTtcbiAgICB2YXIgbmVnYXRpdmUgPSBieXRlc1swXSAmIDEyODtcbiAgICBpZiAobmVnYXRpdmUpIHtcbiAgICAgICAgbmVnYXRlKGJ5dGVzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VJbnQoYnl0ZXMudG9TdHJpbmcoJ2hleCcpLCAxNikgKiAobmVnYXRpdmUgPyAtMSA6IDEpO1xufTtcblxuSW50NjQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFN0cmluZyh0aGlzLnZhbHVlT2YoKSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QnVmZmVyfSBieXRlc1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBuZWdhdGUoYnl0ZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuICAgICAgICBieXRlc1tpXSBePSAweEZGO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gNzsgaSA+IC0xOyBpLS0pIHtcbiAgICAgICAgYnl0ZXNbaV0rKztcbiAgICAgICAgaWYgKGJ5dGVzW2ldICE9PSAwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgSW50NjQ6IEludDY0XG59O1xuXG59LHtcIi4uL2NvcmVcIjoxOX1dLDMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBwYXJzZU1lc3NhZ2UgPSByZXF1aXJlKCcuL3BhcnNlLW1lc3NhZ2UnKS5wYXJzZU1lc3NhZ2U7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7Kn0gcGFyc2VyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbWVzc2FnZVxuICogQHBhcmFtIHsqfSBzaGFwZVxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRXZlbnQocGFyc2VyLCBtZXNzYWdlLCBzaGFwZSkge1xuICAgIHZhciBwYXJzZWRNZXNzYWdlID0gcGFyc2VNZXNzYWdlKG1lc3NhZ2UpO1xuXG4gICAgLy8gY2hlY2sgaWYgbWVzc2FnZSBpcyBhbiBldmVudCBvciBlcnJvclxuICAgIHZhciBtZXNzYWdlVHlwZSA9IHBhcnNlZE1lc3NhZ2UuaGVhZGVyc1snOm1lc3NhZ2UtdHlwZSddO1xuICAgIGlmIChtZXNzYWdlVHlwZSkge1xuICAgICAgICBpZiAobWVzc2FnZVR5cGUudmFsdWUgPT09ICdlcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IHBhcnNlRXJyb3IocGFyc2VkTWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZVR5cGUudmFsdWUgIT09ICdldmVudCcpIHtcbiAgICAgICAgICAgIC8vIG5vdCBzdXJlIGhvdyB0byBwYXJzZSBub24tZXZlbnRzL25vbi1lcnJvcnMsIGlnbm9yZSBmb3Igbm93XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkZXRlcm1pbmUgZXZlbnQgdHlwZVxuICAgIHZhciBldmVudFR5cGUgPSBwYXJzZWRNZXNzYWdlLmhlYWRlcnNbJzpldmVudC10eXBlJ107XG4gICAgLy8gY2hlY2sgdGhhdCB0aGUgZXZlbnQgdHlwZSBpcyBtb2RlbGVkXG4gICAgdmFyIGV2ZW50TW9kZWwgPSBzaGFwZS5tZW1iZXJzW2V2ZW50VHlwZS52YWx1ZV07XG4gICAgaWYgKCFldmVudE1vZGVsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgLy8gY2hlY2sgaWYgYW4gZXZlbnQgcGF5bG9hZCBleGlzdHNcbiAgICB2YXIgZXZlbnRQYXlsb2FkTWVtYmVyTmFtZSA9IGV2ZW50TW9kZWwuZXZlbnRQYXlsb2FkTWVtYmVyTmFtZTtcbiAgICBpZiAoZXZlbnRQYXlsb2FkTWVtYmVyTmFtZSkge1xuICAgICAgICB2YXIgcGF5bG9hZFNoYXBlID0gZXZlbnRNb2RlbC5tZW1iZXJzW2V2ZW50UGF5bG9hZE1lbWJlck5hbWVdO1xuICAgICAgICAvLyBpZiB0aGUgc2hhcGUgaXMgYmluYXJ5LCByZXR1cm4gdGhlIGJ5dGUgYXJyYXlcbiAgICAgICAgaWYgKHBheWxvYWRTaGFwZS50eXBlID09PSAnYmluYXJ5Jykge1xuICAgICAgICAgICAgcmVzdWx0W2V2ZW50UGF5bG9hZE1lbWJlck5hbWVdID0gcGFyc2VkTWVzc2FnZS5ib2R5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0W2V2ZW50UGF5bG9hZE1lbWJlck5hbWVdID0gcGFyc2VyLnBhcnNlKHBhcnNlZE1lc3NhZ2UuYm9keS50b1N0cmluZygpLCBwYXlsb2FkU2hhcGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gcmVhZCBldmVudCBoZWFkZXJzXG4gICAgdmFyIGV2ZW50SGVhZGVyTmFtZXMgPSBldmVudE1vZGVsLmV2ZW50SGVhZGVyTWVtYmVyTmFtZXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudEhlYWRlck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBuYW1lID0gZXZlbnRIZWFkZXJOYW1lc1tpXTtcbiAgICAgICAgaWYgKHBhcnNlZE1lc3NhZ2UuaGVhZGVyc1tuYW1lXSkge1xuICAgICAgICAgICAgLy8gcGFyc2UgdGhlIGhlYWRlciFcbiAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IGV2ZW50TW9kZWwubWVtYmVyc1tuYW1lXS50b1R5cGUocGFyc2VkTWVzc2FnZS5oZWFkZXJzW25hbWVdLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBvdXRwdXQgPSB7fTtcbiAgICBvdXRwdXRbZXZlbnRUeXBlLnZhbHVlXSA9IHJlc3VsdDtcbiAgICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBwYXJzZUVycm9yKG1lc3NhZ2UpIHtcbiAgICB2YXIgZXJyb3JDb2RlID0gbWVzc2FnZS5oZWFkZXJzWyc6ZXJyb3ItY29kZSddO1xuICAgIHZhciBlcnJvck1lc3NhZ2UgPSBtZXNzYWdlLmhlYWRlcnNbJzplcnJvci1tZXNzYWdlJ107XG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKGVycm9yTWVzc2FnZS52YWx1ZSB8fCBlcnJvck1lc3NhZ2UpO1xuICAgIGVycm9yLmNvZGUgPSBlcnJvci5uYW1lID0gZXJyb3JDb2RlLnZhbHVlIHx8IGVycm9yQ29kZTtcbiAgICByZXR1cm4gZXJyb3I7XG59XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHBhcnNlRXZlbnQ6IHBhcnNlRXZlbnRcbn07XG5cbn0se1wiLi9wYXJzZS1tZXNzYWdlXCI6MzJ9XSwzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgSW50NjQgPSByZXF1aXJlKCcuL2ludDY0JykuSW50NjQ7XG5cbnZhciBzcGxpdE1lc3NhZ2UgPSByZXF1aXJlKCcuL3NwbGl0LW1lc3NhZ2UnKS5zcGxpdE1lc3NhZ2U7XG5cbnZhciBCT09MRUFOX1RBRyA9ICdib29sZWFuJztcbnZhciBCWVRFX1RBRyA9ICdieXRlJztcbnZhciBTSE9SVF9UQUcgPSAnc2hvcnQnO1xudmFyIElOVF9UQUcgPSAnaW50ZWdlcic7XG52YXIgTE9OR19UQUcgPSAnbG9uZyc7XG52YXIgQklOQVJZX1RBRyA9ICdiaW5hcnknO1xudmFyIFNUUklOR19UQUcgPSAnc3RyaW5nJztcbnZhciBUSU1FU1RBTVBfVEFHID0gJ3RpbWVzdGFtcCc7XG52YXIgVVVJRF9UQUcgPSAndXVpZCc7XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGhlYWRlcnNcbiAqL1xuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICB2YXIgb3V0ID0ge307XG4gICAgdmFyIHBvc2l0aW9uID0gMDtcbiAgICB3aGlsZSAocG9zaXRpb24gPCBoZWFkZXJzLmxlbmd0aCkge1xuICAgICAgICB2YXIgbmFtZUxlbmd0aCA9IGhlYWRlcnMucmVhZFVJbnQ4KHBvc2l0aW9uKyspO1xuICAgICAgICB2YXIgbmFtZSA9IGhlYWRlcnMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgbmFtZUxlbmd0aCkudG9TdHJpbmcoKTtcbiAgICAgICAgcG9zaXRpb24gKz0gbmFtZUxlbmd0aDtcbiAgICAgICAgc3dpdGNoIChoZWFkZXJzLnJlYWRVSW50OChwb3NpdGlvbisrKSkge1xuICAgICAgICAgICAgY2FzZSAwIC8qIGJvb2xUcnVlICovOlxuICAgICAgICAgICAgICAgIG91dFtuYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQk9PTEVBTl9UQUcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMSAvKiBib29sRmFsc2UgKi86XG4gICAgICAgICAgICAgICAgb3V0W25hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBCT09MRUFOX1RBRyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMiAvKiBieXRlICovOlxuICAgICAgICAgICAgICAgIG91dFtuYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQllURV9UQUcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBoZWFkZXJzLnJlYWRJbnQ4KHBvc2l0aW9uKyspXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMyAvKiBzaG9ydCAqLzpcbiAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFNIT1JUX1RBRyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGhlYWRlcnMucmVhZEludDE2QkUocG9zaXRpb24pXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiArPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA0IC8qIGludGVnZXIgKi86XG4gICAgICAgICAgICAgICAgb3V0W25hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBJTlRfVEFHLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaGVhZGVycy5yZWFkSW50MzJCRShwb3NpdGlvbilcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IDQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDUgLyogbG9uZyAqLzpcbiAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IExPTkdfVEFHLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IEludDY0KGhlYWRlcnMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgOCkpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiArPSA4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA2IC8qIGJ5dGVBcnJheSAqLzpcbiAgICAgICAgICAgICAgICB2YXIgYmluYXJ5TGVuZ3RoID0gaGVhZGVycy5yZWFkVUludDE2QkUocG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IDI7XG4gICAgICAgICAgICAgICAgb3V0W25hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBCSU5BUllfVEFHLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaGVhZGVycy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyBiaW5hcnlMZW5ndGgpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiArPSBiaW5hcnlMZW5ndGg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDcgLyogc3RyaW5nICovOlxuICAgICAgICAgICAgICAgIHZhciBzdHJpbmdMZW5ndGggPSBoZWFkZXJzLnJlYWRVSW50MTZCRShwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gKz0gMjtcbiAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFNUUklOR19UQUcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBoZWFkZXJzLnNsaWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiArIHN0cmluZ0xlbmd0aFxuICAgICAgICAgICAgICAgICAgICApLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IHN0cmluZ0xlbmd0aDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgOCAvKiB0aW1lc3RhbXAgKi86XG4gICAgICAgICAgICAgICAgb3V0W25hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBUSU1FU1RBTVBfVEFHLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgSW50NjQoaGVhZGVycy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyA4KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IDg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDkgLyogdXVpZCAqLzpcbiAgICAgICAgICAgICAgICB2YXIgdXVpZENoYXJzID0gaGVhZGVycy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAxNilcbiAgICAgICAgICAgICAgICAgICAgLnRvU3RyaW5nKCdoZXgnKTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiArPSAxNjtcbiAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFVVSURfVEFHLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdXVpZENoYXJzLnN1YnN0cigwLCA4KSArICctJyArXG4gICAgICAgICAgICAgICAgICAgICAgICB1dWlkQ2hhcnMuc3Vic3RyKDgsIDQpICsgJy0nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHV1aWRDaGFycy5zdWJzdHIoMTIsIDQpICsgJy0nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHV1aWRDaGFycy5zdWJzdHIoMTYsIDQpICsgJy0nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHV1aWRDaGFycy5zdWJzdHIoMjApXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnJlY29nbml6ZWQgaGVhZGVyIHR5cGUgdGFnJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gcGFyc2VNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICB2YXIgcGFyc2VkID0gc3BsaXRNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIHJldHVybiB7IGhlYWRlcnM6IHBhcnNlSGVhZGVycyhwYXJzZWQuaGVhZGVycyksIGJvZHk6IHBhcnNlZC5ib2R5IH07XG59XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHBhcnNlTWVzc2FnZTogcGFyc2VNZXNzYWdlXG59O1xuXG59LHtcIi4vaW50NjRcIjozMCxcIi4vc3BsaXQtbWVzc2FnZVwiOjMzfV0sMzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHV0aWwgPSByZXF1aXJlKCcuLi9jb3JlJykudXRpbDtcbnZhciB0b0J1ZmZlciA9IHV0aWwuYnVmZmVyLnRvQnVmZmVyO1xuXG4vLyBBbGwgcHJlbHVkZSBjb21wb25lbnRzIGFyZSB1bnNpZ25lZCwgMzItYml0IGludGVnZXJzXG52YXIgUFJFTFVERV9NRU1CRVJfTEVOR1RIID0gNDtcbi8vIFRoZSBwcmVsdWRlIGNvbnNpc3RzIG9mIHR3byBjb21wb25lbnRzXG52YXIgUFJFTFVERV9MRU5HVEggPSBQUkVMVURFX01FTUJFUl9MRU5HVEggKiAyO1xuLy8gQ2hlY2tzdW1zIGFyZSBhbHdheXMgQ1JDMzIgaGFzaGVzLlxudmFyIENIRUNLU1VNX0xFTkdUSCA9IDQ7XG4vLyBNZXNzYWdlcyBtdXN0IGluY2x1ZGUgYSBmdWxsIHByZWx1ZGUsIGEgcHJlbHVkZSBjaGVja3N1bSwgYW5kIGEgbWVzc2FnZSBjaGVja3N1bVxudmFyIE1JTklNVU1fTUVTU0FHRV9MRU5HVEggPSBQUkVMVURFX0xFTkdUSCArIENIRUNLU1VNX0xFTkdUSCAqIDI7XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IG1lc3NhZ2VcbiAqL1xuZnVuY3Rpb24gc3BsaXRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBpZiAoIXV0aWwuQnVmZmVyLmlzQnVmZmVyKG1lc3NhZ2UpKSBtZXNzYWdlID0gdG9CdWZmZXIobWVzc2FnZSk7XG5cbiAgICBpZiAobWVzc2FnZS5sZW5ndGggPCBNSU5JTVVNX01FU1NBR0VfTEVOR1RIKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZWQgbWVzc2FnZSB0b28gc2hvcnQgdG8gYWNjb21tb2RhdGUgZXZlbnQgc3RyZWFtIG1lc3NhZ2Ugb3ZlcmhlYWQnKTtcbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZS5sZW5ndGggIT09IG1lc3NhZ2UucmVhZFVJbnQzMkJFKDApKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVwb3J0ZWQgbWVzc2FnZSBsZW5ndGggZG9lcyBub3QgbWF0Y2ggcmVjZWl2ZWQgbWVzc2FnZSBsZW5ndGgnKTtcbiAgICB9XG5cbiAgICB2YXIgZXhwZWN0ZWRQcmVsdWRlQ2hlY2tzdW0gPSBtZXNzYWdlLnJlYWRVSW50MzJCRShQUkVMVURFX0xFTkdUSCk7XG5cbiAgICBpZiAoXG4gICAgICAgIGV4cGVjdGVkUHJlbHVkZUNoZWNrc3VtICE9PSB1dGlsLmNyeXB0by5jcmMzMihcbiAgICAgICAgICAgIG1lc3NhZ2Uuc2xpY2UoMCwgUFJFTFVERV9MRU5HVEgpXG4gICAgICAgIClcbiAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ1RoZSBwcmVsdWRlIGNoZWNrc3VtIHNwZWNpZmllZCBpbiB0aGUgbWVzc2FnZSAoJyArXG4gICAgICAgICAgICBleHBlY3RlZFByZWx1ZGVDaGVja3N1bSArXG4gICAgICAgICAgICAnKSBkb2VzIG5vdCBtYXRjaCB0aGUgY2FsY3VsYXRlZCBDUkMzMiBjaGVja3N1bS4nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIGV4cGVjdGVkTWVzc2FnZUNoZWNrc3VtID0gbWVzc2FnZS5yZWFkVUludDMyQkUobWVzc2FnZS5sZW5ndGggLSBDSEVDS1NVTV9MRU5HVEgpO1xuXG4gICAgaWYgKFxuICAgICAgICBleHBlY3RlZE1lc3NhZ2VDaGVja3N1bSAhPT0gdXRpbC5jcnlwdG8uY3JjMzIoXG4gICAgICAgICAgICBtZXNzYWdlLnNsaWNlKDAsIG1lc3NhZ2UubGVuZ3RoIC0gQ0hFQ0tTVU1fTEVOR1RIKVxuICAgICAgICApXG4gICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdUaGUgbWVzc2FnZSBjaGVja3N1bSBkaWQgbm90IG1hdGNoIHRoZSBleHBlY3RlZCB2YWx1ZSBvZiAnICtcbiAgICAgICAgICAgICAgICBleHBlY3RlZE1lc3NhZ2VDaGVja3N1bVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBoZWFkZXJzU3RhcnQgPSBQUkVMVURFX0xFTkdUSCArIENIRUNLU1VNX0xFTkdUSDtcbiAgICB2YXIgaGVhZGVyc0VuZCA9IGhlYWRlcnNTdGFydCArIG1lc3NhZ2UucmVhZFVJbnQzMkJFKFBSRUxVREVfTUVNQkVSX0xFTkdUSCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBoZWFkZXJzOiBtZXNzYWdlLnNsaWNlKGhlYWRlcnNTdGFydCwgaGVhZGVyc0VuZCksXG4gICAgICAgIGJvZHk6IG1lc3NhZ2Uuc2xpY2UoaGVhZGVyc0VuZCwgbWVzc2FnZS5sZW5ndGggLSBDSEVDS1NVTV9MRU5HVEgpLFxuICAgIH07XG59XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHNwbGl0TWVzc2FnZTogc3BsaXRNZXNzYWdlXG59O1xuXG59LHtcIi4uL2NvcmVcIjoxOX1dLDM0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBBV1MgPSByZXF1aXJlKCcuL2NvcmUnKTtcbnZhciBTZXF1ZW50aWFsRXhlY3V0b3IgPSByZXF1aXJlKCcuL3NlcXVlbnRpYWxfZXhlY3V0b3InKTtcbnZhciBESVNDT1ZFUl9FTkRQT0lOVCA9IHJlcXVpcmUoJy4vZGlzY292ZXJfZW5kcG9pbnQnKS5kaXNjb3ZlckVuZHBvaW50O1xuLyoqXG4gKiBUaGUgbmFtZXNwYWNlIHVzZWQgdG8gcmVnaXN0ZXIgZ2xvYmFsIGV2ZW50IGxpc3RlbmVycyBmb3IgcmVxdWVzdCBidWlsZGluZ1xuICogYW5kIHNlbmRpbmcuXG4gKi9cbkFXUy5FdmVudExpc3RlbmVycyA9IHtcbiAgLyoqXG4gICAqIEAhYXR0cmlidXRlIFZBTElEQVRFX0NSRURFTlRJQUxTXG4gICAqICAgQSByZXF1ZXN0IGxpc3RlbmVyIHRoYXQgdmFsaWRhdGVzIHdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgYmVpbmdcbiAgICogICBzZW50IHdpdGggY3JlZGVudGlhbHMuXG4gICAqICAgSGFuZGxlcyB0aGUge0FXUy5SZXF1ZXN0fnZhbGlkYXRlICd2YWxpZGF0ZScgUmVxdWVzdCBldmVudH1cbiAgICogICBAZXhhbXBsZSBTZW5kaW5nIGEgcmVxdWVzdCB3aXRob3V0IHZhbGlkYXRpbmcgY3JlZGVudGlhbHNcbiAgICogICAgIHZhciBsaXN0ZW5lciA9IEFXUy5FdmVudExpc3RlbmVycy5Db3JlLlZBTElEQVRFX0NSRURFTlRJQUxTO1xuICAgKiAgICAgcmVxdWVzdC5yZW1vdmVMaXN0ZW5lcigndmFsaWRhdGUnLCBsaXN0ZW5lcik7XG4gICAqICAgQHJlYWRvbmx5XG4gICAqICAgQHJldHVybiBbRnVuY3Rpb25dXG4gICAqIEAhYXR0cmlidXRlIFZBTElEQVRFX1JFR0lPTlxuICAgKiAgIEEgcmVxdWVzdCBsaXN0ZW5lciB0aGF0IHZhbGlkYXRlcyB3aGV0aGVyIHRoZSByZWdpb24gaXMgc2V0XG4gICAqICAgZm9yIGEgcmVxdWVzdC5cbiAgICogICBIYW5kbGVzIHRoZSB7QVdTLlJlcXVlc3R+dmFsaWRhdGUgJ3ZhbGlkYXRlJyBSZXF1ZXN0IGV2ZW50fVxuICAgKiAgIEBleGFtcGxlIFNlbmRpbmcgYSByZXF1ZXN0IHdpdGhvdXQgdmFsaWRhdGluZyByZWdpb24gY29uZmlndXJhdGlvblxuICAgKiAgICAgdmFyIGxpc3RlbmVyID0gQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuVkFMSURBVEVfUkVHSU9OO1xuICAgKiAgICAgcmVxdWVzdC5yZW1vdmVMaXN0ZW5lcigndmFsaWRhdGUnLCBsaXN0ZW5lcik7XG4gICAqICAgQHJlYWRvbmx5XG4gICAqICAgQHJldHVybiBbRnVuY3Rpb25dXG4gICAqIEAhYXR0cmlidXRlIFZBTElEQVRFX1BBUkFNRVRFUlNcbiAgICogICBBIHJlcXVlc3QgbGlzdGVuZXIgdGhhdCB2YWxpZGF0ZXMgaW5wdXQgcGFyYW1ldGVycyBpbiBhIHJlcXVlc3QuXG4gICAqICAgSGFuZGxlcyB0aGUge0FXUy5SZXF1ZXN0fnZhbGlkYXRlICd2YWxpZGF0ZScgUmVxdWVzdCBldmVudH1cbiAgICogICBAZXhhbXBsZSBTZW5kaW5nIGEgcmVxdWVzdCB3aXRob3V0IHZhbGlkYXRpbmcgcGFyYW1ldGVyc1xuICAgKiAgICAgdmFyIGxpc3RlbmVyID0gQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuVkFMSURBVEVfUEFSQU1FVEVSUztcbiAgICogICAgIHJlcXVlc3QucmVtb3ZlTGlzdGVuZXIoJ3ZhbGlkYXRlJywgbGlzdGVuZXIpO1xuICAgKiAgIEBleGFtcGxlIERpc2FibGUgcGFyYW1ldGVyIHZhbGlkYXRpb24gZ2xvYmFsbHlcbiAgICogICAgIEFXUy5FdmVudExpc3RlbmVycy5Db3JlLnJlbW92ZUxpc3RlbmVyKCd2YWxpZGF0ZScsXG4gICAqICAgICAgIEFXUy5FdmVudExpc3RlbmVycy5Db3JlLlZBTElEQVRFX1JFR0lPTik7XG4gICAqICAgQHJlYWRvbmx5XG4gICAqICAgQHJldHVybiBbRnVuY3Rpb25dXG4gICAqIEAhYXR0cmlidXRlIFNFTkRcbiAgICogICBBIHJlcXVlc3QgbGlzdGVuZXIgdGhhdCBpbml0aWF0ZXMgdGhlIEhUVFAgY29ubmVjdGlvbiBmb3IgYVxuICAgKiAgIHJlcXVlc3QgYmVpbmcgc2VudC4gSGFuZGxlcyB0aGUge0FXUy5SZXF1ZXN0fnNlbmQgJ3NlbmQnIFJlcXVlc3QgZXZlbnR9XG4gICAqICAgQGV4YW1wbGUgUmVwbGFjaW5nIHRoZSBIVFRQIGhhbmRsZXJcbiAgICogICAgIHZhciBsaXN0ZW5lciA9IEFXUy5FdmVudExpc3RlbmVycy5Db3JlLlNFTkQ7XG4gICAqICAgICByZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKCdzZW5kJywgbGlzdGVuZXIpO1xuICAgKiAgICAgcmVxdWVzdC5vbignc2VuZCcsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAqICAgICAgIGN1c3RvbUhhbmRsZXIuc2VuZChyZXNwb25zZSk7XG4gICAqICAgICB9KTtcbiAgICogICBAcmV0dXJuIFtGdW5jdGlvbl1cbiAgICogICBAcmVhZG9ubHlcbiAgICogQCFhdHRyaWJ1dGUgSFRUUF9EQVRBXG4gICAqICAgQSByZXF1ZXN0IGxpc3RlbmVyIHRoYXQgcmVhZHMgZGF0YSBmcm9tIHRoZSBIVFRQIGNvbm5lY3Rpb24gaW4gb3JkZXJcbiAgICogICB0byBidWlsZCB0aGUgcmVzcG9uc2UgZGF0YS5cbiAgICogICBIYW5kbGVzIHRoZSB7QVdTLlJlcXVlc3R+aHR0cERhdGEgJ2h0dHBEYXRhJyBSZXF1ZXN0IGV2ZW50fS5cbiAgICogICBSZW1vdmUgdGhpcyBoYW5kbGVyIGlmIHlvdSBhcmUgb3ZlcnJpZGluZyB0aGUgJ2h0dHBEYXRhJyBldmVudCBhbmRcbiAgICogICBkbyBub3Qgd2FudCBleHRyYSBkYXRhIHByb2Nlc3NpbmcgYW5kIGJ1ZmZlcmluZyBvdmVyaGVhZC5cbiAgICogICBAZXhhbXBsZSBEaXNhYmxpbmcgZGVmYXVsdCBkYXRhIHByb2Nlc3NpbmdcbiAgICogICAgIHZhciBsaXN0ZW5lciA9IEFXUy5FdmVudExpc3RlbmVycy5Db3JlLkhUVFBfREFUQTtcbiAgICogICAgIHJlcXVlc3QucmVtb3ZlTGlzdGVuZXIoJ2h0dHBEYXRhJywgbGlzdGVuZXIpO1xuICAgKiAgIEByZXR1cm4gW0Z1bmN0aW9uXVxuICAgKiAgIEByZWFkb25seVxuICAgKi9cbiAgQ29yZToge30gLyogZG9jIGhhY2sgKi9cbn07XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGdldE9wZXJhdGlvbkF1dGh0eXBlKHJlcSkge1xuICBpZiAoIXJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHZhciBvcGVyYXRpb24gPSByZXEuc2VydmljZS5hcGkub3BlcmF0aW9uc1tyZXEub3BlcmF0aW9uXTtcbiAgcmV0dXJuIG9wZXJhdGlvbiA/IG9wZXJhdGlvbi5hdXRodHlwZSA6ICcnO1xufVxuXG5BV1MuRXZlbnRMaXN0ZW5lcnMgPSB7XG4gIENvcmU6IG5ldyBTZXF1ZW50aWFsRXhlY3V0b3IoKS5hZGROYW1lZExpc3RlbmVycyhmdW5jdGlvbihhZGQsIGFkZEFzeW5jKSB7XG4gICAgYWRkQXN5bmMoJ1ZBTElEQVRFX0NSRURFTlRJQUxTJywgJ3ZhbGlkYXRlJyxcbiAgICAgICAgZnVuY3Rpb24gVkFMSURBVEVfQ1JFREVOVElBTFMocmVxLCBkb25lKSB7XG4gICAgICBpZiAoIXJlcS5zZXJ2aWNlLmFwaS5zaWduYXR1cmVWZXJzaW9uICYmICFyZXEuc2VydmljZS5jb25maWcuc2lnbmF0dXJlVmVyc2lvbikgcmV0dXJuIGRvbmUoKTsgLy8gbm9uZVxuICAgICAgcmVxLnNlcnZpY2UuY29uZmlnLmdldENyZWRlbnRpYWxzKGZ1bmN0aW9uKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVxLnJlc3BvbnNlLmVycm9yID0gQVdTLnV0aWwuZXJyb3IoZXJyLFxuICAgICAgICAgICAge2NvZGU6ICdDcmVkZW50aWFsc0Vycm9yJywgbWVzc2FnZTogJ01pc3NpbmcgY3JlZGVudGlhbHMgaW4gY29uZmlnJ30pO1xuICAgICAgICB9XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgYWRkKCdWQUxJREFURV9SRUdJT04nLCAndmFsaWRhdGUnLCBmdW5jdGlvbiBWQUxJREFURV9SRUdJT04ocmVxKSB7XG4gICAgICBpZiAoIXJlcS5zZXJ2aWNlLmNvbmZpZy5yZWdpb24gJiYgIXJlcS5zZXJ2aWNlLmlzR2xvYmFsRW5kcG9pbnQpIHtcbiAgICAgICAgcmVxLnJlc3BvbnNlLmVycm9yID0gQVdTLnV0aWwuZXJyb3IobmV3IEVycm9yKCksXG4gICAgICAgICAge2NvZGU6ICdDb25maWdFcnJvcicsIG1lc3NhZ2U6ICdNaXNzaW5nIHJlZ2lvbiBpbiBjb25maWcnfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBhZGQoJ0JVSUxEX0lERU1QT1RFTkNZX1RPS0VOUycsICd2YWxpZGF0ZScsIGZ1bmN0aW9uIEJVSUxEX0lERU1QT1RFTkNZX1RPS0VOUyhyZXEpIHtcbiAgICAgIGlmICghcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG9wZXJhdGlvbiA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dO1xuICAgICAgaWYgKCFvcGVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGlkZW1wb3RlbnRNZW1iZXJzID0gb3BlcmF0aW9uLmlkZW1wb3RlbnRNZW1iZXJzO1xuICAgICAgaWYgKCFpZGVtcG90ZW50TWVtYmVycy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gY3JlYXRlcyBhIGNvcHkgb2YgcGFyYW1zIHNvIHVzZXIncyBwYXJhbSBvYmplY3QgaXNuJ3QgbXV0YXRlZFxuICAgICAgdmFyIHBhcmFtcyA9IEFXUy51dGlsLmNvcHkocmVxLnBhcmFtcyk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaUxlbiA9IGlkZW1wb3RlbnRNZW1iZXJzLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgICBpZiAoIXBhcmFtc1tpZGVtcG90ZW50TWVtYmVyc1tpXV0pIHtcbiAgICAgICAgICAvLyBhZGQgdGhlIG1lbWJlclxuICAgICAgICAgIHBhcmFtc1tpZGVtcG90ZW50TWVtYmVyc1tpXV0gPSBBV1MudXRpbC51dWlkLnY0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlcS5wYXJhbXMgPSBwYXJhbXM7XG4gICAgfSk7XG5cbiAgICBhZGQoJ1ZBTElEQVRFX1BBUkFNRVRFUlMnLCAndmFsaWRhdGUnLCBmdW5jdGlvbiBWQUxJREFURV9QQVJBTUVURVJTKHJlcSkge1xuICAgICAgaWYgKCFyZXEuc2VydmljZS5hcGkub3BlcmF0aW9ucykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgcnVsZXMgPSByZXEuc2VydmljZS5hcGkub3BlcmF0aW9uc1tyZXEub3BlcmF0aW9uXS5pbnB1dDtcbiAgICAgIHZhciB2YWxpZGF0aW9uID0gcmVxLnNlcnZpY2UuY29uZmlnLnBhcmFtVmFsaWRhdGlvbjtcbiAgICAgIG5ldyBBV1MuUGFyYW1WYWxpZGF0b3IodmFsaWRhdGlvbikudmFsaWRhdGUocnVsZXMsIHJlcS5wYXJhbXMpO1xuICAgIH0pO1xuXG4gICAgYWRkQXN5bmMoJ0NPTVBVVEVfU0hBMjU2JywgJ2FmdGVyQnVpbGQnLCBmdW5jdGlvbiBDT01QVVRFX1NIQTI1NihyZXEsIGRvbmUpIHtcbiAgICAgIHJlcS5oYWx0SGFuZGxlcnNPbkVycm9yKCk7XG4gICAgICBpZiAoIXJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBvcGVyYXRpb24gPSByZXEuc2VydmljZS5hcGkub3BlcmF0aW9uc1tyZXEub3BlcmF0aW9uXTtcbiAgICAgIHZhciBhdXRodHlwZSA9IG9wZXJhdGlvbiA/IG9wZXJhdGlvbi5hdXRodHlwZSA6ICcnO1xuICAgICAgaWYgKCFyZXEuc2VydmljZS5hcGkuc2lnbmF0dXJlVmVyc2lvbiAmJiAhYXV0aHR5cGUgJiYgIXJlcS5zZXJ2aWNlLmNvbmZpZy5zaWduYXR1cmVWZXJzaW9uKSByZXR1cm4gZG9uZSgpOyAvLyBub25lXG4gICAgICBpZiAocmVxLnNlcnZpY2UuZ2V0U2lnbmVyQ2xhc3MocmVxKSA9PT0gQVdTLlNpZ25lcnMuVjQpIHtcbiAgICAgICAgdmFyIGJvZHkgPSByZXEuaHR0cFJlcXVlc3QuYm9keSB8fCAnJztcbiAgICAgICAgaWYgKGF1dGh0eXBlLmluZGV4T2YoJ3Vuc2lnbmVkLWJvZHknKSA+PSAwKSB7XG4gICAgICAgICAgcmVxLmh0dHBSZXF1ZXN0LmhlYWRlcnNbJ1gtQW16LUNvbnRlbnQtU2hhMjU2J10gPSAnVU5TSUdORUQtUEFZTE9BRCc7XG4gICAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICBBV1MudXRpbC5jb21wdXRlU2hhMjU2KGJvZHksIGZ1bmN0aW9uKGVyciwgc2hhKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZG9uZShlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcS5odHRwUmVxdWVzdC5oZWFkZXJzWydYLUFtei1Db250ZW50LVNoYTI1NiddID0gc2hhO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb25lKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBhZGQoJ1NFVF9DT05URU5UX0xFTkdUSCcsICdhZnRlckJ1aWxkJywgZnVuY3Rpb24gU0VUX0NPTlRFTlRfTEVOR1RIKHJlcSkge1xuICAgICAgdmFyIGF1dGh0eXBlID0gZ2V0T3BlcmF0aW9uQXV0aHR5cGUocmVxKTtcbiAgICAgIHZhciBwYXlsb2FkTWVtYmVyID0gQVdTLnV0aWwuZ2V0UmVxdWVzdFBheWxvYWRTaGFwZShyZXEpO1xuICAgICAgaWYgKHJlcS5odHRwUmVxdWVzdC5oZWFkZXJzWydDb250ZW50LUxlbmd0aCddID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gQVdTLnV0aWwuc3RyaW5nLmJ5dGVMZW5ndGgocmVxLmh0dHBSZXF1ZXN0LmJvZHkpO1xuICAgICAgICAgIHJlcS5odHRwUmVxdWVzdC5oZWFkZXJzWydDb250ZW50LUxlbmd0aCddID0gbGVuZ3RoO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBpZiAocGF5bG9hZE1lbWJlciAmJiBwYXlsb2FkTWVtYmVyLmlzU3RyZWFtaW5nKSB7XG4gICAgICAgICAgICBpZiAocGF5bG9hZE1lbWJlci5yZXF1aXJlc0xlbmd0aCkge1xuICAgICAgICAgICAgICAvL3N0cmVhbWluZyBwYXlsb2FkIHJlcXVpcmVzIGxlbmd0aChzMywgZ2xhY2llcilcbiAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhdXRodHlwZS5pbmRleE9mKCd1bnNpZ25lZC1ib2R5JykgPj0gMCkge1xuICAgICAgICAgICAgICAvL3VuYm91bmRlZCBzdHJlYW1pbmcgcGF5bG9hZChsZXgsIG1lZGlhc3RvcmUpXG4gICAgICAgICAgICAgIHJlcS5odHRwUmVxdWVzdC5oZWFkZXJzWydUcmFuc2Zlci1FbmNvZGluZyddID0gJ2NodW5rZWQnO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYWRkKCdTRVRfSFRUUF9IT1NUJywgJ2FmdGVyQnVpbGQnLCBmdW5jdGlvbiBTRVRfSFRUUF9IT1NUKHJlcSkge1xuICAgICAgcmVxLmh0dHBSZXF1ZXN0LmhlYWRlcnNbJ0hvc3QnXSA9IHJlcS5odHRwUmVxdWVzdC5lbmRwb2ludC5ob3N0O1xuICAgIH0pO1xuXG4gICAgYWRkKCdSRVNUQVJUJywgJ3Jlc3RhcnQnLCBmdW5jdGlvbiBSRVNUQVJUKCkge1xuICAgICAgdmFyIGVyciA9IHRoaXMucmVzcG9uc2UuZXJyb3I7XG4gICAgICBpZiAoIWVyciB8fCAhZXJyLnJldHJ5YWJsZSkgcmV0dXJuO1xuXG4gICAgICB0aGlzLmh0dHBSZXF1ZXN0ID0gbmV3IEFXUy5IdHRwUmVxdWVzdChcbiAgICAgICAgdGhpcy5zZXJ2aWNlLmVuZHBvaW50LFxuICAgICAgICB0aGlzLnNlcnZpY2UucmVnaW9uXG4gICAgICApO1xuXG4gICAgICBpZiAodGhpcy5yZXNwb25zZS5yZXRyeUNvdW50IDwgdGhpcy5zZXJ2aWNlLmNvbmZpZy5tYXhSZXRyaWVzKSB7XG4gICAgICAgIHRoaXMucmVzcG9uc2UucmV0cnlDb3VudCsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZXNwb25zZS5lcnJvciA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgYWRkVG9IZWFkID0gdHJ1ZTtcbiAgICBhZGRBc3luYygnRElTQ09WRVJfRU5EUE9JTlQnLCAnc2lnbicsIERJU0NPVkVSX0VORFBPSU5ULCBhZGRUb0hlYWQpO1xuXG4gICAgYWRkQXN5bmMoJ1NJR04nLCAnc2lnbicsIGZ1bmN0aW9uIFNJR04ocmVxLCBkb25lKSB7XG4gICAgICB2YXIgc2VydmljZSA9IHJlcS5zZXJ2aWNlO1xuICAgICAgdmFyIG9wZXJhdGlvbnMgPSByZXEuc2VydmljZS5hcGkub3BlcmF0aW9ucyB8fCB7fTtcbiAgICAgIHZhciBvcGVyYXRpb24gPSBvcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dO1xuICAgICAgdmFyIGF1dGh0eXBlID0gb3BlcmF0aW9uID8gb3BlcmF0aW9uLmF1dGh0eXBlIDogJyc7XG4gICAgICBpZiAoIXNlcnZpY2UuYXBpLnNpZ25hdHVyZVZlcnNpb24gJiYgIWF1dGh0eXBlICYmICFzZXJ2aWNlLmNvbmZpZy5zaWduYXR1cmVWZXJzaW9uKSByZXR1cm4gZG9uZSgpOyAvLyBub25lXG5cbiAgICAgIHNlcnZpY2UuY29uZmlnLmdldENyZWRlbnRpYWxzKGZ1bmN0aW9uIChlcnIsIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXEucmVzcG9uc2UuZXJyb3IgPSBlcnI7XG4gICAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIGRhdGUgPSBzZXJ2aWNlLmdldFNrZXdDb3JyZWN0ZWREYXRlKCk7XG4gICAgICAgICAgdmFyIFNpZ25lckNsYXNzID0gc2VydmljZS5nZXRTaWduZXJDbGFzcyhyZXEpO1xuICAgICAgICAgIHZhciBzaWduZXIgPSBuZXcgU2lnbmVyQ2xhc3MocmVxLmh0dHBSZXF1ZXN0LFxuICAgICAgICAgICAgc2VydmljZS5hcGkuc2lnbmluZ05hbWUgfHwgc2VydmljZS5hcGkuZW5kcG9pbnRQcmVmaXgsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNpZ25hdHVyZUNhY2hlOiBzZXJ2aWNlLmNvbmZpZy5zaWduYXR1cmVDYWNoZSxcbiAgICAgICAgICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgICAgICAgICAgIHNpZ25hdHVyZVZlcnNpb246IHNlcnZpY2UuYXBpLnNpZ25hdHVyZVZlcnNpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIHNpZ25lci5zZXRTZXJ2aWNlQ2xpZW50SWQoc2VydmljZS5fY2xpZW50SWQpO1xuXG4gICAgICAgICAgLy8gY2xlYXIgb2xkIGF1dGhvcml6YXRpb24gaGVhZGVyc1xuICAgICAgICAgIGRlbGV0ZSByZXEuaHR0cFJlcXVlc3QuaGVhZGVyc1snQXV0aG9yaXphdGlvbiddO1xuICAgICAgICAgIGRlbGV0ZSByZXEuaHR0cFJlcXVlc3QuaGVhZGVyc1snRGF0ZSddO1xuICAgICAgICAgIGRlbGV0ZSByZXEuaHR0cFJlcXVlc3QuaGVhZGVyc1snWC1BbXotRGF0ZSddO1xuXG4gICAgICAgICAgLy8gYWRkIG5ldyBhdXRob3JpemF0aW9uXG4gICAgICAgICAgc2lnbmVyLmFkZEF1dGhvcml6YXRpb24oY3JlZGVudGlhbHMsIGRhdGUpO1xuICAgICAgICAgIHJlcS5zaWduZWRBdCA9IGRhdGU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXEucmVzcG9uc2UuZXJyb3IgPSBlO1xuICAgICAgICB9XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgYWRkKCdWQUxJREFURV9SRVNQT05TRScsICd2YWxpZGF0ZVJlc3BvbnNlJywgZnVuY3Rpb24gVkFMSURBVEVfUkVTUE9OU0UocmVzcCkge1xuICAgICAgaWYgKHRoaXMuc2VydmljZS5zdWNjZXNzZnVsUmVzcG9uc2UocmVzcCwgdGhpcykpIHtcbiAgICAgICAgcmVzcC5kYXRhID0ge307XG4gICAgICAgIHJlc3AuZXJyb3IgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzcC5kYXRhID0gbnVsbDtcbiAgICAgICAgcmVzcC5lcnJvciA9IEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcigpLFxuICAgICAgICAgIHtjb2RlOiAnVW5rbm93bkVycm9yJywgbWVzc2FnZTogJ0FuIHVua25vd24gZXJyb3Igb2NjdXJyZWQuJ30pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYWRkQXN5bmMoJ1NFTkQnLCAnc2VuZCcsIGZ1bmN0aW9uIFNFTkQocmVzcCwgZG9uZSkge1xuICAgICAgcmVzcC5odHRwUmVzcG9uc2UuX2Fib3J0Q2FsbGJhY2sgPSBkb25lO1xuICAgICAgcmVzcC5lcnJvciA9IG51bGw7XG4gICAgICByZXNwLmRhdGEgPSBudWxsO1xuXG4gICAgICBmdW5jdGlvbiBjYWxsYmFjayhodHRwUmVzcCkge1xuICAgICAgICByZXNwLmh0dHBSZXNwb25zZS5zdHJlYW0gPSBodHRwUmVzcDtcbiAgICAgICAgdmFyIHN0cmVhbSA9IHJlc3AucmVxdWVzdC5odHRwUmVxdWVzdC5zdHJlYW07XG4gICAgICAgIHZhciBzZXJ2aWNlID0gcmVzcC5yZXF1ZXN0LnNlcnZpY2U7XG4gICAgICAgIHZhciBhcGkgPSBzZXJ2aWNlLmFwaTtcbiAgICAgICAgdmFyIG9wZXJhdGlvbk5hbWUgPSByZXNwLnJlcXVlc3Qub3BlcmF0aW9uO1xuICAgICAgICB2YXIgb3BlcmF0aW9uID0gYXBpLm9wZXJhdGlvbnNbb3BlcmF0aW9uTmFtZV0gfHwge307XG5cbiAgICAgICAgaHR0cFJlc3Aub24oJ2hlYWRlcnMnLCBmdW5jdGlvbiBvbkhlYWRlcnMoc3RhdHVzQ29kZSwgaGVhZGVycywgc3RhdHVzTWVzc2FnZSkge1xuICAgICAgICAgIHJlc3AucmVxdWVzdC5lbWl0KFxuICAgICAgICAgICAgJ2h0dHBIZWFkZXJzJyxcbiAgICAgICAgICAgIFtzdGF0dXNDb2RlLCBoZWFkZXJzLCByZXNwLCBzdGF0dXNNZXNzYWdlXVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAoIXJlc3AuaHR0cFJlc3BvbnNlLnN0cmVhbWluZykge1xuICAgICAgICAgICAgaWYgKEFXUy5IdHRwQ2xpZW50LnN0cmVhbXNBcGlWZXJzaW9uID09PSAyKSB7IC8vIHN0cmVhbXMyIEFQSSBjaGVja1xuICAgICAgICAgICAgICAvLyBpZiB3ZSBkZXRlY3QgZXZlbnQgc3RyZWFtcywgd2UncmUgZ29pbmcgdG8gaGF2ZSB0b1xuICAgICAgICAgICAgICAvLyByZXR1cm4gdGhlIHN0cmVhbSBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICBpZiAob3BlcmF0aW9uLmhhc0V2ZW50T3V0cHV0ICYmIHNlcnZpY2Uuc3VjY2Vzc2Z1bFJlc3BvbnNlKHJlc3ApKSB7XG4gICAgICAgICAgICAgICAgLy8gc2tpcCByZWFkaW5nIHRoZSBJbmNvbWluZ1N0cmVhbVxuICAgICAgICAgICAgICAgIHJlc3AucmVxdWVzdC5lbWl0KCdodHRwRG9uZScpO1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBodHRwUmVzcC5vbigncmVhZGFibGUnLCBmdW5jdGlvbiBvblJlYWRhYmxlKCkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gaHR0cFJlc3AucmVhZCgpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICByZXNwLnJlcXVlc3QuZW1pdCgnaHR0cERhdGEnLCBbZGF0YSwgcmVzcF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBsZWdhY3kgc3RyZWFtcyBBUElcbiAgICAgICAgICAgICAgaHR0cFJlc3Aub24oJ2RhdGEnLCBmdW5jdGlvbiBvbkRhdGEoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJlc3AucmVxdWVzdC5lbWl0KCdodHRwRGF0YScsIFtkYXRhLCByZXNwXSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaHR0cFJlc3Aub24oJ2VuZCcsIGZ1bmN0aW9uIG9uRW5kKCkge1xuICAgICAgICAgIGlmICghc3RyZWFtIHx8ICFzdHJlYW0uZGlkQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmIChBV1MuSHR0cENsaWVudC5zdHJlYW1zQXBpVmVyc2lvbiA9PT0gMiAmJiAob3BlcmF0aW9uLmhhc0V2ZW50T3V0cHV0ICYmIHNlcnZpY2Uuc3VjY2Vzc2Z1bFJlc3BvbnNlKHJlc3ApKSkge1xuICAgICAgICAgICAgICAvLyBkb24ndCBjb25jYXRlbmF0ZSByZXNwb25zZSBjaHVua3Mgd2hlbiBzdHJlYW1pbmcgZXZlbnQgc3RyZWFtIGRhdGEgd2hlbiByZXNwb25zZSBpcyBzdWNjZXNzZnVsXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3AucmVxdWVzdC5lbWl0KCdodHRwRG9uZScpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHByb2dyZXNzKGh0dHBSZXNwKSB7XG4gICAgICAgIGh0dHBSZXNwLm9uKCdzZW5kUHJvZ3Jlc3MnLCBmdW5jdGlvbiBvblNlbmRQcm9ncmVzcyh2YWx1ZSkge1xuICAgICAgICAgIHJlc3AucmVxdWVzdC5lbWl0KCdodHRwVXBsb2FkUHJvZ3Jlc3MnLCBbdmFsdWUsIHJlc3BdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaHR0cFJlc3Aub24oJ3JlY2VpdmVQcm9ncmVzcycsIGZ1bmN0aW9uIG9uUmVjZWl2ZVByb2dyZXNzKHZhbHVlKSB7XG4gICAgICAgICAgcmVzcC5yZXF1ZXN0LmVtaXQoJ2h0dHBEb3dubG9hZFByb2dyZXNzJywgW3ZhbHVlLCByZXNwXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBlcnJvcihlcnIpIHtcbiAgICAgICAgaWYgKGVyci5jb2RlICE9PSAnUmVxdWVzdEFib3J0ZWRFcnJvcicpIHtcbiAgICAgICAgICB2YXIgZXJyQ29kZSA9IGVyci5jb2RlID09PSAnVGltZW91dEVycm9yJyA/IGVyci5jb2RlIDogJ05ldHdvcmtpbmdFcnJvcic7XG4gICAgICAgICAgZXJyID0gQVdTLnV0aWwuZXJyb3IoZXJyLCB7XG4gICAgICAgICAgICBjb2RlOiBlcnJDb2RlLFxuICAgICAgICAgICAgcmVnaW9uOiByZXNwLnJlcXVlc3QuaHR0cFJlcXVlc3QucmVnaW9uLFxuICAgICAgICAgICAgaG9zdG5hbWU6IHJlc3AucmVxdWVzdC5odHRwUmVxdWVzdC5lbmRwb2ludC5ob3N0bmFtZSxcbiAgICAgICAgICAgIHJldHJ5YWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJlc3AuZXJyb3IgPSBlcnI7XG4gICAgICAgIHJlc3AucmVxdWVzdC5lbWl0KCdodHRwRXJyb3InLCBbcmVzcC5lcnJvciwgcmVzcF0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGV4ZWN1dGVTZW5kKCkge1xuICAgICAgICB2YXIgaHR0cCA9IEFXUy5IdHRwQ2xpZW50LmdldEluc3RhbmNlKCk7XG4gICAgICAgIHZhciBodHRwT3B0aW9ucyA9IHJlc3AucmVxdWVzdC5zZXJ2aWNlLmNvbmZpZy5odHRwT3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgc3RyZWFtID0gaHR0cC5oYW5kbGVSZXF1ZXN0KHJlc3AucmVxdWVzdC5odHRwUmVxdWVzdCwgaHR0cE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaywgZXJyb3IpO1xuICAgICAgICAgIHByb2dyZXNzKHN0cmVhbSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciB0aW1lRGlmZiA9IChyZXNwLnJlcXVlc3Quc2VydmljZS5nZXRTa2V3Q29ycmVjdGVkRGF0ZSgpIC0gdGhpcy5zaWduZWRBdCkgLyAxMDAwO1xuICAgICAgaWYgKHRpbWVEaWZmID49IDYwICogMTApIHsgLy8gaWYgd2Ugc2lnbmVkIDEwbWluIGFnbywgcmUtc2lnblxuICAgICAgICB0aGlzLmVtaXQoJ3NpZ24nLCBbdGhpc10sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGlmIChlcnIpIGRvbmUoZXJyKTtcbiAgICAgICAgICBlbHNlIGV4ZWN1dGVTZW5kKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhlY3V0ZVNlbmQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZCgnSFRUUF9IRUFERVJTJywgJ2h0dHBIZWFkZXJzJyxcbiAgICAgICAgZnVuY3Rpb24gSFRUUF9IRUFERVJTKHN0YXR1c0NvZGUsIGhlYWRlcnMsIHJlc3AsIHN0YXR1c01lc3NhZ2UpIHtcbiAgICAgIHJlc3AuaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgICAgcmVzcC5odHRwUmVzcG9uc2Uuc3RhdHVzTWVzc2FnZSA9IHN0YXR1c01lc3NhZ2U7XG4gICAgICByZXNwLmh0dHBSZXNwb25zZS5oZWFkZXJzID0gaGVhZGVycztcbiAgICAgIHJlc3AuaHR0cFJlc3BvbnNlLmJvZHkgPSBBV1MudXRpbC5idWZmZXIudG9CdWZmZXIoJycpO1xuICAgICAgcmVzcC5odHRwUmVzcG9uc2UuYnVmZmVycyA9IFtdO1xuICAgICAgcmVzcC5odHRwUmVzcG9uc2UubnVtQnl0ZXMgPSAwO1xuICAgICAgdmFyIGRhdGVIZWFkZXIgPSBoZWFkZXJzLmRhdGUgfHwgaGVhZGVycy5EYXRlO1xuICAgICAgdmFyIHNlcnZpY2UgPSByZXNwLnJlcXVlc3Quc2VydmljZTtcbiAgICAgIGlmIChkYXRlSGVhZGVyKSB7XG4gICAgICAgIHZhciBzZXJ2ZXJUaW1lID0gRGF0ZS5wYXJzZShkYXRlSGVhZGVyKTtcbiAgICAgICAgaWYgKHNlcnZpY2UuY29uZmlnLmNvcnJlY3RDbG9ja1NrZXdcbiAgICAgICAgICAgICYmIHNlcnZpY2UuaXNDbG9ja1NrZXdlZChzZXJ2ZXJUaW1lKSkge1xuICAgICAgICAgIHNlcnZpY2UuYXBwbHlDbG9ja09mZnNldChzZXJ2ZXJUaW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYWRkKCdIVFRQX0RBVEEnLCAnaHR0cERhdGEnLCBmdW5jdGlvbiBIVFRQX0RBVEEoY2h1bmssIHJlc3ApIHtcbiAgICAgIGlmIChjaHVuaykge1xuICAgICAgICBpZiAoQVdTLnV0aWwuaXNOb2RlKCkpIHtcbiAgICAgICAgICByZXNwLmh0dHBSZXNwb25zZS5udW1CeXRlcyArPSBjaHVuay5sZW5ndGg7XG5cbiAgICAgICAgICB2YXIgdG90YWwgPSByZXNwLmh0dHBSZXNwb25zZS5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddO1xuICAgICAgICAgIHZhciBwcm9ncmVzcyA9IHsgbG9hZGVkOiByZXNwLmh0dHBSZXNwb25zZS5udW1CeXRlcywgdG90YWw6IHRvdGFsIH07XG4gICAgICAgICAgcmVzcC5yZXF1ZXN0LmVtaXQoJ2h0dHBEb3dubG9hZFByb2dyZXNzJywgW3Byb2dyZXNzLCByZXNwXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXNwLmh0dHBSZXNwb25zZS5idWZmZXJzLnB1c2goQVdTLnV0aWwuYnVmZmVyLnRvQnVmZmVyKGNodW5rKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBhZGQoJ0hUVFBfRE9ORScsICdodHRwRG9uZScsIGZ1bmN0aW9uIEhUVFBfRE9ORShyZXNwKSB7XG4gICAgICAvLyBjb252ZXJ0IGJ1ZmZlcnMgYXJyYXkgaW50byBzaW5nbGUgYnVmZmVyXG4gICAgICBpZiAocmVzcC5odHRwUmVzcG9uc2UuYnVmZmVycyAmJiByZXNwLmh0dHBSZXNwb25zZS5idWZmZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIGJvZHkgPSBBV1MudXRpbC5idWZmZXIuY29uY2F0KHJlc3AuaHR0cFJlc3BvbnNlLmJ1ZmZlcnMpO1xuICAgICAgICByZXNwLmh0dHBSZXNwb25zZS5ib2R5ID0gYm9keTtcbiAgICAgIH1cbiAgICAgIGRlbGV0ZSByZXNwLmh0dHBSZXNwb25zZS5udW1CeXRlcztcbiAgICAgIGRlbGV0ZSByZXNwLmh0dHBSZXNwb25zZS5idWZmZXJzO1xuICAgIH0pO1xuXG4gICAgYWRkKCdGSU5BTElaRV9FUlJPUicsICdyZXRyeScsIGZ1bmN0aW9uIEZJTkFMSVpFX0VSUk9SKHJlc3ApIHtcbiAgICAgIGlmIChyZXNwLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlKSB7XG4gICAgICAgIHJlc3AuZXJyb3Iuc3RhdHVzQ29kZSA9IHJlc3AuaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGU7XG4gICAgICAgIGlmIChyZXNwLmVycm9yLnJldHJ5YWJsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzcC5lcnJvci5yZXRyeWFibGUgPSB0aGlzLnNlcnZpY2UucmV0cnlhYmxlRXJyb3IocmVzcC5lcnJvciwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZCgnSU5WQUxJREFURV9DUkVERU5USUFMUycsICdyZXRyeScsIGZ1bmN0aW9uIElOVkFMSURBVEVfQ1JFREVOVElBTFMocmVzcCkge1xuICAgICAgaWYgKCFyZXNwLmVycm9yKSByZXR1cm47XG4gICAgICBzd2l0Y2ggKHJlc3AuZXJyb3IuY29kZSkge1xuICAgICAgICBjYXNlICdSZXF1ZXN0RXhwaXJlZCc6IC8vIEVDMiBvbmx5XG4gICAgICAgIGNhc2UgJ0V4cGlyZWRUb2tlbkV4Y2VwdGlvbic6XG4gICAgICAgIGNhc2UgJ0V4cGlyZWRUb2tlbic6XG4gICAgICAgICAgcmVzcC5lcnJvci5yZXRyeWFibGUgPSB0cnVlO1xuICAgICAgICAgIHJlc3AucmVxdWVzdC5zZXJ2aWNlLmNvbmZpZy5jcmVkZW50aWFscy5leHBpcmVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZCgnRVhQSVJFRF9TSUdOQVRVUkUnLCAncmV0cnknLCBmdW5jdGlvbiBFWFBJUkVEX1NJR05BVFVSRShyZXNwKSB7XG4gICAgICB2YXIgZXJyID0gcmVzcC5lcnJvcjtcbiAgICAgIGlmICghZXJyKSByZXR1cm47XG4gICAgICBpZiAodHlwZW9mIGVyci5jb2RlID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgZXJyLm1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChlcnIuY29kZS5tYXRjaCgvU2lnbmF0dXJlLykgJiYgZXJyLm1lc3NhZ2UubWF0Y2goL2V4cGlyZWQvKSkge1xuICAgICAgICAgIHJlc3AuZXJyb3IucmV0cnlhYmxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYWRkKCdDTE9DS19TS0VXRUQnLCAncmV0cnknLCBmdW5jdGlvbiBDTE9DS19TS0VXRUQocmVzcCkge1xuICAgICAgaWYgKCFyZXNwLmVycm9yKSByZXR1cm47XG4gICAgICBpZiAodGhpcy5zZXJ2aWNlLmNsb2NrU2tld0Vycm9yKHJlc3AuZXJyb3IpXG4gICAgICAgICAgJiYgdGhpcy5zZXJ2aWNlLmNvbmZpZy5jb3JyZWN0Q2xvY2tTa2V3KSB7XG4gICAgICAgIHJlc3AuZXJyb3IucmV0cnlhYmxlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZCgnUkVESVJFQ1QnLCAncmV0cnknLCBmdW5jdGlvbiBSRURJUkVDVChyZXNwKSB7XG4gICAgICBpZiAocmVzcC5lcnJvciAmJiByZXNwLmVycm9yLnN0YXR1c0NvZGUgPj0gMzAwICYmXG4gICAgICAgICAgcmVzcC5lcnJvci5zdGF0dXNDb2RlIDwgNDAwICYmIHJlc3AuaHR0cFJlc3BvbnNlLmhlYWRlcnNbJ2xvY2F0aW9uJ10pIHtcbiAgICAgICAgdGhpcy5odHRwUmVxdWVzdC5lbmRwb2ludCA9XG4gICAgICAgICAgbmV3IEFXUy5FbmRwb2ludChyZXNwLmh0dHBSZXNwb25zZS5oZWFkZXJzWydsb2NhdGlvbiddKTtcbiAgICAgICAgdGhpcy5odHRwUmVxdWVzdC5oZWFkZXJzWydIb3N0J10gPSB0aGlzLmh0dHBSZXF1ZXN0LmVuZHBvaW50Lmhvc3Q7XG4gICAgICAgIHJlc3AuZXJyb3IucmVkaXJlY3QgPSB0cnVlO1xuICAgICAgICByZXNwLmVycm9yLnJldHJ5YWJsZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBhZGQoJ1JFVFJZX0NIRUNLJywgJ3JldHJ5JywgZnVuY3Rpb24gUkVUUllfQ0hFQ0socmVzcCkge1xuICAgICAgaWYgKHJlc3AuZXJyb3IpIHtcbiAgICAgICAgaWYgKHJlc3AuZXJyb3IucmVkaXJlY3QgJiYgcmVzcC5yZWRpcmVjdENvdW50IDwgcmVzcC5tYXhSZWRpcmVjdHMpIHtcbiAgICAgICAgICByZXNwLmVycm9yLnJldHJ5RGVsYXkgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3AucmV0cnlDb3VudCA8IHJlc3AubWF4UmV0cmllcykge1xuICAgICAgICAgIHJlc3AuZXJyb3IucmV0cnlEZWxheSA9IHRoaXMuc2VydmljZS5yZXRyeURlbGF5cyhyZXNwLnJldHJ5Q291bnQpIHx8IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZEFzeW5jKCdSRVNFVF9SRVRSWV9TVEFURScsICdhZnRlclJldHJ5JywgZnVuY3Rpb24gUkVTRVRfUkVUUllfU1RBVEUocmVzcCwgZG9uZSkge1xuICAgICAgdmFyIGRlbGF5LCB3aWxsUmV0cnkgPSBmYWxzZTtcblxuICAgICAgaWYgKHJlc3AuZXJyb3IpIHtcbiAgICAgICAgZGVsYXkgPSByZXNwLmVycm9yLnJldHJ5RGVsYXkgfHwgMDtcbiAgICAgICAgaWYgKHJlc3AuZXJyb3IucmV0cnlhYmxlICYmIHJlc3AucmV0cnlDb3VudCA8IHJlc3AubWF4UmV0cmllcykge1xuICAgICAgICAgIHJlc3AucmV0cnlDb3VudCsrO1xuICAgICAgICAgIHdpbGxSZXRyeSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzcC5lcnJvci5yZWRpcmVjdCAmJiByZXNwLnJlZGlyZWN0Q291bnQgPCByZXNwLm1heFJlZGlyZWN0cykge1xuICAgICAgICAgIHJlc3AucmVkaXJlY3RDb3VudCsrO1xuICAgICAgICAgIHdpbGxSZXRyeSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHdpbGxSZXRyeSkge1xuICAgICAgICByZXNwLmVycm9yID0gbnVsbDtcbiAgICAgICAgc2V0VGltZW91dChkb25lLCBkZWxheSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb25lKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pLFxuXG4gIENvcmVQb3N0OiBuZXcgU2VxdWVudGlhbEV4ZWN1dG9yKCkuYWRkTmFtZWRMaXN0ZW5lcnMoZnVuY3Rpb24oYWRkKSB7XG4gICAgYWRkKCdFWFRSQUNUX1JFUVVFU1RfSUQnLCAnZXh0cmFjdERhdGEnLCBBV1MudXRpbC5leHRyYWN0UmVxdWVzdElkKTtcbiAgICBhZGQoJ0VYVFJBQ1RfUkVRVUVTVF9JRCcsICdleHRyYWN0RXJyb3InLCBBV1MudXRpbC5leHRyYWN0UmVxdWVzdElkKTtcblxuICAgIGFkZCgnRU5PVEZPVU5EX0VSUk9SJywgJ2h0dHBFcnJvcicsIGZ1bmN0aW9uIEVOT1RGT1VORF9FUlJPUihlcnIpIHtcbiAgICAgIGlmIChlcnIuY29kZSA9PT0gJ05ldHdvcmtpbmdFcnJvcicgJiYgZXJyLmVycm5vID09PSAnRU5PVEZPVU5EJykge1xuICAgICAgICB2YXIgbWVzc2FnZSA9ICdJbmFjY2Vzc2libGUgaG9zdDogYCcgKyBlcnIuaG9zdG5hbWUgK1xuICAgICAgICAgICdcXCcuIFRoaXMgc2VydmljZSBtYXkgbm90IGJlIGF2YWlsYWJsZSBpbiB0aGUgYCcgKyBlcnIucmVnaW9uICtcbiAgICAgICAgICAnXFwnIHJlZ2lvbi4nO1xuICAgICAgICB0aGlzLnJlc3BvbnNlLmVycm9yID0gQVdTLnV0aWwuZXJyb3IobmV3IEVycm9yKG1lc3NhZ2UpLCB7XG4gICAgICAgICAgY29kZTogJ1Vua25vd25FbmRwb2ludCcsXG4gICAgICAgICAgcmVnaW9uOiBlcnIucmVnaW9uLFxuICAgICAgICAgIGhvc3RuYW1lOiBlcnIuaG9zdG5hbWUsXG4gICAgICAgICAgcmV0cnlhYmxlOiB0cnVlLFxuICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGVyclxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSksXG5cbiAgTG9nZ2VyOiBuZXcgU2VxdWVudGlhbEV4ZWN1dG9yKCkuYWRkTmFtZWRMaXN0ZW5lcnMoZnVuY3Rpb24oYWRkKSB7XG4gICAgYWRkKCdMT0dfUkVRVUVTVCcsICdjb21wbGV0ZScsIGZ1bmN0aW9uIExPR19SRVFVRVNUKHJlc3ApIHtcbiAgICAgIHZhciByZXEgPSByZXNwLnJlcXVlc3Q7XG4gICAgICB2YXIgbG9nZ2VyID0gcmVxLnNlcnZpY2UuY29uZmlnLmxvZ2dlcjtcbiAgICAgIGlmICghbG9nZ2VyKSByZXR1cm47XG4gICAgICBmdW5jdGlvbiBmaWx0ZXJTZW5zaXRpdmVMb2coaW5wdXRTaGFwZSwgc2hhcGUpIHtcbiAgICAgICAgaWYgKCFzaGFwZSkge1xuICAgICAgICAgIHJldHVybiBzaGFwZTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGlucHV0U2hhcGUudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ3N0cnVjdHVyZSc6XG4gICAgICAgICAgICB2YXIgc3RydWN0ID0ge307XG4gICAgICAgICAgICBBV1MudXRpbC5lYWNoKHNoYXBlLCBmdW5jdGlvbihzdWJTaGFwZU5hbWUsIHN1YlNoYXBlKSB7XG4gICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaW5wdXRTaGFwZS5tZW1iZXJzLCBzdWJTaGFwZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgc3RydWN0W3N1YlNoYXBlTmFtZV0gPSBmaWx0ZXJTZW5zaXRpdmVMb2coaW5wdXRTaGFwZS5tZW1iZXJzW3N1YlNoYXBlTmFtZV0sIHN1YlNoYXBlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHJ1Y3Rbc3ViU2hhcGVOYW1lXSA9IHN1YlNoYXBlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzdHJ1Y3Q7XG4gICAgICAgICAgY2FzZSAnbGlzdCc6XG4gICAgICAgICAgICB2YXIgbGlzdCA9IFtdO1xuICAgICAgICAgICAgQVdTLnV0aWwuYXJyYXlFYWNoKHNoYXBlLCBmdW5jdGlvbihzdWJTaGFwZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgbGlzdC5wdXNoKGZpbHRlclNlbnNpdGl2ZUxvZyhpbnB1dFNoYXBlLm1lbWJlciwgc3ViU2hhcGUpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICAgICAgY2FzZSAnbWFwJzpcbiAgICAgICAgICAgIHZhciBtYXAgPSB7fTtcbiAgICAgICAgICAgIEFXUy51dGlsLmVhY2goc2hhcGUsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgbWFwW2tleV0gPSBmaWx0ZXJTZW5zaXRpdmVMb2coaW5wdXRTaGFwZS52YWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZiAoaW5wdXRTaGFwZS5pc1NlbnNpdGl2ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gJyoqKlNlbnNpdGl2ZUluZm9ybWF0aW9uKioqJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBzaGFwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBidWlsZE1lc3NhZ2UoKSB7XG4gICAgICAgIHZhciB0aW1lID0gcmVzcC5yZXF1ZXN0LnNlcnZpY2UuZ2V0U2tld0NvcnJlY3RlZERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIHZhciBkZWx0YSA9ICh0aW1lIC0gcmVxLnN0YXJ0VGltZS5nZXRUaW1lKCkpIC8gMTAwMDtcbiAgICAgICAgdmFyIGFuc2kgPSBsb2dnZXIuaXNUVFkgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIHZhciBzdGF0dXMgPSByZXNwLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlO1xuICAgICAgICB2YXIgY2Vuc29yZWRQYXJhbXMgPSByZXEucGFyYW1zO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnMgJiZcbiAgICAgICAgICAgICAgcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcmVxLm9wZXJhdGlvbl0gJiZcbiAgICAgICAgICAgICAgcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcmVxLm9wZXJhdGlvbl0uaW5wdXRcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIGlucHV0U2hhcGUgPSByZXEuc2VydmljZS5hcGkub3BlcmF0aW9uc1tyZXEub3BlcmF0aW9uXS5pbnB1dDtcbiAgICAgICAgICBjZW5zb3JlZFBhcmFtcyA9IGZpbHRlclNlbnNpdGl2ZUxvZyhpbnB1dFNoYXBlLCByZXEucGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFyYW1zID0gcmVxdWlyZSgndXRpbCcpLmluc3BlY3QoY2Vuc29yZWRQYXJhbXMsIHRydWUsIG51bGwpO1xuICAgICAgICB2YXIgbWVzc2FnZSA9ICcnO1xuICAgICAgICBpZiAoYW5zaSkgbWVzc2FnZSArPSAnXFx4MUJbMzNtJztcbiAgICAgICAgbWVzc2FnZSArPSAnW0FXUyAnICsgcmVxLnNlcnZpY2Uuc2VydmljZUlkZW50aWZpZXIgKyAnICcgKyBzdGF0dXM7XG4gICAgICAgIG1lc3NhZ2UgKz0gJyAnICsgZGVsdGEudG9TdHJpbmcoKSArICdzICcgKyByZXNwLnJldHJ5Q291bnQgKyAnIHJldHJpZXNdJztcbiAgICAgICAgaWYgKGFuc2kpIG1lc3NhZ2UgKz0gJ1xceDFCWzA7MW0nO1xuICAgICAgICBtZXNzYWdlICs9ICcgJyArIEFXUy51dGlsLnN0cmluZy5sb3dlckZpcnN0KHJlcS5vcGVyYXRpb24pO1xuICAgICAgICBtZXNzYWdlICs9ICcoJyArIHBhcmFtcyArICcpJztcbiAgICAgICAgaWYgKGFuc2kpIG1lc3NhZ2UgKz0gJ1xceDFCWzBtJztcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBsaW5lID0gYnVpbGRNZXNzYWdlKCk7XG4gICAgICBpZiAodHlwZW9mIGxvZ2dlci5sb2cgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhsaW5lKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxvZ2dlci53cml0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBsb2dnZXIud3JpdGUobGluZSArICdcXG4nKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSksXG5cbiAgSnNvbjogbmV3IFNlcXVlbnRpYWxFeGVjdXRvcigpLmFkZE5hbWVkTGlzdGVuZXJzKGZ1bmN0aW9uKGFkZCkge1xuICAgIHZhciBzdmMgPSByZXF1aXJlKCcuL3Byb3RvY29sL2pzb24nKTtcbiAgICBhZGQoJ0JVSUxEJywgJ2J1aWxkJywgc3ZjLmJ1aWxkUmVxdWVzdCk7XG4gICAgYWRkKCdFWFRSQUNUX0RBVEEnLCAnZXh0cmFjdERhdGEnLCBzdmMuZXh0cmFjdERhdGEpO1xuICAgIGFkZCgnRVhUUkFDVF9FUlJPUicsICdleHRyYWN0RXJyb3InLCBzdmMuZXh0cmFjdEVycm9yKTtcbiAgfSksXG5cbiAgUmVzdDogbmV3IFNlcXVlbnRpYWxFeGVjdXRvcigpLmFkZE5hbWVkTGlzdGVuZXJzKGZ1bmN0aW9uKGFkZCkge1xuICAgIHZhciBzdmMgPSByZXF1aXJlKCcuL3Byb3RvY29sL3Jlc3QnKTtcbiAgICBhZGQoJ0JVSUxEJywgJ2J1aWxkJywgc3ZjLmJ1aWxkUmVxdWVzdCk7XG4gICAgYWRkKCdFWFRSQUNUX0RBVEEnLCAnZXh0cmFjdERhdGEnLCBzdmMuZXh0cmFjdERhdGEpO1xuICAgIGFkZCgnRVhUUkFDVF9FUlJPUicsICdleHRyYWN0RXJyb3InLCBzdmMuZXh0cmFjdEVycm9yKTtcbiAgfSksXG5cbiAgUmVzdEpzb246IG5ldyBTZXF1ZW50aWFsRXhlY3V0b3IoKS5hZGROYW1lZExpc3RlbmVycyhmdW5jdGlvbihhZGQpIHtcbiAgICB2YXIgc3ZjID0gcmVxdWlyZSgnLi9wcm90b2NvbC9yZXN0X2pzb24nKTtcbiAgICBhZGQoJ0JVSUxEJywgJ2J1aWxkJywgc3ZjLmJ1aWxkUmVxdWVzdCk7XG4gICAgYWRkKCdFWFRSQUNUX0RBVEEnLCAnZXh0cmFjdERhdGEnLCBzdmMuZXh0cmFjdERhdGEpO1xuICAgIGFkZCgnRVhUUkFDVF9FUlJPUicsICdleHRyYWN0RXJyb3InLCBzdmMuZXh0cmFjdEVycm9yKTtcbiAgfSksXG5cbiAgUmVzdFhtbDogbmV3IFNlcXVlbnRpYWxFeGVjdXRvcigpLmFkZE5hbWVkTGlzdGVuZXJzKGZ1bmN0aW9uKGFkZCkge1xuICAgIHZhciBzdmMgPSByZXF1aXJlKCcuL3Byb3RvY29sL3Jlc3RfeG1sJyk7XG4gICAgYWRkKCdCVUlMRCcsICdidWlsZCcsIHN2Yy5idWlsZFJlcXVlc3QpO1xuICAgIGFkZCgnRVhUUkFDVF9EQVRBJywgJ2V4dHJhY3REYXRhJywgc3ZjLmV4dHJhY3REYXRhKTtcbiAgICBhZGQoJ0VYVFJBQ1RfRVJST1InLCAnZXh0cmFjdEVycm9yJywgc3ZjLmV4dHJhY3RFcnJvcik7XG4gIH0pLFxuXG4gIFF1ZXJ5OiBuZXcgU2VxdWVudGlhbEV4ZWN1dG9yKCkuYWRkTmFtZWRMaXN0ZW5lcnMoZnVuY3Rpb24oYWRkKSB7XG4gICAgdmFyIHN2YyA9IHJlcXVpcmUoJy4vcHJvdG9jb2wvcXVlcnknKTtcbiAgICBhZGQoJ0JVSUxEJywgJ2J1aWxkJywgc3ZjLmJ1aWxkUmVxdWVzdCk7XG4gICAgYWRkKCdFWFRSQUNUX0RBVEEnLCAnZXh0cmFjdERhdGEnLCBzdmMuZXh0cmFjdERhdGEpO1xuICAgIGFkZCgnRVhUUkFDVF9FUlJPUicsICdleHRyYWN0RXJyb3InLCBzdmMuZXh0cmFjdEVycm9yKTtcbiAgfSlcbn07XG5cbn0se1wiLi9jb3JlXCI6MTksXCIuL2Rpc2NvdmVyX2VuZHBvaW50XCI6MjcsXCIuL3Byb3RvY29sL2pzb25cIjo0NyxcIi4vcHJvdG9jb2wvcXVlcnlcIjo0OCxcIi4vcHJvdG9jb2wvcmVzdFwiOjQ5LFwiLi9wcm90b2NvbC9yZXN0X2pzb25cIjo1MCxcIi4vcHJvdG9jb2wvcmVzdF94bWxcIjo1MSxcIi4vc2VxdWVudGlhbF9leGVjdXRvclwiOjU5LFwidXRpbFwiOjk4fV0sMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIEFXUyA9IHJlcXVpcmUoJy4vY29yZScpO1xudmFyIGluaGVyaXQgPSBBV1MudXRpbC5pbmhlcml0O1xuXG4vKipcbiAqIFRoZSBlbmRwb2ludCB0aGF0IGEgc2VydmljZSB3aWxsIHRhbGsgdG8sIGZvciBleGFtcGxlLFxuICogYCdodHRwczovL2VjMi5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tJ2AuIElmXG4gKiB5b3UgbmVlZCB0byBvdmVycmlkZSBhbiBlbmRwb2ludCBmb3IgYSBzZXJ2aWNlLCB5b3UgY2FuXG4gKiBzZXQgdGhlIGVuZHBvaW50IG9uIGEgc2VydmljZSBieSBwYXNzaW5nIHRoZSBlbmRwb2ludFxuICogb2JqZWN0IHdpdGggdGhlIGBlbmRwb2ludGAgb3B0aW9uIGtleTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiB2YXIgZXAgPSBuZXcgQVdTLkVuZHBvaW50KCdhd3Nwcm94eS5leGFtcGxlLmNvbScpO1xuICogdmFyIHMzID0gbmV3IEFXUy5TMyh7ZW5kcG9pbnQ6IGVwfSk7XG4gKiBzMy5zZXJ2aWNlLmVuZHBvaW50Lmhvc3RuYW1lID09ICdhd3Nwcm94eS5leGFtcGxlLmNvbSdcbiAqIGBgYFxuICpcbiAqIE5vdGUgdGhhdCBpZiB5b3UgZG8gbm90IHNwZWNpZnkgYSBwcm90b2NvbCwgdGhlIHByb3RvY29sIHdpbGxcbiAqIGJlIHNlbGVjdGVkIGJhc2VkIG9uIHlvdXIgY3VycmVudCB7QVdTLmNvbmZpZ30gY29uZmlndXJhdGlvbi5cbiAqXG4gKiBAIWF0dHJpYnV0ZSBwcm90b2NvbFxuICogICBAcmV0dXJuIFtTdHJpbmddIHRoZSBwcm90b2NvbCAoaHR0cCBvciBodHRwcykgb2YgdGhlIGVuZHBvaW50XG4gKiAgICAgVVJMXG4gKiBAIWF0dHJpYnV0ZSBob3N0bmFtZVxuICogICBAcmV0dXJuIFtTdHJpbmddIHRoZSBob3N0IHBvcnRpb24gb2YgdGhlIGVuZHBvaW50LCBlLmcuLFxuICogICAgIGV4YW1wbGUuY29tXG4gKiBAIWF0dHJpYnV0ZSBob3N0XG4gKiAgIEByZXR1cm4gW1N0cmluZ10gdGhlIGhvc3QgcG9ydGlvbiBvZiB0aGUgZW5kcG9pbnQgaW5jbHVkaW5nXG4gKiAgICAgdGhlIHBvcnQsIGUuZy4sIGV4YW1wbGUuY29tOjgwXG4gKiBAIWF0dHJpYnV0ZSBwb3J0XG4gKiAgIEByZXR1cm4gW0ludGVnZXJdIHRoZSBwb3J0IG9mIHRoZSBlbmRwb2ludFxuICogQCFhdHRyaWJ1dGUgaHJlZlxuICogICBAcmV0dXJuIFtTdHJpbmddIHRoZSBmdWxsIFVSTCBvZiB0aGUgZW5kcG9pbnRcbiAqL1xuQVdTLkVuZHBvaW50ID0gaW5oZXJpdCh7XG5cbiAgLyoqXG4gICAqIEBvdmVybG9hZCBFbmRwb2ludChlbmRwb2ludClcbiAgICogICBDb25zdHJ1Y3RzIGEgbmV3IGVuZHBvaW50IGdpdmVuIGFuIGVuZHBvaW50IFVSTC4gSWYgdGhlXG4gICAqICAgVVJMIG9taXRzIGEgcHJvdG9jb2wgKGh0dHAgb3IgaHR0cHMpLCB0aGUgZGVmYXVsdCBwcm90b2NvbFxuICAgKiAgIHNldCBpbiB0aGUgZ2xvYmFsIHtBV1MuY29uZmlnfSB3aWxsIGJlIHVzZWQuXG4gICAqICAgQHBhcmFtIGVuZHBvaW50IFtTdHJpbmddIHRoZSBVUkwgdG8gY29uc3RydWN0IGFuIGVuZHBvaW50IGZyb21cbiAgICovXG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBFbmRwb2ludChlbmRwb2ludCwgY29uZmlnKSB7XG4gICAgQVdTLnV0aWwuaGlkZVByb3BlcnRpZXModGhpcywgWydzbGFzaGVzJywgJ2F1dGgnLCAnaGFzaCcsICdzZWFyY2gnLCAncXVlcnknXSk7XG5cbiAgICBpZiAodHlwZW9mIGVuZHBvaW50ID09PSAndW5kZWZpbmVkJyB8fCBlbmRwb2ludCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGVuZHBvaW50OiAnICsgZW5kcG9pbnQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZHBvaW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIEFXUy51dGlsLmNvcHkoZW5kcG9pbnQpO1xuICAgIH1cblxuICAgIGlmICghZW5kcG9pbnQubWF0Y2goL15odHRwLykpIHtcbiAgICAgIHZhciB1c2VTU0wgPSBjb25maWcgJiYgY29uZmlnLnNzbEVuYWJsZWQgIT09IHVuZGVmaW5lZCA/XG4gICAgICAgIGNvbmZpZy5zc2xFbmFibGVkIDogQVdTLmNvbmZpZy5zc2xFbmFibGVkO1xuICAgICAgZW5kcG9pbnQgPSAodXNlU1NMID8gJ2h0dHBzJyA6ICdodHRwJykgKyAnOi8vJyArIGVuZHBvaW50O1xuICAgIH1cblxuICAgIEFXUy51dGlsLnVwZGF0ZSh0aGlzLCBBV1MudXRpbC51cmxQYXJzZShlbmRwb2ludCkpO1xuXG4gICAgLy8gRW5zdXJlIHRoZSBwb3J0IHByb3BlcnR5IGlzIHNldCBhcyBhbiBpbnRlZ2VyXG4gICAgaWYgKHRoaXMucG9ydCkge1xuICAgICAgdGhpcy5wb3J0ID0gcGFyc2VJbnQodGhpcy5wb3J0LCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucG9ydCA9IHRoaXMucHJvdG9jb2wgPT09ICdodHRwczonID8gNDQzIDogODA7XG4gICAgfVxuICB9XG5cbn0pO1xuXG4vKipcbiAqIFRoZSBsb3cgbGV2ZWwgSFRUUCByZXF1ZXN0IG9iamVjdCwgZW5jYXBzdWxhdGluZyBhbGwgSFRUUCBoZWFkZXJcbiAqIGFuZCBib2R5IGRhdGEgc2VudCBieSBhIHNlcnZpY2UgcmVxdWVzdC5cbiAqXG4gKiBAIWF0dHJpYnV0ZSBtZXRob2RcbiAqICAgQHJldHVybiBbU3RyaW5nXSB0aGUgSFRUUCBtZXRob2Qgb2YgdGhlIHJlcXVlc3RcbiAqIEAhYXR0cmlidXRlIHBhdGhcbiAqICAgQHJldHVybiBbU3RyaW5nXSB0aGUgcGF0aCBwb3J0aW9uIG9mIHRoZSBVUkksIGUuZy4sXG4gKiAgICAgXCIvbGlzdC8/c3RhcnQ9NSZudW09MTBcIlxuICogQCFhdHRyaWJ1dGUgaGVhZGVyc1xuICogICBAcmV0dXJuIFttYXA8U3RyaW5nLFN0cmluZz5dXG4gKiAgICAgYSBtYXAgb2YgaGVhZGVyIGtleXMgYW5kIHRoZWlyIHJlc3BlY3RpdmUgdmFsdWVzXG4gKiBAIWF0dHJpYnV0ZSBib2R5XG4gKiAgIEByZXR1cm4gW1N0cmluZ10gdGhlIHJlcXVlc3QgYm9keSBwYXlsb2FkXG4gKiBAIWF0dHJpYnV0ZSBlbmRwb2ludFxuICogICBAcmV0dXJuIFtBV1MuRW5kcG9pbnRdIHRoZSBlbmRwb2ludCBmb3IgdGhlIHJlcXVlc3RcbiAqIEAhYXR0cmlidXRlIHJlZ2lvblxuICogICBAYXBpIHByaXZhdGVcbiAqICAgQHJldHVybiBbU3RyaW5nXSB0aGUgcmVnaW9uLCBmb3Igc2lnbmluZyBwdXJwb3NlcyBvbmx5LlxuICovXG5BV1MuSHR0cFJlcXVlc3QgPSBpbmhlcml0KHtcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gSHR0cFJlcXVlc3QoZW5kcG9pbnQsIHJlZ2lvbikge1xuICAgIGVuZHBvaW50ID0gbmV3IEFXUy5FbmRwb2ludChlbmRwb2ludCk7XG4gICAgdGhpcy5tZXRob2QgPSAnUE9TVCc7XG4gICAgdGhpcy5wYXRoID0gZW5kcG9pbnQucGF0aCB8fCAnLyc7XG4gICAgdGhpcy5oZWFkZXJzID0ge307XG4gICAgdGhpcy5ib2R5ID0gJyc7XG4gICAgdGhpcy5lbmRwb2ludCA9IGVuZHBvaW50O1xuICAgIHRoaXMucmVnaW9uID0gcmVnaW9uO1xuICAgIHRoaXMuX3VzZXJBZ2VudCA9ICcnO1xuICAgIHRoaXMuc2V0VXNlckFnZW50KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgc2V0VXNlckFnZW50OiBmdW5jdGlvbiBzZXRVc2VyQWdlbnQoKSB7XG4gICAgdGhpcy5fdXNlckFnZW50ID0gdGhpcy5oZWFkZXJzW3RoaXMuZ2V0VXNlckFnZW50SGVhZGVyTmFtZSgpXSA9IEFXUy51dGlsLnVzZXJBZ2VudCgpO1xuICB9LFxuXG4gIGdldFVzZXJBZ2VudEhlYWRlck5hbWU6IGZ1bmN0aW9uIGdldFVzZXJBZ2VudEhlYWRlck5hbWUoKSB7XG4gICAgdmFyIHByZWZpeCA9IEFXUy51dGlsLmlzQnJvd3NlcigpID8gJ1gtQW16LScgOiAnJztcbiAgICByZXR1cm4gcHJlZml4ICsgJ1VzZXItQWdlbnQnO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGFwcGVuZFRvVXNlckFnZW50OiBmdW5jdGlvbiBhcHBlbmRUb1VzZXJBZ2VudChhZ2VudFBhcnRpYWwpIHtcbiAgICBpZiAodHlwZW9mIGFnZW50UGFydGlhbCA9PT0gJ3N0cmluZycgJiYgYWdlbnRQYXJ0aWFsKSB7XG4gICAgICB0aGlzLl91c2VyQWdlbnQgKz0gJyAnICsgYWdlbnRQYXJ0aWFsO1xuICAgIH1cbiAgICB0aGlzLmhlYWRlcnNbdGhpcy5nZXRVc2VyQWdlbnRIZWFkZXJOYW1lKCldID0gdGhpcy5fdXNlckFnZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGdldFVzZXJBZ2VudDogZnVuY3Rpb24gZ2V0VXNlckFnZW50KCkge1xuICAgIHJldHVybiB0aGlzLl91c2VyQWdlbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4gW1N0cmluZ10gdGhlIHBhcnQgb2YgdGhlIHtwYXRofSBleGNsdWRpbmcgdGhlXG4gICAqICAgcXVlcnkgc3RyaW5nXG4gICAqL1xuICBwYXRobmFtZTogZnVuY3Rpb24gcGF0aG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGF0aC5zcGxpdCgnPycsIDEpWzBdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIFtTdHJpbmddIHRoZSBxdWVyeSBzdHJpbmcgcG9ydGlvbiBvZiB0aGUge3BhdGh9XG4gICAqL1xuICBzZWFyY2g6IGZ1bmN0aW9uIHNlYXJjaCgpIHtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLnBhdGguc3BsaXQoJz8nLCAyKVsxXTtcbiAgICBpZiAocXVlcnkpIHtcbiAgICAgIHF1ZXJ5ID0gQVdTLnV0aWwucXVlcnlTdHJpbmdQYXJzZShxdWVyeSk7XG4gICAgICByZXR1cm4gQVdTLnV0aWwucXVlcnlQYXJhbXNUb1N0cmluZyhxdWVyeSk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIHVwZGF0ZSBodHRwUmVxdWVzdCBlbmRwb2ludCB3aXRoIGVuZHBvaW50IHN0cmluZ1xuICAgKi9cbiAgdXBkYXRlRW5kcG9pbnQ6IGZ1bmN0aW9uIHVwZGF0ZUVuZHBvaW50KGVuZHBvaW50U3RyKSB7XG4gICAgdmFyIG5ld0VuZHBvaW50ID0gbmV3IEFXUy5FbmRwb2ludChlbmRwb2ludFN0cik7XG4gICAgdGhpcy5lbmRwb2ludCA9IG5ld0VuZHBvaW50O1xuICAgIHRoaXMucGF0aCA9IG5ld0VuZHBvaW50LnBhdGggfHwgJy8nO1xuICB9XG59KTtcblxuLyoqXG4gKiBUaGUgbG93IGxldmVsIEhUVFAgcmVzcG9uc2Ugb2JqZWN0LCBlbmNhcHN1bGF0aW5nIGFsbCBIVFRQIGhlYWRlclxuICogYW5kIGJvZHkgZGF0YSByZXR1cm5lZCBmcm9tIHRoZSByZXF1ZXN0LlxuICpcbiAqIEAhYXR0cmlidXRlIHN0YXR1c0NvZGVcbiAqICAgQHJldHVybiBbSW50ZWdlcl0gdGhlIEhUVFAgc3RhdHVzIGNvZGUgb2YgdGhlIHJlc3BvbnNlIChlLmcuLCAyMDAsIDQwNClcbiAqIEAhYXR0cmlidXRlIGhlYWRlcnNcbiAqICAgQHJldHVybiBbbWFwPFN0cmluZyxTdHJpbmc+XVxuICogICAgICBhIG1hcCBvZiByZXNwb25zZSBoZWFkZXIga2V5cyBhbmQgdGhlaXIgcmVzcGVjdGl2ZSB2YWx1ZXNcbiAqIEAhYXR0cmlidXRlIGJvZHlcbiAqICAgQHJldHVybiBbU3RyaW5nXSB0aGUgcmVzcG9uc2UgYm9keSBwYXlsb2FkXG4gKiBAIWF0dHJpYnV0ZSBbcl0gc3RyZWFtaW5nXG4gKiAgIEByZXR1cm4gW0Jvb2xlYW5dIHdoZXRoZXIgdGhpcyByZXNwb25zZSBpcyBiZWluZyBzdHJlYW1lZCBhdCBhIGxvdy1sZXZlbC5cbiAqICAgICBEZWZhdWx0cyB0byBgZmFsc2VgIChidWZmZXJlZCByZWFkcykuIERvIG5vdCBtb2RpZnkgdGhpcyBtYW51YWxseSwgdXNlXG4gKiAgICAge2NyZWF0ZVVuYnVmZmVyZWRTdHJlYW19IHRvIGNvbnZlcnQgdGhlIHN0cmVhbSB0byB1bmJ1ZmZlcmVkIG1vZGVcbiAqICAgICBpbnN0ZWFkLlxuICovXG5BV1MuSHR0cFJlc3BvbnNlID0gaW5oZXJpdCh7XG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIEh0dHBSZXNwb25zZSgpIHtcbiAgICB0aGlzLnN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oZWFkZXJzID0ge307XG4gICAgdGhpcy5ib2R5ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc3RyZWFtaW5nID0gZmFsc2U7XG4gICAgdGhpcy5zdHJlYW0gPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyBidWZmZXJpbmcgb24gdGhlIEhUVFAgcmVzcG9uc2UgYW5kIHJldHVybnMgdGhlIHN0cmVhbSBmb3IgcmVhZGluZy5cbiAgICogQHJldHVybiBbU3RyZWFtLCBYTUxIdHRwUmVxdWVzdCwgbnVsbF0gdGhlIHVuZGVybHlpbmcgc3RyZWFtIG9iamVjdC5cbiAgICogICBVc2UgdGhpcyBvYmplY3QgdG8gZGlyZWN0bHkgcmVhZCBkYXRhIG9mZiBvZiB0aGUgc3RyZWFtLlxuICAgKiBAbm90ZSBUaGlzIG9iamVjdCBpcyBvbmx5IGF2YWlsYWJsZSBhZnRlciB0aGUge0FXUy5SZXF1ZXN0fmh0dHBIZWFkZXJzfVxuICAgKiAgIGV2ZW50IGhhcyBmaXJlZC4gVGhpcyBtZXRob2QgbXVzdCBiZSBjYWxsZWQgcHJpb3IgdG9cbiAgICogICB7QVdTLlJlcXVlc3R+aHR0cERhdGF9LlxuICAgKiBAZXhhbXBsZSBUYWtpbmcgY29udHJvbCBvZiBhIHN0cmVhbVxuICAgKiAgIHJlcXVlc3Qub24oJ2h0dHBIZWFkZXJzJywgZnVuY3Rpb24oc3RhdHVzQ29kZSwgaGVhZGVycykge1xuICAgKiAgICAgaWYgKHN0YXR1c0NvZGUgPCAzMDApIHtcbiAgICogICAgICAgaWYgKGhlYWRlcnMuZXRhZyA9PT0gJ3h5eicpIHtcbiAgICogICAgICAgICAvLyBwaXBlIHRoZSBzdHJlYW0sIGRpc2FibGluZyBidWZmZXJpbmdcbiAgICogICAgICAgICB2YXIgc3RyZWFtID0gdGhpcy5yZXNwb25zZS5odHRwUmVzcG9uc2UuY3JlYXRlVW5idWZmZXJlZFN0cmVhbSgpO1xuICAgKiAgICAgICAgIHN0cmVhbS5waXBlKHByb2Nlc3Muc3Rkb3V0KTtcbiAgICogICAgICAgfSBlbHNlIHsgLy8gYWJvcnQgdGhpcyByZXF1ZXN0IGFuZCBzZXQgYSBiZXR0ZXIgZXJyb3IgbWVzc2FnZVxuICAgKiAgICAgICAgIHRoaXMuYWJvcnQoKTtcbiAgICogICAgICAgICB0aGlzLnJlc3BvbnNlLmVycm9yID0gbmV3IEVycm9yKCdJbnZhbGlkIEVUYWcnKTtcbiAgICogICAgICAgfVxuICAgKiAgICAgfVxuICAgKiAgIH0pLnNlbmQoY29uc29sZS5sb2cpO1xuICAgKi9cbiAgY3JlYXRlVW5idWZmZXJlZFN0cmVhbTogZnVuY3Rpb24gY3JlYXRlVW5idWZmZXJlZFN0cmVhbSgpIHtcbiAgICB0aGlzLnN0cmVhbWluZyA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXMuc3RyZWFtO1xuICB9XG59KTtcblxuXG5BV1MuSHR0cENsaWVudCA9IGluaGVyaXQoe30pO1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5BV1MuSHR0cENsaWVudC5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uIGdldEluc3RhbmNlKCkge1xuICBpZiAodGhpcy5zaW5nbGV0b24gPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc2luZ2xldG9uID0gbmV3IHRoaXMoKTtcbiAgfVxuICByZXR1cm4gdGhpcy5zaW5nbGV0b247XG59O1xuXG59LHtcIi4vY29yZVwiOjE5fV0sMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTtcbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5yZXF1aXJlKCcuLi9odHRwJyk7XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbkFXUy5YSFJDbGllbnQgPSBBV1MudXRpbC5pbmhlcml0KHtcbiAgaGFuZGxlUmVxdWVzdDogZnVuY3Rpb24gaGFuZGxlUmVxdWVzdChodHRwUmVxdWVzdCwgaHR0cE9wdGlvbnMsIGNhbGxiYWNrLCBlcnJDYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgZW5kcG9pbnQgPSBodHRwUmVxdWVzdC5lbmRwb2ludDtcbiAgICB2YXIgZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB2YXIgaHJlZiA9IGVuZHBvaW50LnByb3RvY29sICsgJy8vJyArIGVuZHBvaW50Lmhvc3RuYW1lO1xuICAgIGlmIChlbmRwb2ludC5wb3J0ICE9PSA4MCAmJiBlbmRwb2ludC5wb3J0ICE9PSA0NDMpIHtcbiAgICAgIGhyZWYgKz0gJzonICsgZW5kcG9pbnQucG9ydDtcbiAgICB9XG4gICAgaHJlZiArPSBodHRwUmVxdWVzdC5wYXRoO1xuXG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLCBoZWFkZXJzRW1pdHRlZCA9IGZhbHNlO1xuICAgIGh0dHBSZXF1ZXN0LnN0cmVhbSA9IHhocjtcblxuICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMCkgcmV0dXJuOyAvLyAwIGNvZGUgaXMgaW52YWxpZFxuICAgICAgfSBjYXRjaCAoZSkgeyByZXR1cm47IH1cblxuICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA+PSB0aGlzLkhFQURFUlNfUkVDRUlWRUQgJiYgIWhlYWRlcnNFbWl0dGVkKSB7XG4gICAgICAgIGVtaXR0ZXIuc3RhdHVzQ29kZSA9IHhoci5zdGF0dXM7XG4gICAgICAgIGVtaXR0ZXIuaGVhZGVycyA9IHNlbGYucGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSk7XG4gICAgICAgIGVtaXR0ZXIuZW1pdChcbiAgICAgICAgICAnaGVhZGVycycsXG4gICAgICAgICAgZW1pdHRlci5zdGF0dXNDb2RlLFxuICAgICAgICAgIGVtaXR0ZXIuaGVhZGVycyxcbiAgICAgICAgICB4aHIuc3RhdHVzVGV4dFxuICAgICAgICApO1xuICAgICAgICBoZWFkZXJzRW1pdHRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSB0aGlzLkRPTkUpIHtcbiAgICAgICAgc2VsZi5maW5pc2hSZXF1ZXN0KHhociwgZW1pdHRlcik7XG4gICAgICB9XG4gICAgfSwgZmFsc2UpO1xuICAgIHhoci51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBlbWl0dGVyLmVtaXQoJ3NlbmRQcm9ncmVzcycsIGV2dCk7XG4gICAgfSk7XG4gICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgZW1pdHRlci5lbWl0KCdyZWNlaXZlUHJvZ3Jlc3MnLCBldnQpO1xuICAgIH0sIGZhbHNlKTtcbiAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcigndGltZW91dCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGVyckNhbGxiYWNrKEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcignVGltZW91dCcpLCB7Y29kZTogJ1RpbWVvdXRFcnJvcid9KSk7XG4gICAgfSwgZmFsc2UpO1xuICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGVyckNhbGxiYWNrKEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcignTmV0d29yayBGYWlsdXJlJyksIHtcbiAgICAgICAgY29kZTogJ05ldHdvcmtpbmdFcnJvcidcbiAgICAgIH0pKTtcbiAgICB9LCBmYWxzZSk7XG4gICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZnVuY3Rpb24gKCkge1xuICAgICAgZXJyQ2FsbGJhY2soQVdTLnV0aWwuZXJyb3IobmV3IEVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnKSwge1xuICAgICAgICBjb2RlOiAnUmVxdWVzdEFib3J0ZWRFcnJvcidcbiAgICAgIH0pKTtcbiAgICB9LCBmYWxzZSk7XG5cbiAgICBjYWxsYmFjayhlbWl0dGVyKTtcbiAgICB4aHIub3BlbihodHRwUmVxdWVzdC5tZXRob2QsIGhyZWYsIGh0dHBPcHRpb25zLnhockFzeW5jICE9PSBmYWxzZSk7XG4gICAgQVdTLnV0aWwuZWFjaChodHRwUmVxdWVzdC5oZWFkZXJzLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSAhPT0gJ0NvbnRlbnQtTGVuZ3RoJyAmJiBrZXkgIT09ICdVc2VyLUFnZW50JyAmJiBrZXkgIT09ICdIb3N0Jykge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChodHRwT3B0aW9ucy50aW1lb3V0ICYmIGh0dHBPcHRpb25zLnhockFzeW5jICE9PSBmYWxzZSkge1xuICAgICAgeGhyLnRpbWVvdXQgPSBodHRwT3B0aW9ucy50aW1lb3V0O1xuICAgIH1cblxuICAgIGlmIChodHRwT3B0aW9ucy54aHJXaXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cbiAgICB0cnkgeyB4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJzsgfSBjYXRjaCAoZSkge31cblxuICAgIHRyeSB7XG4gICAgICBpZiAoaHR0cFJlcXVlc3QuYm9keSkge1xuICAgICAgICB4aHIuc2VuZChodHRwUmVxdWVzdC5ib2R5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHhoci5zZW5kKCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoaHR0cFJlcXVlc3QuYm9keSAmJiB0eXBlb2YgaHR0cFJlcXVlc3QuYm9keS5idWZmZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHhoci5zZW5kKGh0dHBSZXF1ZXN0LmJvZHkuYnVmZmVyKTsgLy8gc2VuZCBBcnJheUJ1ZmZlciBkaXJlY3RseVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlbWl0dGVyO1xuICB9LFxuXG4gIHBhcnNlSGVhZGVyczogZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgICB2YXIgaGVhZGVycyA9IHt9O1xuICAgIEFXUy51dGlsLmFycmF5RWFjaChyYXdIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLyksIGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICB2YXIga2V5ID0gbGluZS5zcGxpdCgnOicsIDEpWzBdO1xuICAgICAgdmFyIHZhbHVlID0gbGluZS5zdWJzdHJpbmcoa2V5Lmxlbmd0aCArIDIpO1xuICAgICAgaWYgKGtleS5sZW5ndGggPiAwKSBoZWFkZXJzW2tleS50b0xvd2VyQ2FzZSgpXSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiBoZWFkZXJzO1xuICB9LFxuXG4gIGZpbmlzaFJlcXVlc3Q6IGZ1bmN0aW9uIGZpbmlzaFJlcXVlc3QoeGhyLCBlbWl0dGVyKSB7XG4gICAgdmFyIGJ1ZmZlcjtcbiAgICBpZiAoeGhyLnJlc3BvbnNlVHlwZSA9PT0gJ2FycmF5YnVmZmVyJyAmJiB4aHIucmVzcG9uc2UpIHtcbiAgICAgIHZhciBhYiA9IHhoci5yZXNwb25zZTtcbiAgICAgIGJ1ZmZlciA9IG5ldyBBV1MudXRpbC5CdWZmZXIoYWIuYnl0ZUxlbmd0aCk7XG4gICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGFiKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGJ1ZmZlcltpXSA9IHZpZXdbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlmICghYnVmZmVyICYmIHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBidWZmZXIgPSBuZXcgQVdTLnV0aWwuQnVmZmVyKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICBpZiAoYnVmZmVyKSBlbWl0dGVyLmVtaXQoJ2RhdGEnLCBidWZmZXIpO1xuICAgIGVtaXR0ZXIuZW1pdCgnZW5kJyk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5BV1MuSHR0cENsaWVudC5wcm90b3R5cGUgPSBBV1MuWEhSQ2xpZW50LnByb3RvdHlwZTtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuQVdTLkh0dHBDbGllbnQuc3RyZWFtc0FwaVZlcnNpb24gPSAxO1xuXG59LHtcIi4uL2NvcmVcIjoxOSxcIi4uL2h0dHBcIjozNSxcImV2ZW50c1wiOjgyfV0sMzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cbmZ1bmN0aW9uIEpzb25CdWlsZGVyKCkgeyB9XG5cbkpzb25CdWlsZGVyLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uKHZhbHVlLCBzaGFwZSkge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodHJhbnNsYXRlKHZhbHVlLCBzaGFwZSkpO1xufTtcblxuZnVuY3Rpb24gdHJhbnNsYXRlKHZhbHVlLCBzaGFwZSkge1xuICBpZiAoIXNoYXBlIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgc3dpdGNoIChzaGFwZS50eXBlKSB7XG4gICAgY2FzZSAnc3RydWN0dXJlJzogcmV0dXJuIHRyYW5zbGF0ZVN0cnVjdHVyZSh2YWx1ZSwgc2hhcGUpO1xuICAgIGNhc2UgJ21hcCc6IHJldHVybiB0cmFuc2xhdGVNYXAodmFsdWUsIHNoYXBlKTtcbiAgICBjYXNlICdsaXN0JzogcmV0dXJuIHRyYW5zbGF0ZUxpc3QodmFsdWUsIHNoYXBlKTtcbiAgICBkZWZhdWx0OiByZXR1cm4gdHJhbnNsYXRlU2NhbGFyKHZhbHVlLCBzaGFwZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlU3RydWN0dXJlKHN0cnVjdHVyZSwgc2hhcGUpIHtcbiAgdmFyIHN0cnVjdCA9IHt9O1xuICB1dGlsLmVhY2goc3RydWN0dXJlLCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBtZW1iZXJTaGFwZSA9IHNoYXBlLm1lbWJlcnNbbmFtZV07XG4gICAgaWYgKG1lbWJlclNoYXBlKSB7XG4gICAgICBpZiAobWVtYmVyU2hhcGUubG9jYXRpb24gIT09ICdib2R5JykgcmV0dXJuO1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IG1lbWJlclNoYXBlLmlzTG9jYXRpb25OYW1lID8gbWVtYmVyU2hhcGUubmFtZSA6IG5hbWU7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJhbnNsYXRlKHZhbHVlLCBtZW1iZXJTaGFwZSk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHN0cnVjdFtsb2NhdGlvbk5hbWVdID0gcmVzdWx0O1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzdHJ1Y3Q7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZUxpc3QobGlzdCwgc2hhcGUpIHtcbiAgdmFyIG91dCA9IFtdO1xuICB1dGlsLmFycmF5RWFjaChsaXN0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSB0cmFuc2xhdGUodmFsdWUsIHNoYXBlLm1lbWJlcik7XG4gICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSBvdXQucHVzaChyZXN1bHQpO1xuICB9KTtcbiAgcmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlTWFwKG1hcCwgc2hhcGUpIHtcbiAgdmFyIG91dCA9IHt9O1xuICB1dGlsLmVhY2gobWFwLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRyYW5zbGF0ZSh2YWx1ZSwgc2hhcGUudmFsdWUpO1xuICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkgb3V0W2tleV0gPSByZXN1bHQ7XG4gIH0pO1xuICByZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVTY2FsYXIodmFsdWUsIHNoYXBlKSB7XG4gIHJldHVybiBzaGFwZS50b1dpcmVGb3JtYXQodmFsdWUpO1xufVxuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IEpzb25CdWlsZGVyO1xuXG59LHtcIi4uL3V0aWxcIjo3Mn1dLDM4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG5mdW5jdGlvbiBKc29uUGFyc2VyKCkgeyB9XG5cbkpzb25QYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odmFsdWUsIHNoYXBlKSB7XG4gIHJldHVybiB0cmFuc2xhdGUoSlNPTi5wYXJzZSh2YWx1ZSksIHNoYXBlKTtcbn07XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZSh2YWx1ZSwgc2hhcGUpIHtcbiAgaWYgKCFzaGFwZSB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gIHN3aXRjaCAoc2hhcGUudHlwZSkge1xuICAgIGNhc2UgJ3N0cnVjdHVyZSc6IHJldHVybiB0cmFuc2xhdGVTdHJ1Y3R1cmUodmFsdWUsIHNoYXBlKTtcbiAgICBjYXNlICdtYXAnOiByZXR1cm4gdHJhbnNsYXRlTWFwKHZhbHVlLCBzaGFwZSk7XG4gICAgY2FzZSAnbGlzdCc6IHJldHVybiB0cmFuc2xhdGVMaXN0KHZhbHVlLCBzaGFwZSk7XG4gICAgZGVmYXVsdDogcmV0dXJuIHRyYW5zbGF0ZVNjYWxhcih2YWx1ZSwgc2hhcGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVN0cnVjdHVyZShzdHJ1Y3R1cmUsIHNoYXBlKSB7XG4gIGlmIChzdHJ1Y3R1cmUgPT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICB2YXIgc3RydWN0ID0ge307XG4gIHZhciBzaGFwZU1lbWJlcnMgPSBzaGFwZS5tZW1iZXJzO1xuICB1dGlsLmVhY2goc2hhcGVNZW1iZXJzLCBmdW5jdGlvbihuYW1lLCBtZW1iZXJTaGFwZSkge1xuICAgIHZhciBsb2NhdGlvbk5hbWUgPSBtZW1iZXJTaGFwZS5pc0xvY2F0aW9uTmFtZSA/IG1lbWJlclNoYXBlLm5hbWUgOiBuYW1lO1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc3RydWN0dXJlLCBsb2NhdGlvbk5hbWUpKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHJ1Y3R1cmVbbG9jYXRpb25OYW1lXTtcbiAgICAgIHZhciByZXN1bHQgPSB0cmFuc2xhdGUodmFsdWUsIG1lbWJlclNoYXBlKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkgc3RydWN0W25hbWVdID0gcmVzdWx0O1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzdHJ1Y3Q7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZUxpc3QobGlzdCwgc2hhcGUpIHtcbiAgaWYgKGxpc3QgPT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICB2YXIgb3V0ID0gW107XG4gIHV0aWwuYXJyYXlFYWNoKGxpc3QsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRyYW5zbGF0ZSh2YWx1ZSwgc2hhcGUubWVtYmVyKTtcbiAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIG91dC5wdXNoKG51bGwpO1xuICAgIGVsc2Ugb3V0LnB1c2gocmVzdWx0KTtcbiAgfSk7XG4gIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZU1hcChtYXAsIHNoYXBlKSB7XG4gIGlmIChtYXAgPT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICB2YXIgb3V0ID0ge307XG4gIHV0aWwuZWFjaChtYXAsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gdHJhbnNsYXRlKHZhbHVlLCBzaGFwZS52YWx1ZSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSBvdXRba2V5XSA9IG51bGw7XG4gICAgZWxzZSBvdXRba2V5XSA9IHJlc3VsdDtcbiAgfSk7XG4gIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVNjYWxhcih2YWx1ZSwgc2hhcGUpIHtcbiAgcmV0dXJuIHNoYXBlLnRvVHlwZSh2YWx1ZSk7XG59XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gSnNvblBhcnNlcjtcblxufSx7XCIuLi91dGlsXCI6NzJ9XSwzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgQ29sbGVjdGlvbiA9IHJlcXVpcmUoJy4vY29sbGVjdGlvbicpO1xudmFyIE9wZXJhdGlvbiA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJyk7XG52YXIgU2hhcGUgPSByZXF1aXJlKCcuL3NoYXBlJyk7XG52YXIgUGFnaW5hdG9yID0gcmVxdWlyZSgnLi9wYWdpbmF0b3InKTtcbnZhciBSZXNvdXJjZVdhaXRlciA9IHJlcXVpcmUoJy4vcmVzb3VyY2Vfd2FpdGVyJyk7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xudmFyIHByb3BlcnR5ID0gdXRpbC5wcm9wZXJ0eTtcbnZhciBtZW1vaXplZFByb3BlcnR5ID0gdXRpbC5tZW1vaXplZFByb3BlcnR5O1xuXG5mdW5jdGlvbiBBcGkoYXBpLCBvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgYXBpID0gYXBpIHx8IHt9O1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5hcGkgPSB0aGlzO1xuXG4gIGFwaS5tZXRhZGF0YSA9IGFwaS5tZXRhZGF0YSB8fCB7fTtcblxuICBwcm9wZXJ0eSh0aGlzLCAnaXNBcGknLCB0cnVlLCBmYWxzZSk7XG4gIHByb3BlcnR5KHRoaXMsICdhcGlWZXJzaW9uJywgYXBpLm1ldGFkYXRhLmFwaVZlcnNpb24pO1xuICBwcm9wZXJ0eSh0aGlzLCAnZW5kcG9pbnRQcmVmaXgnLCBhcGkubWV0YWRhdGEuZW5kcG9pbnRQcmVmaXgpO1xuICBwcm9wZXJ0eSh0aGlzLCAnc2lnbmluZ05hbWUnLCBhcGkubWV0YWRhdGEuc2lnbmluZ05hbWUpO1xuICBwcm9wZXJ0eSh0aGlzLCAnZ2xvYmFsRW5kcG9pbnQnLCBhcGkubWV0YWRhdGEuZ2xvYmFsRW5kcG9pbnQpO1xuICBwcm9wZXJ0eSh0aGlzLCAnc2lnbmF0dXJlVmVyc2lvbicsIGFwaS5tZXRhZGF0YS5zaWduYXR1cmVWZXJzaW9uKTtcbiAgcHJvcGVydHkodGhpcywgJ2pzb25WZXJzaW9uJywgYXBpLm1ldGFkYXRhLmpzb25WZXJzaW9uKTtcbiAgcHJvcGVydHkodGhpcywgJ3RhcmdldFByZWZpeCcsIGFwaS5tZXRhZGF0YS50YXJnZXRQcmVmaXgpO1xuICBwcm9wZXJ0eSh0aGlzLCAncHJvdG9jb2wnLCBhcGkubWV0YWRhdGEucHJvdG9jb2wpO1xuICBwcm9wZXJ0eSh0aGlzLCAndGltZXN0YW1wRm9ybWF0JywgYXBpLm1ldGFkYXRhLnRpbWVzdGFtcEZvcm1hdCk7XG4gIHByb3BlcnR5KHRoaXMsICd4bWxOYW1lc3BhY2VVcmknLCBhcGkubWV0YWRhdGEueG1sTmFtZXNwYWNlKTtcbiAgcHJvcGVydHkodGhpcywgJ2FiYnJldmlhdGlvbicsIGFwaS5tZXRhZGF0YS5zZXJ2aWNlQWJicmV2aWF0aW9uKTtcbiAgcHJvcGVydHkodGhpcywgJ2Z1bGxOYW1lJywgYXBpLm1ldGFkYXRhLnNlcnZpY2VGdWxsTmFtZSk7XG4gIHByb3BlcnR5KHRoaXMsICdzZXJ2aWNlSWQnLCBhcGkubWV0YWRhdGEuc2VydmljZUlkKTtcblxuICBtZW1vaXplZFByb3BlcnR5KHRoaXMsICdjbGFzc05hbWUnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmFtZSA9IGFwaS5tZXRhZGF0YS5zZXJ2aWNlQWJicmV2aWF0aW9uIHx8IGFwaS5tZXRhZGF0YS5zZXJ2aWNlRnVsbE5hbWU7XG4gICAgaWYgKCFuYW1lKSByZXR1cm4gbnVsbDtcblxuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL15BbWF6b258QVdTXFxzKnxcXCguKnxcXHMrfFxcVysvZywgJycpO1xuICAgIGlmIChuYW1lID09PSAnRWxhc3RpY0xvYWRCYWxhbmNpbmcnKSBuYW1lID0gJ0VMQic7XG4gICAgcmV0dXJuIG5hbWU7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGFkZEVuZHBvaW50T3BlcmF0aW9uKG5hbWUsIG9wZXJhdGlvbikge1xuICAgIGlmIChvcGVyYXRpb24uZW5kcG9pbnRvcGVyYXRpb24gPT09IHRydWUpIHtcbiAgICAgIHByb3BlcnR5KHNlbGYsICdlbmRwb2ludE9wZXJhdGlvbicsIHV0aWwuc3RyaW5nLmxvd2VyRmlyc3QobmFtZSkpO1xuICAgIH1cbiAgfVxuXG4gIHByb3BlcnR5KHRoaXMsICdvcGVyYXRpb25zJywgbmV3IENvbGxlY3Rpb24oYXBpLm9wZXJhdGlvbnMsIG9wdGlvbnMsIGZ1bmN0aW9uKG5hbWUsIG9wZXJhdGlvbikge1xuICAgIHJldHVybiBuZXcgT3BlcmF0aW9uKG5hbWUsIG9wZXJhdGlvbiwgb3B0aW9ucyk7XG4gIH0sIHV0aWwuc3RyaW5nLmxvd2VyRmlyc3QsIGFkZEVuZHBvaW50T3BlcmF0aW9uKSk7XG5cbiAgcHJvcGVydHkodGhpcywgJ3NoYXBlcycsIG5ldyBDb2xsZWN0aW9uKGFwaS5zaGFwZXMsIG9wdGlvbnMsIGZ1bmN0aW9uKG5hbWUsIHNoYXBlKSB7XG4gICAgcmV0dXJuIFNoYXBlLmNyZWF0ZShzaGFwZSwgb3B0aW9ucyk7XG4gIH0pKTtcblxuICBwcm9wZXJ0eSh0aGlzLCAncGFnaW5hdG9ycycsIG5ldyBDb2xsZWN0aW9uKGFwaS5wYWdpbmF0b3JzLCBvcHRpb25zLCBmdW5jdGlvbihuYW1lLCBwYWdpbmF0b3IpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2luYXRvcihuYW1lLCBwYWdpbmF0b3IsIG9wdGlvbnMpO1xuICB9KSk7XG5cbiAgcHJvcGVydHkodGhpcywgJ3dhaXRlcnMnLCBuZXcgQ29sbGVjdGlvbihhcGkud2FpdGVycywgb3B0aW9ucywgZnVuY3Rpb24obmFtZSwgd2FpdGVyKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNvdXJjZVdhaXRlcihuYW1lLCB3YWl0ZXIsIG9wdGlvbnMpO1xuICB9LCB1dGlsLnN0cmluZy5sb3dlckZpcnN0KSk7XG5cbiAgaWYgKG9wdGlvbnMuZG9jdW1lbnRhdGlvbikge1xuICAgIHByb3BlcnR5KHRoaXMsICdkb2N1bWVudGF0aW9uJywgYXBpLmRvY3VtZW50YXRpb24pO1xuICAgIHByb3BlcnR5KHRoaXMsICdkb2N1bWVudGF0aW9uVXJsJywgYXBpLmRvY3VtZW50YXRpb25VcmwpO1xuICB9XG59XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gQXBpO1xuXG59LHtcIi4uL3V0aWxcIjo3MixcIi4vY29sbGVjdGlvblwiOjQwLFwiLi9vcGVyYXRpb25cIjo0MSxcIi4vcGFnaW5hdG9yXCI6NDIsXCIuL3Jlc291cmNlX3dhaXRlclwiOjQzLFwiLi9zaGFwZVwiOjQ0fV0sNDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIG1lbW9pemVkUHJvcGVydHkgPSByZXF1aXJlKCcuLi91dGlsJykubWVtb2l6ZWRQcm9wZXJ0eTtcblxuZnVuY3Rpb24gbWVtb2l6ZShuYW1lLCB2YWx1ZSwgZmFjdG9yeSwgbmFtZVRyKSB7XG4gIG1lbW9pemVkUHJvcGVydHkodGhpcywgbmFtZVRyKG5hbWUpLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZmFjdG9yeShuYW1lLCB2YWx1ZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBDb2xsZWN0aW9uKGl0ZXJhYmxlLCBvcHRpb25zLCBmYWN0b3J5LCBuYW1lVHIsIGNhbGxiYWNrKSB7XG4gIG5hbWVUciA9IG5hbWVUciB8fCBTdHJpbmc7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBmb3IgKHZhciBpZCBpbiBpdGVyYWJsZSkge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaXRlcmFibGUsIGlkKSkge1xuICAgICAgbWVtb2l6ZS5jYWxsKHNlbGYsIGlkLCBpdGVyYWJsZVtpZF0sIGZhY3RvcnksIG5hbWVUcik7XG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGlkLCBpdGVyYWJsZVtpZF0pO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IENvbGxlY3Rpb247XG5cbn0se1wiLi4vdXRpbFwiOjcyfV0sNDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIFNoYXBlID0gcmVxdWlyZSgnLi9zaGFwZScpO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbnZhciBwcm9wZXJ0eSA9IHV0aWwucHJvcGVydHk7XG52YXIgbWVtb2l6ZWRQcm9wZXJ0eSA9IHV0aWwubWVtb2l6ZWRQcm9wZXJ0eTtcblxuZnVuY3Rpb24gT3BlcmF0aW9uKG5hbWUsIG9wZXJhdGlvbiwgb3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHByb3BlcnR5KHRoaXMsICduYW1lJywgb3BlcmF0aW9uLm5hbWUgfHwgbmFtZSk7XG4gIHByb3BlcnR5KHRoaXMsICdhcGknLCBvcHRpb25zLmFwaSwgZmFsc2UpO1xuXG4gIG9wZXJhdGlvbi5odHRwID0gb3BlcmF0aW9uLmh0dHAgfHwge307XG4gIHByb3BlcnR5KHRoaXMsICdlbmRwb2ludCcsIG9wZXJhdGlvbi5lbmRwb2ludCk7XG4gIHByb3BlcnR5KHRoaXMsICdodHRwTWV0aG9kJywgb3BlcmF0aW9uLmh0dHAubWV0aG9kIHx8ICdQT1NUJyk7XG4gIHByb3BlcnR5KHRoaXMsICdodHRwUGF0aCcsIG9wZXJhdGlvbi5odHRwLnJlcXVlc3RVcmkgfHwgJy8nKTtcbiAgcHJvcGVydHkodGhpcywgJ2F1dGh0eXBlJywgb3BlcmF0aW9uLmF1dGh0eXBlIHx8ICcnKTtcbiAgcHJvcGVydHkoXG4gICAgdGhpcyxcbiAgICAnZW5kcG9pbnREaXNjb3ZlcnlSZXF1aXJlZCcsXG4gICAgb3BlcmF0aW9uLmVuZHBvaW50ZGlzY292ZXJ5ID9cbiAgICAgIChvcGVyYXRpb24uZW5kcG9pbnRkaXNjb3ZlcnkucmVxdWlyZWQgPyAnUkVRVUlSRUQnIDogJ09QVElPTkFMJykgOlxuICAgICdOVUxMJ1xuICApO1xuXG4gIG1lbW9pemVkUHJvcGVydHkodGhpcywgJ2lucHV0JywgZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFvcGVyYXRpb24uaW5wdXQpIHtcbiAgICAgIHJldHVybiBuZXcgU2hhcGUuY3JlYXRlKHt0eXBlOiAnc3RydWN0dXJlJ30sIG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gU2hhcGUuY3JlYXRlKG9wZXJhdGlvbi5pbnB1dCwgb3B0aW9ucyk7XG4gIH0pO1xuXG4gIG1lbW9pemVkUHJvcGVydHkodGhpcywgJ291dHB1dCcsIGZ1bmN0aW9uKCkge1xuICAgIGlmICghb3BlcmF0aW9uLm91dHB1dCkge1xuICAgICAgcmV0dXJuIG5ldyBTaGFwZS5jcmVhdGUoe3R5cGU6ICdzdHJ1Y3R1cmUnfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBTaGFwZS5jcmVhdGUob3BlcmF0aW9uLm91dHB1dCwgb3B0aW9ucyk7XG4gIH0pO1xuXG4gIG1lbW9pemVkUHJvcGVydHkodGhpcywgJ2Vycm9ycycsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBsaXN0ID0gW107XG4gICAgaWYgKCFvcGVyYXRpb24uZXJyb3JzKSByZXR1cm4gbnVsbDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3BlcmF0aW9uLmVycm9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgbGlzdC5wdXNoKFNoYXBlLmNyZWF0ZShvcGVyYXRpb24uZXJyb3JzW2ldLCBvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpc3Q7XG4gIH0pO1xuXG4gIG1lbW9pemVkUHJvcGVydHkodGhpcywgJ3BhZ2luYXRvcicsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBvcHRpb25zLmFwaS5wYWdpbmF0b3JzW25hbWVdO1xuICB9KTtcblxuICBpZiAob3B0aW9ucy5kb2N1bWVudGF0aW9uKSB7XG4gICAgcHJvcGVydHkodGhpcywgJ2RvY3VtZW50YXRpb24nLCBvcGVyYXRpb24uZG9jdW1lbnRhdGlvbik7XG4gICAgcHJvcGVydHkodGhpcywgJ2RvY3VtZW50YXRpb25VcmwnLCBvcGVyYXRpb24uZG9jdW1lbnRhdGlvblVybCk7XG4gIH1cblxuICAvLyBpZGVtcG90ZW50TWVtYmVycyBvbmx5IHRyYWNrcyB0b3AtbGV2ZWwgaW5wdXQgc2hhcGVzXG4gIG1lbW9pemVkUHJvcGVydHkodGhpcywgJ2lkZW1wb3RlbnRNZW1iZXJzJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlkZW1wb3RlbnRNZW1iZXJzID0gW107XG4gICAgdmFyIGlucHV0ID0gc2VsZi5pbnB1dDtcbiAgICB2YXIgbWVtYmVycyA9IGlucHV0Lm1lbWJlcnM7XG4gICAgaWYgKCFpbnB1dC5tZW1iZXJzKSB7XG4gICAgICByZXR1cm4gaWRlbXBvdGVudE1lbWJlcnM7XG4gICAgfVxuICAgIGZvciAodmFyIG5hbWUgaW4gbWVtYmVycykge1xuICAgICAgaWYgKCFtZW1iZXJzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKG1lbWJlcnNbbmFtZV0uaXNJZGVtcG90ZW50ID09PSB0cnVlKSB7XG4gICAgICAgIGlkZW1wb3RlbnRNZW1iZXJzLnB1c2gobmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpZGVtcG90ZW50TWVtYmVycztcbiAgfSk7XG5cbiAgbWVtb2l6ZWRQcm9wZXJ0eSh0aGlzLCAnaGFzRXZlbnRPdXRwdXQnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgb3V0cHV0ID0gc2VsZi5vdXRwdXQ7XG4gICAgcmV0dXJuIGhhc0V2ZW50U3RyZWFtKG91dHB1dCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYXNFdmVudFN0cmVhbSh0b3BMZXZlbFNoYXBlKSB7XG4gIHZhciBtZW1iZXJzID0gdG9wTGV2ZWxTaGFwZS5tZW1iZXJzO1xuICB2YXIgcGF5bG9hZCA9IHRvcExldmVsU2hhcGUucGF5bG9hZDtcblxuICBpZiAoIXRvcExldmVsU2hhcGUubWVtYmVycykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChwYXlsb2FkKSB7XG4gICAgdmFyIHBheWxvYWRNZW1iZXIgPSBtZW1iZXJzW3BheWxvYWRdO1xuICAgIHJldHVybiBwYXlsb2FkTWVtYmVyLmlzRXZlbnRTdHJlYW07XG4gIH1cblxuICAvLyBjaGVjayBpZiBhbnkgbWVtYmVyIGlzIGFuIGV2ZW50IHN0cmVhbVxuICBmb3IgKHZhciBuYW1lIGluIG1lbWJlcnMpIHtcbiAgICBpZiAoIW1lbWJlcnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGlmIChtZW1iZXJzW25hbWVdLmlzRXZlbnRTdHJlYW0gPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBPcGVyYXRpb247XG5cbn0se1wiLi4vdXRpbFwiOjcyLFwiLi9zaGFwZVwiOjQ0fV0sNDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHByb3BlcnR5ID0gcmVxdWlyZSgnLi4vdXRpbCcpLnByb3BlcnR5O1xuXG5mdW5jdGlvbiBQYWdpbmF0b3IobmFtZSwgcGFnaW5hdG9yKSB7XG4gIHByb3BlcnR5KHRoaXMsICdpbnB1dFRva2VuJywgcGFnaW5hdG9yLmlucHV0X3Rva2VuKTtcbiAgcHJvcGVydHkodGhpcywgJ2xpbWl0S2V5JywgcGFnaW5hdG9yLmxpbWl0X2tleSk7XG4gIHByb3BlcnR5KHRoaXMsICdtb3JlUmVzdWx0cycsIHBhZ2luYXRvci5tb3JlX3Jlc3VsdHMpO1xuICBwcm9wZXJ0eSh0aGlzLCAnb3V0cHV0VG9rZW4nLCBwYWdpbmF0b3Iub3V0cHV0X3Rva2VuKTtcbiAgcHJvcGVydHkodGhpcywgJ3Jlc3VsdEtleScsIHBhZ2luYXRvci5yZXN1bHRfa2V5KTtcbn1cblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBQYWdpbmF0b3I7XG5cbn0se1wiLi4vdXRpbFwiOjcyfV0sNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG52YXIgcHJvcGVydHkgPSB1dGlsLnByb3BlcnR5O1xuXG5mdW5jdGlvbiBSZXNvdXJjZVdhaXRlcihuYW1lLCB3YWl0ZXIsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHByb3BlcnR5KHRoaXMsICduYW1lJywgbmFtZSk7XG4gIHByb3BlcnR5KHRoaXMsICdhcGknLCBvcHRpb25zLmFwaSwgZmFsc2UpO1xuXG4gIGlmICh3YWl0ZXIub3BlcmF0aW9uKSB7XG4gICAgcHJvcGVydHkodGhpcywgJ29wZXJhdGlvbicsIHV0aWwuc3RyaW5nLmxvd2VyRmlyc3Qod2FpdGVyLm9wZXJhdGlvbikpO1xuICB9XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIga2V5cyA9IFtcbiAgICAndHlwZScsXG4gICAgJ2Rlc2NyaXB0aW9uJyxcbiAgICAnZGVsYXknLFxuICAgICdtYXhBdHRlbXB0cycsXG4gICAgJ2FjY2VwdG9ycydcbiAgXTtcblxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHZhbHVlID0gd2FpdGVyW2tleV07XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBwcm9wZXJ0eShzZWxmLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IFJlc291cmNlV2FpdGVyO1xuXG59LHtcIi4uL3V0aWxcIjo3Mn1dLDQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi9jb2xsZWN0aW9uJyk7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG5mdW5jdGlvbiBwcm9wZXJ0eShvYmosIG5hbWUsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdXRpbC5wcm9wZXJ0eS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1lbW9pemVkUHJvcGVydHkob2JqLCBuYW1lKSB7XG4gIGlmICghb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZVtuYW1lXSkge1xuICAgIHV0aWwubWVtb2l6ZWRQcm9wZXJ0eS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIFNoYXBlKHNoYXBlLCBvcHRpb25zLCBtZW1iZXJOYW1lKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHByb3BlcnR5KHRoaXMsICdzaGFwZScsIHNoYXBlLnNoYXBlKTtcbiAgcHJvcGVydHkodGhpcywgJ2FwaScsIG9wdGlvbnMuYXBpLCBmYWxzZSk7XG4gIHByb3BlcnR5KHRoaXMsICd0eXBlJywgc2hhcGUudHlwZSk7XG4gIHByb3BlcnR5KHRoaXMsICdlbnVtJywgc2hhcGUuZW51bSk7XG4gIHByb3BlcnR5KHRoaXMsICdtaW4nLCBzaGFwZS5taW4pO1xuICBwcm9wZXJ0eSh0aGlzLCAnbWF4Jywgc2hhcGUubWF4KTtcbiAgcHJvcGVydHkodGhpcywgJ3BhdHRlcm4nLCBzaGFwZS5wYXR0ZXJuKTtcbiAgcHJvcGVydHkodGhpcywgJ2xvY2F0aW9uJywgc2hhcGUubG9jYXRpb24gfHwgdGhpcy5sb2NhdGlvbiB8fCAnYm9keScpO1xuICBwcm9wZXJ0eSh0aGlzLCAnbmFtZScsIHRoaXMubmFtZSB8fCBzaGFwZS54bWxOYW1lIHx8IHNoYXBlLnF1ZXJ5TmFtZSB8fFxuICAgIHNoYXBlLmxvY2F0aW9uTmFtZSB8fCBtZW1iZXJOYW1lKTtcbiAgcHJvcGVydHkodGhpcywgJ2lzU3RyZWFtaW5nJywgc2hhcGUuc3RyZWFtaW5nIHx8IHRoaXMuaXNTdHJlYW1pbmcgfHwgZmFsc2UpO1xuICBwcm9wZXJ0eSh0aGlzLCAncmVxdWlyZXNMZW5ndGgnLCBzaGFwZS5yZXF1aXJlc0xlbmd0aCwgZmFsc2UpO1xuICBwcm9wZXJ0eSh0aGlzLCAnaXNDb21wb3NpdGUnLCBzaGFwZS5pc0NvbXBvc2l0ZSB8fCBmYWxzZSk7XG4gIHByb3BlcnR5KHRoaXMsICdpc1NoYXBlJywgdHJ1ZSwgZmFsc2UpO1xuICBwcm9wZXJ0eSh0aGlzLCAnaXNRdWVyeU5hbWUnLCBCb29sZWFuKHNoYXBlLnF1ZXJ5TmFtZSksIGZhbHNlKTtcbiAgcHJvcGVydHkodGhpcywgJ2lzTG9jYXRpb25OYW1lJywgQm9vbGVhbihzaGFwZS5sb2NhdGlvbk5hbWUpLCBmYWxzZSk7XG4gIHByb3BlcnR5KHRoaXMsICdpc0lkZW1wb3RlbnQnLCBzaGFwZS5pZGVtcG90ZW5jeVRva2VuID09PSB0cnVlKTtcbiAgcHJvcGVydHkodGhpcywgJ2lzSnNvblZhbHVlJywgc2hhcGUuanNvbnZhbHVlID09PSB0cnVlKTtcbiAgcHJvcGVydHkodGhpcywgJ2lzU2Vuc2l0aXZlJywgc2hhcGUuc2Vuc2l0aXZlID09PSB0cnVlIHx8IHNoYXBlLnByb3RvdHlwZSAmJiBzaGFwZS5wcm90b3R5cGUuc2Vuc2l0aXZlID09PSB0cnVlKTtcbiAgcHJvcGVydHkodGhpcywgJ2lzRXZlbnRTdHJlYW0nLCBCb29sZWFuKHNoYXBlLmV2ZW50c3RyZWFtKSwgZmFsc2UpO1xuICBwcm9wZXJ0eSh0aGlzLCAnaXNFdmVudCcsIEJvb2xlYW4oc2hhcGUuZXZlbnQpLCBmYWxzZSk7XG4gIHByb3BlcnR5KHRoaXMsICdpc0V2ZW50UGF5bG9hZCcsIEJvb2xlYW4oc2hhcGUuZXZlbnRwYXlsb2FkKSwgZmFsc2UpO1xuICBwcm9wZXJ0eSh0aGlzLCAnaXNFdmVudEhlYWRlcicsIEJvb2xlYW4oc2hhcGUuZXZlbnRoZWFkZXIpLCBmYWxzZSk7XG4gIHByb3BlcnR5KHRoaXMsICdpc1RpbWVzdGFtcEZvcm1hdFNldCcsIEJvb2xlYW4oc2hhcGUudGltZXN0YW1wRm9ybWF0KSB8fCBzaGFwZS5wcm90b3R5cGUgJiYgc2hhcGUucHJvdG90eXBlLmlzVGltZXN0YW1wRm9ybWF0U2V0ID09PSB0cnVlLCBmYWxzZSk7XG4gIHByb3BlcnR5KHRoaXMsICdlbmRwb2ludERpc2NvdmVyeUlkJywgQm9vbGVhbihzaGFwZS5lbmRwb2ludGRpc2NvdmVyeWlkKSwgZmFsc2UpO1xuICBwcm9wZXJ0eSh0aGlzLCAnaG9zdExhYmVsJywgQm9vbGVhbihzaGFwZS5ob3N0TGFiZWwpLCBmYWxzZSk7XG5cbiAgaWYgKG9wdGlvbnMuZG9jdW1lbnRhdGlvbikge1xuICAgIHByb3BlcnR5KHRoaXMsICdkb2N1bWVudGF0aW9uJywgc2hhcGUuZG9jdW1lbnRhdGlvbik7XG4gICAgcHJvcGVydHkodGhpcywgJ2RvY3VtZW50YXRpb25VcmwnLCBzaGFwZS5kb2N1bWVudGF0aW9uVXJsKTtcbiAgfVxuXG4gIGlmIChzaGFwZS54bWxBdHRyaWJ1dGUpIHtcbiAgICBwcm9wZXJ0eSh0aGlzLCAnaXNYbWxBdHRyaWJ1dGUnLCBzaGFwZS54bWxBdHRyaWJ1dGUgfHwgZmFsc2UpO1xuICB9XG5cbiAgLy8gdHlwZSBjb252ZXJzaW9uIGFuZCBwYXJzaW5nXG4gIHByb3BlcnR5KHRoaXMsICdkZWZhdWx0VmFsdWUnLCBudWxsKTtcbiAgdGhpcy50b1dpcmVGb3JtYXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuICB0aGlzLnRvVHlwZSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbn1cblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuU2hhcGUubm9ybWFsaXplZFR5cGVzID0ge1xuICBjaGFyYWN0ZXI6ICdzdHJpbmcnLFxuICBkb3VibGU6ICdmbG9hdCcsXG4gIGxvbmc6ICdpbnRlZ2VyJyxcbiAgc2hvcnQ6ICdpbnRlZ2VyJyxcbiAgYmlnaW50ZWdlcjogJ2ludGVnZXInLFxuICBiaWdkZWNpbWFsOiAnZmxvYXQnLFxuICBibG9iOiAnYmluYXJ5J1xufTtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuU2hhcGUudHlwZXMgPSB7XG4gICdzdHJ1Y3R1cmUnOiBTdHJ1Y3R1cmVTaGFwZSxcbiAgJ2xpc3QnOiBMaXN0U2hhcGUsXG4gICdtYXAnOiBNYXBTaGFwZSxcbiAgJ2Jvb2xlYW4nOiBCb29sZWFuU2hhcGUsXG4gICd0aW1lc3RhbXAnOiBUaW1lc3RhbXBTaGFwZSxcbiAgJ2Zsb2F0JzogRmxvYXRTaGFwZSxcbiAgJ2ludGVnZXInOiBJbnRlZ2VyU2hhcGUsXG4gICdzdHJpbmcnOiBTdHJpbmdTaGFwZSxcbiAgJ2Jhc2U2NCc6IEJhc2U2NFNoYXBlLFxuICAnYmluYXJ5JzogQmluYXJ5U2hhcGVcbn07XG5cblNoYXBlLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKHNoYXBlLCBvcHRpb25zKSB7XG4gIGlmIChzaGFwZS5zaGFwZSkge1xuICAgIHZhciByZWZTaGFwZSA9IG9wdGlvbnMuYXBpLnNoYXBlc1tzaGFwZS5zaGFwZV07XG4gICAgaWYgKCFyZWZTaGFwZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBzaGFwZSByZWZlcmVuY2U6ICcgKyBzaGFwZS5zaGFwZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlZlNoYXBlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5TaGFwZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoc2hhcGUsIG9wdGlvbnMsIG1lbWJlck5hbWUpIHtcbiAgaWYgKHNoYXBlLmlzU2hhcGUpIHJldHVybiBzaGFwZTtcblxuICB2YXIgcmVmU2hhcGUgPSBTaGFwZS5yZXNvbHZlKHNoYXBlLCBvcHRpb25zKTtcbiAgaWYgKHJlZlNoYXBlKSB7XG4gICAgdmFyIGZpbHRlcmVkS2V5cyA9IE9iamVjdC5rZXlzKHNoYXBlKTtcbiAgICBpZiAoIW9wdGlvbnMuZG9jdW1lbnRhdGlvbikge1xuICAgICAgZmlsdGVyZWRLZXlzID0gZmlsdGVyZWRLZXlzLmZpbHRlcihmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHJldHVybiAhbmFtZS5tYXRjaCgvZG9jdW1lbnRhdGlvbi8pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIGFuIGlubGluZSBzaGFwZSB3aXRoIGV4dHJhIG1lbWJlcnNcbiAgICB2YXIgSW5saW5lU2hhcGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlZlNoYXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgc2hhcGUsIG9wdGlvbnMsIG1lbWJlck5hbWUpO1xuICAgIH07XG4gICAgSW5saW5lU2hhcGUucHJvdG90eXBlID0gcmVmU2hhcGU7XG4gICAgcmV0dXJuIG5ldyBJbmxpbmVTaGFwZSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIHNldCB0eXBlIGlmIG5vdCBzZXRcbiAgICBpZiAoIXNoYXBlLnR5cGUpIHtcbiAgICAgIGlmIChzaGFwZS5tZW1iZXJzKSBzaGFwZS50eXBlID0gJ3N0cnVjdHVyZSc7XG4gICAgICBlbHNlIGlmIChzaGFwZS5tZW1iZXIpIHNoYXBlLnR5cGUgPSAnbGlzdCc7XG4gICAgICBlbHNlIGlmIChzaGFwZS5rZXkpIHNoYXBlLnR5cGUgPSAnbWFwJztcbiAgICAgIGVsc2Ugc2hhcGUudHlwZSA9ICdzdHJpbmcnO1xuICAgIH1cblxuICAgIC8vIG5vcm1hbGl6ZSB0eXBlc1xuICAgIHZhciBvcmlnVHlwZSA9IHNoYXBlLnR5cGU7XG4gICAgaWYgKFNoYXBlLm5vcm1hbGl6ZWRUeXBlc1tzaGFwZS50eXBlXSkge1xuICAgICAgc2hhcGUudHlwZSA9IFNoYXBlLm5vcm1hbGl6ZWRUeXBlc1tzaGFwZS50eXBlXTtcbiAgICB9XG5cbiAgICBpZiAoU2hhcGUudHlwZXNbc2hhcGUudHlwZV0pIHtcbiAgICAgIHJldHVybiBuZXcgU2hhcGUudHlwZXNbc2hhcGUudHlwZV0oc2hhcGUsIG9wdGlvbnMsIG1lbWJlck5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VucmVjb2duaXplZCBzaGFwZSB0eXBlOiAnICsgb3JpZ1R5cGUpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gQ29tcG9zaXRlU2hhcGUoc2hhcGUpIHtcbiAgU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgcHJvcGVydHkodGhpcywgJ2lzQ29tcG9zaXRlJywgdHJ1ZSk7XG5cbiAgaWYgKHNoYXBlLmZsYXR0ZW5lZCkge1xuICAgIHByb3BlcnR5KHRoaXMsICdmbGF0dGVuZWQnLCBzaGFwZS5mbGF0dGVuZWQgfHwgZmFsc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIFN0cnVjdHVyZVNoYXBlKHNoYXBlLCBvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHJlcXVpcmVkTWFwID0gbnVsbCwgZmlyc3RJbml0ID0gIXRoaXMuaXNTaGFwZTtcblxuICBDb21wb3NpdGVTaGFwZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gIGlmIChmaXJzdEluaXQpIHtcbiAgICBwcm9wZXJ0eSh0aGlzLCAnZGVmYXVsdFZhbHVlJywgZnVuY3Rpb24oKSB7IHJldHVybiB7fTsgfSk7XG4gICAgcHJvcGVydHkodGhpcywgJ21lbWJlcnMnLCB7fSk7XG4gICAgcHJvcGVydHkodGhpcywgJ21lbWJlck5hbWVzJywgW10pO1xuICAgIHByb3BlcnR5KHRoaXMsICdyZXF1aXJlZCcsIFtdKTtcbiAgICBwcm9wZXJ0eSh0aGlzLCAnaXNSZXF1aXJlZCcsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH0pO1xuICB9XG5cbiAgaWYgKHNoYXBlLm1lbWJlcnMpIHtcbiAgICBwcm9wZXJ0eSh0aGlzLCAnbWVtYmVycycsIG5ldyBDb2xsZWN0aW9uKHNoYXBlLm1lbWJlcnMsIG9wdGlvbnMsIGZ1bmN0aW9uKG5hbWUsIG1lbWJlcikge1xuICAgICAgcmV0dXJuIFNoYXBlLmNyZWF0ZShtZW1iZXIsIG9wdGlvbnMsIG5hbWUpO1xuICAgIH0pKTtcbiAgICBtZW1vaXplZFByb3BlcnR5KHRoaXMsICdtZW1iZXJOYW1lcycsIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNoYXBlLnhtbE9yZGVyIHx8IE9iamVjdC5rZXlzKHNoYXBlLm1lbWJlcnMpO1xuICAgIH0pO1xuXG4gICAgaWYgKHNoYXBlLmV2ZW50KSB7XG4gICAgICBtZW1vaXplZFByb3BlcnR5KHRoaXMsICdldmVudFBheWxvYWRNZW1iZXJOYW1lJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtZW1iZXJzID0gc2VsZi5tZW1iZXJzO1xuICAgICAgICB2YXIgbWVtYmVyTmFtZXMgPSBzZWxmLm1lbWJlck5hbWVzO1xuICAgICAgICAvLyBpdGVyYXRlIG92ZXIgbWVtYmVycyB0byBmaW5kIG9uZXMgdGhhdCBhcmUgZXZlbnQgcGF5bG9hZHNcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlMZW4gPSBtZW1iZXJOYW1lcy5sZW5ndGg7IGkgPCBpTGVuOyBpKyspIHtcbiAgICAgICAgICBpZiAobWVtYmVyc1ttZW1iZXJOYW1lc1tpXV0uaXNFdmVudFBheWxvYWQpIHtcbiAgICAgICAgICAgIHJldHVybiBtZW1iZXJOYW1lc1tpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBtZW1vaXplZFByb3BlcnR5KHRoaXMsICdldmVudEhlYWRlck1lbWJlck5hbWVzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtZW1iZXJzID0gc2VsZi5tZW1iZXJzO1xuICAgICAgICB2YXIgbWVtYmVyTmFtZXMgPSBzZWxmLm1lbWJlck5hbWVzO1xuICAgICAgICB2YXIgZXZlbnRIZWFkZXJNZW1iZXJOYW1lcyA9IFtdO1xuICAgICAgICAvLyBpdGVyYXRlIG92ZXIgbWVtYmVycyB0byBmaW5kIG9uZXMgdGhhdCBhcmUgZXZlbnQgaGVhZGVyc1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaUxlbiA9IG1lbWJlck5hbWVzLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgICAgIGlmIChtZW1iZXJzW21lbWJlck5hbWVzW2ldXS5pc0V2ZW50SGVhZGVyKSB7XG4gICAgICAgICAgICBldmVudEhlYWRlck1lbWJlck5hbWVzLnB1c2gobWVtYmVyTmFtZXNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnRIZWFkZXJNZW1iZXJOYW1lcztcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzaGFwZS5yZXF1aXJlZCkge1xuICAgIHByb3BlcnR5KHRoaXMsICdyZXF1aXJlZCcsIHNoYXBlLnJlcXVpcmVkKTtcbiAgICBwcm9wZXJ0eSh0aGlzLCAnaXNSZXF1aXJlZCcsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIGlmICghcmVxdWlyZWRNYXApIHtcbiAgICAgICAgcmVxdWlyZWRNYXAgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaGFwZS5yZXF1aXJlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHJlcXVpcmVkTWFwW3NoYXBlLnJlcXVpcmVkW2ldXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlcXVpcmVkTWFwW25hbWVdO1xuICAgIH0sIGZhbHNlLCB0cnVlKTtcbiAgfVxuXG4gIHByb3BlcnR5KHRoaXMsICdyZXN1bHRXcmFwcGVyJywgc2hhcGUucmVzdWx0V3JhcHBlciB8fCBudWxsKTtcblxuICBpZiAoc2hhcGUucGF5bG9hZCkge1xuICAgIHByb3BlcnR5KHRoaXMsICdwYXlsb2FkJywgc2hhcGUucGF5bG9hZCk7XG4gIH1cblxuICBpZiAodHlwZW9mIHNoYXBlLnhtbE5hbWVzcGFjZSA9PT0gJ3N0cmluZycpIHtcbiAgICBwcm9wZXJ0eSh0aGlzLCAneG1sTmFtZXNwYWNlVXJpJywgc2hhcGUueG1sTmFtZXNwYWNlKTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2hhcGUueG1sTmFtZXNwYWNlID09PSAnb2JqZWN0Jykge1xuICAgIHByb3BlcnR5KHRoaXMsICd4bWxOYW1lc3BhY2VQcmVmaXgnLCBzaGFwZS54bWxOYW1lc3BhY2UucHJlZml4KTtcbiAgICBwcm9wZXJ0eSh0aGlzLCAneG1sTmFtZXNwYWNlVXJpJywgc2hhcGUueG1sTmFtZXNwYWNlLnVyaSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gTGlzdFNoYXBlKHNoYXBlLCBvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcywgZmlyc3RJbml0ID0gIXRoaXMuaXNTaGFwZTtcbiAgQ29tcG9zaXRlU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICBpZiAoZmlyc3RJbml0KSB7XG4gICAgcHJvcGVydHkodGhpcywgJ2RlZmF1bHRWYWx1ZScsIGZ1bmN0aW9uKCkgeyByZXR1cm4gW107IH0pO1xuICB9XG5cbiAgaWYgKHNoYXBlLm1lbWJlcikge1xuICAgIG1lbW9pemVkUHJvcGVydHkodGhpcywgJ21lbWJlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFNoYXBlLmNyZWF0ZShzaGFwZS5tZW1iZXIsIG9wdGlvbnMpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHRoaXMuZmxhdHRlbmVkKSB7XG4gICAgdmFyIG9sZE5hbWUgPSB0aGlzLm5hbWU7XG4gICAgbWVtb2l6ZWRQcm9wZXJ0eSh0aGlzLCAnbmFtZScsIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNlbGYubWVtYmVyLm5hbWUgfHwgb2xkTmFtZTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBNYXBTaGFwZShzaGFwZSwgb3B0aW9ucykge1xuICB2YXIgZmlyc3RJbml0ID0gIXRoaXMuaXNTaGFwZTtcbiAgQ29tcG9zaXRlU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICBpZiAoZmlyc3RJbml0KSB7XG4gICAgcHJvcGVydHkodGhpcywgJ2RlZmF1bHRWYWx1ZScsIGZ1bmN0aW9uKCkgeyByZXR1cm4ge307IH0pO1xuICAgIHByb3BlcnR5KHRoaXMsICdrZXknLCBTaGFwZS5jcmVhdGUoe3R5cGU6ICdzdHJpbmcnfSwgb3B0aW9ucykpO1xuICAgIHByb3BlcnR5KHRoaXMsICd2YWx1ZScsIFNoYXBlLmNyZWF0ZSh7dHlwZTogJ3N0cmluZyd9LCBvcHRpb25zKSk7XG4gIH1cblxuICBpZiAoc2hhcGUua2V5KSB7XG4gICAgbWVtb2l6ZWRQcm9wZXJ0eSh0aGlzLCAna2V5JywgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gU2hhcGUuY3JlYXRlKHNoYXBlLmtleSwgb3B0aW9ucyk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHNoYXBlLnZhbHVlKSB7XG4gICAgbWVtb2l6ZWRQcm9wZXJ0eSh0aGlzLCAndmFsdWUnLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBTaGFwZS5jcmVhdGUoc2hhcGUudmFsdWUsIG9wdGlvbnMpO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIFRpbWVzdGFtcFNoYXBlKHNoYXBlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICBpZiAoc2hhcGUudGltZXN0YW1wRm9ybWF0KSB7XG4gICAgcHJvcGVydHkodGhpcywgJ3RpbWVzdGFtcEZvcm1hdCcsIHNoYXBlLnRpbWVzdGFtcEZvcm1hdCk7XG4gIH0gZWxzZSBpZiAoc2VsZi5pc1RpbWVzdGFtcEZvcm1hdFNldCAmJiB0aGlzLnRpbWVzdGFtcEZvcm1hdCkge1xuICAgIHByb3BlcnR5KHRoaXMsICd0aW1lc3RhbXBGb3JtYXQnLCB0aGlzLnRpbWVzdGFtcEZvcm1hdCk7XG4gIH0gZWxzZSBpZiAodGhpcy5sb2NhdGlvbiA9PT0gJ2hlYWRlcicpIHtcbiAgICBwcm9wZXJ0eSh0aGlzLCAndGltZXN0YW1wRm9ybWF0JywgJ3JmYzgyMicpO1xuICB9IGVsc2UgaWYgKHRoaXMubG9jYXRpb24gPT09ICdxdWVyeXN0cmluZycpIHtcbiAgICBwcm9wZXJ0eSh0aGlzLCAndGltZXN0YW1wRm9ybWF0JywgJ2lzbzg2MDEnKTtcbiAgfSBlbHNlIGlmICh0aGlzLmFwaSkge1xuICAgIHN3aXRjaCAodGhpcy5hcGkucHJvdG9jb2wpIHtcbiAgICAgIGNhc2UgJ2pzb24nOlxuICAgICAgY2FzZSAncmVzdC1qc29uJzpcbiAgICAgICAgcHJvcGVydHkodGhpcywgJ3RpbWVzdGFtcEZvcm1hdCcsICd1bml4VGltZXN0YW1wJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmVzdC14bWwnOlxuICAgICAgY2FzZSAncXVlcnknOlxuICAgICAgY2FzZSAnZWMyJzpcbiAgICAgICAgcHJvcGVydHkodGhpcywgJ3RpbWVzdGFtcEZvcm1hdCcsICdpc284NjAxJyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMudG9UeXBlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZS50b1VUQ1N0cmluZyA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgP1xuICAgICAgICAgICB1dGlsLmRhdGUucGFyc2VUaW1lc3RhbXAodmFsdWUpIDogbnVsbDtcbiAgfTtcblxuICB0aGlzLnRvV2lyZUZvcm1hdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHV0aWwuZGF0ZS5mb3JtYXQodmFsdWUsIHNlbGYudGltZXN0YW1wRm9ybWF0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gU3RyaW5nU2hhcGUoKSB7XG4gIFNoYXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgdmFyIG51bGxMZXNzUHJvdG9jb2xzID0gWydyZXN0LXhtbCcsICdxdWVyeScsICdlYzInXTtcbiAgdGhpcy50b1R5cGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhbHVlID0gdGhpcy5hcGkgJiYgbnVsbExlc3NQcm90b2NvbHMuaW5kZXhPZih0aGlzLmFwaS5wcm90b2NvbCkgPiAtMSA/XG4gICAgICB2YWx1ZSB8fCAnJyA6IHZhbHVlO1xuICAgIGlmICh0aGlzLmlzSnNvblZhbHVlKSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS50b1N0cmluZyA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICB2YWx1ZS50b1N0cmluZygpIDogdmFsdWU7XG4gIH07XG5cbiAgdGhpcy50b1dpcmVGb3JtYXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmlzSnNvblZhbHVlID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIEZsb2F0U2hhcGUoKSB7XG4gIFNoYXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgdGhpcy50b1R5cGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIH07XG4gIHRoaXMudG9XaXJlRm9ybWF0ID0gdGhpcy50b1R5cGU7XG59XG5cbmZ1bmN0aW9uIEludGVnZXJTaGFwZSgpIHtcbiAgU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICB0aGlzLnRvVHlwZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICB9O1xuICB0aGlzLnRvV2lyZUZvcm1hdCA9IHRoaXMudG9UeXBlO1xufVxuXG5mdW5jdGlvbiBCaW5hcnlTaGFwZSgpIHtcbiAgU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgdGhpcy50b1R5cGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBidWYgPSB1dGlsLmJhc2U2NC5kZWNvZGUodmFsdWUpO1xuICAgIGlmICh0aGlzLmlzU2Vuc2l0aXZlICYmIHV0aWwuaXNOb2RlKCkgJiYgdHlwZW9mIHV0aWwuQnVmZmVyLmFsbG9jID09PSAnZnVuY3Rpb24nKSB7XG4gIC8qIE5vZGUuanMgY2FuIGNyZWF0ZSBhIEJ1ZmZlciB0aGF0IGlzIG5vdCBpc29sYXRlZC5cbiAgICogaS5lLiBidWYuYnl0ZUxlbmd0aCAhPT0gYnVmLmJ1ZmZlci5ieXRlTGVuZ3RoXG4gICAqIFRoaXMgbWVhbnMgdGhhdCB0aGUgc2Vuc2l0aXZlIGRhdGEgaXMgYWNjZXNzaWJsZSB0byBhbnlvbmUgd2l0aCBhY2Nlc3MgdG8gYnVmLmJ1ZmZlci5cbiAgICogSWYgdGhpcyBpcyB0aGUgbm9kZSBzaGFyZWQgQnVmZmVyLCB0aGVuIG90aGVyIGNvZGUgd2l0aGluIHRoaXMgcHJvY2VzcyBfY291bGRfIGZpbmQgdGhpcyBzZWNyZXQuXG4gICAqIENvcHkgc2Vuc2l0aXZlIGRhdGEgdG8gYW4gaXNvbGF0ZWQgQnVmZmVyIGFuZCB6ZXJvIHRoZSBzZW5zaXRpdmUgZGF0YS5cbiAgICogV2hpbGUgdGhpcyBpcyBzYWZlIHRvIGRvIGhlcmUsIGNvcHlpbmcgdGhpcyBjb2RlIHNvbWV3aGVyZSBlbHNlIG1heSBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICovXG4gICAgICB2YXIgc2VjdXJlQnVmID0gdXRpbC5CdWZmZXIuYWxsb2MoYnVmLmxlbmd0aCwgYnVmKTtcbiAgICAgIGJ1Zi5maWxsKDApO1xuICAgICAgYnVmID0gc2VjdXJlQnVmO1xuICAgIH1cbiAgICByZXR1cm4gYnVmO1xuICB9O1xuICB0aGlzLnRvV2lyZUZvcm1hdCA9IHV0aWwuYmFzZTY0LmVuY29kZTtcbn1cblxuZnVuY3Rpb24gQmFzZTY0U2hhcGUoKSB7XG4gIEJpbmFyeVNoYXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIEJvb2xlYW5TaGFwZSgpIHtcbiAgU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICB0aGlzLnRvVHlwZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gdmFsdWU7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gJ3RydWUnO1xuICB9O1xufVxuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5TaGFwZS5zaGFwZXMgPSB7XG4gIFN0cnVjdHVyZVNoYXBlOiBTdHJ1Y3R1cmVTaGFwZSxcbiAgTGlzdFNoYXBlOiBMaXN0U2hhcGUsXG4gIE1hcFNoYXBlOiBNYXBTaGFwZSxcbiAgU3RyaW5nU2hhcGU6IFN0cmluZ1NoYXBlLFxuICBCb29sZWFuU2hhcGU6IEJvb2xlYW5TaGFwZSxcbiAgQmFzZTY0U2hhcGU6IEJhc2U2NFNoYXBlXG59O1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IFNoYXBlO1xuXG59LHtcIi4uL3V0aWxcIjo3MixcIi4vY29sbGVjdGlvblwiOjQwfV0sNDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIEFXUyA9IHJlcXVpcmUoJy4vY29yZScpO1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5BV1MuUGFyYW1WYWxpZGF0b3IgPSBBV1MudXRpbC5pbmhlcml0KHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyB2YWxpZGF0b3Igb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0gdmFsaWRhdGlvbiBbQm9vbGVhbnxtYXBdIHdoZXRoZXIgaW5wdXQgcGFyYW1ldGVycyBzaG91bGQgYmVcbiAgICogICAgIHZhbGlkYXRlZCBhZ2FpbnN0IHRoZSBvcGVyYXRpb24gZGVzY3JpcHRpb24gYmVmb3JlIHNlbmRpbmcgdGhlXG4gICAqICAgICByZXF1ZXN0LiBQYXNzIGEgbWFwIHRvIGVuYWJsZSBhbnkgb2YgdGhlIGZvbGxvd2luZyBzcGVjaWZpY1xuICAgKiAgICAgdmFsaWRhdGlvbiBmZWF0dXJlczpcbiAgICpcbiAgICogICAgICogKiptaW4qKiBbQm9vbGVhbl0gJm1kYXNoOyBWYWxpZGF0ZXMgdGhhdCBhIHZhbHVlIG1lZXRzIHRoZSBtaW5cbiAgICogICAgICAgY29uc3RyYWludC4gVGhpcyBpcyBlbmFibGVkIGJ5IGRlZmF1bHQgd2hlbiBwYXJhbVZhbGlkYXRpb24gaXMgc2V0XG4gICAqICAgICAgIHRvIGB0cnVlYC5cbiAgICogICAgICogKiptYXgqKiBbQm9vbGVhbl0gJm1kYXNoOyBWYWxpZGF0ZXMgdGhhdCBhIHZhbHVlIG1lZXRzIHRoZSBtYXhcbiAgICogICAgICAgY29uc3RyYWludC5cbiAgICogICAgICogKipwYXR0ZXJuKiogW0Jvb2xlYW5dICZtZGFzaDsgVmFsaWRhdGVzIHRoYXQgYSBzdHJpbmcgdmFsdWUgbWF0Y2hlcyBhXG4gICAqICAgICAgIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAgICogICAgICogKiplbnVtKiogW0Jvb2xlYW5dICZtZGFzaDsgVmFsaWRhdGVzIHRoYXQgYSBzdHJpbmcgdmFsdWUgbWF0Y2hlcyBvbmVcbiAgICogICAgICAgb2YgdGhlIGFsbG93YWJsZSBlbnVtIHZhbHVlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBQYXJhbVZhbGlkYXRvcih2YWxpZGF0aW9uKSB7XG4gICAgaWYgKHZhbGlkYXRpb24gPT09IHRydWUgfHwgdmFsaWRhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0aW9uID0geydtaW4nOiB0cnVlfTtcbiAgICB9XG4gICAgdGhpcy52YWxpZGF0aW9uID0gdmFsaWRhdGlvbjtcbiAgfSxcblxuICB2YWxpZGF0ZTogZnVuY3Rpb24gdmFsaWRhdGUoc2hhcGUsIHBhcmFtcywgY29udGV4dCkge1xuICAgIHRoaXMuZXJyb3JzID0gW107XG4gICAgdGhpcy52YWxpZGF0ZU1lbWJlcihzaGFwZSwgcGFyYW1zIHx8IHt9LCBjb250ZXh0IHx8ICdwYXJhbXMnKTtcblxuICAgIGlmICh0aGlzLmVycm9ycy5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgbXNnID0gdGhpcy5lcnJvcnMuam9pbignXFxuKiAnKTtcbiAgICAgIG1zZyA9ICdUaGVyZSB3ZXJlICcgKyB0aGlzLmVycm9ycy5sZW5ndGggK1xuICAgICAgICAnIHZhbGlkYXRpb24gZXJyb3JzOlxcbiogJyArIG1zZztcbiAgICAgIHRocm93IEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcihtc2cpLFxuICAgICAgICB7Y29kZTogJ011bHRpcGxlVmFsaWRhdGlvbkVycm9ycycsIGVycm9yczogdGhpcy5lcnJvcnN9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZXJyb3JzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhyb3cgdGhpcy5lcnJvcnNbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcblxuICBmYWlsOiBmdW5jdGlvbiBmYWlsKGNvZGUsIG1lc3NhZ2UpIHtcbiAgICB0aGlzLmVycm9ycy5wdXNoKEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcihtZXNzYWdlKSwge2NvZGU6IGNvZGV9KSk7XG4gIH0sXG5cbiAgdmFsaWRhdGVTdHJ1Y3R1cmU6IGZ1bmN0aW9uIHZhbGlkYXRlU3RydWN0dXJlKHNoYXBlLCBwYXJhbXMsIGNvbnRleHQpIHtcbiAgICB0aGlzLnZhbGlkYXRlVHlwZShwYXJhbXMsIGNvbnRleHQsIFsnb2JqZWN0J10sICdzdHJ1Y3R1cmUnKTtcblxuICAgIHZhciBwYXJhbU5hbWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IHNoYXBlLnJlcXVpcmVkICYmIGkgPCBzaGFwZS5yZXF1aXJlZC5sZW5ndGg7IGkrKykge1xuICAgICAgcGFyYW1OYW1lID0gc2hhcGUucmVxdWlyZWRbaV07XG4gICAgICB2YXIgdmFsdWUgPSBwYXJhbXNbcGFyYW1OYW1lXTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuZmFpbCgnTWlzc2luZ1JlcXVpcmVkUGFyYW1ldGVyJyxcbiAgICAgICAgICAnTWlzc2luZyByZXF1aXJlZCBrZXkgXFwnJyArIHBhcmFtTmFtZSArICdcXCcgaW4gJyArIGNvbnRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHZhbGlkYXRlIGhhc2ggbWVtYmVyc1xuICAgIGZvciAocGFyYW1OYW1lIGluIHBhcmFtcykge1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyYW1zLCBwYXJhbU5hbWUpKSBjb250aW51ZTtcblxuICAgICAgdmFyIHBhcmFtVmFsdWUgPSBwYXJhbXNbcGFyYW1OYW1lXSxcbiAgICAgICAgICBtZW1iZXJTaGFwZSA9IHNoYXBlLm1lbWJlcnNbcGFyYW1OYW1lXTtcblxuICAgICAgaWYgKG1lbWJlclNoYXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIG1lbWJlckNvbnRleHQgPSBbY29udGV4dCwgcGFyYW1OYW1lXS5qb2luKCcuJyk7XG4gICAgICAgIHRoaXMudmFsaWRhdGVNZW1iZXIobWVtYmVyU2hhcGUsIHBhcmFtVmFsdWUsIG1lbWJlckNvbnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5mYWlsKCdVbmV4cGVjdGVkUGFyYW1ldGVyJyxcbiAgICAgICAgICAnVW5leHBlY3RlZCBrZXkgXFwnJyArIHBhcmFtTmFtZSArICdcXCcgZm91bmQgaW4gJyArIGNvbnRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuXG4gIHZhbGlkYXRlTWVtYmVyOiBmdW5jdGlvbiB2YWxpZGF0ZU1lbWJlcihzaGFwZSwgcGFyYW0sIGNvbnRleHQpIHtcbiAgICBzd2l0Y2ggKHNoYXBlLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3N0cnVjdHVyZSc6XG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlU3RydWN0dXJlKHNoYXBlLCBwYXJhbSwgY29udGV4dCk7XG4gICAgICBjYXNlICdsaXN0JzpcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVMaXN0KHNoYXBlLCBwYXJhbSwgY29udGV4dCk7XG4gICAgICBjYXNlICdtYXAnOlxuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZU1hcChzaGFwZSwgcGFyYW0sIGNvbnRleHQpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVTY2FsYXIoc2hhcGUsIHBhcmFtLCBjb250ZXh0KTtcbiAgICB9XG4gIH0sXG5cbiAgdmFsaWRhdGVMaXN0OiBmdW5jdGlvbiB2YWxpZGF0ZUxpc3Qoc2hhcGUsIHBhcmFtcywgY29udGV4dCkge1xuICAgIGlmICh0aGlzLnZhbGlkYXRlVHlwZShwYXJhbXMsIGNvbnRleHQsIFtBcnJheV0pKSB7XG4gICAgICB0aGlzLnZhbGlkYXRlUmFuZ2Uoc2hhcGUsIHBhcmFtcy5sZW5ndGgsIGNvbnRleHQsICdsaXN0IG1lbWJlciBjb3VudCcpO1xuICAgICAgLy8gdmFsaWRhdGUgYXJyYXkgbWVtYmVyc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZU1lbWJlcihzaGFwZS5tZW1iZXIsIHBhcmFtc1tpXSwgY29udGV4dCArICdbJyArIGkgKyAnXScpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB2YWxpZGF0ZU1hcDogZnVuY3Rpb24gdmFsaWRhdGVNYXAoc2hhcGUsIHBhcmFtcywgY29udGV4dCkge1xuICAgIGlmICh0aGlzLnZhbGlkYXRlVHlwZShwYXJhbXMsIGNvbnRleHQsIFsnb2JqZWN0J10sICdtYXAnKSkge1xuICAgICAgLy8gQnVpbGQgdXAgYSBjb3VudCBvZiBtYXAgbWVtYmVycyB0byB2YWxpZGF0ZSByYW5nZSB0cmFpdHMuXG4gICAgICB2YXIgbWFwQ291bnQgPSAwO1xuICAgICAgZm9yICh2YXIgcGFyYW0gaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmFtcywgcGFyYW0pKSBjb250aW51ZTtcbiAgICAgICAgLy8gVmFsaWRhdGUgYW55IG1hcCBrZXkgdHJhaXQgY29uc3RyYWludHNcbiAgICAgICAgdGhpcy52YWxpZGF0ZU1lbWJlcihzaGFwZS5rZXksIHBhcmFtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgKyAnW2tleT1cXCcnICsgcGFyYW0gKyAnXFwnXScpO1xuICAgICAgICB0aGlzLnZhbGlkYXRlTWVtYmVyKHNoYXBlLnZhbHVlLCBwYXJhbXNbcGFyYW1dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgKyAnW1xcJycgKyBwYXJhbSArICdcXCddJyk7XG4gICAgICAgIG1hcENvdW50Kys7XG4gICAgICB9XG4gICAgICB0aGlzLnZhbGlkYXRlUmFuZ2Uoc2hhcGUsIG1hcENvdW50LCBjb250ZXh0LCAnbWFwIG1lbWJlciBjb3VudCcpO1xuICAgIH1cbiAgfSxcblxuICB2YWxpZGF0ZVNjYWxhcjogZnVuY3Rpb24gdmFsaWRhdGVTY2FsYXIoc2hhcGUsIHZhbHVlLCBjb250ZXh0KSB7XG4gICAgc3dpdGNoIChzaGFwZS50eXBlKSB7XG4gICAgICBjYXNlIG51bGw6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlU3RyaW5nKHNoYXBlLCB2YWx1ZSwgY29udGV4dCk7XG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVQYXlsb2FkKHZhbHVlLCBjb250ZXh0KTtcbiAgICAgIGNhc2UgJ2ludGVnZXInOlxuICAgICAgY2FzZSAnZmxvYXQnOlxuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZU51bWJlcihzaGFwZSwgdmFsdWUsIGNvbnRleHQpO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlVHlwZSh2YWx1ZSwgY29udGV4dCwgWydib29sZWFuJ10pO1xuICAgICAgY2FzZSAndGltZXN0YW1wJzpcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVUeXBlKHZhbHVlLCBjb250ZXh0LCBbRGF0ZSxcbiAgICAgICAgICAvXlxcZHs0fS1cXGR7Mn0tXFxkezJ9VFxcZHsyfTpcXGR7Mn06XFxkezJ9KFxcLlxcZCspP1okLywgJ251bWJlciddLFxuICAgICAgICAgICdEYXRlIG9iamVjdCwgSVNPLTg2MDEgc3RyaW5nLCBvciBhIFVOSVggdGltZXN0YW1wJyk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdGhpcy5mYWlsKCdVbmtvd25UeXBlJywgJ1VuaGFuZGxlZCB0eXBlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlLnR5cGUgKyAnIGZvciAnICsgY29udGV4dCk7XG4gICAgfVxuICB9LFxuXG4gIHZhbGlkYXRlU3RyaW5nOiBmdW5jdGlvbiB2YWxpZGF0ZVN0cmluZyhzaGFwZSwgdmFsdWUsIGNvbnRleHQpIHtcbiAgICB2YXIgdmFsaWRUeXBlcyA9IFsnc3RyaW5nJ107XG4gICAgaWYgKHNoYXBlLmlzSnNvblZhbHVlKSB7XG4gICAgICB2YWxpZFR5cGVzID0gdmFsaWRUeXBlcy5jb25jYXQoWydudW1iZXInLCAnb2JqZWN0JywgJ2Jvb2xlYW4nXSk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB0aGlzLnZhbGlkYXRlVHlwZSh2YWx1ZSwgY29udGV4dCwgdmFsaWRUeXBlcykpIHtcbiAgICAgIHRoaXMudmFsaWRhdGVFbnVtKHNoYXBlLCB2YWx1ZSwgY29udGV4dCk7XG4gICAgICB0aGlzLnZhbGlkYXRlUmFuZ2Uoc2hhcGUsIHZhbHVlLmxlbmd0aCwgY29udGV4dCwgJ3N0cmluZyBsZW5ndGgnKTtcbiAgICAgIHRoaXMudmFsaWRhdGVQYXR0ZXJuKHNoYXBlLCB2YWx1ZSwgY29udGV4dCk7XG4gICAgICB0aGlzLnZhbGlkYXRlVXJpKHNoYXBlLCB2YWx1ZSwgY29udGV4dCk7XG4gICAgfVxuICB9LFxuXG4gIHZhbGlkYXRlVXJpOiBmdW5jdGlvbiB2YWxpZGF0ZVVyaShzaGFwZSwgdmFsdWUsIGNvbnRleHQpIHtcbiAgICBpZiAoc2hhcGVbJ2xvY2F0aW9uJ10gPT09ICd1cmknKSB7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuZmFpbCgnVXJpUGFyYW1ldGVyRXJyb3InLCAnRXhwZWN0ZWQgdXJpIHBhcmFtZXRlciB0byBoYXZlIGxlbmd0aCA+PSAxLCdcbiAgICAgICAgICArICcgYnV0IGZvdW5kIFwiJyArIHZhbHVlICsnXCIgZm9yICcgKyBjb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgdmFsaWRhdGVQYXR0ZXJuOiBmdW5jdGlvbiB2YWxpZGF0ZVBhdHRlcm4oc2hhcGUsIHZhbHVlLCBjb250ZXh0KSB7XG4gICAgaWYgKHRoaXMudmFsaWRhdGlvblsncGF0dGVybiddICYmIHNoYXBlWydwYXR0ZXJuJ10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCEobmV3IFJlZ0V4cChzaGFwZVsncGF0dGVybiddKSkudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5mYWlsKCdQYXR0ZXJuTWF0Y2hFcnJvcicsICdQcm92aWRlZCB2YWx1ZSBcIicgKyB2YWx1ZSArICdcIiAnXG4gICAgICAgICAgKyAnZG9lcyBub3QgbWF0Y2ggcmVnZXggcGF0dGVybiAvJyArIHNoYXBlWydwYXR0ZXJuJ10gKyAnLyBmb3IgJ1xuICAgICAgICAgICsgY29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHZhbGlkYXRlUmFuZ2U6IGZ1bmN0aW9uIHZhbGlkYXRlUmFuZ2Uoc2hhcGUsIHZhbHVlLCBjb250ZXh0LCBkZXNjcmlwdG9yKSB7XG4gICAgaWYgKHRoaXMudmFsaWRhdGlvblsnbWluJ10pIHtcbiAgICAgIGlmIChzaGFwZVsnbWluJ10gIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA8IHNoYXBlWydtaW4nXSkge1xuICAgICAgICB0aGlzLmZhaWwoJ01pblJhbmdlRXJyb3InLCAnRXhwZWN0ZWQgJyArIGRlc2NyaXB0b3IgKyAnID49ICdcbiAgICAgICAgICArIHNoYXBlWydtaW4nXSArICcsIGJ1dCBmb3VuZCAnICsgdmFsdWUgKyAnIGZvciAnICsgY29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLnZhbGlkYXRpb25bJ21heCddKSB7XG4gICAgICBpZiAoc2hhcGVbJ21heCddICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgPiBzaGFwZVsnbWF4J10pIHtcbiAgICAgICAgdGhpcy5mYWlsKCdNYXhSYW5nZUVycm9yJywgJ0V4cGVjdGVkICcgKyBkZXNjcmlwdG9yICsgJyA8PSAnXG4gICAgICAgICAgKyBzaGFwZVsnbWF4J10gKyAnLCBidXQgZm91bmQgJyArIHZhbHVlICsgJyBmb3IgJyArIGNvbnRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB2YWxpZGF0ZUVudW06IGZ1bmN0aW9uIHZhbGlkYXRlUmFuZ2Uoc2hhcGUsIHZhbHVlLCBjb250ZXh0KSB7XG4gICAgaWYgKHRoaXMudmFsaWRhdGlvblsnZW51bSddICYmIHNoYXBlWydlbnVtJ10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gRmFpbCBpZiB0aGUgc3RyaW5nIHZhbHVlIGlzIG5vdCBwcmVzZW50IGluIHRoZSBlbnVtIGxpc3RcbiAgICAgIGlmIChzaGFwZVsnZW51bSddLmluZGV4T2YodmFsdWUpID09PSAtMSkge1xuICAgICAgICB0aGlzLmZhaWwoJ0VudW1FcnJvcicsICdGb3VuZCBzdHJpbmcgdmFsdWUgb2YgJyArIHZhbHVlICsgJywgYnV0ICdcbiAgICAgICAgICArICdleHBlY3RlZCAnICsgc2hhcGVbJ2VudW0nXS5qb2luKCd8JykgKyAnIGZvciAnICsgY29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHZhbGlkYXRlVHlwZTogZnVuY3Rpb24gdmFsaWRhdGVUeXBlKHZhbHVlLCBjb250ZXh0LCBhY2NlcHRlZFR5cGVzLCB0eXBlKSB7XG4gICAgLy8gV2Ugd2lsbCBub3QgbG9nIGFuIGVycm9yIGZvciBudWxsIG9yIHVuZGVmaW5lZCwgYnV0IHdlIHdpbGwgcmV0dXJuXG4gICAgLy8gZmFsc2Ugc28gdGhhdCBjYWxsZXJzIGtub3cgdGhhdCB0aGUgZXhwZWN0ZWQgdHlwZSB3YXMgbm90IHN0cmljdGx5IG1ldC5cbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIGZvdW5kSW52YWxpZFR5cGUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFjY2VwdGVkVHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0eXBlb2YgYWNjZXB0ZWRUeXBlc1tpXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gYWNjZXB0ZWRUeXBlc1tpXSkgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGFjY2VwdGVkVHlwZXNbaV0gaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgaWYgKCh2YWx1ZSB8fCAnJykudG9TdHJpbmcoKS5tYXRjaChhY2NlcHRlZFR5cGVzW2ldKSkgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBhY2NlcHRlZFR5cGVzW2ldKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKEFXUy51dGlsLmlzVHlwZSh2YWx1ZSwgYWNjZXB0ZWRUeXBlc1tpXSkpIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoIXR5cGUgJiYgIWZvdW5kSW52YWxpZFR5cGUpIGFjY2VwdGVkVHlwZXMgPSBhY2NlcHRlZFR5cGVzLnNsaWNlKCk7XG4gICAgICAgIGFjY2VwdGVkVHlwZXNbaV0gPSBBV1MudXRpbC50eXBlTmFtZShhY2NlcHRlZFR5cGVzW2ldKTtcbiAgICAgIH1cbiAgICAgIGZvdW5kSW52YWxpZFR5cGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBhY2NlcHRlZFR5cGUgPSB0eXBlO1xuICAgIGlmICghYWNjZXB0ZWRUeXBlKSB7XG4gICAgICBhY2NlcHRlZFR5cGUgPSBhY2NlcHRlZFR5cGVzLmpvaW4oJywgJykucmVwbGFjZSgvLChbXixdKykkLywgJywgb3IkMScpO1xuICAgIH1cblxuICAgIHZhciB2b3dlbCA9IGFjY2VwdGVkVHlwZS5tYXRjaCgvXlthZWlvdV0vaSkgPyAnbicgOiAnJztcbiAgICB0aGlzLmZhaWwoJ0ludmFsaWRQYXJhbWV0ZXJUeXBlJywgJ0V4cGVjdGVkICcgKyBjb250ZXh0ICsgJyB0byBiZSBhJyArXG4gICAgICAgICAgICAgIHZvd2VsICsgJyAnICsgYWNjZXB0ZWRUeXBlKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgdmFsaWRhdGVOdW1iZXI6IGZ1bmN0aW9uIHZhbGlkYXRlTnVtYmVyKHNoYXBlLCB2YWx1ZSwgY29udGV4dCkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBjYXN0ZWRWYWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgaWYgKGNhc3RlZFZhbHVlLnRvU3RyaW5nKCkgPT09IHZhbHVlKSB2YWx1ZSA9IGNhc3RlZFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy52YWxpZGF0ZVR5cGUodmFsdWUsIGNvbnRleHQsIFsnbnVtYmVyJ10pKSB7XG4gICAgICB0aGlzLnZhbGlkYXRlUmFuZ2Uoc2hhcGUsIHZhbHVlLCBjb250ZXh0LCAnbnVtZXJpYyB2YWx1ZScpO1xuICAgIH1cbiAgfSxcblxuICB2YWxpZGF0ZVBheWxvYWQ6IGZ1bmN0aW9uIHZhbGlkYXRlUGF5bG9hZCh2YWx1ZSwgY29udGV4dCkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHJldHVybjtcbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlLmJ5dGVMZW5ndGggPT09ICdudW1iZXInKSByZXR1cm47IC8vIHR5cGVkIGFycmF5c1xuICAgIGlmIChBV1MudXRpbC5pc05vZGUoKSkgeyAvLyBzcGVjaWFsIGNoZWNrIGZvciBidWZmZXIvc3RyZWFtIGluIE5vZGUuanNcbiAgICAgIHZhciBTdHJlYW0gPSBBV1MudXRpbC5zdHJlYW0uU3RyZWFtO1xuICAgICAgaWYgKEFXUy51dGlsLkJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJlYW0pIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiBCbG9iICE9PSB2b2lkIDAgJiYgdmFsdWUgaW5zdGFuY2VvZiBCbG9iKSByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHR5cGVzID0gWydCdWZmZXInLCAnU3RyZWFtJywgJ0ZpbGUnLCAnQmxvYicsICdBcnJheUJ1ZmZlcicsICdEYXRhVmlldyddO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoQVdTLnV0aWwuaXNUeXBlKHZhbHVlLCB0eXBlc1tpXSkpIHJldHVybjtcbiAgICAgICAgaWYgKEFXUy51dGlsLnR5cGVOYW1lKHZhbHVlLmNvbnN0cnVjdG9yKSA9PT0gdHlwZXNbaV0pIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmZhaWwoJ0ludmFsaWRQYXJhbWV0ZXJUeXBlJywgJ0V4cGVjdGVkICcgKyBjb250ZXh0ICsgJyB0byBiZSBhICcgK1xuICAgICAgJ3N0cmluZywgQnVmZmVyLCBTdHJlYW0sIEJsb2IsIG9yIHR5cGVkIGFycmF5IG9iamVjdCcpO1xuICB9XG59KTtcblxufSx7XCIuL2NvcmVcIjoxOX1dLDQ2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciB1dGlsID0gIHJlcXVpcmUoJy4uL3V0aWwnKTtcbnZhciBBV1MgPSByZXF1aXJlKCcuLi9jb3JlJyk7XG5cbi8qKlxuICogUHJlcGVuZCBwcmVmaXggZGVmaW5lZCBieSBBUEkgbW9kZWwgdG8gZW5kcG9pbnQgdGhhdCdzIGFscmVhZHlcbiAqIGNvbnN0cnVjdGVkLiBUaGlzIGZlYXR1cmUgZG9lcyBub3QgYXBwbHkgdG8gb3BlcmF0aW9ucyB1c2luZ1xuICogZW5kcG9pbnQgZGlzY292ZXJ5IGFuZCBjYW4gYmUgZGlzYWJsZWQuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcG9wdWxhdGVIb3N0UHJlZml4KHJlcXVlc3QpICB7XG4gIHZhciBlbmFibGVkID0gcmVxdWVzdC5zZXJ2aWNlLmNvbmZpZy5ob3N0UHJlZml4RW5hYmxlZDtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm4gcmVxdWVzdDtcbiAgdmFyIG9wZXJhdGlvbk1vZGVsID0gcmVxdWVzdC5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcXVlc3Qub3BlcmF0aW9uXTtcbiAgLy9kb24ndCBtYXJzaGFsIGhvc3QgcHJlZml4IHdoZW4gb3BlcmF0aW9uIGhhcyBlbmRwb2ludCBkaXNjb3ZlcnkgdHJhaXRzXG4gIGlmIChoYXNFbmRwb2ludERpc2NvdmVyKHJlcXVlc3QpKSByZXR1cm4gcmVxdWVzdDtcbiAgaWYgKG9wZXJhdGlvbk1vZGVsLmVuZHBvaW50ICYmIG9wZXJhdGlvbk1vZGVsLmVuZHBvaW50Lmhvc3RQcmVmaXgpIHtcbiAgICB2YXIgaG9zdFByZWZpeE5vdGF0aW9uID0gb3BlcmF0aW9uTW9kZWwuZW5kcG9pbnQuaG9zdFByZWZpeDtcbiAgICB2YXIgaG9zdFByZWZpeCA9IGV4cGFuZEhvc3RQcmVmaXgoaG9zdFByZWZpeE5vdGF0aW9uLCByZXF1ZXN0LnBhcmFtcywgb3BlcmF0aW9uTW9kZWwuaW5wdXQpO1xuICAgIHByZXBlbmRFbmRwb2ludFByZWZpeChyZXF1ZXN0Lmh0dHBSZXF1ZXN0LmVuZHBvaW50LCBob3N0UHJlZml4KTtcbiAgICB2YWxpZGF0ZUhvc3RuYW1lKHJlcXVlc3QuaHR0cFJlcXVlc3QuZW5kcG9pbnQuaG9zdG5hbWUpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0O1xufVxuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBoYXNFbmRwb2ludERpc2NvdmVyKHJlcXVlc3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVlc3Quc2VydmljZS5hcGk7XG4gIHZhciBvcGVyYXRpb25Nb2RlbCA9IGFwaS5vcGVyYXRpb25zW3JlcXVlc3Qub3BlcmF0aW9uXTtcbiAgdmFyIGlzRW5kcG9pbnRPcGVyYXRpb24gPSBhcGkuZW5kcG9pbnRPcGVyYXRpb24gJiYgKGFwaS5lbmRwb2ludE9wZXJhdGlvbiA9PT0gdXRpbC5zdHJpbmcubG93ZXJGaXJzdChvcGVyYXRpb25Nb2RlbC5uYW1lKSk7XG4gIHJldHVybiAob3BlcmF0aW9uTW9kZWwuZW5kcG9pbnREaXNjb3ZlcnlSZXF1aXJlZCAhPT0gJ05VTEwnIHx8IGlzRW5kcG9pbnRPcGVyYXRpb24gPT09IHRydWUpO1xufVxuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBleHBhbmRIb3N0UHJlZml4KGhvc3RQcmVmaXhOb3RhdGlvbiwgcGFyYW1zLCBzaGFwZSkge1xuICB1dGlsLmVhY2goc2hhcGUubWVtYmVycywgZnVuY3Rpb24obmFtZSwgbWVtYmVyKSB7XG4gICAgaWYgKG1lbWJlci5ob3N0TGFiZWwgPT09IHRydWUpIHtcbiAgICAgIGlmICh0eXBlb2YgcGFyYW1zW25hbWVdICE9PSAnc3RyaW5nJyB8fCBwYXJhbXNbbmFtZV0gPT09ICcnKSB7XG4gICAgICAgIHRocm93IHV0aWwuZXJyb3IobmV3IEVycm9yKCksIHtcbiAgICAgICAgICBtZXNzYWdlOiAnUGFyYW1ldGVyICcgKyBuYW1lICsgJyBzaG91bGQgYmUgYSBub24tZW1wdHkgc3RyaW5nLicsXG4gICAgICAgICAgY29kZTogJ0ludmFsaWRQYXJhbWV0ZXInXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXFxcXHsnICsgbmFtZSArICdcXFxcfScsICdnJyk7XG4gICAgICBob3N0UHJlZml4Tm90YXRpb24gPSBob3N0UHJlZml4Tm90YXRpb24ucmVwbGFjZShyZWdleCwgcGFyYW1zW25hbWVdKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaG9zdFByZWZpeE5vdGF0aW9uO1xufVxuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwcmVwZW5kRW5kcG9pbnRQcmVmaXgoZW5kcG9pbnQsIHByZWZpeCkge1xuICBpZiAoZW5kcG9pbnQuaG9zdCkge1xuICAgIGVuZHBvaW50Lmhvc3QgPSBwcmVmaXggKyBlbmRwb2ludC5ob3N0O1xuICB9XG4gIGlmIChlbmRwb2ludC5ob3N0bmFtZSkge1xuICAgIGVuZHBvaW50Lmhvc3RuYW1lID0gcHJlZml4ICsgZW5kcG9pbnQuaG9zdG5hbWU7XG4gIH1cbn1cblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVIb3N0bmFtZShob3N0bmFtZSkge1xuICB2YXIgbGFiZWxzID0gaG9zdG5hbWUuc3BsaXQoJy4nKTtcbiAgLy9SZWZlcmVuY2U6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMxMTIzI3NlY3Rpb24tMlxuICB2YXIgaG9zdFBhdHRlcm4gPSAvXlthLXpBLVowLTldezF9JHxeW2EtekEtWjAtOV1bYS16QS1aMC05XFwtXSpbYS16QS1aMC05XSQvO1xuICB1dGlsLmFycmF5RWFjaChsYWJlbHMsIGZ1bmN0aW9uKGxhYmVsKSB7XG4gICAgaWYgKCFsYWJlbC5sZW5ndGggfHwgbGFiZWwubGVuZ3RoIDwgMSB8fCBsYWJlbC5sZW5ndGggPiA2Mykge1xuICAgICAgdGhyb3cgdXRpbC5lcnJvcihuZXcgRXJyb3IoKSwge1xuICAgICAgICBjb2RlOiAnVmFsaWRhdGlvbkVycm9yJyxcbiAgICAgICAgbWVzc2FnZTogJ0hvc3RuYW1lIGxhYmVsIGxlbmd0aCBzaG91bGQgYmUgYmV0d2VlbiAxIHRvIDYzIGNoYXJhY3RlcnMsIGluY2x1c2l2ZS4nXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCFob3N0UGF0dGVybi50ZXN0KGxhYmVsKSkge1xuICAgICAgdGhyb3cgQVdTLnV0aWwuZXJyb3IobmV3IEVycm9yKCksXG4gICAgICAgIHtjb2RlOiAnVmFsaWRhdGlvbkVycm9yJywgbWVzc2FnZTogbGFiZWwgKyAnIGlzIG5vdCBob3N0bmFtZSBjb21wYXRpYmxlLid9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcG9wdWxhdGVIb3N0UHJlZml4OiBwb3B1bGF0ZUhvc3RQcmVmaXhcbn07XG5cbn0se1wiLi4vY29yZVwiOjE5LFwiLi4vdXRpbFwiOjcyfV0sNDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG52YXIgSnNvbkJ1aWxkZXIgPSByZXF1aXJlKCcuLi9qc29uL2J1aWxkZXInKTtcbnZhciBKc29uUGFyc2VyID0gcmVxdWlyZSgnLi4vanNvbi9wYXJzZXInKTtcbnZhciBwb3B1bGF0ZUhvc3RQcmVmaXggPSByZXF1aXJlKCcuL2hlbHBlcnMnKS5wb3B1bGF0ZUhvc3RQcmVmaXg7XG5cbmZ1bmN0aW9uIGJ1aWxkUmVxdWVzdChyZXEpIHtcbiAgdmFyIGh0dHBSZXF1ZXN0ID0gcmVxLmh0dHBSZXF1ZXN0O1xuICB2YXIgYXBpID0gcmVxLnNlcnZpY2UuYXBpO1xuICB2YXIgdGFyZ2V0ID0gYXBpLnRhcmdldFByZWZpeCArICcuJyArIGFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dLm5hbWU7XG4gIHZhciB2ZXJzaW9uID0gYXBpLmpzb25WZXJzaW9uIHx8ICcxLjAnO1xuICB2YXIgaW5wdXQgPSBhcGkub3BlcmF0aW9uc1tyZXEub3BlcmF0aW9uXS5pbnB1dDtcbiAgdmFyIGJ1aWxkZXIgPSBuZXcgSnNvbkJ1aWxkZXIoKTtcblxuICBpZiAodmVyc2lvbiA9PT0gMSkgdmVyc2lvbiA9ICcxLjAnO1xuICBodHRwUmVxdWVzdC5ib2R5ID0gYnVpbGRlci5idWlsZChyZXEucGFyYW1zIHx8IHt9LCBpbnB1dCk7XG4gIGh0dHBSZXF1ZXN0LmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtYW16LWpzb24tJyArIHZlcnNpb247XG4gIGh0dHBSZXF1ZXN0LmhlYWRlcnNbJ1gtQW16LVRhcmdldCddID0gdGFyZ2V0O1xuXG4gIHBvcHVsYXRlSG9zdFByZWZpeChyZXEpO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0RXJyb3IocmVzcCkge1xuICB2YXIgZXJyb3IgPSB7fTtcbiAgdmFyIGh0dHBSZXNwb25zZSA9IHJlc3AuaHR0cFJlc3BvbnNlO1xuXG4gIGVycm9yLmNvZGUgPSBodHRwUmVzcG9uc2UuaGVhZGVyc1sneC1hbXpuLWVycm9ydHlwZSddIHx8ICdVbmtub3duRXJyb3InO1xuICBpZiAodHlwZW9mIGVycm9yLmNvZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgZXJyb3IuY29kZSA9IGVycm9yLmNvZGUuc3BsaXQoJzonKVswXTtcbiAgfVxuXG4gIGlmIChodHRwUmVzcG9uc2UuYm9keS5sZW5ndGggPiAwKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBlID0gSlNPTi5wYXJzZShodHRwUmVzcG9uc2UuYm9keS50b1N0cmluZygpKTtcbiAgICAgIGlmIChlLl9fdHlwZSB8fCBlLmNvZGUpIHtcbiAgICAgICAgZXJyb3IuY29kZSA9IChlLl9fdHlwZSB8fCBlLmNvZGUpLnNwbGl0KCcjJykucG9wKCk7XG4gICAgICB9XG4gICAgICBpZiAoZXJyb3IuY29kZSA9PT0gJ1JlcXVlc3RFbnRpdHlUb29MYXJnZScpIHtcbiAgICAgICAgZXJyb3IubWVzc2FnZSA9ICdSZXF1ZXN0IGJvZHkgbXVzdCBiZSBsZXNzIHRoYW4gMSBNQic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvci5tZXNzYWdlID0gKGUubWVzc2FnZSB8fCBlLk1lc3NhZ2UgfHwgbnVsbCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3Iuc3RhdHVzQ29kZSA9IGh0dHBSZXNwb25zZS5zdGF0dXNDb2RlO1xuICAgICAgZXJyb3IubWVzc2FnZSA9IGh0dHBSZXNwb25zZS5zdGF0dXNNZXNzYWdlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBlcnJvci5zdGF0dXNDb2RlID0gaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGU7XG4gICAgZXJyb3IubWVzc2FnZSA9IGh0dHBSZXNwb25zZS5zdGF0dXNDb2RlLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXNwLmVycm9yID0gdXRpbC5lcnJvcihuZXcgRXJyb3IoKSwgZXJyb3IpO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0RGF0YShyZXNwKSB7XG4gIHZhciBib2R5ID0gcmVzcC5odHRwUmVzcG9uc2UuYm9keS50b1N0cmluZygpIHx8ICd7fSc7XG4gIGlmIChyZXNwLnJlcXVlc3Quc2VydmljZS5jb25maWcuY29udmVydFJlc3BvbnNlVHlwZXMgPT09IGZhbHNlKSB7XG4gICAgcmVzcC5kYXRhID0gSlNPTi5wYXJzZShib2R5KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgb3BlcmF0aW9uID0gcmVzcC5yZXF1ZXN0LnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcmVzcC5yZXF1ZXN0Lm9wZXJhdGlvbl07XG4gICAgdmFyIHNoYXBlID0gb3BlcmF0aW9uLm91dHB1dCB8fCB7fTtcbiAgICB2YXIgcGFyc2VyID0gbmV3IEpzb25QYXJzZXIoKTtcbiAgICByZXNwLmRhdGEgPSBwYXJzZXIucGFyc2UoYm9keSwgc2hhcGUpO1xuICB9XG59XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICBidWlsZFJlcXVlc3Q6IGJ1aWxkUmVxdWVzdCxcbiAgZXh0cmFjdEVycm9yOiBleHRyYWN0RXJyb3IsXG4gIGV4dHJhY3REYXRhOiBleHRyYWN0RGF0YVxufTtcblxufSx7XCIuLi9qc29uL2J1aWxkZXJcIjozNyxcIi4uL2pzb24vcGFyc2VyXCI6MzgsXCIuLi91dGlsXCI6NzIsXCIuL2hlbHBlcnNcIjo0Nn1dLDQ4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBBV1MgPSByZXF1aXJlKCcuLi9jb3JlJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbnZhciBRdWVyeVBhcmFtU2VyaWFsaXplciA9IHJlcXVpcmUoJy4uL3F1ZXJ5L3F1ZXJ5X3BhcmFtX3NlcmlhbGl6ZXInKTtcbnZhciBTaGFwZSA9IHJlcXVpcmUoJy4uL21vZGVsL3NoYXBlJyk7XG52YXIgcG9wdWxhdGVIb3N0UHJlZml4ID0gcmVxdWlyZSgnLi9oZWxwZXJzJykucG9wdWxhdGVIb3N0UHJlZml4O1xuXG5mdW5jdGlvbiBidWlsZFJlcXVlc3QocmVxKSB7XG4gIHZhciBvcGVyYXRpb24gPSByZXEuc2VydmljZS5hcGkub3BlcmF0aW9uc1tyZXEub3BlcmF0aW9uXTtcbiAgdmFyIGh0dHBSZXF1ZXN0ID0gcmVxLmh0dHBSZXF1ZXN0O1xuICBodHRwUmVxdWVzdC5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9XG4gICAgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD11dGYtOCc7XG4gIGh0dHBSZXF1ZXN0LnBhcmFtcyA9IHtcbiAgICBWZXJzaW9uOiByZXEuc2VydmljZS5hcGkuYXBpVmVyc2lvbixcbiAgICBBY3Rpb246IG9wZXJhdGlvbi5uYW1lXG4gIH07XG5cbiAgLy8gY29udmVydCB0aGUgcmVxdWVzdCBwYXJhbWV0ZXJzIGludG8gYSBsaXN0IG9mIHF1ZXJ5IHBhcmFtcyxcbiAgLy8gZS5nLiBEZWVwbHkuTmVzdGVkUGFyYW0uMC5OYW1lPXZhbHVlXG4gIHZhciBidWlsZGVyID0gbmV3IFF1ZXJ5UGFyYW1TZXJpYWxpemVyKCk7XG4gIGJ1aWxkZXIuc2VyaWFsaXplKHJlcS5wYXJhbXMsIG9wZXJhdGlvbi5pbnB1dCwgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBodHRwUmVxdWVzdC5wYXJhbXNbbmFtZV0gPSB2YWx1ZTtcbiAgfSk7XG4gIGh0dHBSZXF1ZXN0LmJvZHkgPSB1dGlsLnF1ZXJ5UGFyYW1zVG9TdHJpbmcoaHR0cFJlcXVlc3QucGFyYW1zKTtcblxuICBwb3B1bGF0ZUhvc3RQcmVmaXgocmVxKTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdEVycm9yKHJlc3ApIHtcbiAgdmFyIGRhdGEsIGJvZHkgPSByZXNwLmh0dHBSZXNwb25zZS5ib2R5LnRvU3RyaW5nKCk7XG4gIGlmIChib2R5Lm1hdGNoKCc8VW5rbm93bk9wZXJhdGlvbkV4Y2VwdGlvbicpKSB7XG4gICAgZGF0YSA9IHtcbiAgICAgIENvZGU6ICdVbmtub3duT3BlcmF0aW9uJyxcbiAgICAgIE1lc3NhZ2U6ICdVbmtub3duIG9wZXJhdGlvbiAnICsgcmVzcC5yZXF1ZXN0Lm9wZXJhdGlvblxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGRhdGEgPSBuZXcgQVdTLlhNTC5QYXJzZXIoKS5wYXJzZShib2R5KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBkYXRhID0ge1xuICAgICAgICBDb2RlOiByZXNwLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlLFxuICAgICAgICBNZXNzYWdlOiByZXNwLmh0dHBSZXNwb25zZS5zdGF0dXNNZXNzYWdlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLnJlcXVlc3RJZCAmJiAhcmVzcC5yZXF1ZXN0SWQpIHJlc3AucmVxdWVzdElkID0gZGF0YS5yZXF1ZXN0SWQ7XG4gIGlmIChkYXRhLkVycm9ycykgZGF0YSA9IGRhdGEuRXJyb3JzO1xuICBpZiAoZGF0YS5FcnJvcikgZGF0YSA9IGRhdGEuRXJyb3I7XG4gIGlmIChkYXRhLkNvZGUpIHtcbiAgICByZXNwLmVycm9yID0gdXRpbC5lcnJvcihuZXcgRXJyb3IoKSwge1xuICAgICAgY29kZTogZGF0YS5Db2RlLFxuICAgICAgbWVzc2FnZTogZGF0YS5NZXNzYWdlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmVzcC5lcnJvciA9IHV0aWwuZXJyb3IobmV3IEVycm9yKCksIHtcbiAgICAgIGNvZGU6IHJlc3AuaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUsXG4gICAgICBtZXNzYWdlOiBudWxsXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdERhdGEocmVzcCkge1xuICB2YXIgcmVxID0gcmVzcC5yZXF1ZXN0O1xuICB2YXIgb3BlcmF0aW9uID0gcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcmVxLm9wZXJhdGlvbl07XG4gIHZhciBzaGFwZSA9IG9wZXJhdGlvbi5vdXRwdXQgfHwge307XG4gIHZhciBvcmlnUnVsZXMgPSBzaGFwZTtcblxuICBpZiAob3JpZ1J1bGVzLnJlc3VsdFdyYXBwZXIpIHtcbiAgICB2YXIgdG1wID0gU2hhcGUuY3JlYXRlKHt0eXBlOiAnc3RydWN0dXJlJ30pO1xuICAgIHRtcC5tZW1iZXJzW29yaWdSdWxlcy5yZXN1bHRXcmFwcGVyXSA9IHNoYXBlO1xuICAgIHRtcC5tZW1iZXJOYW1lcyA9IFtvcmlnUnVsZXMucmVzdWx0V3JhcHBlcl07XG4gICAgdXRpbC5wcm9wZXJ0eShzaGFwZSwgJ25hbWUnLCBzaGFwZS5yZXN1bHRXcmFwcGVyKTtcbiAgICBzaGFwZSA9IHRtcDtcbiAgfVxuXG4gIHZhciBwYXJzZXIgPSBuZXcgQVdTLlhNTC5QYXJzZXIoKTtcblxuICAvLyBUT0RPOiBSZWZhY3RvciBYTUwgUGFyc2VyIHRvIHBhcnNlIFJlcXVlc3RJZCBmcm9tIHJlc3BvbnNlLlxuICBpZiAoc2hhcGUgJiYgc2hhcGUubWVtYmVycyAmJiAhc2hhcGUubWVtYmVycy5fWEFNWlJlcXVlc3RJZCkge1xuICAgIHZhciByZXF1ZXN0SWRTaGFwZSA9IFNoYXBlLmNyZWF0ZShcbiAgICAgIHsgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgIHsgYXBpOiB7IHByb3RvY29sOiAncXVlcnknIH0gfSxcbiAgICAgICdyZXF1ZXN0SWQnXG4gICAgKTtcbiAgICBzaGFwZS5tZW1iZXJzLl9YQU1aUmVxdWVzdElkID0gcmVxdWVzdElkU2hhcGU7XG4gIH1cblxuICB2YXIgZGF0YSA9IHBhcnNlci5wYXJzZShyZXNwLmh0dHBSZXNwb25zZS5ib2R5LnRvU3RyaW5nKCksIHNoYXBlKTtcbiAgcmVzcC5yZXF1ZXN0SWQgPSBkYXRhLl9YQU1aUmVxdWVzdElkIHx8IGRhdGEucmVxdWVzdElkO1xuXG4gIGlmIChkYXRhLl9YQU1aUmVxdWVzdElkKSBkZWxldGUgZGF0YS5fWEFNWlJlcXVlc3RJZDtcblxuICBpZiAob3JpZ1J1bGVzLnJlc3VsdFdyYXBwZXIpIHtcbiAgICBpZiAoZGF0YVtvcmlnUnVsZXMucmVzdWx0V3JhcHBlcl0pIHtcbiAgICAgIHV0aWwudXBkYXRlKGRhdGEsIGRhdGFbb3JpZ1J1bGVzLnJlc3VsdFdyYXBwZXJdKTtcbiAgICAgIGRlbGV0ZSBkYXRhW29yaWdSdWxlcy5yZXN1bHRXcmFwcGVyXTtcbiAgICB9XG4gIH1cblxuICByZXNwLmRhdGEgPSBkYXRhO1xufVxuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYnVpbGRSZXF1ZXN0OiBidWlsZFJlcXVlc3QsXG4gIGV4dHJhY3RFcnJvcjogZXh0cmFjdEVycm9yLFxuICBleHRyYWN0RGF0YTogZXh0cmFjdERhdGFcbn07XG5cbn0se1wiLi4vY29yZVwiOjE5LFwiLi4vbW9kZWwvc2hhcGVcIjo0NCxcIi4uL3F1ZXJ5L3F1ZXJ5X3BhcmFtX3NlcmlhbGl6ZXJcIjo1MixcIi4uL3V0aWxcIjo3MixcIi4vaGVscGVyc1wiOjQ2fV0sNDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG52YXIgcG9wdWxhdGVIb3N0UHJlZml4ID0gcmVxdWlyZSgnLi9oZWxwZXJzJykucG9wdWxhdGVIb3N0UHJlZml4O1xuXG5mdW5jdGlvbiBwb3B1bGF0ZU1ldGhvZChyZXEpIHtcbiAgcmVxLmh0dHBSZXF1ZXN0Lm1ldGhvZCA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dLmh0dHBNZXRob2Q7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVVJJKGVuZHBvaW50UGF0aCwgb3BlcmF0aW9uUGF0aCwgaW5wdXQsIHBhcmFtcykge1xuICB2YXIgdXJpID0gW2VuZHBvaW50UGF0aCwgb3BlcmF0aW9uUGF0aF0uam9pbignLycpO1xuICB1cmkgPSB1cmkucmVwbGFjZSgvXFwvKy9nLCAnLycpO1xuXG4gIHZhciBxdWVyeVN0cmluZyA9IHt9LCBxdWVyeVN0cmluZ1NldCA9IGZhbHNlO1xuICB1dGlsLmVhY2goaW5wdXQubWVtYmVycywgZnVuY3Rpb24gKG5hbWUsIG1lbWJlcikge1xuICAgIHZhciBwYXJhbVZhbHVlID0gcGFyYW1zW25hbWVdO1xuICAgIGlmIChwYXJhbVZhbHVlID09PSBudWxsIHx8IHBhcmFtVmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgIGlmIChtZW1iZXIubG9jYXRpb24gPT09ICd1cmknKSB7XG4gICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCdcXFxceycgKyBtZW1iZXIubmFtZSArICcoXFxcXCspP1xcXFx9Jyk7XG4gICAgICB1cmkgPSB1cmkucmVwbGFjZShyZWdleCwgZnVuY3Rpb24oXywgcGx1cykge1xuICAgICAgICB2YXIgZm4gPSBwbHVzID8gdXRpbC51cmlFc2NhcGVQYXRoIDogdXRpbC51cmlFc2NhcGU7XG4gICAgICAgIHJldHVybiBmbihTdHJpbmcocGFyYW1WYWx1ZSkpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChtZW1iZXIubG9jYXRpb24gPT09ICdxdWVyeXN0cmluZycpIHtcbiAgICAgIHF1ZXJ5U3RyaW5nU2V0ID0gdHJ1ZTtcblxuICAgICAgaWYgKG1lbWJlci50eXBlID09PSAnbGlzdCcpIHtcbiAgICAgICAgcXVlcnlTdHJpbmdbbWVtYmVyLm5hbWVdID0gcGFyYW1WYWx1ZS5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgcmV0dXJuIHV0aWwudXJpRXNjYXBlKG1lbWJlci5tZW1iZXIudG9XaXJlRm9ybWF0KHZhbCkudG9TdHJpbmcoKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChtZW1iZXIudHlwZSA9PT0gJ21hcCcpIHtcbiAgICAgICAgdXRpbC5lYWNoKHBhcmFtVmFsdWUsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHF1ZXJ5U3RyaW5nW2tleV0gPSB2YWx1ZS5tYXAoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgIHJldHVybiB1dGlsLnVyaUVzY2FwZShTdHJpbmcodmFsKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcXVlcnlTdHJpbmdba2V5XSA9IHV0aWwudXJpRXNjYXBlKFN0cmluZyh2YWx1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWVyeVN0cmluZ1ttZW1iZXIubmFtZV0gPSB1dGlsLnVyaUVzY2FwZShtZW1iZXIudG9XaXJlRm9ybWF0KHBhcmFtVmFsdWUpLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHF1ZXJ5U3RyaW5nU2V0KSB7XG4gICAgdXJpICs9ICh1cmkuaW5kZXhPZignPycpID49IDAgPyAnJicgOiAnPycpO1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgIHV0aWwuYXJyYXlFYWNoKE9iamVjdC5rZXlzKHF1ZXJ5U3RyaW5nKS5zb3J0KCksIGZ1bmN0aW9uKGtleSkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHF1ZXJ5U3RyaW5nW2tleV0pKSB7XG4gICAgICAgIHF1ZXJ5U3RyaW5nW2tleV0gPSBbcXVlcnlTdHJpbmdba2V5XV07XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXJ5U3RyaW5nW2tleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcGFydHMucHVzaCh1dGlsLnVyaUVzY2FwZShTdHJpbmcoa2V5KSkgKyAnPScgKyBxdWVyeVN0cmluZ1trZXldW2ldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cmkgKz0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgcmV0dXJuIHVyaTtcbn1cblxuZnVuY3Rpb24gcG9wdWxhdGVVUkkocmVxKSB7XG4gIHZhciBvcGVyYXRpb24gPSByZXEuc2VydmljZS5hcGkub3BlcmF0aW9uc1tyZXEub3BlcmF0aW9uXTtcbiAgdmFyIGlucHV0ID0gb3BlcmF0aW9uLmlucHV0O1xuXG4gIHZhciB1cmkgPSBnZW5lcmF0ZVVSSShyZXEuaHR0cFJlcXVlc3QuZW5kcG9pbnQucGF0aCwgb3BlcmF0aW9uLmh0dHBQYXRoLCBpbnB1dCwgcmVxLnBhcmFtcyk7XG4gIHJlcS5odHRwUmVxdWVzdC5wYXRoID0gdXJpO1xufVxuXG5mdW5jdGlvbiBwb3B1bGF0ZUhlYWRlcnMocmVxKSB7XG4gIHZhciBvcGVyYXRpb24gPSByZXEuc2VydmljZS5hcGkub3BlcmF0aW9uc1tyZXEub3BlcmF0aW9uXTtcbiAgdXRpbC5lYWNoKG9wZXJhdGlvbi5pbnB1dC5tZW1iZXJzLCBmdW5jdGlvbiAobmFtZSwgbWVtYmVyKSB7XG4gICAgdmFyIHZhbHVlID0gcmVxLnBhcmFtc1tuYW1lXTtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgaWYgKG1lbWJlci5sb2NhdGlvbiA9PT0gJ2hlYWRlcnMnICYmIG1lbWJlci50eXBlID09PSAnbWFwJykge1xuICAgICAgdXRpbC5lYWNoKHZhbHVlLCBmdW5jdGlvbihrZXksIG1lbWJlclZhbHVlKSB7XG4gICAgICAgIHJlcS5odHRwUmVxdWVzdC5oZWFkZXJzW21lbWJlci5uYW1lICsga2V5XSA9IG1lbWJlclZhbHVlO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChtZW1iZXIubG9jYXRpb24gPT09ICdoZWFkZXInKSB7XG4gICAgICB2YWx1ZSA9IG1lbWJlci50b1dpcmVGb3JtYXQodmFsdWUpLnRvU3RyaW5nKCk7XG4gICAgICBpZiAobWVtYmVyLmlzSnNvblZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gdXRpbC5iYXNlNjQuZW5jb2RlKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJlcS5odHRwUmVxdWVzdC5oZWFkZXJzW21lbWJlci5uYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkUmVxdWVzdChyZXEpIHtcbiAgcG9wdWxhdGVNZXRob2QocmVxKTtcbiAgcG9wdWxhdGVVUkkocmVxKTtcbiAgcG9wdWxhdGVIZWFkZXJzKHJlcSk7XG4gIHBvcHVsYXRlSG9zdFByZWZpeChyZXEpO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0RXJyb3IoKSB7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3REYXRhKHJlc3ApIHtcbiAgdmFyIHJlcSA9IHJlc3AucmVxdWVzdDtcbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIHIgPSByZXNwLmh0dHBSZXNwb25zZTtcbiAgdmFyIG9wZXJhdGlvbiA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dO1xuICB2YXIgb3V0cHV0ID0gb3BlcmF0aW9uLm91dHB1dDtcblxuICAvLyBub3JtYWxpemUgaGVhZGVycyBuYW1lcyB0byBsb3dlci1jYXNlZCBrZXlzIGZvciBtYXRjaGluZ1xuICB2YXIgaGVhZGVycyA9IHt9O1xuICB1dGlsLmVhY2goci5oZWFkZXJzLCBmdW5jdGlvbiAoaywgdikge1xuICAgIGhlYWRlcnNbay50b0xvd2VyQ2FzZSgpXSA9IHY7XG4gIH0pO1xuXG4gIHV0aWwuZWFjaChvdXRwdXQubWVtYmVycywgZnVuY3Rpb24obmFtZSwgbWVtYmVyKSB7XG4gICAgdmFyIGhlYWRlciA9IChtZW1iZXIubmFtZSB8fCBuYW1lKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChtZW1iZXIubG9jYXRpb24gPT09ICdoZWFkZXJzJyAmJiBtZW1iZXIudHlwZSA9PT0gJ21hcCcpIHtcbiAgICAgIGRhdGFbbmFtZV0gPSB7fTtcbiAgICAgIHZhciBsb2NhdGlvbiA9IG1lbWJlci5pc0xvY2F0aW9uTmFtZSA/IG1lbWJlci5uYW1lIDogJyc7XG4gICAgICB2YXIgcGF0dGVybiA9IG5ldyBSZWdFeHAoJ14nICsgbG9jYXRpb24gKyAnKC4rKScsICdpJyk7XG4gICAgICB1dGlsLmVhY2goci5oZWFkZXJzLCBmdW5jdGlvbiAoaywgdikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gay5tYXRjaChwYXR0ZXJuKTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICAgIGRhdGFbbmFtZV1bcmVzdWx0WzFdXSA9IHY7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAobWVtYmVyLmxvY2F0aW9uID09PSAnaGVhZGVyJykge1xuICAgICAgaWYgKGhlYWRlcnNbaGVhZGVyXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG1lbWJlci5pc0pzb25WYWx1ZSA/XG4gICAgICAgICAgdXRpbC5iYXNlNjQuZGVjb2RlKGhlYWRlcnNbaGVhZGVyXSkgOlxuICAgICAgICAgIGhlYWRlcnNbaGVhZGVyXTtcbiAgICAgICAgZGF0YVtuYW1lXSA9IG1lbWJlci50b1R5cGUodmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobWVtYmVyLmxvY2F0aW9uID09PSAnc3RhdHVzQ29kZScpIHtcbiAgICAgIGRhdGFbbmFtZV0gPSBwYXJzZUludChyLnN0YXR1c0NvZGUsIDEwKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJlc3AuZGF0YSA9IGRhdGE7XG59XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICBidWlsZFJlcXVlc3Q6IGJ1aWxkUmVxdWVzdCxcbiAgZXh0cmFjdEVycm9yOiBleHRyYWN0RXJyb3IsXG4gIGV4dHJhY3REYXRhOiBleHRyYWN0RGF0YSxcbiAgZ2VuZXJhdGVVUkk6IGdlbmVyYXRlVVJJXG59O1xuXG59LHtcIi4uL3V0aWxcIjo3MixcIi4vaGVscGVyc1wiOjQ2fV0sNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG52YXIgUmVzdCA9IHJlcXVpcmUoJy4vcmVzdCcpO1xudmFyIEpzb24gPSByZXF1aXJlKCcuL2pzb24nKTtcbnZhciBKc29uQnVpbGRlciA9IHJlcXVpcmUoJy4uL2pzb24vYnVpbGRlcicpO1xudmFyIEpzb25QYXJzZXIgPSByZXF1aXJlKCcuLi9qc29uL3BhcnNlcicpO1xuXG5mdW5jdGlvbiBwb3B1bGF0ZUJvZHkocmVxKSB7XG4gIHZhciBidWlsZGVyID0gbmV3IEpzb25CdWlsZGVyKCk7XG4gIHZhciBpbnB1dCA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dLmlucHV0O1xuXG4gIGlmIChpbnB1dC5wYXlsb2FkKSB7XG4gICAgdmFyIHBhcmFtcyA9IHt9O1xuICAgIHZhciBwYXlsb2FkU2hhcGUgPSBpbnB1dC5tZW1iZXJzW2lucHV0LnBheWxvYWRdO1xuICAgIHBhcmFtcyA9IHJlcS5wYXJhbXNbaW5wdXQucGF5bG9hZF07XG4gICAgaWYgKHBhcmFtcyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICBpZiAocGF5bG9hZFNoYXBlLnR5cGUgPT09ICdzdHJ1Y3R1cmUnKSB7XG4gICAgICByZXEuaHR0cFJlcXVlc3QuYm9keSA9IGJ1aWxkZXIuYnVpbGQocGFyYW1zLCBwYXlsb2FkU2hhcGUpO1xuICAgICAgYXBwbHlDb250ZW50VHlwZUhlYWRlcihyZXEpO1xuICAgIH0gZWxzZSB7IC8vIG5vbi1KU09OIHBheWxvYWRcbiAgICAgIHJlcS5odHRwUmVxdWVzdC5ib2R5ID0gcGFyYW1zO1xuICAgICAgaWYgKHBheWxvYWRTaGFwZS50eXBlID09PSAnYmluYXJ5JyB8fCBwYXlsb2FkU2hhcGUuaXNTdHJlYW1pbmcpIHtcbiAgICAgICAgYXBwbHlDb250ZW50VHlwZUhlYWRlcihyZXEsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYm9keSA9IGJ1aWxkZXIuYnVpbGQocmVxLnBhcmFtcywgaW5wdXQpO1xuICAgIGlmIChib2R5ICE9PSAne30nIHx8IHJlcS5odHRwUmVxdWVzdC5tZXRob2QgIT09ICdHRVQnKSB7IC8vZG9uJ3Qgc2VuZCBlbXB0eSBib2R5IGZvciBHRVQgbWV0aG9kXG4gICAgICByZXEuaHR0cFJlcXVlc3QuYm9keSA9IGJvZHk7XG4gICAgfVxuICAgIGFwcGx5Q29udGVudFR5cGVIZWFkZXIocmVxKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseUNvbnRlbnRUeXBlSGVhZGVyKHJlcSwgaXNCaW5hcnkpIHtcbiAgdmFyIG9wZXJhdGlvbiA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dO1xuICB2YXIgaW5wdXQgPSBvcGVyYXRpb24uaW5wdXQ7XG5cbiAgaWYgKCFyZXEuaHR0cFJlcXVlc3QuaGVhZGVyc1snQ29udGVudC1UeXBlJ10pIHtcbiAgICB2YXIgdHlwZSA9IGlzQmluYXJ5ID8gJ2JpbmFyeS9vY3RldC1zdHJlYW0nIDogJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgIHJlcS5odHRwUmVxdWVzdC5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHR5cGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gYnVpbGRSZXF1ZXN0KHJlcSkge1xuICBSZXN0LmJ1aWxkUmVxdWVzdChyZXEpO1xuXG4gIC8vIG5ldmVyIHNlbmQgYm9keSBwYXlsb2FkIG9uIEhFQUQvREVMRVRFXG4gIGlmIChbJ0hFQUQnLCAnREVMRVRFJ10uaW5kZXhPZihyZXEuaHR0cFJlcXVlc3QubWV0aG9kKSA8IDApIHtcbiAgICBwb3B1bGF0ZUJvZHkocmVxKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0RXJyb3IocmVzcCkge1xuICBKc29uLmV4dHJhY3RFcnJvcihyZXNwKTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdERhdGEocmVzcCkge1xuICBSZXN0LmV4dHJhY3REYXRhKHJlc3ApO1xuXG4gIHZhciByZXEgPSByZXNwLnJlcXVlc3Q7XG4gIHZhciBvcGVyYXRpb24gPSByZXEuc2VydmljZS5hcGkub3BlcmF0aW9uc1tyZXEub3BlcmF0aW9uXTtcbiAgdmFyIHJ1bGVzID0gcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcmVxLm9wZXJhdGlvbl0ub3V0cHV0IHx8IHt9O1xuICB2YXIgcGFyc2VyO1xuICB2YXIgaGFzRXZlbnRPdXRwdXQgPSBvcGVyYXRpb24uaGFzRXZlbnRPdXRwdXQ7XG5cbiAgaWYgKHJ1bGVzLnBheWxvYWQpIHtcbiAgICB2YXIgcGF5bG9hZE1lbWJlciA9IHJ1bGVzLm1lbWJlcnNbcnVsZXMucGF5bG9hZF07XG4gICAgdmFyIGJvZHkgPSByZXNwLmh0dHBSZXNwb25zZS5ib2R5O1xuICAgIGlmIChwYXlsb2FkTWVtYmVyLmlzRXZlbnRTdHJlYW0pIHtcbiAgICAgIHBhcnNlciA9IG5ldyBKc29uUGFyc2VyKCk7XG4gICAgICByZXNwLmRhdGFbcGF5bG9hZF0gPSB1dGlsLmNyZWF0ZUV2ZW50U3RyZWFtKFxuICAgICAgICBBV1MuSHR0cENsaWVudC5zdHJlYW1zQXBpVmVyc2lvbiA9PT0gMiA/IHJlc3AuaHR0cFJlc3BvbnNlLnN0cmVhbSA6IGJvZHksXG4gICAgICAgIHBhcnNlcixcbiAgICAgICAgcGF5bG9hZE1lbWJlclxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHBheWxvYWRNZW1iZXIudHlwZSA9PT0gJ3N0cnVjdHVyZScgfHwgcGF5bG9hZE1lbWJlci50eXBlID09PSAnbGlzdCcpIHtcbiAgICAgIHZhciBwYXJzZXIgPSBuZXcgSnNvblBhcnNlcigpO1xuICAgICAgcmVzcC5kYXRhW3J1bGVzLnBheWxvYWRdID0gcGFyc2VyLnBhcnNlKGJvZHksIHBheWxvYWRNZW1iZXIpO1xuICAgIH0gZWxzZSBpZiAocGF5bG9hZE1lbWJlci50eXBlID09PSAnYmluYXJ5JyB8fCBwYXlsb2FkTWVtYmVyLmlzU3RyZWFtaW5nKSB7XG4gICAgICByZXNwLmRhdGFbcnVsZXMucGF5bG9hZF0gPSBib2R5O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNwLmRhdGFbcnVsZXMucGF5bG9hZF0gPSBwYXlsb2FkTWVtYmVyLnRvVHlwZShib2R5KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRhdGEgPSByZXNwLmRhdGE7XG4gICAgSnNvbi5leHRyYWN0RGF0YShyZXNwKTtcbiAgICByZXNwLmRhdGEgPSB1dGlsLm1lcmdlKGRhdGEsIHJlc3AuZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGJ1aWxkUmVxdWVzdDogYnVpbGRSZXF1ZXN0LFxuICBleHRyYWN0RXJyb3I6IGV4dHJhY3RFcnJvcixcbiAgZXh0cmFjdERhdGE6IGV4dHJhY3REYXRhXG59O1xuXG59LHtcIi4uL2pzb24vYnVpbGRlclwiOjM3LFwiLi4vanNvbi9wYXJzZXJcIjozOCxcIi4uL3V0aWxcIjo3MixcIi4vanNvblwiOjQ3LFwiLi9yZXN0XCI6NDl9XSw1MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgQVdTID0gcmVxdWlyZSgnLi4vY29yZScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG52YXIgUmVzdCA9IHJlcXVpcmUoJy4vcmVzdCcpO1xuXG5mdW5jdGlvbiBwb3B1bGF0ZUJvZHkocmVxKSB7XG4gIHZhciBpbnB1dCA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dLmlucHV0O1xuICB2YXIgYnVpbGRlciA9IG5ldyBBV1MuWE1MLkJ1aWxkZXIoKTtcbiAgdmFyIHBhcmFtcyA9IHJlcS5wYXJhbXM7XG5cbiAgdmFyIHBheWxvYWQgPSBpbnB1dC5wYXlsb2FkO1xuICBpZiAocGF5bG9hZCkge1xuICAgIHZhciBwYXlsb2FkTWVtYmVyID0gaW5wdXQubWVtYmVyc1twYXlsb2FkXTtcbiAgICBwYXJhbXMgPSBwYXJhbXNbcGF5bG9hZF07XG4gICAgaWYgKHBhcmFtcyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICBpZiAocGF5bG9hZE1lbWJlci50eXBlID09PSAnc3RydWN0dXJlJykge1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gcGF5bG9hZE1lbWJlci5uYW1lO1xuICAgICAgcmVxLmh0dHBSZXF1ZXN0LmJvZHkgPSBidWlsZGVyLnRvWE1MKHBhcmFtcywgcGF5bG9hZE1lbWJlciwgcm9vdEVsZW1lbnQsIHRydWUpO1xuICAgIH0gZWxzZSB7IC8vIG5vbi14bWwgcGF5bG9hZFxuICAgICAgcmVxLmh0dHBSZXF1ZXN0LmJvZHkgPSBwYXJhbXM7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlcS5odHRwUmVxdWVzdC5ib2R5ID0gYnVpbGRlci50b1hNTChwYXJhbXMsIGlucHV0LCBpbnB1dC5uYW1lIHx8XG4gICAgICBpbnB1dC5zaGFwZSB8fCB1dGlsLnN0cmluZy51cHBlckZpcnN0KHJlcS5vcGVyYXRpb24pICsgJ1JlcXVlc3QnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBidWlsZFJlcXVlc3QocmVxKSB7XG4gIFJlc3QuYnVpbGRSZXF1ZXN0KHJlcSk7XG5cbiAgLy8gbmV2ZXIgc2VuZCBib2R5IHBheWxvYWQgb24gR0VUL0hFQURcbiAgaWYgKFsnR0VUJywgJ0hFQUQnXS5pbmRleE9mKHJlcS5odHRwUmVxdWVzdC5tZXRob2QpIDwgMCkge1xuICAgIHBvcHVsYXRlQm9keShyZXEpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RFcnJvcihyZXNwKSB7XG4gIFJlc3QuZXh0cmFjdEVycm9yKHJlc3ApO1xuXG4gIHZhciBkYXRhO1xuICB0cnkge1xuICAgIGRhdGEgPSBuZXcgQVdTLlhNTC5QYXJzZXIoKS5wYXJzZShyZXNwLmh0dHBSZXNwb25zZS5ib2R5LnRvU3RyaW5nKCkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZGF0YSA9IHtcbiAgICAgIENvZGU6IHJlc3AuaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUsXG4gICAgICBNZXNzYWdlOiByZXNwLmh0dHBSZXNwb25zZS5zdGF0dXNNZXNzYWdlXG4gICAgfTtcbiAgfVxuXG4gIGlmIChkYXRhLkVycm9ycykgZGF0YSA9IGRhdGEuRXJyb3JzO1xuICBpZiAoZGF0YS5FcnJvcikgZGF0YSA9IGRhdGEuRXJyb3I7XG4gIGlmIChkYXRhLkNvZGUpIHtcbiAgICByZXNwLmVycm9yID0gdXRpbC5lcnJvcihuZXcgRXJyb3IoKSwge1xuICAgICAgY29kZTogZGF0YS5Db2RlLFxuICAgICAgbWVzc2FnZTogZGF0YS5NZXNzYWdlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmVzcC5lcnJvciA9IHV0aWwuZXJyb3IobmV3IEVycm9yKCksIHtcbiAgICAgIGNvZGU6IHJlc3AuaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUsXG4gICAgICBtZXNzYWdlOiBudWxsXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdERhdGEocmVzcCkge1xuICBSZXN0LmV4dHJhY3REYXRhKHJlc3ApO1xuXG4gIHZhciBwYXJzZXI7XG4gIHZhciByZXEgPSByZXNwLnJlcXVlc3Q7XG4gIHZhciBib2R5ID0gcmVzcC5odHRwUmVzcG9uc2UuYm9keTtcbiAgdmFyIG9wZXJhdGlvbiA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dO1xuICB2YXIgb3V0cHV0ID0gb3BlcmF0aW9uLm91dHB1dDtcblxuICB2YXIgaGFzRXZlbnRPdXRwdXQgPSBvcGVyYXRpb24uaGFzRXZlbnRPdXRwdXQ7XG5cbiAgdmFyIHBheWxvYWQgPSBvdXRwdXQucGF5bG9hZDtcbiAgaWYgKHBheWxvYWQpIHtcbiAgICB2YXIgcGF5bG9hZE1lbWJlciA9IG91dHB1dC5tZW1iZXJzW3BheWxvYWRdO1xuICAgIGlmIChwYXlsb2FkTWVtYmVyLmlzRXZlbnRTdHJlYW0pIHtcbiAgICAgIHBhcnNlciA9IG5ldyBBV1MuWE1MLlBhcnNlcigpO1xuICAgICAgcmVzcC5kYXRhW3BheWxvYWRdID0gdXRpbC5jcmVhdGVFdmVudFN0cmVhbShcbiAgICAgICAgQVdTLkh0dHBDbGllbnQuc3RyZWFtc0FwaVZlcnNpb24gPT09IDIgPyByZXNwLmh0dHBSZXNwb25zZS5zdHJlYW0gOiByZXNwLmh0dHBSZXNwb25zZS5ib2R5LFxuICAgICAgICBwYXJzZXIsXG4gICAgICAgIHBheWxvYWRNZW1iZXJcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChwYXlsb2FkTWVtYmVyLnR5cGUgPT09ICdzdHJ1Y3R1cmUnKSB7XG4gICAgICBwYXJzZXIgPSBuZXcgQVdTLlhNTC5QYXJzZXIoKTtcbiAgICAgIHJlc3AuZGF0YVtwYXlsb2FkXSA9IHBhcnNlci5wYXJzZShib2R5LnRvU3RyaW5nKCksIHBheWxvYWRNZW1iZXIpO1xuICAgIH0gZWxzZSBpZiAocGF5bG9hZE1lbWJlci50eXBlID09PSAnYmluYXJ5JyB8fCBwYXlsb2FkTWVtYmVyLmlzU3RyZWFtaW5nKSB7XG4gICAgICByZXNwLmRhdGFbcGF5bG9hZF0gPSBib2R5O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNwLmRhdGFbcGF5bG9hZF0gPSBwYXlsb2FkTWVtYmVyLnRvVHlwZShib2R5KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYm9keS5sZW5ndGggPiAwKSB7XG4gICAgcGFyc2VyID0gbmV3IEFXUy5YTUwuUGFyc2VyKCk7XG4gICAgdmFyIGRhdGEgPSBwYXJzZXIucGFyc2UoYm9keS50b1N0cmluZygpLCBvdXRwdXQpO1xuICAgIHV0aWwudXBkYXRlKHJlc3AuZGF0YSwgZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGJ1aWxkUmVxdWVzdDogYnVpbGRSZXF1ZXN0LFxuICBleHRyYWN0RXJyb3I6IGV4dHJhY3RFcnJvcixcbiAgZXh0cmFjdERhdGE6IGV4dHJhY3REYXRhXG59O1xuXG59LHtcIi4uL2NvcmVcIjoxOSxcIi4uL3V0aWxcIjo3MixcIi4vcmVzdFwiOjQ5fV0sNTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cbmZ1bmN0aW9uIFF1ZXJ5UGFyYW1TZXJpYWxpemVyKCkge1xufVxuXG5RdWVyeVBhcmFtU2VyaWFsaXplci5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24ocGFyYW1zLCBzaGFwZSwgZm4pIHtcbiAgc2VyaWFsaXplU3RydWN0dXJlKCcnLCBwYXJhbXMsIHNoYXBlLCBmbik7XG59O1xuXG5mdW5jdGlvbiB1Y2ZpcnN0KHNoYXBlKSB7XG4gIGlmIChzaGFwZS5pc1F1ZXJ5TmFtZSB8fCBzaGFwZS5hcGkucHJvdG9jb2wgIT09ICdlYzInKSB7XG4gICAgcmV0dXJuIHNoYXBlLm5hbWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNoYXBlLm5hbWVbMF0udG9VcHBlckNhc2UoKSArIHNoYXBlLm5hbWUuc3Vic3RyKDEpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZVN0cnVjdHVyZShwcmVmaXgsIHN0cnVjdCwgcnVsZXMsIGZuKSB7XG4gIHV0aWwuZWFjaChydWxlcy5tZW1iZXJzLCBmdW5jdGlvbihuYW1lLCBtZW1iZXIpIHtcbiAgICB2YXIgdmFsdWUgPSBzdHJ1Y3RbbmFtZV07XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgIHZhciBtZW1iZXJOYW1lID0gdWNmaXJzdChtZW1iZXIpO1xuICAgIG1lbWJlck5hbWUgPSBwcmVmaXggPyBwcmVmaXggKyAnLicgKyBtZW1iZXJOYW1lIDogbWVtYmVyTmFtZTtcbiAgICBzZXJpYWxpemVNZW1iZXIobWVtYmVyTmFtZSwgdmFsdWUsIG1lbWJlciwgZm4pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplTWFwKG5hbWUsIG1hcCwgcnVsZXMsIGZuKSB7XG4gIHZhciBpID0gMTtcbiAgdXRpbC5lYWNoKG1hcCwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgcHJlZml4ID0gcnVsZXMuZmxhdHRlbmVkID8gJy4nIDogJy5lbnRyeS4nO1xuICAgIHZhciBwb3NpdGlvbiA9IHByZWZpeCArIChpKyspICsgJy4nO1xuICAgIHZhciBrZXlOYW1lID0gcG9zaXRpb24gKyAocnVsZXMua2V5Lm5hbWUgfHwgJ2tleScpO1xuICAgIHZhciB2YWx1ZU5hbWUgPSBwb3NpdGlvbiArIChydWxlcy52YWx1ZS5uYW1lIHx8ICd2YWx1ZScpO1xuICAgIHNlcmlhbGl6ZU1lbWJlcihuYW1lICsga2V5TmFtZSwga2V5LCBydWxlcy5rZXksIGZuKTtcbiAgICBzZXJpYWxpemVNZW1iZXIobmFtZSArIHZhbHVlTmFtZSwgdmFsdWUsIHJ1bGVzLnZhbHVlLCBmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVMaXN0KG5hbWUsIGxpc3QsIHJ1bGVzLCBmbikge1xuICB2YXIgbWVtYmVyUnVsZXMgPSBydWxlcy5tZW1iZXIgfHwge307XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgZm4uY2FsbCh0aGlzLCBuYW1lLCBudWxsKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB1dGlsLmFycmF5RWFjaChsaXN0LCBmdW5jdGlvbiAodiwgbikge1xuICAgIHZhciBzdWZmaXggPSAnLicgKyAobiArIDEpO1xuICAgIGlmIChydWxlcy5hcGkucHJvdG9jb2wgPT09ICdlYzInKSB7XG4gICAgICAvLyBEbyBub3RoaW5nIGZvciBFQzJcbiAgICAgIHN1ZmZpeCA9IHN1ZmZpeCArICcnOyAvLyBtYWtlIGxpbnRlciBoYXBweVxuICAgIH0gZWxzZSBpZiAocnVsZXMuZmxhdHRlbmVkKSB7XG4gICAgICBpZiAobWVtYmVyUnVsZXMubmFtZSkge1xuICAgICAgICB2YXIgcGFydHMgPSBuYW1lLnNwbGl0KCcuJyk7XG4gICAgICAgIHBhcnRzLnBvcCgpO1xuICAgICAgICBwYXJ0cy5wdXNoKHVjZmlyc3QobWVtYmVyUnVsZXMpKTtcbiAgICAgICAgbmFtZSA9IHBhcnRzLmpvaW4oJy4nKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3VmZml4ID0gJy4nICsgKG1lbWJlclJ1bGVzLm5hbWUgPyBtZW1iZXJSdWxlcy5uYW1lIDogJ21lbWJlcicpICsgc3VmZml4O1xuICAgIH1cbiAgICBzZXJpYWxpemVNZW1iZXIobmFtZSArIHN1ZmZpeCwgdiwgbWVtYmVyUnVsZXMsIGZuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZU1lbWJlcihuYW1lLCB2YWx1ZSwgcnVsZXMsIGZuKSB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gIGlmIChydWxlcy50eXBlID09PSAnc3RydWN0dXJlJykge1xuICAgIHNlcmlhbGl6ZVN0cnVjdHVyZShuYW1lLCB2YWx1ZSwgcnVsZXMsIGZuKTtcbiAgfSBlbHNlIGlmIChydWxlcy50eXBlID09PSAnbGlzdCcpIHtcbiAgICBzZXJpYWxpemVMaXN0KG5hbWUsIHZhbHVlLCBydWxlcywgZm4pO1xuICB9IGVsc2UgaWYgKHJ1bGVzLnR5cGUgPT09ICdtYXAnKSB7XG4gICAgc2VyaWFsaXplTWFwKG5hbWUsIHZhbHVlLCBydWxlcywgZm4pO1xuICB9IGVsc2Uge1xuICAgIGZuKG5hbWUsIHJ1bGVzLnRvV2lyZUZvcm1hdCh2YWx1ZSkudG9TdHJpbmcoKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBRdWVyeVBhcmFtU2VyaWFsaXplcjtcblxufSx7XCIuLi91dGlsXCI6NzJ9XSw1MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy9wcm92aWRlIHJlYWx0aW1lIGNsb2NrIGZvciBwZXJmb3JtYW5jZSBtZWFzdXJlbWVudFxuICBub3c6IGZ1bmN0aW9uIG5vdygpIHtcbiAgICBpZiAodHlwZW9mIHBlcmZvcm1hbmNlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgfVxuICAgIHJldHVybiBEYXRlLm5vdygpO1xuICB9XG59O1xuXG59LHt9XSw1NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIHJlZ2lvbkNvbmZpZyA9IHJlcXVpcmUoJy4vcmVnaW9uX2NvbmZpZ19kYXRhLmpzb24nKTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVSZWdpb25QcmVmaXgocmVnaW9uKSB7XG4gIGlmICghcmVnaW9uKSByZXR1cm4gbnVsbDtcblxuICB2YXIgcGFydHMgPSByZWdpb24uc3BsaXQoJy0nKTtcbiAgaWYgKHBhcnRzLmxlbmd0aCA8IDMpIHJldHVybiBudWxsO1xuICByZXR1cm4gcGFydHMuc2xpY2UoMCwgcGFydHMubGVuZ3RoIC0gMikuam9pbignLScpICsgJy0qJztcbn1cblxuZnVuY3Rpb24gZGVyaXZlZEtleXMoc2VydmljZSkge1xuICB2YXIgcmVnaW9uID0gc2VydmljZS5jb25maWcucmVnaW9uO1xuICB2YXIgcmVnaW9uUHJlZml4ID0gZ2VuZXJhdGVSZWdpb25QcmVmaXgocmVnaW9uKTtcbiAgdmFyIGVuZHBvaW50UHJlZml4ID0gc2VydmljZS5hcGkuZW5kcG9pbnRQcmVmaXg7XG5cbiAgcmV0dXJuIFtcbiAgICBbcmVnaW9uLCBlbmRwb2ludFByZWZpeF0sXG4gICAgW3JlZ2lvblByZWZpeCwgZW5kcG9pbnRQcmVmaXhdLFxuICAgIFtyZWdpb24sICcqJ10sXG4gICAgW3JlZ2lvblByZWZpeCwgJyonXSxcbiAgICBbJyonLCBlbmRwb2ludFByZWZpeF0sXG4gICAgWycqJywgJyonXVxuICBdLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW1bMF0gJiYgaXRlbVsxXSA/IGl0ZW0uam9pbignLycpIDogbnVsbDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5Q29uZmlnKHNlcnZpY2UsIGNvbmZpZykge1xuICB1dGlsLmVhY2goY29uZmlnLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSA9PT0gJ2dsb2JhbEVuZHBvaW50JykgcmV0dXJuO1xuICAgIGlmIChzZXJ2aWNlLmNvbmZpZ1trZXldID09PSB1bmRlZmluZWQgfHwgc2VydmljZS5jb25maWdba2V5XSA9PT0gbnVsbCkge1xuICAgICAgc2VydmljZS5jb25maWdba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZUVuZHBvaW50KHNlcnZpY2UpIHtcbiAgdmFyIGtleXMgPSBkZXJpdmVkS2V5cyhzZXJ2aWNlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFrZXkpIGNvbnRpbnVlO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZWdpb25Db25maWcucnVsZXMsIGtleSkpIHtcbiAgICAgIHZhciBjb25maWcgPSByZWdpb25Db25maWcucnVsZXNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25maWcgPSByZWdpb25Db25maWcucGF0dGVybnNbY29uZmlnXTtcbiAgICAgIH1cblxuICAgICAgLy8gc2V0IGR1YWxzdGFjayBlbmRwb2ludFxuICAgICAgaWYgKHNlcnZpY2UuY29uZmlnLnVzZUR1YWxzdGFjayAmJiB1dGlsLmlzRHVhbHN0YWNrQXZhaWxhYmxlKHNlcnZpY2UpKSB7XG4gICAgICAgIGNvbmZpZyA9IHV0aWwuY29weShjb25maWcpO1xuICAgICAgICBjb25maWcuZW5kcG9pbnQgPSAne3NlcnZpY2V9LmR1YWxzdGFjay57cmVnaW9ufS5hbWF6b25hd3MuY29tJztcbiAgICAgIH1cblxuICAgICAgLy8gc2V0IGdsb2JhbCBlbmRwb2ludFxuICAgICAgc2VydmljZS5pc0dsb2JhbEVuZHBvaW50ID0gISFjb25maWcuZ2xvYmFsRW5kcG9pbnQ7XG5cbiAgICAgIC8vIHNpZ25hdHVyZSB2ZXJzaW9uXG4gICAgICBpZiAoIWNvbmZpZy5zaWduYXR1cmVWZXJzaW9uKSBjb25maWcuc2lnbmF0dXJlVmVyc2lvbiA9ICd2NCc7XG5cbiAgICAgIC8vIG1lcmdlIGNvbmZpZ1xuICAgICAgYXBwbHlDb25maWcoc2VydmljZSwgY29uZmlnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBjb25maWd1cmVFbmRwb2ludDtcblxufSx7XCIuL3JlZ2lvbl9jb25maWdfZGF0YS5qc29uXCI6NTUsXCIuL3V0aWxcIjo3Mn1dLDU1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzPXtcbiAgXCJydWxlc1wiOiB7XG4gICAgXCIqLypcIjoge1xuICAgICAgXCJlbmRwb2ludFwiOiBcIntzZXJ2aWNlfS57cmVnaW9ufS5hbWF6b25hd3MuY29tXCJcbiAgICB9LFxuICAgIFwiY24tKi8qXCI6IHtcbiAgICAgIFwiZW5kcG9pbnRcIjogXCJ7c2VydmljZX0ue3JlZ2lvbn0uYW1hem9uYXdzLmNvbS5jblwiXG4gICAgfSxcbiAgICBcIiovYnVkZ2V0c1wiOiBcImdsb2JhbFNTTFwiLFxuICAgIFwiKi9jbG91ZGZyb250XCI6IFwiZ2xvYmFsU1NMXCIsXG4gICAgXCIqL2lhbVwiOiBcImdsb2JhbFNTTFwiLFxuICAgIFwiKi9zdHNcIjogXCJnbG9iYWxTU0xcIixcbiAgICBcIiovaW1wb3J0ZXhwb3J0XCI6IHtcbiAgICAgIFwiZW5kcG9pbnRcIjogXCJ7c2VydmljZX0uYW1hem9uYXdzLmNvbVwiLFxuICAgICAgXCJzaWduYXR1cmVWZXJzaW9uXCI6IFwidjJcIixcbiAgICAgIFwiZ2xvYmFsRW5kcG9pbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAgXCIqL3JvdXRlNTNcIjoge1xuICAgICAgXCJlbmRwb2ludFwiOiBcImh0dHBzOi8ve3NlcnZpY2V9LmFtYXpvbmF3cy5jb21cIixcbiAgICAgIFwic2lnbmF0dXJlVmVyc2lvblwiOiBcInYzaHR0cHNcIixcbiAgICAgIFwiZ2xvYmFsRW5kcG9pbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAgXCIqL3dhZlwiOiBcImdsb2JhbFNTTFwiLFxuICAgIFwidXMtZ292LSovaWFtXCI6IFwiZ2xvYmFsR292Q2xvdWRcIixcbiAgICBcInVzLWdvdi0qL3N0c1wiOiB7XG4gICAgICBcImVuZHBvaW50XCI6IFwie3NlcnZpY2V9LntyZWdpb259LmFtYXpvbmF3cy5jb21cIlxuICAgIH0sXG4gICAgXCJ1cy1nb3Ytd2VzdC0xL3MzXCI6IFwiczNzaWduYXR1cmVcIixcbiAgICBcInVzLXdlc3QtMS9zM1wiOiBcInMzc2lnbmF0dXJlXCIsXG4gICAgXCJ1cy13ZXN0LTIvczNcIjogXCJzM3NpZ25hdHVyZVwiLFxuICAgIFwiZXUtd2VzdC0xL3MzXCI6IFwiczNzaWduYXR1cmVcIixcbiAgICBcImFwLXNvdXRoZWFzdC0xL3MzXCI6IFwiczNzaWduYXR1cmVcIixcbiAgICBcImFwLXNvdXRoZWFzdC0yL3MzXCI6IFwiczNzaWduYXR1cmVcIixcbiAgICBcImFwLW5vcnRoZWFzdC0xL3MzXCI6IFwiczNzaWduYXR1cmVcIixcbiAgICBcInNhLWVhc3QtMS9zM1wiOiBcInMzc2lnbmF0dXJlXCIsXG4gICAgXCJ1cy1lYXN0LTEvczNcIjoge1xuICAgICAgXCJlbmRwb2ludFwiOiBcIntzZXJ2aWNlfS5hbWF6b25hd3MuY29tXCIsXG4gICAgICBcInNpZ25hdHVyZVZlcnNpb25cIjogXCJzM1wiXG4gICAgfSxcbiAgICBcInVzLWVhc3QtMS9zZGJcIjoge1xuICAgICAgXCJlbmRwb2ludFwiOiBcIntzZXJ2aWNlfS5hbWF6b25hd3MuY29tXCIsXG4gICAgICBcInNpZ25hdHVyZVZlcnNpb25cIjogXCJ2MlwiXG4gICAgfSxcbiAgICBcIiovc2RiXCI6IHtcbiAgICAgIFwiZW5kcG9pbnRcIjogXCJ7c2VydmljZX0ue3JlZ2lvbn0uYW1hem9uYXdzLmNvbVwiLFxuICAgICAgXCJzaWduYXR1cmVWZXJzaW9uXCI6IFwidjJcIlxuICAgIH1cbiAgfSxcblxuICBcInBhdHRlcm5zXCI6IHtcbiAgICBcImdsb2JhbFNTTFwiOiB7XG4gICAgICBcImVuZHBvaW50XCI6IFwiaHR0cHM6Ly97c2VydmljZX0uYW1hem9uYXdzLmNvbVwiLFxuICAgICAgXCJnbG9iYWxFbmRwb2ludFwiOiB0cnVlXG4gICAgfSxcbiAgICBcImdsb2JhbEdvdkNsb3VkXCI6IHtcbiAgICAgIFwiZW5kcG9pbnRcIjogXCJ7c2VydmljZX0udXMtZ292LmFtYXpvbmF3cy5jb21cIlxuICAgIH0sXG4gICAgXCJzM3NpZ25hdHVyZVwiOiB7XG4gICAgICBcImVuZHBvaW50XCI6IFwie3NlcnZpY2V9LntyZWdpb259LmFtYXpvbmF3cy5jb21cIixcbiAgICAgIFwic2lnbmF0dXJlVmVyc2lvblwiOiBcInMzXCJcbiAgICB9XG4gIH1cbn1cblxufSx7fV0sNTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbnZhciBBV1MgPSByZXF1aXJlKCcuL2NvcmUnKTtcbnZhciBBY2NlcHRvclN0YXRlTWFjaGluZSA9IHJlcXVpcmUoJy4vc3RhdGVfbWFjaGluZScpO1xudmFyIGluaGVyaXQgPSBBV1MudXRpbC5pbmhlcml0O1xudmFyIGRvbWFpbiA9IEFXUy51dGlsLmRvbWFpbjtcbnZhciBqbWVzcGF0aCA9IHJlcXVpcmUoJ2ptZXNwYXRoJyk7XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbnZhciBoYXJkRXJyb3JTdGF0ZXMgPSB7c3VjY2VzczogMSwgZXJyb3I6IDEsIGNvbXBsZXRlOiAxfTtcblxuZnVuY3Rpb24gaXNUZXJtaW5hbFN0YXRlKG1hY2hpbmUpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChoYXJkRXJyb3JTdGF0ZXMsIG1hY2hpbmUuX2FzbS5jdXJyZW50U3RhdGUpO1xufVxuXG52YXIgZnNtID0gbmV3IEFjY2VwdG9yU3RhdGVNYWNoaW5lKCk7XG5mc20uc2V0dXBTdGF0ZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRyYW5zaXRpb24gPSBmdW5jdGlvbihfLCBkb25lKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNlbGYuX2hhbHRIYW5kbGVyc09uRXJyb3IgPSBmYWxzZTtcblxuICAgIHNlbGYuZW1pdChzZWxmLl9hc20uY3VycmVudFN0YXRlLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgaWYgKGlzVGVybWluYWxTdGF0ZShzZWxmKSkge1xuICAgICAgICAgIGlmIChkb21haW4gJiYgc2VsZi5kb21haW4gaW5zdGFuY2VvZiBkb21haW4uRG9tYWluKSB7XG4gICAgICAgICAgICBlcnIuZG9tYWluRW1pdHRlciA9IHNlbGY7XG4gICAgICAgICAgICBlcnIuZG9tYWluID0gc2VsZi5kb21haW47XG4gICAgICAgICAgICBlcnIuZG9tYWluVGhyb3duID0gZmFsc2U7XG4gICAgICAgICAgICBzZWxmLmRvbWFpbi5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5yZXNwb25zZS5lcnJvciA9IGVycjtcbiAgICAgICAgICBkb25lKGVycik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvbmUoc2VsZi5yZXNwb25zZS5lcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfTtcblxuICB0aGlzLmFkZFN0YXRlKCd2YWxpZGF0ZScsICdidWlsZCcsICdlcnJvcicsIHRyYW5zaXRpb24pO1xuICB0aGlzLmFkZFN0YXRlKCdidWlsZCcsICdhZnRlckJ1aWxkJywgJ3Jlc3RhcnQnLCB0cmFuc2l0aW9uKTtcbiAgdGhpcy5hZGRTdGF0ZSgnYWZ0ZXJCdWlsZCcsICdzaWduJywgJ3Jlc3RhcnQnLCB0cmFuc2l0aW9uKTtcbiAgdGhpcy5hZGRTdGF0ZSgnc2lnbicsICdzZW5kJywgJ3JldHJ5JywgdHJhbnNpdGlvbik7XG4gIHRoaXMuYWRkU3RhdGUoJ3JldHJ5JywgJ2FmdGVyUmV0cnknLCAnYWZ0ZXJSZXRyeScsIHRyYW5zaXRpb24pO1xuICB0aGlzLmFkZFN0YXRlKCdhZnRlclJldHJ5JywgJ3NpZ24nLCAnZXJyb3InLCB0cmFuc2l0aW9uKTtcbiAgdGhpcy5hZGRTdGF0ZSgnc2VuZCcsICd2YWxpZGF0ZVJlc3BvbnNlJywgJ3JldHJ5JywgdHJhbnNpdGlvbik7XG4gIHRoaXMuYWRkU3RhdGUoJ3ZhbGlkYXRlUmVzcG9uc2UnLCAnZXh0cmFjdERhdGEnLCAnZXh0cmFjdEVycm9yJywgdHJhbnNpdGlvbik7XG4gIHRoaXMuYWRkU3RhdGUoJ2V4dHJhY3RFcnJvcicsICdleHRyYWN0RGF0YScsICdyZXRyeScsIHRyYW5zaXRpb24pO1xuICB0aGlzLmFkZFN0YXRlKCdleHRyYWN0RGF0YScsICdzdWNjZXNzJywgJ3JldHJ5JywgdHJhbnNpdGlvbik7XG4gIHRoaXMuYWRkU3RhdGUoJ3Jlc3RhcnQnLCAnYnVpbGQnLCAnZXJyb3InLCB0cmFuc2l0aW9uKTtcbiAgdGhpcy5hZGRTdGF0ZSgnc3VjY2VzcycsICdjb21wbGV0ZScsICdjb21wbGV0ZScsIHRyYW5zaXRpb24pO1xuICB0aGlzLmFkZFN0YXRlKCdlcnJvcicsICdjb21wbGV0ZScsICdjb21wbGV0ZScsIHRyYW5zaXRpb24pO1xuICB0aGlzLmFkZFN0YXRlKCdjb21wbGV0ZScsIG51bGwsIG51bGwsIHRyYW5zaXRpb24pO1xufTtcbmZzbS5zZXR1cFN0YXRlcygpO1xuXG4vKipcbiAqICMjIEFzeW5jaHJvbm91cyBSZXF1ZXN0c1xuICpcbiAqIEFsbCByZXF1ZXN0cyBtYWRlIHRocm91Z2ggdGhlIFNESyBhcmUgYXN5bmNocm9ub3VzIGFuZCB1c2UgYVxuICogY2FsbGJhY2sgaW50ZXJmYWNlLiBFYWNoIHNlcnZpY2UgbWV0aG9kIHRoYXQga2lja3Mgb2ZmIGEgcmVxdWVzdFxuICogcmV0dXJucyBhbiBgQVdTLlJlcXVlc3RgIG9iamVjdCB0aGF0IHlvdSBjYW4gdXNlIHRvIHJlZ2lzdGVyXG4gKiBjYWxsYmFja3MuXG4gKlxuICogRm9yIGV4YW1wbGUsIHRoZSBmb2xsb3dpbmcgc2VydmljZSBtZXRob2QgcmV0dXJucyB0aGUgcmVxdWVzdFxuICogb2JqZWN0IGFzIFwicmVxdWVzdFwiLCB3aGljaCBjYW4gYmUgdXNlZCB0byByZWdpc3RlciBjYWxsYmFja3M6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogLy8gcmVxdWVzdCBpcyBhbiBBV1MuUmVxdWVzdCBvYmplY3RcbiAqIHZhciByZXF1ZXN0ID0gZWMyLmRlc2NyaWJlSW5zdGFuY2VzKCk7XG4gKlxuICogLy8gcmVnaXN0ZXIgY2FsbGJhY2tzIG9uIHJlcXVlc3QgdG8gcmV0cmlldmUgcmVzcG9uc2UgZGF0YVxuICogcmVxdWVzdC5vbignc3VjY2VzcycsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gKiAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBXaGVuIGEgcmVxdWVzdCBpcyByZWFkeSB0byBiZSBzZW50LCB0aGUge3NlbmR9IG1ldGhvZCBzaG91bGRcbiAqIGJlIGNhbGxlZDpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiByZXF1ZXN0LnNlbmQoKTtcbiAqIGBgYFxuICpcbiAqIFNpbmNlIHJlZ2lzdGVyZWQgY2FsbGJhY2tzIG1heSBvciBtYXkgbm90IGJlIGlkZW1wb3RlbnQsIHJlcXVlc3RzIHNob3VsZCBvbmx5XG4gKiBiZSBzZW50IG9uY2UuIFRvIHBlcmZvcm0gdGhlIHNhbWUgb3BlcmF0aW9uIG11bHRpcGxlIHRpbWVzLCB5b3Ugd2lsbCBuZWVkIHRvXG4gKiBjcmVhdGUgbXVsdGlwbGUgcmVxdWVzdCBvYmplY3RzLCBlYWNoIHdpdGggaXRzIG93biByZWdpc3RlcmVkIGNhbGxiYWNrcy5cbiAqXG4gKiAjIyBSZW1vdmluZyBEZWZhdWx0IExpc3RlbmVycyBmb3IgRXZlbnRzXG4gKlxuICogUmVxdWVzdCBvYmplY3RzIGFyZSBidWlsdCB3aXRoIGRlZmF1bHQgbGlzdGVuZXJzIGZvciB0aGUgdmFyaW91cyBldmVudHMsXG4gKiBkZXBlbmRpbmcgb24gdGhlIHNlcnZpY2UgdHlwZS4gSW4gc29tZSBjYXNlcywgeW91IG1heSB3YW50IHRvIHJlbW92ZVxuICogc29tZSBidWlsdC1pbiBsaXN0ZW5lcnMgdG8gY3VzdG9taXplIGJlaGF2aW91ci4gRG9pbmcgdGhpcyByZXF1aXJlc1xuICogYWNjZXNzIHRvIHRoZSBidWlsdC1pbiBsaXN0ZW5lciBmdW5jdGlvbnMsIHdoaWNoIGFyZSBleHBvc2VkIHRocm91Z2hcbiAqIHRoZSB7QVdTLkV2ZW50TGlzdGVuZXJzLkNvcmV9IG5hbWVzcGFjZS4gRm9yIGluc3RhbmNlLCB5b3UgbWF5XG4gKiB3YW50IHRvIGN1c3RvbWl6ZSB0aGUgSFRUUCBoYW5kbGVyIHVzZWQgd2hlbiBzZW5kaW5nIGEgcmVxdWVzdC4gSW4gdGhpc1xuICogY2FzZSwgeW91IGNhbiByZW1vdmUgdGhlIGJ1aWx0LWluIGxpc3RlbmVyIGFzc29jaWF0ZWQgd2l0aCB0aGUgJ3NlbmQnXG4gKiBldmVudCwgdGhlIHtBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZS5TRU5EfSBsaXN0ZW5lciBhbmQgYWRkIHlvdXIgb3duLlxuICpcbiAqICMjIE11bHRpcGxlIENhbGxiYWNrcyBhbmQgQ2hhaW5pbmdcbiAqXG4gKiBZb3UgY2FuIHJlZ2lzdGVyIG11bHRpcGxlIGNhbGxiYWNrcyBvbiBhbnkgcmVxdWVzdCBvYmplY3QuIFRoZVxuICogY2FsbGJhY2tzIGNhbiBiZSByZWdpc3RlcmVkIGZvciBkaWZmZXJlbnQgZXZlbnRzLCBvciBhbGwgZm9yIHRoZVxuICogc2FtZSBldmVudC4gSW4gYWRkaXRpb24sIHlvdSBjYW4gY2hhaW4gY2FsbGJhY2sgcmVnaXN0cmF0aW9uLCBmb3JcbiAqIGV4YW1wbGU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogcmVxdWVzdC5cbiAqICAgb24oJ3N1Y2Nlc3MnLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICogICAgIGNvbnNvbGUubG9nKFwiU3VjY2VzcyFcIik7XG4gKiAgIH0pLlxuICogICBvbignZXJyb3InLCBmdW5jdGlvbihlcnJvciwgcmVzcG9uc2UpIHtcbiAqICAgICBjb25zb2xlLmxvZyhcIkVycm9yIVwiKTtcbiAqICAgfSkuXG4gKiAgIG9uKCdjb21wbGV0ZScsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gKiAgICAgY29uc29sZS5sb2coXCJBbHdheXMhXCIpO1xuICogICB9KS5cbiAqICAgc2VuZCgpO1xuICogYGBgXG4gKlxuICogVGhlIGFib3ZlIGV4YW1wbGUgd2lsbCBwcmludCBlaXRoZXIgXCJTdWNjZXNzISBBbHdheXMhXCIsIG9yIFwiRXJyb3IhIEFsd2F5cyFcIixcbiAqIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSByZXF1ZXN0IHN1Y2NlZWRlZCBvciBub3QuXG4gKlxuICogQCFhdHRyaWJ1dGUgaHR0cFJlcXVlc3RcbiAqICAgQHJlYWRvbmx5XG4gKiAgIEAhZ3JvdXAgSFRUUCBQcm9wZXJ0aWVzXG4gKiAgIEByZXR1cm4gW0FXUy5IdHRwUmVxdWVzdF0gdGhlIHJhdyBIVFRQIHJlcXVlc3Qgb2JqZWN0XG4gKiAgICAgY29udGFpbmluZyByZXF1ZXN0IGhlYWRlcnMgYW5kIGJvZHkgaW5mb3JtYXRpb25cbiAqICAgICBzZW50IGJ5IHRoZSBzZXJ2aWNlLlxuICpcbiAqIEAhYXR0cmlidXRlIHN0YXJ0VGltZVxuICogICBAcmVhZG9ubHlcbiAqICAgQCFncm91cCBPcGVyYXRpb24gUHJvcGVydGllc1xuICogICBAcmV0dXJuIFtEYXRlXSB0aGUgdGltZSB0aGF0IHRoZSByZXF1ZXN0IHN0YXJ0ZWRcbiAqXG4gKiBAIWdyb3VwIFJlcXVlc3QgQnVpbGRpbmcgRXZlbnRzXG4gKlxuICogQCFldmVudCB2YWxpZGF0ZShyZXF1ZXN0KVxuICogICBUcmlnZ2VyZWQgd2hlbiBhIHJlcXVlc3QgaXMgYmVpbmcgdmFsaWRhdGVkLiBMaXN0ZW5lcnNcbiAqICAgc2hvdWxkIHRocm93IGFuIGVycm9yIGlmIHRoZSByZXF1ZXN0IHNob3VsZCBub3QgYmUgc2VudC5cbiAqICAgQHBhcmFtIHJlcXVlc3QgW1JlcXVlc3RdIHRoZSByZXF1ZXN0IG9iamVjdCBiZWluZyBzZW50XG4gKiAgIEBzZWUgQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuVkFMSURBVEVfQ1JFREVOVElBTFNcbiAqICAgQHNlZSBBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZS5WQUxJREFURV9SRUdJT05cbiAqICAgQGV4YW1wbGUgRW5zdXJpbmcgdGhhdCBhIGNlcnRhaW4gcGFyYW1ldGVyIGlzIHNldCBiZWZvcmUgc2VuZGluZyBhIHJlcXVlc3RcbiAqICAgICB2YXIgcmVxID0gczMucHV0T2JqZWN0KHBhcmFtcyk7XG4gKiAgICAgcmVxLm9uKCd2YWxpZGF0ZScsIGZ1bmN0aW9uKCkge1xuICogICAgICAgaWYgKCFyZXEucGFyYW1zLkJvZHkubWF0Y2goL15IZWxsb1xccy8pKSB7XG4gKiAgICAgICAgIHRocm93IG5ldyBFcnJvcignQm9keSBtdXN0IHN0YXJ0IHdpdGggXCJIZWxsbyBcIicpO1xuICogICAgICAgfVxuICogICAgIH0pO1xuICogICAgIHJlcS5zZW5kKGZ1bmN0aW9uKGVyciwgZGF0YSkgeyAuLi4gfSk7XG4gKlxuICogQCFldmVudCBidWlsZChyZXF1ZXN0KVxuICogICBUcmlnZ2VyZWQgd2hlbiB0aGUgcmVxdWVzdCBwYXlsb2FkIGlzIGJlaW5nIGJ1aWx0LiBMaXN0ZW5lcnNcbiAqICAgc2hvdWxkIGZpbGwgdGhlIG5lY2Vzc2FyeSBpbmZvcm1hdGlvbiB0byBzZW5kIHRoZSByZXF1ZXN0XG4gKiAgIG92ZXIgSFRUUC5cbiAqICAgQHBhcmFtIChzZWUgQVdTLlJlcXVlc3R+dmFsaWRhdGUpXG4gKiAgIEBleGFtcGxlIEFkZCBhIGN1c3RvbSBIVFRQIGhlYWRlciB0byBhIHJlcXVlc3RcbiAqICAgICB2YXIgcmVxID0gczMucHV0T2JqZWN0KHBhcmFtcyk7XG4gKiAgICAgcmVxLm9uKCdidWlsZCcsIGZ1bmN0aW9uKCkge1xuICogICAgICAgcmVxLmh0dHBSZXF1ZXN0LmhlYWRlcnNbJ0N1c3RvbS1IZWFkZXInXSA9ICd2YWx1ZSc7XG4gKiAgICAgfSk7XG4gKiAgICAgcmVxLnNlbmQoZnVuY3Rpb24oZXJyLCBkYXRhKSB7IC4uLiB9KTtcbiAqXG4gKiBAIWV2ZW50IHNpZ24ocmVxdWVzdClcbiAqICAgVHJpZ2dlcmVkIHdoZW4gdGhlIHJlcXVlc3QgaXMgYmVpbmcgc2lnbmVkLiBMaXN0ZW5lcnMgc2hvdWxkXG4gKiAgIGFkZCB0aGUgY29ycmVjdCBhdXRoZW50aWNhdGlvbiBoZWFkZXJzIGFuZC9vciBhZGp1c3QgdGhlIGJvZHksXG4gKiAgIGRlcGVuZGluZyBvbiB0aGUgYXV0aGVudGljYXRpb24gbWVjaGFuaXNtIGJlaW5nIHVzZWQuXG4gKiAgIEBwYXJhbSAoc2VlIEFXUy5SZXF1ZXN0fnZhbGlkYXRlKVxuICpcbiAqIEAhZ3JvdXAgUmVxdWVzdCBTZW5kaW5nIEV2ZW50c1xuICpcbiAqIEAhZXZlbnQgc2VuZChyZXNwb25zZSlcbiAqICAgVHJpZ2dlcmVkIHdoZW4gdGhlIHJlcXVlc3QgaXMgcmVhZHkgdG8gYmUgc2VudC4gTGlzdGVuZXJzXG4gKiAgIHNob3VsZCBjYWxsIHRoZSB1bmRlcmx5aW5nIHRyYW5zcG9ydCBsYXllciB0byBpbml0aWF0ZVxuICogICB0aGUgc2VuZGluZyBvZiB0aGUgcmVxdWVzdC5cbiAqICAgQHBhcmFtIHJlc3BvbnNlIFtSZXNwb25zZV0gdGhlIHJlc3BvbnNlIG9iamVjdFxuICogICBAY29udGV4dCBbUmVxdWVzdF0gdGhlIHJlcXVlc3Qgb2JqZWN0IHRoYXQgd2FzIHNlbnRcbiAqICAgQHNlZSBBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZS5TRU5EXG4gKlxuICogQCFldmVudCByZXRyeShyZXNwb25zZSlcbiAqICAgVHJpZ2dlcmVkIHdoZW4gYSByZXF1ZXN0IGZhaWxlZCBhbmQgbWlnaHQgbmVlZCB0byBiZSByZXRyaWVkIG9yIHJlZGlyZWN0ZWQuXG4gKiAgIElmIHRoZSByZXNwb25zZSBpcyByZXRyeWFibGUsIHRoZSBsaXN0ZW5lciBzaG91bGQgc2V0IHRoZVxuICogICBgcmVzcG9uc2UuZXJyb3IucmV0cnlhYmxlYCBwcm9wZXJ0eSB0byBgdHJ1ZWAsIGFuZCBvcHRpb25hbGx5IHNldFxuICogICBgcmVzcG9uc2UuZXJyb3IucmV0cnlEZWxheWAgdG8gdGhlIG1pbGxpc2Vjb25kIGRlbGF5IGZvciB0aGUgbmV4dCBhdHRlbXB0LlxuICogICBJbiB0aGUgY2FzZSBvZiBhIHJlZGlyZWN0LCBgcmVzcG9uc2UuZXJyb3IucmVkaXJlY3RgIHNob3VsZCBiZSBzZXQgdG9cbiAqICAgYHRydWVgIHdpdGggYHJldHJ5RGVsYXlgIHNldCB0byBhbiBvcHRpb25hbCBkZWxheSBvbiB0aGUgbmV4dCByZXF1ZXN0LlxuICpcbiAqICAgSWYgYSBsaXN0ZW5lciBkZWNpZGVzIHRoYXQgYSByZXF1ZXN0IHNob3VsZCBub3QgYmUgcmV0cmllZCxcbiAqICAgaXQgc2hvdWxkIHNldCBib3RoIGByZXRyeWFibGVgIGFuZCBgcmVkaXJlY3RgIHRvIGZhbHNlLlxuICpcbiAqICAgTm90ZSB0aGF0IGEgcmV0cnlhYmxlIGVycm9yIHdpbGwgYmUgcmV0cmllZCBhdCBtb3N0XG4gKiAgIHtBV1MuQ29uZmlnLm1heFJldHJpZXN9IHRpbWVzIChiYXNlZCBvbiB0aGUgc2VydmljZSBvYmplY3QncyBjb25maWcpLlxuICogICBTaW1pbGFybHksIGEgcmVxdWVzdCB0aGF0IGlzIHJlZGlyZWN0ZWQgd2lsbCBvbmx5IHJlZGlyZWN0IGF0IG1vc3RcbiAqICAge0FXUy5Db25maWcubWF4UmVkaXJlY3RzfSB0aW1lcy5cbiAqXG4gKiAgIEBwYXJhbSAoc2VlIEFXUy5SZXF1ZXN0fnNlbmQpXG4gKiAgIEBjb250ZXh0IChzZWUgQVdTLlJlcXVlc3R+c2VuZClcbiAqICAgQGV4YW1wbGUgQWRkaW5nIGEgY3VzdG9tIHJldHJ5IGZvciBhIDQwNCByZXNwb25zZVxuICogICAgIHJlcXVlc3Qub24oJ3JldHJ5JywgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAqICAgICAgIC8vIHRoaXMgcmVzb3VyY2UgaXMgbm90IHlldCBhdmFpbGFibGUsIHdhaXQgMTAgc2Vjb25kcyB0byBnZXQgaXQgYWdhaW5cbiAqICAgICAgIGlmIChyZXNwb25zZS5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gNDA0ICYmIHJlc3BvbnNlLmVycm9yKSB7XG4gKiAgICAgICAgIHJlc3BvbnNlLmVycm9yLnJldHJ5YWJsZSA9IHRydWU7ICAgLy8gcmV0cnkgdGhpcyBlcnJvclxuICogICAgICAgICByZXNwb25zZS5lcnJvci5yZXRyeURlbGF5ID0gMTAwMDA7IC8vIHdhaXQgMTAgc2Vjb25kc1xuICogICAgICAgfVxuICogICAgIH0pO1xuICpcbiAqIEAhZ3JvdXAgRGF0YSBQYXJzaW5nIEV2ZW50c1xuICpcbiAqIEAhZXZlbnQgZXh0cmFjdEVycm9yKHJlc3BvbnNlKVxuICogICBUcmlnZ2VyZWQgb24gYWxsIG5vbi0yeHggcmVxdWVzdHMgc28gdGhhdCBsaXN0ZW5lcnMgY2FuIGV4dHJhY3RcbiAqICAgZXJyb3IgZGV0YWlscyBmcm9tIHRoZSByZXNwb25zZSBib2R5LiBMaXN0ZW5lcnMgdG8gdGhpcyBldmVudFxuICogICBzaG91bGQgc2V0IHRoZSBgcmVzcG9uc2UuZXJyb3JgIHByb3BlcnR5LlxuICogICBAcGFyYW0gKHNlZSBBV1MuUmVxdWVzdH5zZW5kKVxuICogICBAY29udGV4dCAoc2VlIEFXUy5SZXF1ZXN0fnNlbmQpXG4gKlxuICogQCFldmVudCBleHRyYWN0RGF0YShyZXNwb25zZSlcbiAqICAgVHJpZ2dlcmVkIGluIHN1Y2Nlc3NmdWwgcmVxdWVzdHMgdG8gYWxsb3cgbGlzdGVuZXJzIHRvXG4gKiAgIGRlLXNlcmlhbGl6ZSB0aGUgcmVzcG9uc2UgYm9keSBpbnRvIGByZXNwb25zZS5kYXRhYC5cbiAqICAgQHBhcmFtIChzZWUgQVdTLlJlcXVlc3R+c2VuZClcbiAqICAgQGNvbnRleHQgKHNlZSBBV1MuUmVxdWVzdH5zZW5kKVxuICpcbiAqIEAhZ3JvdXAgQ29tcGxldGlvbiBFdmVudHNcbiAqXG4gKiBAIWV2ZW50IHN1Y2Nlc3MocmVzcG9uc2UpXG4gKiAgIFRyaWdnZXJlZCB3aGVuIHRoZSByZXF1ZXN0IGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuXG4gKiAgIGByZXNwb25zZS5kYXRhYCB3aWxsIGNvbnRhaW4gdGhlIHJlc3BvbnNlIGRhdGEgYW5kXG4gKiAgIGByZXNwb25zZS5lcnJvcmAgd2lsbCBiZSBudWxsLlxuICogICBAcGFyYW0gKHNlZSBBV1MuUmVxdWVzdH5zZW5kKVxuICogICBAY29udGV4dCAoc2VlIEFXUy5SZXF1ZXN0fnNlbmQpXG4gKlxuICogQCFldmVudCBlcnJvcihlcnJvciwgcmVzcG9uc2UpXG4gKiAgIFRyaWdnZXJlZCB3aGVuIGFuIGVycm9yIG9jY3VycyBhdCBhbnkgcG9pbnQgZHVyaW5nIHRoZVxuICogICByZXF1ZXN0LiBgcmVzcG9uc2UuZXJyb3JgIHdpbGwgY29udGFpbiBkZXRhaWxzIGFib3V0IHRoZSBlcnJvclxuICogICB0aGF0IG9jY3VycmVkLiBgcmVzcG9uc2UuZGF0YWAgd2lsbCBiZSBudWxsLlxuICogICBAcGFyYW0gZXJyb3IgW0Vycm9yXSB0aGUgZXJyb3Igb2JqZWN0IGNvbnRhaW5pbmcgZGV0YWlscyBhYm91dFxuICogICAgIHRoZSBlcnJvciB0aGF0IG9jY3VycmVkLlxuICogICBAcGFyYW0gKHNlZSBBV1MuUmVxdWVzdH5zZW5kKVxuICogICBAY29udGV4dCAoc2VlIEFXUy5SZXF1ZXN0fnNlbmQpXG4gKlxuICogQCFldmVudCBjb21wbGV0ZShyZXNwb25zZSlcbiAqICAgVHJpZ2dlcmVkIHdoZW5ldmVyIGEgcmVxdWVzdCBjeWNsZSBjb21wbGV0ZXMuIGByZXNwb25zZS5lcnJvcmBcbiAqICAgc2hvdWxkIGJlIGNoZWNrZWQsIHNpbmNlIHRoZSByZXF1ZXN0IG1heSBoYXZlIGZhaWxlZC5cbiAqICAgQHBhcmFtIChzZWUgQVdTLlJlcXVlc3R+c2VuZClcbiAqICAgQGNvbnRleHQgKHNlZSBBV1MuUmVxdWVzdH5zZW5kKVxuICpcbiAqIEAhZ3JvdXAgSFRUUCBFdmVudHNcbiAqXG4gKiBAIWV2ZW50IGh0dHBIZWFkZXJzKHN0YXR1c0NvZGUsIGhlYWRlcnMsIHJlc3BvbnNlLCBzdGF0dXNNZXNzYWdlKVxuICogICBUcmlnZ2VyZWQgd2hlbiBoZWFkZXJzIGFyZSBzZW50IGJ5IHRoZSByZW1vdGUgc2VydmVyXG4gKiAgIEBwYXJhbSBzdGF0dXNDb2RlIFtJbnRlZ2VyXSB0aGUgSFRUUCByZXNwb25zZSBjb2RlXG4gKiAgIEBwYXJhbSBoZWFkZXJzIFttYXA8U3RyaW5nLFN0cmluZz5dIHRoZSByZXNwb25zZSBoZWFkZXJzXG4gKiAgIEBwYXJhbSAoc2VlIEFXUy5SZXF1ZXN0fnNlbmQpXG4gKiAgIEBwYXJhbSBzdGF0dXNNZXNzYWdlIFtTdHJpbmddIEEgc3RhdHVzIG1lc3NhZ2UgY29ycmVzcG9uZGluZyB0byB0aGUgSFRUUFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSBjb2RlXG4gKiAgIEBjb250ZXh0IChzZWUgQVdTLlJlcXVlc3R+c2VuZClcbiAqXG4gKiBAIWV2ZW50IGh0dHBEYXRhKGNodW5rLCByZXNwb25zZSlcbiAqICAgVHJpZ2dlcmVkIHdoZW4gZGF0YSBpcyBzZW50IGJ5IHRoZSByZW1vdGUgc2VydmVyXG4gKiAgIEBwYXJhbSBjaHVuayBbQnVmZmVyXSB0aGUgYnVmZmVyIGRhdGEgY29udGFpbmluZyB0aGUgbmV4dCBkYXRhIGNodW5rXG4gKiAgICAgZnJvbSB0aGUgc2VydmVyXG4gKiAgIEBwYXJhbSAoc2VlIEFXUy5SZXF1ZXN0fnNlbmQpXG4gKiAgIEBjb250ZXh0IChzZWUgQVdTLlJlcXVlc3R+c2VuZClcbiAqICAgQHNlZSBBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZS5IVFRQX0RBVEFcbiAqXG4gKiBAIWV2ZW50IGh0dHBVcGxvYWRQcm9ncmVzcyhwcm9ncmVzcywgcmVzcG9uc2UpXG4gKiAgIFRyaWdnZXJlZCB3aGVuIHRoZSBIVFRQIHJlcXVlc3QgaGFzIHVwbG9hZGVkIG1vcmUgZGF0YVxuICogICBAcGFyYW0gcHJvZ3Jlc3MgW21hcF0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBsb2FkZWRgIGFuZCBgdG90YWxgIGJ5dGVzXG4gKiAgICAgb2YgdGhlIHJlcXVlc3QuXG4gKiAgIEBwYXJhbSAoc2VlIEFXUy5SZXF1ZXN0fnNlbmQpXG4gKiAgIEBjb250ZXh0IChzZWUgQVdTLlJlcXVlc3R+c2VuZClcbiAqICAgQG5vdGUgVGhpcyBldmVudCB3aWxsIG5vdCBiZSBlbWl0dGVkIGluIE5vZGUuanMgMC44LnguXG4gKlxuICogQCFldmVudCBodHRwRG93bmxvYWRQcm9ncmVzcyhwcm9ncmVzcywgcmVzcG9uc2UpXG4gKiAgIFRyaWdnZXJlZCB3aGVuIHRoZSBIVFRQIHJlcXVlc3QgaGFzIGRvd25sb2FkZWQgbW9yZSBkYXRhXG4gKiAgIEBwYXJhbSBwcm9ncmVzcyBbbWFwXSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgYGxvYWRlZGAgYW5kIGB0b3RhbGAgYnl0ZXNcbiAqICAgICBvZiB0aGUgcmVxdWVzdC5cbiAqICAgQHBhcmFtIChzZWUgQVdTLlJlcXVlc3R+c2VuZClcbiAqICAgQGNvbnRleHQgKHNlZSBBV1MuUmVxdWVzdH5zZW5kKVxuICogICBAbm90ZSBUaGlzIGV2ZW50IHdpbGwgbm90IGJlIGVtaXR0ZWQgaW4gTm9kZS5qcyAwLjgueC5cbiAqXG4gKiBAIWV2ZW50IGh0dHBFcnJvcihlcnJvciwgcmVzcG9uc2UpXG4gKiAgIFRyaWdnZXJlZCB3aGVuIHRoZSBIVFRQIHJlcXVlc3QgZmFpbGVkXG4gKiAgIEBwYXJhbSBlcnJvciBbRXJyb3JdIHRoZSBlcnJvciBvYmplY3QgdGhhdCB3YXMgdGhyb3duXG4gKiAgIEBwYXJhbSAoc2VlIEFXUy5SZXF1ZXN0fnNlbmQpXG4gKiAgIEBjb250ZXh0IChzZWUgQVdTLlJlcXVlc3R+c2VuZClcbiAqXG4gKiBAIWV2ZW50IGh0dHBEb25lKHJlc3BvbnNlKVxuICogICBUcmlnZ2VyZWQgd2hlbiB0aGUgc2VydmVyIGlzIGZpbmlzaGVkIHNlbmRpbmcgZGF0YVxuICogICBAcGFyYW0gKHNlZSBBV1MuUmVxdWVzdH5zZW5kKVxuICogICBAY29udGV4dCAoc2VlIEFXUy5SZXF1ZXN0fnNlbmQpXG4gKlxuICogQHNlZSBBV1MuUmVzcG9uc2VcbiAqL1xuQVdTLlJlcXVlc3QgPSBpbmhlcml0KHtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHJlcXVlc3QgZm9yIGFuIG9wZXJhdGlvbiBvbiBhIGdpdmVuIHNlcnZpY2Ugd2l0aFxuICAgKiBhIHNldCBvZiBpbnB1dCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0gc2VydmljZSBbQVdTLlNlcnZpY2VdIHRoZSBzZXJ2aWNlIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbiBvblxuICAgKiBAcGFyYW0gb3BlcmF0aW9uIFtTdHJpbmddIHRoZSBvcGVyYXRpb24gdG8gcGVyZm9ybSBvbiB0aGUgc2VydmljZVxuICAgKiBAcGFyYW0gcGFyYW1zIFtPYmplY3RdIHBhcmFtZXRlcnMgdG8gc2VuZCB0byB0aGUgb3BlcmF0aW9uLlxuICAgKiAgIFNlZSB0aGUgb3BlcmF0aW9uJ3MgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGZvcm1hdCBvZiB0aGVcbiAgICogICBwYXJhbWV0ZXJzLlxuICAgKi9cbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIFJlcXVlc3Qoc2VydmljZSwgb3BlcmF0aW9uLCBwYXJhbXMpIHtcbiAgICB2YXIgZW5kcG9pbnQgPSBzZXJ2aWNlLmVuZHBvaW50O1xuICAgIHZhciByZWdpb24gPSBzZXJ2aWNlLmNvbmZpZy5yZWdpb247XG4gICAgdmFyIGN1c3RvbVVzZXJBZ2VudCA9IHNlcnZpY2UuY29uZmlnLmN1c3RvbVVzZXJBZ2VudDtcblxuICAgIC8vIGdsb2JhbCBlbmRwb2ludHMgc2lnbiBhcyB1cy1lYXN0LTFcbiAgICBpZiAoc2VydmljZS5pc0dsb2JhbEVuZHBvaW50KSByZWdpb24gPSAndXMtZWFzdC0xJztcblxuICAgIHRoaXMuZG9tYWluID0gZG9tYWluICYmIGRvbWFpbi5hY3RpdmU7XG4gICAgdGhpcy5zZXJ2aWNlID0gc2VydmljZTtcbiAgICB0aGlzLm9wZXJhdGlvbiA9IG9wZXJhdGlvbjtcbiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgICB0aGlzLmh0dHBSZXF1ZXN0ID0gbmV3IEFXUy5IdHRwUmVxdWVzdChlbmRwb2ludCwgcmVnaW9uKTtcbiAgICB0aGlzLmh0dHBSZXF1ZXN0LmFwcGVuZFRvVXNlckFnZW50KGN1c3RvbVVzZXJBZ2VudCk7XG4gICAgdGhpcy5zdGFydFRpbWUgPSBzZXJ2aWNlLmdldFNrZXdDb3JyZWN0ZWREYXRlKCk7XG5cbiAgICB0aGlzLnJlc3BvbnNlID0gbmV3IEFXUy5SZXNwb25zZSh0aGlzKTtcbiAgICB0aGlzLl9hc20gPSBuZXcgQWNjZXB0b3JTdGF0ZU1hY2hpbmUoZnNtLnN0YXRlcywgJ3ZhbGlkYXRlJyk7XG4gICAgdGhpcy5faGFsdEhhbmRsZXJzT25FcnJvciA9IGZhbHNlO1xuXG4gICAgQVdTLlNlcXVlbnRpYWxFeGVjdXRvci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuZW1pdCA9IHRoaXMuZW1pdEV2ZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAIWdyb3VwIFNlbmRpbmcgYSBSZXF1ZXN0XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAb3ZlcmxvYWQgc2VuZChjYWxsYmFjayA9IG51bGwpXG4gICAqICAgU2VuZHMgdGhlIHJlcXVlc3Qgb2JqZWN0LlxuICAgKlxuICAgKiAgIEBjYWxsYmFjayBjYWxsYmFjayBmdW5jdGlvbihlcnIsIGRhdGEpXG4gICAqICAgICBJZiBhIGNhbGxiYWNrIGlzIHN1cHBsaWVkLCBpdCBpcyBjYWxsZWQgd2hlbiBhIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgICBmcm9tIHRoZSBzZXJ2aWNlLlxuICAgKiAgICAgQGNvbnRleHQgW0FXUy5SZXF1ZXN0XSB0aGUgcmVxdWVzdCBvYmplY3QgYmVpbmcgc2VudC5cbiAgICogICAgIEBwYXJhbSBlcnIgW0Vycm9yXSB0aGUgZXJyb3Igb2JqZWN0IHJldHVybmVkIGZyb20gdGhlIHJlcXVlc3QuXG4gICAqICAgICAgIFNldCB0byBgbnVsbGAgaWYgdGhlIHJlcXVlc3QgaXMgc3VjY2Vzc2Z1bC5cbiAgICogICAgIEBwYXJhbSBkYXRhIFtPYmplY3RdIHRoZSBkZS1zZXJpYWxpemVkIGRhdGEgcmV0dXJuZWQgZnJvbVxuICAgKiAgICAgICB0aGUgcmVxdWVzdC4gU2V0IHRvIGBudWxsYCBpZiBhIHJlcXVlc3QgZXJyb3Igb2NjdXJzLlxuICAgKiAgIEBleGFtcGxlIFNlbmRpbmcgYSByZXF1ZXN0IHdpdGggYSBjYWxsYmFja1xuICAgKiAgICAgcmVxdWVzdCA9IHMzLnB1dE9iamVjdCh7QnVja2V0OiAnYnVja2V0JywgS2V5OiAna2V5J30pO1xuICAgKiAgICAgcmVxdWVzdC5zZW5kKGZ1bmN0aW9uKGVyciwgZGF0YSkgeyBjb25zb2xlLmxvZyhlcnIsIGRhdGEpOyB9KTtcbiAgICogICBAZXhhbXBsZSBTZW5kaW5nIGEgcmVxdWVzdCB3aXRoIG5vIGNhbGxiYWNrICh1c2luZyBldmVudCBoYW5kbGVycylcbiAgICogICAgIHJlcXVlc3QgPSBzMy5wdXRPYmplY3Qoe0J1Y2tldDogJ2J1Y2tldCcsIEtleTogJ2tleSd9KTtcbiAgICogICAgIHJlcXVlc3Qub24oJ2NvbXBsZXRlJywgZnVuY3Rpb24ocmVzcG9uc2UpIHsgLi4uIH0pOyAvLyByZWdpc3RlciBhIGNhbGxiYWNrXG4gICAqICAgICByZXF1ZXN0LnNlbmQoKTtcbiAgICovXG4gIHNlbmQ6IGZ1bmN0aW9uIHNlbmQoY2FsbGJhY2spIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIC8vIGFwcGVuZCB0byB1c2VyIGFnZW50XG4gICAgICB0aGlzLmh0dHBSZXF1ZXN0LmFwcGVuZFRvVXNlckFnZW50KCdjYWxsYmFjaycpO1xuICAgICAgdGhpcy5vbignY29tcGxldGUnLCBmdW5jdGlvbiAocmVzcCkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHJlc3AsIHJlc3AuZXJyb3IsIHJlc3AuZGF0YSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5ydW5UbygpO1xuXG4gICAgcmV0dXJuIHRoaXMucmVzcG9uc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEAhbWV0aG9kICBwcm9taXNlKClcbiAgICogICBTZW5kcyB0aGUgcmVxdWVzdCBhbmQgcmV0dXJucyBhICd0aGVuYWJsZScgcHJvbWlzZS5cbiAgICpcbiAgICogICBUd28gY2FsbGJhY2tzIGNhbiBiZSBwcm92aWRlZCB0byB0aGUgYHRoZW5gIG1ldGhvZCBvbiB0aGUgcmV0dXJuZWQgcHJvbWlzZS5cbiAgICogICBUaGUgZmlyc3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgaWYgdGhlIHByb21pc2UgaXMgZnVsZmlsbGVkLCBhbmQgdGhlIHNlY29uZFxuICAgKiAgIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGlmIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkLlxuICAgKiAgIEBjYWxsYmFjayBmdWxmaWxsZWRDYWxsYmFjayBmdW5jdGlvbihkYXRhKVxuICAgKiAgICAgQ2FsbGVkIGlmIHRoZSBwcm9taXNlIGlzIGZ1bGZpbGxlZC5cbiAgICogICAgIEBwYXJhbSBkYXRhIFtPYmplY3RdIHRoZSBkZS1zZXJpYWxpemVkIGRhdGEgcmV0dXJuZWQgZnJvbSB0aGUgcmVxdWVzdC5cbiAgICogICBAY2FsbGJhY2sgcmVqZWN0ZWRDYWxsYmFjayBmdW5jdGlvbihlcnJvcilcbiAgICogICAgIENhbGxlZCBpZiB0aGUgcHJvbWlzZSBpcyByZWplY3RlZC5cbiAgICogICAgIEBwYXJhbSBlcnJvciBbRXJyb3JdIHRoZSBlcnJvciBvYmplY3QgcmV0dXJuZWQgZnJvbSB0aGUgcmVxdWVzdC5cbiAgICogICBAcmV0dXJuIFtQcm9taXNlXSBBIHByb21pc2UgdGhhdCByZXByZXNlbnRzIHRoZSBzdGF0ZSBvZiB0aGUgcmVxdWVzdC5cbiAgICogICBAZXhhbXBsZSBTZW5kaW5nIGEgcmVxdWVzdCB1c2luZyBwcm9taXNlcy5cbiAgICogICAgIHZhciByZXF1ZXN0ID0gczMucHV0T2JqZWN0KHtCdWNrZXQ6ICdidWNrZXQnLCBLZXk6ICdrZXknfSk7XG4gICAqICAgICB2YXIgcmVzdWx0ID0gcmVxdWVzdC5wcm9taXNlKCk7XG4gICAqICAgICByZXN1bHQudGhlbihmdW5jdGlvbihkYXRhKSB7IC4uLiB9LCBmdW5jdGlvbihlcnJvcikgeyAuLi4gfSk7XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGJ1aWxkOiBmdW5jdGlvbiBidWlsZChjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLnJ1blRvKCdzZW5kJywgY2FsbGJhY2spO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHJ1blRvOiBmdW5jdGlvbiBydW5UbyhzdGF0ZSwgZG9uZSkge1xuICAgIHRoaXMuX2FzbS5ydW5UbyhzdGF0ZSwgZG9uZSwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFib3J0cyBhIHJlcXVlc3QsIGVtaXR0aW5nIHRoZSBlcnJvciBhbmQgY29tcGxldGUgZXZlbnRzLlxuICAgKlxuICAgKiBAIW1hY3JvIG5vYnJvd3NlclxuICAgKiBAZXhhbXBsZSBBYm9ydGluZyBhIHJlcXVlc3QgYWZ0ZXIgc2VuZGluZ1xuICAgKiAgIHZhciBwYXJhbXMgPSB7XG4gICAqICAgICBCdWNrZXQ6ICdidWNrZXQnLCBLZXk6ICdrZXknLFxuICAgKiAgICAgQm9keTogQnVmZmVyLmFsbG9jKDEwMjQgKiAxMDI0ICogNSkgLy8gNU1CIHBheWxvYWRcbiAgICogICB9O1xuICAgKiAgIHZhciByZXF1ZXN0ID0gczMucHV0T2JqZWN0KHBhcmFtcyk7XG4gICAqICAgcmVxdWVzdC5zZW5kKGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICogICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKFwiRXJyb3I6XCIsIGVyci5jb2RlLCBlcnIubWVzc2FnZSk7XG4gICAqICAgICBlbHNlIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgKiAgIH0pO1xuICAgKlxuICAgKiAgIC8vIGFib3J0IHJlcXVlc3QgaW4gMSBzZWNvbmRcbiAgICogICBzZXRUaW1lb3V0KHJlcXVlc3QuYWJvcnQuYmluZChyZXF1ZXN0KSwgMTAwMCk7XG4gICAqXG4gICAqICAgLy8gcHJpbnRzIFwiRXJyb3I6IFJlcXVlc3RBYm9ydGVkRXJyb3IgUmVxdWVzdCBhYm9ydGVkIGJ5IHVzZXJcIlxuICAgKiBAcmV0dXJuIFtBV1MuUmVxdWVzdF0gdGhlIHNhbWUgcmVxdWVzdCBvYmplY3QsIGZvciBjaGFpbmluZy5cbiAgICogQHNpbmNlIHYxLjQuMFxuICAgKi9cbiAgYWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCd2YWxpZGF0ZVJlc3BvbnNlJyk7XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2V4dHJhY3RFcnJvcicpO1xuICAgIHRoaXMub24oJ3ZhbGlkYXRlUmVzcG9uc2UnLCBmdW5jdGlvbiBhZGRBYm9ydGVkRXJyb3IocmVzcCkge1xuICAgICAgcmVzcC5lcnJvciA9IEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcignUmVxdWVzdCBhYm9ydGVkIGJ5IHVzZXInKSwge1xuICAgICAgICAgY29kZTogJ1JlcXVlc3RBYm9ydGVkRXJyb3InLCByZXRyeWFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmh0dHBSZXF1ZXN0LnN0cmVhbSAmJiAhdGhpcy5odHRwUmVxdWVzdC5zdHJlYW0uZGlkQ2FsbGJhY2spIHsgLy8gYWJvcnQgSFRUUCBzdHJlYW1cbiAgICAgIHRoaXMuaHR0cFJlcXVlc3Quc3RyZWFtLmFib3J0KCk7XG4gICAgICBpZiAodGhpcy5odHRwUmVxdWVzdC5fYWJvcnRDYWxsYmFjaykge1xuICAgICAgICAgdGhpcy5odHRwUmVxdWVzdC5fYWJvcnRDYWxsYmFjaygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3NlbmQnKTsgLy8gaGF2ZW4ndCBzZW50IHlldCwgc28gbGV0J3Mgbm90XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEl0ZXJhdGVzIG92ZXIgZWFjaCBwYWdlIG9mIHJlc3VsdHMgZ2l2ZW4gYSBwYWdlYWJsZSByZXF1ZXN0LCBjYWxsaW5nXG4gICAqIHRoZSBwcm92aWRlZCBjYWxsYmFjayB3aXRoIGVhY2ggcGFnZSBvZiBkYXRhLiBBZnRlciBhbGwgcGFnZXMgaGF2ZSBiZWVuXG4gICAqIHJldHJpZXZlZCwgdGhlIGNhbGxiYWNrIGlzIGNhbGxlZCB3aXRoIGBudWxsYCBkYXRhLlxuICAgKlxuICAgKiBAbm90ZSBUaGlzIG9wZXJhdGlvbiBjYW4gZ2VuZXJhdGUgbXVsdGlwbGUgcmVxdWVzdHMgdG8gYSBzZXJ2aWNlLlxuICAgKiBAZXhhbXBsZSBJdGVyYXRpbmcgb3ZlciBtdWx0aXBsZSBwYWdlcyBvZiBvYmplY3RzIGluIGFuIFMzIGJ1Y2tldFxuICAgKiAgIHZhciBwYWdlcyA9IDE7XG4gICAqICAgczMubGlzdE9iamVjdHMoKS5lYWNoUGFnZShmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICogICAgIGlmIChlcnIpIHJldHVybjtcbiAgICogICAgIGNvbnNvbGUubG9nKFwiUGFnZVwiLCBwYWdlcysrKTtcbiAgICogICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgKiAgIH0pO1xuICAgKiBAZXhhbXBsZSBJdGVyYXRpbmcgb3ZlciBtdWx0aXBsZSBwYWdlcyB3aXRoIGFuIGFzeW5jaHJvbm91cyBjYWxsYmFja1xuICAgKiAgIHMzLmxpc3RPYmplY3RzKHBhcmFtcykuZWFjaFBhZ2UoZnVuY3Rpb24oZXJyLCBkYXRhLCBkb25lKSB7XG4gICAqICAgICBkb1NvbWV0aGluZ0FzeW5jQW5kT3JFeHBlbnNpdmUoZnVuY3Rpb24oKSB7XG4gICAqICAgICAgIC8vIFRoZSBuZXh0IHBhZ2Ugb2YgcmVzdWx0cyBpc24ndCBmZXRjaGVkIHVudGlsIGRvbmUgaXMgY2FsbGVkXG4gICAqICAgICAgIGRvbmUoKTtcbiAgICogICAgIH0pO1xuICAgKiAgIH0pO1xuICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyLCBkYXRhLCBbZG9uZUNhbGxiYWNrXSlcbiAgICogICBDYWxsZWQgd2l0aCBlYWNoIHBhZ2Ugb2YgcmVzdWx0aW5nIGRhdGEgZnJvbSB0aGUgcmVxdWVzdC4gSWYgdGhlXG4gICAqICAgb3B0aW9uYWwgYGRvbmVDYWxsYmFja2AgaXMgcHJvdmlkZWQgaW4gdGhlIGZ1bmN0aW9uLCBpdCBtdXN0IGJlIGNhbGxlZFxuICAgKiAgIHdoZW4gdGhlIGNhbGxiYWNrIGlzIGNvbXBsZXRlLlxuICAgKlxuICAgKiAgIEBwYXJhbSBlcnIgW0Vycm9yXSBhbiBlcnJvciBvYmplY3QsIGlmIGFuIGVycm9yIG9jY3VycmVkLlxuICAgKiAgIEBwYXJhbSBkYXRhIFtPYmplY3RdIGEgc2luZ2xlIHBhZ2Ugb2YgcmVzcG9uc2UgZGF0YS4gSWYgdGhlcmUgaXMgbm9cbiAgICogICAgIG1vcmUgZGF0YSwgdGhpcyBvYmplY3Qgd2lsbCBiZSBgbnVsbGAuXG4gICAqICAgQHBhcmFtIGRvbmVDYWxsYmFjayBbRnVuY3Rpb25dIGFuIG9wdGlvbmFsIGRvbmUgY2FsbGJhY2suIElmIHRoaXNcbiAgICogICAgIGFyZ3VtZW50IGlzIGRlZmluZWQgaW4gdGhlIGZ1bmN0aW9uIGRlY2xhcmF0aW9uLCBpdCBzaG91bGQgYmUgY2FsbGVkXG4gICAqICAgICB3aGVuIHRoZSBuZXh0IHBhZ2UgaXMgcmVhZHkgdG8gYmUgcmV0cmlldmVkLiBUaGlzIGlzIHVzZWZ1bCBmb3JcbiAgICogICAgIGNvbnRyb2xsaW5nIHNlcmlhbCBwYWdpbmF0aW9uIGFjcm9zcyBhc3luY2hyb25vdXMgb3BlcmF0aW9ucy5cbiAgICogICBAcmV0dXJuIFtCb29sZWFuXSBpZiB0aGUgY2FsbGJhY2sgcmV0dXJucyBgZmFsc2VgLCBwYWdpbmF0aW9uIHdpbGxcbiAgICogICAgIHN0b3AuXG4gICAqXG4gICAqIEBzZWUgQVdTLlJlcXVlc3QuZWFjaEl0ZW1cbiAgICogQHNlZSBBV1MuUmVzcG9uc2UubmV4dFBhZ2VcbiAgICogQHNpbmNlIHYxLjQuMFxuICAgKi9cbiAgZWFjaFBhZ2U6IGZ1bmN0aW9uIGVhY2hQYWdlKGNhbGxiYWNrKSB7XG4gICAgLy8gTWFrZSBhbGwgY2FsbGJhY2tzIGFzeW5jLWlzaFxuICAgIGNhbGxiYWNrID0gQVdTLnV0aWwuZm4ubWFrZUFzeW5jKGNhbGxiYWNrLCAzKTtcblxuICAgIGZ1bmN0aW9uIHdyYXBwZWRDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgY2FsbGJhY2suY2FsbChyZXNwb25zZSwgcmVzcG9uc2UuZXJyb3IsIHJlc3BvbnNlLmRhdGEsIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgICAgICBpZiAocmVzcG9uc2UuaGFzTmV4dFBhZ2UoKSkge1xuICAgICAgICAgIHJlc3BvbnNlLm5leHRQYWdlKCkub24oJ2NvbXBsZXRlJywgd3JhcHBlZENhbGxiYWNrKS5zZW5kKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2suY2FsbChyZXNwb25zZSwgbnVsbCwgbnVsbCwgQVdTLnV0aWwuZm4ubm9vcCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMub24oJ2NvbXBsZXRlJywgd3JhcHBlZENhbGxiYWNrKS5zZW5kKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEVudW1lcmF0ZXMgb3ZlciBpbmRpdmlkdWFsIGl0ZW1zIG9mIGEgcmVxdWVzdCwgcGFnaW5nIHRoZSByZXNwb25zZXMgaWZcbiAgICogbmVjZXNzYXJ5LlxuICAgKlxuICAgKiBAYXBpIGV4cGVyaW1lbnRhbFxuICAgKiBAc2luY2UgdjEuNC4wXG4gICAqL1xuICBlYWNoSXRlbTogZnVuY3Rpb24gZWFjaEl0ZW0oY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZnVuY3Rpb24gd3JhcHBlZENhbGxiYWNrKGVyciwgZGF0YSkge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVyciwgbnVsbCk7XG4gICAgICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGNhbGxiYWNrKG51bGwsIG51bGwpO1xuXG4gICAgICB2YXIgY29uZmlnID0gc2VsZi5zZXJ2aWNlLnBhZ2luYXRpb25Db25maWcoc2VsZi5vcGVyYXRpb24pO1xuICAgICAgdmFyIHJlc3VsdEtleSA9IGNvbmZpZy5yZXN1bHRLZXk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHRLZXkpKSByZXN1bHRLZXkgPSByZXN1bHRLZXlbMF07XG4gICAgICB2YXIgaXRlbXMgPSBqbWVzcGF0aC5zZWFyY2goZGF0YSwgcmVzdWx0S2V5KTtcbiAgICAgIHZhciBjb250aW51ZUl0ZXJhdGlvbiA9IHRydWU7XG4gICAgICBBV1MudXRpbC5hcnJheUVhY2goaXRlbXMsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgY29udGludWVJdGVyYXRpb24gPSBjYWxsYmFjayhudWxsLCBpdGVtKTtcbiAgICAgICAgaWYgKGNvbnRpbnVlSXRlcmF0aW9uID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBBV1MudXRpbC5hYm9ydDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gY29udGludWVJdGVyYXRpb247XG4gICAgfVxuXG4gICAgdGhpcy5lYWNoUGFnZSh3cmFwcGVkQ2FsbGJhY2spO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIFtCb29sZWFuXSB3aGV0aGVyIHRoZSBvcGVyYXRpb24gY2FuIHJldHVybiBtdWx0aXBsZSBwYWdlcyBvZlxuICAgKiAgIHJlc3BvbnNlIGRhdGEuXG4gICAqIEBzZWUgQVdTLlJlc3BvbnNlLmVhY2hQYWdlXG4gICAqIEBzaW5jZSB2MS40LjBcbiAgICovXG4gIGlzUGFnZWFibGU6IGZ1bmN0aW9uIGlzUGFnZWFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VydmljZS5wYWdpbmF0aW9uQ29uZmlnKHRoaXMub3BlcmF0aW9uKSA/IHRydWUgOiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogU2VuZHMgdGhlIHJlcXVlc3QgYW5kIGNvbnZlcnRzIHRoZSByZXF1ZXN0IG9iamVjdCBpbnRvIGEgcmVhZGFibGUgc3RyZWFtXG4gICAqIHRoYXQgY2FuIGJlIHJlYWQgZnJvbSBvciBwaXBlZCBpbnRvIGEgd3JpdGFibGUgc3RyZWFtLlxuICAgKlxuICAgKiBAbm90ZSBUaGUgZGF0YSByZWFkIGZyb20gYSByZWFkYWJsZSBzdHJlYW0gY29udGFpbnMgb25seVxuICAgKiAgIHRoZSByYXcgSFRUUCBib2R5IGNvbnRlbnRzLlxuICAgKiBAZXhhbXBsZSBNYW51YWxseSByZWFkaW5nIGZyb20gYSBzdHJlYW1cbiAgICogICByZXF1ZXN0LmNyZWF0ZVJlYWRTdHJlYW0oKS5vbignZGF0YScsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICogICAgIGNvbnNvbGUubG9nKFwiR290IGRhdGE6XCIsIGRhdGEudG9TdHJpbmcoKSk7XG4gICAqICAgfSk7XG4gICAqIEBleGFtcGxlIFBpcGluZyBhIHJlcXVlc3QgYm9keSBpbnRvIGEgZmlsZVxuICAgKiAgIHZhciBvdXQgPSBmcy5jcmVhdGVXcml0ZVN0cmVhbSgnL3BhdGgvdG8vb3V0ZmlsZS5qcGcnKTtcbiAgICogICBzMy5zZXJ2aWNlLmdldE9iamVjdChwYXJhbXMpLmNyZWF0ZVJlYWRTdHJlYW0oKS5waXBlKG91dCk7XG4gICAqIEByZXR1cm4gW1N0cmVhbV0gdGhlIHJlYWRhYmxlIHN0cmVhbSBvYmplY3QgdGhhdCBjYW4gYmUgcGlwZWRcbiAgICogICBvciByZWFkIGZyb20gKGJ5IHJlZ2lzdGVyaW5nICdkYXRhJyBldmVudCBsaXN0ZW5lcnMpLlxuICAgKiBAIW1hY3JvIG5vYnJvd3NlclxuICAgKi9cbiAgY3JlYXRlUmVhZFN0cmVhbTogZnVuY3Rpb24gY3JlYXRlUmVhZFN0cmVhbSgpIHtcbiAgICB2YXIgc3RyZWFtcyA9IEFXUy51dGlsLnN0cmVhbTtcbiAgICB2YXIgcmVxID0gdGhpcztcbiAgICB2YXIgc3RyZWFtID0gbnVsbDtcblxuICAgIGlmIChBV1MuSHR0cENsaWVudC5zdHJlYW1zQXBpVmVyc2lvbiA9PT0gMikge1xuICAgICAgc3RyZWFtID0gbmV3IHN0cmVhbXMuUGFzc1Rocm91Z2goKTtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7IHJlcS5zZW5kKCk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJlYW0gPSBuZXcgc3RyZWFtcy5TdHJlYW0oKTtcbiAgICAgIHN0cmVhbS5yZWFkYWJsZSA9IHRydWU7XG5cbiAgICAgIHN0cmVhbS5zZW50ID0gZmFsc2U7XG4gICAgICBzdHJlYW0ub24oJ25ld0xpc3RlbmVyJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgaWYgKCFzdHJlYW0uc2VudCAmJiBldmVudCA9PT0gJ2RhdGEnKSB7XG4gICAgICAgICAgc3RyZWFtLnNlbnQgPSB0cnVlO1xuICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7IHJlcS5zZW5kKCk7IH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9KTtcblxuICAgIHRoaXMub24oJ2h0dHBIZWFkZXJzJywgZnVuY3Rpb24gc3RyZWFtSGVhZGVycyhzdGF0dXNDb2RlLCBoZWFkZXJzLCByZXNwKSB7XG4gICAgICBpZiAoc3RhdHVzQ29kZSA8IDMwMCkge1xuICAgICAgICByZXEucmVtb3ZlTGlzdGVuZXIoJ2h0dHBEYXRhJywgQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuSFRUUF9EQVRBKTtcbiAgICAgICAgcmVxLnJlbW92ZUxpc3RlbmVyKCdodHRwRXJyb3InLCBBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZS5IVFRQX0VSUk9SKTtcbiAgICAgICAgcmVxLm9uKCdodHRwRXJyb3InLCBmdW5jdGlvbiBzdHJlYW1IdHRwRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgICByZXNwLmVycm9yID0gZXJyb3I7XG4gICAgICAgICAgcmVzcC5lcnJvci5yZXRyeWFibGUgPSBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHNob3VsZENoZWNrQ29udGVudExlbmd0aCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXhwZWN0ZWRMZW47XG4gICAgICAgIGlmIChyZXEuaHR0cFJlcXVlc3QubWV0aG9kICE9PSAnSEVBRCcpIHtcbiAgICAgICAgICBleHBlY3RlZExlbiA9IHBhcnNlSW50KGhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10sIDEwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhwZWN0ZWRMZW4gIT09IHVuZGVmaW5lZCAmJiAhaXNOYU4oZXhwZWN0ZWRMZW4pICYmIGV4cGVjdGVkTGVuID49IDApIHtcbiAgICAgICAgICBzaG91bGRDaGVja0NvbnRlbnRMZW5ndGggPSB0cnVlO1xuICAgICAgICAgIHZhciByZWNlaXZlZExlbiA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2hlY2tDb250ZW50TGVuZ3RoQW5kRW1pdCA9IGZ1bmN0aW9uIGNoZWNrQ29udGVudExlbmd0aEFuZEVtaXQoKSB7XG4gICAgICAgICAgaWYgKHNob3VsZENoZWNrQ29udGVudExlbmd0aCAmJiByZWNlaXZlZExlbiAhPT0gZXhwZWN0ZWRMZW4pIHtcbiAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIEFXUy51dGlsLmVycm9yKFxuICAgICAgICAgICAgICBuZXcgRXJyb3IoJ1N0cmVhbSBjb250ZW50IGxlbmd0aCBtaXNtYXRjaC4gUmVjZWl2ZWQgJyArXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWRMZW4gKyAnIG9mICcgKyBleHBlY3RlZExlbiArICcgYnl0ZXMuJyksXG4gICAgICAgICAgICAgIHsgY29kZTogJ1N0cmVhbUNvbnRlbnRMZW5ndGhNaXNtYXRjaCcgfVxuICAgICAgICAgICAgKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChBV1MuSHR0cENsaWVudC5zdHJlYW1zQXBpVmVyc2lvbiA9PT0gMikge1xuICAgICAgICAgICAgc3RyZWFtLmVuZCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBodHRwU3RyZWFtID0gcmVzcC5odHRwUmVzcG9uc2UuY3JlYXRlVW5idWZmZXJlZFN0cmVhbSgpO1xuXG4gICAgICAgIGlmIChBV1MuSHR0cENsaWVudC5zdHJlYW1zQXBpVmVyc2lvbiA9PT0gMikge1xuICAgICAgICAgIGlmIChzaG91bGRDaGVja0NvbnRlbnRMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBsZW5ndGhBY2N1bXVsYXRvciA9IG5ldyBzdHJlYW1zLlBhc3NUaHJvdWdoKCk7XG4gICAgICAgICAgICBsZW5ndGhBY2N1bXVsYXRvci5fd3JpdGUgPSBmdW5jdGlvbihjaHVuaykge1xuICAgICAgICAgICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZWRMZW4gKz0gY2h1bmsubGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBzdHJlYW1zLlBhc3NUaHJvdWdoLnByb3RvdHlwZS5fd3JpdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxlbmd0aEFjY3VtdWxhdG9yLm9uKCdlbmQnLCBjaGVja0NvbnRlbnRMZW5ndGhBbmRFbWl0KTtcbiAgICAgICAgICAgIHN0cmVhbS5vbignZXJyb3InLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgc2hvdWxkQ2hlY2tDb250ZW50TGVuZ3RoID0gZmFsc2U7XG4gICAgICAgICAgICAgIGh0dHBTdHJlYW0udW5waXBlKGxlbmd0aEFjY3VtdWxhdG9yKTtcbiAgICAgICAgICAgICAgbGVuZ3RoQWNjdW11bGF0b3IuZW1pdCgnZW5kJyk7XG4gICAgICAgICAgICAgIGxlbmd0aEFjY3VtdWxhdG9yLmVuZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBodHRwU3RyZWFtLnBpcGUobGVuZ3RoQWNjdW11bGF0b3IpLnBpcGUoc3RyZWFtLCB7IGVuZDogZmFsc2UgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGh0dHBTdHJlYW0ucGlwZShzdHJlYW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgIGlmIChzaG91bGRDaGVja0NvbnRlbnRMZW5ndGgpIHtcbiAgICAgICAgICAgIGh0dHBTdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICAgICAgaWYgKGFyZyAmJiBhcmcubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZWRMZW4gKz0gYXJnLmxlbmd0aDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaHR0cFN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBhcmcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGh0dHBTdHJlYW0ub24oJ2VuZCcsIGNoZWNrQ29udGVudExlbmd0aEFuZEVtaXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaHR0cFN0cmVhbS5vbignZXJyb3InLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBzaG91bGRDaGVja0NvbnRlbnRMZW5ndGggPSBmYWxzZTtcbiAgICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzdHJlYW07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSBbQXJyYXksUmVzcG9uc2VdIGFyZ3MgVGhpcyBzaG91bGQgYmUgdGhlIHJlc3BvbnNlIG9iamVjdCxcbiAgICogICBvciBhbiBhcnJheSBvZiBhcmdzIHRvIHNlbmQgdG8gdGhlIGV2ZW50LlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGVtaXRFdmVudDogZnVuY3Rpb24gZW1pdChldmVudE5hbWUsIGFyZ3MsIGRvbmUpIHtcbiAgICBpZiAodHlwZW9mIGFyZ3MgPT09ICdmdW5jdGlvbicpIHsgZG9uZSA9IGFyZ3M7IGFyZ3MgPSBudWxsOyB9XG4gICAgaWYgKCFkb25lKSBkb25lID0gZnVuY3Rpb24oKSB7IH07XG4gICAgaWYgKCFhcmdzKSBhcmdzID0gdGhpcy5ldmVudFBhcmFtZXRlcnMoZXZlbnROYW1lLCB0aGlzLnJlc3BvbnNlKTtcblxuICAgIHZhciBvcmlnRW1pdCA9IEFXUy5TZXF1ZW50aWFsRXhlY3V0b3IucHJvdG90eXBlLmVtaXQ7XG4gICAgb3JpZ0VtaXQuY2FsbCh0aGlzLCBldmVudE5hbWUsIGFyZ3MsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHRoaXMucmVzcG9uc2UuZXJyb3IgPSBlcnI7XG4gICAgICBkb25lLmNhbGwodGhpcywgZXJyKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBldmVudFBhcmFtZXRlcnM6IGZ1bmN0aW9uIGV2ZW50UGFyYW1ldGVycyhldmVudE5hbWUpIHtcbiAgICBzd2l0Y2ggKGV2ZW50TmFtZSkge1xuICAgICAgY2FzZSAncmVzdGFydCc6XG4gICAgICBjYXNlICd2YWxpZGF0ZSc6XG4gICAgICBjYXNlICdzaWduJzpcbiAgICAgIGNhc2UgJ2J1aWxkJzpcbiAgICAgIGNhc2UgJ2FmdGVyVmFsaWRhdGUnOlxuICAgICAgY2FzZSAnYWZ0ZXJCdWlsZCc6XG4gICAgICAgIHJldHVybiBbdGhpc107XG4gICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgIHJldHVybiBbdGhpcy5yZXNwb25zZS5lcnJvciwgdGhpcy5yZXNwb25zZV07XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gW3RoaXMucmVzcG9uc2VdO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBwcmVzaWduOiBmdW5jdGlvbiBwcmVzaWduKGV4cGlyZXMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFjYWxsYmFjayAmJiB0eXBlb2YgZXhwaXJlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2sgPSBleHBpcmVzO1xuICAgICAgZXhwaXJlcyA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQVdTLlNpZ25lcnMuUHJlc2lnbigpLnNpZ24odGhpcy50b0dldCgpLCBleHBpcmVzLCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgaXNQcmVzaWduZWQ6IGZ1bmN0aW9uIGlzUHJlc2lnbmVkKCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5odHRwUmVxdWVzdC5oZWFkZXJzLCAncHJlc2lnbmVkLWV4cGlyZXMnKTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICB0b1VuYXV0aGVudGljYXRlZDogZnVuY3Rpb24gdG9VbmF1dGhlbnRpY2F0ZWQoKSB7XG4gICAgdGhpcy5fdW5BdXRoZW50aWNhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKCd2YWxpZGF0ZScsIEFXUy5FdmVudExpc3RlbmVycy5Db3JlLlZBTElEQVRFX0NSRURFTlRJQUxTKTtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdzaWduJywgQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuU0lHTik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgdG9HZXQ6IGZ1bmN0aW9uIHRvR2V0KCkge1xuICAgIGlmICh0aGlzLnNlcnZpY2UuYXBpLnByb3RvY29sID09PSAncXVlcnknIHx8XG4gICAgICAgIHRoaXMuc2VydmljZS5hcGkucHJvdG9jb2wgPT09ICdlYzInKSB7XG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdidWlsZCcsIHRoaXMuYnVpbGRBc0dldCk7XG4gICAgICB0aGlzLmFkZExpc3RlbmVyKCdidWlsZCcsIHRoaXMuYnVpbGRBc0dldCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGJ1aWxkQXNHZXQ6IGZ1bmN0aW9uIGJ1aWxkQXNHZXQocmVxdWVzdCkge1xuICAgIHJlcXVlc3QuaHR0cFJlcXVlc3QubWV0aG9kID0gJ0dFVCc7XG4gICAgcmVxdWVzdC5odHRwUmVxdWVzdC5wYXRoID0gcmVxdWVzdC5zZXJ2aWNlLmVuZHBvaW50LnBhdGggK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc/JyArIHJlcXVlc3QuaHR0cFJlcXVlc3QuYm9keTtcbiAgICByZXF1ZXN0Lmh0dHBSZXF1ZXN0LmJvZHkgPSAnJztcblxuICAgIC8vIGRvbid0IG5lZWQgdGhlc2UgaGVhZGVycyBvbiBhIEdFVCByZXF1ZXN0XG4gICAgZGVsZXRlIHJlcXVlc3QuaHR0cFJlcXVlc3QuaGVhZGVyc1snQ29udGVudC1MZW5ndGgnXTtcbiAgICBkZWxldGUgcmVxdWVzdC5odHRwUmVxdWVzdC5oZWFkZXJzWydDb250ZW50LVR5cGUnXTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBoYWx0SGFuZGxlcnNPbkVycm9yOiBmdW5jdGlvbiBoYWx0SGFuZGxlcnNPbkVycm9yKCkge1xuICAgIHRoaXMuX2hhbHRIYW5kbGVyc09uRXJyb3IgPSB0cnVlO1xuICB9XG59KTtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuQVdTLlJlcXVlc3QuYWRkUHJvbWlzZXNUb0NsYXNzID0gZnVuY3Rpb24gYWRkUHJvbWlzZXNUb0NsYXNzKFByb21pc2VEZXBlbmRlbmN5KSB7XG4gIHRoaXMucHJvdG90eXBlLnByb21pc2UgPSBmdW5jdGlvbiBwcm9taXNlKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAvLyBhcHBlbmQgdG8gdXNlciBhZ2VudFxuICAgIHRoaXMuaHR0cFJlcXVlc3QuYXBwZW5kVG9Vc2VyQWdlbnQoJ3Byb21pc2UnKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2VEZXBlbmRlbmN5KGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgc2VsZi5vbignY29tcGxldGUnLCBmdW5jdGlvbihyZXNwKSB7XG4gICAgICAgIGlmIChyZXNwLmVycm9yKSB7XG4gICAgICAgICAgcmVqZWN0KHJlc3AuZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGRlZmluZSAkcmVzcG9uc2UgcHJvcGVydHkgc28gdGhhdCBpdCBpcyBub3QgZW51bWJlcmFibGVcbiAgICAgICAgICAvLyB0aGlzIHByZXZlbnRzIGNpcmN1bGFyIHJlZmVyZW5jZSBlcnJvcnMgd2hlbiBzdHJpbmdpZnlpbmcgdGhlIEpTT04gb2JqZWN0XG4gICAgICAgICAgcmVzb2x2ZShPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICAgICAgICByZXNwLmRhdGEgfHwge30sXG4gICAgICAgICAgICAnJHJlc3BvbnNlJyxcbiAgICAgICAgICAgIHt2YWx1ZTogcmVzcH1cbiAgICAgICAgICApKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzZWxmLnJ1blRvKCk7XG4gICAgfSk7XG4gIH07XG59O1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5BV1MuUmVxdWVzdC5kZWxldGVQcm9taXNlc0Zyb21DbGFzcyA9IGZ1bmN0aW9uIGRlbGV0ZVByb21pc2VzRnJvbUNsYXNzKCkge1xuICBkZWxldGUgdGhpcy5wcm90b3R5cGUucHJvbWlzZTtcbn07XG5cbkFXUy51dGlsLmFkZFByb21pc2VzKEFXUy5SZXF1ZXN0KTtcblxuQVdTLnV0aWwubWl4aW4oQVdTLlJlcXVlc3QsIEFXUy5TZXF1ZW50aWFsRXhlY3V0b3IpO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9jb3JlXCI6MTksXCIuL3N0YXRlX21hY2hpbmVcIjo3MSxcIl9wcm9jZXNzXCI6ODYsXCJqbWVzcGF0aFwiOjg1fV0sNTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMi0yMDEzIEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91XG4gKiBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gQSBjb3B5IG9mXG4gKiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgIGh0dHA6Ly9hd3MuYW1hem9uLmNvbS9hcGFjaGUyLjAvXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzXG4gKiBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GXG4gKiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWNcbiAqIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIEFXUyA9IHJlcXVpcmUoJy4vY29yZScpO1xudmFyIGluaGVyaXQgPSBBV1MudXRpbC5pbmhlcml0O1xudmFyIGptZXNwYXRoID0gcmVxdWlyZSgnam1lc3BhdGgnKTtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gQ0hFQ0tfQUNDRVBUT1JTKHJlc3ApIHtcbiAgdmFyIHdhaXRlciA9IHJlc3AucmVxdWVzdC5fd2FpdGVyO1xuICB2YXIgYWNjZXB0b3JzID0gd2FpdGVyLmNvbmZpZy5hY2NlcHRvcnM7XG4gIHZhciBhY2NlcHRvck1hdGNoZWQgPSBmYWxzZTtcbiAgdmFyIHN0YXRlID0gJ3JldHJ5JztcblxuICBhY2NlcHRvcnMuZm9yRWFjaChmdW5jdGlvbihhY2NlcHRvcikge1xuICAgIGlmICghYWNjZXB0b3JNYXRjaGVkKSB7XG4gICAgICB2YXIgbWF0Y2hlciA9IHdhaXRlci5tYXRjaGVyc1thY2NlcHRvci5tYXRjaGVyXTtcbiAgICAgIGlmIChtYXRjaGVyICYmIG1hdGNoZXIocmVzcCwgYWNjZXB0b3IuZXhwZWN0ZWQsIGFjY2VwdG9yLmFyZ3VtZW50KSkge1xuICAgICAgICBhY2NlcHRvck1hdGNoZWQgPSB0cnVlO1xuICAgICAgICBzdGF0ZSA9IGFjY2VwdG9yLnN0YXRlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKCFhY2NlcHRvck1hdGNoZWQgJiYgcmVzcC5lcnJvcikgc3RhdGUgPSAnZmFpbHVyZSc7XG5cbiAgaWYgKHN0YXRlID09PSAnc3VjY2VzcycpIHtcbiAgICB3YWl0ZXIuc2V0U3VjY2VzcyhyZXNwKTtcbiAgfSBlbHNlIHtcbiAgICB3YWl0ZXIuc2V0RXJyb3IocmVzcCwgc3RhdGUgPT09ICdyZXRyeScpO1xuICB9XG59XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbkFXUy5SZXNvdXJjZVdhaXRlciA9IGluaGVyaXQoe1xuICAvKipcbiAgICogV2FpdHMgZm9yIGEgZ2l2ZW4gc3RhdGUgb24gYSBzZXJ2aWNlIG9iamVjdFxuICAgKiBAcGFyYW0gc2VydmljZSBbU2VydmljZV0gdGhlIHNlcnZpY2Ugb2JqZWN0IHRvIHdhaXQgb25cbiAgICogQHBhcmFtIHN0YXRlIFtTdHJpbmddIHRoZSBzdGF0ZSAoZGVmaW5lZCBpbiB3YWl0ZXIgY29uZmlndXJhdGlvbikgdG8gd2FpdFxuICAgKiAgIGZvci5cbiAgICogQGV4YW1wbGUgQ3JlYXRlIGEgd2FpdGVyIGZvciBydW5uaW5nIEVDMiBpbnN0YW5jZXNcbiAgICogICB2YXIgZWMyID0gbmV3IEFXUy5FQzI7XG4gICAqICAgdmFyIHdhaXRlciA9IG5ldyBBV1MuUmVzb3VyY2VXYWl0ZXIoZWMyLCAnaW5zdGFuY2VSdW5uaW5nJyk7XG4gICAqL1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3Ioc2VydmljZSwgc3RhdGUpIHtcbiAgICB0aGlzLnNlcnZpY2UgPSBzZXJ2aWNlO1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICB0aGlzLmxvYWRXYWl0ZXJDb25maWcodGhpcy5zdGF0ZSk7XG4gIH0sXG5cbiAgc2VydmljZTogbnVsbCxcblxuICBzdGF0ZTogbnVsbCxcblxuICBjb25maWc6IG51bGwsXG5cbiAgbWF0Y2hlcnM6IHtcbiAgICBwYXRoOiBmdW5jdGlvbihyZXNwLCBleHBlY3RlZCwgYXJndW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBqbWVzcGF0aC5zZWFyY2gocmVzcC5kYXRhLCBhcmd1bWVudCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gam1lc3BhdGguc3RyaWN0RGVlcEVxdWFsKHJlc3VsdCxleHBlY3RlZCk7XG4gICAgfSxcblxuICAgIHBhdGhBbGw6IGZ1bmN0aW9uKHJlc3AsIGV4cGVjdGVkLCBhcmd1bWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlc3VsdHMgPSBqbWVzcGF0aC5zZWFyY2gocmVzcC5kYXRhLCBhcmd1bWVudCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0cykpIHJlc3VsdHMgPSBbcmVzdWx0c107XG4gICAgICB2YXIgbnVtUmVzdWx0cyA9IHJlc3VsdHMubGVuZ3RoO1xuICAgICAgaWYgKCFudW1SZXN1bHRzKSByZXR1cm4gZmFsc2U7XG4gICAgICBmb3IgKHZhciBpbmQgPSAwIDsgaW5kIDwgbnVtUmVzdWx0czsgaW5kKyspIHtcbiAgICAgICAgaWYgKCFqbWVzcGF0aC5zdHJpY3REZWVwRXF1YWwocmVzdWx0c1tpbmRdLCBleHBlY3RlZCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICBwYXRoQW55OiBmdW5jdGlvbihyZXNwLCBleHBlY3RlZCwgYXJndW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHRzID0gam1lc3BhdGguc2VhcmNoKHJlc3AuZGF0YSwgYXJndW1lbnQpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlc3VsdHMpKSByZXN1bHRzID0gW3Jlc3VsdHNdO1xuICAgICAgdmFyIG51bVJlc3VsdHMgPSByZXN1bHRzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGluZCA9IDAgOyBpbmQgPCBudW1SZXN1bHRzOyBpbmQrKykge1xuICAgICAgICBpZiAoam1lc3BhdGguc3RyaWN0RGVlcEVxdWFsKHJlc3VsdHNbaW5kXSwgZXhwZWN0ZWQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgc3RhdHVzOiBmdW5jdGlvbihyZXNwLCBleHBlY3RlZCkge1xuICAgICAgdmFyIHN0YXR1c0NvZGUgPSByZXNwLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlO1xuICAgICAgcmV0dXJuICh0eXBlb2Ygc3RhdHVzQ29kZSA9PT0gJ251bWJlcicpICYmIChzdGF0dXNDb2RlID09PSBleHBlY3RlZCk7XG4gICAgfSxcblxuICAgIGVycm9yOiBmdW5jdGlvbihyZXNwLCBleHBlY3RlZCkge1xuICAgICAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycgJiYgcmVzcC5lcnJvcikge1xuICAgICAgICByZXR1cm4gZXhwZWN0ZWQgPT09IHJlc3AuZXJyb3IuY29kZTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIGV4cGVjdGVkIGlzIG5vdCBzdHJpbmcsIGNhbiBiZSBib29sZWFuIGluZGljYXRpbmcgcHJlc2VuY2Ugb2YgZXJyb3JcbiAgICAgIHJldHVybiBleHBlY3RlZCA9PT0gISFyZXNwLmVycm9yO1xuICAgIH1cbiAgfSxcblxuICBsaXN0ZW5lcnM6IG5ldyBBV1MuU2VxdWVudGlhbEV4ZWN1dG9yKCkuYWRkTmFtZWRMaXN0ZW5lcnMoZnVuY3Rpb24oYWRkKSB7XG4gICAgYWRkKCdSRVRSWV9DSEVDSycsICdyZXRyeScsIGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgIHZhciB3YWl0ZXIgPSByZXNwLnJlcXVlc3QuX3dhaXRlcjtcbiAgICAgIGlmIChyZXNwLmVycm9yICYmIHJlc3AuZXJyb3IuY29kZSA9PT0gJ1Jlc291cmNlTm90UmVhZHknKSB7XG4gICAgICAgIHJlc3AuZXJyb3IucmV0cnlEZWxheSA9ICh3YWl0ZXIuY29uZmlnLmRlbGF5IHx8IDApICogMTAwMDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZCgnQ0hFQ0tfT1VUUFVUJywgJ2V4dHJhY3REYXRhJywgQ0hFQ0tfQUNDRVBUT1JTKTtcblxuICAgIGFkZCgnQ0hFQ0tfRVJST1InLCAnZXh0cmFjdEVycm9yJywgQ0hFQ0tfQUNDRVBUT1JTKTtcbiAgfSksXG5cbiAgLyoqXG4gICAqIEByZXR1cm4gW0FXUy5SZXF1ZXN0XVxuICAgKi9cbiAgd2FpdDogZnVuY3Rpb24gd2FpdChwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNhbGxiYWNrID0gcGFyYW1zOyBwYXJhbXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuJHdhaXRlcikge1xuICAgICAgcGFyYW1zID0gQVdTLnV0aWwuY29weShwYXJhbXMpO1xuICAgICAgaWYgKHR5cGVvZiBwYXJhbXMuJHdhaXRlci5kZWxheSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhpcy5jb25maWcuZGVsYXkgPSBwYXJhbXMuJHdhaXRlci5kZWxheTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcGFyYW1zLiR3YWl0ZXIubWF4QXR0ZW1wdHMgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLm1heEF0dGVtcHRzID0gcGFyYW1zLiR3YWl0ZXIubWF4QXR0ZW1wdHM7XG4gICAgICB9XG4gICAgICBkZWxldGUgcGFyYW1zLiR3YWl0ZXI7XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSB0aGlzLnNlcnZpY2UubWFrZVJlcXVlc3QodGhpcy5jb25maWcub3BlcmF0aW9uLCBwYXJhbXMpO1xuICAgIHJlcXVlc3QuX3dhaXRlciA9IHRoaXM7XG4gICAgcmVxdWVzdC5yZXNwb25zZS5tYXhSZXRyaWVzID0gdGhpcy5jb25maWcubWF4QXR0ZW1wdHM7XG4gICAgcmVxdWVzdC5hZGRMaXN0ZW5lcnModGhpcy5saXN0ZW5lcnMpO1xuXG4gICAgaWYgKGNhbGxiYWNrKSByZXF1ZXN0LnNlbmQoY2FsbGJhY2spO1xuICAgIHJldHVybiByZXF1ZXN0O1xuICB9LFxuXG4gIHNldFN1Y2Nlc3M6IGZ1bmN0aW9uIHNldFN1Y2Nlc3MocmVzcCkge1xuICAgIHJlc3AuZXJyb3IgPSBudWxsO1xuICAgIHJlc3AuZGF0YSA9IHJlc3AuZGF0YSB8fCB7fTtcbiAgICByZXNwLnJlcXVlc3QucmVtb3ZlQWxsTGlzdGVuZXJzKCdleHRyYWN0RGF0YScpO1xuICB9LFxuXG4gIHNldEVycm9yOiBmdW5jdGlvbiBzZXRFcnJvcihyZXNwLCByZXRyeWFibGUpIHtcbiAgICByZXNwLmRhdGEgPSBudWxsO1xuICAgIHJlc3AuZXJyb3IgPSBBV1MudXRpbC5lcnJvcihyZXNwLmVycm9yIHx8IG5ldyBFcnJvcigpLCB7XG4gICAgICBjb2RlOiAnUmVzb3VyY2VOb3RSZWFkeScsXG4gICAgICBtZXNzYWdlOiAnUmVzb3VyY2UgaXMgbm90IGluIHRoZSBzdGF0ZSAnICsgdGhpcy5zdGF0ZSxcbiAgICAgIHJldHJ5YWJsZTogcmV0cnlhYmxlXG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIExvYWRzIHdhaXRlciBjb25maWd1cmF0aW9uIGZyb20gQVBJIGNvbmZpZ3VyYXRpb25cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBsb2FkV2FpdGVyQ29uZmlnOiBmdW5jdGlvbiBsb2FkV2FpdGVyQ29uZmlnKHN0YXRlKSB7XG4gICAgaWYgKCF0aGlzLnNlcnZpY2UuYXBpLndhaXRlcnNbc3RhdGVdKSB7XG4gICAgICB0aHJvdyBuZXcgQVdTLnV0aWwuZXJyb3IobmV3IEVycm9yKCksIHtcbiAgICAgICAgY29kZTogJ1N0YXRlTm90Rm91bmRFcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdTdGF0ZSAnICsgc3RhdGUgKyAnIG5vdCBmb3VuZC4nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmZpZyA9IEFXUy51dGlsLmNvcHkodGhpcy5zZXJ2aWNlLmFwaS53YWl0ZXJzW3N0YXRlXSk7XG4gIH1cbn0pO1xuXG59LHtcIi4vY29yZVwiOjE5LFwiam1lc3BhdGhcIjo4NX1dLDU4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBBV1MgPSByZXF1aXJlKCcuL2NvcmUnKTtcbnZhciBpbmhlcml0ID0gQVdTLnV0aWwuaW5oZXJpdDtcbnZhciBqbWVzcGF0aCA9IHJlcXVpcmUoJ2ptZXNwYXRoJyk7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgdGhlIHJlc3BvbnNlIGluZm9ybWF0aW9uXG4gKiBmcm9tIGEgc2VydmljZSByZXF1ZXN0IG9wZXJhdGlvbiBzZW50IHRocm91Z2gge0FXUy5SZXF1ZXN0fS5cbiAqIFRoZSByZXNwb25zZSBvYmplY3QgaGFzIHR3byBtYWluIHByb3BlcnRpZXMgZm9yIGdldHRpbmcgaW5mb3JtYXRpb25cbiAqIGJhY2sgZnJvbSBhIHJlcXVlc3Q6XG4gKlxuICogIyMgVGhlIGBkYXRhYCBwcm9wZXJ0eVxuICpcbiAqIFRoZSBgcmVzcG9uc2UuZGF0YWAgcHJvcGVydHkgY29udGFpbnMgdGhlIHNlcmlhbGl6ZWQgb2JqZWN0IGRhdGFcbiAqIHJldHJpZXZlZCBmcm9tIHRoZSBzZXJ2aWNlIHJlcXVlc3QuIEZvciBpbnN0YW5jZSwgZm9yIGFuXG4gKiBBbWF6b24gRHluYW1vREIgYGxpc3RUYWJsZXNgIG1ldGhvZCBjYWxsLCB0aGUgcmVzcG9uc2UgZGF0YSBtaWdodFxuICogbG9vayBsaWtlOlxuICpcbiAqIGBgYFxuICogPiByZXNwLmRhdGFcbiAqIHsgVGFibGVOYW1lczpcbiAqICAgIFsgJ3RhYmxlMScsICd0YWJsZTInLCAuLi4gXSB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgYGRhdGFgIHByb3BlcnR5IGNhbiBiZSBudWxsIGlmIGFuIGVycm9yIG9jY3VycyAoc2VlIGJlbG93KS5cbiAqXG4gKiAjIyBUaGUgYGVycm9yYCBwcm9wZXJ0eVxuICpcbiAqIEluIHRoZSBldmVudCBvZiBhIHNlcnZpY2UgZXJyb3IgKG9yIHRyYW5zZmVyIGVycm9yKSwgdGhlXG4gKiBgcmVzcG9uc2UuZXJyb3JgIHByb3BlcnR5IHdpbGwgYmUgZmlsbGVkIHdpdGggdGhlIGdpdmVuXG4gKiBlcnJvciBkYXRhIGluIHRoZSBmb3JtOlxuICpcbiAqIGBgYFxuICogeyBjb2RlOiAnU0hPUlRfVU5JUVVFX0VSUk9SX0NPREUnLFxuICogICBtZXNzYWdlOiAnU29tZSBodW1hbiByZWFkYWJsZSBlcnJvciBtZXNzYWdlJyB9XG4gKiBgYGBcbiAqXG4gKiBJbiB0aGUgY2FzZSBvZiBhbiBlcnJvciwgdGhlIGBkYXRhYCBwcm9wZXJ0eSB3aWxsIGJlIGBudWxsYC5cbiAqIE5vdGUgdGhhdCBpZiB5b3UgaGFuZGxlIGV2ZW50cyB0aGF0IGNhbiBiZSBpbiBhIGZhaWx1cmUgc3RhdGUsXG4gKiB5b3Ugc2hvdWxkIGFsd2F5cyBjaGVjayB3aGV0aGVyIGByZXNwb25zZS5lcnJvcmAgaXMgc2V0XG4gKiBiZWZvcmUgYXR0ZW1wdGluZyB0byBhY2Nlc3MgdGhlIGByZXNwb25zZS5kYXRhYCBwcm9wZXJ0eS5cbiAqXG4gKiBAIWF0dHJpYnV0ZSBkYXRhXG4gKiAgIEByZWFkb25seVxuICogICBAIWdyb3VwIERhdGEgUHJvcGVydGllc1xuICogICBAbm90ZSBJbnNpZGUgb2YgYSB7QVdTLlJlcXVlc3R+aHR0cERhdGF9IGV2ZW50LCB0aGlzXG4gKiAgICAgcHJvcGVydHkgY29udGFpbnMgYSBzaW5nbGUgcmF3IHBhY2tldCBpbnN0ZWFkIG9mIHRoZVxuICogICAgIGZ1bGwgZGUtc2VyaWFsaXplZCBzZXJ2aWNlIHJlc3BvbnNlLlxuICogICBAcmV0dXJuIFtPYmplY3RdIHRoZSBkZS1zZXJpYWxpemVkIHJlc3BvbnNlIGRhdGFcbiAqICAgICBmcm9tIHRoZSBzZXJ2aWNlLlxuICpcbiAqIEAhYXR0cmlidXRlIGVycm9yXG4gKiAgIEFuIHN0cnVjdHVyZSBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IGEgc2VydmljZVxuICogICBvciBuZXR3b3JraW5nIGVycm9yLlxuICogICBAcmVhZG9ubHlcbiAqICAgQCFncm91cCBEYXRhIFByb3BlcnRpZXNcbiAqICAgQG5vdGUgVGhpcyBhdHRyaWJ1dGUgaXMgb25seSBmaWxsZWQgaWYgYSBzZXJ2aWNlIG9yXG4gKiAgICAgbmV0d29ya2luZyBlcnJvciBvY2N1cnMuXG4gKiAgIEByZXR1cm4gW0Vycm9yXVxuICogICAgICogY29kZSBbU3RyaW5nXSBhIHVuaXF1ZSBzaG9ydCBjb2RlIHJlcHJlc2VudGluZyB0aGVcbiAqICAgICAgIGVycm9yIHRoYXQgd2FzIGVtaXR0ZWQuXG4gKiAgICAgKiBtZXNzYWdlIFtTdHJpbmddIGEgbG9uZ2VyIGh1bWFuIHJlYWRhYmxlIGVycm9yIG1lc3NhZ2VcbiAqICAgICAqIHJldHJ5YWJsZSBbQm9vbGVhbl0gd2hldGhlciB0aGUgZXJyb3IgbWVzc2FnZSBpc1xuICogICAgICAgcmV0cnlhYmxlLlxuICogICAgICogc3RhdHVzQ29kZSBbTnVtZXJpY10gaW4gdGhlIGNhc2Ugb2YgYSByZXF1ZXN0IHRoYXQgcmVhY2hlZCB0aGUgc2VydmljZSxcbiAqICAgICAgIHRoaXMgdmFsdWUgY29udGFpbnMgdGhlIHJlc3BvbnNlIHN0YXR1cyBjb2RlLlxuICogICAgICogdGltZSBbRGF0ZV0gdGhlIGRhdGUgdGltZSBvYmplY3Qgd2hlbiB0aGUgZXJyb3Igb2NjdXJyZWQuXG4gKiAgICAgKiBob3N0bmFtZSBbU3RyaW5nXSBzZXQgd2hlbiBhIG5ldHdvcmtpbmcgZXJyb3Igb2NjdXJzIHRvIGVhc2lseVxuICogICAgICAgaWRlbnRpZnkgdGhlIGVuZHBvaW50IG9mIHRoZSByZXF1ZXN0LlxuICogICAgICogcmVnaW9uIFtTdHJpbmddIHNldCB3aGVuIGEgbmV0d29ya2luZyBlcnJvciBvY2N1cnMgdG8gZWFzaWx5XG4gKiAgICAgICBpZGVudGlmeSB0aGUgcmVnaW9uIG9mIHRoZSByZXF1ZXN0LlxuICpcbiAqIEAhYXR0cmlidXRlIHJlcXVlc3RJZFxuICogICBAcmVhZG9ubHlcbiAqICAgQCFncm91cCBEYXRhIFByb3BlcnRpZXNcbiAqICAgQHJldHVybiBbU3RyaW5nXSB0aGUgdW5pcXVlIHJlcXVlc3QgSUQgYXNzb2NpYXRlZCB3aXRoIHRoZSByZXNwb25zZS5cbiAqICAgICBMb2cgdGhpcyB2YWx1ZSB3aGVuIGRlYnVnZ2luZyByZXF1ZXN0cyBmb3IgQVdTIHN1cHBvcnQuXG4gKlxuICogQCFhdHRyaWJ1dGUgcmV0cnlDb3VudFxuICogICBAcmVhZG9ubHlcbiAqICAgQCFncm91cCBPcGVyYXRpb24gUHJvcGVydGllc1xuICogICBAcmV0dXJuIFtJbnRlZ2VyXSB0aGUgbnVtYmVyIG9mIHJldHJpZXMgdGhhdCB3ZXJlXG4gKiAgICAgYXR0ZW1wdGVkIGJlZm9yZSB0aGUgcmVxdWVzdCB3YXMgY29tcGxldGVkLlxuICpcbiAqIEAhYXR0cmlidXRlIHJlZGlyZWN0Q291bnRcbiAqICAgQHJlYWRvbmx5XG4gKiAgIEAhZ3JvdXAgT3BlcmF0aW9uIFByb3BlcnRpZXNcbiAqICAgQHJldHVybiBbSW50ZWdlcl0gdGhlIG51bWJlciBvZiByZWRpcmVjdHMgdGhhdCB3ZXJlXG4gKiAgICAgZm9sbG93ZWQgYmVmb3JlIHRoZSByZXF1ZXN0IHdhcyBjb21wbGV0ZWQuXG4gKlxuICogQCFhdHRyaWJ1dGUgaHR0cFJlc3BvbnNlXG4gKiAgIEByZWFkb25seVxuICogICBAIWdyb3VwIEhUVFAgUHJvcGVydGllc1xuICogICBAcmV0dXJuIFtBV1MuSHR0cFJlc3BvbnNlXSB0aGUgcmF3IEhUVFAgcmVzcG9uc2Ugb2JqZWN0XG4gKiAgICAgY29udGFpbmluZyB0aGUgcmVzcG9uc2UgaGVhZGVycyBhbmQgYm9keSBpbmZvcm1hdGlvblxuICogICAgIGZyb20gdGhlIHNlcnZlci5cbiAqXG4gKiBAc2VlIEFXUy5SZXF1ZXN0XG4gKi9cbkFXUy5SZXNwb25zZSA9IGluaGVyaXQoe1xuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBSZXNwb25zZShyZXF1ZXN0KSB7XG4gICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICB0aGlzLmRhdGEgPSBudWxsO1xuICAgIHRoaXMuZXJyb3IgPSBudWxsO1xuICAgIHRoaXMucmV0cnlDb3VudCA9IDA7XG4gICAgdGhpcy5yZWRpcmVjdENvdW50ID0gMDtcbiAgICB0aGlzLmh0dHBSZXNwb25zZSA9IG5ldyBBV1MuSHR0cFJlc3BvbnNlKCk7XG4gICAgaWYgKHJlcXVlc3QpIHtcbiAgICAgIHRoaXMubWF4UmV0cmllcyA9IHJlcXVlc3Quc2VydmljZS5udW1SZXRyaWVzKCk7XG4gICAgICB0aGlzLm1heFJlZGlyZWN0cyA9IHJlcXVlc3Quc2VydmljZS5jb25maWcubWF4UmVkaXJlY3RzO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyByZXF1ZXN0IGZvciB0aGUgbmV4dCBwYWdlIG9mIHJlc3BvbnNlIGRhdGEsIGNhbGxpbmcgdGhlXG4gICAqIGNhbGxiYWNrIHdpdGggdGhlIHBhZ2UgZGF0YSBpZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyLCBkYXRhKVxuICAgKiAgIENhbGxlZCB3aGVuIGEgcGFnZSBvZiBkYXRhIGlzIHJldHVybmVkIGZyb20gdGhlIG5leHQgcmVxdWVzdC5cbiAgICpcbiAgICogICBAcGFyYW0gZXJyIFtFcnJvcl0gYW4gZXJyb3Igb2JqZWN0LCBpZiBhbiBlcnJvciBvY2N1cnJlZCBpbiB0aGUgcmVxdWVzdFxuICAgKiAgIEBwYXJhbSBkYXRhIFtPYmplY3RdIHRoZSBuZXh0IHBhZ2Ugb2YgZGF0YSwgb3IgbnVsbCwgaWYgdGhlcmUgYXJlIG5vXG4gICAqICAgICBtb3JlIHBhZ2VzIGxlZnQuXG4gICAqIEByZXR1cm4gW0FXUy5SZXF1ZXN0XSB0aGUgcmVxdWVzdCBvYmplY3QgZm9yIHRoZSBuZXh0IHBhZ2Ugb2YgZGF0YVxuICAgKiBAcmV0dXJuIFtudWxsXSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCBhbmQgdGhlcmUgYXJlIG5vIHBhZ2VzIGxlZnRcbiAgICogICB0byByZXRyaWV2ZS5cbiAgICogQHNpbmNlIHYxLjQuMFxuICAgKi9cbiAgbmV4dFBhZ2U6IGZ1bmN0aW9uIG5leHRQYWdlKGNhbGxiYWNrKSB7XG4gICAgdmFyIGNvbmZpZztcbiAgICB2YXIgc2VydmljZSA9IHRoaXMucmVxdWVzdC5zZXJ2aWNlO1xuICAgIHZhciBvcGVyYXRpb24gPSB0aGlzLnJlcXVlc3Qub3BlcmF0aW9uO1xuICAgIHRyeSB7XG4gICAgICBjb25maWcgPSBzZXJ2aWNlLnBhZ2luYXRpb25Db25maWcob3BlcmF0aW9uLCB0cnVlKTtcbiAgICB9IGNhdGNoIChlKSB7IHRoaXMuZXJyb3IgPSBlOyB9XG5cbiAgICBpZiAoIXRoaXMuaGFzTmV4dFBhZ2UoKSkge1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayh0aGlzLmVycm9yLCBudWxsKTtcbiAgICAgIGVsc2UgaWYgKHRoaXMuZXJyb3IpIHRocm93IHRoaXMuZXJyb3I7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcGFyYW1zID0gQVdTLnV0aWwuY29weSh0aGlzLnJlcXVlc3QucGFyYW1zKTtcbiAgICBpZiAoIXRoaXMubmV4dFBhZ2VUb2tlbnMpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayA/IGNhbGxiYWNrKG51bGwsIG51bGwpIDogbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlucHV0VG9rZW5zID0gY29uZmlnLmlucHV0VG9rZW47XG4gICAgICBpZiAodHlwZW9mIGlucHV0VG9rZW5zID09PSAnc3RyaW5nJykgaW5wdXRUb2tlbnMgPSBbaW5wdXRUb2tlbnNdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dFRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwYXJhbXNbaW5wdXRUb2tlbnNbaV1dID0gdGhpcy5uZXh0UGFnZVRva2Vuc1tpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXJ2aWNlLm1ha2VSZXF1ZXN0KHRoaXMucmVxdWVzdC5vcGVyYXRpb24sIHBhcmFtcywgY2FsbGJhY2spO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiBbQm9vbGVhbl0gd2hldGhlciBtb3JlIHBhZ2VzIG9mIGRhdGEgY2FuIGJlIHJldHVybmVkIGJ5IGZ1cnRoZXJcbiAgICogICByZXF1ZXN0c1xuICAgKiBAc2luY2UgdjEuNC4wXG4gICAqL1xuICBoYXNOZXh0UGFnZTogZnVuY3Rpb24gaGFzTmV4dFBhZ2UoKSB7XG4gICAgdGhpcy5jYWNoZU5leHRQYWdlVG9rZW5zKCk7XG4gICAgaWYgKHRoaXMubmV4dFBhZ2VUb2tlbnMpIHJldHVybiB0cnVlO1xuICAgIGlmICh0aGlzLm5leHRQYWdlVG9rZW5zID09PSB1bmRlZmluZWQpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgZWxzZSByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY2FjaGVOZXh0UGFnZVRva2VuczogZnVuY3Rpb24gY2FjaGVOZXh0UGFnZVRva2VucygpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsICduZXh0UGFnZVRva2VucycpKSByZXR1cm4gdGhpcy5uZXh0UGFnZVRva2VucztcbiAgICB0aGlzLm5leHRQYWdlVG9rZW5zID0gdW5kZWZpbmVkO1xuXG4gICAgdmFyIGNvbmZpZyA9IHRoaXMucmVxdWVzdC5zZXJ2aWNlLnBhZ2luYXRpb25Db25maWcodGhpcy5yZXF1ZXN0Lm9wZXJhdGlvbik7XG4gICAgaWYgKCFjb25maWcpIHJldHVybiB0aGlzLm5leHRQYWdlVG9rZW5zO1xuXG4gICAgdGhpcy5uZXh0UGFnZVRva2VucyA9IG51bGw7XG4gICAgaWYgKGNvbmZpZy5tb3JlUmVzdWx0cykge1xuICAgICAgaWYgKCFqbWVzcGF0aC5zZWFyY2godGhpcy5kYXRhLCBjb25maWcubW9yZVJlc3VsdHMpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5leHRQYWdlVG9rZW5zO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBleHBycyA9IGNvbmZpZy5vdXRwdXRUb2tlbjtcbiAgICBpZiAodHlwZW9mIGV4cHJzID09PSAnc3RyaW5nJykgZXhwcnMgPSBbZXhwcnNdO1xuICAgIEFXUy51dGlsLmFycmF5RWFjaC5jYWxsKHRoaXMsIGV4cHJzLCBmdW5jdGlvbiAoZXhwcikge1xuICAgICAgdmFyIG91dHB1dCA9IGptZXNwYXRoLnNlYXJjaCh0aGlzLmRhdGEsIGV4cHIpO1xuICAgICAgaWYgKG91dHB1dCkge1xuICAgICAgICB0aGlzLm5leHRQYWdlVG9rZW5zID0gdGhpcy5uZXh0UGFnZVRva2VucyB8fCBbXTtcbiAgICAgICAgdGhpcy5uZXh0UGFnZVRva2Vucy5wdXNoKG91dHB1dCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0UGFnZVRva2VucztcbiAgfVxuXG59KTtcblxufSx7XCIuL2NvcmVcIjoxOSxcImptZXNwYXRoXCI6ODV9XSw1OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgQVdTID0gcmVxdWlyZSgnLi9jb3JlJyk7XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKiBAIW1ldGhvZCBvbihldmVudE5hbWUsIGNhbGxiYWNrKVxuICogICBSZWdpc3RlcnMgYW4gZXZlbnQgbGlzdGVuZXIgY2FsbGJhY2sgZm9yIHRoZSBldmVudCBnaXZlbiBieSBgZXZlbnROYW1lYC5cbiAqICAgUGFyYW1ldGVycyBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGRlcGVuZCBvbiB0aGUgaW5kaXZpZHVhbCBldmVudFxuICogICBiZWluZyB0cmlnZ2VyZWQuIFNlZSB0aGUgZXZlbnQgZG9jdW1lbnRhdGlvbiBmb3IgdGhvc2UgcGFyYW1ldGVycy5cbiAqXG4gKiAgIEBwYXJhbSBldmVudE5hbWUgW1N0cmluZ10gdGhlIGV2ZW50IG5hbWUgdG8gcmVnaXN0ZXIgdGhlIGxpc3RlbmVyIGZvclxuICogICBAcGFyYW0gY2FsbGJhY2sgW0Z1bmN0aW9uXSB0aGUgbGlzdGVuZXIgY2FsbGJhY2sgZnVuY3Rpb25cbiAqICAgQHBhcmFtIHRvSGVhZCBbQm9vbGVhbl0gYXR0YWNoIHRoZSBsaXN0ZW5lciBjYWxsYmFjayB0byB0aGUgaGVhZCBvZiBjYWxsYmFjayBhcnJheSBpZiBzZXQgdG8gdHJ1ZS5cbiAqICAgICBEZWZhdWx0IHRvIGJlIGZhbHNlLlxuICogICBAcmV0dXJuIFtBV1MuU2VxdWVudGlhbEV4ZWN1dG9yXSB0aGUgc2FtZSBvYmplY3QgZm9yIGNoYWluaW5nXG4gKi9cbkFXUy5TZXF1ZW50aWFsRXhlY3V0b3IgPSBBV1MudXRpbC5pbmhlcml0KHtcblxuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gU2VxdWVudGlhbEV4ZWN1dG9yKCkge1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGxpc3RlbmVyczogZnVuY3Rpb24gbGlzdGVuZXJzKGV2ZW50TmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9ldmVudHNbZXZlbnROYW1lXSA/IHRoaXMuX2V2ZW50c1tldmVudE5hbWVdLnNsaWNlKDApIDogW107XG4gIH0sXG5cbiAgb246IGZ1bmN0aW9uIG9uKGV2ZW50TmFtZSwgbGlzdGVuZXIsIHRvSGVhZCkge1xuICAgIGlmICh0aGlzLl9ldmVudHNbZXZlbnROYW1lXSkge1xuICAgICAgdG9IZWFkID9cbiAgICAgICAgdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0udW5zaGlmdChsaXN0ZW5lcikgOlxuICAgICAgICB0aGlzLl9ldmVudHNbZXZlbnROYW1lXS5wdXNoKGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0gPSBbbGlzdGVuZXJdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBvbkFzeW5jOiBmdW5jdGlvbiBvbkFzeW5jKGV2ZW50TmFtZSwgbGlzdGVuZXIsIHRvSGVhZCkge1xuICAgIGxpc3RlbmVyLl9pc0FzeW5jID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy5vbihldmVudE5hbWUsIGxpc3RlbmVyLCB0b0hlYWQpO1xuICB9LFxuXG4gIHJlbW92ZUxpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldmVudE5hbWVdO1xuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgICAgdmFyIHBvc2l0aW9uID0gLTE7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lcnNbaV0gPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocG9zaXRpb24gPiAtMSkge1xuICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgcmVtb3ZlQWxsTGlzdGVuZXJzOiBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnROYW1lKSB7XG4gICAgaWYgKGV2ZW50TmFtZSkge1xuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1tldmVudE5hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZW1pdDogZnVuY3Rpb24gZW1pdChldmVudE5hbWUsIGV2ZW50QXJncywgZG9uZUNhbGxiYWNrKSB7XG4gICAgaWYgKCFkb25lQ2FsbGJhY2spIGRvbmVDYWxsYmFjayA9IGZ1bmN0aW9uKCkgeyB9O1xuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycyhldmVudE5hbWUpO1xuICAgIHZhciBjb3VudCA9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgdGhpcy5jYWxsTGlzdGVuZXJzKGxpc3RlbmVycywgZXZlbnRBcmdzLCBkb25lQ2FsbGJhY2spO1xuICAgIHJldHVybiBjb3VudCA+IDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY2FsbExpc3RlbmVyczogZnVuY3Rpb24gY2FsbExpc3RlbmVycyhsaXN0ZW5lcnMsIGFyZ3MsIGRvbmVDYWxsYmFjaywgcHJldkVycm9yKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBlcnJvciA9IHByZXZFcnJvciB8fCBudWxsO1xuXG4gICAgZnVuY3Rpb24gY2FsbE5leHRMaXN0ZW5lcihlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZXJyb3IgPSBBV1MudXRpbC5lcnJvcihlcnJvciB8fCBuZXcgRXJyb3IoKSwgZXJyKTtcbiAgICAgICAgaWYgKHNlbGYuX2hhbHRIYW5kbGVyc09uRXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZG9uZUNhbGxiYWNrLmNhbGwoc2VsZiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzZWxmLmNhbGxMaXN0ZW5lcnMobGlzdGVuZXJzLCBhcmdzLCBkb25lQ2FsbGJhY2ssIGVycm9yKTtcbiAgICB9XG5cbiAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVycy5zaGlmdCgpO1xuICAgICAgaWYgKGxpc3RlbmVyLl9pc0FzeW5jKSB7IC8vIGFzeW5jaHJvbm91cyBsaXN0ZW5lclxuICAgICAgICBsaXN0ZW5lci5hcHBseShzZWxmLCBhcmdzLmNvbmNhdChbY2FsbE5leHRMaXN0ZW5lcl0pKTtcbiAgICAgICAgcmV0dXJuOyAvLyBzdG9wIGhlcmUsIGNhbGxOZXh0TGlzdGVuZXIgd2lsbCBjb250aW51ZVxuICAgICAgfSBlbHNlIHsgLy8gc3luY2hyb25vdXMgbGlzdGVuZXJcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBsaXN0ZW5lci5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgZXJyb3IgPSBBV1MudXRpbC5lcnJvcihlcnJvciB8fCBuZXcgRXJyb3IoKSwgZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgJiYgc2VsZi5faGFsdEhhbmRsZXJzT25FcnJvcikge1xuICAgICAgICAgIGRvbmVDYWxsYmFjay5jYWxsKHNlbGYsIGVycm9yKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZG9uZUNhbGxiYWNrLmNhbGwoc2VsZiwgZXJyb3IpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGRzIG9yIGNvcGllcyBhIHNldCBvZiBsaXN0ZW5lcnMgZnJvbSBhbm90aGVyIGxpc3Qgb2ZcbiAgICogbGlzdGVuZXJzIG9yIFNlcXVlbnRpYWxFeGVjdXRvciBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSBsaXN0ZW5lcnMgW21hcDxTdHJpbmcsQXJyYXk8RnVuY3Rpb24+PiwgQVdTLlNlcXVlbnRpYWxFeGVjdXRvcl1cbiAgICogICBhIGxpc3Qgb2YgZXZlbnRzIGFuZCBjYWxsYmFja3MsIG9yIGFuIGV2ZW50IGVtaXR0ZXIgb2JqZWN0XG4gICAqICAgY29udGFpbmluZyBsaXN0ZW5lcnMgdG8gYWRkIHRvIHRoaXMgZW1pdHRlciBvYmplY3QuXG4gICAqIEByZXR1cm4gW0FXUy5TZXF1ZW50aWFsRXhlY3V0b3JdIHRoZSBlbWl0dGVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuICAgKiBAZXhhbXBsZSBBZGRpbmcgbGlzdGVuZXJzIGZyb20gYSBtYXAgb2YgbGlzdGVuZXJzXG4gICAqICAgZW1pdHRlci5hZGRMaXN0ZW5lcnMoe1xuICAgKiAgICAgZXZlbnQxOiBbZnVuY3Rpb24oKSB7IC4uLiB9LCBmdW5jdGlvbigpIHsgLi4uIH1dLFxuICAgKiAgICAgZXZlbnQyOiBbZnVuY3Rpb24oKSB7IC4uLiB9XVxuICAgKiAgIH0pO1xuICAgKiAgIGVtaXR0ZXIuZW1pdCgnZXZlbnQxJyk7IC8vIGVtaXR0ZXIgaGFzIGV2ZW50MVxuICAgKiAgIGVtaXR0ZXIuZW1pdCgnZXZlbnQyJyk7IC8vIGVtaXR0ZXIgaGFzIGV2ZW50MlxuICAgKiBAZXhhbXBsZSBBZGRpbmcgbGlzdGVuZXJzIGZyb20gYW5vdGhlciBlbWl0dGVyIG9iamVjdFxuICAgKiAgIHZhciBlbWl0dGVyMSA9IG5ldyBBV1MuU2VxdWVudGlhbEV4ZWN1dG9yKCk7XG4gICAqICAgZW1pdHRlcjEub24oJ2V2ZW50MScsIGZ1bmN0aW9uKCkgeyAuLi4gfSk7XG4gICAqICAgZW1pdHRlcjEub24oJ2V2ZW50MicsIGZ1bmN0aW9uKCkgeyAuLi4gfSk7XG4gICAqICAgdmFyIGVtaXR0ZXIyID0gbmV3IEFXUy5TZXF1ZW50aWFsRXhlY3V0b3IoKTtcbiAgICogICBlbWl0dGVyMi5hZGRMaXN0ZW5lcnMoZW1pdHRlcjEpO1xuICAgKiAgIGVtaXR0ZXIyLmVtaXQoJ2V2ZW50MScpOyAvLyBlbWl0dGVyMiBoYXMgZXZlbnQxXG4gICAqICAgZW1pdHRlcjIuZW1pdCgnZXZlbnQyJyk7IC8vIGVtaXR0ZXIyIGhhcyBldmVudDJcbiAgICovXG4gIGFkZExpc3RlbmVyczogZnVuY3Rpb24gYWRkTGlzdGVuZXJzKGxpc3RlbmVycykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGlmIHBhcmFtZXRlciBpcyBhbiBTZXF1ZW50aWFsRXhlY3V0b3Igb2JqZWN0XG4gICAgaWYgKGxpc3RlbmVycy5fZXZlbnRzKSBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuX2V2ZW50cztcblxuICAgIEFXUy51dGlsLmVhY2gobGlzdGVuZXJzLCBmdW5jdGlvbihldmVudCwgY2FsbGJhY2tzKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrcyA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2tzID0gW2NhbGxiYWNrc107XG4gICAgICBBV1MudXRpbC5hcnJheUVhY2goY2FsbGJhY2tzLCBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICBzZWxmLm9uKGV2ZW50LCBjYWxsYmFjayk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYW4gZXZlbnQgd2l0aCB7b259IGFuZCBzYXZlcyB0aGUgY2FsbGJhY2sgaGFuZGxlIGZ1bmN0aW9uXG4gICAqIGFzIGEgcHJvcGVydHkgb24gdGhlIGVtaXR0ZXIgb2JqZWN0IHVzaW5nIGEgZ2l2ZW4gYG5hbWVgLlxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSBbU3RyaW5nXSB0aGUgcHJvcGVydHkgbmFtZSB0byBzZXQgb24gdGhpcyBvYmplY3QgY29udGFpbmluZ1xuICAgKiAgIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBoYW5kbGUgc28gdGhhdCB0aGUgbGlzdGVuZXIgY2FuIGJlIHJlbW92ZWQgaW5cbiAgICogICB0aGUgZnV0dXJlLlxuICAgKiBAcGFyYW0gKHNlZSBvbilcbiAgICogQHJldHVybiAoc2VlIG9uKVxuICAgKiBAZXhhbXBsZSBBZGRpbmcgYSBuYW1lZCBsaXN0ZW5lciBEQVRBX0NBTExCQUNLXG4gICAqICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oKSB7IGRvU29tZXRoaW5nKCk7IH07XG4gICAqICAgZW1pdHRlci5hZGROYW1lZExpc3RlbmVyKCdEQVRBX0NBTExCQUNLJywgJ2RhdGEnLCBsaXN0ZW5lcik7XG4gICAqXG4gICAqICAgLy8gdGhlIGZvbGxvd2luZyBwcmludHM6IHRydWVcbiAgICogICBjb25zb2xlLmxvZyhlbWl0dGVyLkRBVEFfQ0FMTEJBQ0sgPT0gbGlzdGVuZXIpO1xuICAgKi9cbiAgYWRkTmFtZWRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkTmFtZWRMaXN0ZW5lcihuYW1lLCBldmVudE5hbWUsIGNhbGxiYWNrLCB0b0hlYWQpIHtcbiAgICB0aGlzW25hbWVdID0gY2FsbGJhY2s7XG4gICAgdGhpcy5hZGRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrLCB0b0hlYWQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGFkZE5hbWVkQXN5bmNMaXN0ZW5lcjogZnVuY3Rpb24gYWRkTmFtZWRBc3luY0xpc3RlbmVyKG5hbWUsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIHRvSGVhZCkge1xuICAgIGNhbGxiYWNrLl9pc0FzeW5jID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy5hZGROYW1lZExpc3RlbmVyKG5hbWUsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIHRvSGVhZCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgdG8gYWRkIGEgc2V0IG9mIG5hbWVkIGxpc3RlbmVycyB1c2luZ1xuICAgKiB7YWRkTmFtZWRMaXN0ZW5lcn0uIFRoZSBjYWxsYmFjayBjb250YWlucyBhIHBhcmFtZXRlclxuICAgKiB3aXRoIGEgaGFuZGxlIHRvIHRoZSBgYWRkTmFtZWRMaXN0ZW5lcmAgbWV0aG9kLlxuICAgKlxuICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oYWRkKVxuICAgKiAgIFRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQgaW1tZWRpYXRlbHkgaW4gb3JkZXIgdG8gcHJvdmlkZVxuICAgKiAgIHRoZSBgYWRkYCBmdW5jdGlvbiB0byB0aGUgYmxvY2suIFRoaXMgc2ltcGxpZmllcyB0aGUgYWRkaXRpb24gb2ZcbiAgICogICBhIGxhcmdlIGdyb3VwIG9mIG5hbWVkIGxpc3RlbmVycy5cbiAgICogICBAcGFyYW0gYWRkIFtGdW5jdGlvbl0gdGhlIHthZGROYW1lZExpc3RlbmVyfSBmdW5jdGlvbiB0byBjYWxsXG4gICAqICAgICB3aGVuIHJlZ2lzdGVyaW5nIGxpc3RlbmVycy5cbiAgICogQGV4YW1wbGUgQWRkaW5nIGEgc2V0IG9mIG5hbWVkIGxpc3RlbmVyc1xuICAgKiAgIGVtaXR0ZXIuYWRkTmFtZWRMaXN0ZW5lcnMoZnVuY3Rpb24oYWRkKSB7XG4gICAqICAgICBhZGQoJ0RBVEFfQ0FMTEJBQ0snLCAnZGF0YScsIGZ1bmN0aW9uKCkgeyAuLi4gfSk7XG4gICAqICAgICBhZGQoJ09USEVSJywgJ290aGVyRXZlbnQnLCBmdW5jdGlvbigpIHsgLi4uIH0pO1xuICAgKiAgICAgYWRkKCdMQVNUJywgJ2xhc3RFdmVudCcsIGZ1bmN0aW9uKCkgeyAuLi4gfSk7XG4gICAqICAgfSk7XG4gICAqXG4gICAqICAgLy8gdGhlc2UgcHJvcGVydGllcyBhcmUgbm93IHNldDpcbiAgICogICBlbWl0dGVyLkRBVEFfQ0FMTEJBQ0s7XG4gICAqICAgZW1pdHRlci5PVEhFUjtcbiAgICogICBlbWl0dGVyLkxBU1Q7XG4gICAqL1xuICBhZGROYW1lZExpc3RlbmVyczogZnVuY3Rpb24gYWRkTmFtZWRMaXN0ZW5lcnMoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgY2FsbGJhY2soXG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5hZGROYW1lZExpc3RlbmVyLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuYWRkTmFtZWRBc3luY0xpc3RlbmVyLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufSk7XG5cbi8qKlxuICoge29ufSBpcyB0aGUgcHJlZmVyZWQgbWV0aG9kLlxuICogQGFwaSBwcml2YXRlXG4gKi9cbkFXUy5TZXF1ZW50aWFsRXhlY3V0b3IucHJvdG90eXBlLmFkZExpc3RlbmVyID0gQVdTLlNlcXVlbnRpYWxFeGVjdXRvci5wcm90b3R5cGUub247XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gQVdTLlNlcXVlbnRpYWxFeGVjdXRvcjtcblxufSx7XCIuL2NvcmVcIjoxOX1dLDYwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG52YXIgQVdTID0gcmVxdWlyZSgnLi9jb3JlJyk7XG52YXIgQXBpID0gcmVxdWlyZSgnLi9tb2RlbC9hcGknKTtcbnZhciByZWdpb25Db25maWcgPSByZXF1aXJlKCcuL3JlZ2lvbl9jb25maWcnKTtcblxudmFyIGluaGVyaXQgPSBBV1MudXRpbC5pbmhlcml0O1xudmFyIGNsaWVudENvdW50ID0gMDtcblxuLyoqXG4gKiBUaGUgc2VydmljZSBjbGFzcyByZXByZXNlbnRpbmcgYW4gQVdTIHNlcnZpY2UuXG4gKlxuICogQGNsYXNzX2Fic3RyYWN0IFRoaXMgY2xhc3MgaXMgYW4gYWJzdHJhY3QgY2xhc3MuXG4gKlxuICogQCFhdHRyaWJ1dGUgYXBpVmVyc2lvbnNcbiAqICAgQHJldHVybiBbQXJyYXk8U3RyaW5nPl0gdGhlIGxpc3Qgb2YgQVBJIHZlcnNpb25zIHN1cHBvcnRlZCBieSB0aGlzIHNlcnZpY2UuXG4gKiAgIEByZWFkb25seVxuICovXG5BV1MuU2VydmljZSA9IGluaGVyaXQoe1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHNlcnZpY2Ugb2JqZWN0IHdpdGggYSBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgKlxuICAgKiBAcGFyYW0gY29uZmlnIFttYXBdIGEgbWFwIG9mIGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIFNlcnZpY2UoY29uZmlnKSB7XG4gICAgaWYgKCF0aGlzLmxvYWRTZXJ2aWNlQ2xhc3MpIHtcbiAgICAgIHRocm93IEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcigpLFxuICAgICAgICAnU2VydmljZSBtdXN0IGJlIGNvbnN0cnVjdGVkIHdpdGggYG5ld1xcJyBvcGVyYXRvcicpO1xuICAgIH1cbiAgICB2YXIgU2VydmljZUNsYXNzID0gdGhpcy5sb2FkU2VydmljZUNsYXNzKGNvbmZpZyB8fCB7fSk7XG4gICAgaWYgKFNlcnZpY2VDbGFzcykge1xuICAgICAgdmFyIG9yaWdpbmFsQ29uZmlnID0gQVdTLnV0aWwuY29weShjb25maWcpO1xuICAgICAgdmFyIHN2YyA9IG5ldyBTZXJ2aWNlQ2xhc3MoY29uZmlnKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdmMsICdfb3JpZ2luYWxDb25maWcnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBvcmlnaW5hbENvbmZpZzsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBzdmMuX2NsaWVudElkID0gKytjbGllbnRDb3VudDtcbiAgICAgIHJldHVybiBzdmM7XG4gICAgfVxuICAgIHRoaXMuaW5pdGlhbGl6ZShjb25maWcpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uIGluaXRpYWxpemUoY29uZmlnKSB7XG4gICAgdmFyIHN2Y0NvbmZpZyA9IEFXUy5jb25maWdbdGhpcy5zZXJ2aWNlSWRlbnRpZmllcl07XG4gICAgdGhpcy5jb25maWcgPSBuZXcgQVdTLkNvbmZpZyhBV1MuY29uZmlnKTtcbiAgICBpZiAoc3ZjQ29uZmlnKSB0aGlzLmNvbmZpZy51cGRhdGUoc3ZjQ29uZmlnLCB0cnVlKTtcbiAgICBpZiAoY29uZmlnKSB0aGlzLmNvbmZpZy51cGRhdGUoY29uZmlnLCB0cnVlKTtcblxuICAgIHRoaXMudmFsaWRhdGVTZXJ2aWNlKCk7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy5lbmRwb2ludCkgcmVnaW9uQ29uZmlnKHRoaXMpO1xuXG4gICAgdGhpcy5jb25maWcuZW5kcG9pbnQgPSB0aGlzLmVuZHBvaW50RnJvbVRlbXBsYXRlKHRoaXMuY29uZmlnLmVuZHBvaW50KTtcbiAgICB0aGlzLnNldEVuZHBvaW50KHRoaXMuY29uZmlnLmVuZHBvaW50KTtcbiAgICAvL2VuYWJsZSBhdHRhY2hpbmcgbGlzdGVuZXJzIHRvIHNlcnZpY2UgY2xpZW50XG4gICAgQVdTLlNlcXVlbnRpYWxFeGVjdXRvci5jYWxsKHRoaXMpO1xuICAgIEFXUy5TZXJ2aWNlLmFkZERlZmF1bHRNb25pdG9yaW5nTGlzdGVuZXJzKHRoaXMpO1xuICAgIGlmICgodGhpcy5jb25maWcuY2xpZW50U2lkZU1vbml0b3JpbmcgfHwgQVdTLlNlcnZpY2UuX2NsaWVudFNpZGVNb25pdG9yaW5nKSAmJiB0aGlzLnB1Ymxpc2hlcikge1xuICAgICAgdmFyIHB1Ymxpc2hlciA9IHRoaXMucHVibGlzaGVyO1xuICAgICAgdGhpcy5hZGROYW1lZExpc3RlbmVyKCdQVUJMSVNIX0FQSV9DQUxMJywgJ2FwaUNhbGwnLCBmdW5jdGlvbiBQVUJMSVNIX0FQSV9DQUxMKGV2ZW50KSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7cHVibGlzaGVyLmV2ZW50SGFuZGxlcihldmVudCk7fSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuYWRkTmFtZWRMaXN0ZW5lcignUFVCTElTSF9BUElfQVRURU1QVCcsICdhcGlDYWxsQXR0ZW1wdCcsIGZ1bmN0aW9uIFBVQkxJU0hfQVBJX0FUVEVNUFQoZXZlbnQpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtwdWJsaXNoZXIuZXZlbnRIYW5kbGVyKGV2ZW50KTt9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICB2YWxpZGF0ZVNlcnZpY2U6IGZ1bmN0aW9uIHZhbGlkYXRlU2VydmljZSgpIHtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBsb2FkU2VydmljZUNsYXNzOiBmdW5jdGlvbiBsb2FkU2VydmljZUNsYXNzKHNlcnZpY2VDb25maWcpIHtcbiAgICB2YXIgY29uZmlnID0gc2VydmljZUNvbmZpZztcbiAgICBpZiAoIUFXUy51dGlsLmlzRW1wdHkodGhpcy5hcGkpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5hcGlDb25maWcpIHtcbiAgICAgIHJldHVybiBBV1MuU2VydmljZS5kZWZpbmVTZXJ2aWNlQXBpKHRoaXMuY29uc3RydWN0b3IsIGNvbmZpZy5hcGlDb25maWcpO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuY29uc3RydWN0b3Iuc2VydmljZXMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcgPSBuZXcgQVdTLkNvbmZpZyhBV1MuY29uZmlnKTtcbiAgICAgIGNvbmZpZy51cGRhdGUoc2VydmljZUNvbmZpZywgdHJ1ZSk7XG4gICAgICB2YXIgdmVyc2lvbiA9IGNvbmZpZy5hcGlWZXJzaW9uc1t0aGlzLmNvbnN0cnVjdG9yLnNlcnZpY2VJZGVudGlmaWVyXTtcbiAgICAgIHZlcnNpb24gPSB2ZXJzaW9uIHx8IGNvbmZpZy5hcGlWZXJzaW9uO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0TGF0ZXN0U2VydmljZUNsYXNzKHZlcnNpb24pO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBnZXRMYXRlc3RTZXJ2aWNlQ2xhc3M6IGZ1bmN0aW9uIGdldExhdGVzdFNlcnZpY2VDbGFzcyh2ZXJzaW9uKSB7XG4gICAgdmVyc2lvbiA9IHRoaXMuZ2V0TGF0ZXN0U2VydmljZVZlcnNpb24odmVyc2lvbik7XG4gICAgaWYgKHRoaXMuY29uc3RydWN0b3Iuc2VydmljZXNbdmVyc2lvbl0gPT09IG51bGwpIHtcbiAgICAgIEFXUy5TZXJ2aWNlLmRlZmluZVNlcnZpY2VBcGkodGhpcy5jb25zdHJ1Y3RvciwgdmVyc2lvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3Iuc2VydmljZXNbdmVyc2lvbl07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZ2V0TGF0ZXN0U2VydmljZVZlcnNpb246IGZ1bmN0aW9uIGdldExhdGVzdFNlcnZpY2VWZXJzaW9uKHZlcnNpb24pIHtcbiAgICBpZiAoIXRoaXMuY29uc3RydWN0b3Iuc2VydmljZXMgfHwgdGhpcy5jb25zdHJ1Y3Rvci5zZXJ2aWNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc2VydmljZXMgZGVmaW5lZCBvbiAnICtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLnNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICB9XG5cbiAgICBpZiAoIXZlcnNpb24pIHtcbiAgICAgIHZlcnNpb24gPSAnbGF0ZXN0JztcbiAgICB9IGVsc2UgaWYgKEFXUy51dGlsLmlzVHlwZSh2ZXJzaW9uLCBEYXRlKSkge1xuICAgICAgdmVyc2lvbiA9IEFXUy51dGlsLmRhdGUuaXNvODYwMSh2ZXJzaW9uKS5zcGxpdCgnVCcpWzBdO1xuICAgIH1cblxuICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkodGhpcy5jb25zdHJ1Y3Rvci5zZXJ2aWNlcywgdmVyc2lvbikpIHtcbiAgICAgIHJldHVybiB2ZXJzaW9uO1xuICAgIH1cblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGhpcy5jb25zdHJ1Y3Rvci5zZXJ2aWNlcykuc29ydCgpO1xuICAgIHZhciBzZWxlY3RlZFZlcnNpb24gPSBudWxsO1xuICAgIGZvciAodmFyIGkgPSBrZXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAvLyB2ZXJzaW9ucyB0aGF0IGVuZCBpbiBcIipcIiBhcmUgbm90IGF2YWlsYWJsZSBvbiBkaXNrIGFuZCBjYW4gYmVcbiAgICAgIC8vIHNraXBwZWQsIHNvIGRvIG5vdCBjaG9vc2UgdGhlc2UgYXMgc2VsZWN0ZWRWZXJzaW9uc1xuICAgICAgaWYgKGtleXNbaV1ba2V5c1tpXS5sZW5ndGggLSAxXSAhPT0gJyonKSB7XG4gICAgICAgIHNlbGVjdGVkVmVyc2lvbiA9IGtleXNbaV07XG4gICAgICB9XG4gICAgICBpZiAoa2V5c1tpXS5zdWJzdHIoMCwgMTApIDw9IHZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkVmVyc2lvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kICcgKyB0aGlzLmNvbnN0cnVjdG9yLnNlcnZpY2VJZGVudGlmaWVyICtcbiAgICAgICAgICAgICAgICAgICAgJyBBUEkgdG8gc2F0aXNmeSB2ZXJzaW9uIGNvbnN0cmFpbnQgYCcgKyB2ZXJzaW9uICsgJ1xcJycpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGFwaToge30sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZGVmYXVsdFJldHJ5Q291bnQ6IDMsXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY3VzdG9taXplUmVxdWVzdHM6IGZ1bmN0aW9uIGN1c3RvbWl6ZVJlcXVlc3RzKGNhbGxiYWNrKSB7XG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgdGhpcy5jdXN0b21SZXF1ZXN0SGFuZGxlciA9IG51bGw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuY3VzdG9tUmVxdWVzdEhhbmRsZXIgPSBjYWxsYmFjaztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNhbGxiYWNrIHR5cGUgXFwnJyArIHR5cGVvZiBjYWxsYmFjayArICdcXCcgcHJvdmlkZWQgaW4gY3VzdG9taXplUmVxdWVzdHMnKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGxzIGFuIG9wZXJhdGlvbiBvbiBhIHNlcnZpY2Ugd2l0aCB0aGUgZ2l2ZW4gaW5wdXQgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHBhcmFtIG9wZXJhdGlvbiBbU3RyaW5nXSB0aGUgbmFtZSBvZiB0aGUgb3BlcmF0aW9uIHRvIGNhbGwgb24gdGhlIHNlcnZpY2UuXG4gICAqIEBwYXJhbSBwYXJhbXMgW21hcF0gYSBtYXAgb2YgaW5wdXQgb3B0aW9ucyBmb3IgdGhlIG9wZXJhdGlvblxuICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyLCBkYXRhKVxuICAgKiAgIElmIGEgY2FsbGJhY2sgaXMgc3VwcGxpZWQsIGl0IGlzIGNhbGxlZCB3aGVuIGEgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2aWNlLlxuICAgKiAgIEBwYXJhbSBlcnIgW0Vycm9yXSB0aGUgZXJyb3Igb2JqZWN0IHJldHVybmVkIGZyb20gdGhlIHJlcXVlc3QuXG4gICAqICAgICBTZXQgdG8gYG51bGxgIGlmIHRoZSByZXF1ZXN0IGlzIHN1Y2Nlc3NmdWwuXG4gICAqICAgQHBhcmFtIGRhdGEgW09iamVjdF0gdGhlIGRlLXNlcmlhbGl6ZWQgZGF0YSByZXR1cm5lZCBmcm9tXG4gICAqICAgICB0aGUgcmVxdWVzdC4gU2V0IHRvIGBudWxsYCBpZiBhIHJlcXVlc3QgZXJyb3Igb2NjdXJzLlxuICAgKi9cbiAgbWFrZVJlcXVlc3Q6IGZ1bmN0aW9uIG1ha2VSZXF1ZXN0KG9wZXJhdGlvbiwgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayA9IHBhcmFtcztcbiAgICAgIHBhcmFtcyA9IG51bGw7XG4gICAgfVxuXG4gICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xuICAgIGlmICh0aGlzLmNvbmZpZy5wYXJhbXMpIHsgLy8gY29weSBvbmx5IHRvcGxldmVsIGJvdW5kIHBhcmFtc1xuICAgICAgdmFyIHJ1bGVzID0gdGhpcy5hcGkub3BlcmF0aW9uc1tvcGVyYXRpb25dO1xuICAgICAgaWYgKHJ1bGVzKSB7XG4gICAgICAgIHBhcmFtcyA9IEFXUy51dGlsLmNvcHkocGFyYW1zKTtcbiAgICAgICAgQVdTLnV0aWwuZWFjaCh0aGlzLmNvbmZpZy5wYXJhbXMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICBpZiAocnVsZXMuaW5wdXQubWVtYmVyc1trZXldKSB7XG4gICAgICAgICAgICBpZiAocGFyYW1zW2tleV0gPT09IHVuZGVmaW5lZCB8fCBwYXJhbXNba2V5XSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICBwYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgQVdTLlJlcXVlc3QodGhpcywgb3BlcmF0aW9uLCBwYXJhbXMpO1xuICAgIHRoaXMuYWRkQWxsUmVxdWVzdExpc3RlbmVycyhyZXF1ZXN0KTtcbiAgICB0aGlzLmF0dGFjaE1vbml0b3JpbmdFbWl0dGVyKHJlcXVlc3QpO1xuICAgIGlmIChjYWxsYmFjaykgcmVxdWVzdC5zZW5kKGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcmVxdWVzdDtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsbHMgYW4gb3BlcmF0aW9uIG9uIGEgc2VydmljZSB3aXRoIHRoZSBnaXZlbiBpbnB1dCBwYXJhbWV0ZXJzLCB3aXRob3V0XG4gICAqIGFueSBhdXRoZW50aWNhdGlvbiBkYXRhLiBUaGlzIG1ldGhvZCBpcyB1c2VmdWwgZm9yIFwicHVibGljXCIgQVBJIG9wZXJhdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSBvcGVyYXRpb24gW1N0cmluZ10gdGhlIG5hbWUgb2YgdGhlIG9wZXJhdGlvbiB0byBjYWxsIG9uIHRoZSBzZXJ2aWNlLlxuICAgKiBAcGFyYW0gcGFyYW1zIFttYXBdIGEgbWFwIG9mIGlucHV0IG9wdGlvbnMgZm9yIHRoZSBvcGVyYXRpb25cbiAgICogQGNhbGxiYWNrIGNhbGxiYWNrIGZ1bmN0aW9uKGVyciwgZGF0YSlcbiAgICogICBJZiBhIGNhbGxiYWNrIGlzIHN1cHBsaWVkLCBpdCBpcyBjYWxsZWQgd2hlbiBhIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmljZS5cbiAgICogICBAcGFyYW0gZXJyIFtFcnJvcl0gdGhlIGVycm9yIG9iamVjdCByZXR1cm5lZCBmcm9tIHRoZSByZXF1ZXN0LlxuICAgKiAgICAgU2V0IHRvIGBudWxsYCBpZiB0aGUgcmVxdWVzdCBpcyBzdWNjZXNzZnVsLlxuICAgKiAgIEBwYXJhbSBkYXRhIFtPYmplY3RdIHRoZSBkZS1zZXJpYWxpemVkIGRhdGEgcmV0dXJuZWQgZnJvbVxuICAgKiAgICAgdGhlIHJlcXVlc3QuIFNldCB0byBgbnVsbGAgaWYgYSByZXF1ZXN0IGVycm9yIG9jY3Vycy5cbiAgICovXG4gIG1ha2VVbmF1dGhlbnRpY2F0ZWRSZXF1ZXN0OiBmdW5jdGlvbiBtYWtlVW5hdXRoZW50aWNhdGVkUmVxdWVzdChvcGVyYXRpb24sIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2sgPSBwYXJhbXM7XG4gICAgICBwYXJhbXMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IHRoaXMubWFrZVJlcXVlc3Qob3BlcmF0aW9uLCBwYXJhbXMpLnRvVW5hdXRoZW50aWNhdGVkKCk7XG4gICAgcmV0dXJuIGNhbGxiYWNrID8gcmVxdWVzdC5zZW5kKGNhbGxiYWNrKSA6IHJlcXVlc3Q7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdhaXRzIGZvciBhIGdpdmVuIHN0YXRlXG4gICAqXG4gICAqIEBwYXJhbSBzdGF0ZSBbU3RyaW5nXSB0aGUgc3RhdGUgb24gdGhlIHNlcnZpY2UgdG8gd2FpdCBmb3JcbiAgICogQHBhcmFtIHBhcmFtcyBbbWFwXSBhIG1hcCBvZiBwYXJhbWV0ZXJzIHRvIHBhc3Mgd2l0aCBlYWNoIHJlcXVlc3RcbiAgICogQG9wdGlvbiBwYXJhbXMgJHdhaXRlciBbbWFwXSBhIG1hcCBvZiBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSB3YWl0ZXJcbiAgICogQG9wdGlvbiBwYXJhbXMgJHdhaXRlci5kZWxheSBbTnVtYmVyXSBUaGUgbnVtYmVyIG9mIHNlY29uZHMgdG8gd2FpdCBiZXR3ZWVuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdHNcbiAgICogQG9wdGlvbiBwYXJhbXMgJHdhaXRlci5tYXhBdHRlbXB0cyBbTnVtYmVyXSBUaGUgbWF4aW11bSBudW1iZXIgb2YgcmVxdWVzdHNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBzZW5kIHdoaWxlIHdhaXRpbmdcbiAgICogQGNhbGxiYWNrIGNhbGxiYWNrIGZ1bmN0aW9uKGVyciwgZGF0YSlcbiAgICogICBJZiBhIGNhbGxiYWNrIGlzIHN1cHBsaWVkLCBpdCBpcyBjYWxsZWQgd2hlbiBhIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmljZS5cbiAgICogICBAcGFyYW0gZXJyIFtFcnJvcl0gdGhlIGVycm9yIG9iamVjdCByZXR1cm5lZCBmcm9tIHRoZSByZXF1ZXN0LlxuICAgKiAgICAgU2V0IHRvIGBudWxsYCBpZiB0aGUgcmVxdWVzdCBpcyBzdWNjZXNzZnVsLlxuICAgKiAgIEBwYXJhbSBkYXRhIFtPYmplY3RdIHRoZSBkZS1zZXJpYWxpemVkIGRhdGEgcmV0dXJuZWQgZnJvbVxuICAgKiAgICAgdGhlIHJlcXVlc3QuIFNldCB0byBgbnVsbGAgaWYgYSByZXF1ZXN0IGVycm9yIG9jY3Vycy5cbiAgICovXG4gIHdhaXRGb3I6IGZ1bmN0aW9uIHdhaXRGb3Ioc3RhdGUsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICB2YXIgd2FpdGVyID0gbmV3IEFXUy5SZXNvdXJjZVdhaXRlcih0aGlzLCBzdGF0ZSk7XG4gICAgcmV0dXJuIHdhaXRlci53YWl0KHBhcmFtcywgY2FsbGJhY2spO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGFkZEFsbFJlcXVlc3RMaXN0ZW5lcnM6IGZ1bmN0aW9uIGFkZEFsbFJlcXVlc3RMaXN0ZW5lcnMocmVxdWVzdCkge1xuICAgIHZhciBsaXN0ID0gW0FXUy5ldmVudHMsIEFXUy5FdmVudExpc3RlbmVycy5Db3JlLCB0aGlzLnNlcnZpY2VJbnRlcmZhY2UoKSxcbiAgICAgICAgICAgICAgICBBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZVBvc3RdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RbaV0pIHJlcXVlc3QuYWRkTGlzdGVuZXJzKGxpc3RbaV0pO1xuICAgIH1cblxuICAgIC8vIGRpc2FibGUgcGFyYW1ldGVyIHZhbGlkYXRpb25cbiAgICBpZiAoIXRoaXMuY29uZmlnLnBhcmFtVmFsaWRhdGlvbikge1xuICAgICAgcmVxdWVzdC5yZW1vdmVMaXN0ZW5lcigndmFsaWRhdGUnLFxuICAgICAgICBBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZS5WQUxJREFURV9QQVJBTUVURVJTKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb25maWcubG9nZ2VyKSB7IC8vIGFkZCBsb2dnaW5nIGV2ZW50c1xuICAgICAgcmVxdWVzdC5hZGRMaXN0ZW5lcnMoQVdTLkV2ZW50TGlzdGVuZXJzLkxvZ2dlcik7XG4gICAgfVxuXG4gICAgdGhpcy5zZXR1cFJlcXVlc3RMaXN0ZW5lcnMocmVxdWVzdCk7XG4gICAgLy8gY2FsbCBwcm90b3R5cGUncyBjdXN0b21SZXF1ZXN0SGFuZGxlclxuICAgIGlmICh0eXBlb2YgdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUuY3VzdG9tUmVxdWVzdEhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLmN1c3RvbVJlcXVlc3RIYW5kbGVyKHJlcXVlc3QpO1xuICAgIH1cbiAgICAvLyBjYWxsIGluc3RhbmNlJ3MgY3VzdG9tUmVxdWVzdEhhbmRsZXJcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsICdjdXN0b21SZXF1ZXN0SGFuZGxlcicpICYmIHR5cGVvZiB0aGlzLmN1c3RvbVJlcXVlc3RIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLmN1c3RvbVJlcXVlc3RIYW5kbGVyKHJlcXVlc3QpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRXZlbnQgcmVjb3JkaW5nIG1ldHJpY3MgZm9yIGEgd2hvbGUgQVBJIGNhbGwuXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IGEgc3Vic2V0IG9mIGFwaSBjYWxsIG1ldHJpY3NcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBhcGlDYWxsRXZlbnQ6IGZ1bmN0aW9uIGFwaUNhbGxFdmVudChyZXF1ZXN0KSB7XG4gICAgdmFyIGFwaSA9IHJlcXVlc3Quc2VydmljZS5hcGkub3BlcmF0aW9uc1tyZXF1ZXN0Lm9wZXJhdGlvbl07XG4gICAgdmFyIG1vbml0b3JpbmdFdmVudCA9IHtcbiAgICAgIFR5cGU6ICdBcGlDYWxsJyxcbiAgICAgIEFwaTogYXBpID8gYXBpLm5hbWUgOiByZXF1ZXN0Lm9wZXJhdGlvbixcbiAgICAgIFZlcnNpb246IDEsXG4gICAgICBTZXJ2aWNlOiByZXF1ZXN0LnNlcnZpY2UuYXBpLnNlcnZpY2VJZCB8fCByZXF1ZXN0LnNlcnZpY2UuYXBpLmVuZHBvaW50UHJlZml4LFxuICAgICAgUmVnaW9uOiByZXF1ZXN0Lmh0dHBSZXF1ZXN0LnJlZ2lvbixcbiAgICAgIE1heFJldHJpZXNFeGNlZWRlZDogMCxcbiAgICAgIFVzZXJBZ2VudDogcmVxdWVzdC5odHRwUmVxdWVzdC5nZXRVc2VyQWdlbnQoKSxcbiAgICB9O1xuICAgIHZhciByZXNwb25zZSA9IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgaWYgKHJlc3BvbnNlLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlKSB7XG4gICAgICBtb25pdG9yaW5nRXZlbnQuRmluYWxIdHRwU3RhdHVzQ29kZSA9IHJlc3BvbnNlLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlO1xuICAgIH1cbiAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgIHZhciBlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuICAgICAgdmFyIHN0YXR1c0NvZGUgPSByZXNwb25zZS5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgICAgIGlmIChzdGF0dXNDb2RlID4gMjk5KSB7XG4gICAgICAgIGlmIChlcnJvci5jb2RlKSBtb25pdG9yaW5nRXZlbnQuRmluYWxBd3NFeGNlcHRpb24gPSBlcnJvci5jb2RlO1xuICAgICAgICBpZiAoZXJyb3IubWVzc2FnZSkgbW9uaXRvcmluZ0V2ZW50LkZpbmFsQXdzRXhjZXB0aW9uTWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZXJyb3IuY29kZSB8fCBlcnJvci5uYW1lKSBtb25pdG9yaW5nRXZlbnQuRmluYWxTZGtFeGNlcHRpb24gPSBlcnJvci5jb2RlIHx8IGVycm9yLm5hbWU7XG4gICAgICAgIGlmIChlcnJvci5tZXNzYWdlKSBtb25pdG9yaW5nRXZlbnQuRmluYWxTZGtFeGNlcHRpb25NZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1vbml0b3JpbmdFdmVudDtcbiAgfSxcblxuICAvKipcbiAgICogRXZlbnQgcmVjb3JkaW5nIG1ldHJpY3MgZm9yIGFuIEFQSSBjYWxsIGF0dGVtcHQuXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IGEgc3Vic2V0IG9mIGFwaSBjYWxsIGF0dGVtcHQgbWV0cmljc1xuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGFwaUF0dGVtcHRFdmVudDogZnVuY3Rpb24gYXBpQXR0ZW1wdEV2ZW50KHJlcXVlc3QpIHtcbiAgICB2YXIgYXBpID0gcmVxdWVzdC5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcXVlc3Qub3BlcmF0aW9uXTtcbiAgICB2YXIgbW9uaXRvcmluZ0V2ZW50ID0ge1xuICAgICAgVHlwZTogJ0FwaUNhbGxBdHRlbXB0JyxcbiAgICAgIEFwaTogYXBpID8gYXBpLm5hbWUgOiByZXF1ZXN0Lm9wZXJhdGlvbixcbiAgICAgIFZlcnNpb246IDEsXG4gICAgICBTZXJ2aWNlOiByZXF1ZXN0LnNlcnZpY2UuYXBpLnNlcnZpY2VJZCB8fCByZXF1ZXN0LnNlcnZpY2UuYXBpLmVuZHBvaW50UHJlZml4LFxuICAgICAgRnFkbjogcmVxdWVzdC5odHRwUmVxdWVzdC5lbmRwb2ludC5ob3N0bmFtZSxcbiAgICAgIFVzZXJBZ2VudDogcmVxdWVzdC5odHRwUmVxdWVzdC5nZXRVc2VyQWdlbnQoKSxcbiAgICB9O1xuICAgIHZhciByZXNwb25zZSA9IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgaWYgKHJlc3BvbnNlLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlKSB7XG4gICAgICBtb25pdG9yaW5nRXZlbnQuSHR0cFN0YXR1c0NvZGUgPSByZXNwb25zZS5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgIXJlcXVlc3QuX3VuQXV0aGVudGljYXRlZCAmJlxuICAgICAgcmVxdWVzdC5zZXJ2aWNlLmNvbmZpZy5jcmVkZW50aWFscyAmJlxuICAgICAgcmVxdWVzdC5zZXJ2aWNlLmNvbmZpZy5jcmVkZW50aWFscy5hY2Nlc3NLZXlJZFxuICAgICkge1xuICAgICAgbW9uaXRvcmluZ0V2ZW50LkFjY2Vzc0tleSA9IHJlcXVlc3Quc2VydmljZS5jb25maWcuY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQ7XG4gICAgfVxuICAgIGlmICghcmVzcG9uc2UuaHR0cFJlc3BvbnNlLmhlYWRlcnMpIHJldHVybiBtb25pdG9yaW5nRXZlbnQ7XG4gICAgaWYgKHJlcXVlc3QuaHR0cFJlcXVlc3QuaGVhZGVyc1sneC1hbXotc2VjdXJpdHktdG9rZW4nXSkge1xuICAgICAgbW9uaXRvcmluZ0V2ZW50LlNlc3Npb25Ub2tlbiA9IHJlcXVlc3QuaHR0cFJlcXVlc3QuaGVhZGVyc1sneC1hbXotc2VjdXJpdHktdG9rZW4nXTtcbiAgICB9XG4gICAgaWYgKHJlc3BvbnNlLmh0dHBSZXNwb25zZS5oZWFkZXJzWyd4LWFtem4tcmVxdWVzdGlkJ10pIHtcbiAgICAgIG1vbml0b3JpbmdFdmVudC5YQW16blJlcXVlc3RJZCA9IHJlc3BvbnNlLmh0dHBSZXNwb25zZS5oZWFkZXJzWyd4LWFtem4tcmVxdWVzdGlkJ107XG4gICAgfVxuICAgIGlmIChyZXNwb25zZS5odHRwUmVzcG9uc2UuaGVhZGVyc1sneC1hbXotcmVxdWVzdC1pZCddKSB7XG4gICAgICBtb25pdG9yaW5nRXZlbnQuWEFtelJlcXVlc3RJZCA9IHJlc3BvbnNlLmh0dHBSZXNwb25zZS5oZWFkZXJzWyd4LWFtei1yZXF1ZXN0LWlkJ107XG4gICAgfVxuICAgIGlmIChyZXNwb25zZS5odHRwUmVzcG9uc2UuaGVhZGVyc1sneC1hbXotaWQtMiddKSB7XG4gICAgICBtb25pdG9yaW5nRXZlbnQuWEFteklkMiA9IHJlc3BvbnNlLmh0dHBSZXNwb25zZS5oZWFkZXJzWyd4LWFtei1pZC0yJ107XG4gICAgfVxuICAgIHJldHVybiBtb25pdG9yaW5nRXZlbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBtZXRyaWNzIG9mIGZhaWxlZCByZXF1ZXN0LlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGF0dGVtcHRGYWlsRXZlbnQ6IGZ1bmN0aW9uIGF0dGVtcHRGYWlsRXZlbnQocmVxdWVzdCkge1xuICAgIHZhciBtb25pdG9yaW5nRXZlbnQgPSB0aGlzLmFwaUF0dGVtcHRFdmVudChyZXF1ZXN0KTtcbiAgICB2YXIgcmVzcG9uc2UgPSByZXF1ZXN0LnJlc3BvbnNlO1xuICAgIHZhciBlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuICAgIGlmIChyZXNwb25zZS5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSA+IDI5OSApIHtcbiAgICAgIGlmIChlcnJvci5jb2RlKSBtb25pdG9yaW5nRXZlbnQuQXdzRXhjZXB0aW9uID0gZXJyb3IuY29kZTtcbiAgICAgIGlmIChlcnJvci5tZXNzYWdlKSBtb25pdG9yaW5nRXZlbnQuQXdzRXhjZXB0aW9uTWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChlcnJvci5jb2RlIHx8IGVycm9yLm5hbWUpIG1vbml0b3JpbmdFdmVudC5TZGtFeGNlcHRpb24gPSBlcnJvci5jb2RlIHx8IGVycm9yLm5hbWU7XG4gICAgICBpZiAoZXJyb3IubWVzc2FnZSkgbW9uaXRvcmluZ0V2ZW50LlNka0V4Y2VwdGlvbk1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICAgIH1cbiAgICByZXR1cm4gbW9uaXRvcmluZ0V2ZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBBdHRhY2ggbGlzdGVuZXJzIHRvIHJlcXVlc3Qgb2JqZWN0IHRvIGZldGNoIG1ldHJpY3Mgb2YgZWFjaCByZXF1ZXN0XG4gICAqIGFuZCBlbWl0IGRhdGEgb2JqZWN0IHRocm91Z2ggXFwnQXBpQ2FsbFxcJyBhbmQgXFwnQXBpQ2FsbEF0dGVtcHRcXCcgZXZlbnRzLlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGF0dGFjaE1vbml0b3JpbmdFbWl0dGVyOiBmdW5jdGlvbiBhdHRhY2hNb25pdG9yaW5nRW1pdHRlcihyZXF1ZXN0KSB7XG4gICAgdmFyIGF0dGVtcHRUaW1lc3RhbXA7IC8vdGltZXN0YW1wIG1hcmtpbmcgdGhlIGJlZ2lubmluZyBvZiBhIHJlcXVlc3QgYXR0ZW1wdFxuICAgIHZhciBhdHRlbXB0U3RhcnRSZWFsVGltZTsgLy9TdGFydCB0aW1lIG9mIHJlcXVlc3QgYXR0ZW1wdC4gVXNlZCB0byBjYWxjdWxhdGluZyBhdHRlbXB0TGF0ZW5jeVxuICAgIHZhciBhdHRlbXB0TGF0ZW5jeTsgLy9sYXRlbmN5IGZyb20gcmVxdWVzdCBzZW50IG91dCB0byBodHRwIHJlc3BvbnNlIHJlYWNoaW5nIFNES1xuICAgIHZhciBjYWxsU3RhcnRSZWFsVGltZTsgLy9TdGFydCB0aW1lIG9mIEFQSSBjYWxsLiBVc2VkIHRvIGNhbGN1bGF0aW5nIEFQSSBjYWxsIGxhdGVuY3lcbiAgICB2YXIgYXR0ZW1wdENvdW50ID0gMDsgLy9yZXF1ZXN0LnJldHJ5Q291bnQgaXMgbm90IHJlbGlhYmxlIGhlcmVcbiAgICB2YXIgcmVnaW9uOyAvL3JlZ2lvbiBjYWNoZSByZWdpb24gZm9yIGVhY2ggYXR0ZW1wdCBzaW5jZSBpdCBjYW4gYmUgdXBkYXRlZCBpbiBwbGFzZSAoZS5nLiBzMylcbiAgICB2YXIgY2FsbFRpbWVzdGFtcDsgLy90aW1lc3RhbXAgd2hlbiB0aGUgcmVxdWVzdCBpcyBjcmVhdGVkXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBhZGRUb0hlYWQgPSB0cnVlO1xuXG4gICAgcmVxdWVzdC5vbigndmFsaWRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsU3RhcnRSZWFsVGltZSA9IEFXUy51dGlsLnJlYWxDbG9jay5ub3coKTtcbiAgICAgIGNhbGxUaW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgIH0sIGFkZFRvSGVhZCk7XG4gICAgcmVxdWVzdC5vbignc2lnbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF0dGVtcHRTdGFydFJlYWxUaW1lID0gQVdTLnV0aWwucmVhbENsb2NrLm5vdygpO1xuICAgICAgYXR0ZW1wdFRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgICByZWdpb24gPSByZXF1ZXN0Lmh0dHBSZXF1ZXN0LnJlZ2lvbjtcbiAgICAgIGF0dGVtcHRDb3VudCsrO1xuICAgIH0sIGFkZFRvSGVhZCk7XG4gICAgcmVxdWVzdC5vbigndmFsaWRhdGVSZXNwb25zZScsIGZ1bmN0aW9uKCkge1xuICAgICAgYXR0ZW1wdExhdGVuY3kgPSBNYXRoLnJvdW5kKEFXUy51dGlsLnJlYWxDbG9jay5ub3coKSAtIGF0dGVtcHRTdGFydFJlYWxUaW1lKTtcbiAgICB9KTtcbiAgICByZXF1ZXN0LmFkZE5hbWVkTGlzdGVuZXIoJ0FQSV9DQUxMX0FUVEVNUFQnLCAnc3VjY2VzcycsIGZ1bmN0aW9uIEFQSV9DQUxMX0FUVEVNUFQoKSB7XG4gICAgICB2YXIgYXBpQXR0ZW1wdEV2ZW50ID0gc2VsZi5hcGlBdHRlbXB0RXZlbnQocmVxdWVzdCk7XG4gICAgICBhcGlBdHRlbXB0RXZlbnQuVGltZXN0YW1wID0gYXR0ZW1wdFRpbWVzdGFtcDtcbiAgICAgIGFwaUF0dGVtcHRFdmVudC5BdHRlbXB0TGF0ZW5jeSA9IGF0dGVtcHRMYXRlbmN5ID49IDAgPyBhdHRlbXB0TGF0ZW5jeSA6IDA7XG4gICAgICBhcGlBdHRlbXB0RXZlbnQuUmVnaW9uID0gcmVnaW9uO1xuICAgICAgc2VsZi5lbWl0KCdhcGlDYWxsQXR0ZW1wdCcsIFthcGlBdHRlbXB0RXZlbnRdKTtcbiAgICB9KTtcbiAgICByZXF1ZXN0LmFkZE5hbWVkTGlzdGVuZXIoJ0FQSV9DQUxMX0FUVEVNUFRfUkVUUlknLCAncmV0cnknLCBmdW5jdGlvbiBBUElfQ0FMTF9BVFRFTVBUX1JFVFJZKCkge1xuICAgICAgdmFyIGFwaUF0dGVtcHRFdmVudCA9IHNlbGYuYXR0ZW1wdEZhaWxFdmVudChyZXF1ZXN0KTtcbiAgICAgIGFwaUF0dGVtcHRFdmVudC5UaW1lc3RhbXAgPSBhdHRlbXB0VGltZXN0YW1wO1xuICAgICAgLy9hdHRlbXB0TGF0ZW5jeSBtYXkgbm90IGJlIGF2YWlsYWJsZSBpZiBmYWlsIGJlZm9yZSByZXNwb25zZVxuICAgICAgYXR0ZW1wdExhdGVuY3kgPSBhdHRlbXB0TGF0ZW5jeSB8fFxuICAgICAgICBNYXRoLnJvdW5kKEFXUy51dGlsLnJlYWxDbG9jay5ub3coKSAtIGF0dGVtcHRTdGFydFJlYWxUaW1lKTtcbiAgICAgIGFwaUF0dGVtcHRFdmVudC5BdHRlbXB0TGF0ZW5jeSA9IGF0dGVtcHRMYXRlbmN5ID49IDAgPyBhdHRlbXB0TGF0ZW5jeSA6IDA7XG4gICAgICBhcGlBdHRlbXB0RXZlbnQuUmVnaW9uID0gcmVnaW9uO1xuICAgICAgc2VsZi5lbWl0KCdhcGlDYWxsQXR0ZW1wdCcsIFthcGlBdHRlbXB0RXZlbnRdKTtcbiAgICB9KTtcbiAgICByZXF1ZXN0LmFkZE5hbWVkTGlzdGVuZXIoJ0FQSV9DQUxMJywgJ2NvbXBsZXRlJywgZnVuY3Rpb24gQVBJX0NBTEwoKSB7XG4gICAgICB2YXIgYXBpQ2FsbEV2ZW50ID0gc2VsZi5hcGlDYWxsRXZlbnQocmVxdWVzdCk7XG4gICAgICBhcGlDYWxsRXZlbnQuQXR0ZW1wdENvdW50ID0gYXR0ZW1wdENvdW50O1xuICAgICAgaWYgKGFwaUNhbGxFdmVudC5BdHRlbXB0Q291bnQgPD0gMCkgcmV0dXJuO1xuICAgICAgYXBpQ2FsbEV2ZW50LlRpbWVzdGFtcCA9IGNhbGxUaW1lc3RhbXA7XG4gICAgICB2YXIgbGF0ZW5jeSA9IE1hdGgucm91bmQoQVdTLnV0aWwucmVhbENsb2NrLm5vdygpIC0gY2FsbFN0YXJ0UmVhbFRpbWUpO1xuICAgICAgYXBpQ2FsbEV2ZW50LkxhdGVuY3kgPSBsYXRlbmN5ID49IDAgPyBsYXRlbmN5IDogMDtcbiAgICAgIHZhciByZXNwb25zZSA9IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiByZXNwb25zZS5yZXRyeUNvdW50ID09PSAnbnVtYmVyJyAmJlxuICAgICAgICB0eXBlb2YgcmVzcG9uc2UubWF4UmV0cmllcyA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgKHJlc3BvbnNlLnJldHJ5Q291bnQgPj0gcmVzcG9uc2UubWF4UmV0cmllcylcbiAgICAgICkge1xuICAgICAgICBhcGlDYWxsRXZlbnQuTWF4UmV0cmllc0V4Y2VlZGVkID0gMTtcbiAgICAgIH1cbiAgICAgIHNlbGYuZW1pdCgnYXBpQ2FsbCcsIFthcGlDYWxsRXZlbnRdKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gc2V0dXAgYW55IGN1c3RvbSByZXF1ZXN0IGxpc3RlbmVycyBmb3IgZWFjaFxuICAgKiBuZXcgcmVxdWVzdCB0byB0aGUgc2VydmljZS5cbiAgICpcbiAgICogQG1ldGhvZF9hYnN0cmFjdCBUaGlzIGlzIGFuIGFic3RyYWN0IG1ldGhvZC5cbiAgICovXG4gIHNldHVwUmVxdWVzdExpc3RlbmVyczogZnVuY3Rpb24gc2V0dXBSZXF1ZXN0TGlzdGVuZXJzKHJlcXVlc3QpIHtcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgc2lnbmVyIGNsYXNzIGZvciBhIGdpdmVuIHJlcXVlc3RcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBnZXRTaWduZXJDbGFzczogZnVuY3Rpb24gZ2V0U2lnbmVyQ2xhc3MocmVxdWVzdCkge1xuICAgIHZhciB2ZXJzaW9uO1xuICAgIC8vIGdldCBvcGVyYXRpb24gYXV0aHR5cGUgaWYgcHJlc2VudFxuICAgIHZhciBvcGVyYXRpb24gPSBudWxsO1xuICAgIHZhciBhdXRodHlwZSA9ICcnO1xuICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICB2YXIgb3BlcmF0aW9ucyA9IHJlcXVlc3Quc2VydmljZS5hcGkub3BlcmF0aW9ucyB8fCB7fTtcbiAgICAgIG9wZXJhdGlvbiA9IG9wZXJhdGlvbnNbcmVxdWVzdC5vcGVyYXRpb25dIHx8IG51bGw7XG4gICAgICBhdXRodHlwZSA9IG9wZXJhdGlvbiA/IG9wZXJhdGlvbi5hdXRodHlwZSA6ICcnO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb25maWcuc2lnbmF0dXJlVmVyc2lvbikge1xuICAgICAgdmVyc2lvbiA9IHRoaXMuY29uZmlnLnNpZ25hdHVyZVZlcnNpb247XG4gICAgfSBlbHNlIGlmIChhdXRodHlwZSA9PT0gJ3Y0JyB8fCBhdXRodHlwZSA9PT0gJ3Y0LXVuc2lnbmVkLWJvZHknKSB7XG4gICAgICB2ZXJzaW9uID0gJ3Y0JztcbiAgICB9IGVsc2Uge1xuICAgICAgdmVyc2lvbiA9IHRoaXMuYXBpLnNpZ25hdHVyZVZlcnNpb247XG4gICAgfVxuICAgIHJldHVybiBBV1MuU2lnbmVycy5SZXF1ZXN0U2lnbmVyLmdldFZlcnNpb24odmVyc2lvbik7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgc2VydmljZUludGVyZmFjZTogZnVuY3Rpb24gc2VydmljZUludGVyZmFjZSgpIHtcbiAgICBzd2l0Y2ggKHRoaXMuYXBpLnByb3RvY29sKSB7XG4gICAgICBjYXNlICdlYzInOiByZXR1cm4gQVdTLkV2ZW50TGlzdGVuZXJzLlF1ZXJ5O1xuICAgICAgY2FzZSAncXVlcnknOiByZXR1cm4gQVdTLkV2ZW50TGlzdGVuZXJzLlF1ZXJ5O1xuICAgICAgY2FzZSAnanNvbic6IHJldHVybiBBV1MuRXZlbnRMaXN0ZW5lcnMuSnNvbjtcbiAgICAgIGNhc2UgJ3Jlc3QtanNvbic6IHJldHVybiBBV1MuRXZlbnRMaXN0ZW5lcnMuUmVzdEpzb247XG4gICAgICBjYXNlICdyZXN0LXhtbCc6IHJldHVybiBBV1MuRXZlbnRMaXN0ZW5lcnMuUmVzdFhtbDtcbiAgICB9XG4gICAgaWYgKHRoaXMuYXBpLnByb3RvY29sKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2VydmljZSBgcHJvdG9jb2xcXCcgJyArXG4gICAgICAgIHRoaXMuYXBpLnByb3RvY29sICsgJyBpbiBBUEkgY29uZmlnJyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHN1Y2Nlc3NmdWxSZXNwb25zZTogZnVuY3Rpb24gc3VjY2Vzc2Z1bFJlc3BvbnNlKHJlc3ApIHtcbiAgICByZXR1cm4gcmVzcC5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSA8IDMwMDtcbiAgfSxcblxuICAvKipcbiAgICogSG93IG1hbnkgdGltZXMgYSBmYWlsZWQgcmVxdWVzdCBzaG91bGQgYmUgcmV0cmllZCBiZWZvcmUgZ2l2aW5nIHVwLlxuICAgKiB0aGUgZGVmYXVsdFJldHJ5Q291bnQgY2FuIGJlIG92ZXJyaWRlbiBieSBzZXJ2aWNlIGNsYXNzZXMuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgbnVtUmV0cmllczogZnVuY3Rpb24gbnVtUmV0cmllcygpIHtcbiAgICBpZiAodGhpcy5jb25maWcubWF4UmV0cmllcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb25maWcubWF4UmV0cmllcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFJldHJ5Q291bnQ7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHJldHJ5RGVsYXlzOiBmdW5jdGlvbiByZXRyeURlbGF5cyhyZXRyeUNvdW50KSB7XG4gICAgcmV0dXJuIEFXUy51dGlsLmNhbGN1bGF0ZVJldHJ5RGVsYXkocmV0cnlDb3VudCwgdGhpcy5jb25maWcucmV0cnlEZWxheU9wdGlvbnMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHJldHJ5YWJsZUVycm9yOiBmdW5jdGlvbiByZXRyeWFibGVFcnJvcihlcnJvcikge1xuICAgIGlmICh0aGlzLnRpbWVvdXRFcnJvcihlcnJvcikpIHJldHVybiB0cnVlO1xuICAgIGlmICh0aGlzLm5ldHdvcmtpbmdFcnJvcihlcnJvcikpIHJldHVybiB0cnVlO1xuICAgIGlmICh0aGlzLmV4cGlyZWRDcmVkZW50aWFsc0Vycm9yKGVycm9yKSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKHRoaXMudGhyb3R0bGVkRXJyb3IoZXJyb3IpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZXJyb3Iuc3RhdHVzQ29kZSA+PSA1MDApIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBuZXR3b3JraW5nRXJyb3I6IGZ1bmN0aW9uIG5ldHdvcmtpbmdFcnJvcihlcnJvcikge1xuICAgIHJldHVybiBlcnJvci5jb2RlID09PSAnTmV0d29ya2luZ0Vycm9yJztcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICB0aW1lb3V0RXJyb3I6IGZ1bmN0aW9uIHRpbWVvdXRFcnJvcihlcnJvcikge1xuICAgIHJldHVybiBlcnJvci5jb2RlID09PSAnVGltZW91dEVycm9yJztcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBleHBpcmVkQ3JlZGVudGlhbHNFcnJvcjogZnVuY3Rpb24gZXhwaXJlZENyZWRlbnRpYWxzRXJyb3IoZXJyb3IpIHtcbiAgICAvLyBUT0RPIDogdGhpcyBvbmx5IGhhbmRsZXMgKm9uZSogb2YgdGhlIGV4cGlyZWQgY3JlZGVudGlhbCBjb2Rlc1xuICAgIHJldHVybiAoZXJyb3IuY29kZSA9PT0gJ0V4cGlyZWRUb2tlbkV4Y2VwdGlvbicpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNsb2NrU2tld0Vycm9yOiBmdW5jdGlvbiBjbG9ja1NrZXdFcnJvcihlcnJvcikge1xuICAgIHN3aXRjaCAoZXJyb3IuY29kZSkge1xuICAgICAgY2FzZSAnUmVxdWVzdFRpbWVUb29Ta2V3ZWQnOlxuICAgICAgY2FzZSAnUmVxdWVzdEV4cGlyZWQnOlxuICAgICAgY2FzZSAnSW52YWxpZFNpZ25hdHVyZUV4Y2VwdGlvbic6XG4gICAgICBjYXNlICdTaWduYXR1cmVEb2VzTm90TWF0Y2gnOlxuICAgICAgY2FzZSAnQXV0aEZhaWx1cmUnOlxuICAgICAgY2FzZSAnUmVxdWVzdEluVGhlRnV0dXJlJzpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGdldFNrZXdDb3JyZWN0ZWREYXRlOiBmdW5jdGlvbiBnZXRTa2V3Q29ycmVjdGVkRGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5ub3coKSArIHRoaXMuY29uZmlnLnN5c3RlbUNsb2NrT2Zmc2V0KTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBhcHBseUNsb2NrT2Zmc2V0OiBmdW5jdGlvbiBhcHBseUNsb2NrT2Zmc2V0KG5ld1NlcnZlclRpbWUpIHtcbiAgICBpZiAobmV3U2VydmVyVGltZSkge1xuICAgICAgdGhpcy5jb25maWcuc3lzdGVtQ2xvY2tPZmZzZXQgPSBuZXdTZXJ2ZXJUaW1lIC0gRGF0ZS5ub3coKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgaXNDbG9ja1NrZXdlZDogZnVuY3Rpb24gaXNDbG9ja1NrZXdlZChuZXdTZXJ2ZXJUaW1lKSB7XG4gICAgaWYgKG5ld1NlcnZlclRpbWUpIHtcbiAgICAgIHJldHVybiBNYXRoLmFicyh0aGlzLmdldFNrZXdDb3JyZWN0ZWREYXRlKCkuZ2V0VGltZSgpIC0gbmV3U2VydmVyVGltZSkgPj0gMzAwMDA7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHRocm90dGxlZEVycm9yOiBmdW5jdGlvbiB0aHJvdHRsZWRFcnJvcihlcnJvcikge1xuICAgIC8vIHRoaXMgbG9naWMgdmFyaWVzIGJldHdlZW4gc2VydmljZXNcbiAgICBpZiAoZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDI5KSByZXR1cm4gdHJ1ZTtcbiAgICBzd2l0Y2ggKGVycm9yLmNvZGUpIHtcbiAgICAgIGNhc2UgJ1Byb3Zpc2lvbmVkVGhyb3VnaHB1dEV4Y2VlZGVkRXhjZXB0aW9uJzpcbiAgICAgIGNhc2UgJ1Rocm90dGxpbmcnOlxuICAgICAgY2FzZSAnVGhyb3R0bGluZ0V4Y2VwdGlvbic6XG4gICAgICBjYXNlICdSZXF1ZXN0TGltaXRFeGNlZWRlZCc6XG4gICAgICBjYXNlICdSZXF1ZXN0VGhyb3R0bGVkJzpcbiAgICAgIGNhc2UgJ1JlcXVlc3RUaHJvdHRsZWRFeGNlcHRpb24nOlxuICAgICAgY2FzZSAnVG9vTWFueVJlcXVlc3RzRXhjZXB0aW9uJzpcbiAgICAgIGNhc2UgJ1RyYW5zYWN0aW9uSW5Qcm9ncmVzc0V4Y2VwdGlvbic6IC8vZHluYW1vZGJcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGVuZHBvaW50RnJvbVRlbXBsYXRlOiBmdW5jdGlvbiBlbmRwb2ludEZyb21UZW1wbGF0ZShlbmRwb2ludCkge1xuICAgIGlmICh0eXBlb2YgZW5kcG9pbnQgIT09ICdzdHJpbmcnKSByZXR1cm4gZW5kcG9pbnQ7XG5cbiAgICB2YXIgZSA9IGVuZHBvaW50O1xuICAgIGUgPSBlLnJlcGxhY2UoL1xce3NlcnZpY2VcXH0vZywgdGhpcy5hcGkuZW5kcG9pbnRQcmVmaXgpO1xuICAgIGUgPSBlLnJlcGxhY2UoL1xce3JlZ2lvblxcfS9nLCB0aGlzLmNvbmZpZy5yZWdpb24pO1xuICAgIGUgPSBlLnJlcGxhY2UoL1xce3NjaGVtZVxcfS9nLCB0aGlzLmNvbmZpZy5zc2xFbmFibGVkID8gJ2h0dHBzJyA6ICdodHRwJyk7XG4gICAgcmV0dXJuIGU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgc2V0RW5kcG9pbnQ6IGZ1bmN0aW9uIHNldEVuZHBvaW50KGVuZHBvaW50KSB7XG4gICAgdGhpcy5lbmRwb2ludCA9IG5ldyBBV1MuRW5kcG9pbnQoZW5kcG9pbnQsIHRoaXMuY29uZmlnKTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBwYWdpbmF0aW9uQ29uZmlnOiBmdW5jdGlvbiBwYWdpbmF0aW9uQ29uZmlnKG9wZXJhdGlvbiwgdGhyb3dFeGNlcHRpb24pIHtcbiAgICB2YXIgcGFnaW5hdG9yID0gdGhpcy5hcGkub3BlcmF0aW9uc1tvcGVyYXRpb25dLnBhZ2luYXRvcjtcbiAgICBpZiAoIXBhZ2luYXRvcikge1xuICAgICAgaWYgKHRocm93RXhjZXB0aW9uKSB7XG4gICAgICAgIHZhciBlID0gbmV3IEVycm9yKCk7XG4gICAgICAgIHRocm93IEFXUy51dGlsLmVycm9yKGUsICdObyBwYWdpbmF0aW9uIGNvbmZpZ3VyYXRpb24gZm9yICcgKyBvcGVyYXRpb24pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhZ2luYXRvcjtcbiAgfVxufSk7XG5cbkFXUy51dGlsLnVwZGF0ZShBV1MuU2VydmljZSwge1xuXG4gIC8qKlxuICAgKiBBZGRzIG9uZSBtZXRob2QgZm9yIGVhY2ggb3BlcmF0aW9uIGRlc2NyaWJlZCBpbiB0aGUgYXBpIGNvbmZpZ3VyYXRpb25cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBkZWZpbmVNZXRob2RzOiBmdW5jdGlvbiBkZWZpbmVNZXRob2RzKHN2Yykge1xuICAgIEFXUy51dGlsLmVhY2goc3ZjLnByb3RvdHlwZS5hcGkub3BlcmF0aW9ucywgZnVuY3Rpb24gaXRlcmF0b3IobWV0aG9kKSB7XG4gICAgICBpZiAoc3ZjLnByb3RvdHlwZVttZXRob2RdKSByZXR1cm47XG4gICAgICB2YXIgb3BlcmF0aW9uID0gc3ZjLnByb3RvdHlwZS5hcGkub3BlcmF0aW9uc1ttZXRob2RdO1xuICAgICAgaWYgKG9wZXJhdGlvbi5hdXRodHlwZSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHN2Yy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubWFrZVVuYXV0aGVudGljYXRlZFJlcXVlc3QobWV0aG9kLCBwYXJhbXMsIGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN2Yy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubWFrZVJlcXVlc3QobWV0aG9kLCBwYXJhbXMsIGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogRGVmaW5lcyBhIG5ldyBTZXJ2aWNlIGNsYXNzIHVzaW5nIGEgc2VydmljZSBpZGVudGlmaWVyIGFuZCBsaXN0IG9mIHZlcnNpb25zXG4gICAqIGluY2x1ZGluZyBhbiBvcHRpb25hbCBzZXQgb2YgZmVhdHVyZXMgKGZ1bmN0aW9ucykgdG8gYXBwbHkgdG8gdGhlIGNsYXNzXG4gICAqIHByb3RvdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHNlcnZpY2VJZGVudGlmaWVyIFtTdHJpbmddIHRoZSBpZGVudGlmaWVyIGZvciB0aGUgc2VydmljZVxuICAgKiBAcGFyYW0gdmVyc2lvbnMgW0FycmF5PFN0cmluZz5dIGEgbGlzdCBvZiB2ZXJzaW9ucyB0aGF0IHdvcmsgd2l0aCB0aGlzXG4gICAqICAgc2VydmljZVxuICAgKiBAcGFyYW0gZmVhdHVyZXMgW09iamVjdF0gYW4gb2JqZWN0IHRvIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlXG4gICAqIEByZXR1cm4gW0NsYXNzPFNlcnZpY2U+XSB0aGUgc2VydmljZSBjbGFzcyBkZWZpbmVkIGJ5IHRoaXMgZnVuY3Rpb24uXG4gICAqL1xuICBkZWZpbmVTZXJ2aWNlOiBmdW5jdGlvbiBkZWZpbmVTZXJ2aWNlKHNlcnZpY2VJZGVudGlmaWVyLCB2ZXJzaW9ucywgZmVhdHVyZXMpIHtcbiAgICBBV1MuU2VydmljZS5fc2VydmljZU1hcFtzZXJ2aWNlSWRlbnRpZmllcl0gPSB0cnVlO1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh2ZXJzaW9ucykpIHtcbiAgICAgIGZlYXR1cmVzID0gdmVyc2lvbnM7XG4gICAgICB2ZXJzaW9ucyA9IFtdO1xuICAgIH1cblxuICAgIHZhciBzdmMgPSBpbmhlcml0KEFXUy5TZXJ2aWNlLCBmZWF0dXJlcyB8fCB7fSk7XG5cbiAgICBpZiAodHlwZW9mIHNlcnZpY2VJZGVudGlmaWVyID09PSAnc3RyaW5nJykge1xuICAgICAgQVdTLlNlcnZpY2UuYWRkVmVyc2lvbnMoc3ZjLCB2ZXJzaW9ucyk7XG5cbiAgICAgIHZhciBpZGVudGlmaWVyID0gc3ZjLnNlcnZpY2VJZGVudGlmaWVyIHx8IHNlcnZpY2VJZGVudGlmaWVyO1xuICAgICAgc3ZjLnNlcnZpY2VJZGVudGlmaWVyID0gaWRlbnRpZmllcjtcbiAgICB9IGVsc2UgeyAvLyBkZWZpbmVTZXJ2aWNlIGNhbGxlZCB3aXRoIGFuIEFQSVxuICAgICAgc3ZjLnByb3RvdHlwZS5hcGkgPSBzZXJ2aWNlSWRlbnRpZmllcjtcbiAgICAgIEFXUy5TZXJ2aWNlLmRlZmluZU1ldGhvZHMoc3ZjKTtcbiAgICB9XG4gICAgQVdTLlNlcXVlbnRpYWxFeGVjdXRvci5jYWxsKHRoaXMucHJvdG90eXBlKTtcbiAgICAvL3V0aWwuY2xpZW50U2lkZU1vbml0b3JpbmcgaXMgb25seSBhdmFpbGFibGUgaW4gbm9kZVxuICAgIGlmICghdGhpcy5wcm90b3R5cGUucHVibGlzaGVyICYmIEFXUy51dGlsLmNsaWVudFNpZGVNb25pdG9yaW5nKSB7XG4gICAgICB2YXIgUHVibGlzaGVyID0gQVdTLnV0aWwuY2xpZW50U2lkZU1vbml0b3JpbmcuUHVibGlzaGVyO1xuICAgICAgdmFyIGNvbmZpZ1Byb3ZpZGVyID0gQVdTLnV0aWwuY2xpZW50U2lkZU1vbml0b3JpbmcuY29uZmlnUHJvdmlkZXI7XG4gICAgICB2YXIgcHVibGlzaGVyQ29uZmlnID0gY29uZmlnUHJvdmlkZXIoKTtcbiAgICAgIHRoaXMucHJvdG90eXBlLnB1Ymxpc2hlciA9IG5ldyBQdWJsaXNoZXIocHVibGlzaGVyQ29uZmlnKTtcbiAgICAgIGlmIChwdWJsaXNoZXJDb25maWcuZW5hYmxlZCkge1xuICAgICAgICAvL2lmIGNzbSBpcyBlbmFibGVkIGluIGVudmlyb25tZW50LCBTREsgc2hvdWxkIHNlbmQgYWxsIG1ldHJpY3NcbiAgICAgICAgQVdTLlNlcnZpY2UuX2NsaWVudFNpZGVNb25pdG9yaW5nID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgQVdTLlNlcXVlbnRpYWxFeGVjdXRvci5jYWxsKHN2Yy5wcm90b3R5cGUpO1xuICAgIEFXUy5TZXJ2aWNlLmFkZERlZmF1bHRNb25pdG9yaW5nTGlzdGVuZXJzKHN2Yy5wcm90b3R5cGUpO1xuICAgIHJldHVybiBzdmM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgYWRkVmVyc2lvbnM6IGZ1bmN0aW9uIGFkZFZlcnNpb25zKHN2YywgdmVyc2lvbnMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmVyc2lvbnMpKSB2ZXJzaW9ucyA9IFt2ZXJzaW9uc107XG5cbiAgICBzdmMuc2VydmljZXMgPSBzdmMuc2VydmljZXMgfHwge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJzaW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHN2Yy5zZXJ2aWNlc1t2ZXJzaW9uc1tpXV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzdmMuc2VydmljZXNbdmVyc2lvbnNbaV1dID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdmMuYXBpVmVyc2lvbnMgPSBPYmplY3Qua2V5cyhzdmMuc2VydmljZXMpLnNvcnQoKTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBkZWZpbmVTZXJ2aWNlQXBpOiBmdW5jdGlvbiBkZWZpbmVTZXJ2aWNlQXBpKHN1cGVyY2xhc3MsIHZlcnNpb24sIGFwaUNvbmZpZykge1xuICAgIHZhciBzdmMgPSBpbmhlcml0KHN1cGVyY2xhc3MsIHtcbiAgICAgIHNlcnZpY2VJZGVudGlmaWVyOiBzdXBlcmNsYXNzLnNlcnZpY2VJZGVudGlmaWVyXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBzZXRBcGkoYXBpKSB7XG4gICAgICBpZiAoYXBpLmlzQXBpKSB7XG4gICAgICAgIHN2Yy5wcm90b3R5cGUuYXBpID0gYXBpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3ZjLnByb3RvdHlwZS5hcGkgPSBuZXcgQXBpKGFwaSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2ZXJzaW9uID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGFwaUNvbmZpZykge1xuICAgICAgICBzZXRBcGkoYXBpQ29uZmlnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc2V0QXBpKEFXUy5hcGlMb2FkZXIoc3VwZXJjbGFzcy5zZXJ2aWNlSWRlbnRpZmllciwgdmVyc2lvbikpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICB0aHJvdyBBV1MudXRpbC5lcnJvcihlcnIsIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdDb3VsZCBub3QgZmluZCBBUEkgY29uZmlndXJhdGlvbiAnICtcbiAgICAgICAgICAgICAgc3VwZXJjbGFzcy5zZXJ2aWNlSWRlbnRpZmllciArICctJyArIHZlcnNpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc3VwZXJjbGFzcy5zZXJ2aWNlcywgdmVyc2lvbikpIHtcbiAgICAgICAgc3VwZXJjbGFzcy5hcGlWZXJzaW9ucyA9IHN1cGVyY2xhc3MuYXBpVmVyc2lvbnMuY29uY2F0KHZlcnNpb24pLnNvcnQoKTtcbiAgICAgIH1cbiAgICAgIHN1cGVyY2xhc3Muc2VydmljZXNbdmVyc2lvbl0gPSBzdmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEFwaSh2ZXJzaW9uKTtcbiAgICB9XG5cbiAgICBBV1MuU2VydmljZS5kZWZpbmVNZXRob2RzKHN2Yyk7XG4gICAgcmV0dXJuIHN2YztcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBoYXNTZXJ2aWNlOiBmdW5jdGlvbihpZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChBV1MuU2VydmljZS5fc2VydmljZU1hcCwgaWRlbnRpZmllcik7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSBhdHRhY2hPbiBhdHRhY2ggZGVmYXVsdCBtb25pdG9yaW5nIGxpc3RlbmVycyB0byBvYmplY3RcbiAgICpcbiAgICogRWFjaCBtb25pdG9yaW5nIGV2ZW50IHNob3VsZCBiZSBlbWl0dGVkIGZyb20gc2VydmljZSBjbGllbnQgdG8gc2VydmljZSBjb25zdHJ1Y3RvciBwcm90b3R5cGUgYW5kIHRoZW5cbiAgICogdG8gZ2xvYmFsIHNlcnZpY2UgcHJvdG90eXBlIGxpa2UgYnViYmxpbmcgdXAuIFRoZXNlIGRlZmF1bHQgbW9uaXRvcmluZyBldmVudHMgbGlzdGVuZXIgd2lsbCB0cmFuc2ZlclxuICAgKiB0aGUgbW9uaXRvcmluZyBldmVudHMgdG8gdGhlIHVwcGVyIGxheWVyLlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGFkZERlZmF1bHRNb25pdG9yaW5nTGlzdGVuZXJzOiBmdW5jdGlvbiBhZGREZWZhdWx0TW9uaXRvcmluZ0xpc3RlbmVycyhhdHRhY2hPbikge1xuICAgIGF0dGFjaE9uLmFkZE5hbWVkTGlzdGVuZXIoJ01PTklUT1JfRVZFTlRTX0JVQkJMRScsICdhcGlDYWxsQXR0ZW1wdCcsIGZ1bmN0aW9uIEVWRU5UU19CVUJCTEUoZXZlbnQpIHtcbiAgICAgIHZhciBiYXNlQ2xhc3MgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYXR0YWNoT24pO1xuICAgICAgaWYgKGJhc2VDbGFzcy5fZXZlbnRzKSBiYXNlQ2xhc3MuZW1pdCgnYXBpQ2FsbEF0dGVtcHQnLCBbZXZlbnRdKTtcbiAgICB9KTtcbiAgICBhdHRhY2hPbi5hZGROYW1lZExpc3RlbmVyKCdDQUxMX0VWRU5UU19CVUJCTEUnLCAnYXBpQ2FsbCcsIGZ1bmN0aW9uIENBTExfRVZFTlRTX0JVQkJMRShldmVudCkge1xuICAgICAgdmFyIGJhc2VDbGFzcyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihhdHRhY2hPbik7XG4gICAgICBpZiAoYmFzZUNsYXNzLl9ldmVudHMpIGJhc2VDbGFzcy5lbWl0KCdhcGlDYWxsJywgW2V2ZW50XSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgX3NlcnZpY2VNYXA6IHt9XG59KTtcblxuQVdTLnV0aWwubWl4aW4oQVdTLlNlcnZpY2UsIEFXUy5TZXF1ZW50aWFsRXhlY3V0b3IpO1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IEFXUy5TZXJ2aWNlO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9jb3JlXCI6MTksXCIuL21vZGVsL2FwaVwiOjM5LFwiLi9yZWdpb25fY29uZmlnXCI6NTQsXCJfcHJvY2Vzc1wiOjg2fV0sNjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTtcblxuQVdTLnV0aWwudXBkYXRlKEFXUy5Db2duaXRvSWRlbnRpdHkucHJvdG90eXBlLCB7XG4gIGdldE9wZW5JZFRva2VuOiBmdW5jdGlvbiBnZXRPcGVuSWRUb2tlbihwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMubWFrZVVuYXV0aGVudGljYXRlZFJlcXVlc3QoJ2dldE9wZW5JZFRva2VuJywgcGFyYW1zLCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgZ2V0SWQ6IGZ1bmN0aW9uIGdldElkKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5tYWtlVW5hdXRoZW50aWNhdGVkUmVxdWVzdCgnZ2V0SWQnLCBwYXJhbXMsIGNhbGxiYWNrKTtcbiAgfSxcblxuICBnZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5OiBmdW5jdGlvbiBnZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5KHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5tYWtlVW5hdXRoZW50aWNhdGVkUmVxdWVzdCgnZ2V0Q3JlZGVudGlhbHNGb3JJZGVudGl0eScsIHBhcmFtcywgY2FsbGJhY2spO1xuICB9XG59KTtcblxufSx7XCIuLi9jb3JlXCI6MTl9XSw2MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xudmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTtcbnZhciByZWdpb25Db25maWcgPSByZXF1aXJlKCcuLi9yZWdpb25fY29uZmlnJyk7XG52YXIgRU5WX1JFR0lPTkFMX0VORFBPSU5UX0VOQUJMRUQgPSAnQVdTX1NUU19SRUdJT05BTF9FTkRQT0lOVFMnO1xudmFyIENPTkZJR19SRUdJT05BTF9FTkRQT0lOVF9FTkFCTEVEID0gJ3N0c19yZWdpb25hbF9lbmRwb2ludHMnO1xuXG5BV1MudXRpbC51cGRhdGUoQVdTLlNUUy5wcm90b3R5cGUsIHtcbiAgLyoqXG4gICAqIEBvdmVybG9hZCBjcmVkZW50aWFsc0Zyb20oZGF0YSwgY3JlZGVudGlhbHMgPSBudWxsKVxuICAgKiAgIENyZWF0ZXMgYSBjcmVkZW50aWFscyBvYmplY3QgZnJvbSBTVFMgcmVzcG9uc2UgZGF0YSBjb250YWluaW5nXG4gICAqICAgY3JlZGVudGlhbHMgaW5mb3JtYXRpb24uIFVzZWZ1bCBmb3IgcXVpY2tseSBzZXR0aW5nIEFXUyBjcmVkZW50aWFscy5cbiAgICpcbiAgICogICBAbm90ZSBUaGlzIGlzIGEgbG93LWxldmVsIHV0aWxpdHkgZnVuY3Rpb24uIElmIHlvdSB3YW50IHRvIGxvYWQgdGVtcG9yYXJ5XG4gICAqICAgICBjcmVkZW50aWFscyBpbnRvIHlvdXIgcHJvY2VzcyBmb3Igc3Vic2VxdWVudCByZXF1ZXN0cyB0byBBV1MgcmVzb3VyY2VzLFxuICAgKiAgICAgeW91IHNob3VsZCB1c2Uge0FXUy5UZW1wb3JhcnlDcmVkZW50aWFsc30gaW5zdGVhZC5cbiAgICogICBAcGFyYW0gZGF0YSBbbWFwXSBkYXRhIHJldHJpZXZlZCBmcm9tIGEgY2FsbCB0byB7Z2V0RmVkZXJhdGVkVG9rZW59LFxuICAgKiAgICAge2dldFNlc3Npb25Ub2tlbn0sIHthc3N1bWVSb2xlfSwgb3Ige2Fzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHl9LlxuICAgKiAgIEBwYXJhbSBjcmVkZW50aWFscyBbQVdTLkNyZWRlbnRpYWxzXSBhbiBvcHRpb25hbCBjcmVkZW50aWFscyBvYmplY3QgdG9cbiAgICogICAgIGZpbGwgaW5zdGVhZCBvZiBjcmVhdGluZyBhIG5ldyBvYmplY3QuIFVzZWZ1bCB3aGVuIG1vZGlmeWluZyBhblxuICAgKiAgICAgZXhpc3RpbmcgY3JlZGVudGlhbHMgb2JqZWN0IGZyb20gYSByZWZyZXNoIGNhbGwuXG4gICAqICAgQHJldHVybiBbQVdTLlRlbXBvcmFyeUNyZWRlbnRpYWxzXSB0aGUgc2V0IG9mIHRlbXBvcmFyeSBjcmVkZW50aWFsc1xuICAgKiAgICAgbG9hZGVkIGZyb20gYSByYXcgU1RTIG9wZXJhdGlvbiByZXNwb25zZS5cbiAgICogICBAZXhhbXBsZSBVc2luZyBjcmVkZW50aWFsc0Zyb20gdG8gbG9hZCBnbG9iYWwgQVdTIGNyZWRlbnRpYWxzXG4gICAqICAgICB2YXIgc3RzID0gbmV3IEFXUy5TVFMoKTtcbiAgICogICAgIHN0cy5nZXRTZXNzaW9uVG9rZW4oZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgKiAgICAgICBpZiAoZXJyKSBjb25zb2xlLmxvZyhcIkVycm9yIGdldHRpbmcgY3JlZGVudGlhbHNcIik7XG4gICAqICAgICAgIGVsc2Uge1xuICAgKiAgICAgICAgIEFXUy5jb25maWcuY3JlZGVudGlhbHMgPSBzdHMuY3JlZGVudGlhbHNGcm9tKGRhdGEpO1xuICAgKiAgICAgICB9XG4gICAqICAgICB9KTtcbiAgICogICBAc2VlIEFXUy5UZW1wb3JhcnlDcmVkZW50aWFsc1xuICAgKi9cbiAgY3JlZGVudGlhbHNGcm9tOiBmdW5jdGlvbiBjcmVkZW50aWFsc0Zyb20oZGF0YSwgY3JlZGVudGlhbHMpIHtcbiAgICBpZiAoIWRhdGEpIHJldHVybiBudWxsO1xuICAgIGlmICghY3JlZGVudGlhbHMpIGNyZWRlbnRpYWxzID0gbmV3IEFXUy5UZW1wb3JhcnlDcmVkZW50aWFscygpO1xuICAgIGNyZWRlbnRpYWxzLmV4cGlyZWQgPSBmYWxzZTtcbiAgICBjcmVkZW50aWFscy5hY2Nlc3NLZXlJZCA9IGRhdGEuQ3JlZGVudGlhbHMuQWNjZXNzS2V5SWQ7XG4gICAgY3JlZGVudGlhbHMuc2VjcmV0QWNjZXNzS2V5ID0gZGF0YS5DcmVkZW50aWFscy5TZWNyZXRBY2Nlc3NLZXk7XG4gICAgY3JlZGVudGlhbHMuc2Vzc2lvblRva2VuID0gZGF0YS5DcmVkZW50aWFscy5TZXNzaW9uVG9rZW47XG4gICAgY3JlZGVudGlhbHMuZXhwaXJlVGltZSA9IGRhdGEuQ3JlZGVudGlhbHMuRXhwaXJhdGlvbjtcbiAgICByZXR1cm4gY3JlZGVudGlhbHM7XG4gIH0sXG5cbiAgYXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eTogZnVuY3Rpb24gYXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eShwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMubWFrZVVuYXV0aGVudGljYXRlZFJlcXVlc3QoJ2Fzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHknLCBwYXJhbXMsIGNhbGxiYWNrKTtcbiAgfSxcblxuICBhc3N1bWVSb2xlV2l0aFNBTUw6IGZ1bmN0aW9uIGFzc3VtZVJvbGVXaXRoU0FNTChwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMubWFrZVVuYXV0aGVudGljYXRlZFJlcXVlc3QoJ2Fzc3VtZVJvbGVXaXRoU0FNTCcsIHBhcmFtcywgY2FsbGJhY2spO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHZhbGlkYXRlUmVnaW9uYWxFbmRwb2ludHNGbGFnVmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlUmVnaW9uYWxFbmRwb2ludHNGbGFnVmFsdWUoY29uZmlnVmFsdWUsIGVycm9yT3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgY29uZmlnVmFsdWUgPT09ICdzdHJpbmcnICYmIFsnbGVnYWN5JywgJ3JlZ2lvbmFsJ10uaW5kZXhPZihjb25maWdWYWx1ZS50b0xvd2VyQ2FzZSgpKSA+PSAwKSB7XG4gICAgICB0aGlzLmNvbmZpZy5zdHNSZWdpb25hbEVuZHBvaW50cyA9IGNvbmZpZ1ZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcigpLCBlcnJvck9wdGlvbnMpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICB2YWxpZGF0ZVJlZ2lvbmFsRW5kcG9pbnRzRmxhZzogZnVuY3Rpb24gdmFsaWRhdGVSZWdpb25hbEVuZHBvaW50c0ZsYWcoKSB7XG4gICAgLy92YWxpZGF0ZSBjb25maWcgdmFsdWVcbiAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgaWYgKGNvbmZpZy5zdHNSZWdpb25hbEVuZHBvaW50cykge1xuICAgICAgdGhpcy52YWxpZGF0ZVJlZ2lvbmFsRW5kcG9pbnRzRmxhZ1ZhbHVlKGNvbmZpZy5zdHNSZWdpb25hbEVuZHBvaW50cywge1xuICAgICAgICBjb2RlOiAnSW52YWxpZENvbmZpZ3VyYXRpb24nLFxuICAgICAgICBtZXNzYWdlOiAnaW52YWxpZCBcInN0c1JlZ2lvbmFsRW5kcG9pbnRzXCIgY29uZmlndXJhdGlvbi4gRXhwZWN0IFwibGVnYWN5XCIgJyArXG4gICAgICAgICcgb3IgXCJyZWdpb25hbFwiLiBHb3QgXCInICsgY29uZmlnLnN0c1JlZ2lvbmFsRW5kcG9pbnRzICsgJ1wiLidcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIUFXUy51dGlsLmlzTm9kZSgpKSByZXR1cm47XG4gICAgLy92YWxpZGF0ZSBlbnZpcm9ubWVudGFsIHZhcmlhYmxlXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9jZXNzLmVudiwgRU5WX1JFR0lPTkFMX0VORFBPSU5UX0VOQUJMRUQpKSB7XG4gICAgICB2YXIgZW52RmxhZyA9IHByb2Nlc3MuZW52W0VOVl9SRUdJT05BTF9FTkRQT0lOVF9FTkFCTEVEXTtcbiAgICAgIHRoaXMudmFsaWRhdGVSZWdpb25hbEVuZHBvaW50c0ZsYWdWYWx1ZShlbnZGbGFnLCB7XG4gICAgICAgIGNvZGU6ICdJbnZhbGlkRW52aXJvbm1lbnRhbFZhcmlhYmxlJyxcbiAgICAgICAgbWVzc2FnZTogJ2ludmFsaWQgJyArIEVOVl9SRUdJT05BTF9FTkRQT0lOVF9FTkFCTEVEICsgJyBlbnZpcm9ubWVudGFsIHZhcmlhYmxlLiBFeHBlY3QgXCJsZWdhY3lcIiAnICtcbiAgICAgICAgJyBvciBcInJlZ2lvbmFsXCIuIEdvdCBcIicgKyBwcm9jZXNzLmVudltFTlZfUkVHSU9OQUxfRU5EUE9JTlRfRU5BQkxFRF0gKyAnXCIuJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vdmFsaWRhdGUgc2hhcmVkIGNvbmZpZyBmaWxlXG4gICAgdmFyIHByb2ZpbGUgPSB7fTtcbiAgICB0cnkge1xuICAgICAgdmFyIHByb2ZpbGVzID0gQVdTLnV0aWwuZ2V0UHJvZmlsZXNGcm9tU2hhcmVkQ29uZmlnKEFXUy51dGlsLmluaUxvYWRlcik7XG4gICAgICBwcm9maWxlID0gcHJvZmlsZXNbcHJvY2Vzcy5lbnYuQVdTX1BST0ZJTEUgfHwgQVdTLnV0aWwuZGVmYXVsdFByb2ZpbGVdO1xuICAgIH0gY2F0Y2ggKGUpIHt9O1xuICAgIGlmIChwcm9maWxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9maWxlLCBDT05GSUdfUkVHSU9OQUxfRU5EUE9JTlRfRU5BQkxFRCkpIHtcbiAgICAgIHZhciBmaWxlRmxhZyA9IHByb2ZpbGVbQ09ORklHX1JFR0lPTkFMX0VORFBPSU5UX0VOQUJMRURdO1xuICAgICAgdGhpcy52YWxpZGF0ZVJlZ2lvbmFsRW5kcG9pbnRzRmxhZ1ZhbHVlKGZpbGVGbGFnLCB7XG4gICAgICAgIGNvZGU6ICdJbnZhbGlkQ29uZmlndXJhdGlvbicsXG4gICAgICAgIG1lc3NhZ2U6ICdpbnZhbGlkICcrQ09ORklHX1JFR0lPTkFMX0VORFBPSU5UX0VOQUJMRUQrJyBwcm9maWxlIGNvbmZpZy4gRXhwZWN0IFwibGVnYWN5XCIgJyArXG4gICAgICAgICcgb3IgXCJyZWdpb25hbFwiLiBHb3QgXCInICsgcHJvZmlsZVtDT05GSUdfUkVHSU9OQUxfRU5EUE9JTlRfRU5BQkxFRF0gKyAnXCIuJ1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9wdEluUmVnaW9uYWxFbmRwb2ludDogZnVuY3Rpb24gb3B0SW5SZWdpb25hbEVuZHBvaW50KCkge1xuICAgIHRoaXMudmFsaWRhdGVSZWdpb25hbEVuZHBvaW50c0ZsYWcoKTtcbiAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgaWYgKGNvbmZpZy5zdHNSZWdpb25hbEVuZHBvaW50cyA9PT0gJ3JlZ2lvbmFsJykge1xuICAgICAgcmVnaW9uQ29uZmlnKHRoaXMpO1xuICAgICAgaWYgKCF0aGlzLmlzR2xvYmFsRW5kcG9pbnQpIHJldHVybjtcbiAgICAgIHRoaXMuaXNHbG9iYWxFbmRwb2ludCA9IGZhbHNlO1xuICAgICAgLy9jbGllbnQgd2lsbCB0aHJvdyBpZiByZWdpb24gaXMgbm90IHN1cHBsaWVkOyByZXF1ZXN0IHdpbGwgYmUgc2lnbmVkIHdpdGggc3BlY2lmaWVkIHJlZ2lvblxuICAgICAgaWYgKCFjb25maWcucmVnaW9uKSB7XG4gICAgICAgIHRocm93IEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcigpLFxuICAgICAgICAgIHtjb2RlOiAnQ29uZmlnRXJyb3InLCBtZXNzYWdlOiAnTWlzc2luZyByZWdpb24gaW4gY29uZmlnJ30pO1xuICAgICAgfVxuICAgICAgdmFyIGluc2VydFBvaW50ID0gY29uZmlnLmVuZHBvaW50LmluZGV4T2YoJy5hbWF6b25hd3MuY29tJyk7XG4gICAgICBjb25maWcuZW5kcG9pbnQgPSBjb25maWcuZW5kcG9pbnQuc3Vic3RyaW5nKDAsIGluc2VydFBvaW50KSArXG4gICAgICAgICcuJyArIGNvbmZpZy5yZWdpb24gKyBjb25maWcuZW5kcG9pbnQuc3Vic3RyaW5nKGluc2VydFBvaW50KTtcbiAgICB9XG4gIH0sXG5cbiAgdmFsaWRhdGVTZXJ2aWNlOiBmdW5jdGlvbiB2YWxpZGF0ZVNlcnZpY2UoKSB7XG4gICAgdGhpcy5vcHRJblJlZ2lvbmFsRW5kcG9pbnQoKTtcbiAgfVxuXG59KTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4uL2NvcmVcIjoxOSxcIi4uL3JlZ2lvbl9jb25maWdcIjo1NCxcIl9wcm9jZXNzXCI6ODZ9XSw2MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgQVdTID0gcmVxdWlyZSgnLi4vY29yZScpO1xudmFyIGluaGVyaXQgPSBBV1MudXRpbC5pbmhlcml0O1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG52YXIgZXhwaXJlc0hlYWRlciA9ICdwcmVzaWduZWQtZXhwaXJlcyc7XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNpZ25lZFVybEJ1aWxkZXIocmVxdWVzdCkge1xuICB2YXIgZXhwaXJlcyA9IHJlcXVlc3QuaHR0cFJlcXVlc3QuaGVhZGVyc1tleHBpcmVzSGVhZGVyXTtcbiAgdmFyIHNpZ25lckNsYXNzID0gcmVxdWVzdC5zZXJ2aWNlLmdldFNpZ25lckNsYXNzKHJlcXVlc3QpO1xuXG4gIGRlbGV0ZSByZXF1ZXN0Lmh0dHBSZXF1ZXN0LmhlYWRlcnNbJ1VzZXItQWdlbnQnXTtcbiAgZGVsZXRlIHJlcXVlc3QuaHR0cFJlcXVlc3QuaGVhZGVyc1snWC1BbXotVXNlci1BZ2VudCddO1xuXG4gIGlmIChzaWduZXJDbGFzcyA9PT0gQVdTLlNpZ25lcnMuVjQpIHtcbiAgICBpZiAoZXhwaXJlcyA+IDYwNDgwMCkgeyAvLyBvbmUgd2VlayBleHBpcnkgaXMgaW52YWxpZFxuICAgICAgdmFyIG1lc3NhZ2UgPSAnUHJlc2lnbmluZyBkb2VzIG5vdCBzdXBwb3J0IGV4cGlyeSB0aW1lIGdyZWF0ZXIgJyArXG4gICAgICAgICAgICAgICAgICAgICd0aGFuIGEgd2VlayB3aXRoIFNpZ1Y0IHNpZ25pbmcuJztcbiAgICAgIHRocm93IEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcigpLCB7XG4gICAgICAgIGNvZGU6ICdJbnZhbGlkRXhwaXJ5VGltZScsIG1lc3NhZ2U6IG1lc3NhZ2UsIHJldHJ5YWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXF1ZXN0Lmh0dHBSZXF1ZXN0LmhlYWRlcnNbZXhwaXJlc0hlYWRlcl0gPSBleHBpcmVzO1xuICB9IGVsc2UgaWYgKHNpZ25lckNsYXNzID09PSBBV1MuU2lnbmVycy5TMykge1xuICAgIHZhciBub3cgPSByZXF1ZXN0LnNlcnZpY2UgPyByZXF1ZXN0LnNlcnZpY2UuZ2V0U2tld0NvcnJlY3RlZERhdGUoKSA6IEFXUy51dGlsLmRhdGUuZ2V0RGF0ZSgpO1xuICAgIHJlcXVlc3QuaHR0cFJlcXVlc3QuaGVhZGVyc1tleHBpcmVzSGVhZGVyXSA9IHBhcnNlSW50KFxuICAgICAgQVdTLnV0aWwuZGF0ZS51bml4VGltZXN0YW1wKG5vdykgKyBleHBpcmVzLCAxMCkudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBBV1MudXRpbC5lcnJvcihuZXcgRXJyb3IoKSwge1xuICAgICAgbWVzc2FnZTogJ1ByZXNpZ25pbmcgb25seSBzdXBwb3J0cyBTMyBvciBTaWdWNCBzaWduaW5nLicsXG4gICAgICBjb2RlOiAnVW5zdXBwb3J0ZWRTaWduZXInLCByZXRyeWFibGU6IGZhbHNlXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2lnbmVkVXJsU2lnbmVyKHJlcXVlc3QpIHtcbiAgdmFyIGVuZHBvaW50ID0gcmVxdWVzdC5odHRwUmVxdWVzdC5lbmRwb2ludDtcbiAgdmFyIHBhcnNlZFVybCA9IEFXUy51dGlsLnVybFBhcnNlKHJlcXVlc3QuaHR0cFJlcXVlc3QucGF0aCk7XG4gIHZhciBxdWVyeVBhcmFtcyA9IHt9O1xuXG4gIGlmIChwYXJzZWRVcmwuc2VhcmNoKSB7XG4gICAgcXVlcnlQYXJhbXMgPSBBV1MudXRpbC5xdWVyeVN0cmluZ1BhcnNlKHBhcnNlZFVybC5zZWFyY2guc3Vic3RyKDEpKTtcbiAgfVxuXG4gIHZhciBhdXRoID0gcmVxdWVzdC5odHRwUmVxdWVzdC5oZWFkZXJzWydBdXRob3JpemF0aW9uJ10uc3BsaXQoJyAnKTtcbiAgaWYgKGF1dGhbMF0gPT09ICdBV1MnKSB7XG4gICAgYXV0aCA9IGF1dGhbMV0uc3BsaXQoJzonKTtcbiAgICBxdWVyeVBhcmFtc1snQVdTQWNjZXNzS2V5SWQnXSA9IGF1dGhbMF07XG4gICAgcXVlcnlQYXJhbXNbJ1NpZ25hdHVyZSddID0gYXV0aFsxXTtcblxuICAgIEFXUy51dGlsLmVhY2gocmVxdWVzdC5odHRwUmVxdWVzdC5oZWFkZXJzLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PT0gZXhwaXJlc0hlYWRlcikga2V5ID0gJ0V4cGlyZXMnO1xuICAgICAgaWYgKGtleS5pbmRleE9mKCd4LWFtei1tZXRhLScpID09PSAwKSB7XG4gICAgICAgIC8vIERlbGV0ZSBleGlzdGluZywgcG90ZW50aWFsbHkgbm90IG5vcm1hbGl6ZWQga2V5XG4gICAgICAgIGRlbGV0ZSBxdWVyeVBhcmFtc1trZXldO1xuICAgICAgICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgIH1cbiAgICAgIHF1ZXJ5UGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICBkZWxldGUgcmVxdWVzdC5odHRwUmVxdWVzdC5oZWFkZXJzW2V4cGlyZXNIZWFkZXJdO1xuICAgIGRlbGV0ZSBxdWVyeVBhcmFtc1snQXV0aG9yaXphdGlvbiddO1xuICAgIGRlbGV0ZSBxdWVyeVBhcmFtc1snSG9zdCddO1xuICB9IGVsc2UgaWYgKGF1dGhbMF0gPT09ICdBV1M0LUhNQUMtU0hBMjU2JykgeyAvLyBTaWdWNCBzaWduaW5nXG4gICAgYXV0aC5zaGlmdCgpO1xuICAgIHZhciByZXN0ID0gYXV0aC5qb2luKCcgJyk7XG4gICAgdmFyIHNpZ25hdHVyZSA9IHJlc3QubWF0Y2goL1NpZ25hdHVyZT0oLio/KSg/Oix8XFxzfFxccj9cXG58JCkvKVsxXTtcbiAgICBxdWVyeVBhcmFtc1snWC1BbXotU2lnbmF0dXJlJ10gPSBzaWduYXR1cmU7XG4gICAgZGVsZXRlIHF1ZXJ5UGFyYW1zWydFeHBpcmVzJ107XG4gIH1cblxuICAvLyBidWlsZCBVUkxcbiAgZW5kcG9pbnQucGF0aG5hbWUgPSBwYXJzZWRVcmwucGF0aG5hbWU7XG4gIGVuZHBvaW50LnNlYXJjaCA9IEFXUy51dGlsLnF1ZXJ5UGFyYW1zVG9TdHJpbmcocXVlcnlQYXJhbXMpO1xufVxuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5BV1MuU2lnbmVycy5QcmVzaWduID0gaW5oZXJpdCh7XG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHNpZ246IGZ1bmN0aW9uIHNpZ24ocmVxdWVzdCwgZXhwaXJlVGltZSwgY2FsbGJhY2spIHtcbiAgICByZXF1ZXN0Lmh0dHBSZXF1ZXN0LmhlYWRlcnNbZXhwaXJlc0hlYWRlcl0gPSBleHBpcmVUaW1lIHx8IDM2MDA7XG4gICAgcmVxdWVzdC5vbignYnVpbGQnLCBzaWduZWRVcmxCdWlsZGVyKTtcbiAgICByZXF1ZXN0Lm9uKCdzaWduJywgc2lnbmVkVXJsU2lnbmVyKTtcbiAgICByZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKCdhZnRlckJ1aWxkJyxcbiAgICAgIEFXUy5FdmVudExpc3RlbmVycy5Db3JlLlNFVF9DT05URU5UX0xFTkdUSCk7XG4gICAgcmVxdWVzdC5yZW1vdmVMaXN0ZW5lcignYWZ0ZXJCdWlsZCcsXG4gICAgICBBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZS5DT01QVVRFX1NIQTI1Nik7XG5cbiAgICByZXF1ZXN0LmVtaXQoJ2JlZm9yZVByZXNpZ24nLCBbcmVxdWVzdF0pO1xuXG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICByZXF1ZXN0LmJ1aWxkKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5yZXNwb25zZS5lcnJvcikgY2FsbGJhY2sodGhpcy5yZXNwb25zZS5lcnJvcik7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIEFXUy51dGlsLnVybEZvcm1hdChyZXF1ZXN0Lmh0dHBSZXF1ZXN0LmVuZHBvaW50KSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0LmJ1aWxkKCk7XG4gICAgICBpZiAocmVxdWVzdC5yZXNwb25zZS5lcnJvcikgdGhyb3cgcmVxdWVzdC5yZXNwb25zZS5lcnJvcjtcbiAgICAgIHJldHVybiBBV1MudXRpbC51cmxGb3JtYXQocmVxdWVzdC5odHRwUmVxdWVzdC5lbmRwb2ludCk7XG4gICAgfVxuICB9XG59KTtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBBV1MuU2lnbmVycy5QcmVzaWduO1xuXG59LHtcIi4uL2NvcmVcIjoxOX1dLDY0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBBV1MgPSByZXF1aXJlKCcuLi9jb3JlJyk7XG5cbnZhciBpbmhlcml0ID0gQVdTLnV0aWwuaW5oZXJpdDtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuQVdTLlNpZ25lcnMuUmVxdWVzdFNpZ25lciA9IGluaGVyaXQoe1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gUmVxdWVzdFNpZ25lcihyZXF1ZXN0KSB7XG4gICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgfSxcblxuICBzZXRTZXJ2aWNlQ2xpZW50SWQ6IGZ1bmN0aW9uIHNldFNlcnZpY2VDbGllbnRJZChpZCkge1xuICAgIHRoaXMuc2VydmljZUNsaWVudElkID0gaWQ7XG4gIH0sXG5cbiAgZ2V0U2VydmljZUNsaWVudElkOiBmdW5jdGlvbiBnZXRTZXJ2aWNlQ2xpZW50SWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VydmljZUNsaWVudElkO1xuICB9XG59KTtcblxuQVdTLlNpZ25lcnMuUmVxdWVzdFNpZ25lci5nZXRWZXJzaW9uID0gZnVuY3Rpb24gZ2V0VmVyc2lvbih2ZXJzaW9uKSB7XG4gIHN3aXRjaCAodmVyc2lvbikge1xuICAgIGNhc2UgJ3YyJzogcmV0dXJuIEFXUy5TaWduZXJzLlYyO1xuICAgIGNhc2UgJ3YzJzogcmV0dXJuIEFXUy5TaWduZXJzLlYzO1xuICAgIGNhc2UgJ3MzdjQnOiByZXR1cm4gQVdTLlNpZ25lcnMuVjQ7XG4gICAgY2FzZSAndjQnOiByZXR1cm4gQVdTLlNpZ25lcnMuVjQ7XG4gICAgY2FzZSAnczMnOiByZXR1cm4gQVdTLlNpZ25lcnMuUzM7XG4gICAgY2FzZSAndjNodHRwcyc6IHJldHVybiBBV1MuU2lnbmVycy5WM0h0dHBzO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5rbm93biBzaWduaW5nIHZlcnNpb24gJyArIHZlcnNpb24pO1xufTtcblxucmVxdWlyZSgnLi92MicpO1xucmVxdWlyZSgnLi92MycpO1xucmVxdWlyZSgnLi92M2h0dHBzJyk7XG5yZXF1aXJlKCcuL3Y0Jyk7XG5yZXF1aXJlKCcuL3MzJyk7XG5yZXF1aXJlKCcuL3ByZXNpZ24nKTtcblxufSx7XCIuLi9jb3JlXCI6MTksXCIuL3ByZXNpZ25cIjo2MyxcIi4vczNcIjo2NSxcIi4vdjJcIjo2NixcIi4vdjNcIjo2NyxcIi4vdjNodHRwc1wiOjY4LFwiLi92NFwiOjY5fV0sNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTtcbnZhciBpbmhlcml0ID0gQVdTLnV0aWwuaW5oZXJpdDtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuQVdTLlNpZ25lcnMuUzMgPSBpbmhlcml0KEFXUy5TaWduZXJzLlJlcXVlc3RTaWduZXIsIHtcbiAgLyoqXG4gICAqIFdoZW4gYnVpbGRpbmcgdGhlIHN0cmluZ1RvU2lnbiwgdGhlc2Ugc3ViIHJlc291cmNlIHBhcmFtcyBzaG91bGQgYmVcbiAgICogcGFydCBvZiB0aGUgY2Fub25pY2FsIHJlc291cmNlIHN0cmluZyB3aXRoIHRoZWlyIE5PTi1kZWNvZGVkIHZhbHVlc1xuICAgKi9cbiAgc3ViUmVzb3VyY2VzOiB7XG4gICAgJ2FjbCc6IDEsXG4gICAgJ2FjY2VsZXJhdGUnOiAxLFxuICAgICdhbmFseXRpY3MnOiAxLFxuICAgICdjb3JzJzogMSxcbiAgICAnbGlmZWN5Y2xlJzogMSxcbiAgICAnZGVsZXRlJzogMSxcbiAgICAnaW52ZW50b3J5JzogMSxcbiAgICAnbG9jYXRpb24nOiAxLFxuICAgICdsb2dnaW5nJzogMSxcbiAgICAnbWV0cmljcyc6IDEsXG4gICAgJ25vdGlmaWNhdGlvbic6IDEsXG4gICAgJ3BhcnROdW1iZXInOiAxLFxuICAgICdwb2xpY3knOiAxLFxuICAgICdyZXF1ZXN0UGF5bWVudCc6IDEsXG4gICAgJ3JlcGxpY2F0aW9uJzogMSxcbiAgICAncmVzdG9yZSc6IDEsXG4gICAgJ3RhZ2dpbmcnOiAxLFxuICAgICd0b3JyZW50JzogMSxcbiAgICAndXBsb2FkSWQnOiAxLFxuICAgICd1cGxvYWRzJzogMSxcbiAgICAndmVyc2lvbklkJzogMSxcbiAgICAndmVyc2lvbmluZyc6IDEsXG4gICAgJ3ZlcnNpb25zJzogMSxcbiAgICAnd2Vic2l0ZSc6IDFcbiAgfSxcblxuICAvLyB3aGVuIGJ1aWxkaW5nIHRoZSBzdHJpbmdUb1NpZ24sIHRoZXNlIHF1ZXJ5c3RyaW5nIHBhcmFtcyBzaG91bGQgYmVcbiAgLy8gcGFydCBvZiB0aGUgY2Fub25pY2FsIHJlc291cmNlIHN0cmluZyB3aXRoIHRoZWlyIE5PTi1lbmNvZGVkIHZhbHVlc1xuICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAncmVzcG9uc2UtY29udGVudC10eXBlJzogMSxcbiAgICAncmVzcG9uc2UtY29udGVudC1sYW5ndWFnZSc6IDEsXG4gICAgJ3Jlc3BvbnNlLWV4cGlyZXMnOiAxLFxuICAgICdyZXNwb25zZS1jYWNoZS1jb250cm9sJzogMSxcbiAgICAncmVzcG9uc2UtY29udGVudC1kaXNwb3NpdGlvbic6IDEsXG4gICAgJ3Jlc3BvbnNlLWNvbnRlbnQtZW5jb2RpbmcnOiAxXG4gIH0sXG5cbiAgYWRkQXV0aG9yaXphdGlvbjogZnVuY3Rpb24gYWRkQXV0aG9yaXphdGlvbihjcmVkZW50aWFscywgZGF0ZSkge1xuICAgIGlmICghdGhpcy5yZXF1ZXN0LmhlYWRlcnNbJ3ByZXNpZ25lZC1leHBpcmVzJ10pIHtcbiAgICAgIHRoaXMucmVxdWVzdC5oZWFkZXJzWydYLUFtei1EYXRlJ10gPSBBV1MudXRpbC5kYXRlLnJmYzgyMihkYXRlKTtcbiAgICB9XG5cbiAgICBpZiAoY3JlZGVudGlhbHMuc2Vzc2lvblRva2VuKSB7XG4gICAgICAvLyBwcmVzaWduZWQgVVJMcyByZXF1aXJlIHRoaXMgaGVhZGVyIHRvIGJlIGxvd2VyY2FzZWRcbiAgICAgIHRoaXMucmVxdWVzdC5oZWFkZXJzWyd4LWFtei1zZWN1cml0eS10b2tlbiddID0gY3JlZGVudGlhbHMuc2Vzc2lvblRva2VuO1xuICAgIH1cblxuICAgIHZhciBzaWduYXR1cmUgPSB0aGlzLnNpZ24oY3JlZGVudGlhbHMuc2VjcmV0QWNjZXNzS2V5LCB0aGlzLnN0cmluZ1RvU2lnbigpKTtcbiAgICB2YXIgYXV0aCA9ICdBV1MgJyArIGNyZWRlbnRpYWxzLmFjY2Vzc0tleUlkICsgJzonICsgc2lnbmF0dXJlO1xuXG4gICAgdGhpcy5yZXF1ZXN0LmhlYWRlcnNbJ0F1dGhvcml6YXRpb24nXSA9IGF1dGg7XG4gIH0sXG5cbiAgc3RyaW5nVG9TaWduOiBmdW5jdGlvbiBzdHJpbmdUb1NpZ24oKSB7XG4gICAgdmFyIHIgPSB0aGlzLnJlcXVlc3Q7XG5cbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICBwYXJ0cy5wdXNoKHIubWV0aG9kKTtcbiAgICBwYXJ0cy5wdXNoKHIuaGVhZGVyc1snQ29udGVudC1NRDUnXSB8fCAnJyk7XG4gICAgcGFydHMucHVzaChyLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddIHx8ICcnKTtcblxuICAgIC8vIFRoaXMgaXMgdGhlIFwiRGF0ZVwiIGhlYWRlciwgYnV0IHdlIHVzZSBYLUFtei1EYXRlLlxuICAgIC8vIFRoZSBTMyBzaWduaW5nIG1lY2hhbmlzbSByZXF1aXJlcyB1cyB0byBwYXNzIGFuIGVtcHR5XG4gICAgLy8gc3RyaW5nIGZvciB0aGlzIERhdGUgaGVhZGVyIHJlZ2FyZGxlc3MuXG4gICAgcGFydHMucHVzaChyLmhlYWRlcnNbJ3ByZXNpZ25lZC1leHBpcmVzJ10gfHwgJycpO1xuXG4gICAgdmFyIGhlYWRlcnMgPSB0aGlzLmNhbm9uaWNhbGl6ZWRBbXpIZWFkZXJzKCk7XG4gICAgaWYgKGhlYWRlcnMpIHBhcnRzLnB1c2goaGVhZGVycyk7XG4gICAgcGFydHMucHVzaCh0aGlzLmNhbm9uaWNhbGl6ZWRSZXNvdXJjZSgpKTtcblxuICAgIHJldHVybiBwYXJ0cy5qb2luKCdcXG4nKTtcblxuICB9LFxuXG4gIGNhbm9uaWNhbGl6ZWRBbXpIZWFkZXJzOiBmdW5jdGlvbiBjYW5vbmljYWxpemVkQW16SGVhZGVycygpIHtcblxuICAgIHZhciBhbXpIZWFkZXJzID0gW107XG5cbiAgICBBV1MudXRpbC5lYWNoKHRoaXMucmVxdWVzdC5oZWFkZXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgaWYgKG5hbWUubWF0Y2goL154LWFtei0vaSkpXG4gICAgICAgIGFtekhlYWRlcnMucHVzaChuYW1lKTtcbiAgICB9KTtcblxuICAgIGFtekhlYWRlcnMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEudG9Mb3dlckNhc2UoKSA8IGIudG9Mb3dlckNhc2UoKSA/IC0xIDogMTtcbiAgICB9KTtcblxuICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgIEFXUy51dGlsLmFycmF5RWFjaC5jYWxsKHRoaXMsIGFtekhlYWRlcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBwYXJ0cy5wdXNoKG5hbWUudG9Mb3dlckNhc2UoKSArICc6JyArIFN0cmluZyh0aGlzLnJlcXVlc3QuaGVhZGVyc1tuYW1lXSkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oJ1xcbicpO1xuXG4gIH0sXG5cbiAgY2Fub25pY2FsaXplZFJlc291cmNlOiBmdW5jdGlvbiBjYW5vbmljYWxpemVkUmVzb3VyY2UoKSB7XG5cbiAgICB2YXIgciA9IHRoaXMucmVxdWVzdDtcblxuICAgIHZhciBwYXJ0cyA9IHIucGF0aC5zcGxpdCgnPycpO1xuICAgIHZhciBwYXRoID0gcGFydHNbMF07XG4gICAgdmFyIHF1ZXJ5c3RyaW5nID0gcGFydHNbMV07XG5cbiAgICB2YXIgcmVzb3VyY2UgPSAnJztcblxuICAgIGlmIChyLnZpcnR1YWxIb3N0ZWRCdWNrZXQpXG4gICAgICByZXNvdXJjZSArPSAnLycgKyByLnZpcnR1YWxIb3N0ZWRCdWNrZXQ7XG5cbiAgICByZXNvdXJjZSArPSBwYXRoO1xuXG4gICAgaWYgKHF1ZXJ5c3RyaW5nKSB7XG5cbiAgICAgIC8vIGNvbGxlY3QgYSBsaXN0IG9mIHN1YiByZXNvdXJjZXMgYW5kIHF1ZXJ5IHBhcmFtcyB0aGF0IG5lZWQgdG8gYmUgc2lnbmVkXG4gICAgICB2YXIgcmVzb3VyY2VzID0gW107XG5cbiAgICAgIEFXUy51dGlsLmFycmF5RWFjaC5jYWxsKHRoaXMsIHF1ZXJ5c3RyaW5nLnNwbGl0KCcmJyksIGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICB2YXIgbmFtZSA9IHBhcmFtLnNwbGl0KCc9JylbMF07XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcmFtLnNwbGl0KCc9JylbMV07XG4gICAgICAgIGlmICh0aGlzLnN1YlJlc291cmNlc1tuYW1lXSB8fCB0aGlzLnJlc3BvbnNlSGVhZGVyc1tuYW1lXSkge1xuICAgICAgICAgIHZhciBzdWJyZXNvdXJjZSA9IHsgbmFtZTogbmFtZSB9O1xuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdWJSZXNvdXJjZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgc3VicmVzb3VyY2UudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN1YnJlc291cmNlLnZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzb3VyY2VzLnB1c2goc3VicmVzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmVzb3VyY2VzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEubmFtZSA8IGIubmFtZSA/IC0xIDogMTsgfSk7XG5cbiAgICAgIGlmIChyZXNvdXJjZXMubGVuZ3RoKSB7XG5cbiAgICAgICAgcXVlcnlzdHJpbmcgPSBbXTtcbiAgICAgICAgQVdTLnV0aWwuYXJyYXlFYWNoKHJlc291cmNlcywgZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgIGlmIChyZXMudmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcXVlcnlzdHJpbmcucHVzaChyZXMubmFtZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nLnB1c2gocmVzLm5hbWUgKyAnPScgKyByZXMudmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVzb3VyY2UgKz0gJz8nICsgcXVlcnlzdHJpbmcuam9pbignJicpO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc291cmNlO1xuXG4gIH0sXG5cbiAgc2lnbjogZnVuY3Rpb24gc2lnbihzZWNyZXQsIHN0cmluZykge1xuICAgIHJldHVybiBBV1MudXRpbC5jcnlwdG8uaG1hYyhzZWNyZXQsIHN0cmluZywgJ2Jhc2U2NCcsICdzaGExJyk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IEFXUy5TaWduZXJzLlMzO1xuXG59LHtcIi4uL2NvcmVcIjoxOX1dLDY2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBBV1MgPSByZXF1aXJlKCcuLi9jb3JlJyk7XG52YXIgaW5oZXJpdCA9IEFXUy51dGlsLmluaGVyaXQ7XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbkFXUy5TaWduZXJzLlYyID0gaW5oZXJpdChBV1MuU2lnbmVycy5SZXF1ZXN0U2lnbmVyLCB7XG4gIGFkZEF1dGhvcml6YXRpb246IGZ1bmN0aW9uIGFkZEF1dGhvcml6YXRpb24oY3JlZGVudGlhbHMsIGRhdGUpIHtcblxuICAgIGlmICghZGF0ZSkgZGF0ZSA9IEFXUy51dGlsLmRhdGUuZ2V0RGF0ZSgpO1xuXG4gICAgdmFyIHIgPSB0aGlzLnJlcXVlc3Q7XG5cbiAgICByLnBhcmFtcy5UaW1lc3RhbXAgPSBBV1MudXRpbC5kYXRlLmlzbzg2MDEoZGF0ZSk7XG4gICAgci5wYXJhbXMuU2lnbmF0dXJlVmVyc2lvbiA9ICcyJztcbiAgICByLnBhcmFtcy5TaWduYXR1cmVNZXRob2QgPSAnSG1hY1NIQTI1Nic7XG4gICAgci5wYXJhbXMuQVdTQWNjZXNzS2V5SWQgPSBjcmVkZW50aWFscy5hY2Nlc3NLZXlJZDtcblxuICAgIGlmIChjcmVkZW50aWFscy5zZXNzaW9uVG9rZW4pIHtcbiAgICAgIHIucGFyYW1zLlNlY3VyaXR5VG9rZW4gPSBjcmVkZW50aWFscy5zZXNzaW9uVG9rZW47XG4gICAgfVxuXG4gICAgZGVsZXRlIHIucGFyYW1zLlNpZ25hdHVyZTsgLy8gZGVsZXRlIG9sZCBTaWduYXR1cmUgZm9yIHJlLXNpZ25pbmdcbiAgICByLnBhcmFtcy5TaWduYXR1cmUgPSB0aGlzLnNpZ25hdHVyZShjcmVkZW50aWFscyk7XG5cbiAgICByLmJvZHkgPSBBV1MudXRpbC5xdWVyeVBhcmFtc1RvU3RyaW5nKHIucGFyYW1zKTtcbiAgICByLmhlYWRlcnNbJ0NvbnRlbnQtTGVuZ3RoJ10gPSByLmJvZHkubGVuZ3RoO1xuICB9LFxuXG4gIHNpZ25hdHVyZTogZnVuY3Rpb24gc2lnbmF0dXJlKGNyZWRlbnRpYWxzKSB7XG4gICAgcmV0dXJuIEFXUy51dGlsLmNyeXB0by5obWFjKGNyZWRlbnRpYWxzLnNlY3JldEFjY2Vzc0tleSwgdGhpcy5zdHJpbmdUb1NpZ24oKSwgJ2Jhc2U2NCcpO1xuICB9LFxuXG4gIHN0cmluZ1RvU2lnbjogZnVuY3Rpb24gc3RyaW5nVG9TaWduKCkge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgIHBhcnRzLnB1c2godGhpcy5yZXF1ZXN0Lm1ldGhvZCk7XG4gICAgcGFydHMucHVzaCh0aGlzLnJlcXVlc3QuZW5kcG9pbnQuaG9zdC50b0xvd2VyQ2FzZSgpKTtcbiAgICBwYXJ0cy5wdXNoKHRoaXMucmVxdWVzdC5wYXRobmFtZSgpKTtcbiAgICBwYXJ0cy5wdXNoKEFXUy51dGlsLnF1ZXJ5UGFyYW1zVG9TdHJpbmcodGhpcy5yZXF1ZXN0LnBhcmFtcykpO1xuICAgIHJldHVybiBwYXJ0cy5qb2luKCdcXG4nKTtcbiAgfVxuXG59KTtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBBV1MuU2lnbmVycy5WMjtcblxufSx7XCIuLi9jb3JlXCI6MTl9XSw2NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgQVdTID0gcmVxdWlyZSgnLi4vY29yZScpO1xudmFyIGluaGVyaXQgPSBBV1MudXRpbC5pbmhlcml0O1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5BV1MuU2lnbmVycy5WMyA9IGluaGVyaXQoQVdTLlNpZ25lcnMuUmVxdWVzdFNpZ25lciwge1xuICBhZGRBdXRob3JpemF0aW9uOiBmdW5jdGlvbiBhZGRBdXRob3JpemF0aW9uKGNyZWRlbnRpYWxzLCBkYXRlKSB7XG5cbiAgICB2YXIgZGF0ZXRpbWUgPSBBV1MudXRpbC5kYXRlLnJmYzgyMihkYXRlKTtcblxuICAgIHRoaXMucmVxdWVzdC5oZWFkZXJzWydYLUFtei1EYXRlJ10gPSBkYXRldGltZTtcblxuICAgIGlmIChjcmVkZW50aWFscy5zZXNzaW9uVG9rZW4pIHtcbiAgICAgIHRoaXMucmVxdWVzdC5oZWFkZXJzWyd4LWFtei1zZWN1cml0eS10b2tlbiddID0gY3JlZGVudGlhbHMuc2Vzc2lvblRva2VuO1xuICAgIH1cblxuICAgIHRoaXMucmVxdWVzdC5oZWFkZXJzWydYLUFtem4tQXV0aG9yaXphdGlvbiddID1cbiAgICAgIHRoaXMuYXV0aG9yaXphdGlvbihjcmVkZW50aWFscywgZGF0ZXRpbWUpO1xuXG4gIH0sXG5cbiAgYXV0aG9yaXphdGlvbjogZnVuY3Rpb24gYXV0aG9yaXphdGlvbihjcmVkZW50aWFscykge1xuICAgIHJldHVybiAnQVdTMyAnICtcbiAgICAgICdBV1NBY2Nlc3NLZXlJZD0nICsgY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQgKyAnLCcgK1xuICAgICAgJ0FsZ29yaXRobT1IbWFjU0hBMjU2LCcgK1xuICAgICAgJ1NpZ25lZEhlYWRlcnM9JyArIHRoaXMuc2lnbmVkSGVhZGVycygpICsgJywnICtcbiAgICAgICdTaWduYXR1cmU9JyArIHRoaXMuc2lnbmF0dXJlKGNyZWRlbnRpYWxzKTtcbiAgfSxcblxuICBzaWduZWRIZWFkZXJzOiBmdW5jdGlvbiBzaWduZWRIZWFkZXJzKCkge1xuICAgIHZhciBoZWFkZXJzID0gW107XG4gICAgQVdTLnV0aWwuYXJyYXlFYWNoKHRoaXMuaGVhZGVyc1RvU2lnbigpLCBmdW5jdGlvbiBpdGVyYXRvcihoKSB7XG4gICAgICBoZWFkZXJzLnB1c2goaC50b0xvd2VyQ2FzZSgpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaGVhZGVycy5zb3J0KCkuam9pbignOycpO1xuICB9LFxuXG4gIGNhbm9uaWNhbEhlYWRlcnM6IGZ1bmN0aW9uIGNhbm9uaWNhbEhlYWRlcnMoKSB7XG4gICAgdmFyIGhlYWRlcnMgPSB0aGlzLnJlcXVlc3QuaGVhZGVycztcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICBBV1MudXRpbC5hcnJheUVhY2godGhpcy5oZWFkZXJzVG9TaWduKCksIGZ1bmN0aW9uIGl0ZXJhdG9yKGgpIHtcbiAgICAgIHBhcnRzLnB1c2goaC50b0xvd2VyQ2FzZSgpLnRyaW0oKSArICc6JyArIFN0cmluZyhoZWFkZXJzW2hdKS50cmltKCkpO1xuICAgIH0pO1xuICAgIHJldHVybiBwYXJ0cy5zb3J0KCkuam9pbignXFxuJykgKyAnXFxuJztcbiAgfSxcblxuICBoZWFkZXJzVG9TaWduOiBmdW5jdGlvbiBoZWFkZXJzVG9TaWduKCkge1xuICAgIHZhciBoZWFkZXJzID0gW107XG4gICAgQVdTLnV0aWwuZWFjaCh0aGlzLnJlcXVlc3QuaGVhZGVycywgZnVuY3Rpb24gaXRlcmF0b3Ioaykge1xuICAgICAgaWYgKGsgPT09ICdIb3N0JyB8fCBrID09PSAnQ29udGVudC1FbmNvZGluZycgfHwgay5tYXRjaCgvXlgtQW16L2kpKSB7XG4gICAgICAgIGhlYWRlcnMucHVzaChrKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaGVhZGVycztcbiAgfSxcblxuICBzaWduYXR1cmU6IGZ1bmN0aW9uIHNpZ25hdHVyZShjcmVkZW50aWFscykge1xuICAgIHJldHVybiBBV1MudXRpbC5jcnlwdG8uaG1hYyhjcmVkZW50aWFscy5zZWNyZXRBY2Nlc3NLZXksIHRoaXMuc3RyaW5nVG9TaWduKCksICdiYXNlNjQnKTtcbiAgfSxcblxuICBzdHJpbmdUb1NpZ246IGZ1bmN0aW9uIHN0cmluZ1RvU2lnbigpIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICBwYXJ0cy5wdXNoKHRoaXMucmVxdWVzdC5tZXRob2QpO1xuICAgIHBhcnRzLnB1c2goJy8nKTtcbiAgICBwYXJ0cy5wdXNoKCcnKTtcbiAgICBwYXJ0cy5wdXNoKHRoaXMuY2Fub25pY2FsSGVhZGVycygpKTtcbiAgICBwYXJ0cy5wdXNoKHRoaXMucmVxdWVzdC5ib2R5KTtcbiAgICByZXR1cm4gQVdTLnV0aWwuY3J5cHRvLnNoYTI1NihwYXJ0cy5qb2luKCdcXG4nKSk7XG4gIH1cblxufSk7XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gQVdTLlNpZ25lcnMuVjM7XG5cbn0se1wiLi4vY29yZVwiOjE5fV0sNjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTtcbnZhciBpbmhlcml0ID0gQVdTLnV0aWwuaW5oZXJpdDtcblxucmVxdWlyZSgnLi92MycpO1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5BV1MuU2lnbmVycy5WM0h0dHBzID0gaW5oZXJpdChBV1MuU2lnbmVycy5WMywge1xuICBhdXRob3JpemF0aW9uOiBmdW5jdGlvbiBhdXRob3JpemF0aW9uKGNyZWRlbnRpYWxzKSB7XG4gICAgcmV0dXJuICdBV1MzLUhUVFBTICcgK1xuICAgICAgJ0FXU0FjY2Vzc0tleUlkPScgKyBjcmVkZW50aWFscy5hY2Nlc3NLZXlJZCArICcsJyArXG4gICAgICAnQWxnb3JpdGhtPUhtYWNTSEEyNTYsJyArXG4gICAgICAnU2lnbmF0dXJlPScgKyB0aGlzLnNpZ25hdHVyZShjcmVkZW50aWFscyk7XG4gIH0sXG5cbiAgc3RyaW5nVG9TaWduOiBmdW5jdGlvbiBzdHJpbmdUb1NpZ24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdC5oZWFkZXJzWydYLUFtei1EYXRlJ107XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IEFXUy5TaWduZXJzLlYzSHR0cHM7XG5cbn0se1wiLi4vY29yZVwiOjE5LFwiLi92M1wiOjY3fV0sNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTtcbnZhciB2NENyZWRlbnRpYWxzID0gcmVxdWlyZSgnLi92NF9jcmVkZW50aWFscycpO1xudmFyIGluaGVyaXQgPSBBV1MudXRpbC5pbmhlcml0O1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG52YXIgZXhwaXJlc0hlYWRlciA9ICdwcmVzaWduZWQtZXhwaXJlcyc7XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbkFXUy5TaWduZXJzLlY0ID0gaW5oZXJpdChBV1MuU2lnbmVycy5SZXF1ZXN0U2lnbmVyLCB7XG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBWNChyZXF1ZXN0LCBzZXJ2aWNlTmFtZSwgb3B0aW9ucykge1xuICAgIEFXUy5TaWduZXJzLlJlcXVlc3RTaWduZXIuY2FsbCh0aGlzLCByZXF1ZXN0KTtcbiAgICB0aGlzLnNlcnZpY2VOYW1lID0gc2VydmljZU5hbWU7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdGhpcy5zaWduYXR1cmVDYWNoZSA9IHR5cGVvZiBvcHRpb25zLnNpZ25hdHVyZUNhY2hlID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnNpZ25hdHVyZUNhY2hlIDogdHJ1ZTtcbiAgICB0aGlzLm9wZXJhdGlvbiA9IG9wdGlvbnMub3BlcmF0aW9uO1xuICAgIHRoaXMuc2lnbmF0dXJlVmVyc2lvbiA9IG9wdGlvbnMuc2lnbmF0dXJlVmVyc2lvbjtcbiAgfSxcblxuICBhbGdvcml0aG06ICdBV1M0LUhNQUMtU0hBMjU2JyxcblxuICBhZGRBdXRob3JpemF0aW9uOiBmdW5jdGlvbiBhZGRBdXRob3JpemF0aW9uKGNyZWRlbnRpYWxzLCBkYXRlKSB7XG4gICAgdmFyIGRhdGV0aW1lID0gQVdTLnV0aWwuZGF0ZS5pc284NjAxKGRhdGUpLnJlcGxhY2UoL1s6XFwtXXxcXC5cXGR7M30vZywgJycpO1xuXG4gICAgaWYgKHRoaXMuaXNQcmVzaWduZWQoKSkge1xuICAgICAgdGhpcy51cGRhdGVGb3JQcmVzaWduZWQoY3JlZGVudGlhbHMsIGRhdGV0aW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRIZWFkZXJzKGNyZWRlbnRpYWxzLCBkYXRldGltZSk7XG4gICAgfVxuXG4gICAgdGhpcy5yZXF1ZXN0LmhlYWRlcnNbJ0F1dGhvcml6YXRpb24nXSA9XG4gICAgICB0aGlzLmF1dGhvcml6YXRpb24oY3JlZGVudGlhbHMsIGRhdGV0aW1lKTtcbiAgfSxcblxuICBhZGRIZWFkZXJzOiBmdW5jdGlvbiBhZGRIZWFkZXJzKGNyZWRlbnRpYWxzLCBkYXRldGltZSkge1xuICAgIHRoaXMucmVxdWVzdC5oZWFkZXJzWydYLUFtei1EYXRlJ10gPSBkYXRldGltZTtcbiAgICBpZiAoY3JlZGVudGlhbHMuc2Vzc2lvblRva2VuKSB7XG4gICAgICB0aGlzLnJlcXVlc3QuaGVhZGVyc1sneC1hbXotc2VjdXJpdHktdG9rZW4nXSA9IGNyZWRlbnRpYWxzLnNlc3Npb25Ub2tlbjtcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlRm9yUHJlc2lnbmVkOiBmdW5jdGlvbiB1cGRhdGVGb3JQcmVzaWduZWQoY3JlZGVudGlhbHMsIGRhdGV0aW1lKSB7XG4gICAgdmFyIGNyZWRTdHJpbmcgPSB0aGlzLmNyZWRlbnRpYWxTdHJpbmcoZGF0ZXRpbWUpO1xuICAgIHZhciBxcyA9IHtcbiAgICAgICdYLUFtei1EYXRlJzogZGF0ZXRpbWUsXG4gICAgICAnWC1BbXotQWxnb3JpdGhtJzogdGhpcy5hbGdvcml0aG0sXG4gICAgICAnWC1BbXotQ3JlZGVudGlhbCc6IGNyZWRlbnRpYWxzLmFjY2Vzc0tleUlkICsgJy8nICsgY3JlZFN0cmluZyxcbiAgICAgICdYLUFtei1FeHBpcmVzJzogdGhpcy5yZXF1ZXN0LmhlYWRlcnNbZXhwaXJlc0hlYWRlcl0sXG4gICAgICAnWC1BbXotU2lnbmVkSGVhZGVycyc6IHRoaXMuc2lnbmVkSGVhZGVycygpXG4gICAgfTtcblxuICAgIGlmIChjcmVkZW50aWFscy5zZXNzaW9uVG9rZW4pIHtcbiAgICAgIHFzWydYLUFtei1TZWN1cml0eS1Ub2tlbiddID0gY3JlZGVudGlhbHMuc2Vzc2lvblRva2VuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlcXVlc3QuaGVhZGVyc1snQ29udGVudC1UeXBlJ10pIHtcbiAgICAgIHFzWydDb250ZW50LVR5cGUnXSA9IHRoaXMucmVxdWVzdC5oZWFkZXJzWydDb250ZW50LVR5cGUnXTtcbiAgICB9XG4gICAgaWYgKHRoaXMucmVxdWVzdC5oZWFkZXJzWydDb250ZW50LU1ENSddKSB7XG4gICAgICBxc1snQ29udGVudC1NRDUnXSA9IHRoaXMucmVxdWVzdC5oZWFkZXJzWydDb250ZW50LU1ENSddO1xuICAgIH1cbiAgICBpZiAodGhpcy5yZXF1ZXN0LmhlYWRlcnNbJ0NhY2hlLUNvbnRyb2wnXSkge1xuICAgICAgcXNbJ0NhY2hlLUNvbnRyb2wnXSA9IHRoaXMucmVxdWVzdC5oZWFkZXJzWydDYWNoZS1Db250cm9sJ107XG4gICAgfVxuXG4gICAgLy8gbmVlZCB0byBwdWxsIGluIGFueSBvdGhlciBYLUFtei0qIGhlYWRlcnNcbiAgICBBV1MudXRpbC5lYWNoLmNhbGwodGhpcywgdGhpcy5yZXF1ZXN0LmhlYWRlcnMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChrZXkgPT09IGV4cGlyZXNIZWFkZXIpIHJldHVybjtcbiAgICAgIGlmICh0aGlzLmlzU2lnbmFibGVIZWFkZXIoa2V5KSkge1xuICAgICAgICB2YXIgbG93ZXJLZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgLy8gTWV0YWRhdGEgc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbiAgICAgICAgaWYgKGxvd2VyS2V5LmluZGV4T2YoJ3gtYW16LW1ldGEtJykgPT09IDApIHtcbiAgICAgICAgICBxc1tsb3dlcktleV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChsb3dlcktleS5pbmRleE9mKCd4LWFtei0nKSA9PT0gMCkge1xuICAgICAgICAgIHFzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHNlcCA9IHRoaXMucmVxdWVzdC5wYXRoLmluZGV4T2YoJz8nKSA+PSAwID8gJyYnIDogJz8nO1xuICAgIHRoaXMucmVxdWVzdC5wYXRoICs9IHNlcCArIEFXUy51dGlsLnF1ZXJ5UGFyYW1zVG9TdHJpbmcocXMpO1xuICB9LFxuXG4gIGF1dGhvcml6YXRpb246IGZ1bmN0aW9uIGF1dGhvcml6YXRpb24oY3JlZGVudGlhbHMsIGRhdGV0aW1lKSB7XG4gICAgdmFyIHBhcnRzID0gW107XG4gICAgdmFyIGNyZWRTdHJpbmcgPSB0aGlzLmNyZWRlbnRpYWxTdHJpbmcoZGF0ZXRpbWUpO1xuICAgIHBhcnRzLnB1c2godGhpcy5hbGdvcml0aG0gKyAnIENyZWRlbnRpYWw9JyArXG4gICAgICBjcmVkZW50aWFscy5hY2Nlc3NLZXlJZCArICcvJyArIGNyZWRTdHJpbmcpO1xuICAgIHBhcnRzLnB1c2goJ1NpZ25lZEhlYWRlcnM9JyArIHRoaXMuc2lnbmVkSGVhZGVycygpKTtcbiAgICBwYXJ0cy5wdXNoKCdTaWduYXR1cmU9JyArIHRoaXMuc2lnbmF0dXJlKGNyZWRlbnRpYWxzLCBkYXRldGltZSkpO1xuICAgIHJldHVybiBwYXJ0cy5qb2luKCcsICcpO1xuICB9LFxuXG4gIHNpZ25hdHVyZTogZnVuY3Rpb24gc2lnbmF0dXJlKGNyZWRlbnRpYWxzLCBkYXRldGltZSkge1xuICAgIHZhciBzaWduaW5nS2V5ID0gdjRDcmVkZW50aWFscy5nZXRTaWduaW5nS2V5KFxuICAgICAgY3JlZGVudGlhbHMsXG4gICAgICBkYXRldGltZS5zdWJzdHIoMCwgOCksXG4gICAgICB0aGlzLnJlcXVlc3QucmVnaW9uLFxuICAgICAgdGhpcy5zZXJ2aWNlTmFtZSxcbiAgICAgIHRoaXMuc2lnbmF0dXJlQ2FjaGVcbiAgICApO1xuICAgIHJldHVybiBBV1MudXRpbC5jcnlwdG8uaG1hYyhzaWduaW5nS2V5LCB0aGlzLnN0cmluZ1RvU2lnbihkYXRldGltZSksICdoZXgnKTtcbiAgfSxcblxuICBzdHJpbmdUb1NpZ246IGZ1bmN0aW9uIHN0cmluZ1RvU2lnbihkYXRldGltZSkge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgIHBhcnRzLnB1c2goJ0FXUzQtSE1BQy1TSEEyNTYnKTtcbiAgICBwYXJ0cy5wdXNoKGRhdGV0aW1lKTtcbiAgICBwYXJ0cy5wdXNoKHRoaXMuY3JlZGVudGlhbFN0cmluZyhkYXRldGltZSkpO1xuICAgIHBhcnRzLnB1c2godGhpcy5oZXhFbmNvZGVkSGFzaCh0aGlzLmNhbm9uaWNhbFN0cmluZygpKSk7XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oJ1xcbicpO1xuICB9LFxuXG4gIGNhbm9uaWNhbFN0cmluZzogZnVuY3Rpb24gY2Fub25pY2FsU3RyaW5nKCkge1xuICAgIHZhciBwYXJ0cyA9IFtdLCBwYXRobmFtZSA9IHRoaXMucmVxdWVzdC5wYXRobmFtZSgpO1xuICAgIGlmICh0aGlzLnNlcnZpY2VOYW1lICE9PSAnczMnICYmIHRoaXMuc2lnbmF0dXJlVmVyc2lvbiAhPT0gJ3MzdjQnKSBwYXRobmFtZSA9IEFXUy51dGlsLnVyaUVzY2FwZVBhdGgocGF0aG5hbWUpO1xuXG4gICAgcGFydHMucHVzaCh0aGlzLnJlcXVlc3QubWV0aG9kKTtcbiAgICBwYXJ0cy5wdXNoKHBhdGhuYW1lKTtcbiAgICBwYXJ0cy5wdXNoKHRoaXMucmVxdWVzdC5zZWFyY2goKSk7XG4gICAgcGFydHMucHVzaCh0aGlzLmNhbm9uaWNhbEhlYWRlcnMoKSArICdcXG4nKTtcbiAgICBwYXJ0cy5wdXNoKHRoaXMuc2lnbmVkSGVhZGVycygpKTtcbiAgICBwYXJ0cy5wdXNoKHRoaXMuaGV4RW5jb2RlZEJvZHlIYXNoKCkpO1xuICAgIHJldHVybiBwYXJ0cy5qb2luKCdcXG4nKTtcbiAgfSxcblxuICBjYW5vbmljYWxIZWFkZXJzOiBmdW5jdGlvbiBjYW5vbmljYWxIZWFkZXJzKCkge1xuICAgIHZhciBoZWFkZXJzID0gW107XG4gICAgQVdTLnV0aWwuZWFjaC5jYWxsKHRoaXMsIHRoaXMucmVxdWVzdC5oZWFkZXJzLCBmdW5jdGlvbiAoa2V5LCBpdGVtKSB7XG4gICAgICBoZWFkZXJzLnB1c2goW2tleSwgaXRlbV0pO1xuICAgIH0pO1xuICAgIGhlYWRlcnMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGFbMF0udG9Mb3dlckNhc2UoKSA8IGJbMF0udG9Mb3dlckNhc2UoKSA/IC0xIDogMTtcbiAgICB9KTtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICBBV1MudXRpbC5hcnJheUVhY2guY2FsbCh0aGlzLCBoZWFkZXJzLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGtleSA9IGl0ZW1bMF0udG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmICh0aGlzLmlzU2lnbmFibGVIZWFkZXIoa2V5KSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpdGVtWzFdO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBBV1MudXRpbC5lcnJvcihuZXcgRXJyb3IoJ0hlYWRlciAnICsga2V5ICsgJyBjb250YWlucyBpbnZhbGlkIHZhbHVlJyksIHtcbiAgICAgICAgICAgIGNvZGU6ICdJbnZhbGlkSGVhZGVyJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goa2V5ICsgJzonICtcbiAgICAgICAgICB0aGlzLmNhbm9uaWNhbEhlYWRlclZhbHVlcyh2YWx1ZS50b1N0cmluZygpKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oJ1xcbicpO1xuICB9LFxuXG4gIGNhbm9uaWNhbEhlYWRlclZhbHVlczogZnVuY3Rpb24gY2Fub25pY2FsSGVhZGVyVmFsdWVzKHZhbHVlcykge1xuICAgIHJldHVybiB2YWx1ZXMucmVwbGFjZSgvXFxzKy9nLCAnICcpLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbiAgfSxcblxuICBzaWduZWRIZWFkZXJzOiBmdW5jdGlvbiBzaWduZWRIZWFkZXJzKCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgQVdTLnV0aWwuZWFjaC5jYWxsKHRoaXMsIHRoaXMucmVxdWVzdC5oZWFkZXJzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmICh0aGlzLmlzU2lnbmFibGVIZWFkZXIoa2V5KSkga2V5cy5wdXNoKGtleSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGtleXMuc29ydCgpLmpvaW4oJzsnKTtcbiAgfSxcblxuICBjcmVkZW50aWFsU3RyaW5nOiBmdW5jdGlvbiBjcmVkZW50aWFsU3RyaW5nKGRhdGV0aW1lKSB7XG4gICAgcmV0dXJuIHY0Q3JlZGVudGlhbHMuY3JlYXRlU2NvcGUoXG4gICAgICBkYXRldGltZS5zdWJzdHIoMCwgOCksXG4gICAgICB0aGlzLnJlcXVlc3QucmVnaW9uLFxuICAgICAgdGhpcy5zZXJ2aWNlTmFtZVxuICAgICk7XG4gIH0sXG5cbiAgaGV4RW5jb2RlZEhhc2g6IGZ1bmN0aW9uIGhhc2goc3RyaW5nKSB7XG4gICAgcmV0dXJuIEFXUy51dGlsLmNyeXB0by5zaGEyNTYoc3RyaW5nLCAnaGV4Jyk7XG4gIH0sXG5cbiAgaGV4RW5jb2RlZEJvZHlIYXNoOiBmdW5jdGlvbiBoZXhFbmNvZGVkQm9keUhhc2goKSB7XG4gICAgdmFyIHJlcXVlc3QgPSB0aGlzLnJlcXVlc3Q7XG4gICAgaWYgKHRoaXMuaXNQcmVzaWduZWQoKSAmJiB0aGlzLnNlcnZpY2VOYW1lID09PSAnczMnICYmICFyZXF1ZXN0LmJvZHkpIHtcbiAgICAgIHJldHVybiAnVU5TSUdORUQtUEFZTE9BRCc7XG4gICAgfSBlbHNlIGlmIChyZXF1ZXN0LmhlYWRlcnNbJ1gtQW16LUNvbnRlbnQtU2hhMjU2J10pIHtcbiAgICAgIHJldHVybiByZXF1ZXN0LmhlYWRlcnNbJ1gtQW16LUNvbnRlbnQtU2hhMjU2J107XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmhleEVuY29kZWRIYXNoKHRoaXMucmVxdWVzdC5ib2R5IHx8ICcnKTtcbiAgICB9XG4gIH0sXG5cbiAgdW5zaWduYWJsZUhlYWRlcnM6IFtcbiAgICAnYXV0aG9yaXphdGlvbicsXG4gICAgJ2NvbnRlbnQtdHlwZScsXG4gICAgJ2NvbnRlbnQtbGVuZ3RoJyxcbiAgICAndXNlci1hZ2VudCcsXG4gICAgZXhwaXJlc0hlYWRlcixcbiAgICAnZXhwZWN0JyxcbiAgICAneC1hbXpuLXRyYWNlLWlkJ1xuICBdLFxuXG4gIGlzU2lnbmFibGVIZWFkZXI6IGZ1bmN0aW9uIGlzU2lnbmFibGVIZWFkZXIoa2V5KSB7XG4gICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ3gtYW16LScpID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy51bnNpZ25hYmxlSGVhZGVycy5pbmRleE9mKGtleSkgPCAwO1xuICB9LFxuXG4gIGlzUHJlc2lnbmVkOiBmdW5jdGlvbiBpc1ByZXNpZ25lZCgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LmhlYWRlcnNbZXhwaXJlc0hlYWRlcl0gPyB0cnVlIDogZmFsc2U7XG4gIH1cblxufSk7XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gQVdTLlNpZ25lcnMuVjQ7XG5cbn0se1wiLi4vY29yZVwiOjE5LFwiLi92NF9jcmVkZW50aWFsc1wiOjcwfV0sNzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTtcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xudmFyIGNhY2hlZFNlY3JldCA9IHt9O1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG52YXIgY2FjaGVRdWV1ZSA9IFtdO1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG52YXIgbWF4Q2FjaGVFbnRyaWVzID0gNTA7XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbnZhciB2NElkZW50aWZpZXIgPSAnYXdzNF9yZXF1ZXN0JztcblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICpcbiAgICogQHBhcmFtIGRhdGUgW1N0cmluZ11cbiAgICogQHBhcmFtIHJlZ2lvbiBbU3RyaW5nXVxuICAgKiBAcGFyYW0gc2VydmljZU5hbWUgW1N0cmluZ11cbiAgICogQHJldHVybiBbU3RyaW5nXVxuICAgKi9cbiAgY3JlYXRlU2NvcGU6IGZ1bmN0aW9uIGNyZWF0ZVNjb3BlKGRhdGUsIHJlZ2lvbiwgc2VydmljZU5hbWUpIHtcbiAgICByZXR1cm4gW1xuICAgICAgZGF0ZS5zdWJzdHIoMCwgOCksXG4gICAgICByZWdpb24sXG4gICAgICBzZXJ2aWNlTmFtZSxcbiAgICAgIHY0SWRlbnRpZmllclxuICAgIF0uam9pbignLycpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICpcbiAgICogQHBhcmFtIGNyZWRlbnRpYWxzIFtDcmVkZW50aWFsc11cbiAgICogQHBhcmFtIGRhdGUgW1N0cmluZ11cbiAgICogQHBhcmFtIHJlZ2lvbiBbU3RyaW5nXVxuICAgKiBAcGFyYW0gc2VydmljZSBbU3RyaW5nXVxuICAgKiBAcGFyYW0gc2hvdWxkQ2FjaGUgW0Jvb2xlYW5dXG4gICAqIEByZXR1cm4gW1N0cmluZ11cbiAgICovXG4gIGdldFNpZ25pbmdLZXk6IGZ1bmN0aW9uIGdldFNpZ25pbmdLZXkoXG4gICAgY3JlZGVudGlhbHMsXG4gICAgZGF0ZSxcbiAgICByZWdpb24sXG4gICAgc2VydmljZSxcbiAgICBzaG91bGRDYWNoZVxuICApIHtcbiAgICB2YXIgY3JlZHNJZGVudGlmaWVyID0gQVdTLnV0aWwuY3J5cHRvXG4gICAgICAuaG1hYyhjcmVkZW50aWFscy5zZWNyZXRBY2Nlc3NLZXksIGNyZWRlbnRpYWxzLmFjY2Vzc0tleUlkLCAnYmFzZTY0Jyk7XG4gICAgdmFyIGNhY2hlS2V5ID0gW2NyZWRzSWRlbnRpZmllciwgZGF0ZSwgcmVnaW9uLCBzZXJ2aWNlXS5qb2luKCdfJyk7XG4gICAgc2hvdWxkQ2FjaGUgPSBzaG91bGRDYWNoZSAhPT0gZmFsc2U7XG4gICAgaWYgKHNob3VsZENhY2hlICYmIChjYWNoZUtleSBpbiBjYWNoZWRTZWNyZXQpKSB7XG4gICAgICByZXR1cm4gY2FjaGVkU2VjcmV0W2NhY2hlS2V5XTtcbiAgICB9XG5cbiAgICB2YXIga0RhdGUgPSBBV1MudXRpbC5jcnlwdG8uaG1hYyhcbiAgICAgICdBV1M0JyArIGNyZWRlbnRpYWxzLnNlY3JldEFjY2Vzc0tleSxcbiAgICAgIGRhdGUsXG4gICAgICAnYnVmZmVyJ1xuICAgICk7XG4gICAgdmFyIGtSZWdpb24gPSBBV1MudXRpbC5jcnlwdG8uaG1hYyhrRGF0ZSwgcmVnaW9uLCAnYnVmZmVyJyk7XG4gICAgdmFyIGtTZXJ2aWNlID0gQVdTLnV0aWwuY3J5cHRvLmhtYWMoa1JlZ2lvbiwgc2VydmljZSwgJ2J1ZmZlcicpO1xuXG4gICAgdmFyIHNpZ25pbmdLZXkgPSBBV1MudXRpbC5jcnlwdG8uaG1hYyhrU2VydmljZSwgdjRJZGVudGlmaWVyLCAnYnVmZmVyJyk7XG4gICAgaWYgKHNob3VsZENhY2hlKSB7XG4gICAgICBjYWNoZWRTZWNyZXRbY2FjaGVLZXldID0gc2lnbmluZ0tleTtcbiAgICAgIGNhY2hlUXVldWUucHVzaChjYWNoZUtleSk7XG4gICAgICBpZiAoY2FjaGVRdWV1ZS5sZW5ndGggPiBtYXhDYWNoZUVudHJpZXMpIHtcbiAgICAgICAgLy8gcmVtb3ZlIHRoZSBvbGRlc3QgZW50cnkgKG5vdCB0aGUgbGVhc3QgcmVjZW50bHkgdXNlZClcbiAgICAgICAgZGVsZXRlIGNhY2hlZFNlY3JldFtjYWNoZVF1ZXVlLnNoaWZ0KCldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzaWduaW5nS2V5O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICpcbiAgICogRW1wdGllcyB0aGUgZGVyaXZlZCBzaWduaW5nIGtleSBjYWNoZS4gTWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgcHVycG9zZXNcbiAgICogb25seS5cbiAgICovXG4gIGVtcHR5Q2FjaGU6IGZ1bmN0aW9uIGVtcHR5Q2FjaGUoKSB7XG4gICAgY2FjaGVkU2VjcmV0ID0ge307XG4gICAgY2FjaGVRdWV1ZSA9IFtdO1xuICB9XG59O1xuXG59LHtcIi4uL2NvcmVcIjoxOX1dLDcxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmZ1bmN0aW9uIEFjY2VwdG9yU3RhdGVNYWNoaW5lKHN0YXRlcywgc3RhdGUpIHtcbiAgdGhpcy5jdXJyZW50U3RhdGUgPSBzdGF0ZSB8fCBudWxsO1xuICB0aGlzLnN0YXRlcyA9IHN0YXRlcyB8fCB7fTtcbn1cblxuQWNjZXB0b3JTdGF0ZU1hY2hpbmUucHJvdG90eXBlLnJ1blRvID0gZnVuY3Rpb24gcnVuVG8oZmluYWxTdGF0ZSwgZG9uZSwgYmluZE9iamVjdCwgaW5wdXRFcnJvcikge1xuICBpZiAodHlwZW9mIGZpbmFsU3RhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpbnB1dEVycm9yID0gYmluZE9iamVjdDsgYmluZE9iamVjdCA9IGRvbmU7XG4gICAgZG9uZSA9IGZpbmFsU3RhdGU7IGZpbmFsU3RhdGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSBzZWxmLnN0YXRlc1tzZWxmLmN1cnJlbnRTdGF0ZV07XG4gIHN0YXRlLmZuLmNhbGwoYmluZE9iamVjdCB8fCBzZWxmLCBpbnB1dEVycm9yLCBmdW5jdGlvbihlcnIpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBpZiAoc3RhdGUuZmFpbCkgc2VsZi5jdXJyZW50U3RhdGUgPSBzdGF0ZS5mYWlsO1xuICAgICAgZWxzZSByZXR1cm4gZG9uZSA/IGRvbmUuY2FsbChiaW5kT2JqZWN0LCBlcnIpIDogbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRlLmFjY2VwdCkgc2VsZi5jdXJyZW50U3RhdGUgPSBzdGF0ZS5hY2NlcHQ7XG4gICAgICBlbHNlIHJldHVybiBkb25lID8gZG9uZS5jYWxsKGJpbmRPYmplY3QpIDogbnVsbDtcbiAgICB9XG4gICAgaWYgKHNlbGYuY3VycmVudFN0YXRlID09PSBmaW5hbFN0YXRlKSB7XG4gICAgICByZXR1cm4gZG9uZSA/IGRvbmUuY2FsbChiaW5kT2JqZWN0LCBlcnIpIDogbnVsbDtcbiAgICB9XG5cbiAgICBzZWxmLnJ1blRvKGZpbmFsU3RhdGUsIGRvbmUsIGJpbmRPYmplY3QsIGVycik7XG4gIH0pO1xufTtcblxuQWNjZXB0b3JTdGF0ZU1hY2hpbmUucHJvdG90eXBlLmFkZFN0YXRlID0gZnVuY3Rpb24gYWRkU3RhdGUobmFtZSwgYWNjZXB0U3RhdGUsIGZhaWxTdGF0ZSwgZm4pIHtcbiAgaWYgKHR5cGVvZiBhY2NlcHRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZuID0gYWNjZXB0U3RhdGU7IGFjY2VwdFN0YXRlID0gbnVsbDsgZmFpbFN0YXRlID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZmFpbFN0YXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm4gPSBmYWlsU3RhdGU7IGZhaWxTdGF0ZSA9IG51bGw7XG4gIH1cblxuICBpZiAoIXRoaXMuY3VycmVudFN0YXRlKSB0aGlzLmN1cnJlbnRTdGF0ZSA9IG5hbWU7XG4gIHRoaXMuc3RhdGVzW25hbWVdID0geyBhY2NlcHQ6IGFjY2VwdFN0YXRlLCBmYWlsOiBmYWlsU3RhdGUsIGZuOiBmbiB9O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gQWNjZXB0b3JTdGF0ZU1hY2hpbmU7XG5cbn0se31dLDcyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxzZXRJbW1lZGlhdGUpe1xuLyogZXNsaW50IGd1YXJkLWZvci1pbjowICovXG52YXIgQVdTO1xuXG4vKipcbiAqIEEgc2V0IG9mIHV0aWxpdHkgbWV0aG9kcyBmb3IgdXNlIHdpdGggdGhlIEFXUyBTREsuXG4gKlxuICogQCFhdHRyaWJ1dGUgYWJvcnRcbiAqICAgUmV0dXJuIHRoaXMgdmFsdWUgZnJvbSBhbiBpdGVyYXRvciBmdW5jdGlvbiB7ZWFjaH0gb3Ige2FycmF5RWFjaH1cbiAqICAgdG8gYnJlYWsgb3V0IG9mIHRoZSBpdGVyYXRpb24uXG4gKiAgIEBleGFtcGxlIEJyZWFraW5nIG91dCBvZiBhbiBpdGVyYXRvciBmdW5jdGlvblxuICogICAgIEFXUy51dGlsLmVhY2goe2E6IDEsIGI6IDIsIGM6IDN9LCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gKiAgICAgICBpZiAoa2V5ID09ICdiJykgcmV0dXJuIEFXUy51dGlsLmFib3J0O1xuICogICAgIH0pO1xuICogICBAc2VlIGVhY2hcbiAqICAgQHNlZSBhcnJheUVhY2hcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG52YXIgdXRpbCA9IHtcbiAgZW52aXJvbm1lbnQ6ICdub2RlanMnLFxuICBlbmdpbmU6IGZ1bmN0aW9uIGVuZ2luZSgpIHtcbiAgICBpZiAodXRpbC5pc0Jyb3dzZXIoKSAmJiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBlbmdpbmUgPSBwcm9jZXNzLnBsYXRmb3JtICsgJy8nICsgcHJvY2Vzcy52ZXJzaW9uO1xuICAgICAgaWYgKHByb2Nlc3MuZW52LkFXU19FWEVDVVRJT05fRU5WKSB7XG4gICAgICAgIGVuZ2luZSArPSAnIGV4ZWMtZW52LycgKyBwcm9jZXNzLmVudi5BV1NfRVhFQ1VUSU9OX0VOVjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbmdpbmU7XG4gICAgfVxuICB9LFxuXG4gIHVzZXJBZ2VudDogZnVuY3Rpb24gdXNlckFnZW50KCkge1xuICAgIHZhciBuYW1lID0gdXRpbC5lbnZpcm9ubWVudDtcbiAgICB2YXIgYWdlbnQgPSAnYXdzLXNkay0nICsgbmFtZSArICcvJyArIHJlcXVpcmUoJy4vY29yZScpLlZFUlNJT047XG4gICAgaWYgKG5hbWUgPT09ICdub2RlanMnKSBhZ2VudCArPSAnICcgKyB1dGlsLmVuZ2luZSgpO1xuICAgIHJldHVybiBhZ2VudDtcbiAgfSxcblxuICB1cmlFc2NhcGU6IGZ1bmN0aW9uIHVyaUVzY2FwZShzdHJpbmcpIHtcbiAgICB2YXIgb3V0cHV0ID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZyk7XG4gICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoL1teQS1aYS16MC05Xy5+XFwtJV0rL2csIGVzY2FwZSk7XG5cbiAgICAvLyBBV1MgcGVyY2VudC1lbmNvZGVzIHNvbWUgZXh0cmEgbm9uLXN0YW5kYXJkIGNoYXJhY3RlcnMgaW4gYSBVUklcbiAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgvWypdL2csIGZ1bmN0aW9uKGNoKSB7XG4gICAgICByZXR1cm4gJyUnICsgY2guY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sXG5cbiAgdXJpRXNjYXBlUGF0aDogZnVuY3Rpb24gdXJpRXNjYXBlUGF0aChzdHJpbmcpIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICB1dGlsLmFycmF5RWFjaChzdHJpbmcuc3BsaXQoJy8nKSwgZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgIHBhcnRzLnB1c2godXRpbC51cmlFc2NhcGUocGFydCkpO1xuICAgIH0pO1xuICAgIHJldHVybiBwYXJ0cy5qb2luKCcvJyk7XG4gIH0sXG5cbiAgdXJsUGFyc2U6IGZ1bmN0aW9uIHVybFBhcnNlKHVybCkge1xuICAgIHJldHVybiB1dGlsLnVybC5wYXJzZSh1cmwpO1xuICB9LFxuXG4gIHVybEZvcm1hdDogZnVuY3Rpb24gdXJsRm9ybWF0KHVybCkge1xuICAgIHJldHVybiB1dGlsLnVybC5mb3JtYXQodXJsKTtcbiAgfSxcblxuICBxdWVyeVN0cmluZ1BhcnNlOiBmdW5jdGlvbiBxdWVyeVN0cmluZ1BhcnNlKHFzKSB7XG4gICAgcmV0dXJuIHV0aWwucXVlcnlzdHJpbmcucGFyc2UocXMpO1xuICB9LFxuXG4gIHF1ZXJ5UGFyYW1zVG9TdHJpbmc6IGZ1bmN0aW9uIHF1ZXJ5UGFyYW1zVG9TdHJpbmcocGFyYW1zKSB7XG4gICAgdmFyIGl0ZW1zID0gW107XG4gICAgdmFyIGVzY2FwZSA9IHV0aWwudXJpRXNjYXBlO1xuICAgIHZhciBzb3J0ZWRLZXlzID0gT2JqZWN0LmtleXMocGFyYW1zKS5zb3J0KCk7XG5cbiAgICB1dGlsLmFycmF5RWFjaChzb3J0ZWRLZXlzLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgdmFsdWUgPSBwYXJhbXNbbmFtZV07XG4gICAgICB2YXIgZW5hbWUgPSBlc2NhcGUobmFtZSk7XG4gICAgICB2YXIgcmVzdWx0ID0gZW5hbWUgKyAnPSc7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIHZhbHMgPSBbXTtcbiAgICAgICAgdXRpbC5hcnJheUVhY2godmFsdWUsIGZ1bmN0aW9uKGl0ZW0pIHsgdmFscy5wdXNoKGVzY2FwZShpdGVtKSk7IH0pO1xuICAgICAgICByZXN1bHQgPSBlbmFtZSArICc9JyArIHZhbHMuc29ydCgpLmpvaW4oJyYnICsgZW5hbWUgKyAnPScpO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgIHJlc3VsdCA9IGVuYW1lICsgJz0nICsgZXNjYXBlKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGl0ZW1zLnB1c2gocmVzdWx0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBpdGVtcy5qb2luKCcmJyk7XG4gIH0sXG5cbiAgcmVhZEZpbGVTeW5jOiBmdW5jdGlvbiByZWFkRmlsZVN5bmMocGF0aCkge1xuICAgIGlmICh1dGlsLmlzQnJvd3NlcigpKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gcmVxdWlyZSgnZnMnKS5yZWFkRmlsZVN5bmMocGF0aCwgJ3V0Zi04Jyk7XG4gIH0sXG5cbiAgYmFzZTY0OiB7XG4gICAgZW5jb2RlOiBmdW5jdGlvbiBlbmNvZGU2NChzdHJpbmcpIHtcbiAgICAgIGlmICh0eXBlb2Ygc3RyaW5nID09PSAnbnVtYmVyJykge1xuICAgICAgICB0aHJvdyB1dGlsLmVycm9yKG5ldyBFcnJvcignQ2Fubm90IGJhc2U2NCBlbmNvZGUgbnVtYmVyICcgKyBzdHJpbmcpKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJpbmcgPT09IG51bGwgfHwgdHlwZW9mIHN0cmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBidWYgPSB1dGlsLmJ1ZmZlci50b0J1ZmZlcihzdHJpbmcpO1xuICAgICAgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgfSxcblxuICAgIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlNjQoc3RyaW5nKSB7XG4gICAgICBpZiAodHlwZW9mIHN0cmluZyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgdXRpbC5lcnJvcihuZXcgRXJyb3IoJ0Nhbm5vdCBiYXNlNjQgZGVjb2RlIG51bWJlciAnICsgc3RyaW5nKSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyaW5nID09PSBudWxsIHx8IHR5cGVvZiBzdHJpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXRpbC5idWZmZXIudG9CdWZmZXIoc3RyaW5nLCAnYmFzZTY0Jyk7XG4gICAgfVxuXG4gIH0sXG5cbiAgYnVmZmVyOiB7XG4gICAgLyoqXG4gICAgICogQnVmZmVyIGNvbnN0cnVjdG9yIGZvciBOb2RlIGJ1ZmZlciBhbmQgYnVmZmVyIHBvbGx5ZmlsbFxuICAgICAqL1xuICAgIHRvQnVmZmVyOiBmdW5jdGlvbihkYXRhLCBlbmNvZGluZykge1xuICAgICAgcmV0dXJuICh0eXBlb2YgdXRpbC5CdWZmZXIuZnJvbSA9PT0gJ2Z1bmN0aW9uJyAmJiB1dGlsLkJ1ZmZlci5mcm9tICE9PSBVaW50OEFycmF5LmZyb20pID9cbiAgICAgICAgdXRpbC5CdWZmZXIuZnJvbShkYXRhLCBlbmNvZGluZykgOiBuZXcgdXRpbC5CdWZmZXIoZGF0YSwgZW5jb2RpbmcpO1xuICAgIH0sXG5cbiAgICBhbGxvYzogZnVuY3Rpb24oc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaXplIHBhc3NlZCB0byBhbGxvYyBtdXN0IGJlIGEgbnVtYmVyLicpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB1dGlsLkJ1ZmZlci5hbGxvYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdXRpbC5CdWZmZXIuYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGJ1ZiA9IG5ldyB1dGlsLkJ1ZmZlcihzaXplKTtcbiAgICAgICAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgYnVmLmZpbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBidWYuZmlsbChmaWxsLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZW5jb2RpbmcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHRvU3RyZWFtOiBmdW5jdGlvbiB0b1N0cmVhbShidWZmZXIpIHtcbiAgICAgIGlmICghdXRpbC5CdWZmZXIuaXNCdWZmZXIoYnVmZmVyKSkgYnVmZmVyID0gIHV0aWwuYnVmZmVyLnRvQnVmZmVyKGJ1ZmZlcik7XG5cbiAgICAgIHZhciByZWFkYWJsZSA9IG5ldyAodXRpbC5zdHJlYW0uUmVhZGFibGUpKCk7XG4gICAgICB2YXIgcG9zID0gMDtcbiAgICAgIHJlYWRhYmxlLl9yZWFkID0gZnVuY3Rpb24oc2l6ZSkge1xuICAgICAgICBpZiAocG9zID49IGJ1ZmZlci5sZW5ndGgpIHJldHVybiByZWFkYWJsZS5wdXNoKG51bGwpO1xuXG4gICAgICAgIHZhciBlbmQgPSBwb3MgKyBzaXplO1xuICAgICAgICBpZiAoZW5kID4gYnVmZmVyLmxlbmd0aCkgZW5kID0gYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgcmVhZGFibGUucHVzaChidWZmZXIuc2xpY2UocG9zLCBlbmQpKTtcbiAgICAgICAgcG9zID0gZW5kO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHJlYWRhYmxlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb25jYXRlbmF0ZXMgYSBsaXN0IG9mIEJ1ZmZlciBvYmplY3RzLlxuICAgICAqL1xuICAgIGNvbmNhdDogZnVuY3Rpb24oYnVmZmVycykge1xuICAgICAgdmFyIGxlbmd0aCA9IDAsXG4gICAgICAgICAgb2Zmc2V0ID0gMCxcbiAgICAgICAgICBidWZmZXIgPSBudWxsLCBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgYnVmZmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZW5ndGggKz0gYnVmZmVyc1tpXS5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIGJ1ZmZlciA9IHV0aWwuYnVmZmVyLmFsbG9jKGxlbmd0aCk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBidWZmZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJ1ZmZlcnNbaV0uY29weShidWZmZXIsIG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSBidWZmZXJzW2ldLmxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG4gIH0sXG5cbiAgc3RyaW5nOiB7XG4gICAgYnl0ZUxlbmd0aDogZnVuY3Rpb24gYnl0ZUxlbmd0aChzdHJpbmcpIHtcbiAgICAgIGlmIChzdHJpbmcgPT09IG51bGwgfHwgc3RyaW5nID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICAgICAgaWYgKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnKSBzdHJpbmcgPSB1dGlsLmJ1ZmZlci50b0J1ZmZlcihzdHJpbmcpO1xuXG4gICAgICBpZiAodHlwZW9mIHN0cmluZy5ieXRlTGVuZ3RoID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGg7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHJpbmcubGVuZ3RoID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLmxlbmd0aDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0cmluZy5zaXplID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnNpemU7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHJpbmcucGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoJ2ZzJykubHN0YXRTeW5jKHN0cmluZy5wYXRoKS5zaXplO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgdXRpbC5lcnJvcihuZXcgRXJyb3IoJ0Nhbm5vdCBkZXRlcm1pbmUgbGVuZ3RoIG9mICcgKyBzdHJpbmcpLFxuICAgICAgICAgIHsgb2JqZWN0OiBzdHJpbmcgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHVwcGVyRmlyc3Q6IGZ1bmN0aW9uIHVwcGVyRmlyc3Qoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nWzBdLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc3Vic3RyKDEpO1xuICAgIH0sXG5cbiAgICBsb3dlckZpcnN0OiBmdW5jdGlvbiBsb3dlckZpcnN0KHN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZ1swXS50b0xvd2VyQ2FzZSgpICsgc3RyaW5nLnN1YnN0cigxKTtcbiAgICB9XG4gIH0sXG5cbiAgaW5pOiB7XG4gICAgcGFyc2U6IGZ1bmN0aW9uIHN0cmluZyhpbmkpIHtcbiAgICAgIHZhciBjdXJyZW50U2VjdGlvbiwgbWFwID0ge307XG4gICAgICB1dGlsLmFycmF5RWFjaChpbmkuc3BsaXQoL1xccj9cXG4vKSwgZnVuY3Rpb24obGluZSkge1xuICAgICAgICBsaW5lID0gbGluZS5zcGxpdCgvKF58XFxzKVs7I10vKVswXTsgLy8gcmVtb3ZlIGNvbW1lbnRzXG4gICAgICAgIHZhciBzZWN0aW9uID0gbGluZS5tYXRjaCgvXlxccypcXFsoW15cXFtcXF1dKylcXF1cXHMqJC8pO1xuICAgICAgICBpZiAoc2VjdGlvbikge1xuICAgICAgICAgIGN1cnJlbnRTZWN0aW9uID0gc2VjdGlvblsxXTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50U2VjdGlvbikge1xuICAgICAgICAgIHZhciBpdGVtID0gbGluZS5tYXRjaCgvXlxccyooLis/KVxccyo9XFxzKiguKz8pXFxzKiQvKTtcbiAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgbWFwW2N1cnJlbnRTZWN0aW9uXSA9IG1hcFtjdXJyZW50U2VjdGlvbl0gfHwge307XG4gICAgICAgICAgICBtYXBbY3VycmVudFNlY3Rpb25dW2l0ZW1bMV1dID0gaXRlbVsyXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gbWFwO1xuICAgIH1cbiAgfSxcblxuICBmbjoge1xuICAgIG5vb3A6IGZ1bmN0aW9uKCkge30sXG4gICAgY2FsbGJhY2s6IGZ1bmN0aW9uIChlcnIpIHsgaWYgKGVycikgdGhyb3cgZXJyOyB9LFxuXG4gICAgLyoqXG4gICAgICogVHVybiBhIHN5bmNocm9ub3VzIGZ1bmN0aW9uIGludG8gYXMgXCJhc3luY1wiIGZ1bmN0aW9uIGJ5IG1ha2luZyBpdCBjYWxsXG4gICAgICogYSBjYWxsYmFjay4gVGhlIHVuZGVybHlpbmcgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYWxsIGJ1dCB0aGUgbGFzdCBhcmd1bWVudCxcbiAgICAgKiB3aGljaCBpcyB0cmVhdGVkIGFzIHRoZSBjYWxsYmFjay4gVGhlIGNhbGxiYWNrIGlzIHBhc3NlZCBwYXNzZWQgYSBmaXJzdCBhcmd1bWVudFxuICAgICAqIG9mIG51bGwgb24gc3VjY2VzcyB0byBtaW1pY2sgc3RhbmRhcmQgbm9kZSBjYWxsYmFja3MuXG4gICAgICovXG4gICAgbWFrZUFzeW5jOiBmdW5jdGlvbiBtYWtlQXN5bmMoZm4sIGV4cGVjdGVkQXJncykge1xuICAgICAgaWYgKGV4cGVjdGVkQXJncyAmJiBleHBlY3RlZEFyZ3MgPD0gZm4ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3MucG9wKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgY2FsbGJhY2socmVzdWx0KTtcbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEYXRlIGFuZCB0aW1lIHV0aWxpdHkgZnVuY3Rpb25zLlxuICAgKi9cbiAgZGF0ZToge1xuXG4gICAgLyoqXG4gICAgICogQHJldHVybiBbRGF0ZV0gdGhlIGN1cnJlbnQgSmF2YVNjcmlwdCBkYXRlIG9iamVjdC4gU2luY2UgYWxsXG4gICAgICogICBBV1Mgc2VydmljZXMgcmVseSBvbiB0aGlzIGRhdGUgb2JqZWN0LCB5b3UgY2FuIG92ZXJyaWRlXG4gICAgICogICB0aGlzIGZ1bmN0aW9uIHRvIHByb3ZpZGUgYSBzcGVjaWFsIHRpbWUgdmFsdWUgdG8gQVdTIHNlcnZpY2VcbiAgICAgKiAgIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIGdldERhdGU6IGZ1bmN0aW9uIGdldERhdGUoKSB7XG4gICAgICBpZiAoIUFXUykgQVdTID0gcmVxdWlyZSgnLi9jb3JlJyk7XG4gICAgICBpZiAoQVdTLmNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldCkgeyAvLyB1c2Ugb2Zmc2V0IHdoZW4gbm9uLXplcm9cbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgQVdTLmNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiBbU3RyaW5nXSB0aGUgZGF0ZSBpbiBJU08tODYwMSBmb3JtYXRcbiAgICAgKi9cbiAgICBpc284NjAxOiBmdW5jdGlvbiBpc284NjAxKGRhdGUpIHtcbiAgICAgIGlmIChkYXRlID09PSB1bmRlZmluZWQpIHsgZGF0ZSA9IHV0aWwuZGF0ZS5nZXREYXRlKCk7IH1cbiAgICAgIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgvXFwuXFxkezN9WiQvLCAnWicpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIFtTdHJpbmddIHRoZSBkYXRlIGluIFJGQyA4MjIgZm9ybWF0XG4gICAgICovXG4gICAgcmZjODIyOiBmdW5jdGlvbiByZmM4MjIoZGF0ZSkge1xuICAgICAgaWYgKGRhdGUgPT09IHVuZGVmaW5lZCkgeyBkYXRlID0gdXRpbC5kYXRlLmdldERhdGUoKTsgfVxuICAgICAgcmV0dXJuIGRhdGUudG9VVENTdHJpbmcoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiBbSW50ZWdlcl0gdGhlIFVOSVggdGltZXN0YW1wIHZhbHVlIGZvciB0aGUgY3VycmVudCB0aW1lXG4gICAgICovXG4gICAgdW5peFRpbWVzdGFtcDogZnVuY3Rpb24gdW5peFRpbWVzdGFtcChkYXRlKSB7XG4gICAgICBpZiAoZGF0ZSA9PT0gdW5kZWZpbmVkKSB7IGRhdGUgPSB1dGlsLmRhdGUuZ2V0RGF0ZSgpOyB9XG4gICAgICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLyAxMDAwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gW1N0cmluZyxudW1iZXIsRGF0ZV0gZGF0ZVxuICAgICAqIEByZXR1cm4gW0RhdGVdXG4gICAgICovXG4gICAgZnJvbTogZnVuY3Rpb24gZm9ybWF0KGRhdGUpIHtcbiAgICAgIGlmICh0eXBlb2YgZGF0ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUgKiAxMDAwKTsgLy8gdW5peCB0aW1lc3RhbXBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBEYXRlIG9yIGRhdGUtbGlrZSB2YWx1ZSwgdGhpcyBmdW5jdGlvbiBmb3JtYXRzIHRoZVxuICAgICAqIGRhdGUgaW50byBhIHN0cmluZyBvZiB0aGUgcmVxdWVzdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSBbU3RyaW5nLG51bWJlcixEYXRlXSBkYXRlXG4gICAgICogQHBhcmFtIFtTdHJpbmddIGZvcm1hdHRlciBWYWxpZCBmb3JtYXRzIGFyZTpcbiAgICAgIyAgICogJ2lzbzg2MDEnXG4gICAgICMgICAqICdyZmM4MjInXG4gICAgICMgICAqICd1bml4VGltZXN0YW1wJ1xuICAgICAqIEByZXR1cm4gW1N0cmluZ11cbiAgICAgKi9cbiAgICBmb3JtYXQ6IGZ1bmN0aW9uIGZvcm1hdChkYXRlLCBmb3JtYXR0ZXIpIHtcbiAgICAgIGlmICghZm9ybWF0dGVyKSBmb3JtYXR0ZXIgPSAnaXNvODYwMSc7XG4gICAgICByZXR1cm4gdXRpbC5kYXRlW2Zvcm1hdHRlcl0odXRpbC5kYXRlLmZyb20oZGF0ZSkpO1xuICAgIH0sXG5cbiAgICBwYXJzZVRpbWVzdGFtcDogZnVuY3Rpb24gcGFyc2VUaW1lc3RhbXAodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7IC8vIHVuaXggdGltZXN0YW1wIChudW1iZXIpXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZSAqIDEwMDApO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZS5tYXRjaCgvXlxcZCskLykpIHsgLy8gdW5peCB0aW1lc3RhbXBcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlICogMTAwMCk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlLm1hdGNoKC9eXFxkezR9LykpIHsgLy8gaXNvODYwMVxuICAgICAgICByZXR1cm4gbmV3IERhdGUodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZS5tYXRjaCgvXlxcd3szfSwvKSkgeyAvLyByZmM4MjJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IHV0aWwuZXJyb3IoXG4gICAgICAgICAgbmV3IEVycm9yKCd1bmhhbmRsZWQgdGltZXN0YW1wIGZvcm1hdDogJyArIHZhbHVlKSxcbiAgICAgICAgICB7Y29kZTogJ1RpbWVzdGFtcFBhcnNlckVycm9yJ30pO1xuICAgICAgfVxuICAgIH1cblxuICB9LFxuXG4gIGNyeXB0bzoge1xuICAgIGNyYzMyVGFibGU6IFtcbiAgICAgMHgwMDAwMDAwMCwgMHg3NzA3MzA5NiwgMHhFRTBFNjEyQywgMHg5OTA5NTFCQSwgMHgwNzZEQzQxOSxcbiAgICAgMHg3MDZBRjQ4RiwgMHhFOTYzQTUzNSwgMHg5RTY0OTVBMywgMHgwRURCODgzMiwgMHg3OURDQjhBNCxcbiAgICAgMHhFMEQ1RTkxRSwgMHg5N0QyRDk4OCwgMHgwOUI2NEMyQiwgMHg3RUIxN0NCRCwgMHhFN0I4MkQwNyxcbiAgICAgMHg5MEJGMUQ5MSwgMHgxREI3MTA2NCwgMHg2QUIwMjBGMiwgMHhGM0I5NzE0OCwgMHg4NEJFNDFERSxcbiAgICAgMHgxQURBRDQ3RCwgMHg2RERERTRFQiwgMHhGNEQ0QjU1MSwgMHg4M0QzODVDNywgMHgxMzZDOTg1NixcbiAgICAgMHg2NDZCQThDMCwgMHhGRDYyRjk3QSwgMHg4QTY1QzlFQywgMHgxNDAxNUM0RiwgMHg2MzA2NkNEOSxcbiAgICAgMHhGQTBGM0Q2MywgMHg4RDA4MERGNSwgMHgzQjZFMjBDOCwgMHg0QzY5MTA1RSwgMHhENTYwNDFFNCxcbiAgICAgMHhBMjY3NzE3MiwgMHgzQzAzRTREMSwgMHg0QjA0RDQ0NywgMHhEMjBEODVGRCwgMHhBNTBBQjU2QixcbiAgICAgMHgzNUI1QThGQSwgMHg0MkIyOTg2QywgMHhEQkJCQzlENiwgMHhBQ0JDRjk0MCwgMHgzMkQ4NkNFMyxcbiAgICAgMHg0NURGNUM3NSwgMHhEQ0Q2MERDRiwgMHhBQkQxM0Q1OSwgMHgyNkQ5MzBBQywgMHg1MURFMDAzQSxcbiAgICAgMHhDOEQ3NTE4MCwgMHhCRkQwNjExNiwgMHgyMUI0RjRCNSwgMHg1NkIzQzQyMywgMHhDRkJBOTU5OSxcbiAgICAgMHhCOEJEQTUwRiwgMHgyODAyQjg5RSwgMHg1RjA1ODgwOCwgMHhDNjBDRDlCMiwgMHhCMTBCRTkyNCxcbiAgICAgMHgyRjZGN0M4NywgMHg1ODY4NEMxMSwgMHhDMTYxMURBQiwgMHhCNjY2MkQzRCwgMHg3NkRDNDE5MCxcbiAgICAgMHgwMURCNzEwNiwgMHg5OEQyMjBCQywgMHhFRkQ1MTAyQSwgMHg3MUIxODU4OSwgMHgwNkI2QjUxRixcbiAgICAgMHg5RkJGRTRBNSwgMHhFOEI4RDQzMywgMHg3ODA3QzlBMiwgMHgwRjAwRjkzNCwgMHg5NjA5QTg4RSxcbiAgICAgMHhFMTBFOTgxOCwgMHg3RjZBMERCQiwgMHgwODZEM0QyRCwgMHg5MTY0NkM5NywgMHhFNjYzNUMwMSxcbiAgICAgMHg2QjZCNTFGNCwgMHgxQzZDNjE2MiwgMHg4NTY1MzBEOCwgMHhGMjYyMDA0RSwgMHg2QzA2OTVFRCxcbiAgICAgMHgxQjAxQTU3QiwgMHg4MjA4RjRDMSwgMHhGNTBGQzQ1NywgMHg2NUIwRDlDNiwgMHgxMkI3RTk1MCxcbiAgICAgMHg4QkJFQjhFQSwgMHhGQ0I5ODg3QywgMHg2MkREMURERiwgMHgxNURBMkQ0OSwgMHg4Q0QzN0NGMyxcbiAgICAgMHhGQkQ0NEM2NSwgMHg0REIyNjE1OCwgMHgzQUI1NTFDRSwgMHhBM0JDMDA3NCwgMHhENEJCMzBFMixcbiAgICAgMHg0QURGQTU0MSwgMHgzREQ4OTVENywgMHhBNEQxQzQ2RCwgMHhEM0Q2RjRGQiwgMHg0MzY5RTk2QSxcbiAgICAgMHgzNDZFRDlGQywgMHhBRDY3ODg0NiwgMHhEQTYwQjhEMCwgMHg0NDA0MkQ3MywgMHgzMzAzMURFNSxcbiAgICAgMHhBQTBBNEM1RiwgMHhERDBEN0NDOSwgMHg1MDA1NzEzQywgMHgyNzAyNDFBQSwgMHhCRTBCMTAxMCxcbiAgICAgMHhDOTBDMjA4NiwgMHg1NzY4QjUyNSwgMHgyMDZGODVCMywgMHhCOTY2RDQwOSwgMHhDRTYxRTQ5RixcbiAgICAgMHg1RURFRjkwRSwgMHgyOUQ5Qzk5OCwgMHhCMEQwOTgyMiwgMHhDN0Q3QThCNCwgMHg1OUIzM0QxNyxcbiAgICAgMHgyRUI0MEQ4MSwgMHhCN0JENUMzQiwgMHhDMEJBNkNBRCwgMHhFREI4ODMyMCwgMHg5QUJGQjNCNixcbiAgICAgMHgwM0I2RTIwQywgMHg3NEIxRDI5QSwgMHhFQUQ1NDczOSwgMHg5REQyNzdBRiwgMHgwNERCMjYxNSxcbiAgICAgMHg3M0RDMTY4MywgMHhFMzYzMEIxMiwgMHg5NDY0M0I4NCwgMHgwRDZENkEzRSwgMHg3QTZBNUFBOCxcbiAgICAgMHhFNDBFQ0YwQiwgMHg5MzA5RkY5RCwgMHgwQTAwQUUyNywgMHg3RDA3OUVCMSwgMHhGMDBGOTM0NCxcbiAgICAgMHg4NzA4QTNEMiwgMHgxRTAxRjI2OCwgMHg2OTA2QzJGRSwgMHhGNzYyNTc1RCwgMHg4MDY1NjdDQixcbiAgICAgMHgxOTZDMzY3MSwgMHg2RTZCMDZFNywgMHhGRUQ0MUI3NiwgMHg4OUQzMkJFMCwgMHgxMERBN0E1QSxcbiAgICAgMHg2N0RENEFDQywgMHhGOUI5REY2RiwgMHg4RUJFRUZGOSwgMHgxN0I3QkU0MywgMHg2MEIwOEVENSxcbiAgICAgMHhENkQ2QTNFOCwgMHhBMUQxOTM3RSwgMHgzOEQ4QzJDNCwgMHg0RkRGRjI1MiwgMHhEMUJCNjdGMSxcbiAgICAgMHhBNkJDNTc2NywgMHgzRkI1MDZERCwgMHg0OEIyMzY0QiwgMHhEODBEMkJEQSwgMHhBRjBBMUI0QyxcbiAgICAgMHgzNjAzNEFGNiwgMHg0MTA0N0E2MCwgMHhERjYwRUZDMywgMHhBODY3REY1NSwgMHgzMTZFOEVFRixcbiAgICAgMHg0NjY5QkU3OSwgMHhDQjYxQjM4QywgMHhCQzY2ODMxQSwgMHgyNTZGRDJBMCwgMHg1MjY4RTIzNixcbiAgICAgMHhDQzBDNzc5NSwgMHhCQjBCNDcwMywgMHgyMjAyMTZCOSwgMHg1NTA1MjYyRiwgMHhDNUJBM0JCRSxcbiAgICAgMHhCMkJEMEIyOCwgMHgyQkI0NUE5MiwgMHg1Q0IzNkEwNCwgMHhDMkQ3RkZBNywgMHhCNUQwQ0YzMSxcbiAgICAgMHgyQ0Q5OUU4QiwgMHg1QkRFQUUxRCwgMHg5QjY0QzJCMCwgMHhFQzYzRjIyNiwgMHg3NTZBQTM5QyxcbiAgICAgMHgwMjZEOTMwQSwgMHg5QzA5MDZBOSwgMHhFQjBFMzYzRiwgMHg3MjA3Njc4NSwgMHgwNTAwNTcxMyxcbiAgICAgMHg5NUJGNEE4MiwgMHhFMkI4N0ExNCwgMHg3QkIxMkJBRSwgMHgwQ0I2MUIzOCwgMHg5MkQyOEU5QixcbiAgICAgMHhFNUQ1QkUwRCwgMHg3Q0RDRUZCNywgMHgwQkRCREYyMSwgMHg4NkQzRDJENCwgMHhGMUQ0RTI0MixcbiAgICAgMHg2OEREQjNGOCwgMHgxRkRBODM2RSwgMHg4MUJFMTZDRCwgMHhGNkI5MjY1QiwgMHg2RkIwNzdFMSxcbiAgICAgMHgxOEI3NDc3NywgMHg4ODA4NUFFNiwgMHhGRjBGNkE3MCwgMHg2NjA2M0JDQSwgMHgxMTAxMEI1QyxcbiAgICAgMHg4RjY1OUVGRiwgMHhGODYyQUU2OSwgMHg2MTZCRkZEMywgMHgxNjZDQ0Y0NSwgMHhBMDBBRTI3OCxcbiAgICAgMHhENzBERDJFRSwgMHg0RTA0ODM1NCwgMHgzOTAzQjNDMiwgMHhBNzY3MjY2MSwgMHhEMDYwMTZGNyxcbiAgICAgMHg0OTY5NDc0RCwgMHgzRTZFNzdEQiwgMHhBRUQxNkE0QSwgMHhEOUQ2NUFEQywgMHg0MERGMEI2NixcbiAgICAgMHgzN0Q4M0JGMCwgMHhBOUJDQUU1MywgMHhERUJCOUVDNSwgMHg0N0IyQ0Y3RiwgMHgzMEI1RkZFOSxcbiAgICAgMHhCREJERjIxQywgMHhDQUJBQzI4QSwgMHg1M0IzOTMzMCwgMHgyNEI0QTNBNiwgMHhCQUQwMzYwNSxcbiAgICAgMHhDREQ3MDY5MywgMHg1NERFNTcyOSwgMHgyM0Q5NjdCRiwgMHhCMzY2N0EyRSwgMHhDNDYxNEFCOCxcbiAgICAgMHg1RDY4MUIwMiwgMHgyQTZGMkI5NCwgMHhCNDBCQkUzNywgMHhDMzBDOEVBMSwgMHg1QTA1REYxQixcbiAgICAgMHgyRDAyRUY4RF0sXG5cbiAgICBjcmMzMjogZnVuY3Rpb24gY3JjMzIoZGF0YSkge1xuICAgICAgdmFyIHRibCA9IHV0aWwuY3J5cHRvLmNyYzMyVGFibGU7XG4gICAgICB2YXIgY3JjID0gMCBeIC0xO1xuXG4gICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGRhdGEgPSB1dGlsLmJ1ZmZlci50b0J1ZmZlcihkYXRhKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjb2RlID0gZGF0YS5yZWFkVUludDgoaSk7XG4gICAgICAgIGNyYyA9IChjcmMgPj4+IDgpIF4gdGJsWyhjcmMgXiBjb2RlKSAmIDB4RkZdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChjcmMgXiAtMSkgPj4+IDA7XG4gICAgfSxcblxuICAgIGhtYWM6IGZ1bmN0aW9uIGhtYWMoa2V5LCBzdHJpbmcsIGRpZ2VzdCwgZm4pIHtcbiAgICAgIGlmICghZGlnZXN0KSBkaWdlc3QgPSAnYmluYXJ5JztcbiAgICAgIGlmIChkaWdlc3QgPT09ICdidWZmZXInKSB7IGRpZ2VzdCA9IHVuZGVmaW5lZDsgfVxuICAgICAgaWYgKCFmbikgZm4gPSAnc2hhMjU2JztcbiAgICAgIGlmICh0eXBlb2Ygc3RyaW5nID09PSAnc3RyaW5nJykgc3RyaW5nID0gdXRpbC5idWZmZXIudG9CdWZmZXIoc3RyaW5nKTtcbiAgICAgIHJldHVybiB1dGlsLmNyeXB0by5saWIuY3JlYXRlSG1hYyhmbiwga2V5KS51cGRhdGUoc3RyaW5nKS5kaWdlc3QoZGlnZXN0KTtcbiAgICB9LFxuXG4gICAgbWQ1OiBmdW5jdGlvbiBtZDUoZGF0YSwgZGlnZXN0LCBjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHV0aWwuY3J5cHRvLmhhc2goJ21kNScsIGRhdGEsIGRpZ2VzdCwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICBzaGEyNTY6IGZ1bmN0aW9uIHNoYTI1NihkYXRhLCBkaWdlc3QsIGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdXRpbC5jcnlwdG8uaGFzaCgnc2hhMjU2JywgZGF0YSwgZGlnZXN0LCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIGhhc2g6IGZ1bmN0aW9uKGFsZ29yaXRobSwgZGF0YSwgZGlnZXN0LCBjYWxsYmFjaykge1xuICAgICAgdmFyIGhhc2ggPSB1dGlsLmNyeXB0by5jcmVhdGVIYXNoKGFsZ29yaXRobSk7XG4gICAgICBpZiAoIWRpZ2VzdCkgeyBkaWdlc3QgPSAnYmluYXJ5JzsgfVxuICAgICAgaWYgKGRpZ2VzdCA9PT0gJ2J1ZmZlcicpIHsgZGlnZXN0ID0gdW5kZWZpbmVkOyB9XG4gICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSBkYXRhID0gdXRpbC5idWZmZXIudG9CdWZmZXIoZGF0YSk7XG4gICAgICB2YXIgc2xpY2VGbiA9IHV0aWwuYXJyYXlTbGljZUZuKGRhdGEpO1xuICAgICAgdmFyIGlzQnVmZmVyID0gdXRpbC5CdWZmZXIuaXNCdWZmZXIoZGF0YSk7XG4gICAgICAvL0lkZW50aWZ5aW5nIG9iamVjdHMgd2l0aCBhbiBBcnJheUJ1ZmZlciBhcyBidWZmZXJzXG4gICAgICBpZiAodXRpbC5pc0Jyb3dzZXIoKSAmJiB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIGRhdGEgJiYgZGF0YS5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgaXNCdWZmZXIgPSB0cnVlO1xuXG4gICAgICBpZiAoY2FsbGJhY2sgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgdHlwZW9mIGRhdGEub24gPT09ICdmdW5jdGlvbicgJiYgIWlzQnVmZmVyKSB7XG4gICAgICAgIGRhdGEub24oJ2RhdGEnLCBmdW5jdGlvbihjaHVuaykgeyBoYXNoLnVwZGF0ZShjaHVuayk7IH0pO1xuICAgICAgICBkYXRhLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycikgeyBjYWxsYmFjayhlcnIpOyB9KTtcbiAgICAgICAgZGF0YS5vbignZW5kJywgZnVuY3Rpb24oKSB7IGNhbGxiYWNrKG51bGwsIGhhc2guZGlnZXN0KGRpZ2VzdCkpOyB9KTtcbiAgICAgIH0gZWxzZSBpZiAoY2FsbGJhY2sgJiYgc2xpY2VGbiAmJiAhaXNCdWZmZXIgJiZcbiAgICAgICAgICAgICAgICAgdHlwZW9mIEZpbGVSZWFkZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIHRoaXMgbWlnaHQgYmUgYSBGaWxlL0Jsb2JcbiAgICAgICAgdmFyIGluZGV4ID0gMCwgc2l6ZSA9IDEwMjQgKiA1MTI7XG4gICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignRmFpbGVkIHRvIHJlYWQgZGF0YS4nKSk7XG4gICAgICAgIH07XG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYnVmID0gbmV3IHV0aWwuQnVmZmVyKG5ldyBVaW50OEFycmF5KHJlYWRlci5yZXN1bHQpKTtcbiAgICAgICAgICBoYXNoLnVwZGF0ZShidWYpO1xuICAgICAgICAgIGluZGV4ICs9IGJ1Zi5sZW5ndGg7XG4gICAgICAgICAgcmVhZGVyLl9jb250aW51ZVJlYWRpbmcoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmVhZGVyLl9jb250aW51ZVJlYWRpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gZGF0YS5zaXplKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBoYXNoLmRpZ2VzdChkaWdlc3QpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgYmFjayA9IGluZGV4ICsgc2l6ZTtcbiAgICAgICAgICBpZiAoYmFjayA+IGRhdGEuc2l6ZSkgYmFjayA9IGRhdGEuc2l6ZTtcbiAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoc2xpY2VGbi5jYWxsKGRhdGEsIGluZGV4LCBiYWNrKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVhZGVyLl9jb250aW51ZVJlYWRpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh1dGlsLmlzQnJvd3NlcigpICYmIHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiAhaXNCdWZmZXIpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IHV0aWwuQnVmZmVyKG5ldyBVaW50OEFycmF5KGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3V0ID0gaGFzaC51cGRhdGUoZGF0YSkuZGlnZXN0KGRpZ2VzdCk7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2sobnVsbCwgb3V0KTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgdG9IZXg6IGZ1bmN0aW9uIHRvSGV4KGRhdGEpIHtcbiAgICAgIHZhciBvdXQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBvdXQucHVzaCgoJzAnICsgZGF0YS5jaGFyQ29kZUF0KGkpLnRvU3RyaW5nKDE2KSkuc3Vic3RyKC0yLCAyKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICBjcmVhdGVIYXNoOiBmdW5jdGlvbiBjcmVhdGVIYXNoKGFsZ29yaXRobSkge1xuICAgICAgcmV0dXJuIHV0aWwuY3J5cHRvLmxpYi5jcmVhdGVIYXNoKGFsZ29yaXRobSk7XG4gICAgfVxuXG4gIH0sXG5cbiAgLyoqIEAhaWdub3JlICovXG5cbiAgLyogQWJvcnQgY29uc3RhbnQgKi9cbiAgYWJvcnQ6IHt9LFxuXG4gIGVhY2g6IGZ1bmN0aW9uIGVhY2gob2JqZWN0LCBpdGVyRnVuY3Rpb24pIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICB2YXIgcmV0ID0gaXRlckZ1bmN0aW9uLmNhbGwodGhpcywga2V5LCBvYmplY3Rba2V5XSk7XG4gICAgICAgIGlmIChyZXQgPT09IHV0aWwuYWJvcnQpIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBhcnJheUVhY2g6IGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlckZ1bmN0aW9uKSB7XG4gICAgZm9yICh2YXIgaWR4IGluIGFycmF5KSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCBpZHgpKSB7XG4gICAgICAgIHZhciByZXQgPSBpdGVyRnVuY3Rpb24uY2FsbCh0aGlzLCBhcnJheVtpZHhdLCBwYXJzZUludChpZHgsIDEwKSk7XG4gICAgICAgIGlmIChyZXQgPT09IHV0aWwuYWJvcnQpIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmoxLCBvYmoyKSB7XG4gICAgdXRpbC5lYWNoKG9iajIsIGZ1bmN0aW9uIGl0ZXJhdG9yKGtleSwgaXRlbSkge1xuICAgICAgb2JqMVtrZXldID0gaXRlbTtcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqMTtcbiAgfSxcblxuICBtZXJnZTogZnVuY3Rpb24gbWVyZ2Uob2JqMSwgb2JqMikge1xuICAgIHJldHVybiB1dGlsLnVwZGF0ZSh1dGlsLmNvcHkob2JqMSksIG9iajIpO1xuICB9LFxuXG4gIGNvcHk6IGZ1bmN0aW9uIGNvcHkob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG9iamVjdDtcbiAgICB2YXIgZHVwZSA9IHt9O1xuICAgIC8vIGpzaGludCBmb3JpbjpmYWxzZVxuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGR1cGVba2V5XSA9IG9iamVjdFtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gZHVwZTtcbiAgfSxcblxuICBpc0VtcHR5OiBmdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICAgIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICBhcnJheVNsaWNlRm46IGZ1bmN0aW9uIGFycmF5U2xpY2VGbihvYmopIHtcbiAgICB2YXIgZm4gPSBvYmouc2xpY2UgfHwgb2JqLndlYmtpdFNsaWNlIHx8IG9iai5tb3pTbGljZTtcbiAgICByZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nID8gZm4gOiBudWxsO1xuICB9LFxuXG4gIGlzVHlwZTogZnVuY3Rpb24gaXNUeXBlKG9iaiwgdHlwZSkge1xuICAgIC8vIGhhbmRsZSBjcm9zcy1cImZyYW1lXCIgb2JqZWN0c1xuICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykgdHlwZSA9IHV0aWwudHlwZU5hbWUodHlwZSk7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCAnICsgdHlwZSArICddJztcbiAgfSxcblxuICB0eXBlTmFtZTogZnVuY3Rpb24gdHlwZU5hbWUodHlwZSkge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodHlwZSwgJ25hbWUnKSkgcmV0dXJuIHR5cGUubmFtZTtcbiAgICB2YXIgc3RyID0gdHlwZS50b1N0cmluZygpO1xuICAgIHZhciBtYXRjaCA9IHN0ci5tYXRjaCgvXlxccypmdW5jdGlvbiAoLispXFwoLyk7XG4gICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiBzdHI7XG4gIH0sXG5cbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKGVyciwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbEVycm9yID0gbnVsbDtcbiAgICBpZiAodHlwZW9mIGVyci5tZXNzYWdlID09PSAnc3RyaW5nJyAmJiBlcnIubWVzc2FnZSAhPT0gJycpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycgfHwgKG9wdGlvbnMgJiYgb3B0aW9ucy5tZXNzYWdlKSkge1xuICAgICAgICBvcmlnaW5hbEVycm9yID0gdXRpbC5jb3B5KGVycik7XG4gICAgICAgIG9yaWdpbmFsRXJyb3IubWVzc2FnZSA9IGVyci5tZXNzYWdlO1xuICAgICAgfVxuICAgIH1cbiAgICBlcnIubWVzc2FnZSA9IGVyci5tZXNzYWdlIHx8IG51bGw7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlcnIubWVzc2FnZSA9IG9wdGlvbnM7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcgJiYgb3B0aW9ucyAhPT0gbnVsbCkge1xuICAgICAgdXRpbC51cGRhdGUoZXJyLCBvcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm1lc3NhZ2UpXG4gICAgICAgIGVyci5tZXNzYWdlID0gb3B0aW9ucy5tZXNzYWdlO1xuICAgICAgaWYgKG9wdGlvbnMuY29kZSB8fCBvcHRpb25zLm5hbWUpXG4gICAgICAgIGVyci5jb2RlID0gb3B0aW9ucy5jb2RlIHx8IG9wdGlvbnMubmFtZTtcbiAgICAgIGlmIChvcHRpb25zLnN0YWNrKVxuICAgICAgICBlcnIuc3RhY2sgPSBvcHRpb25zLnN0YWNrO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyLCAnbmFtZScsIHt3cml0YWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogZmFsc2V9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnIsICdtZXNzYWdlJywge2VudW1lcmFibGU6IHRydWV9KTtcbiAgICB9XG5cbiAgICBlcnIubmFtZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5uYW1lIHx8IGVyci5uYW1lIHx8IGVyci5jb2RlIHx8ICdFcnJvcic7XG4gICAgZXJyLnRpbWUgPSBuZXcgRGF0ZSgpO1xuXG4gICAgaWYgKG9yaWdpbmFsRXJyb3IpIGVyci5vcmlnaW5hbEVycm9yID0gb3JpZ2luYWxFcnJvcjtcblxuICAgIHJldHVybiBlcnI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgaW5oZXJpdDogZnVuY3Rpb24gaW5oZXJpdChrbGFzcywgZmVhdHVyZXMpIHtcbiAgICB2YXIgbmV3T2JqZWN0ID0gbnVsbDtcbiAgICBpZiAoZmVhdHVyZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZmVhdHVyZXMgPSBrbGFzcztcbiAgICAgIGtsYXNzID0gT2JqZWN0O1xuICAgICAgbmV3T2JqZWN0ID0ge307XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjdG9yID0gZnVuY3Rpb24gQ29uc3RydWN0b3JXcmFwcGVyKCkge307XG4gICAgICBjdG9yLnByb3RvdHlwZSA9IGtsYXNzLnByb3RvdHlwZTtcbiAgICAgIG5ld09iamVjdCA9IG5ldyBjdG9yKCk7XG4gICAgfVxuXG4gICAgLy8gY29uc3RydWN0b3Igbm90IHN1cHBsaWVkLCBjcmVhdGUgcGFzcy10aHJvdWdoIGN0b3JcbiAgICBpZiAoZmVhdHVyZXMuY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgZmVhdHVyZXMuY29uc3RydWN0b3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGtsYXNzICE9PSBPYmplY3QpIHtcbiAgICAgICAgICByZXR1cm4ga2xhc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBmZWF0dXJlcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBuZXdPYmplY3Q7XG4gICAgdXRpbC51cGRhdGUoZmVhdHVyZXMuY29uc3RydWN0b3IucHJvdG90eXBlLCBmZWF0dXJlcyk7XG4gICAgZmVhdHVyZXMuY29uc3RydWN0b3IuX19zdXBlcl9fID0ga2xhc3M7XG4gICAgcmV0dXJuIGZlYXR1cmVzLmNvbnN0cnVjdG9yO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG1peGluOiBmdW5jdGlvbiBtaXhpbigpIHtcbiAgICB2YXIga2xhc3MgPSBhcmd1bWVudHNbMF07XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIGpzaGludCBmb3JpbjpmYWxzZVxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBhcmd1bWVudHNbaV0ucHJvdG90eXBlKSB7XG4gICAgICAgIHZhciBmbiA9IGFyZ3VtZW50c1tpXS5wcm90b3R5cGVbcHJvcF07XG4gICAgICAgIGlmIChwcm9wICE9PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAga2xhc3MucHJvdG90eXBlW3Byb3BdID0gZm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGtsYXNzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGhpZGVQcm9wZXJ0aWVzOiBmdW5jdGlvbiBoaWRlUHJvcGVydGllcyhvYmosIHByb3BzKSB7XG4gICAgaWYgKHR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgIT09ICdmdW5jdGlvbicpIHJldHVybjtcblxuICAgIHV0aWwuYXJyYXlFYWNoKHByb3BzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgcHJvcGVydHk6IGZ1bmN0aW9uIHByb3BlcnR5KG9iaiwgbmFtZSwgdmFsdWUsIGVudW1lcmFibGUsIGlzVmFsdWUpIHtcbiAgICB2YXIgb3B0cyA9IHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IGVudW1lcmFibGUgIT09IHVuZGVmaW5lZCA/IGVudW1lcmFibGUgOiB0cnVlXG4gICAgfTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmICFpc1ZhbHVlKSB7XG4gICAgICBvcHRzLmdldCA9IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIG9wdHMudmFsdWUgPSB2YWx1ZTsgb3B0cy53cml0YWJsZSA9IHRydWU7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwgb3B0cyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgbWVtb2l6ZWRQcm9wZXJ0eTogZnVuY3Rpb24gbWVtb2l6ZWRQcm9wZXJ0eShvYmosIG5hbWUsIGdldCwgZW51bWVyYWJsZSkge1xuICAgIHZhciBjYWNoZWRWYWx1ZSA9IG51bGw7XG5cbiAgICAvLyBidWlsZCBlbnVtZXJhYmxlIGF0dHJpYnV0ZSBmb3IgZWFjaCB2YWx1ZSB3aXRoIGxhenkgYWNjZXNzb3IuXG4gICAgdXRpbC5wcm9wZXJ0eShvYmosIG5hbWUsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGNhY2hlZFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIGNhY2hlZFZhbHVlID0gZ2V0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FjaGVkVmFsdWU7XG4gICAgfSwgZW51bWVyYWJsZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRPRE8gUmVtb3ZlIGluIG1ham9yIHZlcnNpb24gcmV2aXNpb25cbiAgICogVGhpcyBiYWNrZmlsbCBwb3B1bGF0ZXMgcmVzcG9uc2UgZGF0YSB3aXRob3V0IHRoZVxuICAgKiB0b3AtbGV2ZWwgcGF5bG9hZCBuYW1lLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGhvaXN0UGF5bG9hZE1lbWJlcjogZnVuY3Rpb24gaG9pc3RQYXlsb2FkTWVtYmVyKHJlc3ApIHtcbiAgICB2YXIgcmVxID0gcmVzcC5yZXF1ZXN0O1xuICAgIHZhciBvcGVyYXRpb25OYW1lID0gcmVxLm9wZXJhdGlvbjtcbiAgICB2YXIgb3BlcmF0aW9uID0gcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbb3BlcmF0aW9uTmFtZV07XG4gICAgdmFyIG91dHB1dCA9IG9wZXJhdGlvbi5vdXRwdXQ7XG4gICAgaWYgKG91dHB1dC5wYXlsb2FkICYmICFvcGVyYXRpb24uaGFzRXZlbnRPdXRwdXQpIHtcbiAgICAgIHZhciBwYXlsb2FkTWVtYmVyID0gb3V0cHV0Lm1lbWJlcnNbb3V0cHV0LnBheWxvYWRdO1xuICAgICAgdmFyIHJlc3BvbnNlUGF5bG9hZCA9IHJlc3AuZGF0YVtvdXRwdXQucGF5bG9hZF07XG4gICAgICBpZiAocGF5bG9hZE1lbWJlci50eXBlID09PSAnc3RydWN0dXJlJykge1xuICAgICAgICB1dGlsLmVhY2gocmVzcG9uc2VQYXlsb2FkLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgdXRpbC5wcm9wZXJ0eShyZXNwLmRhdGEsIGtleSwgdmFsdWUsIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wdXRlIFNIQS0yNTYgY2hlY2tzdW1zIG9mIHN0cmVhbXNcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBjb21wdXRlU2hhMjU2OiBmdW5jdGlvbiBjb21wdXRlU2hhMjU2KGJvZHksIGRvbmUpIHtcbiAgICBpZiAodXRpbC5pc05vZGUoKSkge1xuICAgICAgdmFyIFN0cmVhbSA9IHV0aWwuc3RyZWFtLlN0cmVhbTtcbiAgICAgIHZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gICAgICBpZiAodHlwZW9mIFN0cmVhbSA9PT0gJ2Z1bmN0aW9uJyAmJiBib2R5IGluc3RhbmNlb2YgU3RyZWFtKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYm9keS5wYXRoID09PSAnc3RyaW5nJykgeyAvLyBhc3N1bWUgZmlsZSBvYmplY3RcbiAgICAgICAgICB2YXIgc2V0dGluZ3MgPSB7fTtcbiAgICAgICAgICBpZiAodHlwZW9mIGJvZHkuc3RhcnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5zdGFydCA9IGJvZHkuc3RhcnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgYm9keS5lbmQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5lbmQgPSBib2R5LmVuZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYm9keSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0oYm9keS5wYXRoLCBzZXR0aW5ncyk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRPRE8gc3VwcG9ydCBvdGhlciBzdHJlYW0gdHlwZXNcbiAgICAgICAgICByZXR1cm4gZG9uZShuZXcgRXJyb3IoJ05vbi1maWxlIHN0cmVhbSBvYmplY3RzIGFyZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25vdCBzdXBwb3J0ZWQgd2l0aCBTaWdWNCcpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHV0aWwuY3J5cHRvLnNoYTI1Nihib2R5LCAnaGV4JywgZnVuY3Rpb24oZXJyLCBzaGEpIHtcbiAgICAgIGlmIChlcnIpIGRvbmUoZXJyKTtcbiAgICAgIGVsc2UgZG9uZShudWxsLCBzaGEpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGlzQ2xvY2tTa2V3ZWQ6IGZ1bmN0aW9uIGlzQ2xvY2tTa2V3ZWQoc2VydmVyVGltZSkge1xuICAgIGlmIChzZXJ2ZXJUaW1lKSB7XG4gICAgICB1dGlsLnByb3BlcnR5KEFXUy5jb25maWcsICdpc0Nsb2NrU2tld2VkJyxcbiAgICAgICAgTWF0aC5hYnMobmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzZXJ2ZXJUaW1lKSA+PSAzMDAwMDAsIGZhbHNlKTtcbiAgICAgIHJldHVybiBBV1MuY29uZmlnLmlzQ2xvY2tTa2V3ZWQ7XG4gICAgfVxuICB9LFxuXG4gIGFwcGx5Q2xvY2tPZmZzZXQ6IGZ1bmN0aW9uIGFwcGx5Q2xvY2tPZmZzZXQoc2VydmVyVGltZSkge1xuICAgIGlmIChzZXJ2ZXJUaW1lKVxuICAgICAgQVdTLmNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldCA9IHNlcnZlclRpbWUgLSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBleHRyYWN0UmVxdWVzdElkOiBmdW5jdGlvbiBleHRyYWN0UmVxdWVzdElkKHJlc3ApIHtcbiAgICB2YXIgcmVxdWVzdElkID0gcmVzcC5odHRwUmVzcG9uc2UuaGVhZGVyc1sneC1hbXotcmVxdWVzdC1pZCddIHx8XG4gICAgICAgICAgICAgICAgICAgICByZXNwLmh0dHBSZXNwb25zZS5oZWFkZXJzWyd4LWFtem4tcmVxdWVzdGlkJ107XG5cbiAgICBpZiAoIXJlcXVlc3RJZCAmJiByZXNwLmRhdGEgJiYgcmVzcC5kYXRhLlJlc3BvbnNlTWV0YWRhdGEpIHtcbiAgICAgIHJlcXVlc3RJZCA9IHJlc3AuZGF0YS5SZXNwb25zZU1ldGFkYXRhLlJlcXVlc3RJZDtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdElkKSB7XG4gICAgICByZXNwLnJlcXVlc3RJZCA9IHJlcXVlc3RJZDtcbiAgICB9XG5cbiAgICBpZiAocmVzcC5lcnJvcikge1xuICAgICAgcmVzcC5lcnJvci5yZXF1ZXN0SWQgPSByZXF1ZXN0SWQ7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGFkZFByb21pc2VzOiBmdW5jdGlvbiBhZGRQcm9taXNlcyhjb25zdHJ1Y3RvcnMsIFByb21pc2VEZXBlbmRlbmN5KSB7XG4gICAgdmFyIGRlbGV0ZVByb21pc2VzID0gZmFsc2U7XG4gICAgaWYgKFByb21pc2VEZXBlbmRlbmN5ID09PSB1bmRlZmluZWQgJiYgQVdTICYmIEFXUy5jb25maWcpIHtcbiAgICAgIFByb21pc2VEZXBlbmRlbmN5ID0gQVdTLmNvbmZpZy5nZXRQcm9taXNlc0RlcGVuZGVuY3koKTtcbiAgICB9XG4gICAgaWYgKFByb21pc2VEZXBlbmRlbmN5ID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBQcm9taXNlRGVwZW5kZW5jeSA9IFByb21pc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgUHJvbWlzZURlcGVuZGVuY3kgIT09ICdmdW5jdGlvbicpIGRlbGV0ZVByb21pc2VzID0gdHJ1ZTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29uc3RydWN0b3JzKSkgY29uc3RydWN0b3JzID0gW2NvbnN0cnVjdG9yc107XG5cbiAgICBmb3IgKHZhciBpbmQgPSAwOyBpbmQgPCBjb25zdHJ1Y3RvcnMubGVuZ3RoOyBpbmQrKykge1xuICAgICAgdmFyIGNvbnN0cnVjdG9yID0gY29uc3RydWN0b3JzW2luZF07XG4gICAgICBpZiAoZGVsZXRlUHJvbWlzZXMpIHtcbiAgICAgICAgaWYgKGNvbnN0cnVjdG9yLmRlbGV0ZVByb21pc2VzRnJvbUNsYXNzKSB7XG4gICAgICAgICAgY29uc3RydWN0b3IuZGVsZXRlUHJvbWlzZXNGcm9tQ2xhc3MoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjb25zdHJ1Y3Rvci5hZGRQcm9taXNlc1RvQ2xhc3MpIHtcbiAgICAgICAgY29uc3RydWN0b3IuYWRkUHJvbWlzZXNUb0NsYXNzKFByb21pc2VEZXBlbmRlbmN5KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBSZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHdpbGwgcmV0dXJuIGEgcHJvbWlzZSB3aG9zZSBmYXRlIGlzIGRlY2lkZWQgYnkgdGhlXG4gICAqIGNhbGxiYWNrIGJlaGF2aW9yIG9mIHRoZSBnaXZlbiBtZXRob2Qgd2l0aCBgbWV0aG9kTmFtZWAuIFRoZSBtZXRob2QgdG8gYmVcbiAgICogcHJvbWlzaWZpZWQgc2hvdWxkIGNvbmZvcm0gdG8gbm9kZS5qcyBjb252ZW50aW9uIG9mIGFjY2VwdGluZyBhIGNhbGxiYWNrIGFzXG4gICAqIGxhc3QgYXJndW1lbnQgYW5kIGNhbGxpbmcgdGhhdCBjYWxsYmFjayB3aXRoIGVycm9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgKiBhbmQgc3VjY2VzcyB2YWx1ZSBvbiB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgKi9cbiAgcHJvbWlzaWZ5TWV0aG9kOiBmdW5jdGlvbiBwcm9taXNpZnlNZXRob2QobWV0aG9kTmFtZSwgUHJvbWlzZURlcGVuZGVuY3kpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcHJvbWlzZSgpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZURlcGVuZGVuY3koZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGFyZ3MucHVzaChmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzZWxmW21ldGhvZE5hbWVdLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBpc0R1YWxzdGFja0F2YWlsYWJsZTogZnVuY3Rpb24gaXNEdWFsc3RhY2tBdmFpbGFibGUoc2VydmljZSkge1xuICAgIGlmICghc2VydmljZSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4uL2FwaXMvbWV0YWRhdGEuanNvbicpO1xuICAgIGlmICh0eXBlb2Ygc2VydmljZSAhPT0gJ3N0cmluZycpIHNlcnZpY2UgPSBzZXJ2aWNlLnNlcnZpY2VJZGVudGlmaWVyO1xuICAgIGlmICh0eXBlb2Ygc2VydmljZSAhPT0gJ3N0cmluZycgfHwgIW1ldGFkYXRhLmhhc093blByb3BlcnR5KHNlcnZpY2UpKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICEhbWV0YWRhdGFbc2VydmljZV0uZHVhbHN0YWNrQXZhaWxhYmxlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNhbGN1bGF0ZVJldHJ5RGVsYXk6IGZ1bmN0aW9uIGNhbGN1bGF0ZVJldHJ5RGVsYXkocmV0cnlDb3VudCwgcmV0cnlEZWxheU9wdGlvbnMpIHtcbiAgICBpZiAoIXJldHJ5RGVsYXlPcHRpb25zKSByZXRyeURlbGF5T3B0aW9ucyA9IHt9O1xuICAgIHZhciBjdXN0b21CYWNrb2ZmID0gcmV0cnlEZWxheU9wdGlvbnMuY3VzdG9tQmFja29mZiB8fCBudWxsO1xuICAgIGlmICh0eXBlb2YgY3VzdG9tQmFja29mZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGN1c3RvbUJhY2tvZmYocmV0cnlDb3VudCk7XG4gICAgfVxuICAgIHZhciBiYXNlID0gdHlwZW9mIHJldHJ5RGVsYXlPcHRpb25zLmJhc2UgPT09ICdudW1iZXInID8gcmV0cnlEZWxheU9wdGlvbnMuYmFzZSA6IDEwMDtcbiAgICB2YXIgZGVsYXkgPSBNYXRoLnJhbmRvbSgpICogKE1hdGgucG93KDIsIHJldHJ5Q291bnQpICogYmFzZSk7XG4gICAgcmV0dXJuIGRlbGF5O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGhhbmRsZVJlcXVlc3RXaXRoUmV0cmllczogZnVuY3Rpb24gaGFuZGxlUmVxdWVzdFdpdGhSZXRyaWVzKGh0dHBSZXF1ZXN0LCBvcHRpb25zLCBjYikge1xuICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICAgIHZhciBodHRwID0gQVdTLkh0dHBDbGllbnQuZ2V0SW5zdGFuY2UoKTtcbiAgICB2YXIgaHR0cE9wdGlvbnMgPSBvcHRpb25zLmh0dHBPcHRpb25zIHx8IHt9O1xuICAgIHZhciByZXRyeUNvdW50ID0gMDtcblxuICAgIHZhciBlcnJDYWxsYmFjayA9IGZ1bmN0aW9uKGVycikge1xuICAgICAgdmFyIG1heFJldHJpZXMgPSBvcHRpb25zLm1heFJldHJpZXMgfHwgMDtcbiAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgPT09ICdUaW1lb3V0RXJyb3InKSBlcnIucmV0cnlhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChlcnIgJiYgZXJyLnJldHJ5YWJsZSAmJiByZXRyeUNvdW50IDwgbWF4UmV0cmllcykge1xuICAgICAgICByZXRyeUNvdW50Kys7XG4gICAgICAgIHZhciBkZWxheSA9IHV0aWwuY2FsY3VsYXRlUmV0cnlEZWxheShyZXRyeUNvdW50LCBvcHRpb25zLnJldHJ5RGVsYXlPcHRpb25zKTtcbiAgICAgICAgc2V0VGltZW91dChzZW5kUmVxdWVzdCwgZGVsYXkgKyAoZXJyLnJldHJ5QWZ0ZXIgfHwgMCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2IoZXJyKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHNlbmRSZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZGF0YSA9ICcnO1xuICAgICAgaHR0cC5oYW5kbGVSZXF1ZXN0KGh0dHBSZXF1ZXN0LCBodHRwT3B0aW9ucywgZnVuY3Rpb24oaHR0cFJlc3BvbnNlKSB7XG4gICAgICAgIGh0dHBSZXNwb25zZS5vbignZGF0YScsIGZ1bmN0aW9uKGNodW5rKSB7IGRhdGEgKz0gY2h1bmsudG9TdHJpbmcoKTsgfSk7XG4gICAgICAgIGh0dHBSZXNwb25zZS5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHN0YXR1c0NvZGUgPSBodHRwUmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgICAgICAgICBpZiAoc3RhdHVzQ29kZSA8IDMwMCkge1xuICAgICAgICAgICAgY2IobnVsbCwgZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZXRyeUFmdGVyID0gcGFyc2VJbnQoaHR0cFJlc3BvbnNlLmhlYWRlcnNbJ3JldHJ5LWFmdGVyJ10sIDEwKSAqIDEwMDAgfHwgMDtcbiAgICAgICAgICAgIHZhciBlcnIgPSB1dGlsLmVycm9yKG5ldyBFcnJvcigpLFxuICAgICAgICAgICAgICB7IHJldHJ5YWJsZTogc3RhdHVzQ29kZSA+PSA1MDAgfHwgc3RhdHVzQ29kZSA9PT0gNDI5IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAocmV0cnlBZnRlciAmJiBlcnIucmV0cnlhYmxlKSBlcnIucmV0cnlBZnRlciA9IHJldHJ5QWZ0ZXI7XG4gICAgICAgICAgICBlcnJDYWxsYmFjayhlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LCBlcnJDYWxsYmFjayk7XG4gICAgfTtcblxuICAgIEFXUy51dGlsLmRlZmVyKHNlbmRSZXF1ZXN0KTtcbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICB1dWlkOiB7XG4gICAgdjQ6IGZ1bmN0aW9uIHV1aWRWNCgpIHtcbiAgICAgIHJldHVybiByZXF1aXJlKCd1dWlkJykudjQoKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY29udmVydFBheWxvYWRUb1N0cmluZzogZnVuY3Rpb24gY29udmVydFBheWxvYWRUb1N0cmluZyhyZXNwKSB7XG4gICAgdmFyIHJlcSA9IHJlc3AucmVxdWVzdDtcbiAgICB2YXIgb3BlcmF0aW9uID0gcmVxLm9wZXJhdGlvbjtcbiAgICB2YXIgcnVsZXMgPSByZXEuc2VydmljZS5hcGkub3BlcmF0aW9uc1tvcGVyYXRpb25dLm91dHB1dCB8fCB7fTtcbiAgICBpZiAocnVsZXMucGF5bG9hZCAmJiByZXNwLmRhdGFbcnVsZXMucGF5bG9hZF0pIHtcbiAgICAgIHJlc3AuZGF0YVtydWxlcy5wYXlsb2FkXSA9IHJlc3AuZGF0YVtydWxlcy5wYXlsb2FkXS50b1N0cmluZygpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBkZWZlcjogZnVuY3Rpb24gZGVmZXIoY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwcm9jZXNzLm5leHRUaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHNldEltbWVkaWF0ZShjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBnZXRSZXF1ZXN0UGF5bG9hZFNoYXBlOiBmdW5jdGlvbiBnZXRSZXF1ZXN0UGF5bG9hZFNoYXBlKHJlcSkge1xuICAgIHZhciBvcGVyYXRpb25zID0gcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnM7XG4gICAgaWYgKCFvcGVyYXRpb25zKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHZhciBvcGVyYXRpb24gPSAob3BlcmF0aW9ucyB8fCB7fSlbcmVxLm9wZXJhdGlvbl07XG4gICAgaWYgKCFvcGVyYXRpb24gfHwgIW9wZXJhdGlvbi5pbnB1dCB8fCAhb3BlcmF0aW9uLmlucHV0LnBheWxvYWQpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIG9wZXJhdGlvbi5pbnB1dC5tZW1iZXJzW29wZXJhdGlvbi5pbnB1dC5wYXlsb2FkXTtcbiAgfSxcblxuICBnZXRQcm9maWxlc0Zyb21TaGFyZWRDb25maWc6IGZ1bmN0aW9uIGdldFByb2ZpbGVzRnJvbVNoYXJlZENvbmZpZyhpbmlMb2FkZXIsIGZpbGVuYW1lKSB7XG4gICAgdmFyIHByb2ZpbGVzID0ge307XG4gICAgdmFyIHByb2ZpbGVzRnJvbUNvbmZpZyA9IHt9O1xuICAgIGlmIChwcm9jZXNzLmVudlt1dGlsLmNvbmZpZ09wdEluRW52XSkge1xuICAgICAgdmFyIHByb2ZpbGVzRnJvbUNvbmZpZyA9IGluaUxvYWRlci5sb2FkRnJvbSh7XG4gICAgICAgIGlzQ29uZmlnOiB0cnVlLFxuICAgICAgICBmaWxlbmFtZTogcHJvY2Vzcy5lbnZbdXRpbC5zaGFyZWRDb25maWdGaWxlRW52XVxuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBwcm9maWxlc0Zyb21DcmVkcyA9IGluaUxvYWRlci5sb2FkRnJvbSh7XG4gICAgICBmaWxlbmFtZTogZmlsZW5hbWUgfHxcbiAgICAgICAgKHByb2Nlc3MuZW52W3V0aWwuY29uZmlnT3B0SW5FbnZdICYmIHByb2Nlc3MuZW52W3V0aWwuc2hhcmVkQ3JlZGVudGlhbHNGaWxlRW52XSlcbiAgICB9KTtcbiAgICBmb3IgKHZhciBpID0gMCwgcHJvZmlsZU5hbWVzID0gT2JqZWN0LmtleXMocHJvZmlsZXNGcm9tQ29uZmlnKTsgaSA8IHByb2ZpbGVOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvZmlsZXNbcHJvZmlsZU5hbWVzW2ldXSA9IHByb2ZpbGVzRnJvbUNvbmZpZ1twcm9maWxlTmFtZXNbaV1dO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgcHJvZmlsZU5hbWVzID0gT2JqZWN0LmtleXMocHJvZmlsZXNGcm9tQ3JlZHMpOyBpIDwgcHJvZmlsZU5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwcm9maWxlc1twcm9maWxlTmFtZXNbaV1dID0gcHJvZmlsZXNGcm9tQ3JlZHNbcHJvZmlsZU5hbWVzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2ZpbGVzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRlZmF1bHRQcm9maWxlOiAnZGVmYXVsdCcsXG5cbiAgLyoqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY29uZmlnT3B0SW5FbnY6ICdBV1NfU0RLX0xPQURfQ09ORklHJyxcblxuICAvKipcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBzaGFyZWRDcmVkZW50aWFsc0ZpbGVFbnY6ICdBV1NfU0hBUkVEX0NSRURFTlRJQUxTX0ZJTEUnLFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHNoYXJlZENvbmZpZ0ZpbGVFbnY6ICdBV1NfQ09ORklHX0ZJTEUnLFxuXG4gIC8qKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGltZHNEaXNhYmxlZEVudjogJ0FXU19FQzJfTUVUQURBVEFfRElTQUJMRUQnXG59O1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHV0aWw7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHJlcXVpcmUoXCJ0aW1lcnNcIikuc2V0SW1tZWRpYXRlKVxufSx7XCIuLi9hcGlzL21ldGFkYXRhLmpzb25cIjo1LFwiLi9jb3JlXCI6MTksXCJfcHJvY2Vzc1wiOjg2LFwiZnNcIjo4MCxcInRpbWVyc1wiOjk0LFwidXVpZFwiOjk5fV0sNzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG52YXIgU2hhcGUgPSByZXF1aXJlKCcuLi9tb2RlbC9zaGFwZScpO1xuXG5mdW5jdGlvbiBEb21YbWxQYXJzZXIoKSB7IH1cblxuRG9tWG1sUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHhtbCwgc2hhcGUpIHtcbiAgaWYgKHhtbC5yZXBsYWNlKC9eXFxzKy8sICcnKSA9PT0gJycpIHJldHVybiB7fTtcblxuICB2YXIgcmVzdWx0LCBlcnJvcjtcbiAgdHJ5IHtcbiAgICBpZiAod2luZG93LkRPTVBhcnNlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICAgICAgcmVzdWx0ID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh4bWwsICd0ZXh0L3htbCcpO1xuICAgICAgfSBjYXRjaCAoc3ludGF4RXJyb3IpIHtcbiAgICAgICAgdGhyb3cgdXRpbC5lcnJvcihuZXcgRXJyb3IoJ1BhcnNlIGVycm9yIGluIGRvY3VtZW50JyksXG4gICAgICAgICAge1xuICAgICAgICAgICAgb3JpZ2luYWxFcnJvcjogc3ludGF4RXJyb3IsXG4gICAgICAgICAgICBjb2RlOiAnWE1MUGFyc2VyRXJyb3InLFxuICAgICAgICAgICAgcmV0cnlhYmxlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHQuZG9jdW1lbnRFbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IHV0aWwuZXJyb3IobmV3IEVycm9yKCdDYW5ub3QgcGFyc2UgZW1wdHkgZG9jdW1lbnQuJyksXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29kZTogJ1hNTFBhcnNlckVycm9yJyxcbiAgICAgICAgICAgIHJldHJ5YWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNFcnJvciA9IHJlc3VsdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgncGFyc2VyZXJyb3InKVswXTtcbiAgICAgIGlmIChpc0Vycm9yICYmIChpc0Vycm9yLnBhcmVudE5vZGUgPT09IHJlc3VsdCB8fFxuICAgICAgICAgIGlzRXJyb3IucGFyZW50Tm9kZS5ub2RlTmFtZSA9PT0gJ2JvZHknIHx8XG4gICAgICAgICAgaXNFcnJvci5wYXJlbnROb2RlLnBhcmVudE5vZGUgPT09IHJlc3VsdCB8fFxuICAgICAgICAgIGlzRXJyb3IucGFyZW50Tm9kZS5wYXJlbnROb2RlLm5vZGVOYW1lID09PSAnYm9keScpKSB7XG4gICAgICAgIHZhciBlcnJvckVsZW1lbnQgPSBpc0Vycm9yLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkaXYnKVswXSB8fCBpc0Vycm9yO1xuICAgICAgICB0aHJvdyB1dGlsLmVycm9yKG5ldyBFcnJvcihlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgfHwgJ1BhcnNlciBlcnJvciBpbiBkb2N1bWVudCcpLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvZGU6ICdYTUxQYXJzZXJFcnJvcicsXG4gICAgICAgICAgICByZXRyeWFibGU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHdpbmRvdy5BY3RpdmVYT2JqZWN0KSB7XG4gICAgICByZXN1bHQgPSBuZXcgd2luZG93LkFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxET00nKTtcbiAgICAgIHJlc3VsdC5hc3luYyA9IGZhbHNlO1xuXG4gICAgICBpZiAoIXJlc3VsdC5sb2FkWE1MKHhtbCkpIHtcbiAgICAgICAgdGhyb3cgdXRpbC5lcnJvcihuZXcgRXJyb3IoJ1BhcnNlIGVycm9yIGluIGRvY3VtZW50JyksXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29kZTogJ1hNTFBhcnNlckVycm9yJyxcbiAgICAgICAgICAgIHJldHJ5YWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBsb2FkIFhNTCBwYXJzZXInKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnJvciA9IGU7XG4gIH1cblxuICBpZiAocmVzdWx0ICYmIHJlc3VsdC5kb2N1bWVudEVsZW1lbnQgJiYgIWVycm9yKSB7XG4gICAgdmFyIGRhdGEgPSBwYXJzZVhtbChyZXN1bHQuZG9jdW1lbnRFbGVtZW50LCBzaGFwZSk7XG4gICAgdmFyIG1ldGFkYXRhID0gZ2V0RWxlbWVudEJ5VGFnTmFtZShyZXN1bHQuZG9jdW1lbnRFbGVtZW50LCAnUmVzcG9uc2VNZXRhZGF0YScpO1xuICAgIGlmIChtZXRhZGF0YSkge1xuICAgICAgZGF0YS5SZXNwb25zZU1ldGFkYXRhID0gcGFyc2VYbWwobWV0YWRhdGEsIHt9KTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH0gZWxzZSBpZiAoZXJyb3IpIHtcbiAgICB0aHJvdyB1dGlsLmVycm9yKGVycm9yIHx8IG5ldyBFcnJvcigpLCB7Y29kZTogJ1hNTFBhcnNlckVycm9yJywgcmV0cnlhYmxlOiB0cnVlfSk7XG4gIH0gZWxzZSB7IC8vIGVtcHR5IHhtbCBkb2N1bWVudFxuICAgIHJldHVybiB7fTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0RWxlbWVudEJ5VGFnTmFtZSh4bWwsIHRhZykge1xuICB2YXIgZWxlbWVudHMgPSB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnKTtcbiAgZm9yICh2YXIgaSA9IDAsIGlMZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBpTGVuOyBpKyspIHtcbiAgICBpZiAoZWxlbWVudHNbaV0ucGFyZW50Tm9kZSA9PT0geG1sKSB7XG4gICAgICByZXR1cm4gZWxlbWVudHNbaV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlWG1sKHhtbCwgc2hhcGUpIHtcbiAgaWYgKCFzaGFwZSkgc2hhcGUgPSB7fTtcbiAgc3dpdGNoIChzaGFwZS50eXBlKSB7XG4gICAgY2FzZSAnc3RydWN0dXJlJzogcmV0dXJuIHBhcnNlU3RydWN0dXJlKHhtbCwgc2hhcGUpO1xuICAgIGNhc2UgJ21hcCc6IHJldHVybiBwYXJzZU1hcCh4bWwsIHNoYXBlKTtcbiAgICBjYXNlICdsaXN0JzogcmV0dXJuIHBhcnNlTGlzdCh4bWwsIHNoYXBlKTtcbiAgICBjYXNlIHVuZGVmaW5lZDogY2FzZSBudWxsOiByZXR1cm4gcGFyc2VVbmtub3duKHhtbCk7XG4gICAgZGVmYXVsdDogcmV0dXJuIHBhcnNlU2NhbGFyKHhtbCwgc2hhcGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3RydWN0dXJlKHhtbCwgc2hhcGUpIHtcbiAgdmFyIGRhdGEgPSB7fTtcbiAgaWYgKHhtbCA9PT0gbnVsbCkgcmV0dXJuIGRhdGE7XG5cbiAgdXRpbC5lYWNoKHNoYXBlLm1lbWJlcnMsIGZ1bmN0aW9uKG1lbWJlck5hbWUsIG1lbWJlclNoYXBlKSB7XG4gICAgaWYgKG1lbWJlclNoYXBlLmlzWG1sQXR0cmlidXRlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHhtbC5hdHRyaWJ1dGVzLCBtZW1iZXJTaGFwZS5uYW1lKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSB4bWwuYXR0cmlidXRlc1ttZW1iZXJTaGFwZS5uYW1lXS52YWx1ZTtcbiAgICAgICAgZGF0YVttZW1iZXJOYW1lXSA9IHBhcnNlWG1sKHt0ZXh0Q29udGVudDogdmFsdWV9LCBtZW1iZXJTaGFwZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB4bWxDaGlsZCA9IG1lbWJlclNoYXBlLmZsYXR0ZW5lZCA/IHhtbCA6XG4gICAgICAgIGdldEVsZW1lbnRCeVRhZ05hbWUoeG1sLCBtZW1iZXJTaGFwZS5uYW1lKTtcbiAgICAgIGlmICh4bWxDaGlsZCkge1xuICAgICAgICBkYXRhW21lbWJlck5hbWVdID0gcGFyc2VYbWwoeG1sQ2hpbGQsIG1lbWJlclNoYXBlKTtcbiAgICAgIH0gZWxzZSBpZiAoIW1lbWJlclNoYXBlLmZsYXR0ZW5lZCAmJiBtZW1iZXJTaGFwZS50eXBlID09PSAnbGlzdCcpIHtcbiAgICAgICAgZGF0YVttZW1iZXJOYW1lXSA9IG1lbWJlclNoYXBlLmRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1hcCh4bWwsIHNoYXBlKSB7XG4gIHZhciBkYXRhID0ge307XG4gIHZhciB4bWxLZXkgPSBzaGFwZS5rZXkubmFtZSB8fCAna2V5JztcbiAgdmFyIHhtbFZhbHVlID0gc2hhcGUudmFsdWUubmFtZSB8fCAndmFsdWUnO1xuICB2YXIgdGFnTmFtZSA9IHNoYXBlLmZsYXR0ZW5lZCA/IHNoYXBlLm5hbWUgOiAnZW50cnknO1xuXG4gIHZhciBjaGlsZCA9IHhtbC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkLm5vZGVOYW1lID09PSB0YWdOYW1lKSB7XG4gICAgICB2YXIga2V5ID0gZ2V0RWxlbWVudEJ5VGFnTmFtZShjaGlsZCwgeG1sS2V5KS50ZXh0Q29udGVudDtcbiAgICAgIHZhciB2YWx1ZSA9IGdldEVsZW1lbnRCeVRhZ05hbWUoY2hpbGQsIHhtbFZhbHVlKTtcbiAgICAgIGRhdGFba2V5XSA9IHBhcnNlWG1sKHZhbHVlLCBzaGFwZS52YWx1ZSk7XG4gICAgfVxuICAgIGNoaWxkID0gY2hpbGQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBwYXJzZUxpc3QoeG1sLCBzaGFwZSkge1xuICB2YXIgZGF0YSA9IFtdO1xuICB2YXIgdGFnTmFtZSA9IHNoYXBlLmZsYXR0ZW5lZCA/IHNoYXBlLm5hbWUgOiAoc2hhcGUubWVtYmVyLm5hbWUgfHwgJ21lbWJlcicpO1xuXG4gIHZhciBjaGlsZCA9IHhtbC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkLm5vZGVOYW1lID09PSB0YWdOYW1lKSB7XG4gICAgICBkYXRhLnB1c2gocGFyc2VYbWwoY2hpbGQsIHNoYXBlLm1lbWJlcikpO1xuICAgIH1cbiAgICBjaGlsZCA9IGNoaWxkLm5leHRFbGVtZW50U2libGluZztcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTY2FsYXIoeG1sLCBzaGFwZSkge1xuICBpZiAoeG1sLmdldEF0dHJpYnV0ZSkge1xuICAgIHZhciBlbmNvZGluZyA9IHhtbC5nZXRBdHRyaWJ1dGUoJ2VuY29kaW5nJyk7XG4gICAgaWYgKGVuY29kaW5nID09PSAnYmFzZTY0Jykge1xuICAgICAgc2hhcGUgPSBuZXcgU2hhcGUuY3JlYXRlKHt0eXBlOiBlbmNvZGluZ30pO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0ZXh0ID0geG1sLnRleHRDb250ZW50O1xuICBpZiAodGV4dCA9PT0gJycpIHRleHQgPSBudWxsO1xuICBpZiAodHlwZW9mIHNoYXBlLnRvVHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBzaGFwZS50b1R5cGUodGV4dCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VVbmtub3duKHhtbCkge1xuICBpZiAoeG1sID09PSB1bmRlZmluZWQgfHwgeG1sID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgLy8gZW1wdHkgb2JqZWN0XG4gIGlmICgheG1sLmZpcnN0RWxlbWVudENoaWxkKSB7XG4gICAgaWYgKHhtbC5wYXJlbnROb2RlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiB7fTtcbiAgICBpZiAoeG1sLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gICAgZWxzZSByZXR1cm4geG1sLnRleHRDb250ZW50O1xuICB9XG5cbiAgLy8gb2JqZWN0LCBwYXJzZSBhcyBzdHJ1Y3R1cmVcbiAgdmFyIHNoYXBlID0ge3R5cGU6ICdzdHJ1Y3R1cmUnLCBtZW1iZXJzOiB7fX07XG4gIHZhciBjaGlsZCA9IHhtbC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgdmFyIHRhZyA9IGNoaWxkLm5vZGVOYW1lO1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc2hhcGUubWVtYmVycywgdGFnKSkge1xuICAgICAgLy8gbXVsdGlwbGUgdGFncyBvZiB0aGUgc2FtZSBuYW1lIG1ha2VzIGl0IGEgbGlzdFxuICAgICAgc2hhcGUubWVtYmVyc1t0YWddLnR5cGUgPSAnbGlzdCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNoYXBlLm1lbWJlcnNbdGFnXSA9IHtuYW1lOiB0YWd9O1xuICAgIH1cbiAgICBjaGlsZCA9IGNoaWxkLm5leHRFbGVtZW50U2libGluZztcbiAgfVxuICByZXR1cm4gcGFyc2VTdHJ1Y3R1cmUoeG1sLCBzaGFwZSk7XG59XG5cbi8qKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gRG9tWG1sUGFyc2VyO1xuXG59LHtcIi4uL21vZGVsL3NoYXBlXCI6NDQsXCIuLi91dGlsXCI6NzJ9XSw3NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbnZhciBYbWxOb2RlID0gcmVxdWlyZSgnLi94bWwtbm9kZScpLlhtbE5vZGU7XG52YXIgWG1sVGV4dCA9IHJlcXVpcmUoJy4veG1sLXRleHQnKS5YbWxUZXh0O1xuXG5mdW5jdGlvbiBYbWxCdWlsZGVyKCkgeyB9XG5cblhtbEJ1aWxkZXIucHJvdG90eXBlLnRvWE1MID0gZnVuY3Rpb24ocGFyYW1zLCBzaGFwZSwgcm9vdEVsZW1lbnQsIG5vRW1wdHkpIHtcbiAgdmFyIHhtbCA9IG5ldyBYbWxOb2RlKHJvb3RFbGVtZW50KTtcbiAgYXBwbHlOYW1lc3BhY2VzKHhtbCwgc2hhcGUsIHRydWUpO1xuICBzZXJpYWxpemUoeG1sLCBwYXJhbXMsIHNoYXBlKTtcbiAgcmV0dXJuIHhtbC5jaGlsZHJlbi5sZW5ndGggPiAwIHx8IG5vRW1wdHkgPyB4bWwudG9TdHJpbmcoKSA6ICcnO1xufTtcblxuZnVuY3Rpb24gc2VyaWFsaXplKHhtbCwgdmFsdWUsIHNoYXBlKSB7XG4gIHN3aXRjaCAoc2hhcGUudHlwZSkge1xuICAgIGNhc2UgJ3N0cnVjdHVyZSc6IHJldHVybiBzZXJpYWxpemVTdHJ1Y3R1cmUoeG1sLCB2YWx1ZSwgc2hhcGUpO1xuICAgIGNhc2UgJ21hcCc6IHJldHVybiBzZXJpYWxpemVNYXAoeG1sLCB2YWx1ZSwgc2hhcGUpO1xuICAgIGNhc2UgJ2xpc3QnOiByZXR1cm4gc2VyaWFsaXplTGlzdCh4bWwsIHZhbHVlLCBzaGFwZSk7XG4gICAgZGVmYXVsdDogcmV0dXJuIHNlcmlhbGl6ZVNjYWxhcih4bWwsIHZhbHVlLCBzaGFwZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplU3RydWN0dXJlKHhtbCwgcGFyYW1zLCBzaGFwZSkge1xuICB1dGlsLmFycmF5RWFjaChzaGFwZS5tZW1iZXJOYW1lcywgZnVuY3Rpb24obWVtYmVyTmFtZSkge1xuICAgIHZhciBtZW1iZXJTaGFwZSA9IHNoYXBlLm1lbWJlcnNbbWVtYmVyTmFtZV07XG4gICAgaWYgKG1lbWJlclNoYXBlLmxvY2F0aW9uICE9PSAnYm9keScpIHJldHVybjtcblxuICAgIHZhciB2YWx1ZSA9IHBhcmFtc1ttZW1iZXJOYW1lXTtcbiAgICB2YXIgbmFtZSA9IG1lbWJlclNoYXBlLm5hbWU7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgIGlmIChtZW1iZXJTaGFwZS5pc1htbEF0dHJpYnV0ZSkge1xuICAgICAgICB4bWwuYWRkQXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAobWVtYmVyU2hhcGUuZmxhdHRlbmVkKSB7XG4gICAgICAgIHNlcmlhbGl6ZSh4bWwsIHZhbHVlLCBtZW1iZXJTaGFwZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZWxlbWVudCA9IG5ldyBYbWxOb2RlKG5hbWUpO1xuICAgICAgICB4bWwuYWRkQ2hpbGROb2RlKGVsZW1lbnQpO1xuICAgICAgICBhcHBseU5hbWVzcGFjZXMoZWxlbWVudCwgbWVtYmVyU2hhcGUpO1xuICAgICAgICBzZXJpYWxpemUoZWxlbWVudCwgdmFsdWUsIG1lbWJlclNoYXBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVNYXAoeG1sLCBtYXAsIHNoYXBlKSB7XG4gIHZhciB4bWxLZXkgPSBzaGFwZS5rZXkubmFtZSB8fCAna2V5JztcbiAgdmFyIHhtbFZhbHVlID0gc2hhcGUudmFsdWUubmFtZSB8fCAndmFsdWUnO1xuXG4gIHV0aWwuZWFjaChtYXAsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBuZXcgWG1sTm9kZShzaGFwZS5mbGF0dGVuZWQgPyBzaGFwZS5uYW1lIDogJ2VudHJ5Jyk7XG4gICAgeG1sLmFkZENoaWxkTm9kZShlbnRyeSk7XG5cbiAgICB2YXIgZW50cnlLZXkgPSBuZXcgWG1sTm9kZSh4bWxLZXkpO1xuICAgIHZhciBlbnRyeVZhbHVlID0gbmV3IFhtbE5vZGUoeG1sVmFsdWUpO1xuICAgIGVudHJ5LmFkZENoaWxkTm9kZShlbnRyeUtleSk7XG4gICAgZW50cnkuYWRkQ2hpbGROb2RlKGVudHJ5VmFsdWUpO1xuXG4gICAgc2VyaWFsaXplKGVudHJ5S2V5LCBrZXksIHNoYXBlLmtleSk7XG4gICAgc2VyaWFsaXplKGVudHJ5VmFsdWUsIHZhbHVlLCBzaGFwZS52YWx1ZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVMaXN0KHhtbCwgbGlzdCwgc2hhcGUpIHtcbiAgaWYgKHNoYXBlLmZsYXR0ZW5lZCkge1xuICAgIHV0aWwuYXJyYXlFYWNoKGxpc3QsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgbmFtZSA9IHNoYXBlLm1lbWJlci5uYW1lIHx8IHNoYXBlLm5hbWU7XG4gICAgICB2YXIgZWxlbWVudCA9IG5ldyBYbWxOb2RlKG5hbWUpO1xuICAgICAgeG1sLmFkZENoaWxkTm9kZShlbGVtZW50KTtcbiAgICAgIHNlcmlhbGl6ZShlbGVtZW50LCB2YWx1ZSwgc2hhcGUubWVtYmVyKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB1dGlsLmFycmF5RWFjaChsaXN0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIG5hbWUgPSBzaGFwZS5tZW1iZXIubmFtZSB8fCAnbWVtYmVyJztcbiAgICAgIHZhciBlbGVtZW50ID0gbmV3IFhtbE5vZGUobmFtZSk7XG4gICAgICB4bWwuYWRkQ2hpbGROb2RlKGVsZW1lbnQpO1xuICAgICAgc2VyaWFsaXplKGVsZW1lbnQsIHZhbHVlLCBzaGFwZS5tZW1iZXIpO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZVNjYWxhcih4bWwsIHZhbHVlLCBzaGFwZSkge1xuICB4bWwuYWRkQ2hpbGROb2RlKFxuICAgIG5ldyBYbWxUZXh0KHNoYXBlLnRvV2lyZUZvcm1hdCh2YWx1ZSkpXG4gICk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5TmFtZXNwYWNlcyh4bWwsIHNoYXBlLCBpc1Jvb3QpIHtcbiAgdmFyIHVyaSwgcHJlZml4ID0gJ3htbG5zJztcbiAgaWYgKHNoYXBlLnhtbE5hbWVzcGFjZVVyaSkge1xuICAgIHVyaSA9IHNoYXBlLnhtbE5hbWVzcGFjZVVyaTtcbiAgICBpZiAoc2hhcGUueG1sTmFtZXNwYWNlUHJlZml4KSBwcmVmaXggKz0gJzonICsgc2hhcGUueG1sTmFtZXNwYWNlUHJlZml4O1xuICB9IGVsc2UgaWYgKGlzUm9vdCAmJiBzaGFwZS5hcGkueG1sTmFtZXNwYWNlVXJpKSB7XG4gICAgdXJpID0gc2hhcGUuYXBpLnhtbE5hbWVzcGFjZVVyaTtcbiAgfVxuXG4gIGlmICh1cmkpIHhtbC5hZGRBdHRyaWJ1dGUocHJlZml4LCB1cmkpO1xufVxuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IFhtbEJ1aWxkZXI7XG5cbn0se1wiLi4vdXRpbFwiOjcyLFwiLi94bWwtbm9kZVwiOjc3LFwiLi94bWwtdGV4dFwiOjc4fV0sNzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBFc2NhcGVzIGNoYXJhY3RlcnMgdGhhdCBjYW4gbm90IGJlIGluIGFuIFhNTCBhdHRyaWJ1dGUuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUF0dHJpYnV0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC8mL2csICcmYW1wOycpLnJlcGxhY2UoLycvZywgJyZhcG9zOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7JykucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufVxuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBlc2NhcGVBdHRyaWJ1dGU6IGVzY2FwZUF0dHJpYnV0ZVxufTtcblxufSx7fV0sNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBFc2NhcGVzIGNoYXJhY3RlcnMgdGhhdCBjYW4gbm90IGJlIGluIGFuIFhNTCBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBlc2NhcGVFbGVtZW50KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKTtcbn1cblxuLyoqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZXNjYXBlRWxlbWVudDogZXNjYXBlRWxlbWVudFxufTtcblxufSx7fV0sNzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGVzY2FwZUF0dHJpYnV0ZSA9IHJlcXVpcmUoJy4vZXNjYXBlLWF0dHJpYnV0ZScpLmVzY2FwZUF0dHJpYnV0ZTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIFhNTCBub2RlLlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIFhtbE5vZGUobmFtZSwgY2hpbGRyZW4pIHtcbiAgICBpZiAoY2hpbGRyZW4gPT09IHZvaWQgMCkgeyBjaGlsZHJlbiA9IFtdOyB9XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG59XG5YbWxOb2RlLnByb3RvdHlwZS5hZGRBdHRyaWJ1dGUgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLmF0dHJpYnV0ZXNbbmFtZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5YbWxOb2RlLnByb3RvdHlwZS5hZGRDaGlsZE5vZGUgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblhtbE5vZGUucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuYXR0cmlidXRlc1tuYW1lXTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5YbWxOb2RlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFzQ2hpbGRyZW4gPSBCb29sZWFuKHRoaXMuY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICB2YXIgeG1sVGV4dCA9ICc8JyArIHRoaXMubmFtZTtcbiAgICAvLyBhZGQgYXR0cmlidXRlc1xuICAgIHZhciBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzO1xuICAgIGZvciAodmFyIGkgPSAwLCBhdHRyaWJ1dGVOYW1lcyA9IE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpOyBpIDwgYXR0cmlidXRlTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVOYW1lc1tpXTtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV07XG4gICAgICAgIGlmICh0eXBlb2YgYXR0cmlidXRlICE9PSAndW5kZWZpbmVkJyAmJiBhdHRyaWJ1dGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHhtbFRleHQgKz0gJyAnICsgYXR0cmlidXRlTmFtZSArICc9XFxcIicgKyBlc2NhcGVBdHRyaWJ1dGUoJycgKyBhdHRyaWJ1dGUpICsgJ1xcXCInO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB4bWxUZXh0ICs9ICFoYXNDaGlsZHJlbiA/ICcvPicgOiAnPicgKyB0aGlzLmNoaWxkcmVuLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1N0cmluZygpOyB9KS5qb2luKCcnKSArICc8LycgKyB0aGlzLm5hbWUgKyAnPic7XG59O1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBYbWxOb2RlOiBYbWxOb2RlXG59O1xuXG59LHtcIi4vZXNjYXBlLWF0dHJpYnV0ZVwiOjc1fV0sNzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGVzY2FwZUVsZW1lbnQgPSByZXF1aXJlKCcuL2VzY2FwZS1lbGVtZW50JykuZXNjYXBlRWxlbWVudDtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIFhNTCB0ZXh0IHZhbHVlLlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIFhtbFRleHQodmFsdWUpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG59XG5cblhtbFRleHQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlc2NhcGVFbGVtZW50KCcnICsgdGhpcy52YWx1ZSk7XG59O1xuXG4vKipcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBYbWxUZXh0OiBYbWxUZXh0XG59O1xuXG59LHtcIi4vZXNjYXBlLWVsZW1lbnRcIjo3Nn1dLDc5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG5cbn0se31dLDgwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblxufSx7fV0sODE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwsQnVmZmVyKXtcbi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG59LHtcImJhc2U2NC1qc1wiOjc5LFwiYnVmZmVyXCI6ODEsXCJpZWVlNzU0XCI6ODMsXCJpc2FycmF5XCI6ODR9XSw4MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbkV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKCFpc051bWJlcihuKSB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHMuZXJyb3IgfHxcbiAgICAgICAgKGlzT2JqZWN0KHRoaXMuX2V2ZW50cy5lcnJvcikgJiYgIXRoaXMuX2V2ZW50cy5lcnJvci5sZW5ndGgpKSB7XG4gICAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LiAoJyArIGVyICsgJyknKTtcbiAgICAgICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzVW5kZWZpbmVkKGhhbmRsZXIpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gZmFzdCBjYXNlc1xuICAgICAgY2FzZSAxOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gc2xvd2VyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoaGFuZGxlcikpIHtcbiAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICBsaXN0ZW5lcnMgPSBoYW5kbGVyLnNsaWNlKCk7XG4gICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICBpZiAodGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyKVxuICAgIHRoaXMuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/XG4gICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICBlbHNlIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2VcbiAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBbdGhpcy5fZXZlbnRzW3R5cGVdLCBsaXN0ZW5lcl07XG5cbiAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkgJiYgIXRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQpIHtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX21heExpc3RlbmVycykpIHtcbiAgICAgIG0gPSB0aGlzLl9tYXhMaXN0ZW5lcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgICB9XG5cbiAgICBpZiAobSAmJiBtID4gMCAmJiB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoID4gbSkge1xuICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKCcobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdC4nLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoKTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZS50cmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBub3Qgc3VwcG9ydGVkIGluIElFIDEwXG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgdmFyIGZpcmVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpO1xuXG4gICAgaWYgKCFmaXJlZCkge1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHRoaXMub24odHlwZSwgZyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBsaXN0LCBwb3NpdGlvbiwgbGVuZ3RoLCBpO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGxpc3QgPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICBwb3NpdGlvbiA9IC0xO1xuXG4gIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fFxuICAgICAgKGlzRnVuY3Rpb24obGlzdC5saXN0ZW5lcikgJiYgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcblxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxpc3QpKSB7XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gPiAwOykge1xuICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICBsaXN0Lmxlbmd0aCA9IDA7XG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIga2V5LCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICBpZiAoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgZWxzZSBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykge1xuICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcnMpKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICB9IGVsc2UgaWYgKGxpc3RlbmVycykge1xuICAgIC8vIExJRk8gb3JkZXJcbiAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aClcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2xpc3RlbmVycy5sZW5ndGggLSAxXSk7XG4gIH1cbiAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgcmV0O1xuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldCA9IFtdO1xuICBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgcmV0ID0gW3RoaXMuX2V2ZW50c1t0eXBlXV07XG4gIGVsc2VcbiAgICByZXQgPSB0aGlzLl9ldmVudHNbdHlwZV0uc2xpY2UoKTtcbiAgcmV0dXJuIHJldDtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgaWYgKHRoaXMuX2V2ZW50cykge1xuICAgIHZhciBldmxpc3RlbmVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKGlzRnVuY3Rpb24oZXZsaXN0ZW5lcikpXG4gICAgICByZXR1cm4gMTtcbiAgICBlbHNlIGlmIChldmxpc3RlbmVyKVxuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICB9XG4gIHJldHVybiAwO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG59O1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5cbn0se31dLDgzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cblxufSx7fV0sODQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbn0se31dLDg1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbihleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7XG4gICAgaWYgKG9iaiAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSBcIltvYmplY3QgQXJyYXldXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgICBpZiAob2JqICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09IFwiW29iamVjdCBPYmplY3RdXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdHJpY3REZWVwRXF1YWwoZmlyc3QsIHNlY29uZCkge1xuICAgIC8vIENoZWNrIHRoZSBzY2FsYXIgY2FzZSBmaXJzdC5cbiAgICBpZiAoZmlyc3QgPT09IHNlY29uZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgdGhleSBhcmUgdGhlIHNhbWUgdHlwZS5cbiAgICB2YXIgZmlyc3RUeXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGZpcnN0KTtcbiAgICBpZiAoZmlyc3RUeXBlICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc2Vjb25kKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBXZSBrbm93IHRoYXQgZmlyc3QgYW5kIHNlY29uZCBoYXZlIHRoZSBzYW1lIHR5cGUgc28gd2UgY2FuIGp1c3QgY2hlY2sgdGhlXG4gICAgLy8gZmlyc3QgdHlwZSBmcm9tIG5vdyBvbi5cbiAgICBpZiAoaXNBcnJheShmaXJzdCkgPT09IHRydWUpIHtcbiAgICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgdGhleSdyZSBub3QgdGhlIHNhbWUgbGVuZ3RoO1xuICAgICAgaWYgKGZpcnN0Lmxlbmd0aCAhPT0gc2Vjb25kLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpcnN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzdHJpY3REZWVwRXF1YWwoZmlyc3RbaV0sIHNlY29uZFtpXSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KGZpcnN0KSA9PT0gdHJ1ZSkge1xuICAgICAgLy8gQW4gb2JqZWN0IGlzIGVxdWFsIGlmIGl0IGhhcyB0aGUgc2FtZSBrZXkvdmFsdWUgcGFpcnMuXG4gICAgICB2YXIga2V5c1NlZW4gPSB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBmaXJzdCkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmaXJzdCwga2V5KSkge1xuICAgICAgICAgIGlmIChzdHJpY3REZWVwRXF1YWwoZmlyc3Rba2V5XSwgc2Vjb25kW2tleV0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBrZXlzU2VlbltrZXldID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gTm93IGNoZWNrIHRoYXQgdGhlcmUgYXJlbid0IGFueSBrZXlzIGluIHNlY29uZCB0aGF0IHdlcmVuJ3RcbiAgICAgIC8vIGluIGZpcnN0LlxuICAgICAgZm9yICh2YXIga2V5MiBpbiBzZWNvbmQpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc2Vjb25kLCBrZXkyKSkge1xuICAgICAgICAgIGlmIChrZXlzU2VlbltrZXkyXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRmFsc2Uob2JqKSB7XG4gICAgLy8gRnJvbSB0aGUgc3BlYzpcbiAgICAvLyBBIGZhbHNlIHZhbHVlIGNvcnJlc3BvbmRzIHRvIHRoZSBmb2xsb3dpbmcgdmFsdWVzOlxuICAgIC8vIEVtcHR5IGxpc3RcbiAgICAvLyBFbXB0eSBvYmplY3RcbiAgICAvLyBFbXB0eSBzdHJpbmdcbiAgICAvLyBGYWxzZSBib29sZWFuXG4gICAgLy8gbnVsbCB2YWx1ZVxuXG4gICAgLy8gRmlyc3QgY2hlY2sgdGhlIHNjYWxhciB2YWx1ZXMuXG4gICAgaWYgKG9iaiA9PT0gXCJcIiB8fCBvYmogPT09IGZhbHNlIHx8IG9iaiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqKSAmJiBvYmoubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIENoZWNrIGZvciBhbiBlbXB0eSBhcnJheS5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChvYmopKSB7XG4gICAgICAgIC8vIENoZWNrIGZvciBhbiBlbXB0eSBvYmplY3QuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBhbnkga2V5cywgdGhlblxuICAgICAgICAgICAgLy8gdGhlIG9iamVjdCBpcyBub3QgZW1wdHkgc28gdGhlIG9iamVjdFxuICAgICAgICAgICAgLy8gaXMgbm90IGZhbHNlLlxuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb2JqVmFsdWVzKG9iaikge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZXMucHVzaChvYmpba2V5c1tpXV0pO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2UoYSwgYikge1xuICAgICAgdmFyIG1lcmdlZCA9IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIGEpIHtcbiAgICAgICAgICBtZXJnZWRba2V5XSA9IGFba2V5XTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleTIgaW4gYikge1xuICAgICAgICAgIG1lcmdlZFtrZXkyXSA9IGJba2V5Ml07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVyZ2VkO1xuICB9XG5cbiAgdmFyIHRyaW1MZWZ0O1xuICBpZiAodHlwZW9mIFN0cmluZy5wcm90b3R5cGUudHJpbUxlZnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRyaW1MZWZ0ID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgICByZXR1cm4gc3RyLnRyaW1MZWZ0KCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0cmltTGVmdCA9IGZ1bmN0aW9uKHN0cikge1xuICAgICAgcmV0dXJuIHN0ci5tYXRjaCgvXlxccyooLiopLylbMV07XG4gICAgfTtcbiAgfVxuXG4gIC8vIFR5cGUgY29uc3RhbnRzIHVzZWQgdG8gZGVmaW5lIGZ1bmN0aW9ucy5cbiAgdmFyIFRZUEVfTlVNQkVSID0gMDtcbiAgdmFyIFRZUEVfQU5ZID0gMTtcbiAgdmFyIFRZUEVfU1RSSU5HID0gMjtcbiAgdmFyIFRZUEVfQVJSQVkgPSAzO1xuICB2YXIgVFlQRV9PQkpFQ1QgPSA0O1xuICB2YXIgVFlQRV9CT09MRUFOID0gNTtcbiAgdmFyIFRZUEVfRVhQUkVGID0gNjtcbiAgdmFyIFRZUEVfTlVMTCA9IDc7XG4gIHZhciBUWVBFX0FSUkFZX05VTUJFUiA9IDg7XG4gIHZhciBUWVBFX0FSUkFZX1NUUklORyA9IDk7XG5cbiAgdmFyIFRPS19FT0YgPSBcIkVPRlwiO1xuICB2YXIgVE9LX1VOUVVPVEVESURFTlRJRklFUiA9IFwiVW5xdW90ZWRJZGVudGlmaWVyXCI7XG4gIHZhciBUT0tfUVVPVEVESURFTlRJRklFUiA9IFwiUXVvdGVkSWRlbnRpZmllclwiO1xuICB2YXIgVE9LX1JCUkFDS0VUID0gXCJSYnJhY2tldFwiO1xuICB2YXIgVE9LX1JQQVJFTiA9IFwiUnBhcmVuXCI7XG4gIHZhciBUT0tfQ09NTUEgPSBcIkNvbW1hXCI7XG4gIHZhciBUT0tfQ09MT04gPSBcIkNvbG9uXCI7XG4gIHZhciBUT0tfUkJSQUNFID0gXCJSYnJhY2VcIjtcbiAgdmFyIFRPS19OVU1CRVIgPSBcIk51bWJlclwiO1xuICB2YXIgVE9LX0NVUlJFTlQgPSBcIkN1cnJlbnRcIjtcbiAgdmFyIFRPS19FWFBSRUYgPSBcIkV4cHJlZlwiO1xuICB2YXIgVE9LX1BJUEUgPSBcIlBpcGVcIjtcbiAgdmFyIFRPS19PUiA9IFwiT3JcIjtcbiAgdmFyIFRPS19BTkQgPSBcIkFuZFwiO1xuICB2YXIgVE9LX0VRID0gXCJFUVwiO1xuICB2YXIgVE9LX0dUID0gXCJHVFwiO1xuICB2YXIgVE9LX0xUID0gXCJMVFwiO1xuICB2YXIgVE9LX0dURSA9IFwiR1RFXCI7XG4gIHZhciBUT0tfTFRFID0gXCJMVEVcIjtcbiAgdmFyIFRPS19ORSA9IFwiTkVcIjtcbiAgdmFyIFRPS19GTEFUVEVOID0gXCJGbGF0dGVuXCI7XG4gIHZhciBUT0tfU1RBUiA9IFwiU3RhclwiO1xuICB2YXIgVE9LX0ZJTFRFUiA9IFwiRmlsdGVyXCI7XG4gIHZhciBUT0tfRE9UID0gXCJEb3RcIjtcbiAgdmFyIFRPS19OT1QgPSBcIk5vdFwiO1xuICB2YXIgVE9LX0xCUkFDRSA9IFwiTGJyYWNlXCI7XG4gIHZhciBUT0tfTEJSQUNLRVQgPSBcIkxicmFja2V0XCI7XG4gIHZhciBUT0tfTFBBUkVOPSBcIkxwYXJlblwiO1xuICB2YXIgVE9LX0xJVEVSQUw9IFwiTGl0ZXJhbFwiO1xuXG4gIC8vIFRoZSBcIiZcIiwgXCJbXCIsIFwiPFwiLCBcIj5cIiB0b2tlbnNcbiAgLy8gYXJlIG5vdCBpbiBiYXNpY1Rva2VuIGJlY2F1c2VcbiAgLy8gdGhlcmUgYXJlIHR3byB0b2tlbiB2YXJpYW50c1xuICAvLyAoXCImJlwiLCBcIls/XCIsIFwiPD1cIiwgXCI+PVwiKS4gIFRoaXMgaXMgc3BlY2lhbGx5IGhhbmRsZWRcbiAgLy8gYmVsb3cuXG5cbiAgdmFyIGJhc2ljVG9rZW5zID0ge1xuICAgIFwiLlwiOiBUT0tfRE9ULFxuICAgIFwiKlwiOiBUT0tfU1RBUixcbiAgICBcIixcIjogVE9LX0NPTU1BLFxuICAgIFwiOlwiOiBUT0tfQ09MT04sXG4gICAgXCJ7XCI6IFRPS19MQlJBQ0UsXG4gICAgXCJ9XCI6IFRPS19SQlJBQ0UsXG4gICAgXCJdXCI6IFRPS19SQlJBQ0tFVCxcbiAgICBcIihcIjogVE9LX0xQQVJFTixcbiAgICBcIilcIjogVE9LX1JQQVJFTixcbiAgICBcIkBcIjogVE9LX0NVUlJFTlRcbiAgfTtcblxuICB2YXIgb3BlcmF0b3JTdGFydFRva2VuID0ge1xuICAgICAgXCI8XCI6IHRydWUsXG4gICAgICBcIj5cIjogdHJ1ZSxcbiAgICAgIFwiPVwiOiB0cnVlLFxuICAgICAgXCIhXCI6IHRydWVcbiAgfTtcblxuICB2YXIgc2tpcENoYXJzID0ge1xuICAgICAgXCIgXCI6IHRydWUsXG4gICAgICBcIlxcdFwiOiB0cnVlLFxuICAgICAgXCJcXG5cIjogdHJ1ZVxuICB9O1xuXG5cbiAgZnVuY3Rpb24gaXNBbHBoYShjaCkge1xuICAgICAgcmV0dXJuIChjaCA+PSBcImFcIiAmJiBjaCA8PSBcInpcIikgfHxcbiAgICAgICAgICAgICAoY2ggPj0gXCJBXCIgJiYgY2ggPD0gXCJaXCIpIHx8XG4gICAgICAgICAgICAgY2ggPT09IFwiX1wiO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNOdW0oY2gpIHtcbiAgICAgIHJldHVybiAoY2ggPj0gXCIwXCIgJiYgY2ggPD0gXCI5XCIpIHx8XG4gICAgICAgICAgICAgY2ggPT09IFwiLVwiO1xuICB9XG4gIGZ1bmN0aW9uIGlzQWxwaGFOdW0oY2gpIHtcbiAgICAgIHJldHVybiAoY2ggPj0gXCJhXCIgJiYgY2ggPD0gXCJ6XCIpIHx8XG4gICAgICAgICAgICAgKGNoID49IFwiQVwiICYmIGNoIDw9IFwiWlwiKSB8fFxuICAgICAgICAgICAgIChjaCA+PSBcIjBcIiAmJiBjaCA8PSBcIjlcIikgfHxcbiAgICAgICAgICAgICBjaCA9PT0gXCJfXCI7XG4gIH1cblxuICBmdW5jdGlvbiBMZXhlcigpIHtcbiAgfVxuICBMZXhlci5wcm90b3R5cGUgPSB7XG4gICAgICB0b2tlbml6ZTogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgICAgdmFyIHRva2VucyA9IFtdO1xuICAgICAgICAgIHRoaXMuX2N1cnJlbnQgPSAwO1xuICAgICAgICAgIHZhciBzdGFydDtcbiAgICAgICAgICB2YXIgaWRlbnRpZmllcjtcbiAgICAgICAgICB2YXIgdG9rZW47XG4gICAgICAgICAgd2hpbGUgKHRoaXMuX2N1cnJlbnQgPCBzdHJlYW0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGlmIChpc0FscGhhKHN0cmVhbVt0aGlzLl9jdXJyZW50XSkpIHtcbiAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5fY3VycmVudDtcbiAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXIgPSB0aGlzLl9jb25zdW1lVW5xdW90ZWRJZGVudGlmaWVyKHN0cmVhbSk7XG4gICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7dHlwZTogVE9LX1VOUVVPVEVESURFTlRJRklFUixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnR9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChiYXNpY1Rva2Vuc1tzdHJlYW1bdGhpcy5fY3VycmVudF1dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHt0eXBlOiBiYXNpY1Rva2Vuc1tzdHJlYW1bdGhpcy5fY3VycmVudF1dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHN0cmVhbVt0aGlzLl9jdXJyZW50XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB0aGlzLl9jdXJyZW50fSk7XG4gICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOdW0oc3RyZWFtW3RoaXMuX2N1cnJlbnRdKSkge1xuICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLl9jb25zdW1lTnVtYmVyKHN0cmVhbSk7XG4gICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyZWFtW3RoaXMuX2N1cnJlbnRdID09PSBcIltcIikge1xuICAgICAgICAgICAgICAgICAgLy8gTm8gbmVlZCB0byBpbmNyZW1lbnQgdGhpcy5fY3VycmVudC4gIFRoaXMgaGFwcGVuc1xuICAgICAgICAgICAgICAgICAgLy8gaW4gX2NvbnN1bWVMQnJhY2tldFxuICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLl9jb25zdW1lTEJyYWNrZXQoc3RyZWFtKTtcbiAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJlYW1bdGhpcy5fY3VycmVudF0gPT09IFwiXFxcIlwiKSB7XG4gICAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMuX2N1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICBpZGVudGlmaWVyID0gdGhpcy5fY29uc3VtZVF1b3RlZElkZW50aWZpZXIoc3RyZWFtKTtcbiAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHt0eXBlOiBUT0tfUVVPVEVESURFTlRJRklFUixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnR9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJlYW1bdGhpcy5fY3VycmVudF0gPT09IFwiJ1wiKSB7XG4gICAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMuX2N1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICBpZGVudGlmaWVyID0gdGhpcy5fY29uc3VtZVJhd1N0cmluZ0xpdGVyYWwoc3RyZWFtKTtcbiAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHt0eXBlOiBUT0tfTElURVJBTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnR9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJlYW1bdGhpcy5fY3VycmVudF0gPT09IFwiYFwiKSB7XG4gICAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMuX2N1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICB2YXIgbGl0ZXJhbCA9IHRoaXMuX2NvbnN1bWVMaXRlcmFsKHN0cmVhbSk7XG4gICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7dHlwZTogVE9LX0xJVEVSQUwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGxpdGVyYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0fSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAob3BlcmF0b3JTdGFydFRva2VuW3N0cmVhbVt0aGlzLl9jdXJyZW50XV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godGhpcy5fY29uc3VtZU9wZXJhdG9yKHN0cmVhbSkpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNraXBDaGFyc1tzdHJlYW1bdGhpcy5fY3VycmVudF1dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSB3aGl0ZXNwYWNlLlxuICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCsrO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmVhbVt0aGlzLl9jdXJyZW50XSA9PT0gXCImXCIpIHtcbiAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5fY3VycmVudDtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQrKztcbiAgICAgICAgICAgICAgICAgIGlmIChzdHJlYW1bdGhpcy5fY3VycmVudF0gPT09IFwiJlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCsrO1xuICAgICAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHt0eXBlOiBUT0tfQU5ELCB2YWx1ZTogXCImJlwiLCBzdGFydDogc3RhcnR9KTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgdG9rZW5zLnB1c2goe3R5cGU6IFRPS19FWFBSRUYsIHZhbHVlOiBcIiZcIiwgc3RhcnQ6IHN0YXJ0fSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyZWFtW3RoaXMuX2N1cnJlbnRdID09PSBcInxcIikge1xuICAgICAgICAgICAgICAgICAgc3RhcnQgPSB0aGlzLl9jdXJyZW50O1xuICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCsrO1xuICAgICAgICAgICAgICAgICAgaWYgKHN0cmVhbVt0aGlzLl9jdXJyZW50XSA9PT0gXCJ8XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgdG9rZW5zLnB1c2goe3R5cGU6IFRPS19PUiwgdmFsdWU6IFwifHxcIiwgc3RhcnQ6IHN0YXJ0fSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHt0eXBlOiBUT0tfUElQRSwgdmFsdWU6IFwifFwiLCBzdGFydDogc3RhcnR9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihcIlVua25vd24gY2hhcmFjdGVyOlwiICsgc3RyZWFtW3RoaXMuX2N1cnJlbnRdKTtcbiAgICAgICAgICAgICAgICAgIGVycm9yLm5hbWUgPSBcIkxleGVyRXJyb3JcIjtcbiAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0b2tlbnM7XG4gICAgICB9LFxuXG4gICAgICBfY29uc3VtZVVucXVvdGVkSWRlbnRpZmllcjogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5fY3VycmVudDtcbiAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7XG4gICAgICAgICAgd2hpbGUgKHRoaXMuX2N1cnJlbnQgPCBzdHJlYW0ubGVuZ3RoICYmIGlzQWxwaGFOdW0oc3RyZWFtW3RoaXMuX2N1cnJlbnRdKSkge1xuICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzdHJlYW0uc2xpY2Uoc3RhcnQsIHRoaXMuX2N1cnJlbnQpO1xuICAgICAgfSxcblxuICAgICAgX2NvbnN1bWVRdW90ZWRJZGVudGlmaWVyOiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLl9jdXJyZW50O1xuICAgICAgICAgIHRoaXMuX2N1cnJlbnQrKztcbiAgICAgICAgICB2YXIgbWF4TGVuZ3RoID0gc3RyZWFtLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoc3RyZWFtW3RoaXMuX2N1cnJlbnRdICE9PSBcIlxcXCJcIiAmJiB0aGlzLl9jdXJyZW50IDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICAgIC8vIFlvdSBjYW4gZXNjYXBlIGEgZG91YmxlIHF1b3RlIGFuZCB5b3UgY2FuIGVzY2FwZSBhbiBlc2NhcGUuXG4gICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fY3VycmVudDtcbiAgICAgICAgICAgICAgaWYgKHN0cmVhbVtjdXJyZW50XSA9PT0gXCJcXFxcXCIgJiYgKHN0cmVhbVtjdXJyZW50ICsgMV0gPT09IFwiXFxcXFwiIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbVtjdXJyZW50ICsgMV0gPT09IFwiXFxcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgY3VycmVudCArPSAyO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY3VycmVudCsrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQgPSBjdXJyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7XG4gICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyZWFtLnNsaWNlKHN0YXJ0LCB0aGlzLl9jdXJyZW50KSk7XG4gICAgICB9LFxuXG4gICAgICBfY29uc3VtZVJhd1N0cmluZ0xpdGVyYWw6IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMuX2N1cnJlbnQ7XG4gICAgICAgICAgdGhpcy5fY3VycmVudCsrO1xuICAgICAgICAgIHZhciBtYXhMZW5ndGggPSBzdHJlYW0ubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChzdHJlYW1bdGhpcy5fY3VycmVudF0gIT09IFwiJ1wiICYmIHRoaXMuX2N1cnJlbnQgPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8gWW91IGNhbiBlc2NhcGUgYSBzaW5nbGUgcXVvdGUgYW5kIHlvdSBjYW4gZXNjYXBlIGFuIGVzY2FwZS5cbiAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLl9jdXJyZW50O1xuICAgICAgICAgICAgICBpZiAoc3RyZWFtW2N1cnJlbnRdID09PSBcIlxcXFxcIiAmJiAoc3RyZWFtW2N1cnJlbnQgKyAxXSA9PT0gXCJcXFxcXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtW2N1cnJlbnQgKyAxXSA9PT0gXCInXCIpKSB7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ICs9IDI7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IGN1cnJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX2N1cnJlbnQrKztcbiAgICAgICAgICB2YXIgbGl0ZXJhbCA9IHN0cmVhbS5zbGljZShzdGFydCArIDEsIHRoaXMuX2N1cnJlbnQgLSAxKTtcbiAgICAgICAgICByZXR1cm4gbGl0ZXJhbC5yZXBsYWNlKFwiXFxcXCdcIiwgXCInXCIpO1xuICAgICAgfSxcblxuICAgICAgX2NvbnN1bWVOdW1iZXI6IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMuX2N1cnJlbnQ7XG4gICAgICAgICAgdGhpcy5fY3VycmVudCsrO1xuICAgICAgICAgIHZhciBtYXhMZW5ndGggPSBzdHJlYW0ubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChpc051bShzdHJlYW1bdGhpcy5fY3VycmVudF0pICYmIHRoaXMuX2N1cnJlbnQgPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUludChzdHJlYW0uc2xpY2Uoc3RhcnQsIHRoaXMuX2N1cnJlbnQpKTtcbiAgICAgICAgICByZXR1cm4ge3R5cGU6IFRPS19OVU1CRVIsIHZhbHVlOiB2YWx1ZSwgc3RhcnQ6IHN0YXJ0fTtcbiAgICAgIH0sXG5cbiAgICAgIF9jb25zdW1lTEJyYWNrZXQ6IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMuX2N1cnJlbnQ7XG4gICAgICAgICAgdGhpcy5fY3VycmVudCsrO1xuICAgICAgICAgIGlmIChzdHJlYW1bdGhpcy5fY3VycmVudF0gPT09IFwiP1wiKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQrKztcbiAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBUT0tfRklMVEVSLCB2YWx1ZTogXCJbP1wiLCBzdGFydDogc3RhcnR9O1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RyZWFtW3RoaXMuX2N1cnJlbnRdID09PSBcIl1cIikge1xuICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7XG4gICAgICAgICAgICAgIHJldHVybiB7dHlwZTogVE9LX0ZMQVRURU4sIHZhbHVlOiBcIltdXCIsIHN0YXJ0OiBzdGFydH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBUT0tfTEJSQUNLRVQsIHZhbHVlOiBcIltcIiwgc3RhcnQ6IHN0YXJ0fTtcbiAgICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBfY29uc3VtZU9wZXJhdG9yOiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLl9jdXJyZW50O1xuICAgICAgICAgIHZhciBzdGFydGluZ0NoYXIgPSBzdHJlYW1bc3RhcnRdO1xuICAgICAgICAgIHRoaXMuX2N1cnJlbnQrKztcbiAgICAgICAgICBpZiAoc3RhcnRpbmdDaGFyID09PSBcIiFcIikge1xuICAgICAgICAgICAgICBpZiAoc3RyZWFtW3RoaXMuX2N1cnJlbnRdID09PSBcIj1cIikge1xuICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCsrO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBUT0tfTkUsIHZhbHVlOiBcIiE9XCIsIHN0YXJ0OiBzdGFydH07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBUT0tfTk9ULCB2YWx1ZTogXCIhXCIsIHN0YXJ0OiBzdGFydH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0aW5nQ2hhciA9PT0gXCI8XCIpIHtcbiAgICAgICAgICAgICAgaWYgKHN0cmVhbVt0aGlzLl9jdXJyZW50XSA9PT0gXCI9XCIpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQrKztcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogVE9LX0xURSwgdmFsdWU6IFwiPD1cIiwgc3RhcnQ6IHN0YXJ0fTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogVE9LX0xULCB2YWx1ZTogXCI8XCIsIHN0YXJ0OiBzdGFydH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0aW5nQ2hhciA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgICAgaWYgKHN0cmVhbVt0aGlzLl9jdXJyZW50XSA9PT0gXCI9XCIpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQrKztcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogVE9LX0dURSwgdmFsdWU6IFwiPj1cIiwgc3RhcnQ6IHN0YXJ0fTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogVE9LX0dULCB2YWx1ZTogXCI+XCIsIHN0YXJ0OiBzdGFydH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0aW5nQ2hhciA9PT0gXCI9XCIpIHtcbiAgICAgICAgICAgICAgaWYgKHN0cmVhbVt0aGlzLl9jdXJyZW50XSA9PT0gXCI9XCIpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQrKztcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogVE9LX0VRLCB2YWx1ZTogXCI9PVwiLCBzdGFydDogc3RhcnR9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX2NvbnN1bWVMaXRlcmFsOiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7XG4gICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5fY3VycmVudDtcbiAgICAgICAgICB2YXIgbWF4TGVuZ3RoID0gc3RyZWFtLmxlbmd0aDtcbiAgICAgICAgICB2YXIgbGl0ZXJhbDtcbiAgICAgICAgICB3aGlsZShzdHJlYW1bdGhpcy5fY3VycmVudF0gIT09IFwiYFwiICYmIHRoaXMuX2N1cnJlbnQgPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8gWW91IGNhbiBlc2NhcGUgYSBsaXRlcmFsIGNoYXIgb3IgeW91IGNhbiBlc2NhcGUgdGhlIGVzY2FwZS5cbiAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLl9jdXJyZW50O1xuICAgICAgICAgICAgICBpZiAoc3RyZWFtW2N1cnJlbnRdID09PSBcIlxcXFxcIiAmJiAoc3RyZWFtW2N1cnJlbnQgKyAxXSA9PT0gXCJcXFxcXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtW2N1cnJlbnQgKyAxXSA9PT0gXCJgXCIpKSB7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ICs9IDI7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IGN1cnJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBsaXRlcmFsU3RyaW5nID0gdHJpbUxlZnQoc3RyZWFtLnNsaWNlKHN0YXJ0LCB0aGlzLl9jdXJyZW50KSk7XG4gICAgICAgICAgbGl0ZXJhbFN0cmluZyA9IGxpdGVyYWxTdHJpbmcucmVwbGFjZShcIlxcXFxgXCIsIFwiYFwiKTtcbiAgICAgICAgICBpZiAodGhpcy5fbG9va3NMaWtlSlNPTihsaXRlcmFsU3RyaW5nKSkge1xuICAgICAgICAgICAgICBsaXRlcmFsID0gSlNPTi5wYXJzZShsaXRlcmFsU3RyaW5nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBUcnkgdG8gSlNPTiBwYXJzZSBpdCBhcyBcIjxsaXRlcmFsPlwiXG4gICAgICAgICAgICAgIGxpdGVyYWwgPSBKU09OLnBhcnNlKFwiXFxcIlwiICsgbGl0ZXJhbFN0cmluZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gKzEgZ2V0cyB1cyB0byB0aGUgZW5kaW5nIFwiYFwiLCArMSB0byBtb3ZlIG9uIHRvIHRoZSBuZXh0IGNoYXIuXG4gICAgICAgICAgdGhpcy5fY3VycmVudCsrO1xuICAgICAgICAgIHJldHVybiBsaXRlcmFsO1xuICAgICAgfSxcblxuICAgICAgX2xvb2tzTGlrZUpTT046IGZ1bmN0aW9uKGxpdGVyYWxTdHJpbmcpIHtcbiAgICAgICAgICB2YXIgc3RhcnRpbmdDaGFycyA9IFwiW3tcXFwiXCI7XG4gICAgICAgICAgdmFyIGpzb25MaXRlcmFscyA9IFtcInRydWVcIiwgXCJmYWxzZVwiLCBcIm51bGxcIl07XG4gICAgICAgICAgdmFyIG51bWJlckxvb2tpbmcgPSBcIi0wMTIzNDU2Nzg5XCI7XG5cbiAgICAgICAgICBpZiAobGl0ZXJhbFN0cmluZyA9PT0gXCJcIikge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIGlmIChzdGFydGluZ0NoYXJzLmluZGV4T2YobGl0ZXJhbFN0cmluZ1swXSkgPj0gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGpzb25MaXRlcmFscy5pbmRleE9mKGxpdGVyYWxTdHJpbmcpID49IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChudW1iZXJMb29raW5nLmluZGV4T2YobGl0ZXJhbFN0cmluZ1swXSkgPj0gMCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgSlNPTi5wYXJzZShsaXRlcmFsU3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgfTtcblxuICAgICAgdmFyIGJpbmRpbmdQb3dlciA9IHt9O1xuICAgICAgYmluZGluZ1Bvd2VyW1RPS19FT0ZdID0gMDtcbiAgICAgIGJpbmRpbmdQb3dlcltUT0tfVU5RVU9URURJREVOVElGSUVSXSA9IDA7XG4gICAgICBiaW5kaW5nUG93ZXJbVE9LX1FVT1RFRElERU5USUZJRVJdID0gMDtcbiAgICAgIGJpbmRpbmdQb3dlcltUT0tfUkJSQUNLRVRdID0gMDtcbiAgICAgIGJpbmRpbmdQb3dlcltUT0tfUlBBUkVOXSA9IDA7XG4gICAgICBiaW5kaW5nUG93ZXJbVE9LX0NPTU1BXSA9IDA7XG4gICAgICBiaW5kaW5nUG93ZXJbVE9LX1JCUkFDRV0gPSAwO1xuICAgICAgYmluZGluZ1Bvd2VyW1RPS19OVU1CRVJdID0gMDtcbiAgICAgIGJpbmRpbmdQb3dlcltUT0tfQ1VSUkVOVF0gPSAwO1xuICAgICAgYmluZGluZ1Bvd2VyW1RPS19FWFBSRUZdID0gMDtcbiAgICAgIGJpbmRpbmdQb3dlcltUT0tfUElQRV0gPSAxO1xuICAgICAgYmluZGluZ1Bvd2VyW1RPS19PUl0gPSAyO1xuICAgICAgYmluZGluZ1Bvd2VyW1RPS19BTkRdID0gMztcbiAgICAgIGJpbmRpbmdQb3dlcltUT0tfRVFdID0gNTtcbiAgICAgIGJpbmRpbmdQb3dlcltUT0tfR1RdID0gNTtcbiAgICAgIGJpbmRpbmdQb3dlcltUT0tfTFRdID0gNTtcbiAgICAgIGJpbmRpbmdQb3dlcltUT0tfR1RFXSA9IDU7XG4gICAgICBiaW5kaW5nUG93ZXJbVE9LX0xURV0gPSA1O1xuICAgICAgYmluZGluZ1Bvd2VyW1RPS19ORV0gPSA1O1xuICAgICAgYmluZGluZ1Bvd2VyW1RPS19GTEFUVEVOXSA9IDk7XG4gICAgICBiaW5kaW5nUG93ZXJbVE9LX1NUQVJdID0gMjA7XG4gICAgICBiaW5kaW5nUG93ZXJbVE9LX0ZJTFRFUl0gPSAyMTtcbiAgICAgIGJpbmRpbmdQb3dlcltUT0tfRE9UXSA9IDQwO1xuICAgICAgYmluZGluZ1Bvd2VyW1RPS19OT1RdID0gNDU7XG4gICAgICBiaW5kaW5nUG93ZXJbVE9LX0xCUkFDRV0gPSA1MDtcbiAgICAgIGJpbmRpbmdQb3dlcltUT0tfTEJSQUNLRVRdID0gNTU7XG4gICAgICBiaW5kaW5nUG93ZXJbVE9LX0xQQVJFTl0gPSA2MDtcblxuICBmdW5jdGlvbiBQYXJzZXIoKSB7XG4gIH1cblxuICBQYXJzZXIucHJvdG90eXBlID0ge1xuICAgICAgcGFyc2U6IGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcbiAgICAgICAgICB0aGlzLl9sb2FkVG9rZW5zKGV4cHJlc3Npb24pO1xuICAgICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICAgIHZhciBhc3QgPSB0aGlzLmV4cHJlc3Npb24oMCk7XG4gICAgICAgICAgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSAhPT0gVE9LX0VPRikge1xuICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuX2xvb2thaGVhZFRva2VuKDApO1xuICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICBcIlVuZXhwZWN0ZWQgdG9rZW4gdHlwZTogXCIgKyB0LnR5cGUgKyBcIiwgdmFsdWU6IFwiICsgdC52YWx1ZSk7XG4gICAgICAgICAgICAgIGVycm9yLm5hbWUgPSBcIlBhcnNlckVycm9yXCI7XG4gICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYXN0O1xuICAgICAgfSxcblxuICAgICAgX2xvYWRUb2tlbnM6IGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcbiAgICAgICAgICB2YXIgbGV4ZXIgPSBuZXcgTGV4ZXIoKTtcbiAgICAgICAgICB2YXIgdG9rZW5zID0gbGV4ZXIudG9rZW5pemUoZXhwcmVzc2lvbik7XG4gICAgICAgICAgdG9rZW5zLnB1c2goe3R5cGU6IFRPS19FT0YsIHZhbHVlOiBcIlwiLCBzdGFydDogZXhwcmVzc2lvbi5sZW5ndGh9KTtcbiAgICAgICAgICB0aGlzLnRva2VucyA9IHRva2VucztcbiAgICAgIH0sXG5cbiAgICAgIGV4cHJlc3Npb246IGZ1bmN0aW9uKHJicCkge1xuICAgICAgICAgIHZhciBsZWZ0VG9rZW4gPSB0aGlzLl9sb29rYWhlYWRUb2tlbigwKTtcbiAgICAgICAgICB0aGlzLl9hZHZhbmNlKCk7XG4gICAgICAgICAgdmFyIGxlZnQgPSB0aGlzLm51ZChsZWZ0VG9rZW4pO1xuICAgICAgICAgIHZhciBjdXJyZW50VG9rZW4gPSB0aGlzLl9sb29rYWhlYWQoMCk7XG4gICAgICAgICAgd2hpbGUgKHJicCA8IGJpbmRpbmdQb3dlcltjdXJyZW50VG9rZW5dKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2FkdmFuY2UoKTtcbiAgICAgICAgICAgICAgbGVmdCA9IHRoaXMubGVkKGN1cnJlbnRUb2tlbiwgbGVmdCk7XG4gICAgICAgICAgICAgIGN1cnJlbnRUb2tlbiA9IHRoaXMuX2xvb2thaGVhZCgwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGxlZnQ7XG4gICAgICB9LFxuXG4gICAgICBfbG9va2FoZWFkOiBmdW5jdGlvbihudW1iZXIpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b2tlbnNbdGhpcy5pbmRleCArIG51bWJlcl0udHlwZTtcbiAgICAgIH0sXG5cbiAgICAgIF9sb29rYWhlYWRUb2tlbjogZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5zW3RoaXMuaW5kZXggKyBudW1iZXJdO1xuICAgICAgfSxcblxuICAgICAgX2FkdmFuY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgIH0sXG5cbiAgICAgIG51ZDogZnVuY3Rpb24odG9rZW4pIHtcbiAgICAgICAgdmFyIGxlZnQ7XG4gICAgICAgIHZhciByaWdodDtcbiAgICAgICAgdmFyIGV4cHJlc3Npb247XG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgIGNhc2UgVE9LX0xJVEVSQUw6XG4gICAgICAgICAgICByZXR1cm4ge3R5cGU6IFwiTGl0ZXJhbFwiLCB2YWx1ZTogdG9rZW4udmFsdWV9O1xuICAgICAgICAgIGNhc2UgVE9LX1VOUVVPVEVESURFTlRJRklFUjpcbiAgICAgICAgICAgIHJldHVybiB7dHlwZTogXCJGaWVsZFwiLCBuYW1lOiB0b2tlbi52YWx1ZX07XG4gICAgICAgICAgY2FzZSBUT0tfUVVPVEVESURFTlRJRklFUjpcbiAgICAgICAgICAgIHZhciBub2RlID0ge3R5cGU6IFwiRmllbGRcIiwgbmFtZTogdG9rZW4udmFsdWV9O1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSA9PT0gVE9LX0xQQVJFTikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlF1b3RlZCBpZGVudGlmaWVyIG5vdCBhbGxvd2VkIGZvciBmdW5jdGlvbiBuYW1lcy5cIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBUT0tfTk9UOlxuICAgICAgICAgICAgcmlnaHQgPSB0aGlzLmV4cHJlc3Npb24oYmluZGluZ1Bvd2VyLk5vdCk7XG4gICAgICAgICAgICByZXR1cm4ge3R5cGU6IFwiTm90RXhwcmVzc2lvblwiLCBjaGlsZHJlbjogW3JpZ2h0XX07XG4gICAgICAgICAgY2FzZSBUT0tfU1RBUjpcbiAgICAgICAgICAgIGxlZnQgPSB7dHlwZTogXCJJZGVudGl0eVwifTtcbiAgICAgICAgICAgIHJpZ2h0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9sb29rYWhlYWQoMCkgPT09IFRPS19SQlJBQ0tFVCkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpbiBhIG11bHRpc2VsZWN0LFxuICAgICAgICAgICAgICAgIC8vIFthLCBiLCAqXVxuICAgICAgICAgICAgICAgIHJpZ2h0ID0ge3R5cGU6IFwiSWRlbnRpdHlcIn07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5fcGFyc2VQcm9qZWN0aW9uUkhTKGJpbmRpbmdQb3dlci5TdGFyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7dHlwZTogXCJWYWx1ZVByb2plY3Rpb25cIiwgY2hpbGRyZW46IFtsZWZ0LCByaWdodF19O1xuICAgICAgICAgIGNhc2UgVE9LX0ZJTFRFUjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxlZCh0b2tlbi50eXBlLCB7dHlwZTogXCJJZGVudGl0eVwifSk7XG4gICAgICAgICAgY2FzZSBUT0tfTEJSQUNFOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlTXVsdGlzZWxlY3RIYXNoKCk7XG4gICAgICAgICAgY2FzZSBUT0tfRkxBVFRFTjpcbiAgICAgICAgICAgIGxlZnQgPSB7dHlwZTogVE9LX0ZMQVRURU4sIGNoaWxkcmVuOiBbe3R5cGU6IFwiSWRlbnRpdHlcIn1dfTtcbiAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5fcGFyc2VQcm9qZWN0aW9uUkhTKGJpbmRpbmdQb3dlci5GbGF0dGVuKTtcbiAgICAgICAgICAgIHJldHVybiB7dHlwZTogXCJQcm9qZWN0aW9uXCIsIGNoaWxkcmVuOiBbbGVmdCwgcmlnaHRdfTtcbiAgICAgICAgICBjYXNlIFRPS19MQlJBQ0tFVDpcbiAgICAgICAgICAgIGlmICh0aGlzLl9sb29rYWhlYWQoMCkgPT09IFRPS19OVU1CRVIgfHwgdGhpcy5fbG9va2FoZWFkKDApID09PSBUT0tfQ09MT04pIHtcbiAgICAgICAgICAgICAgICByaWdodCA9IHRoaXMuX3BhcnNlSW5kZXhFeHByZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2plY3RJZlNsaWNlKHt0eXBlOiBcIklkZW50aXR5XCJ9LCByaWdodCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSA9PT0gVE9LX1NUQVIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9va2FoZWFkKDEpID09PSBUT0tfUkJSQUNLRVQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hZHZhbmNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWR2YW5jZSgpO1xuICAgICAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5fcGFyc2VQcm9qZWN0aW9uUkhTKGJpbmRpbmdQb3dlci5TdGFyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6IFwiUHJvamVjdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFt7dHlwZTogXCJJZGVudGl0eVwifSwgcmlnaHRdfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlTXVsdGlzZWxlY3RMaXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFRPS19DVVJSRU5UOlxuICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBUT0tfQ1VSUkVOVH07XG4gICAgICAgICAgY2FzZSBUT0tfRVhQUkVGOlxuICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHRoaXMuZXhwcmVzc2lvbihiaW5kaW5nUG93ZXIuRXhwcmVmKTtcbiAgICAgICAgICAgIHJldHVybiB7dHlwZTogXCJFeHByZXNzaW9uUmVmZXJlbmNlXCIsIGNoaWxkcmVuOiBbZXhwcmVzc2lvbl19O1xuICAgICAgICAgIGNhc2UgVE9LX0xQQVJFTjpcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5fbG9va2FoZWFkKDApICE9PSBUT0tfUlBBUkVOKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9sb29rYWhlYWQoMCkgPT09IFRPS19DVVJSRU5UKSB7XG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHt0eXBlOiBUT0tfQ1VSUkVOVH07XG4gICAgICAgICAgICAgICAgdGhpcy5fYWR2YW5jZSgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4cHJlc3Npb24gPSB0aGlzLmV4cHJlc3Npb24oMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYXJncy5wdXNoKGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbWF0Y2goVE9LX1JQQVJFTik7XG4gICAgICAgICAgICByZXR1cm4gYXJnc1swXTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhpcy5fZXJyb3JUb2tlbih0b2tlbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIGxlZDogZnVuY3Rpb24odG9rZW5OYW1lLCBsZWZ0KSB7XG4gICAgICAgIHZhciByaWdodDtcbiAgICAgICAgc3dpdGNoKHRva2VuTmFtZSkge1xuICAgICAgICAgIGNhc2UgVE9LX0RPVDpcbiAgICAgICAgICAgIHZhciByYnAgPSBiaW5kaW5nUG93ZXIuRG90O1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSAhPT0gVE9LX1NUQVIpIHtcbiAgICAgICAgICAgICAgICByaWdodCA9IHRoaXMuX3BhcnNlRG90UkhTKHJicCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBcIlN1YmV4cHJlc3Npb25cIiwgY2hpbGRyZW46IFtsZWZ0LCByaWdodF19O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGluZyBhIHByb2plY3Rpb24uXG4gICAgICAgICAgICAgICAgdGhpcy5fYWR2YW5jZSgpO1xuICAgICAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5fcGFyc2VQcm9qZWN0aW9uUkhTKHJicCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBcIlZhbHVlUHJvamVjdGlvblwiLCBjaGlsZHJlbjogW2xlZnQsIHJpZ2h0XX07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFRPS19QSVBFOlxuICAgICAgICAgICAgcmlnaHQgPSB0aGlzLmV4cHJlc3Npb24oYmluZGluZ1Bvd2VyLlBpcGUpO1xuICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBUT0tfUElQRSwgY2hpbGRyZW46IFtsZWZ0LCByaWdodF19O1xuICAgICAgICAgIGNhc2UgVE9LX09SOlxuICAgICAgICAgICAgcmlnaHQgPSB0aGlzLmV4cHJlc3Npb24oYmluZGluZ1Bvd2VyLk9yKTtcbiAgICAgICAgICAgIHJldHVybiB7dHlwZTogXCJPckV4cHJlc3Npb25cIiwgY2hpbGRyZW46IFtsZWZ0LCByaWdodF19O1xuICAgICAgICAgIGNhc2UgVE9LX0FORDpcbiAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5leHByZXNzaW9uKGJpbmRpbmdQb3dlci5BbmQpO1xuICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBcIkFuZEV4cHJlc3Npb25cIiwgY2hpbGRyZW46IFtsZWZ0LCByaWdodF19O1xuICAgICAgICAgIGNhc2UgVE9LX0xQQVJFTjpcbiAgICAgICAgICAgIHZhciBuYW1lID0gbGVmdC5uYW1lO1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIHZhciBleHByZXNzaW9uLCBub2RlO1xuICAgICAgICAgICAgd2hpbGUgKHRoaXMuX2xvb2thaGVhZCgwKSAhPT0gVE9LX1JQQVJFTikge1xuICAgICAgICAgICAgICBpZiAodGhpcy5fbG9va2FoZWFkKDApID09PSBUT0tfQ1VSUkVOVCkge1xuICAgICAgICAgICAgICAgIGV4cHJlc3Npb24gPSB7dHlwZTogVE9LX0NVUlJFTlR9O1xuICAgICAgICAgICAgICAgIHRoaXMuX2FkdmFuY2UoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uID0gdGhpcy5leHByZXNzaW9uKDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9sb29rYWhlYWQoMCkgPT09IFRPS19DT01NQSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21hdGNoKFRPS19DT01NQSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYXJncy5wdXNoKGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbWF0Y2goVE9LX1JQQVJFTik7XG4gICAgICAgICAgICBub2RlID0ge3R5cGU6IFwiRnVuY3Rpb25cIiwgbmFtZTogbmFtZSwgY2hpbGRyZW46IGFyZ3N9O1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgY2FzZSBUT0tfRklMVEVSOlxuICAgICAgICAgICAgdmFyIGNvbmRpdGlvbiA9IHRoaXMuZXhwcmVzc2lvbigwKTtcbiAgICAgICAgICAgIHRoaXMuX21hdGNoKFRPS19SQlJBQ0tFVCk7XG4gICAgICAgICAgICBpZiAodGhpcy5fbG9va2FoZWFkKDApID09PSBUT0tfRkxBVFRFTikge1xuICAgICAgICAgICAgICByaWdodCA9IHt0eXBlOiBcIklkZW50aXR5XCJ9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmlnaHQgPSB0aGlzLl9wYXJzZVByb2plY3Rpb25SSFMoYmluZGluZ1Bvd2VyLkZpbHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge3R5cGU6IFwiRmlsdGVyUHJvamVjdGlvblwiLCBjaGlsZHJlbjogW2xlZnQsIHJpZ2h0LCBjb25kaXRpb25dfTtcbiAgICAgICAgICBjYXNlIFRPS19GTEFUVEVOOlxuICAgICAgICAgICAgdmFyIGxlZnROb2RlID0ge3R5cGU6IFRPS19GTEFUVEVOLCBjaGlsZHJlbjogW2xlZnRdfTtcbiAgICAgICAgICAgIHZhciByaWdodE5vZGUgPSB0aGlzLl9wYXJzZVByb2plY3Rpb25SSFMoYmluZGluZ1Bvd2VyLkZsYXR0ZW4pO1xuICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBcIlByb2plY3Rpb25cIiwgY2hpbGRyZW46IFtsZWZ0Tm9kZSwgcmlnaHROb2RlXX07XG4gICAgICAgICAgY2FzZSBUT0tfRVE6XG4gICAgICAgICAgY2FzZSBUT0tfTkU6XG4gICAgICAgICAgY2FzZSBUT0tfR1Q6XG4gICAgICAgICAgY2FzZSBUT0tfR1RFOlxuICAgICAgICAgIGNhc2UgVE9LX0xUOlxuICAgICAgICAgIGNhc2UgVE9LX0xURTpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJzZUNvbXBhcmF0b3IobGVmdCwgdG9rZW5OYW1lKTtcbiAgICAgICAgICBjYXNlIFRPS19MQlJBQ0tFVDpcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IHRoaXMuX2xvb2thaGVhZFRva2VuKDApO1xuICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IFRPS19OVU1CRVIgfHwgdG9rZW4udHlwZSA9PT0gVE9LX0NPTE9OKSB7XG4gICAgICAgICAgICAgICAgcmlnaHQgPSB0aGlzLl9wYXJzZUluZGV4RXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm9qZWN0SWZTbGljZShsZWZ0LCByaWdodCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX21hdGNoKFRPS19TVEFSKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXRjaChUT0tfUkJSQUNLRVQpO1xuICAgICAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5fcGFyc2VQcm9qZWN0aW9uUkhTKGJpbmRpbmdQb3dlci5TdGFyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6IFwiUHJvamVjdGlvblwiLCBjaGlsZHJlbjogW2xlZnQsIHJpZ2h0XX07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhpcy5fZXJyb3JUb2tlbih0aGlzLl9sb29rYWhlYWRUb2tlbigwKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIF9tYXRjaDogZnVuY3Rpb24odG9rZW5UeXBlKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSA9PT0gdG9rZW5UeXBlKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2FkdmFuY2UoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuX2xvb2thaGVhZFRva2VuKDApO1xuICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoXCJFeHBlY3RlZCBcIiArIHRva2VuVHlwZSArIFwiLCBnb3Q6IFwiICsgdC50eXBlKTtcbiAgICAgICAgICAgICAgZXJyb3IubmFtZSA9IFwiUGFyc2VyRXJyb3JcIjtcbiAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX2Vycm9yVG9rZW46IGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKFwiSW52YWxpZCB0b2tlbiAoXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi50eXBlICsgXCIpOiBcXFwiXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi52YWx1ZSArIFwiXFxcIlwiKTtcbiAgICAgICAgICBlcnJvci5uYW1lID0gXCJQYXJzZXJFcnJvclwiO1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfSxcblxuXG4gICAgICBfcGFyc2VJbmRleEV4cHJlc3Npb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICh0aGlzLl9sb29rYWhlYWQoMCkgPT09IFRPS19DT0xPTiB8fCB0aGlzLl9sb29rYWhlYWQoMSkgPT09IFRPS19DT0xPTikge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFyc2VTbGljZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgbm9kZSA9IHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiSW5kZXhcIixcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLl9sb29rYWhlYWRUb2tlbigwKS52YWx1ZX07XG4gICAgICAgICAgICAgIHRoaXMuX2FkdmFuY2UoKTtcbiAgICAgICAgICAgICAgdGhpcy5fbWF0Y2goVE9LX1JCUkFDS0VUKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX3Byb2plY3RJZlNsaWNlOiBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgICAgICAgIHZhciBpbmRleEV4cHIgPSB7dHlwZTogXCJJbmRleEV4cHJlc3Npb25cIiwgY2hpbGRyZW46IFtsZWZ0LCByaWdodF19O1xuICAgICAgICAgIGlmIChyaWdodC50eXBlID09PSBcIlNsaWNlXCIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiUHJvamVjdGlvblwiLFxuICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtpbmRleEV4cHIsIHRoaXMuX3BhcnNlUHJvamVjdGlvblJIUyhiaW5kaW5nUG93ZXIuU3RhcildXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGluZGV4RXhwcjtcbiAgICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBfcGFyc2VTbGljZUV4cHJlc3Npb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIFtzdGFydDplbmQ6c3RlcF0gd2hlcmUgZWFjaCBwYXJ0IGlzIG9wdGlvbmFsLCBhcyB3ZWxsIGFzIHRoZSBsYXN0XG4gICAgICAgICAgLy8gY29sb24uXG4gICAgICAgICAgdmFyIHBhcnRzID0gW251bGwsIG51bGwsIG51bGxdO1xuICAgICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgICAgdmFyIGN1cnJlbnRUb2tlbiA9IHRoaXMuX2xvb2thaGVhZCgwKTtcbiAgICAgICAgICB3aGlsZSAoY3VycmVudFRva2VuICE9PSBUT0tfUkJSQUNLRVQgJiYgaW5kZXggPCAzKSB7XG4gICAgICAgICAgICAgIGlmIChjdXJyZW50VG9rZW4gPT09IFRPS19DT0xPTikge1xuICAgICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2FkdmFuY2UoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50VG9rZW4gPT09IFRPS19OVU1CRVIpIHtcbiAgICAgICAgICAgICAgICAgIHBhcnRzW2luZGV4XSA9IHRoaXMuX2xvb2thaGVhZFRva2VuKDApLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgdGhpcy5fYWR2YW5jZSgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl9sb29rYWhlYWQoMCk7XG4gICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoXCJTeW50YXggZXJyb3IsIHVuZXhwZWN0ZWQgdG9rZW46IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnZhbHVlICsgXCIoXCIgKyB0LnR5cGUgKyBcIilcIik7XG4gICAgICAgICAgICAgICAgICBlcnJvci5uYW1lID0gXCJQYXJzZXJlcnJvclwiO1xuICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY3VycmVudFRva2VuID0gdGhpcy5fbG9va2FoZWFkKDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl9tYXRjaChUT0tfUkJSQUNLRVQpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHR5cGU6IFwiU2xpY2VcIixcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHBhcnRzXG4gICAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIF9wYXJzZUNvbXBhcmF0b3I6IGZ1bmN0aW9uKGxlZnQsIGNvbXBhcmF0b3IpIHtcbiAgICAgICAgdmFyIHJpZ2h0ID0gdGhpcy5leHByZXNzaW9uKGJpbmRpbmdQb3dlcltjb21wYXJhdG9yXSk7XG4gICAgICAgIHJldHVybiB7dHlwZTogXCJDb21wYXJhdG9yXCIsIG5hbWU6IGNvbXBhcmF0b3IsIGNoaWxkcmVuOiBbbGVmdCwgcmlnaHRdfTtcbiAgICAgIH0sXG5cbiAgICAgIF9wYXJzZURvdFJIUzogZnVuY3Rpb24ocmJwKSB7XG4gICAgICAgICAgdmFyIGxvb2thaGVhZCA9IHRoaXMuX2xvb2thaGVhZCgwKTtcbiAgICAgICAgICB2YXIgZXhwclRva2VucyA9IFtUT0tfVU5RVU9URURJREVOVElGSUVSLCBUT0tfUVVPVEVESURFTlRJRklFUiwgVE9LX1NUQVJdO1xuICAgICAgICAgIGlmIChleHByVG9rZW5zLmluZGV4T2YobG9va2FoZWFkKSA+PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmV4cHJlc3Npb24ocmJwKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxvb2thaGVhZCA9PT0gVE9LX0xCUkFDS0VUKSB7XG4gICAgICAgICAgICAgIHRoaXMuX21hdGNoKFRPS19MQlJBQ0tFVCk7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJzZU11bHRpc2VsZWN0TGlzdCgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobG9va2FoZWFkID09PSBUT0tfTEJSQUNFKSB7XG4gICAgICAgICAgICAgIHRoaXMuX21hdGNoKFRPS19MQlJBQ0UpO1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFyc2VNdWx0aXNlbGVjdEhhc2goKTtcbiAgICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBfcGFyc2VQcm9qZWN0aW9uUkhTOiBmdW5jdGlvbihyYnApIHtcbiAgICAgICAgICB2YXIgcmlnaHQ7XG4gICAgICAgICAgaWYgKGJpbmRpbmdQb3dlclt0aGlzLl9sb29rYWhlYWQoMCldIDwgMTApIHtcbiAgICAgICAgICAgICAgcmlnaHQgPSB7dHlwZTogXCJJZGVudGl0eVwifTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSA9PT0gVE9LX0xCUkFDS0VUKSB7XG4gICAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5leHByZXNzaW9uKHJicCk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9sb29rYWhlYWQoMCkgPT09IFRPS19GSUxURVIpIHtcbiAgICAgICAgICAgICAgcmlnaHQgPSB0aGlzLmV4cHJlc3Npb24ocmJwKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSA9PT0gVE9LX0RPVCkge1xuICAgICAgICAgICAgICB0aGlzLl9tYXRjaChUT0tfRE9UKTtcbiAgICAgICAgICAgICAgcmlnaHQgPSB0aGlzLl9wYXJzZURvdFJIUyhyYnApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fbG9va2FoZWFkVG9rZW4oMCk7XG4gICAgICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihcIlN5dGFueCBlcnJvciwgdW5leHBlY3RlZCB0b2tlbjogXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC52YWx1ZSArIFwiKFwiICsgdC50eXBlICsgXCIpXCIpO1xuICAgICAgICAgICAgICBlcnJvci5uYW1lID0gXCJQYXJzZXJFcnJvclwiO1xuICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJpZ2h0O1xuICAgICAgfSxcblxuICAgICAgX3BhcnNlTXVsdGlzZWxlY3RMaXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZXhwcmVzc2lvbnMgPSBbXTtcbiAgICAgICAgICB3aGlsZSAodGhpcy5fbG9va2FoZWFkKDApICE9PSBUT0tfUkJSQUNLRVQpIHtcbiAgICAgICAgICAgICAgdmFyIGV4cHJlc3Npb24gPSB0aGlzLmV4cHJlc3Npb24oMCk7XG4gICAgICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2goZXhwcmVzc2lvbik7XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9sb29rYWhlYWQoMCkgPT09IFRPS19DT01NQSkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5fbWF0Y2goVE9LX0NPTU1BKTtcbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9sb29rYWhlYWQoMCkgPT09IFRPS19SQlJBQ0tFVCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIHRva2VuIFJicmFja2V0XCIpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX21hdGNoKFRPS19SQlJBQ0tFVCk7XG4gICAgICAgICAgcmV0dXJuIHt0eXBlOiBcIk11bHRpU2VsZWN0TGlzdFwiLCBjaGlsZHJlbjogZXhwcmVzc2lvbnN9O1xuICAgICAgfSxcblxuICAgICAgX3BhcnNlTXVsdGlzZWxlY3RIYXNoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gW107XG4gICAgICAgIHZhciBpZGVudGlmaWVyVHlwZXMgPSBbVE9LX1VOUVVPVEVESURFTlRJRklFUiwgVE9LX1FVT1RFRElERU5USUZJRVJdO1xuICAgICAgICB2YXIga2V5VG9rZW4sIGtleU5hbWUsIHZhbHVlLCBub2RlO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAga2V5VG9rZW4gPSB0aGlzLl9sb29rYWhlYWRUb2tlbigwKTtcbiAgICAgICAgICBpZiAoaWRlbnRpZmllclR5cGVzLmluZGV4T2Yoa2V5VG9rZW4udHlwZSkgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RpbmcgYW4gaWRlbnRpZmllciB0b2tlbiwgZ290OiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5VG9rZW4udHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGtleU5hbWUgPSBrZXlUb2tlbi52YWx1ZTtcbiAgICAgICAgICB0aGlzLl9hZHZhbmNlKCk7XG4gICAgICAgICAgdGhpcy5fbWF0Y2goVE9LX0NPTE9OKTtcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuZXhwcmVzc2lvbigwKTtcbiAgICAgICAgICBub2RlID0ge3R5cGU6IFwiS2V5VmFsdWVQYWlyXCIsIG5hbWU6IGtleU5hbWUsIHZhbHVlOiB2YWx1ZX07XG4gICAgICAgICAgcGFpcnMucHVzaChub2RlKTtcbiAgICAgICAgICBpZiAodGhpcy5fbG9va2FoZWFkKDApID09PSBUT0tfQ09NTUEpIHtcbiAgICAgICAgICAgIHRoaXMuX21hdGNoKFRPS19DT01NQSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9sb29rYWhlYWQoMCkgPT09IFRPS19SQlJBQ0UpIHtcbiAgICAgICAgICAgIHRoaXMuX21hdGNoKFRPS19SQlJBQ0UpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7dHlwZTogXCJNdWx0aVNlbGVjdEhhc2hcIiwgY2hpbGRyZW46IHBhaXJzfTtcbiAgICAgIH1cbiAgfTtcblxuXG4gIGZ1bmN0aW9uIFRyZWVJbnRlcnByZXRlcihydW50aW1lKSB7XG4gICAgdGhpcy5ydW50aW1lID0gcnVudGltZTtcbiAgfVxuXG4gIFRyZWVJbnRlcnByZXRlci5wcm90b3R5cGUgPSB7XG4gICAgICBzZWFyY2g6IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudmlzaXQobm9kZSwgdmFsdWUpO1xuICAgICAgfSxcblxuICAgICAgdmlzaXQ6IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKSB7XG4gICAgICAgICAgdmFyIG1hdGNoZWQsIGN1cnJlbnQsIHJlc3VsdCwgZmlyc3QsIHNlY29uZCwgZmllbGQsIGxlZnQsIHJpZ2h0LCBjb2xsZWN0ZWQsIGk7XG4gICAgICAgICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJGaWVsZFwiOlxuICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgIGZpZWxkID0gdmFsdWVbbm9kZS5uYW1lXTtcbiAgICAgICAgICAgICAgICAgIGlmIChmaWVsZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJTdWJleHByZXNzaW9uXCI6XG4gICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMudmlzaXQobm9kZS5jaGlsZHJlblswXSwgdmFsdWUpO1xuICAgICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzFdLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlIFwiSW5kZXhFeHByZXNzaW9uXCI6XG4gICAgICAgICAgICAgIGxlZnQgPSB0aGlzLnZpc2l0KG5vZGUuY2hpbGRyZW5bMF0sIHZhbHVlKTtcbiAgICAgICAgICAgICAgcmlnaHQgPSB0aGlzLnZpc2l0KG5vZGUuY2hpbGRyZW5bMV0sIGxlZnQpO1xuICAgICAgICAgICAgICByZXR1cm4gcmlnaHQ7XG4gICAgICAgICAgICBjYXNlIFwiSW5kZXhcIjpcbiAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBpbmRleCA9IG5vZGUudmFsdWU7XG4gICAgICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IHZhbHVlLmxlbmd0aCArIGluZGV4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlW2luZGV4XTtcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSBcIlNsaWNlXCI6XG4gICAgICAgICAgICAgIGlmICghaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgc2xpY2VQYXJhbXMgPSBub2RlLmNoaWxkcmVuLnNsaWNlKDApO1xuICAgICAgICAgICAgICB2YXIgY29tcHV0ZWQgPSB0aGlzLmNvbXB1dGVTbGljZVBhcmFtcyh2YWx1ZS5sZW5ndGgsIHNsaWNlUGFyYW1zKTtcbiAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gY29tcHV0ZWRbMF07XG4gICAgICAgICAgICAgIHZhciBzdG9wID0gY29tcHV0ZWRbMV07XG4gICAgICAgICAgICAgIHZhciBzdGVwID0gY29tcHV0ZWRbMl07XG4gICAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgICBpZiAoc3RlcCA+IDApIHtcbiAgICAgICAgICAgICAgICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgc3RvcDsgaSArPSBzdGVwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWVbaV0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPiBzdG9wOyBpICs9IHN0ZXApIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZVtpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgXCJQcm9qZWN0aW9uXCI6XG4gICAgICAgICAgICAgIC8vIEV2YWx1YXRlIGxlZnQgY2hpbGQuXG4gICAgICAgICAgICAgIHZhciBiYXNlID0gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzBdLCB2YWx1ZSk7XG4gICAgICAgICAgICAgIGlmICghaXNBcnJheShiYXNlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbGxlY3RlZCA9IFtdO1xuICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYmFzZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0aGlzLnZpc2l0KG5vZGUuY2hpbGRyZW5bMV0sIGJhc2VbaV0pO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBjb2xsZWN0ZWQucHVzaChjdXJyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3RlZDtcbiAgICAgICAgICAgIGNhc2UgXCJWYWx1ZVByb2plY3Rpb25cIjpcbiAgICAgICAgICAgICAgLy8gRXZhbHVhdGUgbGVmdCBjaGlsZC5cbiAgICAgICAgICAgICAgYmFzZSA9IHRoaXMudmlzaXQobm9kZS5jaGlsZHJlblswXSwgdmFsdWUpO1xuICAgICAgICAgICAgICBpZiAoIWlzT2JqZWN0KGJhc2UpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29sbGVjdGVkID0gW107XG4gICAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBvYmpWYWx1ZXMoYmFzZSk7XG4gICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzFdLCB2YWx1ZXNbaV0pO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBjb2xsZWN0ZWQucHVzaChjdXJyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3RlZDtcbiAgICAgICAgICAgIGNhc2UgXCJGaWx0ZXJQcm9qZWN0aW9uXCI6XG4gICAgICAgICAgICAgIGJhc2UgPSB0aGlzLnZpc2l0KG5vZGUuY2hpbGRyZW5bMF0sIHZhbHVlKTtcbiAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KGJhc2UpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkID0gW107XG4gICAgICAgICAgICAgIHZhciBmaW5hbFJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGJhc2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVkID0gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzJdLCBiYXNlW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzRmFsc2UobWF0Y2hlZCkpIHtcbiAgICAgICAgICAgICAgICAgIGZpbHRlcmVkLnB1c2goYmFzZVtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZmlsdGVyZWQubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzFdLCBmaWx0ZXJlZFtqXSk7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIGZpbmFsUmVzdWx0cy5wdXNoKGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmluYWxSZXN1bHRzO1xuICAgICAgICAgICAgY2FzZSBcIkNvbXBhcmF0b3JcIjpcbiAgICAgICAgICAgICAgZmlyc3QgPSB0aGlzLnZpc2l0KG5vZGUuY2hpbGRyZW5bMF0sIHZhbHVlKTtcbiAgICAgICAgICAgICAgc2Vjb25kID0gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzFdLCB2YWx1ZSk7XG4gICAgICAgICAgICAgIHN3aXRjaChub2RlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFRPS19FUTpcbiAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHN0cmljdERlZXBFcXVhbChmaXJzdCwgc2Vjb25kKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVE9LX05FOlxuICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gIXN0cmljdERlZXBFcXVhbChmaXJzdCwgc2Vjb25kKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVE9LX0dUOlxuICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZmlyc3QgPiBzZWNvbmQ7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFRPS19HVEU6XG4gICAgICAgICAgICAgICAgICByZXN1bHQgPSBmaXJzdCA+PSBzZWNvbmQ7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFRPS19MVDpcbiAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZpcnN0IDwgc2Vjb25kO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUT0tfTFRFOlxuICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZmlyc3QgPD0gc2Vjb25kO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gY29tcGFyYXRvcjogXCIgKyBub2RlLm5hbWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlIFRPS19GTEFUVEVOOlxuICAgICAgICAgICAgICB2YXIgb3JpZ2luYWwgPSB0aGlzLnZpc2l0KG5vZGUuY2hpbGRyZW5bMF0sIHZhbHVlKTtcbiAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBtZXJnZWQgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG9yaWdpbmFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IG9yaWdpbmFsW2ldO1xuICAgICAgICAgICAgICAgIGlmIChpc0FycmF5KGN1cnJlbnQpKSB7XG4gICAgICAgICAgICAgICAgICBtZXJnZWQucHVzaC5hcHBseShtZXJnZWQsIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBtZXJnZWQucHVzaChjdXJyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIG1lcmdlZDtcbiAgICAgICAgICAgIGNhc2UgXCJJZGVudGl0eVwiOlxuICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICBjYXNlIFwiTXVsdGlTZWxlY3RMaXN0XCI6XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbGxlY3RlZCA9IFtdO1xuICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgY29sbGVjdGVkLnB1c2godGhpcy52aXNpdChub2RlLmNoaWxkcmVuW2ldLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBjb2xsZWN0ZWQ7XG4gICAgICAgICAgICBjYXNlIFwiTXVsdGlTZWxlY3RIYXNoXCI6XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbGxlY3RlZCA9IHt9O1xuICAgICAgICAgICAgICB2YXIgY2hpbGQ7XG4gICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGNvbGxlY3RlZFtjaGlsZC5uYW1lXSA9IHRoaXMudmlzaXQoY2hpbGQudmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gY29sbGVjdGVkO1xuICAgICAgICAgICAgY2FzZSBcIk9yRXhwcmVzc2lvblwiOlxuICAgICAgICAgICAgICBtYXRjaGVkID0gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzBdLCB2YWx1ZSk7XG4gICAgICAgICAgICAgIGlmIChpc0ZhbHNlKG1hdGNoZWQpKSB7XG4gICAgICAgICAgICAgICAgICBtYXRjaGVkID0gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzFdLCB2YWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgICAgICBjYXNlIFwiQW5kRXhwcmVzc2lvblwiOlxuICAgICAgICAgICAgICBmaXJzdCA9IHRoaXMudmlzaXQobm9kZS5jaGlsZHJlblswXSwgdmFsdWUpO1xuXG4gICAgICAgICAgICAgIGlmIChpc0ZhbHNlKGZpcnN0KSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzFdLCB2YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIFwiTm90RXhwcmVzc2lvblwiOlxuICAgICAgICAgICAgICBmaXJzdCA9IHRoaXMudmlzaXQobm9kZS5jaGlsZHJlblswXSwgdmFsdWUpO1xuICAgICAgICAgICAgICByZXR1cm4gaXNGYWxzZShmaXJzdCk7XG4gICAgICAgICAgICBjYXNlIFwiTGl0ZXJhbFwiOlxuICAgICAgICAgICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICAgICAgICAgIGNhc2UgVE9LX1BJUEU6XG4gICAgICAgICAgICAgIGxlZnQgPSB0aGlzLnZpc2l0KG5vZGUuY2hpbGRyZW5bMF0sIHZhbHVlKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlzaXQobm9kZS5jaGlsZHJlblsxXSwgbGVmdCk7XG4gICAgICAgICAgICBjYXNlIFRPS19DVVJSRU5UOlxuICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICBjYXNlIFwiRnVuY3Rpb25cIjpcbiAgICAgICAgICAgICAgdmFyIHJlc29sdmVkQXJncyA9IFtdO1xuICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRBcmdzLnB1c2godGhpcy52aXNpdChub2RlLmNoaWxkcmVuW2ldLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJ1bnRpbWUuY2FsbEZ1bmN0aW9uKG5vZGUubmFtZSwgcmVzb2x2ZWRBcmdzKTtcbiAgICAgICAgICAgIGNhc2UgXCJFeHByZXNzaW9uUmVmZXJlbmNlXCI6XG4gICAgICAgICAgICAgIHZhciByZWZOb2RlID0gbm9kZS5jaGlsZHJlblswXTtcbiAgICAgICAgICAgICAgLy8gVGFnIHRoZSBub2RlIHdpdGggYSBzcGVjaWZpYyBhdHRyaWJ1dGUgc28gdGhlIHR5cGVcbiAgICAgICAgICAgICAgLy8gY2hlY2tlciB2ZXJpZnkgdGhlIHR5cGUuXG4gICAgICAgICAgICAgIHJlZk5vZGUuam1lc3BhdGhUeXBlID0gVE9LX0VYUFJFRjtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlZk5vZGU7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIG5vZGUgdHlwZTogXCIgKyBub2RlLnR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIGNvbXB1dGVTbGljZVBhcmFtczogZnVuY3Rpb24oYXJyYXlMZW5ndGgsIHNsaWNlUGFyYW1zKSB7XG4gICAgICAgIHZhciBzdGFydCA9IHNsaWNlUGFyYW1zWzBdO1xuICAgICAgICB2YXIgc3RvcCA9IHNsaWNlUGFyYW1zWzFdO1xuICAgICAgICB2YXIgc3RlcCA9IHNsaWNlUGFyYW1zWzJdO1xuICAgICAgICB2YXIgY29tcHV0ZWQgPSBbbnVsbCwgbnVsbCwgbnVsbF07XG4gICAgICAgIGlmIChzdGVwID09PSBudWxsKSB7XG4gICAgICAgICAgc3RlcCA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RlcCA9PT0gMCkge1xuICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihcIkludmFsaWQgc2xpY2UsIHN0ZXAgY2Fubm90IGJlIDBcIik7XG4gICAgICAgICAgZXJyb3IubmFtZSA9IFwiUnVudGltZUVycm9yXCI7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ZXBWYWx1ZU5lZ2F0aXZlID0gc3RlcCA8IDAgPyB0cnVlIDogZmFsc2U7XG5cbiAgICAgICAgaWYgKHN0YXJ0ID09PSBudWxsKSB7XG4gICAgICAgICAgICBzdGFydCA9IHN0ZXBWYWx1ZU5lZ2F0aXZlID8gYXJyYXlMZW5ndGggLSAxIDogMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5jYXBTbGljZVJhbmdlKGFycmF5TGVuZ3RoLCBzdGFydCwgc3RlcCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RvcCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc3RvcCA9IHN0ZXBWYWx1ZU5lZ2F0aXZlID8gLTEgOiBhcnJheUxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0b3AgPSB0aGlzLmNhcFNsaWNlUmFuZ2UoYXJyYXlMZW5ndGgsIHN0b3AsIHN0ZXApO1xuICAgICAgICB9XG4gICAgICAgIGNvbXB1dGVkWzBdID0gc3RhcnQ7XG4gICAgICAgIGNvbXB1dGVkWzFdID0gc3RvcDtcbiAgICAgICAgY29tcHV0ZWRbMl0gPSBzdGVwO1xuICAgICAgICByZXR1cm4gY29tcHV0ZWQ7XG4gICAgICB9LFxuXG4gICAgICBjYXBTbGljZVJhbmdlOiBmdW5jdGlvbihhcnJheUxlbmd0aCwgYWN0dWFsVmFsdWUsIHN0ZXApIHtcbiAgICAgICAgICBpZiAoYWN0dWFsVmFsdWUgPCAwKSB7XG4gICAgICAgICAgICAgIGFjdHVhbFZhbHVlICs9IGFycmF5TGVuZ3RoO1xuICAgICAgICAgICAgICBpZiAoYWN0dWFsVmFsdWUgPCAwKSB7XG4gICAgICAgICAgICAgICAgICBhY3R1YWxWYWx1ZSA9IHN0ZXAgPCAwID8gLTEgOiAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChhY3R1YWxWYWx1ZSA+PSBhcnJheUxlbmd0aCkge1xuICAgICAgICAgICAgICBhY3R1YWxWYWx1ZSA9IHN0ZXAgPCAwID8gYXJyYXlMZW5ndGggLSAxIDogYXJyYXlMZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhY3R1YWxWYWx1ZTtcbiAgICAgIH1cblxuICB9O1xuXG4gIGZ1bmN0aW9uIFJ1bnRpbWUoaW50ZXJwcmV0ZXIpIHtcbiAgICB0aGlzLl9pbnRlcnByZXRlciA9IGludGVycHJldGVyO1xuICAgIHRoaXMuZnVuY3Rpb25UYWJsZSA9IHtcbiAgICAgICAgLy8gbmFtZTogW2Z1bmN0aW9uLCA8c2lnbmF0dXJlPl1cbiAgICAgICAgLy8gVGhlIDxzaWduYXR1cmU+IGNhbiBiZTpcbiAgICAgICAgLy9cbiAgICAgICAgLy8ge1xuICAgICAgICAvLyAgIGFyZ3M6IFtbdHlwZTEsIHR5cGUyXSwgW3R5cGUxLCB0eXBlMl1dLFxuICAgICAgICAvLyAgIHZhcmlhZGljOiB0cnVlfGZhbHNlXG4gICAgICAgIC8vIH1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gRWFjaCBhcmcgaW4gdGhlIGFyZyBsaXN0IGlzIGEgbGlzdCBvZiB2YWxpZCB0eXBlc1xuICAgICAgICAvLyAoaWYgdGhlIGZ1bmN0aW9uIGlzIG92ZXJsb2FkZWQgYW5kIHN1cHBvcnRzIG11bHRpcGxlXG4gICAgICAgIC8vIHR5cGVzLiAgSWYgdGhlIHR5cGUgaXMgXCJhbnlcIiB0aGVuIG5vIHR5cGUgY2hlY2tpbmdcbiAgICAgICAgLy8gb2NjdXJzIG9uIHRoZSBhcmd1bWVudC4gIFZhcmlhZGljIGlzIG9wdGlvbmFsXG4gICAgICAgIC8vIGFuZCBpZiBub3QgcHJvdmlkZWQgaXMgYXNzdW1lZCB0byBiZSBmYWxzZS5cbiAgICAgICAgYWJzOiB7X2Z1bmM6IHRoaXMuX2Z1bmN0aW9uQWJzLCBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9OVU1CRVJdfV19LFxuICAgICAgICBhdmc6IHtfZnVuYzogdGhpcy5fZnVuY3Rpb25BdmcsIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX0FSUkFZX05VTUJFUl19XX0sXG4gICAgICAgIGNlaWw6IHtfZnVuYzogdGhpcy5fZnVuY3Rpb25DZWlsLCBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9OVU1CRVJdfV19LFxuICAgICAgICBjb250YWluczoge1xuICAgICAgICAgICAgX2Z1bmM6IHRoaXMuX2Z1bmN0aW9uQ29udGFpbnMsXG4gICAgICAgICAgICBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9TVFJJTkcsIFRZUEVfQVJSQVldfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0eXBlczogW1RZUEVfQU5ZXX1dfSxcbiAgICAgICAgXCJlbmRzX3dpdGhcIjoge1xuICAgICAgICAgICAgX2Z1bmM6IHRoaXMuX2Z1bmN0aW9uRW5kc1dpdGgsXG4gICAgICAgICAgICBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9TVFJJTkddfSwge3R5cGVzOiBbVFlQRV9TVFJJTkddfV19LFxuICAgICAgICBmbG9vcjoge19mdW5jOiB0aGlzLl9mdW5jdGlvbkZsb29yLCBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9OVU1CRVJdfV19LFxuICAgICAgICBsZW5ndGg6IHtcbiAgICAgICAgICAgIF9mdW5jOiB0aGlzLl9mdW5jdGlvbkxlbmd0aCxcbiAgICAgICAgICAgIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX1NUUklORywgVFlQRV9BUlJBWSwgVFlQRV9PQkpFQ1RdfV19LFxuICAgICAgICBtYXA6IHtcbiAgICAgICAgICAgIF9mdW5jOiB0aGlzLl9mdW5jdGlvbk1hcCxcbiAgICAgICAgICAgIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX0VYUFJFRl19LCB7dHlwZXM6IFtUWVBFX0FSUkFZXX1dfSxcbiAgICAgICAgbWF4OiB7XG4gICAgICAgICAgICBfZnVuYzogdGhpcy5fZnVuY3Rpb25NYXgsXG4gICAgICAgICAgICBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9BUlJBWV9OVU1CRVIsIFRZUEVfQVJSQVlfU1RSSU5HXX1dfSxcbiAgICAgICAgXCJtZXJnZVwiOiB7XG4gICAgICAgICAgICBfZnVuYzogdGhpcy5fZnVuY3Rpb25NZXJnZSxcbiAgICAgICAgICAgIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX09CSkVDVF0sIHZhcmlhZGljOiB0cnVlfV1cbiAgICAgICAgfSxcbiAgICAgICAgXCJtYXhfYnlcIjoge1xuICAgICAgICAgIF9mdW5jOiB0aGlzLl9mdW5jdGlvbk1heEJ5LFxuICAgICAgICAgIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX0FSUkFZXX0sIHt0eXBlczogW1RZUEVfRVhQUkVGXX1dXG4gICAgICAgIH0sXG4gICAgICAgIHN1bToge19mdW5jOiB0aGlzLl9mdW5jdGlvblN1bSwgX3NpZ25hdHVyZTogW3t0eXBlczogW1RZUEVfQVJSQVlfTlVNQkVSXX1dfSxcbiAgICAgICAgXCJzdGFydHNfd2l0aFwiOiB7XG4gICAgICAgICAgICBfZnVuYzogdGhpcy5fZnVuY3Rpb25TdGFydHNXaXRoLFxuICAgICAgICAgICAgX3NpZ25hdHVyZTogW3t0eXBlczogW1RZUEVfU1RSSU5HXX0sIHt0eXBlczogW1RZUEVfU1RSSU5HXX1dfSxcbiAgICAgICAgbWluOiB7XG4gICAgICAgICAgICBfZnVuYzogdGhpcy5fZnVuY3Rpb25NaW4sXG4gICAgICAgICAgICBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9BUlJBWV9OVU1CRVIsIFRZUEVfQVJSQVlfU1RSSU5HXX1dfSxcbiAgICAgICAgXCJtaW5fYnlcIjoge1xuICAgICAgICAgIF9mdW5jOiB0aGlzLl9mdW5jdGlvbk1pbkJ5LFxuICAgICAgICAgIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX0FSUkFZXX0sIHt0eXBlczogW1RZUEVfRVhQUkVGXX1dXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6IHtfZnVuYzogdGhpcy5fZnVuY3Rpb25UeXBlLCBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9BTlldfV19LFxuICAgICAgICBrZXlzOiB7X2Z1bmM6IHRoaXMuX2Z1bmN0aW9uS2V5cywgX3NpZ25hdHVyZTogW3t0eXBlczogW1RZUEVfT0JKRUNUXX1dfSxcbiAgICAgICAgdmFsdWVzOiB7X2Z1bmM6IHRoaXMuX2Z1bmN0aW9uVmFsdWVzLCBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9PQkpFQ1RdfV19LFxuICAgICAgICBzb3J0OiB7X2Z1bmM6IHRoaXMuX2Z1bmN0aW9uU29ydCwgX3NpZ25hdHVyZTogW3t0eXBlczogW1RZUEVfQVJSQVlfU1RSSU5HLCBUWVBFX0FSUkFZX05VTUJFUl19XX0sXG4gICAgICAgIFwic29ydF9ieVwiOiB7XG4gICAgICAgICAgX2Z1bmM6IHRoaXMuX2Z1bmN0aW9uU29ydEJ5LFxuICAgICAgICAgIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX0FSUkFZXX0sIHt0eXBlczogW1RZUEVfRVhQUkVGXX1dXG4gICAgICAgIH0sXG4gICAgICAgIGpvaW46IHtcbiAgICAgICAgICAgIF9mdW5jOiB0aGlzLl9mdW5jdGlvbkpvaW4sXG4gICAgICAgICAgICBfc2lnbmF0dXJlOiBbXG4gICAgICAgICAgICAgICAge3R5cGVzOiBbVFlQRV9TVFJJTkddfSxcbiAgICAgICAgICAgICAgICB7dHlwZXM6IFtUWVBFX0FSUkFZX1NUUklOR119XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHJldmVyc2U6IHtcbiAgICAgICAgICAgIF9mdW5jOiB0aGlzLl9mdW5jdGlvblJldmVyc2UsXG4gICAgICAgICAgICBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9TVFJJTkcsIFRZUEVfQVJSQVldfV19LFxuICAgICAgICBcInRvX2FycmF5XCI6IHtfZnVuYzogdGhpcy5fZnVuY3Rpb25Ub0FycmF5LCBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9BTlldfV19LFxuICAgICAgICBcInRvX3N0cmluZ1wiOiB7X2Z1bmM6IHRoaXMuX2Z1bmN0aW9uVG9TdHJpbmcsIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX0FOWV19XX0sXG4gICAgICAgIFwidG9fbnVtYmVyXCI6IHtfZnVuYzogdGhpcy5fZnVuY3Rpb25Ub051bWJlciwgX3NpZ25hdHVyZTogW3t0eXBlczogW1RZUEVfQU5ZXX1dfSxcbiAgICAgICAgXCJub3RfbnVsbFwiOiB7XG4gICAgICAgICAgICBfZnVuYzogdGhpcy5fZnVuY3Rpb25Ob3ROdWxsLFxuICAgICAgICAgICAgX3NpZ25hdHVyZTogW3t0eXBlczogW1RZUEVfQU5ZXSwgdmFyaWFkaWM6IHRydWV9XVxuICAgICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIFJ1bnRpbWUucHJvdG90eXBlID0ge1xuICAgIGNhbGxGdW5jdGlvbjogZnVuY3Rpb24obmFtZSwgcmVzb2x2ZWRBcmdzKSB7XG4gICAgICB2YXIgZnVuY3Rpb25FbnRyeSA9IHRoaXMuZnVuY3Rpb25UYWJsZVtuYW1lXTtcbiAgICAgIGlmIChmdW5jdGlvbkVudHJ5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGZ1bmN0aW9uOiBcIiArIG5hbWUgKyBcIigpXCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5fdmFsaWRhdGVBcmdzKG5hbWUsIHJlc29sdmVkQXJncywgZnVuY3Rpb25FbnRyeS5fc2lnbmF0dXJlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbkVudHJ5Ll9mdW5jLmNhbGwodGhpcywgcmVzb2x2ZWRBcmdzKTtcbiAgICB9LFxuXG4gICAgX3ZhbGlkYXRlQXJnczogZnVuY3Rpb24obmFtZSwgYXJncywgc2lnbmF0dXJlKSB7XG4gICAgICAgIC8vIFZhbGlkYXRpbmcgdGhlIGFyZ3MgcmVxdWlyZXMgdmFsaWRhdGluZ1xuICAgICAgICAvLyB0aGUgY29ycmVjdCBhcml0eSBhbmQgdGhlIGNvcnJlY3QgdHlwZSBvZiBlYWNoIGFyZy5cbiAgICAgICAgLy8gSWYgdGhlIGxhc3QgYXJndW1lbnQgaXMgZGVjbGFyZWQgYXMgdmFyaWFkaWMsIHRoZW4gd2UgbmVlZFxuICAgICAgICAvLyBhIG1pbmltdW0gbnVtYmVyIG9mIGFyZ3MgdG8gYmUgcmVxdWlyZWQuICBPdGhlcndpc2UgaXQgaGFzIHRvXG4gICAgICAgIC8vIGJlIGFuIGV4YWN0IGFtb3VudC5cbiAgICAgICAgdmFyIHBsdXJhbGl6ZWQ7XG4gICAgICAgIGlmIChzaWduYXR1cmVbc2lnbmF0dXJlLmxlbmd0aCAtIDFdLnZhcmlhZGljKSB7XG4gICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPCBzaWduYXR1cmUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcGx1cmFsaXplZCA9IHNpZ25hdHVyZS5sZW5ndGggPT09IDEgPyBcIiBhcmd1bWVudFwiIDogXCIgYXJndW1lbnRzXCI7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXJndW1lbnRFcnJvcjogXCIgKyBuYW1lICsgXCIoKSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGFrZXMgYXQgbGVhc3RcIiArIHNpZ25hdHVyZS5sZW5ndGggKyBwbHVyYWxpemVkICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgYnV0IHJlY2VpdmVkIFwiICsgYXJncy5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoICE9PSBzaWduYXR1cmUubGVuZ3RoKSB7XG4gICAgICAgICAgICBwbHVyYWxpemVkID0gc2lnbmF0dXJlLmxlbmd0aCA9PT0gMSA/IFwiIGFyZ3VtZW50XCIgOiBcIiBhcmd1bWVudHNcIjtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFyZ3VtZW50RXJyb3I6IFwiICsgbmFtZSArIFwiKCkgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGFrZXMgXCIgKyBzaWduYXR1cmUubGVuZ3RoICsgcGx1cmFsaXplZCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgYnV0IHJlY2VpdmVkIFwiICsgYXJncy5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjdXJyZW50U3BlYztcbiAgICAgICAgdmFyIGFjdHVhbFR5cGU7XG4gICAgICAgIHZhciB0eXBlTWF0Y2hlZDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWduYXR1cmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHR5cGVNYXRjaGVkID0gZmFsc2U7XG4gICAgICAgICAgICBjdXJyZW50U3BlYyA9IHNpZ25hdHVyZVtpXS50eXBlcztcbiAgICAgICAgICAgIGFjdHVhbFR5cGUgPSB0aGlzLl9nZXRUeXBlTmFtZShhcmdzW2ldKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY3VycmVudFNwZWMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdHlwZU1hdGNoZXMoYWN0dWFsVHlwZSwgY3VycmVudFNwZWNbal0sIGFyZ3NbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVNYXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0eXBlTWF0Y2hlZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlR5cGVFcnJvcjogXCIgKyBuYW1lICsgXCIoKSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhwZWN0ZWQgYXJndW1lbnQgXCIgKyAoaSArIDEpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgdG8gYmUgdHlwZSBcIiArIGN1cnJlbnRTcGVjICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgYnV0IHJlY2VpdmVkIHR5cGUgXCIgKyBhY3R1YWxUeXBlICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgaW5zdGVhZC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX3R5cGVNYXRjaGVzOiBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkLCBhcmdWYWx1ZSkge1xuICAgICAgICBpZiAoZXhwZWN0ZWQgPT09IFRZUEVfQU5ZKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhwZWN0ZWQgPT09IFRZUEVfQVJSQVlfU1RSSU5HIHx8XG4gICAgICAgICAgICBleHBlY3RlZCA9PT0gVFlQRV9BUlJBWV9OVU1CRVIgfHxcbiAgICAgICAgICAgIGV4cGVjdGVkID09PSBUWVBFX0FSUkFZKSB7XG4gICAgICAgICAgICAvLyBUaGUgZXhwZWN0ZWQgdHlwZSBjYW4gZWl0aGVyIGp1c3QgYmUgYXJyYXksXG4gICAgICAgICAgICAvLyBvciBpdCBjYW4gcmVxdWlyZSBhIHNwZWNpZmljIHN1YnR5cGUgKGFycmF5IG9mIG51bWJlcnMpLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFRoZSBzaW1wbGVzdCBjYXNlIGlzIGlmIFwiYXJyYXlcIiB3aXRoIG5vIHN1YnR5cGUgaXMgc3BlY2lmaWVkLlxuICAgICAgICAgICAgaWYgKGV4cGVjdGVkID09PSBUWVBFX0FSUkFZKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdHVhbCA9PT0gVFlQRV9BUlJBWTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0dWFsID09PSBUWVBFX0FSUkFZKSB7XG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIG5lZWQgdG8gY2hlY2sgc3VidHlwZXMuXG4gICAgICAgICAgICAgICAgLy8gSSB0aGluayB0aGlzIGhhcyBwb3RlbnRpYWwgdG8gYmUgaW1wcm92ZWQuXG4gICAgICAgICAgICAgICAgdmFyIHN1YnR5cGU7XG4gICAgICAgICAgICAgICAgaWYgKGV4cGVjdGVkID09PSBUWVBFX0FSUkFZX05VTUJFUikge1xuICAgICAgICAgICAgICAgICAgc3VidHlwZSA9IFRZUEVfTlVNQkVSO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXhwZWN0ZWQgPT09IFRZUEVfQVJSQVlfU1RSSU5HKSB7XG4gICAgICAgICAgICAgICAgICBzdWJ0eXBlID0gVFlQRV9TVFJJTkc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl90eXBlTWF0Y2hlcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXRUeXBlTmFtZShhcmdWYWx1ZVtpXSksIHN1YnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdWYWx1ZVtpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBhY3R1YWwgPT09IGV4cGVjdGVkO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBfZ2V0VHlwZU5hbWU6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICBzd2l0Y2ggKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSB7XG4gICAgICAgICAgICBjYXNlIFwiW29iamVjdCBTdHJpbmddXCI6XG4gICAgICAgICAgICAgIHJldHVybiBUWVBFX1NUUklORztcbiAgICAgICAgICAgIGNhc2UgXCJbb2JqZWN0IE51bWJlcl1cIjpcbiAgICAgICAgICAgICAgcmV0dXJuIFRZUEVfTlVNQkVSO1xuICAgICAgICAgICAgY2FzZSBcIltvYmplY3QgQXJyYXldXCI6XG4gICAgICAgICAgICAgIHJldHVybiBUWVBFX0FSUkFZO1xuICAgICAgICAgICAgY2FzZSBcIltvYmplY3QgQm9vbGVhbl1cIjpcbiAgICAgICAgICAgICAgcmV0dXJuIFRZUEVfQk9PTEVBTjtcbiAgICAgICAgICAgIGNhc2UgXCJbb2JqZWN0IE51bGxdXCI6XG4gICAgICAgICAgICAgIHJldHVybiBUWVBFX05VTEw7XG4gICAgICAgICAgICBjYXNlIFwiW29iamVjdCBPYmplY3RdXCI6XG4gICAgICAgICAgICAgIC8vIENoZWNrIGlmIGl0J3MgYW4gZXhwcmVmLiAgSWYgaXQgaGFzLCBpdCdzIGJlZW5cbiAgICAgICAgICAgICAgLy8gdGFnZ2VkIHdpdGggYSBqbWVzcGF0aFR5cGUgYXR0ciBvZiAnRXhwcmVmJztcbiAgICAgICAgICAgICAgaWYgKG9iai5qbWVzcGF0aFR5cGUgPT09IFRPS19FWFBSRUYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVFlQRV9FWFBSRUY7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRZUEVfT0JKRUNUO1xuICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2Z1bmN0aW9uU3RhcnRzV2l0aDogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlZEFyZ3NbMF0ubGFzdEluZGV4T2YocmVzb2x2ZWRBcmdzWzFdKSA9PT0gMDtcbiAgICB9LFxuXG4gICAgX2Z1bmN0aW9uRW5kc1dpdGg6IGZ1bmN0aW9uKHJlc29sdmVkQXJncykge1xuICAgICAgICB2YXIgc2VhcmNoU3RyID0gcmVzb2x2ZWRBcmdzWzBdO1xuICAgICAgICB2YXIgc3VmZml4ID0gcmVzb2x2ZWRBcmdzWzFdO1xuICAgICAgICByZXR1cm4gc2VhcmNoU3RyLmluZGV4T2Yoc3VmZml4LCBzZWFyY2hTdHIubGVuZ3RoIC0gc3VmZml4Lmxlbmd0aCkgIT09IC0xO1xuICAgIH0sXG5cbiAgICBfZnVuY3Rpb25SZXZlcnNlOiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHtcbiAgICAgICAgdmFyIHR5cGVOYW1lID0gdGhpcy5fZ2V0VHlwZU5hbWUocmVzb2x2ZWRBcmdzWzBdKTtcbiAgICAgICAgaWYgKHR5cGVOYW1lID09PSBUWVBFX1NUUklORykge1xuICAgICAgICAgIHZhciBvcmlnaW5hbFN0ciA9IHJlc29sdmVkQXJnc1swXTtcbiAgICAgICAgICB2YXIgcmV2ZXJzZWRTdHIgPSBcIlwiO1xuICAgICAgICAgIGZvciAodmFyIGkgPSBvcmlnaW5hbFN0ci5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICByZXZlcnNlZFN0ciArPSBvcmlnaW5hbFN0cltpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJldmVyc2VkU3RyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciByZXZlcnNlZEFycmF5ID0gcmVzb2x2ZWRBcmdzWzBdLnNsaWNlKDApO1xuICAgICAgICAgIHJldmVyc2VkQXJyYXkucmV2ZXJzZSgpO1xuICAgICAgICAgIHJldHVybiByZXZlcnNlZEFycmF5O1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9mdW5jdGlvbkFiczogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7XG4gICAgICByZXR1cm4gTWF0aC5hYnMocmVzb2x2ZWRBcmdzWzBdKTtcbiAgICB9LFxuXG4gICAgX2Z1bmN0aW9uQ2VpbDogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwocmVzb2x2ZWRBcmdzWzBdKTtcbiAgICB9LFxuXG4gICAgX2Z1bmN0aW9uQXZnOiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHtcbiAgICAgICAgdmFyIHN1bSA9IDA7XG4gICAgICAgIHZhciBpbnB1dEFycmF5ID0gcmVzb2x2ZWRBcmdzWzBdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0QXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHN1bSArPSBpbnB1dEFycmF5W2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdW0gLyBpbnB1dEFycmF5Lmxlbmd0aDtcbiAgICB9LFxuXG4gICAgX2Z1bmN0aW9uQ29udGFpbnM6IGZ1bmN0aW9uKHJlc29sdmVkQXJncykge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZWRBcmdzWzBdLmluZGV4T2YocmVzb2x2ZWRBcmdzWzFdKSA+PSAwO1xuICAgIH0sXG5cbiAgICBfZnVuY3Rpb25GbG9vcjogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHJlc29sdmVkQXJnc1swXSk7XG4gICAgfSxcblxuICAgIF9mdW5jdGlvbkxlbmd0aDogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7XG4gICAgICAgaWYgKCFpc09iamVjdChyZXNvbHZlZEFyZ3NbMF0pKSB7XG4gICAgICAgICByZXR1cm4gcmVzb2x2ZWRBcmdzWzBdLmxlbmd0aDtcbiAgICAgICB9IGVsc2Uge1xuICAgICAgICAgLy8gQXMgZmFyIGFzIEkgY2FuIHRlbGwsIHRoZXJlJ3Mgbm8gd2F5IHRvIGdldCB0aGUgbGVuZ3RoXG4gICAgICAgICAvLyBvZiBhbiBvYmplY3Qgd2l0aG91dCBPKG4pIGl0ZXJhdGlvbiB0aHJvdWdoIHRoZSBvYmplY3QuXG4gICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMocmVzb2x2ZWRBcmdzWzBdKS5sZW5ndGg7XG4gICAgICAgfVxuICAgIH0sXG5cbiAgICBfZnVuY3Rpb25NYXA6IGZ1bmN0aW9uKHJlc29sdmVkQXJncykge1xuICAgICAgdmFyIG1hcHBlZCA9IFtdO1xuICAgICAgdmFyIGludGVycHJldGVyID0gdGhpcy5faW50ZXJwcmV0ZXI7XG4gICAgICB2YXIgZXhwcmVmTm9kZSA9IHJlc29sdmVkQXJnc1swXTtcbiAgICAgIHZhciBlbGVtZW50cyA9IHJlc29sdmVkQXJnc1sxXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBtYXBwZWQucHVzaChpbnRlcnByZXRlci52aXNpdChleHByZWZOb2RlLCBlbGVtZW50c1tpXSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hcHBlZDtcbiAgICB9LFxuXG4gICAgX2Z1bmN0aW9uTWVyZ2U6IGZ1bmN0aW9uKHJlc29sdmVkQXJncykge1xuICAgICAgdmFyIG1lcmdlZCA9IHt9O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNvbHZlZEFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSByZXNvbHZlZEFyZ3NbaV07XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBjdXJyZW50KSB7XG4gICAgICAgICAgbWVyZ2VkW2tleV0gPSBjdXJyZW50W2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgfSxcblxuICAgIF9mdW5jdGlvbk1heDogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7XG4gICAgICBpZiAocmVzb2x2ZWRBcmdzWzBdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHR5cGVOYW1lID0gdGhpcy5fZ2V0VHlwZU5hbWUocmVzb2x2ZWRBcmdzWzBdWzBdKTtcbiAgICAgICAgaWYgKHR5cGVOYW1lID09PSBUWVBFX05VTUJFUikge1xuICAgICAgICAgIHJldHVybiBNYXRoLm1heC5hcHBseShNYXRoLCByZXNvbHZlZEFyZ3NbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBlbGVtZW50cyA9IHJlc29sdmVkQXJnc1swXTtcbiAgICAgICAgICB2YXIgbWF4RWxlbWVudCA9IGVsZW1lbnRzWzBdO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKG1heEVsZW1lbnQubG9jYWxlQ29tcGFyZShlbGVtZW50c1tpXSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICBtYXhFbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1heEVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9mdW5jdGlvbk1pbjogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7XG4gICAgICBpZiAocmVzb2x2ZWRBcmdzWzBdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHR5cGVOYW1lID0gdGhpcy5fZ2V0VHlwZU5hbWUocmVzb2x2ZWRBcmdzWzBdWzBdKTtcbiAgICAgICAgaWYgKHR5cGVOYW1lID09PSBUWVBFX05VTUJFUikge1xuICAgICAgICAgIHJldHVybiBNYXRoLm1pbi5hcHBseShNYXRoLCByZXNvbHZlZEFyZ3NbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBlbGVtZW50cyA9IHJlc29sdmVkQXJnc1swXTtcbiAgICAgICAgICB2YXIgbWluRWxlbWVudCA9IGVsZW1lbnRzWzBdO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnRzW2ldLmxvY2FsZUNvbXBhcmUobWluRWxlbWVudCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICBtaW5FbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1pbkVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfZnVuY3Rpb25TdW06IGZ1bmN0aW9uKHJlc29sdmVkQXJncykge1xuICAgICAgdmFyIHN1bSA9IDA7XG4gICAgICB2YXIgbGlzdFRvU3VtID0gcmVzb2x2ZWRBcmdzWzBdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0VG9TdW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3VtICs9IGxpc3RUb1N1bVtpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdW07XG4gICAgfSxcblxuICAgIF9mdW5jdGlvblR5cGU6IGZ1bmN0aW9uKHJlc29sdmVkQXJncykge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX2dldFR5cGVOYW1lKHJlc29sdmVkQXJnc1swXSkpIHtcbiAgICAgICAgICBjYXNlIFRZUEVfTlVNQkVSOlxuICAgICAgICAgICAgcmV0dXJuIFwibnVtYmVyXCI7XG4gICAgICAgICAgY2FzZSBUWVBFX1NUUklORzpcbiAgICAgICAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuICAgICAgICAgIGNhc2UgVFlQRV9BUlJBWTpcbiAgICAgICAgICAgIHJldHVybiBcImFycmF5XCI7XG4gICAgICAgICAgY2FzZSBUWVBFX09CSkVDVDpcbiAgICAgICAgICAgIHJldHVybiBcIm9iamVjdFwiO1xuICAgICAgICAgIGNhc2UgVFlQRV9CT09MRUFOOlxuICAgICAgICAgICAgcmV0dXJuIFwiYm9vbGVhblwiO1xuICAgICAgICAgIGNhc2UgVFlQRV9FWFBSRUY6XG4gICAgICAgICAgICByZXR1cm4gXCJleHByZWZcIjtcbiAgICAgICAgICBjYXNlIFRZUEVfTlVMTDpcbiAgICAgICAgICAgIHJldHVybiBcIm51bGxcIjtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfZnVuY3Rpb25LZXlzOiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHJlc29sdmVkQXJnc1swXSk7XG4gICAgfSxcblxuICAgIF9mdW5jdGlvblZhbHVlczogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7XG4gICAgICAgIHZhciBvYmogPSByZXNvbHZlZEFyZ3NbMF07XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKG9ialtrZXlzW2ldXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9LFxuXG4gICAgX2Z1bmN0aW9uSm9pbjogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7XG4gICAgICAgIHZhciBqb2luQ2hhciA9IHJlc29sdmVkQXJnc1swXTtcbiAgICAgICAgdmFyIGxpc3RKb2luID0gcmVzb2x2ZWRBcmdzWzFdO1xuICAgICAgICByZXR1cm4gbGlzdEpvaW4uam9pbihqb2luQ2hhcik7XG4gICAgfSxcblxuICAgIF9mdW5jdGlvblRvQXJyYXk6IGZ1bmN0aW9uKHJlc29sdmVkQXJncykge1xuICAgICAgICBpZiAodGhpcy5fZ2V0VHlwZU5hbWUocmVzb2x2ZWRBcmdzWzBdKSA9PT0gVFlQRV9BUlJBWSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkQXJnc1swXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbcmVzb2x2ZWRBcmdzWzBdXTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfZnVuY3Rpb25Ub1N0cmluZzogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLl9nZXRUeXBlTmFtZShyZXNvbHZlZEFyZ3NbMF0pID09PSBUWVBFX1NUUklORykge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkQXJnc1swXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXNvbHZlZEFyZ3NbMF0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9mdW5jdGlvblRvTnVtYmVyOiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHtcbiAgICAgICAgdmFyIHR5cGVOYW1lID0gdGhpcy5fZ2V0VHlwZU5hbWUocmVzb2x2ZWRBcmdzWzBdKTtcbiAgICAgICAgdmFyIGNvbnZlcnRlZFZhbHVlO1xuICAgICAgICBpZiAodHlwZU5hbWUgPT09IFRZUEVfTlVNQkVSKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWRBcmdzWzBdO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVOYW1lID09PSBUWVBFX1NUUklORykge1xuICAgICAgICAgICAgY29udmVydGVkVmFsdWUgPSArcmVzb2x2ZWRBcmdzWzBdO1xuICAgICAgICAgICAgaWYgKCFpc05hTihjb252ZXJ0ZWRWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udmVydGVkVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIF9mdW5jdGlvbk5vdE51bGw6IGZ1bmN0aW9uKHJlc29sdmVkQXJncykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc29sdmVkQXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2dldFR5cGVOYW1lKHJlc29sdmVkQXJnc1tpXSkgIT09IFRZUEVfTlVMTCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlZEFyZ3NbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIF9mdW5jdGlvblNvcnQ6IGZ1bmN0aW9uKHJlc29sdmVkQXJncykge1xuICAgICAgICB2YXIgc29ydGVkQXJyYXkgPSByZXNvbHZlZEFyZ3NbMF0uc2xpY2UoMCk7XG4gICAgICAgIHNvcnRlZEFycmF5LnNvcnQoKTtcbiAgICAgICAgcmV0dXJuIHNvcnRlZEFycmF5O1xuICAgIH0sXG5cbiAgICBfZnVuY3Rpb25Tb3J0Qnk6IGZ1bmN0aW9uKHJlc29sdmVkQXJncykge1xuICAgICAgICB2YXIgc29ydGVkQXJyYXkgPSByZXNvbHZlZEFyZ3NbMF0uc2xpY2UoMCk7XG4gICAgICAgIGlmIChzb3J0ZWRBcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBzb3J0ZWRBcnJheTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW50ZXJwcmV0ZXIgPSB0aGlzLl9pbnRlcnByZXRlcjtcbiAgICAgICAgdmFyIGV4cHJlZk5vZGUgPSByZXNvbHZlZEFyZ3NbMV07XG4gICAgICAgIHZhciByZXF1aXJlZFR5cGUgPSB0aGlzLl9nZXRUeXBlTmFtZShcbiAgICAgICAgICAgIGludGVycHJldGVyLnZpc2l0KGV4cHJlZk5vZGUsIHNvcnRlZEFycmF5WzBdKSk7XG4gICAgICAgIGlmIChbVFlQRV9OVU1CRVIsIFRZUEVfU1RSSU5HXS5pbmRleE9mKHJlcXVpcmVkVHlwZSkgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUeXBlRXJyb3JcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAvLyBJbiBvcmRlciB0byBnZXQgYSBzdGFibGUgc29ydCBvdXQgb2YgYW4gdW5zdGFibGVcbiAgICAgICAgLy8gc29ydCBhbGdvcml0aG0sIHdlIGRlY29yYXRlL3NvcnQvdW5kZWNvcmF0ZSAoRFNVKVxuICAgICAgICAvLyBieSBjcmVhdGluZyBhIG5ldyBsaXN0IG9mIFtpbmRleCwgZWxlbWVudF0gcGFpcnMuXG4gICAgICAgIC8vIEluIHRoZSBjbXAgZnVuY3Rpb24sIGlmIHRoZSBldmFsdWF0ZWQgZWxlbWVudHMgYXJlXG4gICAgICAgIC8vIGVxdWFsLCB0aGVuIHRoZSBpbmRleCB3aWxsIGJlIHVzZWQgYXMgdGhlIHRpZWJyZWFrZXIuXG4gICAgICAgIC8vIEFmdGVyIHRoZSBkZWNvcmF0ZWQgbGlzdCBoYXMgYmVlbiBzb3J0ZWQsIGl0IHdpbGwgYmVcbiAgICAgICAgLy8gdW5kZWNvcmF0ZWQgdG8gZXh0cmFjdCB0aGUgb3JpZ2luYWwgZWxlbWVudHMuXG4gICAgICAgIHZhciBkZWNvcmF0ZWQgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3J0ZWRBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGRlY29yYXRlZC5wdXNoKFtpLCBzb3J0ZWRBcnJheVtpXV0pO1xuICAgICAgICB9XG4gICAgICAgIGRlY29yYXRlZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICB2YXIgZXhwckEgPSBpbnRlcnByZXRlci52aXNpdChleHByZWZOb2RlLCBhWzFdKTtcbiAgICAgICAgICB2YXIgZXhwckIgPSBpbnRlcnByZXRlci52aXNpdChleHByZWZOb2RlLCBiWzFdKTtcbiAgICAgICAgICBpZiAodGhhdC5fZ2V0VHlwZU5hbWUoZXhwckEpICE9PSByZXF1aXJlZFR5cGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgXCJUeXBlRXJyb3I6IGV4cGVjdGVkIFwiICsgcmVxdWlyZWRUeXBlICsgXCIsIHJlY2VpdmVkIFwiICtcbiAgICAgICAgICAgICAgICAgIHRoYXQuX2dldFR5cGVOYW1lKGV4cHJBKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGF0Ll9nZXRUeXBlTmFtZShleHByQikgIT09IHJlcXVpcmVkVHlwZSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICBcIlR5cGVFcnJvcjogZXhwZWN0ZWQgXCIgKyByZXF1aXJlZFR5cGUgKyBcIiwgcmVjZWl2ZWQgXCIgK1xuICAgICAgICAgICAgICAgICAgdGhhdC5fZ2V0VHlwZU5hbWUoZXhwckIpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGV4cHJBID4gZXhwckIpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZXhwckEgPCBleHByQikge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiB0aGV5J3JlIGVxdWFsIGNvbXBhcmUgdGhlIGl0ZW1zIGJ5IHRoZWlyXG4gICAgICAgICAgICAvLyBvcmRlciB0byBtYWludGFpbiByZWxhdGl2ZSBvcmRlciBvZiBlcXVhbCBrZXlzXG4gICAgICAgICAgICAvLyAoaS5lLiB0byBnZXQgYSBzdGFibGUgc29ydCkuXG4gICAgICAgICAgICByZXR1cm4gYVswXSAtIGJbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVW5kZWNvcmF0ZTogZXh0cmFjdCBvdXQgdGhlIG9yaWdpbmFsIGxpc3QgZWxlbWVudHMuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGVjb3JhdGVkLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc29ydGVkQXJyYXlbal0gPSBkZWNvcmF0ZWRbal1bMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvcnRlZEFycmF5O1xuICAgIH0sXG5cbiAgICBfZnVuY3Rpb25NYXhCeTogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7XG4gICAgICB2YXIgZXhwcmVmTm9kZSA9IHJlc29sdmVkQXJnc1sxXTtcbiAgICAgIHZhciByZXNvbHZlZEFycmF5ID0gcmVzb2x2ZWRBcmdzWzBdO1xuICAgICAgdmFyIGtleUZ1bmN0aW9uID0gdGhpcy5jcmVhdGVLZXlGdW5jdGlvbihleHByZWZOb2RlLCBbVFlQRV9OVU1CRVIsIFRZUEVfU1RSSU5HXSk7XG4gICAgICB2YXIgbWF4TnVtYmVyID0gLUluZmluaXR5O1xuICAgICAgdmFyIG1heFJlY29yZDtcbiAgICAgIHZhciBjdXJyZW50O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNvbHZlZEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGN1cnJlbnQgPSBrZXlGdW5jdGlvbihyZXNvbHZlZEFycmF5W2ldKTtcbiAgICAgICAgaWYgKGN1cnJlbnQgPiBtYXhOdW1iZXIpIHtcbiAgICAgICAgICBtYXhOdW1iZXIgPSBjdXJyZW50O1xuICAgICAgICAgIG1heFJlY29yZCA9IHJlc29sdmVkQXJyYXlbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXhSZWNvcmQ7XG4gICAgfSxcblxuICAgIF9mdW5jdGlvbk1pbkJ5OiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHtcbiAgICAgIHZhciBleHByZWZOb2RlID0gcmVzb2x2ZWRBcmdzWzFdO1xuICAgICAgdmFyIHJlc29sdmVkQXJyYXkgPSByZXNvbHZlZEFyZ3NbMF07XG4gICAgICB2YXIga2V5RnVuY3Rpb24gPSB0aGlzLmNyZWF0ZUtleUZ1bmN0aW9uKGV4cHJlZk5vZGUsIFtUWVBFX05VTUJFUiwgVFlQRV9TVFJJTkddKTtcbiAgICAgIHZhciBtaW5OdW1iZXIgPSBJbmZpbml0eTtcbiAgICAgIHZhciBtaW5SZWNvcmQ7XG4gICAgICB2YXIgY3VycmVudDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzb2x2ZWRBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjdXJyZW50ID0ga2V5RnVuY3Rpb24ocmVzb2x2ZWRBcnJheVtpXSk7XG4gICAgICAgIGlmIChjdXJyZW50IDwgbWluTnVtYmVyKSB7XG4gICAgICAgICAgbWluTnVtYmVyID0gY3VycmVudDtcbiAgICAgICAgICBtaW5SZWNvcmQgPSByZXNvbHZlZEFycmF5W2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWluUmVjb3JkO1xuICAgIH0sXG5cbiAgICBjcmVhdGVLZXlGdW5jdGlvbjogZnVuY3Rpb24oZXhwcmVmTm9kZSwgYWxsb3dlZFR5cGVzKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIgaW50ZXJwcmV0ZXIgPSB0aGlzLl9pbnRlcnByZXRlcjtcbiAgICAgIHZhciBrZXlGdW5jID0gZnVuY3Rpb24oeCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IGludGVycHJldGVyLnZpc2l0KGV4cHJlZk5vZGUsIHgpO1xuICAgICAgICBpZiAoYWxsb3dlZFR5cGVzLmluZGV4T2YodGhhdC5fZ2V0VHlwZU5hbWUoY3VycmVudCkpIDwgMCkge1xuICAgICAgICAgIHZhciBtc2cgPSBcIlR5cGVFcnJvcjogZXhwZWN0ZWQgb25lIG9mIFwiICsgYWxsb3dlZFR5cGVzICtcbiAgICAgICAgICAgICAgICAgICAgXCIsIHJlY2VpdmVkIFwiICsgdGhhdC5fZ2V0VHlwZU5hbWUoY3VycmVudCk7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGtleUZ1bmM7XG4gICAgfVxuXG4gIH07XG5cbiAgZnVuY3Rpb24gY29tcGlsZShzdHJlYW0pIHtcbiAgICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcigpO1xuICAgIHZhciBhc3QgPSBwYXJzZXIucGFyc2Uoc3RyZWFtKTtcbiAgICByZXR1cm4gYXN0O1xuICB9XG5cbiAgZnVuY3Rpb24gdG9rZW5pemUoc3RyZWFtKSB7XG4gICAgICB2YXIgbGV4ZXIgPSBuZXcgTGV4ZXIoKTtcbiAgICAgIHJldHVybiBsZXhlci50b2tlbml6ZShzdHJlYW0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VhcmNoKGRhdGEsIGV4cHJlc3Npb24pIHtcbiAgICAgIHZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKCk7XG4gICAgICAvLyBUaGlzIG5lZWRzIHRvIGJlIGltcHJvdmVkLiAgQm90aCB0aGUgaW50ZXJwcmV0ZXIgYW5kIHJ1bnRpbWUgZGVwZW5kIG9uXG4gICAgICAvLyBlYWNoIG90aGVyLiAgVGhlIHJ1bnRpbWUgbmVlZHMgdGhlIGludGVycHJldGVyIHRvIHN1cHBvcnQgZXhwcmVmcy5cbiAgICAgIC8vIFRoZXJlJ3MgbGlrZWx5IGEgY2xlYW4gd2F5IHRvIGF2b2lkIHRoZSBjeWNsaWMgZGVwZW5kZW5jeS5cbiAgICAgIHZhciBydW50aW1lID0gbmV3IFJ1bnRpbWUoKTtcbiAgICAgIHZhciBpbnRlcnByZXRlciA9IG5ldyBUcmVlSW50ZXJwcmV0ZXIocnVudGltZSk7XG4gICAgICBydW50aW1lLl9pbnRlcnByZXRlciA9IGludGVycHJldGVyO1xuICAgICAgdmFyIG5vZGUgPSBwYXJzZXIucGFyc2UoZXhwcmVzc2lvbik7XG4gICAgICByZXR1cm4gaW50ZXJwcmV0ZXIuc2VhcmNoKG5vZGUsIGRhdGEpO1xuICB9XG5cbiAgZXhwb3J0cy50b2tlbml6ZSA9IHRva2VuaXplO1xuICBleHBvcnRzLmNvbXBpbGUgPSBjb21waWxlO1xuICBleHBvcnRzLnNlYXJjaCA9IHNlYXJjaDtcbiAgZXhwb3J0cy5zdHJpY3REZWVwRXF1YWwgPSBzdHJpY3REZWVwRXF1YWw7XG59KSh0eXBlb2YgZXhwb3J0cyA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMuam1lc3BhdGggPSB7fSA6IGV4cG9ydHMpO1xuXG59LHt9XSw4NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG59LHt9XSw4NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4vKiEgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlIHYxLjMuMiBieSBAbWF0aGlhcyAqL1xuOyhmdW5jdGlvbihyb290KSB7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlcyAqL1xuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmXG5cdFx0IWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdCFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoXG5cdFx0ZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwuc2VsZiA9PT0gZnJlZUdsb2JhbFxuXHQpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYHB1bnljb2RlYCBvYmplY3QuXG5cdCAqIEBuYW1lIHB1bnljb2RlXG5cdCAqIEB0eXBlIE9iamVjdFxuXHQgKi9cblx0dmFyIHB1bnljb2RlLFxuXG5cdC8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi9cblx0bWF4SW50ID0gMjE0NzQ4MzY0NywgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxuXG5cdC8qKiBCb290c3RyaW5nIHBhcmFtZXRlcnMgKi9cblx0YmFzZSA9IDM2LFxuXHR0TWluID0gMSxcblx0dE1heCA9IDI2LFxuXHRza2V3ID0gMzgsXG5cdGRhbXAgPSA3MDAsXG5cdGluaXRpYWxCaWFzID0gNzIsXG5cdGluaXRpYWxOID0gMTI4LCAvLyAweDgwXG5cdGRlbGltaXRlciA9ICctJywgLy8gJ1xceDJEJ1xuXG5cdC8qKiBSZWd1bGFyIGV4cHJlc3Npb25zICovXG5cdHJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vLFxuXHRyZWdleE5vbkFTQ0lJID0gL1teXFx4MjAtXFx4N0VdLywgLy8gdW5wcmludGFibGUgQVNDSUkgY2hhcnMgKyBub24tQVNDSUkgY2hhcnNcblx0cmVnZXhTZXBhcmF0b3JzID0gL1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZywgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG5cdC8qKiBFcnJvciBtZXNzYWdlcyAqL1xuXHRlcnJvcnMgPSB7XG5cdFx0J292ZXJmbG93JzogJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJyxcblx0XHQnbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLFxuXHRcdCdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG5cdH0sXG5cblx0LyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqL1xuXHRiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW4sXG5cdGZsb29yID0gTWF0aC5mbG9vcixcblx0c3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSxcblxuXHQvKiogVGVtcG9yYXJ5IHZhcmlhYmxlICovXG5cdGtleTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBlcnJvciB0eXBlLlxuXHQgKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBlcnJvcih0eXBlKSB7XG5cdFx0dGhyb3cgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcblx0ICogaXRlbS5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSBvZiB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwKGFycmF5LCBmbikge1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xuXHRcdHdoaWxlIChsZW5ndGgtLSkge1xuXHRcdFx0cmVzdWx0W2xlbmd0aF0gPSBmbihhcnJheVtsZW5ndGhdKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3Mgb3IgZW1haWxcblx0ICogYWRkcmVzc2VzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnlcblx0ICogY2hhcmFjdGVyLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IHN0cmluZyBvZiBjaGFyYWN0ZXJzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFja1xuXHQgKiBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7XG5cdFx0dmFyIHBhcnRzID0gc3RyaW5nLnNwbGl0KCdAJyk7XG5cdFx0dmFyIHJlc3VsdCA9ICcnO1xuXHRcdGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG5cdFx0XHQvLyBJbiBlbWFpbCBhZGRyZXNzZXMsIG9ubHkgdGhlIGRvbWFpbiBuYW1lIHNob3VsZCBiZSBwdW55Y29kZWQuIExlYXZlXG5cdFx0XHQvLyB0aGUgbG9jYWwgcGFydCAoaS5lLiBldmVyeXRoaW5nIHVwIHRvIGBAYCkgaW50YWN0LlxuXHRcdFx0cmVzdWx0ID0gcGFydHNbMF0gKyAnQCc7XG5cdFx0XHRzdHJpbmcgPSBwYXJ0c1sxXTtcblx0XHR9XG5cdFx0Ly8gQXZvaWQgYHNwbGl0KHJlZ2V4KWAgZm9yIElFOCBjb21wYXRpYmlsaXR5LiBTZWUgIzE3LlxuXHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4U2VwYXJhdG9ycywgJ1xceDJFJyk7XG5cdFx0dmFyIGxhYmVscyA9IHN0cmluZy5zcGxpdCgnLicpO1xuXHRcdHZhciBlbmNvZGVkID0gbWFwKGxhYmVscywgZm4pLmpvaW4oJy4nKTtcblx0XHRyZXR1cm4gcmVzdWx0ICsgZW5jb2RlZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG5cdCAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcblx0ICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcblx0ICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG5cdCAqIG1hdGNoaW5nIFVURi0xNi5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5lbmNvZGVgXG5cdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBkZWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBUaGUgVW5pY29kZSBpbnB1dCBzdHJpbmcgKFVDUy0yKS5cblx0ICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGNvdW50ZXIgPSAwLFxuXHRcdCAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuXHRcdCAgICB2YWx1ZSxcblx0XHQgICAgZXh0cmE7XG5cdFx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBzdHJpbmcgYmFzZWQgb24gYW4gYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5kZWNvZGVgXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGVuY29kZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb2RlUG9pbnRzIFRoZSBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdFx0cmV0dXJuIG1hcChhcnJheSwgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0XHR2YWx1ZSAtPSAweDEwMDAwO1xuXHRcdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgYmFzaWMgY29kZSBwb2ludCBpbnRvIGEgZGlnaXQvaW50ZWdlci5cblx0ICogQHNlZSBgZGlnaXRUb0Jhc2ljKClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlUG9pbnQgVGhlIGJhc2ljIG51bWVyaWMgY29kZSBwb2ludCB2YWx1ZS5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50IChmb3IgdXNlIGluXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaW4gdGhlIHJhbmdlIGAwYCB0byBgYmFzZSAtIDFgLCBvciBgYmFzZWAgaWZcblx0ICogdGhlIGNvZGUgcG9pbnQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsdWUuXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNpY1RvRGlnaXQoY29kZVBvaW50KSB7XG5cdFx0aWYgKGNvZGVQb2ludCAtIDQ4IDwgMTApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSAyMjtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDY1IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA2NTtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDk3IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA5Nztcblx0XHR9XG5cdFx0cmV0dXJuIGJhc2U7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAc2VlIGBiYXNpY1RvRGlnaXQoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIGJhc2ljIGNvZGUgcG9pbnQgd2hvc2UgdmFsdWUgKHdoZW4gdXNlZCBmb3Jcblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2Vcblx0ICogYDBgIHRvIGBiYXNlIC0gMWAuIElmIGBmbGFnYCBpcyBub24temVybywgdGhlIHVwcGVyY2FzZSBmb3JtIGlzXG5cdCAqIHVzZWQ7IGVsc2UsIHRoZSBsb3dlcmNhc2UgZm9ybSBpcyB1c2VkLiBUaGUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkXG5cdCAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uXG5cdCAqL1xuXHRmdW5jdGlvbiBkaWdpdFRvQmFzaWMoZGlnaXQsIGZsYWcpIHtcblx0XHQvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuXHRcdC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuXHRcdHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNikgLSAoKGZsYWcgIT0gMCkgPDwgNSk7XG5cdH1cblxuXHQvKipcblx0ICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cblx0ICogaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gYWRhcHQoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG5cdFx0dmFyIGsgPSAwO1xuXHRcdGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG5cdFx0ZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuXHRcdGZvciAoLyogbm8gaW5pdGlhbGl6YXRpb24gKi87IGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7XG5cdFx0XHRkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG5cdFx0fVxuXHRcdHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scyB0byBhIHN0cmluZyBvZiBVbmljb2RlXG5cdCAqIHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHRcdC8vIERvbid0IHVzZSBVQ1MtMlxuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsXG5cdFx0ICAgIG91dCxcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIG4gPSBpbml0aWFsTixcblx0XHQgICAgYmlhcyA9IGluaXRpYWxCaWFzLFxuXHRcdCAgICBiYXNpYyxcblx0XHQgICAgaixcblx0XHQgICAgaW5kZXgsXG5cdFx0ICAgIG9sZGksXG5cdFx0ICAgIHcsXG5cdFx0ICAgIGssXG5cdFx0ICAgIGRpZ2l0LFxuXHRcdCAgICB0LFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgYmFzZU1pbnVzVDtcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHM6IGxldCBgYmFzaWNgIGJlIHRoZSBudW1iZXIgb2YgaW5wdXQgY29kZVxuXHRcdC8vIHBvaW50cyBiZWZvcmUgdGhlIGxhc3QgZGVsaW1pdGVyLCBvciBgMGAgaWYgdGhlcmUgaXMgbm9uZSwgdGhlbiBjb3B5XG5cdFx0Ly8gdGhlIGZpcnN0IGJhc2ljIGNvZGUgcG9pbnRzIHRvIHRoZSBvdXRwdXQuXG5cblx0XHRiYXNpYyA9IGlucHV0Lmxhc3RJbmRleE9mKGRlbGltaXRlcik7XG5cdFx0aWYgKGJhc2ljIDwgMCkge1xuXHRcdFx0YmFzaWMgPSAwO1xuXHRcdH1cblxuXHRcdGZvciAoaiA9IDA7IGogPCBiYXNpYzsgKytqKSB7XG5cdFx0XHQvLyBpZiBpdCdzIG5vdCBhIGJhc2ljIGNvZGUgcG9pbnRcblx0XHRcdGlmIChpbnB1dC5jaGFyQ29kZUF0KGopID49IDB4ODApIHtcblx0XHRcdFx0ZXJyb3IoJ25vdC1iYXNpYycpO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0LnB1c2goaW5wdXQuY2hhckNvZGVBdChqKSk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBkZWNvZGluZyBsb29wOiBzdGFydCBqdXN0IGFmdGVyIHRoZSBsYXN0IGRlbGltaXRlciBpZiBhbnkgYmFzaWMgY29kZVxuXHRcdC8vIHBvaW50cyB3ZXJlIGNvcGllZDsgc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvdGhlcndpc2UuXG5cblx0XHRmb3IgKGluZGV4ID0gYmFzaWMgPiAwID8gYmFzaWMgKyAxIDogMDsgaW5kZXggPCBpbnB1dExlbmd0aDsgLyogbm8gZmluYWwgZXhwcmVzc2lvbiAqLykge1xuXG5cdFx0XHQvLyBgaW5kZXhgIGlzIHRoZSBpbmRleCBvZiB0aGUgbmV4dCBjaGFyYWN0ZXIgdG8gYmUgY29uc3VtZWQuXG5cdFx0XHQvLyBEZWNvZGUgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlciBpbnRvIGBkZWx0YWAsXG5cdFx0XHQvLyB3aGljaCBnZXRzIGFkZGVkIHRvIGBpYC4gVGhlIG92ZXJmbG93IGNoZWNraW5nIGlzIGVhc2llclxuXHRcdFx0Ly8gaWYgd2UgaW5jcmVhc2UgYGlgIGFzIHdlIGdvLCB0aGVuIHN1YnRyYWN0IG9mZiBpdHMgc3RhcnRpbmdcblx0XHRcdC8vIHZhbHVlIGF0IHRoZSBlbmQgdG8gb2J0YWluIGBkZWx0YWAuXG5cdFx0XHRmb3IgKG9sZGkgPSBpLCB3ID0gMSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cblx0XHRcdFx0aWYgKGluZGV4ID49IGlucHV0TGVuZ3RoKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ2ludmFsaWQtaW5wdXQnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRpZ2l0ID0gYmFzaWNUb0RpZ2l0KGlucHV0LmNoYXJDb2RlQXQoaW5kZXgrKykpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA+PSBiYXNlIHx8IGRpZ2l0ID4gZmxvb3IoKG1heEludCAtIGkpIC8gdykpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGkgKz0gZGlnaXQgKiB3O1xuXHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPCB0KSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdGlmICh3ID4gZmxvb3IobWF4SW50IC8gYmFzZU1pbnVzVCkpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHcgKj0gYmFzZU1pbnVzVDtcblxuXHRcdFx0fVxuXG5cdFx0XHRvdXQgPSBvdXRwdXQubGVuZ3RoICsgMTtcblx0XHRcdGJpYXMgPSBhZGFwdChpIC0gb2xkaSwgb3V0LCBvbGRpID09IDApO1xuXG5cdFx0XHQvLyBgaWAgd2FzIHN1cHBvc2VkIHRvIHdyYXAgYXJvdW5kIGZyb20gYG91dGAgdG8gYDBgLFxuXHRcdFx0Ly8gaW5jcmVtZW50aW5nIGBuYCBlYWNoIHRpbWUsIHNvIHdlJ2xsIGZpeCB0aGF0IG5vdzpcblx0XHRcdGlmIChmbG9vcihpIC8gb3V0KSA+IG1heEludCAtIG4pIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdG4gKz0gZmxvb3IoaSAvIG91dCk7XG5cdFx0XHRpICU9IG91dDtcblxuXHRcdFx0Ly8gSW5zZXJ0IGBuYCBhdCBwb3NpdGlvbiBgaWAgb2YgdGhlIG91dHB1dFxuXHRcdFx0b3V0cHV0LnNwbGljZShpKyssIDAsIG4pO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVjczJlbmNvZGUob3V0cHV0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuXHQgKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBlbmNvZGUoaW5wdXQpIHtcblx0XHR2YXIgbixcblx0XHQgICAgZGVsdGEsXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50LFxuXHRcdCAgICBiYXNpY0xlbmd0aCxcblx0XHQgICAgYmlhcyxcblx0XHQgICAgaixcblx0XHQgICAgbSxcblx0XHQgICAgcSxcblx0XHQgICAgayxcblx0XHQgICAgdCxcblx0XHQgICAgY3VycmVudFZhbHVlLFxuXHRcdCAgICBvdXRwdXQgPSBbXSxcblx0XHQgICAgLyoqIGBpbnB1dExlbmd0aGAgd2lsbCBob2xkIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgaW4gYGlucHV0YC4gKi9cblx0XHQgICAgaW5wdXRMZW5ndGgsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsXG5cdFx0ICAgIGJhc2VNaW51c1QsXG5cdFx0ICAgIHFNaW51c1Q7XG5cblx0XHQvLyBDb252ZXJ0IHRoZSBpbnB1dCBpbiBVQ1MtMiB0byBVbmljb2RlXG5cdFx0aW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTtcblxuXHRcdC8vIENhY2hlIHRoZSBsZW5ndGhcblx0XHRpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuXHRcdC8vIEluaXRpYWxpemUgdGhlIHN0YXRlXG5cdFx0biA9IGluaXRpYWxOO1xuXHRcdGRlbHRhID0gMDtcblx0XHRiaWFzID0gaW5pdGlhbEJpYXM7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzXG5cdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcblx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoO1xuXG5cdFx0Ly8gYGhhbmRsZWRDUENvdW50YCBpcyB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cdFx0Ly8gYGJhc2ljTGVuZ3RoYCBpcyB0aGUgbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuXG5cdFx0Ly8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgLSBpZiBpdCBpcyBub3QgZW1wdHkgLSB3aXRoIGEgZGVsaW1pdGVyXG5cdFx0aWYgKGJhc2ljTGVuZ3RoKSB7XG5cdFx0XHRvdXRwdXQucHVzaChkZWxpbWl0ZXIpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZW5jb2RpbmcgbG9vcDpcblx0XHR3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuXG5cdFx0XHQvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0XG5cdFx0XHQvLyBsYXJnZXIgb25lOlxuXHRcdFx0Zm9yIChtID0gbWF4SW50LCBqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG5cdFx0XHRcdFx0bSA9IGN1cnJlbnRWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sXG5cdFx0XHQvLyBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvd1xuXHRcdFx0aGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuXHRcdFx0aWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7XG5cdFx0XHRuID0gbTtcblxuXHRcdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA9PSBuKSB7XG5cdFx0XHRcdFx0Ly8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXJcblx0XHRcdFx0XHRmb3IgKHEgPSBkZWx0YSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cdFx0XHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblx0XHRcdFx0XHRcdGlmIChxIDwgdCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHFNaW51c1QgPSBxIC0gdDtcblx0XHRcdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0XHRcdG91dHB1dC5wdXNoKFxuXHRcdFx0XHRcdFx0XHRzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCwgMCkpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cSA9IGZsb29yKHFNaW51c1QgLyBiYXNlTWludXNUKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEsIDApKSk7XG5cdFx0XHRcdFx0YmlhcyA9IGFkYXB0KGRlbHRhLCBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsIGhhbmRsZWRDUENvdW50ID09IGJhc2ljTGVuZ3RoKTtcblx0XHRcdFx0XHRkZWx0YSA9IDA7XG5cdFx0XHRcdFx0KytoYW5kbGVkQ1BDb3VudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQrK2RlbHRhO1xuXHRcdFx0KytuO1xuXG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzc1xuXHQgKiB0byBVbmljb2RlLiBPbmx5IHRoZSBQdW55Y29kZWQgcGFydHMgb2YgdGhlIGlucHV0IHdpbGwgYmUgY29udmVydGVkLCBpLmUuXG5cdCAqIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IG9uIGEgc3RyaW5nIHRoYXQgaGFzIGFscmVhZHkgYmVlblxuXHQgKiBjb252ZXJ0ZWQgdG8gVW5pY29kZS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGVkIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogY29udmVydCB0byBVbmljb2RlLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgVW5pY29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gUHVueWNvZGVcblx0ICogc3RyaW5nLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9Vbmljb2RlKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhQdW55Y29kZS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyBkZWNvZGUoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgVW5pY29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBQdW55Y29kZS4gT25seSB0aGUgbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCxcblx0ICogaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQncyBhbHJlYWR5IGluXG5cdCAqIEFTQ0lJLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvIGNvbnZlcnQsIGFzIGFcblx0ICogVW5pY29kZSBzdHJpbmcuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUgb3Jcblx0ICogZW1haWwgYWRkcmVzcy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvQVNDSUkoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleE5vbkFTQ0lJLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/ICd4bi0tJyArIGVuY29kZShzdHJpbmcpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqIERlZmluZSB0aGUgcHVibGljIEFQSSAqL1xuXHRwdW55Y29kZSA9IHtcblx0XHQvKipcblx0XHQgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgUHVueWNvZGUuanMgdmVyc2lvbiBudW1iZXIuXG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgU3RyaW5nXG5cdFx0ICovXG5cdFx0J3ZlcnNpb24nOiAnMS4zLjInLFxuXHRcdC8qKlxuXHRcdCAqIEFuIG9iamVjdCBvZiBtZXRob2RzIHRvIGNvbnZlcnQgZnJvbSBKYXZhU2NyaXB0J3MgaW50ZXJuYWwgY2hhcmFjdGVyXG5cdFx0ICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay5cblx0XHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBPYmplY3Rcblx0XHQgKi9cblx0XHQndWNzMic6IHtcblx0XHRcdCdkZWNvZGUnOiB1Y3MyZGVjb2RlLFxuXHRcdFx0J2VuY29kZSc6IHVjczJlbmNvZGVcblx0XHR9LFxuXHRcdCdkZWNvZGUnOiBkZWNvZGUsXG5cdFx0J2VuY29kZSc6IGVuY29kZSxcblx0XHQndG9BU0NJSSc6IHRvQVNDSUksXG5cdFx0J3RvVW5pY29kZSc6IHRvVW5pY29kZVxuXHR9O1xuXG5cdC8qKiBFeHBvc2UgYHB1bnljb2RlYCAqL1xuXHQvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBzcGVjaWZpYyBjb25kaXRpb24gcGF0dGVybnNcblx0Ly8gbGlrZSB0aGUgZm9sbG93aW5nOlxuXHRpZiAoXG5cdFx0dHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiZcblx0XHRkZWZpbmUuYW1kXG5cdCkge1xuXHRcdGRlZmluZSgncHVueWNvZGUnLCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBwdW55Y29kZTtcblx0XHR9KTtcblx0fSBlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlKSB7XG5cdFx0aWYgKG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzKSB7IC8vIGluIE5vZGUuanMgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSBwdW55Y29kZTtcblx0XHR9IGVsc2UgeyAvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0Zm9yIChrZXkgaW4gcHVueWNvZGUpIHtcblx0XHRcdFx0cHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QucHVueWNvZGUgPSBwdW55Y29kZTtcblx0fVxuXG59KHRoaXMpKTtcblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG59LHt9XSw4ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nXG4vLyBvYmouaGFzT3duUHJvcGVydHkocHJvcCkgd2lsbCBicmVhay5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzA3XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHFzLCBzZXAsIGVxLCBvcHRpb25zKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICB2YXIgb2JqID0ge307XG5cbiAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciByZWdleHAgPSAvXFwrL2c7XG4gIHFzID0gcXMuc3BsaXQoc2VwKTtcblxuICB2YXIgbWF4S2V5cyA9IDEwMDA7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7XG4gICAgbWF4S2V5cyA9IG9wdGlvbnMubWF4S2V5cztcbiAgfVxuXG4gIHZhciBsZW4gPSBxcy5sZW5ndGg7XG4gIC8vIG1heEtleXMgPD0gMCBtZWFucyB0aGF0IHdlIHNob3VsZCBub3QgbGltaXQga2V5cyBjb3VudFxuICBpZiAobWF4S2V5cyA+IDAgJiYgbGVuID4gbWF4S2V5cykge1xuICAgIGxlbiA9IG1heEtleXM7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHggPSBxc1tpXS5yZXBsYWNlKHJlZ2V4cCwgJyUyMCcpLFxuICAgICAgICBpZHggPSB4LmluZGV4T2YoZXEpLFxuICAgICAgICBrc3RyLCB2c3RyLCBrLCB2O1xuXG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICBrc3RyID0geC5zdWJzdHIoMCwgaWR4KTtcbiAgICAgIHZzdHIgPSB4LnN1YnN0cihpZHggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAga3N0ciA9IHg7XG4gICAgICB2c3RyID0gJyc7XG4gICAgfVxuXG4gICAgayA9IGRlY29kZVVSSUNvbXBvbmVudChrc3RyKTtcbiAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZzdHIpO1xuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShvYmosIGspKSB7XG4gICAgICBvYmpba10gPSB2O1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICBvYmpba10ucHVzaCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tdID0gW29ialtrXSwgdl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG59LHt9XSw4OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5UHJpbWl0aXZlID0gZnVuY3Rpb24odikge1xuICBzd2l0Y2ggKHR5cGVvZiB2KSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiB2O1xuXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gdiA/ICd0cnVlJyA6ICdmYWxzZSc7XG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIGlzRmluaXRlKHYpID8gdiA6ICcnO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAnJztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmosIHNlcCwgZXEsIG5hbWUpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIGlmIChvYmogPT09IG51bGwpIHtcbiAgICBvYmogPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbWFwKG9iamVjdEtleXMob2JqKSwgZnVuY3Rpb24oaykge1xuICAgICAgdmFyIGtzID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShrKSkgKyBlcTtcbiAgICAgIGlmIChpc0FycmF5KG9ialtrXSkpIHtcbiAgICAgICAgcmV0dXJuIG1hcChvYmpba10sIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKHYpKTtcbiAgICAgICAgfSkuam9pbihzZXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmpba10pKTtcbiAgICAgIH1cbiAgICB9KS5qb2luKHNlcCk7XG5cbiAgfVxuXG4gIGlmICghbmFtZSkgcmV0dXJuICcnO1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShuYW1lKSkgKyBlcSArXG4gICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9iaikpO1xufTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh4cykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbmZ1bmN0aW9uIG1hcCAoeHMsIGYpIHtcbiAgaWYgKHhzLm1hcCkgcmV0dXJuIHhzLm1hcChmKTtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzLnB1c2goZih4c1tpXSwgaSkpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgcmVzLnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxufSx7fV0sOTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLmRlY29kZSA9IGV4cG9ydHMucGFyc2UgPSByZXF1aXJlKCcuL2RlY29kZScpO1xuZXhwb3J0cy5lbmNvZGUgPSBleHBvcnRzLnN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vZW5jb2RlJyk7XG5cbn0se1wiLi9kZWNvZGVcIjo4OCxcIi4vZW5jb2RlXCI6ODl9XSw5MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nXG4vLyBvYmouaGFzT3duUHJvcGVydHkocHJvcCkgd2lsbCBicmVhay5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzA3XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHFzLCBzZXAsIGVxLCBvcHRpb25zKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICB2YXIgb2JqID0ge307XG5cbiAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciByZWdleHAgPSAvXFwrL2c7XG4gIHFzID0gcXMuc3BsaXQoc2VwKTtcblxuICB2YXIgbWF4S2V5cyA9IDEwMDA7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7XG4gICAgbWF4S2V5cyA9IG9wdGlvbnMubWF4S2V5cztcbiAgfVxuXG4gIHZhciBsZW4gPSBxcy5sZW5ndGg7XG4gIC8vIG1heEtleXMgPD0gMCBtZWFucyB0aGF0IHdlIHNob3VsZCBub3QgbGltaXQga2V5cyBjb3VudFxuICBpZiAobWF4S2V5cyA+IDAgJiYgbGVuID4gbWF4S2V5cykge1xuICAgIGxlbiA9IG1heEtleXM7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHggPSBxc1tpXS5yZXBsYWNlKHJlZ2V4cCwgJyUyMCcpLFxuICAgICAgICBpZHggPSB4LmluZGV4T2YoZXEpLFxuICAgICAgICBrc3RyLCB2c3RyLCBrLCB2O1xuXG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICBrc3RyID0geC5zdWJzdHIoMCwgaWR4KTtcbiAgICAgIHZzdHIgPSB4LnN1YnN0cihpZHggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAga3N0ciA9IHg7XG4gICAgICB2c3RyID0gJyc7XG4gICAgfVxuXG4gICAgayA9IGRlY29kZVVSSUNvbXBvbmVudChrc3RyKTtcbiAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZzdHIpO1xuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShvYmosIGspKSB7XG4gICAgICBvYmpba10gPSB2O1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmpba10pKSB7XG4gICAgICBvYmpba10ucHVzaCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tdID0gW29ialtrXSwgdl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbn0se31dLDkyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnlQcmltaXRpdmUgPSBmdW5jdGlvbih2KSB7XG4gIHN3aXRjaCAodHlwZW9mIHYpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIHY7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiB2ID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gaXNGaW5pdGUodikgPyB2IDogJyc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaiwgc2VwLCBlcSwgbmFtZSkge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgIG9iaiA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbihrKSB7XG4gICAgICB2YXIga3MgPSBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKGspKSArIGVxO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgICByZXR1cm4gb2JqW2tdLm1hcChmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7XG4gICAgICAgIH0pLmpvaW4oc2VwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7XG4gICAgICB9XG4gICAgfSkuam9pbihzZXApO1xuXG4gIH1cblxuICBpZiAoIW5hbWUpIHJldHVybiAnJztcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUobmFtZSkpICsgZXEgK1xuICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTtcbn07XG5cbn0se31dLDkzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmFyZ3VtZW50c1s0XVs5MF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpXG59LHtcIi4vZGVjb2RlXCI6OTEsXCIuL2VuY29kZVwiOjkyLFwiZHVwXCI6OTB9XSw5NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHNldEltbWVkaWF0ZSxjbGVhckltbWVkaWF0ZSl7XG52YXIgbmV4dFRpY2sgPSByZXF1aXJlKCdwcm9jZXNzL2Jyb3dzZXIuanMnKS5uZXh0VGljaztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBpbW1lZGlhdGVJZHMgPSB7fTtcbnZhciBuZXh0SW1tZWRpYXRlSWQgPSAwO1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkgeyB0aW1lb3V0LmNsb3NlKCk7IH07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gVGhhdCdzIG5vdCBob3cgbm9kZS5qcyBpbXBsZW1lbnRzIGl0IGJ1dCB0aGUgZXhwb3NlZCBhcGkgaXMgdGhlIHNhbWUuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHNldEltbWVkaWF0ZSA6IGZ1bmN0aW9uKGZuKSB7XG4gIHZhciBpZCA9IG5leHRJbW1lZGlhdGVJZCsrO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gZmFsc2UgOiBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgaW1tZWRpYXRlSWRzW2lkXSA9IHRydWU7XG5cbiAgbmV4dFRpY2soZnVuY3Rpb24gb25OZXh0VGljaygpIHtcbiAgICBpZiAoaW1tZWRpYXRlSWRzW2lkXSkge1xuICAgICAgLy8gZm4uY2FsbCgpIGlzIGZhc3RlciBzbyB3ZSBvcHRpbWl6ZSBmb3IgdGhlIGNvbW1vbiB1c2UtY2FzZVxuICAgICAgLy8gQHNlZSBodHRwOi8vanNwZXJmLmNvbS9jYWxsLWFwcGx5LXNlZ3VcbiAgICAgIGlmIChhcmdzKSB7XG4gICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm4uY2FsbChudWxsKTtcbiAgICAgIH1cbiAgICAgIC8vIFByZXZlbnQgaWRzIGZyb20gbGVha2luZ1xuICAgICAgZXhwb3J0cy5jbGVhckltbWVkaWF0ZShpZCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gaWQ7XG59O1xuXG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gdHlwZW9mIGNsZWFySW1tZWRpYXRlID09PSBcImZ1bmN0aW9uXCIgPyBjbGVhckltbWVkaWF0ZSA6IGZ1bmN0aW9uKGlkKSB7XG4gIGRlbGV0ZSBpbW1lZGlhdGVJZHNbaWRdO1xufTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwidGltZXJzXCIpLnNldEltbWVkaWF0ZSxyZXF1aXJlKFwidGltZXJzXCIpLmNsZWFySW1tZWRpYXRlKVxufSx7XCJwcm9jZXNzL2Jyb3dzZXIuanNcIjo4NixcInRpbWVyc1wiOjk0fV0sOTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7XG5cbmV4cG9ydHMucGFyc2UgPSB1cmxQYXJzZTtcbmV4cG9ydHMucmVzb2x2ZSA9IHVybFJlc29sdmU7XG5leHBvcnRzLnJlc29sdmVPYmplY3QgPSB1cmxSZXNvbHZlT2JqZWN0O1xuZXhwb3J0cy5mb3JtYXQgPSB1cmxGb3JtYXQ7XG5cbmV4cG9ydHMuVXJsID0gVXJsO1xuXG5mdW5jdGlvbiBVcmwoKSB7XG4gIHRoaXMucHJvdG9jb2wgPSBudWxsO1xuICB0aGlzLnNsYXNoZXMgPSBudWxsO1xuICB0aGlzLmF1dGggPSBudWxsO1xuICB0aGlzLmhvc3QgPSBudWxsO1xuICB0aGlzLnBvcnQgPSBudWxsO1xuICB0aGlzLmhvc3RuYW1lID0gbnVsbDtcbiAgdGhpcy5oYXNoID0gbnVsbDtcbiAgdGhpcy5zZWFyY2ggPSBudWxsO1xuICB0aGlzLnF1ZXJ5ID0gbnVsbDtcbiAgdGhpcy5wYXRobmFtZSA9IG51bGw7XG4gIHRoaXMucGF0aCA9IG51bGw7XG4gIHRoaXMuaHJlZiA9IG51bGw7XG59XG5cbi8vIFJlZmVyZW5jZTogUkZDIDM5ODYsIFJGQyAxODA4LCBSRkMgMjM5NlxuXG4vLyBkZWZpbmUgdGhlc2UgaGVyZSBzbyBhdCBsZWFzdCB0aGV5IG9ubHkgaGF2ZSB0byBiZVxuLy8gY29tcGlsZWQgb25jZSBvbiB0aGUgZmlyc3QgbW9kdWxlIGxvYWQuXG52YXIgcHJvdG9jb2xQYXR0ZXJuID0gL14oW2EtejAtOS4rLV0rOikvaSxcbiAgICBwb3J0UGF0dGVybiA9IC86WzAtOV0qJC8sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyByZXNlcnZlZCBmb3IgZGVsaW1pdGluZyBVUkxzLlxuICAgIC8vIFdlIGFjdHVhbGx5IGp1c3QgYXV0by1lc2NhcGUgdGhlc2UuXG4gICAgZGVsaW1zID0gWyc8JywgJz4nLCAnXCInLCAnYCcsICcgJywgJ1xccicsICdcXG4nLCAnXFx0J10sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyBub3QgYWxsb3dlZCBmb3IgdmFyaW91cyByZWFzb25zLlxuICAgIHVud2lzZSA9IFsneycsICd9JywgJ3wnLCAnXFxcXCcsICdeJywgJ2AnXS5jb25jYXQoZGVsaW1zKSxcblxuICAgIC8vIEFsbG93ZWQgYnkgUkZDcywgYnV0IGNhdXNlIG9mIFhTUyBhdHRhY2tzLiAgQWx3YXlzIGVzY2FwZSB0aGVzZS5cbiAgICBhdXRvRXNjYXBlID0gWydcXCcnXS5jb25jYXQodW53aXNlKSxcbiAgICAvLyBDaGFyYWN0ZXJzIHRoYXQgYXJlIG5ldmVyIGV2ZXIgYWxsb3dlZCBpbiBhIGhvc3RuYW1lLlxuICAgIC8vIE5vdGUgdGhhdCBhbnkgaW52YWxpZCBjaGFycyBhcmUgYWxzbyBoYW5kbGVkLCBidXQgdGhlc2VcbiAgICAvLyBhcmUgdGhlIG9uZXMgdGhhdCBhcmUgKmV4cGVjdGVkKiB0byBiZSBzZWVuLCBzbyB3ZSBmYXN0LXBhdGhcbiAgICAvLyB0aGVtLlxuICAgIG5vbkhvc3RDaGFycyA9IFsnJScsICcvJywgJz8nLCAnOycsICcjJ10uY29uY2F0KGF1dG9Fc2NhcGUpLFxuICAgIGhvc3RFbmRpbmdDaGFycyA9IFsnLycsICc/JywgJyMnXSxcbiAgICBob3N0bmFtZU1heExlbiA9IDI1NSxcbiAgICBob3N0bmFtZVBhcnRQYXR0ZXJuID0gL15bYS16MC05QS1aXy1dezAsNjN9JC8sXG4gICAgaG9zdG5hbWVQYXJ0U3RhcnQgPSAvXihbYS16MC05QS1aXy1dezAsNjN9KSguKikkLyxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBjYW4gYWxsb3cgXCJ1bnNhZmVcIiBhbmQgXCJ1bndpc2VcIiBjaGFycy5cbiAgICB1bnNhZmVQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IG5ldmVyIGhhdmUgYSBob3N0bmFtZS5cbiAgICBob3N0bGVzc1Byb3RvY29sID0ge1xuICAgICAgJ2phdmFzY3JpcHQnOiB0cnVlLFxuICAgICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICAgIH0sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgYWx3YXlzIGNvbnRhaW4gYSAvLyBiaXQuXG4gICAgc2xhc2hlZFByb3RvY29sID0ge1xuICAgICAgJ2h0dHAnOiB0cnVlLFxuICAgICAgJ2h0dHBzJzogdHJ1ZSxcbiAgICAgICdmdHAnOiB0cnVlLFxuICAgICAgJ2dvcGhlcic6IHRydWUsXG4gICAgICAnZmlsZSc6IHRydWUsXG4gICAgICAnaHR0cDonOiB0cnVlLFxuICAgICAgJ2h0dHBzOic6IHRydWUsXG4gICAgICAnZnRwOic6IHRydWUsXG4gICAgICAnZ29waGVyOic6IHRydWUsXG4gICAgICAnZmlsZTonOiB0cnVlXG4gICAgfSxcbiAgICBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG5cbmZ1bmN0aW9uIHVybFBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKHVybCAmJiBpc09iamVjdCh1cmwpICYmIHVybCBpbnN0YW5jZW9mIFVybCkgcmV0dXJuIHVybDtcblxuICB2YXIgdSA9IG5ldyBVcmw7XG4gIHUucGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7XG4gIHJldHVybiB1O1xufVxuXG5VcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAoIWlzU3RyaW5nKHVybCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUGFyYW1ldGVyICd1cmwnIG11c3QgYmUgYSBzdHJpbmcsIG5vdCBcIiArIHR5cGVvZiB1cmwpO1xuICB9XG5cbiAgdmFyIHJlc3QgPSB1cmw7XG5cbiAgLy8gdHJpbSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgLy8gVGhpcyBpcyB0byBzdXBwb3J0IHBhcnNlIHN0dWZmIGxpa2UgXCIgIGh0dHA6Ly9mb28uY29tICBcXG5cIlxuICByZXN0ID0gcmVzdC50cmltKCk7XG5cbiAgdmFyIHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gIGlmIChwcm90bykge1xuICAgIHByb3RvID0gcHJvdG9bMF07XG4gICAgdmFyIGxvd2VyUHJvdG8gPSBwcm90by50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMucHJvdG9jb2wgPSBsb3dlclByb3RvO1xuICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpO1xuICB9XG5cbiAgLy8gZmlndXJlIG91dCBpZiBpdCdzIGdvdCBhIGhvc3RcbiAgLy8gdXNlckBzZXJ2ZXIgaXMgKmFsd2F5cyogaW50ZXJwcmV0ZWQgYXMgYSBob3N0bmFtZSwgYW5kIHVybFxuICAvLyByZXNvbHV0aW9uIHdpbGwgdHJlYXQgLy9mb28vYmFyIGFzIGhvc3Q9Zm9vLHBhdGg9YmFyIGJlY2F1c2UgdGhhdCdzXG4gIC8vIGhvdyB0aGUgYnJvd3NlciByZXNvbHZlcyByZWxhdGl2ZSBVUkxzLlxuICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpIHtcbiAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nO1xuICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7XG4gICAgICB0aGlzLnNsYXNoZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaG9zdGxlc3NQcm90b2NvbFtwcm90b10gJiZcbiAgICAgIChzbGFzaGVzIHx8IChwcm90byAmJiAhc2xhc2hlZFByb3RvY29sW3Byb3RvXSkpKSB7XG5cbiAgICAvLyB0aGVyZSdzIGEgaG9zdG5hbWUuXG4gICAgLy8gdGhlIGZpcnN0IGluc3RhbmNlIG9mIC8sID8sIDssIG9yICMgZW5kcyB0aGUgaG9zdC5cbiAgICAvL1xuICAgIC8vIElmIHRoZXJlIGlzIGFuIEAgaW4gdGhlIGhvc3RuYW1lLCB0aGVuIG5vbi1ob3N0IGNoYXJzICphcmUqIGFsbG93ZWRcbiAgICAvLyB0byB0aGUgbGVmdCBvZiB0aGUgbGFzdCBAIHNpZ24sIHVubGVzcyBzb21lIGhvc3QtZW5kaW5nIGNoYXJhY3RlclxuICAgIC8vIGNvbWVzICpiZWZvcmUqIHRoZSBALXNpZ24uXG4gICAgLy8gVVJMcyBhcmUgb2Jub3hpb3VzLlxuICAgIC8vXG4gICAgLy8gZXg6XG4gICAgLy8gaHR0cDovL2FAYkBjLyA9PiB1c2VyOmFAYiBob3N0OmNcbiAgICAvLyBodHRwOi8vYUBiP0BjID0+IHVzZXI6YSBob3N0OmMgcGF0aDovP0BjXG5cbiAgICAvLyB2MC4xMiBUT0RPKGlzYWFjcyk6IFRoaXMgaXMgbm90IHF1aXRlIGhvdyBDaHJvbWUgZG9lcyB0aGluZ3MuXG4gICAgLy8gUmV2aWV3IG91ciB0ZXN0IGNhc2UgYWdhaW5zdCBicm93c2VycyBtb3JlIGNvbXByZWhlbnNpdmVseS5cblxuICAgIC8vIGZpbmQgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGFueSBob3N0RW5kaW5nQ2hhcnNcbiAgICB2YXIgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9zdEVuZGluZ0NoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlXG4gICAgLy8gYXV0aCBwb3J0aW9uIGNhbm5vdCBnbyBwYXN0LCBvciB0aGUgbGFzdCBAIGNoYXIgaXMgdGhlIGRlY2lkZXIuXG4gICAgdmFyIGF1dGgsIGF0U2lnbjtcbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIGF0U2lnbiBjYW4gYmUgYW55d2hlcmUuXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGF0U2lnbiBtdXN0IGJlIGluIGF1dGggcG9ydGlvbi5cbiAgICAgIC8vIGh0dHA6Ly9hQGIvY0BkID0+IGhvc3Q6YiBhdXRoOmEgcGF0aDovY0BkXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7XG4gICAgfVxuXG4gICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguXG4gICAgLy8gUHVsbCB0aGF0IG9mZi5cbiAgICBpZiAoYXRTaWduICE9PSAtMSkge1xuICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKGF0U2lnbiArIDEpO1xuICAgICAgdGhpcy5hdXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIH1cblxuICAgIC8vIHRoZSBob3N0IGlzIHRoZSByZW1haW5pbmcgdG8gdGhlIGxlZnQgb2YgdGhlIGZpcnN0IG5vbi1ob3N0IGNoYXJcbiAgICBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub25Ib3N0Q2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2Yobm9uSG9zdENoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG4gICAgLy8gaWYgd2Ugc3RpbGwgaGF2ZSBub3QgaGl0IGl0LCB0aGVuIHRoZSBlbnRpcmUgdGhpbmcgaXMgYSBob3N0LlxuICAgIGlmIChob3N0RW5kID09PSAtMSlcbiAgICAgIGhvc3RFbmQgPSByZXN0Lmxlbmd0aDtcblxuICAgIHRoaXMuaG9zdCA9IHJlc3Quc2xpY2UoMCwgaG9zdEVuZCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoaG9zdEVuZCk7XG5cbiAgICAvLyBwdWxsIG91dCBwb3J0LlxuICAgIHRoaXMucGFyc2VIb3N0KCk7XG5cbiAgICAvLyB3ZSd2ZSBpbmRpY2F0ZWQgdGhhdCB0aGVyZSBpcyBhIGhvc3RuYW1lLFxuICAgIC8vIHNvIGV2ZW4gaWYgaXQncyBlbXB0eSwgaXQgaGFzIHRvIGJlIHByZXNlbnQuXG4gICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG5cbiAgICAvLyBpZiBob3N0bmFtZSBiZWdpbnMgd2l0aCBbIGFuZCBlbmRzIHdpdGggXVxuICAgIC8vIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLlxuICAgIHZhciBpcHY2SG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lWzBdID09PSAnWycgJiZcbiAgICAgICAgdGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDFdID09PSAnXSc7XG5cbiAgICAvLyB2YWxpZGF0ZSBhIGxpdHRsZS5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgdmFyIGhvc3RwYXJ0cyA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoL1xcLi8pO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBob3N0cGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldO1xuICAgICAgICBpZiAoIXBhcnQpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIXBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICB2YXIgbmV3cGFydCA9ICcnO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmNoYXJDb2RlQXQoaikgPiAxMjcpIHtcbiAgICAgICAgICAgICAgLy8gd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhpcyB0byBtYWtlIHN1cmUgc2l6ZSBvZiBob3N0bmFtZSBpcyBub3RcbiAgICAgICAgICAgICAgLy8gYnJva2VuIGJ5IHJlcGxhY2luZyBub24tQVNDSUkgYnkgbm90aGluZ1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gcGFydFtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgdGVzdCBhZ2FpbiB3aXRoIEFTQ0lJIGNoYXIgb25seVxuICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgICAgdmFyIHZhbGlkUGFydHMgPSBob3N0cGFydHMuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB2YXIgbm90SG9zdCA9IGhvc3RwYXJ0cy5zbGljZShpICsgMSk7XG4gICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7XG4gICAgICAgICAgICBpZiAoYml0KSB7XG4gICAgICAgICAgICAgIHZhbGlkUGFydHMucHVzaChiaXRbMV0pO1xuICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RIb3N0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ob3N0bmFtZSA9IHZhbGlkUGFydHMuam9pbignLicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaG9zdG5hbWUubGVuZ3RoID4gaG9zdG5hbWVNYXhMZW4pIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaG9zdG5hbWVzIGFyZSBhbHdheXMgbG93ZXIgY2FzZS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIC8vIElETkEgU3VwcG9ydDogUmV0dXJucyBhIHB1bnkgY29kZWQgcmVwcmVzZW50YXRpb24gb2YgXCJkb21haW5cIi5cbiAgICAgIC8vIEl0IG9ubHkgY29udmVydHMgdGhlIHBhcnQgb2YgdGhlIGRvbWFpbiBuYW1lIHRoYXRcbiAgICAgIC8vIGhhcyBub24gQVNDSUkgY2hhcmFjdGVycy4gSS5lLiBpdCBkb3NlbnQgbWF0dGVyIGlmXG4gICAgICAvLyB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQgYWxyZWFkeSBpcyBpbiBBU0NJSS5cbiAgICAgIHZhciBkb21haW5BcnJheSA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoJy4nKTtcbiAgICAgIHZhciBuZXdPdXQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZG9tYWluQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHMgPSBkb21haW5BcnJheVtpXTtcbiAgICAgICAgbmV3T3V0LnB1c2gocy5tYXRjaCgvW15BLVphLXowLTlfLV0vKSA/XG4gICAgICAgICAgICAneG4tLScgKyBwdW55Y29kZS5lbmNvZGUocykgOiBzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSBuZXdPdXQuam9pbignLicpO1xuICAgIH1cblxuICAgIHZhciBwID0gdGhpcy5wb3J0ID8gJzonICsgdGhpcy5wb3J0IDogJyc7XG4gICAgdmFyIGggPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuICAgIHRoaXMuaG9zdCA9IGggKyBwO1xuICAgIHRoaXMuaHJlZiArPSB0aGlzLmhvc3Q7XG5cbiAgICAvLyBzdHJpcCBbIGFuZCBdIGZyb20gdGhlIGhvc3RuYW1lXG4gICAgLy8gdGhlIGhvc3QgZmllbGQgc3RpbGwgcmV0YWlucyB0aGVtLCB0aG91Z2hcbiAgICBpZiAoaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS5zdWJzdHIoMSwgdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIGlmIChyZXN0WzBdICE9PSAnLycpIHtcbiAgICAgICAgcmVzdCA9ICcvJyArIHJlc3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gbm93IHJlc3QgaXMgc2V0IHRvIHRoZSBwb3N0LWhvc3Qgc3R1ZmYuXG4gIC8vIGNob3Agb2ZmIGFueSBkZWxpbSBjaGFycy5cbiAgaWYgKCF1bnNhZmVQcm90b2NvbFtsb3dlclByb3RvXSkge1xuXG4gICAgLy8gRmlyc3QsIG1ha2UgMTAwJSBzdXJlIHRoYXQgYW55IFwiYXV0b0VzY2FwZVwiIGNoYXJzIGdldFxuICAgIC8vIGVzY2FwZWQsIGV2ZW4gaWYgZW5jb2RlVVJJQ29tcG9uZW50IGRvZXNuJ3QgdGhpbmsgdGhleVxuICAgIC8vIG5lZWQgdG8gYmUuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdXRvRXNjYXBlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFlID0gYXV0b0VzY2FwZVtpXTtcbiAgICAgIHZhciBlc2MgPSBlbmNvZGVVUklDb21wb25lbnQoYWUpO1xuICAgICAgaWYgKGVzYyA9PT0gYWUpIHtcbiAgICAgICAgZXNjID0gZXNjYXBlKGFlKTtcbiAgICAgIH1cbiAgICAgIHJlc3QgPSByZXN0LnNwbGl0KGFlKS5qb2luKGVzYyk7XG4gICAgfVxuICB9XG5cblxuICAvLyBjaG9wIG9mZiBmcm9tIHRoZSB0YWlsIGZpcnN0LlxuICB2YXIgaGFzaCA9IHJlc3QuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaCAhPT0gLTEpIHtcbiAgICAvLyBnb3QgYSBmcmFnbWVudCBzdHJpbmcuXG4gICAgdGhpcy5oYXNoID0gcmVzdC5zdWJzdHIoaGFzaCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgaGFzaCk7XG4gIH1cbiAgdmFyIHFtID0gcmVzdC5pbmRleE9mKCc/Jyk7XG4gIGlmIChxbSAhPT0gLTEpIHtcbiAgICB0aGlzLnNlYXJjaCA9IHJlc3Quc3Vic3RyKHFtKTtcbiAgICB0aGlzLnF1ZXJ5ID0gcmVzdC5zdWJzdHIocW0gKyAxKTtcbiAgICBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKHRoaXMucXVlcnkpO1xuICAgIH1cbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBxbSk7XG4gIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgIC8vIG5vIHF1ZXJ5IHN0cmluZywgYnV0IHBhcnNlUXVlcnlTdHJpbmcgc3RpbGwgcmVxdWVzdGVkXG4gICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICB0aGlzLnF1ZXJ5ID0ge307XG4gIH1cbiAgaWYgKHJlc3QpIHRoaXMucGF0aG5hbWUgPSByZXN0O1xuICBpZiAoc2xhc2hlZFByb3RvY29sW2xvd2VyUHJvdG9dICYmXG4gICAgICB0aGlzLmhvc3RuYW1lICYmICF0aGlzLnBhdGhuYW1lKSB7XG4gICAgdGhpcy5wYXRobmFtZSA9ICcvJztcbiAgfVxuXG4gIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgaWYgKHRoaXMucGF0aG5hbWUgfHwgdGhpcy5zZWFyY2gpIHtcbiAgICB2YXIgcCA9IHRoaXMucGF0aG5hbWUgfHwgJyc7XG4gICAgdmFyIHMgPSB0aGlzLnNlYXJjaCB8fCAnJztcbiAgICB0aGlzLnBhdGggPSBwICsgcztcbiAgfVxuXG4gIC8vIGZpbmFsbHksIHJlY29uc3RydWN0IHRoZSBocmVmIGJhc2VkIG9uIHdoYXQgaGFzIGJlZW4gdmFsaWRhdGVkLlxuICB0aGlzLmhyZWYgPSB0aGlzLmZvcm1hdCgpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGZvcm1hdCBhIHBhcnNlZCBvYmplY3QgaW50byBhIHVybCBzdHJpbmdcbmZ1bmN0aW9uIHVybEZvcm1hdChvYmopIHtcbiAgLy8gZW5zdXJlIGl0J3MgYW4gb2JqZWN0LCBhbmQgbm90IGEgc3RyaW5nIHVybC5cbiAgLy8gSWYgaXQncyBhbiBvYmosIHRoaXMgaXMgYSBuby1vcC5cbiAgLy8gdGhpcyB3YXksIHlvdSBjYW4gY2FsbCB1cmxfZm9ybWF0KCkgb24gc3RyaW5nc1xuICAvLyB0byBjbGVhbiB1cCBwb3RlbnRpYWxseSB3b25reSB1cmxzLlxuICBpZiAoaXNTdHJpbmcob2JqKSkgb2JqID0gdXJsUGFyc2Uob2JqKTtcbiAgaWYgKCEob2JqIGluc3RhbmNlb2YgVXJsKSkgcmV0dXJuIFVybC5wcm90b3R5cGUuZm9ybWF0LmNhbGwob2JqKTtcbiAgcmV0dXJuIG9iai5mb3JtYXQoKTtcbn1cblxuVXJsLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGF1dGggPSB0aGlzLmF1dGggfHwgJyc7XG4gIGlmIChhdXRoKSB7XG4gICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICBhdXRoID0gYXV0aC5yZXBsYWNlKC8lM0EvaSwgJzonKTtcbiAgICBhdXRoICs9ICdAJztcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2wgfHwgJycsXG4gICAgICBwYXRobmFtZSA9IHRoaXMucGF0aG5hbWUgfHwgJycsXG4gICAgICBoYXNoID0gdGhpcy5oYXNoIHx8ICcnLFxuICAgICAgaG9zdCA9IGZhbHNlLFxuICAgICAgcXVlcnkgPSAnJztcblxuICBpZiAodGhpcy5ob3N0KSB7XG4gICAgaG9zdCA9IGF1dGggKyB0aGlzLmhvc3Q7XG4gIH0gZWxzZSBpZiAodGhpcy5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpID09PSAtMSA/XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgOlxuICAgICAgICAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nKTtcbiAgICBpZiAodGhpcy5wb3J0KSB7XG4gICAgICBob3N0ICs9ICc6JyArIHRoaXMucG9ydDtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5xdWVyeSAmJlxuICAgICAgaXNPYmplY3QodGhpcy5xdWVyeSkgJiZcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMucXVlcnkpLmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHRoaXMucXVlcnkpO1xuICB9XG5cbiAgdmFyIHNlYXJjaCA9IHRoaXMuc2VhcmNoIHx8IChxdWVyeSAmJiAoJz8nICsgcXVlcnkpKSB8fCAnJztcblxuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gJzonKSBwcm90b2NvbCArPSAnOic7XG5cbiAgLy8gb25seSB0aGUgc2xhc2hlZFByb3RvY29scyBnZXQgdGhlIC8vLiAgTm90IG1haWx0bzosIHhtcHA6LCBldGMuXG4gIC8vIHVubGVzcyB0aGV5IGhhZCB0aGVtIHRvIGJlZ2luIHdpdGguXG4gIGlmICh0aGlzLnNsYXNoZXMgfHxcbiAgICAgICghcHJvdG9jb2wgfHwgc2xhc2hlZFByb3RvY29sW3Byb3RvY29sXSkgJiYgaG9zdCAhPT0gZmFsc2UpIHtcbiAgICBob3N0ID0gJy8vJyArIChob3N0IHx8ICcnKTtcbiAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHBhdGhuYW1lID0gJy8nICsgcGF0aG5hbWU7XG4gIH0gZWxzZSBpZiAoIWhvc3QpIHtcbiAgICBob3N0ID0gJyc7XG4gIH1cblxuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBoYXNoID0gJyMnICsgaGFzaDtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2guY2hhckF0KDApICE9PSAnPycpIHNlYXJjaCA9ICc/JyArIHNlYXJjaDtcblxuICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KG1hdGNoKTtcbiAgfSk7XG4gIHNlYXJjaCA9IHNlYXJjaC5yZXBsYWNlKCcjJywgJyUyMycpO1xuXG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlKHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmUocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICByZXR1cm4gdGhpcy5yZXNvbHZlT2JqZWN0KHVybFBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSkpLmZvcm1hdCgpO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZU9iamVjdChzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIGlmICghc291cmNlKSByZXR1cm4gcmVsYXRpdmU7XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlT2JqZWN0KHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlT2JqZWN0ID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcbiAgaWYgKGlzU3RyaW5nKHJlbGF0aXZlKSkge1xuICAgIHZhciByZWwgPSBuZXcgVXJsKCk7XG4gICAgcmVsLnBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgcmVsYXRpdmUgPSByZWw7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gbmV3IFVybCgpO1xuICBPYmplY3Qua2V5cyh0aGlzKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcbiAgICByZXN1bHRba10gPSB0aGlzW2tdO1xuICB9LCB0aGlzKTtcblxuICAvLyBoYXNoIGlzIGFsd2F5cyBvdmVycmlkZGVuLCBubyBtYXR0ZXIgd2hhdC5cbiAgLy8gZXZlbiBocmVmPVwiXCIgd2lsbCByZW1vdmUgaXQuXG4gIHJlc3VsdC5oYXNoID0gcmVsYXRpdmUuaGFzaDtcblxuICAvLyBpZiB0aGUgcmVsYXRpdmUgdXJsIGlzIGVtcHR5LCB0aGVuIHRoZXJlJ3Mgbm90aGluZyBsZWZ0IHRvIGRvIGhlcmUuXG4gIGlmIChyZWxhdGl2ZS5ocmVmID09PSAnJykge1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBocmVmcyBsaWtlIC8vZm9vL2JhciBhbHdheXMgY3V0IHRvIHRoZSBwcm90b2NvbC5cbiAgaWYgKHJlbGF0aXZlLnNsYXNoZXMgJiYgIXJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgLy8gdGFrZSBldmVyeXRoaW5nIGV4Y2VwdCB0aGUgcHJvdG9jb2wgZnJvbSByZWxhdGl2ZVxuICAgIE9iamVjdC5rZXlzKHJlbGF0aXZlKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcbiAgICAgIGlmIChrICE9PSAncHJvdG9jb2wnKVxuICAgICAgICByZXN1bHRba10gPSByZWxhdGl2ZVtrXTtcbiAgICB9KTtcblxuICAgIC8vdXJsUGFyc2UgYXBwZW5kcyB0cmFpbGluZyAvIHRvIHVybHMgbGlrZSBodHRwOi8vd3d3LmV4YW1wbGUuY29tXG4gICAgaWYgKHNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdICYmXG4gICAgICAgIHJlc3VsdC5ob3N0bmFtZSAmJiAhcmVzdWx0LnBhdGhuYW1lKSB7XG4gICAgICByZXN1bHQucGF0aCA9IHJlc3VsdC5wYXRobmFtZSA9ICcvJztcbiAgICB9XG5cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKHJlbGF0aXZlLnByb3RvY29sICYmIHJlbGF0aXZlLnByb3RvY29sICE9PSByZXN1bHQucHJvdG9jb2wpIHtcbiAgICAvLyBpZiBpdCdzIGEga25vd24gdXJsIHByb3RvY29sLCB0aGVuIGNoYW5naW5nXG4gICAgLy8gdGhlIHByb3RvY29sIGRvZXMgd2VpcmQgdGhpbmdzXG4gICAgLy8gZmlyc3QsIGlmIGl0J3Mgbm90IGZpbGU6LCB0aGVuIHdlIE1VU1QgaGF2ZSBhIGhvc3QsXG4gICAgLy8gYW5kIGlmIHRoZXJlIHdhcyBhIHBhdGhcbiAgICAvLyB0byBiZWdpbiB3aXRoLCB0aGVuIHdlIE1VU1QgaGF2ZSBhIHBhdGguXG4gICAgLy8gaWYgaXQgaXMgZmlsZTosIHRoZW4gdGhlIGhvc3QgaXMgZHJvcHBlZCxcbiAgICAvLyBiZWNhdXNlIHRoYXQncyBrbm93biB0byBiZSBob3N0bGVzcy5cbiAgICAvLyBhbnl0aGluZyBlbHNlIGlzIGFzc3VtZWQgdG8gYmUgYWJzb2x1dGUuXG4gICAgaWYgKCFzbGFzaGVkUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICBPYmplY3Qua2V5cyhyZWxhdGl2ZSkuZm9yRWFjaChmdW5jdGlvbihrKSB7XG4gICAgICAgIHJlc3VsdFtrXSA9IHJlbGF0aXZlW2tdO1xuICAgICAgfSk7XG4gICAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVzdWx0LnByb3RvY29sID0gcmVsYXRpdmUucHJvdG9jb2w7XG4gICAgaWYgKCFyZWxhdGl2ZS5ob3N0ICYmICFob3N0bGVzc1Byb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIHJlbFBhdGggPSAocmVsYXRpdmUucGF0aG5hbWUgfHwgJycpLnNwbGl0KCcvJyk7XG4gICAgICB3aGlsZSAocmVsUGF0aC5sZW5ndGggJiYgIShyZWxhdGl2ZS5ob3N0ID0gcmVsUGF0aC5zaGlmdCgpKSk7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3QpIHJlbGF0aXZlLmhvc3QgPSAnJztcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdG5hbWUpIHJlbGF0aXZlLmhvc3RuYW1lID0gJyc7XG4gICAgICBpZiAocmVsUGF0aFswXSAhPT0gJycpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICBpZiAocmVsUGF0aC5sZW5ndGggPCAyKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsUGF0aC5qb2luKCcvJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbGF0aXZlLnBhdGhuYW1lO1xuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHJlc3VsdC5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCAnJztcbiAgICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGg7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdDtcbiAgICByZXN1bHQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7XG4gICAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnBhdGhuYW1lIHx8IHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHZhciBwID0gcmVzdWx0LnBhdGhuYW1lIHx8ICcnO1xuICAgICAgdmFyIHMgPSByZXN1bHQuc2VhcmNoIHx8ICcnO1xuICAgICAgcmVzdWx0LnBhdGggPSBwICsgcztcbiAgICB9XG4gICAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB2YXIgaXNTb3VyY2VBYnMgPSAocmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyksXG4gICAgICBpc1JlbEFicyA9IChcbiAgICAgICAgICByZWxhdGl2ZS5ob3N0IHx8XG4gICAgICAgICAgcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLydcbiAgICAgICksXG4gICAgICBtdXN0RW5kQWJzID0gKGlzUmVsQWJzIHx8IGlzU291cmNlQWJzIHx8XG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuaG9zdCAmJiByZWxhdGl2ZS5wYXRobmFtZSkpLFxuICAgICAgcmVtb3ZlQWxsRG90cyA9IG11c3RFbmRBYnMsXG4gICAgICBzcmNQYXRoID0gcmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcmVsUGF0aCA9IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgICBwc3ljaG90aWMgPSByZXN1bHQucHJvdG9jb2wgJiYgIXNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdO1xuXG4gIC8vIGlmIHRoZSB1cmwgaXMgYSBub24tc2xhc2hlZCB1cmwsIHRoZW4gcmVsYXRpdmVcbiAgLy8gbGlua3MgbGlrZSAuLi8uLiBzaG91bGQgYmUgYWJsZVxuICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuXG4gIC8vIHJlc3VsdC5wcm90b2NvbCBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSBub3cuXG4gIC8vIExhdGVyIG9uLCBwdXQgdGhlIGZpcnN0IHBhdGggcGFydCBpbnRvIHRoZSBob3N0IGZpZWxkLlxuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gJyc7XG4gICAgcmVzdWx0LnBvcnQgPSBudWxsO1xuICAgIGlmIChyZXN1bHQuaG9zdCkge1xuICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICcnKSBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7XG4gICAgICBlbHNlIHNyY1BhdGgudW5zaGlmdChyZXN1bHQuaG9zdCk7XG4gICAgfVxuICAgIHJlc3VsdC5ob3N0ID0gJyc7XG4gICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7XG4gICAgICByZWxhdGl2ZS5wb3J0ID0gbnVsbDtcbiAgICAgIGlmIChyZWxhdGl2ZS5ob3N0KSB7XG4gICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7XG4gICAgICAgIGVsc2UgcmVsUGF0aC51bnNoaWZ0KHJlbGF0aXZlLmhvc3QpO1xuICAgICAgfVxuICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7XG4gICAgfVxuICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdID09PSAnJyk7XG4gIH1cblxuICBpZiAoaXNSZWxBYnMpIHtcbiAgICAvLyBpdCdzIGFic29sdXRlLlxuICAgIHJlc3VsdC5ob3N0ID0gKHJlbGF0aXZlLmhvc3QgfHwgcmVsYXRpdmUuaG9zdCA9PT0gJycpID9cbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3QgOiByZXN1bHQuaG9zdDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAocmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdG5hbWUgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgOiByZXN1bHQuaG9zdG5hbWU7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICBzcmNQYXRoID0gcmVsUGF0aDtcbiAgICAvLyBmYWxsIHRocm91Z2ggdG8gdGhlIGRvdC1oYW5kbGluZyBiZWxvdy5cbiAgfSBlbHNlIGlmIChyZWxQYXRoLmxlbmd0aCkge1xuICAgIC8vIGl0J3MgcmVsYXRpdmVcbiAgICAvLyB0aHJvdyBhd2F5IHRoZSBleGlzdGluZyBmaWxlLCBhbmQgdGFrZSB0aGUgbmV3IHBhdGggaW5zdGVhZC5cbiAgICBpZiAoIXNyY1BhdGgpIHNyY1BhdGggPSBbXTtcbiAgICBzcmNQYXRoLnBvcCgpO1xuICAgIHNyY1BhdGggPSBzcmNQYXRoLmNvbmNhdChyZWxQYXRoKTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICB9IGVsc2UgaWYgKCFpc051bGxPclVuZGVmaW5lZChyZWxhdGl2ZS5zZWFyY2gpKSB7XG4gICAgLy8ganVzdCBwdWxsIG91dCB0aGUgc2VhcmNoLlxuICAgIC8vIGxpa2UgaHJlZj0nP2ZvbycuXG4gICAgLy8gUHV0IHRoaXMgYWZ0ZXIgdGhlIG90aGVyIHR3byBjYXNlcyBiZWNhdXNlIGl0IHNpbXBsaWZpZXMgdGhlIGJvb2xlYW5zXG4gICAgaWYgKHBzeWNob3RpYykge1xuICAgICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBzcmNQYXRoLnNoaWZ0KCk7XG4gICAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgICAvL3RoaXMgZXNwZWNpYWx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKCFpc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7XG4gICAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gICAgfVxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgLy8gbm8gcGF0aCBhdCBhbGwuICBlYXN5LlxuICAgIC8vIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgb3RoZXIgc3R1ZmYgYWJvdmUuXG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gJy8nICsgcmVzdWx0LnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnBhdGggPSBudWxsO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaWYgYSB1cmwgRU5EcyBpbiAuIG9yIC4uLCB0aGVuIGl0IG11c3QgZ2V0IGEgdHJhaWxpbmcgc2xhc2guXG4gIC8vIGhvd2V2ZXIsIGlmIGl0IGVuZHMgaW4gYW55dGhpbmcgZWxzZSBub24tc2xhc2h5LFxuICAvLyB0aGVuIGl0IG11c3QgTk9UIGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICB2YXIgbGFzdCA9IHNyY1BhdGguc2xpY2UoLTEpWzBdO1xuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IChcbiAgICAgIChyZXN1bHQuaG9zdCB8fCByZWxhdGl2ZS5ob3N0KSAmJiAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHx8XG4gICAgICBsYXN0ID09PSAnJyk7XG5cbiAgLy8gc3RyaXAgc2luZ2xlIGRvdHMsIHJlc29sdmUgZG91YmxlIGRvdHMgdG8gcGFyZW50IGRpclxuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gc3JjUGF0aC5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGFzdCA9IHNyY1BhdGhbaV07XG4gICAgaWYgKGxhc3QgPT0gJy4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoIW11c3RFbmRBYnMgJiYgIXJlbW92ZUFsbERvdHMpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHNyY1BhdGgudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAobXVzdEVuZEFicyAmJiBzcmNQYXRoWzBdICE9PSAnJyAmJlxuICAgICAgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIChzcmNQYXRoLmpvaW4oJy8nKS5zdWJzdHIoLTEpICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC5wdXNoKCcnKTtcbiAgfVxuXG4gIHZhciBpc0Fic29sdXRlID0gc3JjUGF0aFswXSA9PT0gJycgfHxcbiAgICAgIChzcmNQYXRoWzBdICYmIHNyY1BhdGhbMF0uY2hhckF0KDApID09PSAnLycpO1xuXG4gIC8vIHB1dCB0aGUgaG9zdCBiYWNrXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IGlzQWJzb2x1dGUgPyAnJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNQYXRoLmxlbmd0aCA/IHNyY1BhdGguc2hpZnQoKSA6ICcnO1xuICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAvL3RoaXMgZXNwZWNpYWx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgIC8vdXJsLnJlc29sdmVPYmplY3QoJ21haWx0bzpsb2NhbDFAZG9tYWluMScsICdsb2NhbDJAZG9tYWluMicpXG4gICAgdmFyIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID9cbiAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICB9XG4gIH1cblxuICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyB8fCAocmVzdWx0Lmhvc3QgJiYgc3JjUGF0aC5sZW5ndGgpO1xuXG4gIGlmIChtdXN0RW5kQWJzICYmICFpc0Fic29sdXRlKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmICghc3JjUGF0aC5sZW5ndGgpIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsO1xuICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBzcmNQYXRoLmpvaW4oJy8nKTtcbiAgfVxuXG4gIC8vdG8gc3VwcG9ydCByZXF1ZXN0Lmh0dHBcbiAgaWYgKCFpc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7XG4gICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTtcbiAgfVxuICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGggfHwgcmVzdWx0LmF1dGg7XG4gIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5VcmwucHJvdG90eXBlLnBhcnNlSG9zdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaG9zdCA9IHRoaXMuaG9zdDtcbiAgdmFyIHBvcnQgPSBwb3J0UGF0dGVybi5leGVjKGhvc3QpO1xuICBpZiAocG9ydCkge1xuICAgIHBvcnQgPSBwb3J0WzBdO1xuICAgIGlmIChwb3J0ICE9PSAnOicpIHtcbiAgICAgIHRoaXMucG9ydCA9IHBvcnQuc3Vic3RyKDEpO1xuICAgIH1cbiAgICBob3N0ID0gaG9zdC5zdWJzdHIoMCwgaG9zdC5sZW5ndGggLSBwb3J0Lmxlbmd0aCk7XG4gIH1cbiAgaWYgKGhvc3QpIHRoaXMuaG9zdG5hbWUgPSBob3N0O1xufTtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSBcInN0cmluZ1wiO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiAgYXJnID09IG51bGw7XG59XG5cbn0se1wicHVueWNvZGVcIjo4NyxcInF1ZXJ5c3RyaW5nXCI6OTB9XSw5NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5pZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cblxufSx7fV0sOTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufVxufSx7fV0sOTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG4gIGlmIChpc1VuZGVmaW5lZChnbG9iYWwucHJvY2VzcykpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59O1xuXG5cbnZhciBkZWJ1Z3MgPSB7fTtcbnZhciBkZWJ1Z0Vudmlyb247XG5leHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7XG4gIGlmIChpc1VuZGVmaW5lZChkZWJ1Z0Vudmlyb24pKVxuICAgIGRlYnVnRW52aXJvbiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUcgfHwgJyc7XG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xuICBpZiAoIWRlYnVnc1tzZXRdKSB7XG4gICAgaWYgKG5ldyBSZWdFeHAoJ1xcXFxiJyArIHNldCArICdcXFxcYicsICdpJykudGVzdChkZWJ1Z0Vudmlyb24pKSB7XG4gICAgICB2YXIgcGlkID0gcHJvY2Vzcy5waWQ7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbXNnID0gZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWJ1Z3Nbc2V0XTtcbn07XG5cblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqL1xuLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpO1xuICB9XG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cbmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7XG5cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5pbnNwZWN0LmNvbG9ycyA9IHtcbiAgJ2JvbGQnIDogWzEsIDIyXSxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sXG4gICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcbiAgJ2dyZXknIDogWzkwLCAzOV0sXG4gICdibGFjaycgOiBbMzAsIDM5XSxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXG4gICdjeWFuJyA6IFszNiwgMzldLFxuICAnZ3JlZW4nIDogWzMyLCAzOV0sXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxuICAncmVkJyA6IFszMSwgMzldLFxuICAneWVsbG93JyA6IFszMywgMzldXG59O1xuXG4vLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cblxuZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9XG5cbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuICBpZiAoaXNFcnJvcih2YWx1ZSlcbiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSByZXF1aXJlKCcuL3N1cHBvcnQvaXNCdWZmZXInKTtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cbmZ1bmN0aW9uIHBhZChuKSB7XG4gIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApO1xufVxuXG5cbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcbiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107XG5cbi8vIDI2IEZlYiAxNjoxOTozNFxuZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7XG4gIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XG59XG5cblxuLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XG59O1xuXG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLlxuICpcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcbiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xuICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxuICogICAgIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICovXG5leHBvcnRzLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24ob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn07XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG59LHtcIi4vc3VwcG9ydC9pc0J1ZmZlclwiOjk3LFwiX3Byb2Nlc3NcIjo4NixcImluaGVyaXRzXCI6OTZ9XSw5OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgdjEgPSByZXF1aXJlKCcuL3YxJyk7XG52YXIgdjQgPSByZXF1aXJlKCcuL3Y0Jyk7XG5cbnZhciB1dWlkID0gdjQ7XG51dWlkLnYxID0gdjE7XG51dWlkLnY0ID0gdjQ7XG5cbm1vZHVsZS5leHBvcnRzID0gdXVpZDtcblxufSx7XCIuL3YxXCI6MTAyLFwiLi92NFwiOjEwM31dLDEwMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cbnZhciBieXRlVG9IZXggPSBbXTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4W2ldID0gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKTtcbn1cblxuZnVuY3Rpb24gYnl0ZXNUb1V1aWQoYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBvZmZzZXQgfHwgMDtcbiAgdmFyIGJ0aCA9IGJ5dGVUb0hleDtcbiAgLy8gam9pbiB1c2VkIHRvIGZpeCBtZW1vcnkgaXNzdWUgY2F1c2VkIGJ5IGNvbmNhdGVuYXRpb246IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMxNzUjYzRcbiAgcmV0dXJuIChbYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXV0pLmpvaW4oJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ5dGVzVG9VdWlkO1xuXG59LHt9XSwxMDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gIEluIHRoZVxuLy8gYnJvd3NlciB0aGlzIGlzIGEgbGl0dGxlIGNvbXBsaWNhdGVkIGR1ZSB0byB1bmtub3duIHF1YWxpdHkgb2YgTWF0aC5yYW5kb20oKVxuLy8gYW5kIGluY29uc2lzdGVudCBzdXBwb3J0IGZvciB0aGUgYGNyeXB0b2AgQVBJLiAgV2UgZG8gdGhlIGJlc3Qgd2UgY2FuIHZpYVxuLy8gZmVhdHVyZS1kZXRlY3Rpb25cblxuLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvXG4vLyBpbXBsZW1lbnRhdGlvbi4gQWxzbywgZmluZCB0aGUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gb2YgY3J5cHRvIG9uIElFMTEuXG52YXIgZ2V0UmFuZG9tVmFsdWVzID0gKHR5cGVvZihjcnlwdG8pICE9ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0bykpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZihtc0NyeXB0bykgIT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT0gJ2Z1bmN0aW9uJyAmJiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChtc0NyeXB0bykpO1xuXG5pZiAoZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIC8vIFdIQVRXRyBjcnlwdG8gUk5HIC0gaHR0cDovL3dpa2kud2hhdHdnLm9yZy93aWtpL0NyeXB0b1xuICB2YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdoYXR3Z1JORygpIHtcbiAgICBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xuICAgIHJldHVybiBybmRzODtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIE1hdGgucmFuZG9tKCktYmFzZWQgKFJORylcbiAgLy9cbiAgLy8gSWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBNYXRoLnJhbmRvbSgpLiAgSXQncyBmYXN0LCBidXQgaXMgb2YgdW5zcGVjaWZpZWRcbiAgLy8gcXVhbGl0eS5cbiAgdmFyIHJuZHMgPSBuZXcgQXJyYXkoMTYpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWF0aFJORygpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgcjsgaSA8IDE2OyBpKyspIHtcbiAgICAgIGlmICgoaSAmIDB4MDMpID09PSAwKSByID0gTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwO1xuICAgICAgcm5kc1tpXSA9IHIgPj4+ICgoaSAmIDB4MDMpIDw8IDMpICYgMHhmZjtcbiAgICB9XG5cbiAgICByZXR1cm4gcm5kcztcbiAgfTtcbn1cblxufSx7fV0sMTAyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbi8vICoqYHYxKClgIC0gR2VuZXJhdGUgdGltZS1iYXNlZCBVVUlEKipcbi8vXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTGlvc0svVVVJRC5qc1xuLy8gYW5kIGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS91dWlkLmh0bWxcblxudmFyIF9ub2RlSWQ7XG52YXIgX2Nsb2Nrc2VxO1xuXG4vLyBQcmV2aW91cyB1dWlkIGNyZWF0aW9uIHRpbWVcbnZhciBfbGFzdE1TZWNzID0gMDtcbnZhciBfbGFzdE5TZWNzID0gMDtcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9icm9vZmEvbm9kZS11dWlkIGZvciBBUEkgZGV0YWlsc1xuZnVuY3Rpb24gdjEob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG4gIHZhciBiID0gYnVmIHx8IFtdO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgbm9kZSA9IG9wdGlvbnMubm9kZSB8fCBfbm9kZUlkO1xuICB2YXIgY2xvY2tzZXEgPSBvcHRpb25zLmNsb2Nrc2VxICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNsb2Nrc2VxIDogX2Nsb2Nrc2VxO1xuXG4gIC8vIG5vZGUgYW5kIGNsb2Nrc2VxIG5lZWQgdG8gYmUgaW5pdGlhbGl6ZWQgdG8gcmFuZG9tIHZhbHVlcyBpZiB0aGV5J3JlIG5vdFxuICAvLyBzcGVjaWZpZWQuICBXZSBkbyB0aGlzIGxhemlseSB0byBtaW5pbWl6ZSBpc3N1ZXMgcmVsYXRlZCB0byBpbnN1ZmZpY2llbnRcbiAgLy8gc3lzdGVtIGVudHJvcHkuICBTZWUgIzE4OVxuICBpZiAobm9kZSA9PSBudWxsIHx8IGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICB2YXIgc2VlZEJ5dGVzID0gcm5nKCk7XG4gICAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuNSwgY3JlYXRlIGFuZCA0OC1iaXQgbm9kZSBpZCwgKDQ3IHJhbmRvbSBiaXRzICsgbXVsdGljYXN0IGJpdCA9IDEpXG4gICAgICBub2RlID0gX25vZGVJZCA9IFtcbiAgICAgICAgc2VlZEJ5dGVzWzBdIHwgMHgwMSxcbiAgICAgICAgc2VlZEJ5dGVzWzFdLCBzZWVkQnl0ZXNbMl0sIHNlZWRCeXRlc1szXSwgc2VlZEJ5dGVzWzRdLCBzZWVkQnl0ZXNbNV1cbiAgICAgIF07XG4gICAgfVxuICAgIGlmIChjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC4yLjIsIHJhbmRvbWl6ZSAoMTQgYml0KSBjbG9ja3NlcVxuICAgICAgY2xvY2tzZXEgPSBfY2xvY2tzZXEgPSAoc2VlZEJ5dGVzWzZdIDw8IDggfCBzZWVkQnl0ZXNbN10pICYgMHgzZmZmO1xuICAgIH1cbiAgfVxuXG4gIC8vIFVVSUQgdGltZXN0YW1wcyBhcmUgMTAwIG5hbm8tc2Vjb25kIHVuaXRzIHNpbmNlIHRoZSBHcmVnb3JpYW4gZXBvY2gsXG4gIC8vICgxNTgyLTEwLTE1IDAwOjAwKS4gIEpTTnVtYmVycyBhcmVuJ3QgcHJlY2lzZSBlbm91Z2ggZm9yIHRoaXMsIHNvXG4gIC8vIHRpbWUgaXMgaGFuZGxlZCBpbnRlcm5hbGx5IGFzICdtc2VjcycgKGludGVnZXIgbWlsbGlzZWNvbmRzKSBhbmQgJ25zZWNzJ1xuICAvLyAoMTAwLW5hbm9zZWNvbmRzIG9mZnNldCBmcm9tIG1zZWNzKSBzaW5jZSB1bml4IGVwb2NoLCAxOTcwLTAxLTAxIDAwOjAwLlxuICB2YXIgbXNlY3MgPSBvcHRpb25zLm1zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1zZWNzIDogbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgLy8gUGVyIDQuMi4xLjIsIHVzZSBjb3VudCBvZiB1dWlkJ3MgZ2VuZXJhdGVkIGR1cmluZyB0aGUgY3VycmVudCBjbG9ja1xuICAvLyBjeWNsZSB0byBzaW11bGF0ZSBoaWdoZXIgcmVzb2x1dGlvbiBjbG9ja1xuICB2YXIgbnNlY3MgPSBvcHRpb25zLm5zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5zZWNzIDogX2xhc3ROU2VjcyArIDE7XG5cbiAgLy8gVGltZSBzaW5jZSBsYXN0IHV1aWQgY3JlYXRpb24gKGluIG1zZWNzKVxuICB2YXIgZHQgPSAobXNlY3MgLSBfbGFzdE1TZWNzKSArIChuc2VjcyAtIF9sYXN0TlNlY3MpLzEwMDAwO1xuXG4gIC8vIFBlciA0LjIuMS4yLCBCdW1wIGNsb2Nrc2VxIG9uIGNsb2NrIHJlZ3Jlc3Npb25cbiAgaWYgKGR0IDwgMCAmJiBvcHRpb25zLmNsb2Nrc2VxID09PSB1bmRlZmluZWQpIHtcbiAgICBjbG9ja3NlcSA9IGNsb2Nrc2VxICsgMSAmIDB4M2ZmZjtcbiAgfVxuXG4gIC8vIFJlc2V0IG5zZWNzIGlmIGNsb2NrIHJlZ3Jlc3NlcyAobmV3IGNsb2Nrc2VxKSBvciB3ZSd2ZSBtb3ZlZCBvbnRvIGEgbmV3XG4gIC8vIHRpbWUgaW50ZXJ2YWxcbiAgaWYgKChkdCA8IDAgfHwgbXNlY3MgPiBfbGFzdE1TZWNzKSAmJiBvcHRpb25zLm5zZWNzID09PSB1bmRlZmluZWQpIHtcbiAgICBuc2VjcyA9IDA7XG4gIH1cblxuICAvLyBQZXIgNC4yLjEuMiBUaHJvdyBlcnJvciBpZiB0b28gbWFueSB1dWlkcyBhcmUgcmVxdWVzdGVkXG4gIGlmIChuc2VjcyA+PSAxMDAwMCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndXVpZC52MSgpOiBDYW5cXCd0IGNyZWF0ZSBtb3JlIHRoYW4gMTBNIHV1aWRzL3NlYycpO1xuICB9XG5cbiAgX2xhc3RNU2VjcyA9IG1zZWNzO1xuICBfbGFzdE5TZWNzID0gbnNlY3M7XG4gIF9jbG9ja3NlcSA9IGNsb2Nrc2VxO1xuXG4gIC8vIFBlciA0LjEuNCAtIENvbnZlcnQgZnJvbSB1bml4IGVwb2NoIHRvIEdyZWdvcmlhbiBlcG9jaFxuICBtc2VjcyArPSAxMjIxOTI5MjgwMDAwMDtcblxuICAvLyBgdGltZV9sb3dgXG4gIHZhciB0bCA9ICgobXNlY3MgJiAweGZmZmZmZmYpICogMTAwMDAgKyBuc2VjcykgJSAweDEwMDAwMDAwMDtcbiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bCAmIDB4ZmY7XG5cbiAgLy8gYHRpbWVfbWlkYFxuICB2YXIgdG1oID0gKG1zZWNzIC8gMHgxMDAwMDAwMDAgKiAxMDAwMCkgJiAweGZmZmZmZmY7XG4gIGJbaSsrXSA9IHRtaCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRtaCAmIDB4ZmY7XG5cbiAgLy8gYHRpbWVfaGlnaF9hbmRfdmVyc2lvbmBcbiAgYltpKytdID0gdG1oID4+PiAyNCAmIDB4ZiB8IDB4MTA7IC8vIGluY2x1ZGUgdmVyc2lvblxuICBiW2krK10gPSB0bWggPj4+IDE2ICYgMHhmZjtcblxuICAvLyBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGAgKFBlciA0LjIuMiAtIGluY2x1ZGUgdmFyaWFudClcbiAgYltpKytdID0gY2xvY2tzZXEgPj4+IDggfCAweDgwO1xuXG4gIC8vIGBjbG9ja19zZXFfbG93YFxuICBiW2krK10gPSBjbG9ja3NlcSAmIDB4ZmY7XG5cbiAgLy8gYG5vZGVgXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgNjsgKytuKSB7XG4gICAgYltpICsgbl0gPSBub2RlW25dO1xuICB9XG5cbiAgcmV0dXJuIGJ1ZiA/IGJ1ZiA6IGJ5dGVzVG9VdWlkKGIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHYxO1xuXG59LHtcIi4vbGliL2J5dGVzVG9VdWlkXCI6MTAwLFwiLi9saWIvcm5nXCI6MTAxfV0sMTAzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuXG4gIGlmICh0eXBlb2Yob3B0aW9ucykgPT0gJ3N0cmluZycpIHtcbiAgICBidWYgPSBvcHRpb25zID09PSAnYmluYXJ5JyA/IG5ldyBBcnJheSgxNikgOiBudWxsO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG4gIHJuZHNbNl0gPSAocm5kc1s2XSAmIDB4MGYpIHwgMHg0MDtcbiAgcm5kc1s4XSA9IChybmRzWzhdICYgMHgzZikgfCAweDgwO1xuXG4gIC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuICBpZiAoYnVmKSB7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IDE2OyArK2lpKSB7XG4gICAgICBidWZbaSArIGlpXSA9IHJuZHNbaWldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWYgfHwgYnl0ZXNUb1V1aWQocm5kcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdjQ7XG5cbn0se1wiLi9saWIvYnl0ZXNUb1V1aWRcIjoxMDAsXCIuL2xpYi9ybmdcIjoxMDF9XSwxMDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgTFJVXzEgPSByZXF1aXJlKFwiLi91dGlscy9MUlVcIik7XG52YXIgQ0FDSEVfU0laRSA9IDEwMDA7XG4vKipcbiAqIEluc3BpcmVkIG5vZGUtbHJ1LWNhY2hlW2h0dHBzOi8vZ2l0aHViLmNvbS9pc2FhY3Mvbm9kZS1scnUtY2FjaGVdXG4gKi9cbnZhciBFbmRwb2ludENhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEVuZHBvaW50Q2FjaGUobWF4U2l6ZSkge1xuICAgICAgICBpZiAobWF4U2l6ZSA9PT0gdm9pZCAwKSB7IG1heFNpemUgPSBDQUNIRV9TSVpFOyB9XG4gICAgICAgIHRoaXMubWF4U2l6ZSA9IG1heFNpemU7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgTFJVXzEuTFJVQ2FjaGUobWF4U2l6ZSk7XG4gICAgfVxuICAgIDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRW5kcG9pbnRDYWNoZS5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUubGVuZ3RoO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBFbmRwb2ludENhY2hlLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGtleVN0cmluZyA9IHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnID8gRW5kcG9pbnRDYWNoZS5nZXRLZXlTdHJpbmcoa2V5KSA6IGtleTtcbiAgICAgICAgdmFyIGVuZHBvaW50UmVjb3JkID0gdGhpcy5wb3B1bGF0ZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgdGhpcy5jYWNoZS5wdXQoa2V5U3RyaW5nLCBlbmRwb2ludFJlY29yZCk7XG4gICAgfTtcbiAgICBFbmRwb2ludENhY2hlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIga2V5U3RyaW5nID0gdHlwZW9mIGtleSAhPT0gJ3N0cmluZycgPyBFbmRwb2ludENhY2hlLmdldEtleVN0cmluZyhrZXkpIDoga2V5O1xuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIHJlY29yZHMgPSB0aGlzLmNhY2hlLmdldChrZXlTdHJpbmcpO1xuICAgICAgICBpZiAocmVjb3Jkcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWNvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlY29yZCA9IHJlY29yZHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHJlY29yZC5FeHBpcmUgPCBub3cpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZS5yZW1vdmUoa2V5U3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlY29yZHM7XG4gICAgfTtcbiAgICBFbmRwb2ludENhY2hlLmdldEtleVN0cmluZyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gICAgICAgIHZhciBpZGVudGlmaWVyTmFtZXMgPSBPYmplY3Qua2V5cyhrZXkpLnNvcnQoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZGVudGlmaWVyTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpZGVudGlmaWVyTmFtZSA9IGlkZW50aWZpZXJOYW1lc1tpXTtcbiAgICAgICAgICAgIGlmIChrZXlbaWRlbnRpZmllck5hbWVdID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZGVudGlmaWVycy5wdXNoKGtleVtpZGVudGlmaWVyTmFtZV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpZGVudGlmaWVycy5qb2luKCcgJyk7XG4gICAgfTtcbiAgICBFbmRwb2ludENhY2hlLnByb3RvdHlwZS5wb3B1bGF0ZVZhbHVlID0gZnVuY3Rpb24gKGVuZHBvaW50cykge1xuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmV0dXJuIGVuZHBvaW50cy5tYXAoZnVuY3Rpb24gKGVuZHBvaW50KSB7IHJldHVybiAoe1xuICAgICAgICAgICAgQWRkcmVzczogZW5kcG9pbnQuQWRkcmVzcyB8fCAnJyxcbiAgICAgICAgICAgIEV4cGlyZTogbm93ICsgKGVuZHBvaW50LkNhY2hlUGVyaW9kSW5NaW51dGVzIHx8IDEpICogNjAgKiAxMDAwXG4gICAgICAgIH0pOyB9KTtcbiAgICB9O1xuICAgIEVuZHBvaW50Q2FjaGUucHJvdG90eXBlLmVtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNhY2hlLmVtcHR5KCk7XG4gICAgfTtcbiAgICBFbmRwb2ludENhY2hlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIga2V5U3RyaW5nID0gdHlwZW9mIGtleSAhPT0gJ3N0cmluZycgPyBFbmRwb2ludENhY2hlLmdldEtleVN0cmluZyhrZXkpIDoga2V5O1xuICAgICAgICB0aGlzLmNhY2hlLnJlbW92ZShrZXlTdHJpbmcpO1xuICAgIH07XG4gICAgcmV0dXJuIEVuZHBvaW50Q2FjaGU7XG59KCkpO1xuZXhwb3J0cy5FbmRwb2ludENhY2hlID0gRW5kcG9pbnRDYWNoZTtcbn0se1wiLi91dGlscy9MUlVcIjoxMDV9XSwxMDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgTGlua2VkTGlzdE5vZGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGlua2VkTGlzdE5vZGUoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gTGlua2VkTGlzdE5vZGU7XG59KCkpO1xudmFyIExSVUNhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExSVUNhY2hlKHNpemUpIHtcbiAgICAgICAgdGhpcy5ub2RlTWFwID0ge307XG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICAgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicgfHwgc2l6ZSA8IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FjaGUgc2l6ZSBjYW4gb25seSBiZSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNpemVMaW1pdCA9IHNpemU7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMUlVDYWNoZS5wcm90b3R5cGUsIFwibGVuZ3RoXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaXplO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBMUlVDYWNoZS5wcm90b3R5cGUucHJlcGVuZFRvTGlzdCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIGlmICghdGhpcy5oZWFkZXJOb2RlKSB7XG4gICAgICAgICAgICB0aGlzLnRhaWxOb2RlID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyTm9kZS5wcmV2ID0gbm9kZTtcbiAgICAgICAgICAgIG5vZGUubmV4dCA9IHRoaXMuaGVhZGVyTm9kZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhlYWRlck5vZGUgPSBub2RlO1xuICAgICAgICB0aGlzLnNpemUrKztcbiAgICB9O1xuICAgIExSVUNhY2hlLnByb3RvdHlwZS5yZW1vdmVGcm9tVGFpbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRhaWxOb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBub2RlID0gdGhpcy50YWlsTm9kZTtcbiAgICAgICAgdmFyIHByZXZOb2RlID0gbm9kZS5wcmV2O1xuICAgICAgICBpZiAocHJldk5vZGUpIHtcbiAgICAgICAgICAgIHByZXZOb2RlLm5leHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZS5wcmV2ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnRhaWxOb2RlID0gcHJldk5vZGU7XG4gICAgICAgIHRoaXMuc2l6ZS0tO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9O1xuICAgIExSVUNhY2hlLnByb3RvdHlwZS5kZXRhY2hGcm9tTGlzdCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIGlmICh0aGlzLmhlYWRlck5vZGUgPT09IG5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyTm9kZSA9IG5vZGUubmV4dDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50YWlsTm9kZSA9PT0gbm9kZSkge1xuICAgICAgICAgICAgdGhpcy50YWlsTm9kZSA9IG5vZGUucHJldjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5wcmV2KSB7XG4gICAgICAgICAgICBub2RlLnByZXYubmV4dCA9IG5vZGUubmV4dDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5uZXh0KSB7XG4gICAgICAgICAgICBub2RlLm5leHQucHJldiA9IG5vZGUucHJldjtcbiAgICAgICAgfVxuICAgICAgICBub2RlLm5leHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIG5vZGUucHJldiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zaXplLS07XG4gICAgfTtcbiAgICBMUlVDYWNoZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAodGhpcy5ub2RlTWFwW2tleV0pIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlTWFwW2tleV07XG4gICAgICAgICAgICB0aGlzLmRldGFjaEZyb21MaXN0KG5vZGUpO1xuICAgICAgICAgICAgdGhpcy5wcmVwZW5kVG9MaXN0KG5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUudmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExSVUNhY2hlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICh0aGlzLm5vZGVNYXBba2V5XSkge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGVNYXBba2V5XTtcbiAgICAgICAgICAgIHRoaXMuZGV0YWNoRnJvbUxpc3Qobm9kZSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5ub2RlTWFwW2tleV07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExSVUNhY2hlLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5ub2RlTWFwW2tleV0pIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zaXplID09PSB0aGlzLnNpemVMaW1pdCkge1xuICAgICAgICAgICAgdmFyIHRhaWxOb2RlID0gdGhpcy5yZW1vdmVGcm9tVGFpbCgpO1xuICAgICAgICAgICAgdmFyIGtleV8xID0gdGFpbE5vZGUua2V5O1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMubm9kZU1hcFtrZXlfMV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5ld05vZGUgPSBuZXcgTGlua2VkTGlzdE5vZGUoa2V5LCB2YWx1ZSk7XG4gICAgICAgIHRoaXMubm9kZU1hcFtrZXldID0gbmV3Tm9kZTtcbiAgICAgICAgdGhpcy5wcmVwZW5kVG9MaXN0KG5ld05vZGUpO1xuICAgIH07XG4gICAgTFJVQ2FjaGUucHJvdG90eXBlLmVtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMubm9kZU1hcCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMubm9kZU1hcFtrZXldO1xuICAgICAgICAgICAgdGhpcy5kZXRhY2hGcm9tTGlzdChub2RlKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm5vZGVNYXBba2V5XTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIExSVUNhY2hlO1xufSgpKTtcbmV4cG9ydHMuTFJVQ2FjaGUgPSBMUlVDYWNoZTtcbn0se31dLDEwNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBBV1MgU0RLIGZvciBKYXZhU2NyaXB0IHYyLjU1Ni4wXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vIExpY2Vuc2UgYXQgaHR0cHM6Ly9zZGsuYW1hem9uYXdzLmNvbS9qcy9CVU5ETEVfTElDRU5TRS50eHRcbnJlcXVpcmUoJy4vYnJvd3Nlcl9sb2FkZXInKTtcblxudmFyIEFXUyA9IHJlcXVpcmUoJy4vY29yZScpO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHdpbmRvdy5BV1MgPSBBV1M7XG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvKipcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBtb2R1bGUuZXhwb3J0cyA9IEFXUztcbn1cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHNlbGYuQVdTID0gQVdTO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBETyBOT1QgUkVNT1ZFXG4gKiBicm93c2VyIGJ1aWxkZXIgd2lsbCBzdHJpcCBvdXQgdGhpcyBsaW5lIGlmIHNlcnZpY2VzIGFyZSBzdXBwbGllZCBvbiB0aGUgY29tbWFuZCBsaW5lLlxuICovaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoQVdTLCAnQ29ubmVjdFBhcnRpY2lwYW50JykpIHtcbiAgQVdTLmFwaUxvYWRlci5zZXJ2aWNlc1snY29ubmVjdHBhcnRpY2lwYW50J10gPSB7fTtcbiAgQVdTLkNvbm5lY3RQYXJ0aWNpcGFudCA9IEFXUy5TZXJ2aWNlLmRlZmluZVNlcnZpY2UoJ2Nvbm5lY3RwYXJ0aWNpcGFudCcsIFsgJzIwMTgtMDktMDcnIF0pO1xufVxuQVdTLmFwaUxvYWRlci5zZXJ2aWNlc1snY29ubmVjdHBhcnRpY2lwYW50J11bJzIwMTgtMDktMDcnXSA9IHJlcXVpcmUoJy4uL2FwaXMvY29ubmVjdHBhcnRpY2lwYW50LTIwMTgtMDktMDcubWluJyk7XG5BV1MuYXBpTG9hZGVyLnNlcnZpY2VzWydjb25uZWN0cGFydGljaXBhbnQnXVsnMjAxOC0wOS0wNyddLnBhZ2luYXRvcnMgPSByZXF1aXJlKCcuLi9hcGlzL2Nvbm5lY3RwYXJ0aWNpcGFudC0yMDE4LTA5LTA3LnBhZ2luYXRvcnMnKS5wYWdpbmF0aW9uO1xuXG5pZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChBV1MsICdTVFMnKSkge1xuICBBV1MuYXBpTG9hZGVyLnNlcnZpY2VzWydzdHMnXSA9IHt9O1xuICBBV1MuU1RTID0gQVdTLlNlcnZpY2UuZGVmaW5lU2VydmljZSgnc3RzJywgWyAnMjAxMS0wNi0xNScgXSk7XG4gIHJlcXVpcmUoJy4vc2VydmljZXMvc3RzJyk7XG59XG4vL0FXUy5hcGlMb2FkZXIuc2VydmljZXNbJ3N0cyddWycyMDExLTA2LTE1J10gPSByZXF1aXJlKCcuLi9hcGlzL3N0cy0yMDExLTA2LTE1Lm1pbicpO1xuXG5cbn0se1wiLi4vYXBpcy9jb25uZWN0cGFydGljaXBhbnQtMjAxOC0wOS0wNy5taW5cIjozLFwiLi4vYXBpcy9jb25uZWN0cGFydGljaXBhbnQtMjAxOC0wOS0wNy5wYWdpbmF0b3JzXCI6NCxcIi4uL2FwaXMvc3RzLTIwMTEtMDYtMTUubWluXCI6NixcIi4vYnJvd3Nlcl9sb2FkZXJcIjoxNyxcIi4vY29yZVwiOjE5LFwiLi9zZXJ2aWNlcy9zdHNcIjo2Mn1dfSx7fSxbMTA2XSk7XG5cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=