{"version":3,"file":"amazon-connect-websocket-manager.js","mappings":"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","sources":["webpack://@amzn/amazon-connect-websocket-manager/./node_modules/sprintf-js/src/sprintf.js","webpack://@amzn/amazon-connect-websocket-manager/webpack/bootstrap","webpack://@amzn/amazon-connect-websocket-manager/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://@amzn/amazon-connect-websocket-manager/./src/constants.js","webpack://@amzn/amazon-connect-websocket-manager/./src/utils.js","webpack://@amzn/amazon-connect-websocket-manager/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@amzn/amazon-connect-websocket-manager/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://@amzn/amazon-connect-websocket-manager/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://@amzn/amazon-connect-websocket-manager/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://@amzn/amazon-connect-websocket-manager/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://@amzn/amazon-connect-websocket-manager/./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack://@amzn/amazon-connect-websocket-manager/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://@amzn/amazon-connect-websocket-manager/./src/log.js","webpack://@amzn/amazon-connect-websocket-manager/./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack://@amzn/amazon-connect-websocket-manager/./src/retryProvider.js","webpack://@amzn/amazon-connect-websocket-manager/./src/webSocketManager.js","webpack://@amzn/amazon-connect-websocket-manager/./src/index.js"],"sourcesContent":["/* global window, exports, define */\n\n!function() {\n    'use strict'\n\n    var re = {\n        not_string: /[^s]/,\n        not_bool: /[^t]/,\n        not_type: /[^T]/,\n        not_primitive: /[^v]/,\n        number: /[diefg]/,\n        numeric_arg: /[bcdiefguxX]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[+-]/\n    }\n\n    function sprintf(key) {\n        // `arguments` is not an array, but should be fine for this call\n        return sprintf_format(sprintf_parse(key), arguments)\n    }\n\n    function vsprintf(fmt, argv) {\n        return sprintf.apply(null, [fmt].concat(argv || []))\n    }\n\n    function sprintf_format(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign\n        for (i = 0; i < tree_length; i++) {\n            if (typeof parse_tree[i] === 'string') {\n                output += parse_tree[i]\n            }\n            else if (typeof parse_tree[i] === 'object') {\n                ph = parse_tree[i] // convenience purposes only\n                if (ph.keys) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < ph.keys.length; k++) {\n                        if (arg == undefined) {\n                            throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k-1]))\n                        }\n                        arg = arg[ph.keys[k]]\n                    }\n                }\n                else if (ph.param_no) { // positional argument (explicit)\n                    arg = argv[ph.param_no]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n                    arg = arg()\n                }\n\n                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {\n                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\n                }\n\n                if (re.number.test(ph.type)) {\n                    is_positive = arg >= 0\n                }\n\n                switch (ph.type) {\n                    case 'b':\n                        arg = parseInt(arg, 10).toString(2)\n                        break\n                    case 'c':\n                        arg = String.fromCharCode(parseInt(arg, 10))\n                        break\n                    case 'd':\n                    case 'i':\n                        arg = parseInt(arg, 10)\n                        break\n                    case 'j':\n                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)\n                        break\n                    case 'e':\n                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()\n                        break\n                    case 'f':\n                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)\n                        break\n                    case 'g':\n                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)\n                        break\n                    case 'o':\n                        arg = (parseInt(arg, 10) >>> 0).toString(8)\n                        break\n                    case 's':\n                        arg = String(arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 't':\n                        arg = String(!!arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'T':\n                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'u':\n                        arg = parseInt(arg, 10) >>> 0\n                        break\n                    case 'v':\n                        arg = arg.valueOf()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'x':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16)\n                        break\n                    case 'X':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\n                        break\n                }\n                if (re.json.test(ph.type)) {\n                    output += arg\n                }\n                else {\n                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n                        sign = is_positive ? '+' : '-'\n                        arg = arg.toString().replace(re.sign, '')\n                    }\n                    else {\n                        sign = ''\n                    }\n                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '\n                    pad_length = ph.width - (sign + arg).length\n                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\n                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output\n    }\n\n    var sprintf_cache = Object.create(null)\n\n    function sprintf_parse(fmt) {\n        if (sprintf_cache[fmt]) {\n            return sprintf_cache[fmt]\n        }\n\n        var _fmt = fmt, match, parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree.push(match[0])\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree.push('%')\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1])\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else {\n                                throw new SyntaxError('[sprintf] failed to parse named argument key')\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError('[sprintf] failed to parse named argument key')\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\n                }\n\n                parse_tree.push(\n                    {\n                        placeholder: match[0],\n                        param_no:    match[1],\n                        keys:        match[2],\n                        sign:        match[3],\n                        pad_char:    match[4],\n                        align:       match[5],\n                        width:       match[6],\n                        precision:   match[7],\n                        type:        match[8]\n                    }\n                )\n            }\n            else {\n                throw new SyntaxError('[sprintf] unexpected placeholder')\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return sprintf_cache[fmt] = parse_tree\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    /* eslint-disable quote-props */\n    if (typeof exports !== 'undefined') {\n        exports['sprintf'] = sprintf\n        exports['vsprintf'] = vsprintf\n    }\n    if (typeof window !== 'undefined') {\n        window['sprintf'] = sprintf\n        window['vsprintf'] = vsprintf\n\n        if (typeof define === 'function' && define['amd']) {\n            define(function() {\n                return {\n                    'sprintf': sprintf,\n                    'vsprintf': vsprintf\n                }\n            })\n        }\n    }\n    /* eslint-enable quote-props */\n}(); // eslint-disable-line\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","\nexport const LOGS_DESTINATION = {\n  NULL: \"NULL\",\n  CLIENT_LOGGER: \"CLIENT_LOGGER\",\n  DEBUG: \"DEBUG\"\n};\n\nexport const MIN_WEBSOCKET_LIFETIME_MS = 300000;\nexport const HEARTBEAT_INTERVAL_MS = 10000;\nexport const WEBSOCKET_URL_VALID_TIME_MS = 85000;\nexport const TOPIC_SUBSCRIPTION_RETRY_INTERVAL_MS = 500;\nexport const MAX_CONSECUTIVE_FAILED_SUB_ATTEMPTS = 5;\nexport const MAX_WAIT_TIME_SUB_REQUEST_WITH_NO_RESPONSE_MS = 1000;\nexport const MAX_CONSECUTIVE_SUB_REQUEST_WITH_NO_RESPONSE = 3;\nexport const NETWORK_CONN_CHECK_INTERVAL_MS = 250;\nexport const WEBSOCKET_REINIT_JITTER = 0.3;\nexport const WEBSOCKET_RETRY_RATE_MS = 2000;\nexport const MAX_WEBSOCKET_RETRY_RATE_MS = 30000;\n\nexport const NETWORK_FAILURE = 'NetworkingError';\n\nexport const LOG_MESSAGES = {\n  DEFAULT_PREFIX: \"AMZ_WEB_SOCKET_MANAGER:\",\n  NETWORK_OFFLINE: \"Network offline\",\n  NETWORK_ONLINE: \"Network online, connecting to WebSocket server\",\n  NETWORK_OFFLINE_WARNING: \"Network offline, ignoring this getWebSocketConnConfig request\",\n  NO_HEARTBEAT: \"Heartbeat response not received\",\n  NO_DEEP_HEARTBEAT: \"aws/ping deep heartbeat response not received\",\n  HEARTBEAT_RECEIVED: \"Heartbeat response received\",\n  DEEP_HEARTBEAT_RECEIVED: \"aws/ping deep heartbeat received\",\n  SENDING_HEARTBEAT: \"Sending heartbeat\",\n  SENDING_DEEP_HEARTBEAT: \"Sending aws/ping deep heartbeat\",\n  FAILED_HEARTBEAT: \"Failed to send heartbeat since WebSocket is not open\",\n  FAILED_DEEP_HEARTBEAT: \"Failed to send aws/ping deep heartbeat since WebSocket is not open\",\n  DEEP_HEARTBEAT_SUCCESS: \"Websocket deep heartbeat success callback registered\",\n  DEEP_HEARTBEAT_FAILURE: \"Websocket deep heartbeat failure callback registered\",\n  TOPIC_FAILURE: \"Websocket topic failure callback registered\",\n  WEBSOCKET_CONNECTION_ESTABLISHED: \"WebSocket connection established!\",\n  WEBSOCKET_CONNECTION_CLOSED: \"WebSocket connection is closed. \",\n  WEBSOCKET_CONNECTION_DURATION: \"Closed WebSocket connection duration: \",\n  WEBSOCKET_CONNECTION_ERROR: \"WebSocketManager Error, error_event: \",\n  WEBSOCKET_REINITIALIZATION: \"Scheduling WebSocket reinitialization, after delay \",\n  WEBSOCKET_REINITIALIZATION_TIMEOUT: \"WebSocket URL cannot be used to establish connection\",\n  WEBSOCKET_INITIALIZATION_FAILED: \"WebSocket Initialization failed - Terminating and cleaning subscriptions\",\n  WEBSOCKET_TERMINATED: \"Terminating WebSocket Manager\",\n  WEBSOCKET_NEW_CONNECTION: \"Fetching new WebSocket connection configuration\",\n  WEBSOCKET_CONNECTION_SUCCESS: \"Successfully fetched webSocket connection configuration\",\n  WEBSOCKET_CONNECTION_FAILURE: \"Failed to fetch webSocket connection configuration\",\n  WEBSOCKET_CONNECTION_RETRY: \"Retrying fetching new WebSocket connection configuration\",\n  WEBSOCKET_INIT: \"Initializing Websocket Manager\",\n  WEBSOCKET_INIT_FAILURE: \"Initializing Websocket Manager Failure callback registered\",\n  WEBSOCKET_CONNECTION_OPEN: \"Websocket connection open callback registered\",\n  WEBSOCKET_CONNECTION_CLOSE: \"Websocket connection close callback registered\",\n  WEBSOCKET_CONNECTION_GAIN: \"Websocket connection gain callback registered\",\n  WEBSOCKET_CONNECTION_LOST: \"Websocket connection lost callback registered\",\n  WEBSOCKET_SUBSCRIPTION_FAILURE: \"Websocket subscription failure callback registered\",\n  WEBSOCKET_RESET: \"Reset Websocket state\",\n  WEBSOCKET_MESSAGE_ERROR: \"WebSocketManager Message Error\",\n  WEBSOCKET_MESSAGE_RECEIVED: \"Message received for topic \",\n  WEBSOCKET_MESSAGE_INVALID: \"Invalid incoming message\",\n  WEBSOCKET_MESSAGE_SUCCESS: \"WebsocketManager invoke callbacks for topic success \",\n};\n\nexport const ROUTE_KEY = {\n  SUBSCRIBE: \"aws/subscribe\",\n  UNSUBSCRIBE: \"aws/unsubscribe\",\n  HEARTBEAT: \"aws/heartbeat\",\n  DEEP_HEARTBEAT: \"aws/ping\"\n};\n\nexport const CONN_STATE = {\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\"\n};\n","import { sprintf } from \"sprintf-js\";\nimport { NETWORK_FAILURE } from './constants';\n\nconst Utils = {};\n\n/**\n * Asserts that a premise is true.\n */\nUtils.assertTrue = function(premise, message) {\n  if (!premise) {\n    throw new Error(message);\n  }\n};\n\n/**\n * Asserts that a value is not null or undefined.\n */\nUtils.assertNotNull = function(value, name) {\n  Utils.assertTrue(\n    value !== null && typeof value !== undefined,\n    sprintf(\"%s must be provided\", name || \"A value\")\n  );\n  return value;\n};\n\nUtils.isNonEmptyString = function(value) {\n  return typeof value === \"string\" && value.length > 0;\n};\n\nUtils.assertIsList = function(value, key) {\n  if (!Array.isArray(value)) {\n    throw new Error(key + \" is not an array\");\n  }\n};\n\n/**\n * Determine if the given value is a callable function type.\n * Borrowed from Underscore.js.\n */\nUtils.isFunction = function(obj) {\n  return !!(obj && obj.constructor && obj.call && obj.apply);\n};\n\nUtils.isObject = function(value) {\n  return !(typeof value !== \"object\" || value === null);\n};\n\nUtils.isString = function(value) {\n  return typeof value === \"string\";\n};\n\nUtils.isNumber = function(value) {\n  return typeof value === \"number\";\n};\n\nconst wsRegex = new RegExp(\"^(wss://)\\\\w*\");\nconst localWsRegex = new RegExp(\"^(ws://127.0.0.1:)\");\nUtils.validWSUrl = function (wsUrl) {\n  return wsRegex.test(wsUrl) || localWsRegex.test(wsUrl);\n};\n\nUtils.getSubscriptionResponse = (routeKey, isSuccess, topicList) => {\n  return {\n    topic: routeKey,\n    content : {\n      status: isSuccess ? \"success\" : \"failure\",\n      topics: topicList\n    }\n  };\n};\n\nUtils.assertIsObject = function(value, key) {\n  if (!Utils.isObject(value)) {\n    throw new Error(key + \" is not an object!\");\n  }\n};\n\nUtils.addJitter = function (base, maxJitter = 1) {\n  maxJitter = Math.min(maxJitter, 1.0);\n  const sign = Math.random() > 0.5 ? 1 : -1;\n  return Math.floor(base + sign * base * Math.random() * maxJitter);\n};\n\nUtils.isNetworkOnline = () => navigator.onLine;\n\nUtils.isNetworkFailure = (reason) => {\n  if(reason._debug && reason._debug.type) {\n    return reason._debug.type === NETWORK_FAILURE;\n  }\n  return false;\n};\n\nexport default Utils;\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import Utils from \"./utils\";\nimport { LOGS_DESTINATION, LOG_MESSAGES } from \"./constants\";\n\n/*eslint-disable no-unused-vars*/\nclass Logger {\n  debug(data) {}\n\n  info(data) {}\n\n  warn(data) {}\n\n  error(data) {}\n\n  advancedLog(data) {}\n}\n/*eslint-enable no-unused-vars*/\n\nconst DEFAULT_PREFIX = LOG_MESSAGES.DEFAULT_PREFIX;\nconst LogLevel = {\n  DEBUG: 10,\n  INFO: 20,\n  WARN: 30,\n  ERROR: 40,\n  ADVANCED_LOG: 50,\n};\n\nclass LogManagerImpl {\n  constructor(logMetaData) {\n    this.logMetaData = logMetaData || '';\n    this.updateLoggerConfig();\n  }\n\n  hasLogMetaData() {\n    return !!this.logMetaData;\n  }\n\n  writeToClientLogger(level, logStatement = '') {\n    if (!this.hasClientLogger()) {\n      return;\n    }\n    const log1 = typeof logStatement === \"string\" ? logStatement : JSON.stringify(logStatement, removeCircularReference());\n    const log2 = typeof this.logMetaData === \"string\" ? this.logMetaData : JSON.stringify(this.logMetaData, removeCircularReference());\n    let logStringValue = `${getLogLevelByValue(level)} ${log1}`;\n    if (log2) logStringValue += ` ${log2}`;\n    switch (level) {\n      case LogLevel.DEBUG:\n        return this._clientLogger.debug(logStringValue) || logStringValue;\n      case LogLevel.INFO:\n        return this._clientLogger.info(logStringValue) || logStringValue;\n      case LogLevel.WARN:\n        return this._clientLogger.warn(logStringValue) || logStringValue;\n      case LogLevel.ERROR:\n        return this._clientLogger.error(logStringValue) || logStringValue;\n      case LogLevel.ADVANCED_LOG:\n        if(!this._advancedLogWriter) return '';\n        return this._clientLogger[this._advancedLogWriter](logStringValue) || logStringValue;\n    }\n  }\n\n  isLevelEnabled(level) {\n    return level >= this._level;\n  }\n\n  hasClientLogger() {\n    return this._clientLogger !== null;\n  }\n\n  getLogger(options = {}) {\n    var prefix = options.prefix || DEFAULT_PREFIX;\n    if (options.logMetaData) {\n      this.setLogMetaData(options.logMetaData);\n    }\n    return new LoggerWrapperImpl(this, { prefix, logMetaData: this.logMetaData, ...options });\n  }\n\n  setLogMetaData(logMetaData) {\n    this.logMetaData = logMetaData;\n  }\n\n  updateLoggerConfig(inputConfig) {\n    var config = inputConfig || {};\n    this._level = config.level || LogLevel.INFO;\n    //enabled advancedLogWriter\n    this._advancedLogWriter = \"warn\";\n    if (config.advancedLogWriter) {\n      this._advancedLogWriter = config.advancedLogWriter;\n    }\n\n    if(config.customizedLogger && typeof config.customizedLogger === \"object\") {\n      this.useClientLogger = true;\n    } else {\n      this.useClientLogger = false;\n    }\n    this._clientLogger = config.logger || this.selectLogger(config);\n\n    this._logsDestination = LOGS_DESTINATION.NULL;\n    if (config.debug) {\n      this._logsDestination = LOGS_DESTINATION.DEBUG;\n    }\n    if (config.logger) {\n      this._logsDestination = LOGS_DESTINATION.CLIENT_LOGGER;\n    }\n  }\n\n  selectLogger(config) {\n    if(config.customizedLogger && typeof config.customizedLogger === \"object\") {\n      return config.customizedLogger;\n    }\n    if(config.useDefaultLogger) {\n      return createConsoleLogger();\n    }\n    return null;\n  }\n}\n\nclass LoggerWrapper {\n  debug() {}\n\n  info() {}\n\n  warn() {}\n\n  error() {}\n\n  advancedLog() {}\n}\n\nclass LoggerWrapperImpl extends LoggerWrapper {\n  constructor(logManagerInstance, options) {\n    super();\n    this.options = options || {};\n    this.prefix = options.prefix || DEFAULT_PREFIX;\n    this.excludeTimestamp = options.excludeTimestamp;\n    this.logManager = logManagerInstance;\n  }\n\n  debug(...args) {\n    return this._log(LogLevel.DEBUG, args);\n  }\n\n  info(...args) {\n    return this._log(LogLevel.INFO, args);\n  }\n\n  warn(...args) {\n    return this._log(LogLevel.WARN, args);\n  }\n\n  error(...args) {\n    return this._log(LogLevel.ERROR, args);\n  }\n\n  advancedLog(...args) {\n    return this._log(LogLevel.ADVANCED_LOG, args);\n  }\n\n  _shouldLog(level) {\n    return this.logManager.hasClientLogger() && this.logManager.isLevelEnabled(level);\n  }\n\n  _writeToClientLogger(level, logStatement) {\n    return this.logManager.writeToClientLogger(level, logStatement);\n  }\n\n  _log(level, args) {\n    if (this._shouldLog(level)) {\n      var logStatement = this.logManager.useClientLogger ? args : this._convertToSingleStatement(args);\n      return this._writeToClientLogger(level, logStatement);\n    }\n  }\n\n  _convertToSingleStatement(args) {\n    var date = new Date(Date.now()).toISOString();\n    var logStatement = this.excludeTimestamp ? '' : `[${date}] `;\n    if (this.prefix || this.options.prefix) {\n      logStatement += (this.options.prefix || this.prefix) + \":\";\n    }\n    for (var index = 0; index < args.length; index++) {\n      var arg = args[index];\n      logStatement += this._convertToString(arg) + \" \";\n    }\n    return logStatement;\n  }\n\n  _convertToString(arg) {\n    try {\n      if (!arg) {\n        return \"\";\n      }\n      if (Utils.isString(arg)) {\n        return arg;\n      }\n      if (Utils.isObject(arg) && Utils.isFunction(arg.toString)) {\n        var toStringResult = arg.toString();\n        if (!toStringResult.startsWith(\"[object\")) {\n          return toStringResult;\n        }\n      }\n      return JSON.stringify(arg);\n    } catch (error) {\n      console.error(\"Error while converting argument to string\", arg, error);\n      return \"\";\n    }\n  }\n}\n\nfunction getLogLevelByValue(value) {\n  switch(value) {\n    case 10: return \"DEBUG\";\n    case 20: return \"INFO\";\n    case 30: return \"WARN\";\n    case 40: return \"ERROR\";\n    case 50: return \"ADVANCED_LOG\";\n  }\n}\n\nfunction removeCircularReference() {\n  const seen = new WeakSet();\n\n  return (key, value) => {\n    if (typeof value === \"object\" && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n}\n\nvar createConsoleLogger = () => {\n  var logger = new LoggerWrapper();\n  logger.debug = (...args) => console.debug.apply(window.console, [].concat(args));\n  logger.info = (...args) => console.info.apply(window.console, [].concat(args));\n  logger.warn = (...args) => console.warn.apply(window.console, [].concat(args));\n  logger.error = (...args) => console.error.apply(window.console, [].concat(args));\n  return logger;\n};\n\nexport { LogManagerImpl, Logger, LogLevel };\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import { WEBSOCKET_RETRY_RATE_MS, MAX_WEBSOCKET_RETRY_RATE_MS } from './constants';\n\nclass RetryProvider {\n  constructor(executor, defaultRetry = WEBSOCKET_RETRY_RATE_MS) {\n    this.numAttempts = 0;\n    this.executor = executor;\n    this.hasActiveReconnection = false;\n    this.defaultRetry = defaultRetry;\n  }\n\n  retry() {\n    // Don't kickoff another reconnection attempt if we have one pending\n    if (!this.hasActiveReconnection) {\n      this.hasActiveReconnection = true;\n      setTimeout(() => {\n        this._execute();\n      }, this._getDelay());\n    }\n  }\n\n  _execute() {\n    this.hasActiveReconnection = false;\n    this.executor();\n    this.numAttempts++;\n  }\n\n  connected() {\n    this.numAttempts = 0;\n  }\n\n  _getDelay() {\n    const calculatedDelay = Math.pow(2, this.numAttempts) * this.defaultRetry;\n    return calculatedDelay <= MAX_WEBSOCKET_RETRY_RATE_MS ? calculatedDelay : MAX_WEBSOCKET_RETRY_RATE_MS;\n  }\n\n  getIsConnected() {\n    return !this.numAttempts;\n  }\n}\n\nexport { RetryProvider };","import Utils from \"./utils\";\nimport { LogManagerImpl, LogLevel, Logger } from \"./log\";\nimport {\n    MIN_WEBSOCKET_LIFETIME_MS,\n    WEBSOCKET_URL_VALID_TIME_MS,\n    HEARTBEAT_INTERVAL_MS,\n    ROUTE_KEY,\n    CONN_STATE,\n    MAX_CONSECUTIVE_FAILED_SUB_ATTEMPTS,\n    TOPIC_SUBSCRIPTION_RETRY_INTERVAL_MS,\n    MAX_WAIT_TIME_SUB_REQUEST_WITH_NO_RESPONSE_MS,\n    MAX_CONSECUTIVE_SUB_REQUEST_WITH_NO_RESPONSE,\n    NETWORK_CONN_CHECK_INTERVAL_MS,\n    WEBSOCKET_REINIT_JITTER,\n    LOG_MESSAGES,\n} from \"./constants\";\nimport { RetryProvider } from './retryProvider';\n\nlet logManagerInstance = null;\nconst WebSocketManager = function () {\n\n    const logger = logManagerInstance.getLogger({ prefix: LOG_MESSAGES.DEFAULT_PREFIX, excludeTimestamp: true });\n\n    let online = Utils.isNetworkOnline();\n\n    let webSocket = {\n        primary: null,\n        secondary: null\n    };\n\n    let reconnectConfig = {\n        reconnectWebSocket: true,\n        websocketInitFailed: false,\n        exponentialBackOffTime: 1000,\n        exponentialTimeoutHandle: null,\n        lifeTimeTimeoutHandle: null,\n        webSocketInitCheckerTimeoutId: null,\n        connState: null\n    };\n\n    let metrics = {\n        connectWebSocketRetryCount: 0,\n        connectionAttemptStartTime: null,\n        noOpenConnectionsTimestamp: null\n    };\n\n    let heartbeatConfig = {\n        pendingResponse: false,\n        intervalHandle: null\n    };\n\n    let deepHeartbeatConfig = {\n        pendingResponse: false,\n        intervalHandle: null\n    };\n\n    let callbacks = {\n        initFailure: new Set(),\n        getWebSocketTransport: null,\n        subscriptionUpdate: new Set(),\n        subscriptionFailure: new Set(),\n        topic: new Map(),\n        allMessage: new Set(),\n        connectionGain: new Set(),\n        connectionLost: new Set(),\n        connectionOpen: new Set(),\n        connectionClose: new Set(),\n        deepHeartbeatSuccess: new Set(),\n        deepHeartbeatFailure: new Set(),\n        topicFailure: new Set(),\n    };\n\n    let webSocketConfig = {\n        connConfig: null,\n        promiseHandle: null,\n        promiseCompleted: true\n    };\n\n    let topicSubscription = {\n        subscribed: new Set(),\n        pending: new Set(),\n        subscriptionHistory: new Set()\n    };\n\n    let topicSubscriptionConfig = {\n        responseCheckIntervalId: null,\n        requestCompleted: true,\n        reSubscribeIntervalId: null,\n        consecutiveFailedSubscribeAttempts: 0,\n        consecutiveNoResponseRequest: 0\n    };\n\n    const reconnectionClient = new RetryProvider(() => { getWebSocketConnConfig().catch(() => {}); });\n\n    const invalidSendMessageRouteKeys = new Set([ROUTE_KEY.SUBSCRIBE, ROUTE_KEY.UNSUBSCRIBE, ROUTE_KEY.HEARTBEAT, ROUTE_KEY.DEEP_HEARTBEAT]);\n\n    const networkConnectivityChecker = setInterval(function () {\n        if (online !== Utils.isNetworkOnline()) {\n            online = Utils.isNetworkOnline();\n            if (!online) {\n                sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.NETWORK_OFFLINE));\n                return;\n            }\n            const ws = getDefaultWebSocket();\n            if (online && (!ws || isWebSocketState(ws, WebSocket.CLOSING) || isWebSocketState(ws, WebSocket.CLOSED))) {\n                sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.NETWORK_ONLINE));\n                getWebSocketConnConfig().catch(() => {});\n            }\n        }\n    }, NETWORK_CONN_CHECK_INTERVAL_MS);\n\n    const invokeCallbacks = function (callbacks, response) {\n        callbacks.forEach(function (callback) {\n            try {\n                callback(response);\n            } catch (error) {\n                sendInternalLogToServer(logger.error(\"Error executing callback\", error));\n            }\n        });\n    };\n\n    const getWebSocketStates = function (ws) {\n        if (ws === null) return \"NULL\";\n        switch (ws.readyState) {\n            case WebSocket.CONNECTING:\n                return \"CONNECTING\";\n            case WebSocket.OPEN:\n                return \"OPEN\";\n            case WebSocket.CLOSING:\n                return \"CLOSING\";\n            case WebSocket.CLOSED:\n                return \"CLOSED\";\n            default:\n                return \"UNDEFINED\";\n        }\n    };\n\n    const printWebSocketState = function (event = \"\") {\n        sendInternalLogToServer(logger.debug(\"[\" + event + \"] Primary WebSocket: \" + getWebSocketStates(webSocket.primary)\n            + \" | \" + \"Secondary WebSocket: \" + getWebSocketStates(webSocket.secondary)));\n    };\n\n    const isWebSocketState = function (ws, webSocketStateCode) {\n        return ws && ws.readyState === webSocketStateCode;\n    };\n\n    const isWebSocketOpen = function (ws) {\n        return isWebSocketState(ws, WebSocket.OPEN);\n    };\n\n    const isWebSocketClosed = function (ws) {\n        // undefined check is to address the limitation of testing framework\n        return ws === null || ws.readyState === undefined || isWebSocketState(ws, WebSocket.CLOSED);\n    };\n\n    /**\n     * This function is meant to handle the scenario when we have two web-sockets open\n     * in such a scenario we always select secondary web-socket since all future operations\n     * are supposed to be done by this secondary web-socket\n     */\n    const getDefaultWebSocket = function () {\n        if (webSocket.secondary !== null) {\n            return webSocket.secondary;\n        }\n        return webSocket.primary;\n    };\n\n    const isDefaultWebSocketOpen = function () {\n        return isWebSocketOpen(getDefaultWebSocket());\n    };\n\n    const sendHeartBeat = function () {\n        if (deepHeartbeatConfig.pendingResponse) {\n            sendInternalLogToServer(logger.debug(LOG_MESSAGES.NO_DEEP_HEARTBEAT));\n            // trigger deepHeartbeatFailure - no response is received \n            invokeCallbacks(callbacks.deepHeartbeatFailure, {\n                timestamp: Date.now(),\n                error: \"aws/ping response is not received\",\n            });\n\n            clearInterval(deepHeartbeatConfig.intervalHandle);\n            deepHeartbeatConfig.pendingResponse = false;\n        }\n        if (heartbeatConfig.pendingResponse) {\n            sendInternalLogToServer(logger.warn(LOG_MESSAGES.NO_HEARTBEAT));\n\n            clearInterval(heartbeatConfig.intervalHandle);\n            heartbeatConfig.intervalHandle = null;\n            heartbeatConfig.pendingResponse = false;\n            getWebSocketConnConfig().catch(() => {});\n            return;\n        }\n        if (isDefaultWebSocketOpen()) {\n            sendInternalLogToServer(logger.debug(LOG_MESSAGES.SENDING_DEEP_HEARTBEAT));\n            getDefaultWebSocket().send(createWebSocketPayload(ROUTE_KEY.DEEP_HEARTBEAT));\n            deepHeartbeatConfig.pendingResponse = true;\n\n            sendInternalLogToServer(logger.debug(LOG_MESSAGES.SENDING_HEARTBEAT));\n            getDefaultWebSocket().send(createWebSocketPayload(ROUTE_KEY.HEARTBEAT));\n            heartbeatConfig.pendingResponse = true;\n        } else {\n            sendInternalLogToServer(logger.debug(LOG_MESSAGES.FAILED_DEEP_HEARTBEAT));\n            // trigger deepHeartbeatFailure - message is unable to be sent to aws/ping because websocket connection is not established.\n            invokeCallbacks(callbacks.deepHeartbeatFailure, {\n                timestamp: Date.now(),\n                error: \"Unable to send message to aws/ping because websocket connection is not established.\"\n            });\n\n            sendInternalLogToServer(logger.warn(LOG_MESSAGES.FAILED_HEARTBEAT));\n\n            printWebSocketState(\"sendHeartBeat\");\n            getWebSocketConnConfig().catch(() => {});\n        }\n    };\n\n    const resetWebSocketState = function () {\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_RESET));\n        reconnectConfig.exponentialBackOffTime = 1000;\n        heartbeatConfig.pendingResponse = false;\n        deepHeartbeatConfig.pendingResponse = false;\n\n        reconnectConfig.reconnectWebSocket = true;\n\n        clearTimeout(reconnectConfig.lifeTimeTimeoutHandle);\n        clearInterval(heartbeatConfig.intervalHandle);\n        clearInterval(deepHeartbeatConfig.intervalHandle);\n        clearTimeout(reconnectConfig.exponentialTimeoutHandle);\n        clearTimeout(reconnectConfig.webSocketInitCheckerTimeoutId);\n\n        heartbeatConfig.intervalHandle = null;\n    };\n\n    const resetSubscriptions = function () {\n        topicSubscriptionConfig.consecutiveFailedSubscribeAttempts = 0;\n        topicSubscriptionConfig.consecutiveNoResponseRequest = 0;\n        clearInterval(topicSubscriptionConfig.responseCheckIntervalId);\n        clearInterval(topicSubscriptionConfig.reSubscribeIntervalId);\n    };\n\n    const resetMetrics = function () {\n        metrics.connectWebSocketRetryCount = 0;\n        metrics.connectionAttemptStartTime = null;\n        metrics.noOpenConnectionsTimestamp = null;\n    };\n\n    const webSocketOnOpen = function () {\n        // Mark connection as successful; reset the number of reconnect attempts to 0.\n        reconnectionClient.connected();\n\n        try {\n            sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_ESTABLISHED));\n\n            printWebSocketState(\"webSocketOnOpen\");\n            if (reconnectConfig.connState === null || reconnectConfig.connState === CONN_STATE.DISCONNECTED) {\n                invokeCallbacks(callbacks.connectionGain);\n            }\n            reconnectConfig.connState = CONN_STATE.CONNECTED;\n\n            // Report number of retries to open and record ws open time\n            const now = Date.now();\n            invokeCallbacks(callbacks.connectionOpen, {\n                connectWebSocketRetryCount: metrics.connectWebSocketRetryCount,\n                connectionAttemptStartTime: metrics.connectionAttemptStartTime,\n                noOpenConnectionsTimestamp: metrics.noOpenConnectionsTimestamp,\n                connectionEstablishedTime: now,\n                timeToConnect: now - metrics.connectionAttemptStartTime,\n                timeWithoutConnection:\n                    metrics.noOpenConnectionsTimestamp ? now - metrics.noOpenConnectionsTimestamp : null\n            });\n\n            resetMetrics();\n            resetWebSocketState();\n            getDefaultWebSocket().openTimestamp = Date.now(); // record open time\n\n            // early closure of primary web socket\n            if (topicSubscription.subscribed.size === 0 && isWebSocketOpen(webSocket.secondary)) {\n                closeSpecificWebSocket(webSocket.primary, \"[Primary WebSocket] Closing WebSocket\");\n            }\n            if (topicSubscription.subscribed.size > 0 || topicSubscription.pending.size > 0) {\n                if (isWebSocketOpen(webSocket.secondary)) {\n                    sendInternalLogToServer(logger.info(\"Subscribing secondary websocket to topics of primary websocket\"));\n                }\n                topicSubscription.subscribed.forEach(topic => {\n                    topicSubscription.subscriptionHistory.add(topic);\n                    topicSubscription.pending.add(topic);\n                });\n                topicSubscription.subscribed.clear();\n                subscribePendingTopics();\n            }\n\n            sendHeartBeat();\n            if (heartbeatConfig.intervalHandle !== null) {\n                clearInterval(heartbeatConfig.intervalHandle);\n            }\n            heartbeatConfig.intervalHandle = setInterval(sendHeartBeat, HEARTBEAT_INTERVAL_MS);\n\n            const webSocketLifetimeTimeout = webSocketConfig.connConfig.webSocketTransport.transportLifeTimeInSeconds * 1000;\n            sendInternalLogToServer(logger.debug(\"Scheduling WebSocket manager reconnection, after delay \" + webSocketLifetimeTimeout + \" ms\"));\n\n            reconnectConfig.lifeTimeTimeoutHandle = setTimeout(function () {\n                sendInternalLogToServer(logger.debug(\"Starting scheduled WebSocket manager reconnection\"));\n\n                getWebSocketConnConfig().catch(() => {});\n            }, webSocketLifetimeTimeout);\n        } catch (error) {\n            sendInternalLogToServer(logger.error(\"Error after establishing WebSocket connection\", error));\n        }\n    };\n\n    const webSocketOnClose = function (event, ws) {\n        const webSocketCloseDetails = {\n            openTimestamp: ws.openTimestamp,\n            closeTimestamp: Date.now(),\n            connectionDuration: Date.now() - ws.openTimestamp,\n            code: event.code,\n            reason: event.reason,\n            wasClean: event.wasClean\n        };\n        const closeEventDetails = `Close Code: ${webSocketCloseDetails.code} - Reason: ${webSocketCloseDetails.reason} - WasClean: ${webSocketCloseDetails.wasClean}`;\n        const connectionDetails = `OpenTimestamp: ${webSocketCloseDetails.openTimestamp} - CloseTimestamp: ${webSocketCloseDetails.closeTimestamp} - ConnectionDuration: ${webSocketCloseDetails.connectionDuration}`;\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_CLOSED, closeEventDetails));\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_DURATION, connectionDetails));\n\n        printWebSocketState(\"webSocketOnClose before-cleanup\");\n\n        invokeCallbacks(callbacks.connectionClose, webSocketCloseDetails);\n\n        if (isWebSocketClosed(webSocket.primary)) {\n            webSocket.primary = null;\n        }\n        if (isWebSocketClosed(webSocket.secondary)) {\n            webSocket.secondary = null;\n        }\n        if (!reconnectConfig.reconnectWebSocket) {\n            return;\n        }\n        if (!isWebSocketOpen(webSocket.primary) && !isWebSocketOpen(webSocket.secondary)) {\n            sendInternalLogToServer(logger.warn(\"Neither primary websocket and nor secondary websocket have open connections, attempting to re-establish connection\"));\n\n            if (reconnectConfig.connState === CONN_STATE.DISCONNECTED) {\n                /**\n                 * This check is required in the scenario where WS Server shuts-down and closes all active\n                 * WS Client connections and WS Server takes about a minute to become active again, in this\n                 * scenario WS Client's onClose is triggered and then WSM start reconnect logic immediately but all\n                 * connect request to WS Server would fail and WS Client's onError callback would be triggered\n                 * followed WS Client's onClose callback and hence \"connectionLost\" callback would be invoked several\n                 * times and this behavior is redundant\n                 */\n                sendInternalLogToServer(logger.info(\"Ignoring connectionLost callback invocation\"));\n            } else {\n                invokeCallbacks(callbacks.connectionLost, {\n                    openTimestamp: ws.openTimestamp,\n                    closeTimestamp: Date.now(),\n                    connectionDuration: Date.now() - ws.openTimestamp,\n                    code: event.code,\n                    reason: event.reason\n                });\n                metrics.noOpenConnectionsTimestamp = Date.now();\n            }\n            reconnectConfig.connState = CONN_STATE.DISCONNECTED;\n            getWebSocketConnConfig().catch(() => {});\n        } else if (isWebSocketClosed(webSocket.primary) && isWebSocketOpen(webSocket.secondary)) {\n            sendInternalLogToServer(logger.debug(\"[Primary] WebSocket Cleanly Closed\"));\n\n            webSocket.primary = webSocket.secondary;\n            webSocket.secondary = null;\n        }\n        printWebSocketState(\"webSocketOnClose after-cleanup\");\n    };\n\n    const webSocketOnError = function (event) {\n        printWebSocketState(\"webSocketOnError\");\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_ERROR, JSON.stringify(event)));\n        const isConnected = reconnectionClient.getIsConnected();\n\n        if (isConnected) {\n            getWebSocketConnConfig().catch(() => {});\n        } else {\n            reconnectionClient.retry();\n        }\n    };\n\n    const webSocketOnMessage = function (event) {\n        if (typeof event.data === \"undefined\" || event.data === \"\") {\n            sendInternalLogToServer(logger.warn(\"An empty message has been received on Websocket. Ignoring\"));\n            return;\n        }\n        const response = JSON.parse(event.data);\n\n        switch (response.topic) {\n\n            case ROUTE_KEY.SUBSCRIBE: {\n                sendInternalLogToServer(logger.debug(\"Subscription Message received from webSocket server\"));\n\n                topicSubscriptionConfig.requestCompleted = true;\n                topicSubscriptionConfig.consecutiveNoResponseRequest = 0;\n\n                if (response.content.status === \"success\") {\n                    topicSubscriptionConfig.consecutiveFailedSubscribeAttempts = 0;\n                    response.content.topics.forEach(topicName => {\n                        topicSubscription.subscriptionHistory.delete(topicName);\n                        topicSubscription.pending.delete(topicName);\n                        topicSubscription.subscribed.add(topicName);\n                    });\n                    if (topicSubscription.subscriptionHistory.size === 0) {\n                        if (isWebSocketOpen(webSocket.secondary)) {\n                            sendInternalLogToServer(logger.debug(\"Successfully subscribed secondary websocket to all topics of primary websocket\"));\n\n                            closeSpecificWebSocket(webSocket.primary, \"[Primary WebSocket] Closing WebSocket\");\n                        }\n                    } else {\n                        subscribePendingTopics();\n                    }\n                    invokeCallbacks(callbacks.subscriptionUpdate, response);\n\n                } else {\n                    clearInterval(topicSubscriptionConfig.reSubscribeIntervalId);\n                    ++topicSubscriptionConfig.consecutiveFailedSubscribeAttempts;\n                    if (topicSubscriptionConfig.consecutiveFailedSubscribeAttempts === MAX_CONSECUTIVE_FAILED_SUB_ATTEMPTS) {\n                        invokeCallbacks(callbacks.subscriptionFailure, response);\n                        topicSubscriptionConfig.consecutiveFailedSubscribeAttempts = 0;\n                        return;\n                    }\n                    topicSubscriptionConfig.reSubscribeIntervalId = setInterval(function () {\n                        subscribePendingTopics();\n                    }, TOPIC_SUBSCRIPTION_RETRY_INTERVAL_MS);\n                }\n                break;\n            }\n            case ROUTE_KEY.HEARTBEAT: {\n                sendInternalLogToServer(logger.debug(LOG_MESSAGES.HEARTBEAT_RECEIVED));\n                heartbeatConfig.pendingResponse = false;\n                if (heartbeatConfig.intervalHandle === null) {\n                    heartbeatConfig.intervalHandle = setInterval(sendHeartBeat, HEARTBEAT_INTERVAL_MS);\n                }\n                break;\n            }\n            case ROUTE_KEY.DEEP_HEARTBEAT: {\n                sendInternalLogToServer(logger.debug(LOG_MESSAGES.DEEP_HEARTBEAT_RECEIVED));\n                deepHeartbeatConfig.pendingResponse = false;\n                \n                if (response.statusCode === 200) {// trigger deepHeartbeatSuccess if 200 response is received\n                    invokeCallbacks(callbacks.deepHeartbeatSuccess, {\n                        timestamp: Date.now(),\n                    });\n                } else {//trigger deepHeartbeatFailure if 500 response is received\n                    invokeCallbacks(callbacks.deepHeartbeatFailure, {\n                        timestamp: Date.now(),\n                        statusCode: response.statusCode,\n                        statusContent: response.statusContent,\n                    });\n                }\n                break;\n            }\n            default: {\n                if (response.topic) {\n                    sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_MESSAGE_RECEIVED, response.topic));\n\n                    if (isWebSocketOpen(webSocket.primary) && isWebSocketOpen(webSocket.secondary)\n                        && topicSubscription.subscriptionHistory.size === 0 && this === webSocket.primary) {\n                        /**\n                         * This block is to handle scenario when both primary and secondary socket have subscribed to\n                         * a common topic but we are facing difficulty in closing the primary socket, then in this\n                         * situation messages will be received by both primary and secondary web socket\n                         */\n                        sendInternalLogToServer(logger.warn(\"Ignoring Message for Topic \" + response.topic + \", to avoid duplicates\"));\n\n                        return;\n                    }\n\n                    if (callbacks.allMessage.size === 0 && callbacks.topic.size === 0) {\n                        sendInternalLogToServer(logger.warn('No registered callback listener for Topic', response.topic));\n\n                        return;\n                    }\n                    sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_MESSAGE_SUCCESS, response.topic));\n                    invokeCallbacks(callbacks.allMessage, response);\n                    if (callbacks.topic.has(response.topic)) {\n                        invokeCallbacks(callbacks.topic.get(response.topic), response);\n                    }\n\n                } else if (response.message) {\n                    sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_MESSAGE_ERROR, response));\n\n                    // trigger topicFailure if Forbidden message OR Timeout message is received\n                    invokeCallbacks(callbacks.topicFailure, {\n                        timestamp: Date.now(),\n                        errorMessage: response.message,\n                        connectionId: response.connectionId,\n                        requestId: response.requestId,\n                    });\n                } else {\n                    sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_MESSAGE_INVALID, response));\n                }\n            }\n        }\n    };\n\n    const subscribePendingTopics = function () {\n        if (topicSubscriptionConfig.consecutiveNoResponseRequest > MAX_CONSECUTIVE_SUB_REQUEST_WITH_NO_RESPONSE) {\n            sendInternalLogToServer(logger.warn(\"Ignoring subscribePendingTopics since we have exhausted max subscription retries with no response\"));\n\n            invokeCallbacks(callbacks.subscriptionFailure, Utils.getSubscriptionResponse(ROUTE_KEY.SUBSCRIBE, false, Array.from(topicSubscription.pending)));\n            return;\n        }\n        if (!isDefaultWebSocketOpen()) {\n            sendInternalLogToServer(logger.warn(\"Ignoring subscribePendingTopics call since Default WebSocket is not open\"));\n\n            return;\n        }\n        if (Array.from(topicSubscription.pending).length === 0) {\n            return;\n        }\n\n        clearInterval(topicSubscriptionConfig.responseCheckIntervalId);\n\n        getDefaultWebSocket().send(createWebSocketPayload(ROUTE_KEY.SUBSCRIBE, {\n            \"topics\": Array.from(topicSubscription.pending)\n        }));\n        topicSubscriptionConfig.requestCompleted = false;\n\n        // This callback ensure that some response was received for subscription request\n        topicSubscriptionConfig.responseCheckIntervalId = setInterval(function () {\n            if (!topicSubscriptionConfig.requestCompleted) {\n                ++topicSubscriptionConfig.consecutiveNoResponseRequest;\n                subscribePendingTopics();\n            }\n        }, MAX_WAIT_TIME_SUB_REQUEST_WITH_NO_RESPONSE_MS);\n    };\n\n    const closeSpecificWebSocket = function (ws, reason) {\n        if (isWebSocketState(ws, WebSocket.CONNECTING) || isWebSocketState(ws, WebSocket.OPEN)) {\n            ws.close(1000, reason);\n        } else {\n            sendInternalLogToServer(logger.warn(\"Ignoring WebSocket Close request, WebSocket State: \" + getWebSocketStates(ws)));\n        }\n    };\n\n    const closeWebSocket = function (reason) {\n        closeSpecificWebSocket(webSocket.primary, \"[Primary] WebSocket \" + reason);\n        closeSpecificWebSocket(webSocket.secondary, \"[Secondary] WebSocket \" + reason);\n    };\n\n    const retryWebSocketInitialization = function () {\n        metrics.connectWebSocketRetryCount++;\n        const waitTime = Utils.addJitter(reconnectConfig.exponentialBackOffTime, WEBSOCKET_REINIT_JITTER);\n        if (Date.now() + waitTime <= webSocketConfig.connConfig.urlConnValidTime) {\n            sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_REINITIALIZATION + waitTime + \" ms\"));\n\n            reconnectConfig.exponentialTimeoutHandle = setTimeout(() => initWebSocket(), waitTime);\n            reconnectConfig.exponentialBackOffTime *= 2;\n        } else {\n            sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_REINITIALIZATION_TIMEOUT));\n\n            getWebSocketConnConfig().catch(() => {});\n        }\n    };\n\n    const terminateWebSocketManager = function (response) {\n        resetWebSocketState();\n        resetSubscriptions();\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_INITIALIZATION_FAILED, response));\n\n        reconnectConfig.websocketInitFailed = true;\n        closeWebSocket(LOG_MESSAGES.WEBSOCKET_TERMINATED);\n        clearInterval(networkConnectivityChecker);\n        invokeCallbacks(callbacks.initFailure, {\n            connectWebSocketRetryCount: metrics.connectWebSocketRetryCount,\n            connectionAttemptStartTime: metrics.connectionAttemptStartTime,\n            reason: response\n        });\n        resetMetrics();\n    };\n\n    const createWebSocketPayload = function (key, content) {\n        return JSON.stringify({\n            \"topic\": key,\n            \"content\": content\n        });\n    };\n\n    const sendMessage = function (payload) {\n        Utils.assertIsObject(payload, \"payload\");\n        if (payload.topic === undefined || invalidSendMessageRouteKeys.has(payload.topic)) {\n            sendInternalLogToServer(logger.warn(\"Cannot send message, Invalid topic: \" + payload.topic));\n\n            return;\n        }\n        try {\n            payload = JSON.stringify(payload);\n        } catch (error) {\n            sendInternalLogToServer(logger.warn(\"Error stringify message\", payload));\n\n            return;\n        }\n        if (isDefaultWebSocketOpen()) {\n            getDefaultWebSocket().send(payload);\n        } else {\n            sendInternalLogToServer(logger.warn(\"Cannot send message, web socket connection is not open\"));\n        }\n    };\n\n    const subscribeTopics = function (topics) {\n        Utils.assertNotNull(topics, 'topics');\n        Utils.assertIsList(topics);\n\n        topics.forEach(topic => {\n            if (!topicSubscription.subscribed.has(topic)) {\n                topicSubscription.pending.add(topic);\n            }\n        });\n        // This ensure all participant-request to subscribe to topic chat are served at least once\n        topicSubscriptionConfig.consecutiveNoResponseRequest = 0;\n        subscribePendingTopics();\n    };\n\n    const validWebSocketConnConfig = function (connConfig) {\n        if (Utils.isObject(connConfig) && Utils.isObject(connConfig.webSocketTransport)\n            && Utils.isNonEmptyString(connConfig.webSocketTransport.url)\n            && Utils.validWSUrl(connConfig.webSocketTransport.url) &&\n            connConfig.webSocketTransport.transportLifeTimeInSeconds * 1000 >= MIN_WEBSOCKET_LIFETIME_MS) {\n            return true;\n        }\n        sendInternalLogToServer(logger.error(\"Invalid WebSocket Connection Configuration\", connConfig));\n\n        return false;\n    };\n\n    const getWebSocketConnConfig = function () {\n        if (!Utils.isNetworkOnline()) {\n            sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.NETWORK_OFFLINE_WARNING));\n            return Promise.resolve({ webSocketConnectionFailed: true });\n        }\n        if (reconnectConfig.websocketInitFailed) {\n            sendInternalLogToServer(logger.debug(\"WebSocket Init had failed, ignoring this getWebSocketConnConfig request\"));\n            return Promise.resolve({ webSocketConnectionFailed: true });\n        }\n        if (!webSocketConfig.promiseCompleted) {\n            sendInternalLogToServer(logger.debug(\"There is an ongoing getWebSocketConnConfig request, this request will be ignored\"));\n            return Promise.resolve({ webSocketConnectionFailed: true });\n        }\n        resetWebSocketState();\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_NEW_CONNECTION));\n\n        metrics.connectionAttemptStartTime = metrics.connectionAttemptStartTime || Date.now();\n        webSocketConfig.promiseCompleted = false;\n        webSocketConfig.promiseHandle = callbacks.getWebSocketTransport();\n        return webSocketConfig.promiseHandle\n            .then(function (response) {\n                webSocketConfig.promiseCompleted = true;\n                sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_SUCCESS));\n\n                if (!validWebSocketConnConfig(response)) {\n                    terminateWebSocketManager(\"Invalid WebSocket connection configuration: \" + response);\n                    return { webSocketConnectionFailed: true };\n                }\n                webSocketConfig.connConfig = response;\n                // Ideally this URL validity time should be provided by server\n                webSocketConfig.connConfig.urlConnValidTime = Date.now() + WEBSOCKET_URL_VALID_TIME_MS;\n                return initWebSocket();\n            },\n                function (reason) {\n                    webSocketConfig.promiseCompleted = true;\n                    sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_FAILURE, reason));\n\n                    // If our connection fails because of network failure, we want to retry\n                    if (Utils.isNetworkFailure(reason)) {\n                        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_RETRY, reason));\n                        reconnectionClient.retry();\n                    } else {\n                        // If we're not going to retry, we should terminate WSM\n                        terminateWebSocketManager(\"Failed to fetch webSocket connection configuration: \" + JSON.stringify(reason));\n                    }\n                    return { webSocketConnectionFailed: true };\n                });\n    };\n\n    const initWebSocket = function () {\n        if (reconnectConfig.websocketInitFailed) {\n            sendInternalLogToServer(logger.info(\"web-socket initializing had failed, aborting re-init\"));\n\n            return { webSocketConnectionFailed: true };\n        }\n        if (!Utils.isNetworkOnline()) {\n            sendInternalLogToServer(logger.warn(\"System is offline aborting web-socket init\"));\n\n            return { webSocketConnectionFailed: true };\n        }\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_INIT));\n\n        printWebSocketState(\"initWebSocket\");\n        try {\n            if (validWebSocketConnConfig(webSocketConfig.connConfig)) {\n                let ws = null;\n                if (isWebSocketOpen(webSocket.primary)) {\n                    sendInternalLogToServer(logger.debug(\"Primary Socket connection is already open\"));\n\n                    if (!isWebSocketState(webSocket.secondary, WebSocket.CONNECTING)) {\n                        sendInternalLogToServer(logger.debug(\"Establishing a secondary web-socket connection\"));\n                        reconnectionClient.numAttempts = 0;\n                        webSocket.secondary = getNewWebSocket();\n                    }\n                    ws = webSocket.secondary;\n                } else {\n                    if (!isWebSocketState(webSocket.primary, WebSocket.CONNECTING)) {\n                        sendInternalLogToServer(logger.debug(\"Establishing a primary web-socket connection\"));\n\n                        webSocket.primary = getNewWebSocket();\n                    }\n                    ws = webSocket.primary;\n                }\n\n                // WebSocket creation is async task hence we Wait for 1sec before any potential retry\n                reconnectConfig.webSocketInitCheckerTimeoutId = setTimeout(function () {\n                    if (!isWebSocketOpen(ws)) {\n                        retryWebSocketInitialization();\n                    }\n                }, 1000);\n                return { webSocketConnectionFailed: false };\n            }\n        } catch (error) {\n            sendInternalLogToServer(logger.error(\"Error Initializing web-socket-manager\", error));\n\n            terminateWebSocketManager(\"Failed to initialize new WebSocket: \" + error.message);\n            return { webSocketConnectionFailed: true };\n        }\n    };\n\n    const getNewWebSocket = function () {\n        let ws = new WebSocket(webSocketConfig.connConfig.webSocketTransport.url);\n        ws.addEventListener(\"open\", webSocketOnOpen);\n        ws.addEventListener(\"message\", webSocketOnMessage);\n        ws.addEventListener(\"error\", webSocketOnError);\n        ws.addEventListener(\"close\", event => webSocketOnClose(event, ws));\n        return ws;\n    };\n\n    const onConnectionOpen = function (cb) {\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_OPEN));\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.connectionOpen.add(cb);\n        return () => callbacks.connectionOpen.delete(cb);\n    };\n\n    const onConnectionClose = function (cb) {\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_CLOSE));\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.connectionClose.add(cb);\n        return () => callbacks.connectionClose.delete(cb);\n    };\n\n    const onConnectionGain = function (cb) {\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_GAIN));\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.connectionGain.add(cb);\n        if (isDefaultWebSocketOpen()) {\n            cb();\n        }\n        return () => callbacks.connectionGain.delete(cb);\n    };\n\n    const onConnectionLost = function (cb) {\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_LOST));\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.connectionLost.add(cb);\n        if (reconnectConfig.connState === CONN_STATE.DISCONNECTED) {\n            cb();\n        }\n        return () => callbacks.connectionLost.delete(cb);\n    };\n\n    const onInitFailure = function (cb) {\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_INIT_FAILURE));\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.initFailure.add(cb);\n        if (reconnectConfig.websocketInitFailed) {\n            cb();\n        }\n        return () => callbacks.initFailure.delete(cb);\n    };\n\n    const init = function (transportHandle) {\n        Utils.assertTrue(Utils.isFunction(transportHandle), 'transportHandle must be a function');\n        if (callbacks.getWebSocketTransport !== null) {\n            sendInternalLogToServer(logger.warn(\"Web Socket Manager was already initialized\"));\n            return;\n        }\n        callbacks.getWebSocketTransport = transportHandle;\n\n        return getWebSocketConnConfig();\n    };\n\n    const onSubscriptionUpdate = function (cb) {\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.subscriptionUpdate.add(cb);\n        return () => callbacks.subscriptionUpdate.delete(cb);\n    };\n\n    const onSubscriptionFailure = function (cb) {\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.WEBSOCKET_SUBSCRIPTION_FAILURE));\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.subscriptionFailure.add(cb);\n        return () => callbacks.subscriptionFailure.delete(cb);\n    };\n\n    const onMessage = function (topicName, cb) {\n        Utils.assertNotNull(topicName, 'topicName');\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        if (callbacks.topic.has(topicName)) {\n            callbacks.topic.get(topicName).add(cb);\n        } else {\n            callbacks.topic.set(topicName, new Set([cb]));\n        }\n        return () => callbacks.topic.get(topicName).delete(cb);\n    };\n\n    const onAllMessage = function (cb) {\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.allMessage.add(cb);\n        return () => callbacks.allMessage.delete(cb);\n    };\n\n    const sendInternalLogToServer = function (logEntry) {\n        if (logEntry && typeof logEntry.sendInternalLogToServer === \"function\")\n            logEntry.sendInternalLogToServer();\n\n        return logEntry;\n    };\n\n    const onDeepHeartbeatSuccess = function (cb) {\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.DEEP_HEARTBEAT_SUCCESS));\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.deepHeartbeatSuccess.add(cb);\n        return () => callbacks.deepHeartbeatSuccess.delete(cb);\n    };\n\n    const onDeepHeartbeatFailure = function (cb) {\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.DEEP_HEARTBEAT_FAILURE));\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.deepHeartbeatFailure.add(cb);\n        return () => callbacks.deepHeartbeatFailure.delete(cb);\n    };\n\n    const onTopicFailure = function (cb) {\n        sendInternalLogToServer(logger.advancedLog(LOG_MESSAGES.TOPIC_FAILURE));\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.topicFailure.add(cb);\n        return () => callbacks.topicFailure.delete(cb);\n    };\n\n    this.init = init;\n    this.onInitFailure = onInitFailure;\n    this.onConnectionOpen = onConnectionOpen;\n    this.onConnectionClose = onConnectionClose;\n    this.onConnectionGain = onConnectionGain;\n    this.onConnectionLost = onConnectionLost;\n    this.onSubscriptionUpdate = onSubscriptionUpdate;\n    this.onSubscriptionFailure = onSubscriptionFailure;\n    this.onMessage = onMessage;\n    this.onAllMessage = onAllMessage;\n    this.subscribeTopics = subscribeTopics;\n    this.sendMessage = sendMessage;\n    this.onDeepHeartbeatSuccess = onDeepHeartbeatSuccess;\n    this.onDeepHeartbeatFailure = onDeepHeartbeatFailure;\n    this.onTopicFailure = onTopicFailure;\n\n    this.closeWebSocket = function () {\n        resetWebSocketState();\n        resetSubscriptions();\n        reconnectConfig.reconnectWebSocket = false;\n        clearInterval(networkConnectivityChecker);\n        closeWebSocket(\"User request to close WebSocket\");\n    };\n\n    this.terminateWebSocketManager = terminateWebSocketManager;\n};\n\nconst WebSocketManagerConstructor = (logMetaData) => {\n    if (!logManagerInstance) {\n        logManagerInstance = new LogManagerImpl(logMetaData);\n    }\n    if (!logManagerInstance.hasLogMetaData()) {\n        logManagerInstance.setLogMetaData(logMetaData);\n    }\n    return new WebSocketManager();\n};\n\nconst setGlobalConfig = config => {\n    const loggerConfig = config && config.loggerConfig;\n    if (!logManagerInstance) {\n        logManagerInstance = new LogManagerImpl();\n    }\n    logManagerInstance.updateLoggerConfig(loggerConfig);\n\n    const webSocketManagerConfig = config && config.webSocketManagerConfig;\n    const customIsNetworkOnline = webSocketManagerConfig && webSocketManagerConfig.isNetworkOnline;\n    if (customIsNetworkOnline && typeof customIsNetworkOnline === \"function\") {\n        Utils.isNetworkOnline = customIsNetworkOnline;\n    }\n};\n\nconst WebSocketManagerObject = {\n    create: WebSocketManagerConstructor,\n    setGlobalConfig: setGlobalConfig,\n    LogLevel: LogLevel,\n    Logger: Logger,\n};\n\nexport { WebSocketManagerObject };\n","/*eslint no-unused-vars: \"off\"*/\nimport { WebSocketManagerObject } from \"./webSocketManager\";\n\nglobal.connect = global.connect || {};\nconnect.WebSocketManager = WebSocketManagerObject;\n\nexport const WebSocketManager = WebSocketManagerObject;\n\nexport default WebSocketManager;"],"names":["re","not_string","not_bool","not_type","not_primitive","number","numeric_arg","json","not_json","text","modulo","placeholder","key","key_access","index_access","sign","sprintf","parse_tree","argv","arg","i","k","ph","pad","pad_character","pad_length","is_positive","cursor","tree_length","length","output","keys","undefined","Error","param_no","test","type","Function","isNaN","TypeError","parseInt","toString","String","fromCharCode","JSON","stringify","width","precision","parseFloat","toExponential","toFixed","Number","toPrecision","substring","Object","prototype","call","slice","toLowerCase","valueOf","toUpperCase","replace","pad_char","charAt","repeat","align","sprintf_format","fmt","sprintf_cache","match","_fmt","arg_names","exec","push","SyntaxError","field_list","replacement_field","field_match","sprintf_parse","arguments","vsprintf","apply","concat","create","exports","window","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","_typeof","obj","Symbol","iterator","constructor","LOG_MESSAGES","ROUTE_KEY","CONN_STATE","Utils","premise","message","value","name","assertTrue","Array","isArray","wsRegex","RegExp","localWsRegex","validWSUrl","wsUrl","getSubscriptionResponse","routeKey","isSuccess","topicList","topic","content","status","topics","assertIsObject","isObject","addJitter","base","maxJitter","Math","min","random","floor","isNetworkOnline","navigator","onLine","isNetworkFailure","reason","_debug","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_getPrototypeOf","getPrototypeOf","_defineProperty","defineProperty","enumerable","configurable","writable","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_createClass","protoProps","staticProps","self","ReferenceError","Logger","data","DEFAULT_PREFIX","LogLevel","DEBUG","INFO","WARN","ERROR","ADVANCED_LOG","LogManagerImpl","logMetaData","this","updateLoggerConfig","level","logStatement","hasClientLogger","log1","removeCircularReference","log2","logStringValue","getLogLevelByValue","_clientLogger","debug","info","warn","error","_advancedLogWriter","_level","options","prefix","setLogMetaData","LoggerWrapperImpl","inputConfig","config","advancedLogWriter","customizedLogger","useClientLogger","logger","selectLogger","_logsDestination","useDefaultLogger","createConsoleLogger","LoggerWrapper","subClass","superClass","logManagerInstance","excludeTimestamp","logManager","args","_log","isLevelEnabled","writeToClientLogger","_shouldLog","_convertToSingleStatement","_writeToClientLogger","date","Date","now","toISOString","index","_convertToString","isString","isFunction","toStringResult","startsWith","console","seen","WeakSet","has","add","RetryProvider","executor","defaultRetry","numAttempts","hasActiveReconnection","setTimeout","_execute","_getDelay","calculatedDelay","pow","WebSocketManager","getLogger","online","webSocket","primary","secondary","reconnectConfig","reconnectWebSocket","websocketInitFailed","exponentialBackOffTime","exponentialTimeoutHandle","lifeTimeTimeoutHandle","webSocketInitCheckerTimeoutId","connState","metrics","connectWebSocketRetryCount","connectionAttemptStartTime","noOpenConnectionsTimestamp","heartbeatConfig","pendingResponse","intervalHandle","deepHeartbeatConfig","callbacks","initFailure","Set","getWebSocketTransport","subscriptionUpdate","subscriptionFailure","Map","allMessage","connectionGain","connectionLost","connectionOpen","connectionClose","deepHeartbeatSuccess","deepHeartbeatFailure","topicFailure","webSocketConfig","connConfig","promiseHandle","promiseCompleted","topicSubscription","subscribed","pending","subscriptionHistory","topicSubscriptionConfig","responseCheckIntervalId","requestCompleted","reSubscribeIntervalId","consecutiveFailedSubscribeAttempts","consecutiveNoResponseRequest","reconnectionClient","getWebSocketConnConfig","invalidSendMessageRouteKeys","networkConnectivityChecker","setInterval","sendInternalLogToServer","advancedLog","ws","getDefaultWebSocket","isWebSocketState","WebSocket","CLOSING","CLOSED","invokeCallbacks","response","forEach","callback","getWebSocketStates","readyState","CONNECTING","OPEN","printWebSocketState","event","webSocketStateCode","isWebSocketOpen","isWebSocketClosed","isDefaultWebSocketOpen","sendHeartBeat","timestamp","clearInterval","send","createWebSocketPayload","resetWebSocketState","clearTimeout","resetSubscriptions","resetMetrics","webSocketOnOpen","connected","connectionEstablishedTime","timeToConnect","timeWithoutConnection","openTimestamp","size","closeSpecificWebSocket","clear","subscribePendingTopics","webSocketLifetimeTimeout","webSocketTransport","transportLifeTimeInSeconds","webSocketOnError","getIsConnected","retry","webSocketOnMessage","parse","topicName","statusCode","statusContent","get","errorMessage","connectionId","requestId","from","close","closeWebSocket","terminateWebSocketManager","validWebSocketConnConfig","isNonEmptyString","url","Promise","resolve","webSocketConnectionFailed","then","urlConnValidTime","initWebSocket","getNewWebSocket","waitTime","retryWebSocketInitialization","addEventListener","webSocketCloseDetails","closeTimestamp","connectionDuration","code","wasClean","closeEventDetails","connectionDetails","webSocketOnClose","logEntry","init","transportHandle","onInitFailure","cb","onConnectionOpen","onConnectionClose","onConnectionGain","onConnectionLost","onSubscriptionUpdate","onSubscriptionFailure","onMessage","assertNotNull","set","onAllMessage","subscribeTopics","assertIsList","sendMessage","payload","onDeepHeartbeatSuccess","onDeepHeartbeatFailure","onTopicFailure","WebSocketManagerObject","hasLogMetaData","setGlobalConfig","loggerConfig","webSocketManagerConfig","customIsNetworkOnline","global","connect"],"sourceRoot":""}